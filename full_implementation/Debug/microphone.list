
microphone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a34  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005bf8  08005bf8  00015bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c18  08005c18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c18  08005c18  00015c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c20  08005c20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c20  08005c20  00015c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c24  08005c24  00015c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011c20  20000010  08005c34  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011c30  08005c34  00021c30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011759  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ac  00000000  00000000  00031795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00033948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  000347b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022781  00000000  00000000  00035568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011692  00000000  00000000  00057ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3c36  00000000  00000000  0006937b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013cfb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d3c  00000000  00000000  0013d004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005be0 	.word	0x08005be0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08005be0 	.word	0x08005be0

08000204 <__aeabi_frsub>:
 8000204:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__addsf3>
 800020a:	bf00      	nop

0800020c <__aeabi_fsub>:
 800020c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000210 <__addsf3>:
 8000210:	0042      	lsls	r2, r0, #1
 8000212:	bf1f      	itttt	ne
 8000214:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000218:	ea92 0f03 	teqne	r2, r3
 800021c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000220:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000224:	d06a      	beq.n	80002fc <__addsf3+0xec>
 8000226:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800022a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800022e:	bfc1      	itttt	gt
 8000230:	18d2      	addgt	r2, r2, r3
 8000232:	4041      	eorgt	r1, r0
 8000234:	4048      	eorgt	r0, r1
 8000236:	4041      	eorgt	r1, r0
 8000238:	bfb8      	it	lt
 800023a:	425b      	neglt	r3, r3
 800023c:	2b19      	cmp	r3, #25
 800023e:	bf88      	it	hi
 8000240:	4770      	bxhi	lr
 8000242:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000246:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800024a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800024e:	bf18      	it	ne
 8000250:	4240      	negne	r0, r0
 8000252:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000256:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800025a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800025e:	bf18      	it	ne
 8000260:	4249      	negne	r1, r1
 8000262:	ea92 0f03 	teq	r2, r3
 8000266:	d03f      	beq.n	80002e8 <__addsf3+0xd8>
 8000268:	f1a2 0201 	sub.w	r2, r2, #1
 800026c:	fa41 fc03 	asr.w	ip, r1, r3
 8000270:	eb10 000c 	adds.w	r0, r0, ip
 8000274:	f1c3 0320 	rsb	r3, r3, #32
 8000278:	fa01 f103 	lsl.w	r1, r1, r3
 800027c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000280:	d502      	bpl.n	8000288 <__addsf3+0x78>
 8000282:	4249      	negs	r1, r1
 8000284:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000288:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800028c:	d313      	bcc.n	80002b6 <__addsf3+0xa6>
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d306      	bcc.n	80002a2 <__addsf3+0x92>
 8000294:	0840      	lsrs	r0, r0, #1
 8000296:	ea4f 0131 	mov.w	r1, r1, rrx
 800029a:	f102 0201 	add.w	r2, r2, #1
 800029e:	2afe      	cmp	r2, #254	; 0xfe
 80002a0:	d251      	bcs.n	8000346 <__addsf3+0x136>
 80002a2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002aa:	bf08      	it	eq
 80002ac:	f020 0001 	biceq.w	r0, r0, #1
 80002b0:	ea40 0003 	orr.w	r0, r0, r3
 80002b4:	4770      	bx	lr
 80002b6:	0049      	lsls	r1, r1, #1
 80002b8:	eb40 0000 	adc.w	r0, r0, r0
 80002bc:	3a01      	subs	r2, #1
 80002be:	bf28      	it	cs
 80002c0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002c4:	d2ed      	bcs.n	80002a2 <__addsf3+0x92>
 80002c6:	fab0 fc80 	clz	ip, r0
 80002ca:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ce:	ebb2 020c 	subs.w	r2, r2, ip
 80002d2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002d6:	bfaa      	itet	ge
 80002d8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002dc:	4252      	neglt	r2, r2
 80002de:	4318      	orrge	r0, r3
 80002e0:	bfbc      	itt	lt
 80002e2:	40d0      	lsrlt	r0, r2
 80002e4:	4318      	orrlt	r0, r3
 80002e6:	4770      	bx	lr
 80002e8:	f092 0f00 	teq	r2, #0
 80002ec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002f0:	bf06      	itte	eq
 80002f2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002f6:	3201      	addeq	r2, #1
 80002f8:	3b01      	subne	r3, #1
 80002fa:	e7b5      	b.n	8000268 <__addsf3+0x58>
 80002fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000300:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000304:	bf18      	it	ne
 8000306:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800030a:	d021      	beq.n	8000350 <__addsf3+0x140>
 800030c:	ea92 0f03 	teq	r2, r3
 8000310:	d004      	beq.n	800031c <__addsf3+0x10c>
 8000312:	f092 0f00 	teq	r2, #0
 8000316:	bf08      	it	eq
 8000318:	4608      	moveq	r0, r1
 800031a:	4770      	bx	lr
 800031c:	ea90 0f01 	teq	r0, r1
 8000320:	bf1c      	itt	ne
 8000322:	2000      	movne	r0, #0
 8000324:	4770      	bxne	lr
 8000326:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800032a:	d104      	bne.n	8000336 <__addsf3+0x126>
 800032c:	0040      	lsls	r0, r0, #1
 800032e:	bf28      	it	cs
 8000330:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000334:	4770      	bx	lr
 8000336:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800033a:	bf3c      	itt	cc
 800033c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000340:	4770      	bxcc	lr
 8000342:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000346:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800034a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800034e:	4770      	bx	lr
 8000350:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000354:	bf16      	itet	ne
 8000356:	4608      	movne	r0, r1
 8000358:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800035c:	4601      	movne	r1, r0
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	bf06      	itte	eq
 8000362:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000366:	ea90 0f01 	teqeq	r0, r1
 800036a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800036e:	4770      	bx	lr

08000370 <__aeabi_ui2f>:
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e004      	b.n	8000380 <__aeabi_i2f+0x8>
 8000376:	bf00      	nop

08000378 <__aeabi_i2f>:
 8000378:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800037c:	bf48      	it	mi
 800037e:	4240      	negmi	r0, r0
 8000380:	ea5f 0c00 	movs.w	ip, r0
 8000384:	bf08      	it	eq
 8000386:	4770      	bxeq	lr
 8000388:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800038c:	4601      	mov	r1, r0
 800038e:	f04f 0000 	mov.w	r0, #0
 8000392:	e01c      	b.n	80003ce <__aeabi_l2f+0x2a>

08000394 <__aeabi_ul2f>:
 8000394:	ea50 0201 	orrs.w	r2, r0, r1
 8000398:	bf08      	it	eq
 800039a:	4770      	bxeq	lr
 800039c:	f04f 0300 	mov.w	r3, #0
 80003a0:	e00a      	b.n	80003b8 <__aeabi_l2f+0x14>
 80003a2:	bf00      	nop

080003a4 <__aeabi_l2f>:
 80003a4:	ea50 0201 	orrs.w	r2, r0, r1
 80003a8:	bf08      	it	eq
 80003aa:	4770      	bxeq	lr
 80003ac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003b0:	d502      	bpl.n	80003b8 <__aeabi_l2f+0x14>
 80003b2:	4240      	negs	r0, r0
 80003b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003b8:	ea5f 0c01 	movs.w	ip, r1
 80003bc:	bf02      	ittt	eq
 80003be:	4684      	moveq	ip, r0
 80003c0:	4601      	moveq	r1, r0
 80003c2:	2000      	moveq	r0, #0
 80003c4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003c8:	bf08      	it	eq
 80003ca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003d2:	fabc f28c 	clz	r2, ip
 80003d6:	3a08      	subs	r2, #8
 80003d8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003dc:	db10      	blt.n	8000400 <__aeabi_l2f+0x5c>
 80003de:	fa01 fc02 	lsl.w	ip, r1, r2
 80003e2:	4463      	add	r3, ip
 80003e4:	fa00 fc02 	lsl.w	ip, r0, r2
 80003e8:	f1c2 0220 	rsb	r2, r2, #32
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f0:	fa20 f202 	lsr.w	r2, r0, r2
 80003f4:	eb43 0002 	adc.w	r0, r3, r2
 80003f8:	bf08      	it	eq
 80003fa:	f020 0001 	biceq.w	r0, r0, #1
 80003fe:	4770      	bx	lr
 8000400:	f102 0220 	add.w	r2, r2, #32
 8000404:	fa01 fc02 	lsl.w	ip, r1, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000410:	fa21 f202 	lsr.w	r2, r1, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800041e:	4770      	bx	lr

08000420 <__aeabi_uldivmod>:
 8000420:	b953      	cbnz	r3, 8000438 <__aeabi_uldivmod+0x18>
 8000422:	b94a      	cbnz	r2, 8000438 <__aeabi_uldivmod+0x18>
 8000424:	2900      	cmp	r1, #0
 8000426:	bf08      	it	eq
 8000428:	2800      	cmpeq	r0, #0
 800042a:	bf1c      	itt	ne
 800042c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000430:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000434:	f000 b96e 	b.w	8000714 <__aeabi_idiv0>
 8000438:	f1ad 0c08 	sub.w	ip, sp, #8
 800043c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000440:	f000 f806 	bl	8000450 <__udivmoddi4>
 8000444:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800044c:	b004      	add	sp, #16
 800044e:	4770      	bx	lr

08000450 <__udivmoddi4>:
 8000450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000454:	9d08      	ldr	r5, [sp, #32]
 8000456:	4604      	mov	r4, r0
 8000458:	468c      	mov	ip, r1
 800045a:	2b00      	cmp	r3, #0
 800045c:	f040 8083 	bne.w	8000566 <__udivmoddi4+0x116>
 8000460:	428a      	cmp	r2, r1
 8000462:	4617      	mov	r7, r2
 8000464:	d947      	bls.n	80004f6 <__udivmoddi4+0xa6>
 8000466:	fab2 f282 	clz	r2, r2
 800046a:	b142      	cbz	r2, 800047e <__udivmoddi4+0x2e>
 800046c:	f1c2 0020 	rsb	r0, r2, #32
 8000470:	fa24 f000 	lsr.w	r0, r4, r0
 8000474:	4091      	lsls	r1, r2
 8000476:	4097      	lsls	r7, r2
 8000478:	ea40 0c01 	orr.w	ip, r0, r1
 800047c:	4094      	lsls	r4, r2
 800047e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000482:	0c23      	lsrs	r3, r4, #16
 8000484:	fbbc f6f8 	udiv	r6, ip, r8
 8000488:	fa1f fe87 	uxth.w	lr, r7
 800048c:	fb08 c116 	mls	r1, r8, r6, ip
 8000490:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000494:	fb06 f10e 	mul.w	r1, r6, lr
 8000498:	4299      	cmp	r1, r3
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x60>
 800049c:	18fb      	adds	r3, r7, r3
 800049e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80004a2:	f080 8119 	bcs.w	80006d8 <__udivmoddi4+0x288>
 80004a6:	4299      	cmp	r1, r3
 80004a8:	f240 8116 	bls.w	80006d8 <__udivmoddi4+0x288>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	443b      	add	r3, r7
 80004b0:	1a5b      	subs	r3, r3, r1
 80004b2:	b2a4      	uxth	r4, r4
 80004b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b8:	fb08 3310 	mls	r3, r8, r0, r3
 80004bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x8c>
 80004c8:	193c      	adds	r4, r7, r4
 80004ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004ce:	f080 8105 	bcs.w	80006dc <__udivmoddi4+0x28c>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	f240 8102 	bls.w	80006dc <__udivmoddi4+0x28c>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	2600      	movs	r6, #0
 80004e6:	b11d      	cbz	r5, 80004f0 <__udivmoddi4+0xa0>
 80004e8:	40d4      	lsrs	r4, r2
 80004ea:	2300      	movs	r3, #0
 80004ec:	e9c5 4300 	strd	r4, r3, [r5]
 80004f0:	4631      	mov	r1, r6
 80004f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f6:	b902      	cbnz	r2, 80004fa <__udivmoddi4+0xaa>
 80004f8:	deff      	udf	#255	; 0xff
 80004fa:	fab2 f282 	clz	r2, r2
 80004fe:	2a00      	cmp	r2, #0
 8000500:	d150      	bne.n	80005a4 <__udivmoddi4+0x154>
 8000502:	1bcb      	subs	r3, r1, r7
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	fa1f f887 	uxth.w	r8, r7
 800050c:	2601      	movs	r6, #1
 800050e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000512:	0c21      	lsrs	r1, r4, #16
 8000514:	fb0e 331c 	mls	r3, lr, ip, r3
 8000518:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051c:	fb08 f30c 	mul.w	r3, r8, ip
 8000520:	428b      	cmp	r3, r1
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0xe4>
 8000524:	1879      	adds	r1, r7, r1
 8000526:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0xe2>
 800052c:	428b      	cmp	r3, r1
 800052e:	f200 80e9 	bhi.w	8000704 <__udivmoddi4+0x2b4>
 8000532:	4684      	mov	ip, r0
 8000534:	1ac9      	subs	r1, r1, r3
 8000536:	b2a3      	uxth	r3, r4
 8000538:	fbb1 f0fe 	udiv	r0, r1, lr
 800053c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000540:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000544:	fb08 f800 	mul.w	r8, r8, r0
 8000548:	45a0      	cmp	r8, r4
 800054a:	d907      	bls.n	800055c <__udivmoddi4+0x10c>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000552:	d202      	bcs.n	800055a <__udivmoddi4+0x10a>
 8000554:	45a0      	cmp	r8, r4
 8000556:	f200 80d9 	bhi.w	800070c <__udivmoddi4+0x2bc>
 800055a:	4618      	mov	r0, r3
 800055c:	eba4 0408 	sub.w	r4, r4, r8
 8000560:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000564:	e7bf      	b.n	80004e6 <__udivmoddi4+0x96>
 8000566:	428b      	cmp	r3, r1
 8000568:	d909      	bls.n	800057e <__udivmoddi4+0x12e>
 800056a:	2d00      	cmp	r5, #0
 800056c:	f000 80b1 	beq.w	80006d2 <__udivmoddi4+0x282>
 8000570:	2600      	movs	r6, #0
 8000572:	e9c5 0100 	strd	r0, r1, [r5]
 8000576:	4630      	mov	r0, r6
 8000578:	4631      	mov	r1, r6
 800057a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057e:	fab3 f683 	clz	r6, r3
 8000582:	2e00      	cmp	r6, #0
 8000584:	d14a      	bne.n	800061c <__udivmoddi4+0x1cc>
 8000586:	428b      	cmp	r3, r1
 8000588:	d302      	bcc.n	8000590 <__udivmoddi4+0x140>
 800058a:	4282      	cmp	r2, r0
 800058c:	f200 80b8 	bhi.w	8000700 <__udivmoddi4+0x2b0>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb61 0103 	sbc.w	r1, r1, r3
 8000596:	2001      	movs	r0, #1
 8000598:	468c      	mov	ip, r1
 800059a:	2d00      	cmp	r5, #0
 800059c:	d0a8      	beq.n	80004f0 <__udivmoddi4+0xa0>
 800059e:	e9c5 4c00 	strd	r4, ip, [r5]
 80005a2:	e7a5      	b.n	80004f0 <__udivmoddi4+0xa0>
 80005a4:	f1c2 0320 	rsb	r3, r2, #32
 80005a8:	fa20 f603 	lsr.w	r6, r0, r3
 80005ac:	4097      	lsls	r7, r2
 80005ae:	fa01 f002 	lsl.w	r0, r1, r2
 80005b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005b6:	40d9      	lsrs	r1, r3
 80005b8:	4330      	orrs	r0, r6
 80005ba:	0c03      	lsrs	r3, r0, #16
 80005bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80005c0:	fa1f f887 	uxth.w	r8, r7
 80005c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80005c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005cc:	fb06 f108 	mul.w	r1, r6, r8
 80005d0:	4299      	cmp	r1, r3
 80005d2:	fa04 f402 	lsl.w	r4, r4, r2
 80005d6:	d909      	bls.n	80005ec <__udivmoddi4+0x19c>
 80005d8:	18fb      	adds	r3, r7, r3
 80005da:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80005de:	f080 808d 	bcs.w	80006fc <__udivmoddi4+0x2ac>
 80005e2:	4299      	cmp	r1, r3
 80005e4:	f240 808a 	bls.w	80006fc <__udivmoddi4+0x2ac>
 80005e8:	3e02      	subs	r6, #2
 80005ea:	443b      	add	r3, r7
 80005ec:	1a5b      	subs	r3, r3, r1
 80005ee:	b281      	uxth	r1, r0
 80005f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80005f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80005f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fc:	fb00 f308 	mul.w	r3, r0, r8
 8000600:	428b      	cmp	r3, r1
 8000602:	d907      	bls.n	8000614 <__udivmoddi4+0x1c4>
 8000604:	1879      	adds	r1, r7, r1
 8000606:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800060a:	d273      	bcs.n	80006f4 <__udivmoddi4+0x2a4>
 800060c:	428b      	cmp	r3, r1
 800060e:	d971      	bls.n	80006f4 <__udivmoddi4+0x2a4>
 8000610:	3802      	subs	r0, #2
 8000612:	4439      	add	r1, r7
 8000614:	1acb      	subs	r3, r1, r3
 8000616:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800061a:	e778      	b.n	800050e <__udivmoddi4+0xbe>
 800061c:	f1c6 0c20 	rsb	ip, r6, #32
 8000620:	fa03 f406 	lsl.w	r4, r3, r6
 8000624:	fa22 f30c 	lsr.w	r3, r2, ip
 8000628:	431c      	orrs	r4, r3
 800062a:	fa20 f70c 	lsr.w	r7, r0, ip
 800062e:	fa01 f306 	lsl.w	r3, r1, r6
 8000632:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000636:	fa21 f10c 	lsr.w	r1, r1, ip
 800063a:	431f      	orrs	r7, r3
 800063c:	0c3b      	lsrs	r3, r7, #16
 800063e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000642:	fa1f f884 	uxth.w	r8, r4
 8000646:	fb0e 1119 	mls	r1, lr, r9, r1
 800064a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800064e:	fb09 fa08 	mul.w	sl, r9, r8
 8000652:	458a      	cmp	sl, r1
 8000654:	fa02 f206 	lsl.w	r2, r2, r6
 8000658:	fa00 f306 	lsl.w	r3, r0, r6
 800065c:	d908      	bls.n	8000670 <__udivmoddi4+0x220>
 800065e:	1861      	adds	r1, r4, r1
 8000660:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000664:	d248      	bcs.n	80006f8 <__udivmoddi4+0x2a8>
 8000666:	458a      	cmp	sl, r1
 8000668:	d946      	bls.n	80006f8 <__udivmoddi4+0x2a8>
 800066a:	f1a9 0902 	sub.w	r9, r9, #2
 800066e:	4421      	add	r1, r4
 8000670:	eba1 010a 	sub.w	r1, r1, sl
 8000674:	b2bf      	uxth	r7, r7
 8000676:	fbb1 f0fe 	udiv	r0, r1, lr
 800067a:	fb0e 1110 	mls	r1, lr, r0, r1
 800067e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000682:	fb00 f808 	mul.w	r8, r0, r8
 8000686:	45b8      	cmp	r8, r7
 8000688:	d907      	bls.n	800069a <__udivmoddi4+0x24a>
 800068a:	19e7      	adds	r7, r4, r7
 800068c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000690:	d22e      	bcs.n	80006f0 <__udivmoddi4+0x2a0>
 8000692:	45b8      	cmp	r8, r7
 8000694:	d92c      	bls.n	80006f0 <__udivmoddi4+0x2a0>
 8000696:	3802      	subs	r0, #2
 8000698:	4427      	add	r7, r4
 800069a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800069e:	eba7 0708 	sub.w	r7, r7, r8
 80006a2:	fba0 8902 	umull	r8, r9, r0, r2
 80006a6:	454f      	cmp	r7, r9
 80006a8:	46c6      	mov	lr, r8
 80006aa:	4649      	mov	r1, r9
 80006ac:	d31a      	bcc.n	80006e4 <__udivmoddi4+0x294>
 80006ae:	d017      	beq.n	80006e0 <__udivmoddi4+0x290>
 80006b0:	b15d      	cbz	r5, 80006ca <__udivmoddi4+0x27a>
 80006b2:	ebb3 020e 	subs.w	r2, r3, lr
 80006b6:	eb67 0701 	sbc.w	r7, r7, r1
 80006ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80006be:	40f2      	lsrs	r2, r6
 80006c0:	ea4c 0202 	orr.w	r2, ip, r2
 80006c4:	40f7      	lsrs	r7, r6
 80006c6:	e9c5 2700 	strd	r2, r7, [r5]
 80006ca:	2600      	movs	r6, #0
 80006cc:	4631      	mov	r1, r6
 80006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d2:	462e      	mov	r6, r5
 80006d4:	4628      	mov	r0, r5
 80006d6:	e70b      	b.n	80004f0 <__udivmoddi4+0xa0>
 80006d8:	4606      	mov	r6, r0
 80006da:	e6e9      	b.n	80004b0 <__udivmoddi4+0x60>
 80006dc:	4618      	mov	r0, r3
 80006de:	e6fd      	b.n	80004dc <__udivmoddi4+0x8c>
 80006e0:	4543      	cmp	r3, r8
 80006e2:	d2e5      	bcs.n	80006b0 <__udivmoddi4+0x260>
 80006e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80006e8:	eb69 0104 	sbc.w	r1, r9, r4
 80006ec:	3801      	subs	r0, #1
 80006ee:	e7df      	b.n	80006b0 <__udivmoddi4+0x260>
 80006f0:	4608      	mov	r0, r1
 80006f2:	e7d2      	b.n	800069a <__udivmoddi4+0x24a>
 80006f4:	4660      	mov	r0, ip
 80006f6:	e78d      	b.n	8000614 <__udivmoddi4+0x1c4>
 80006f8:	4681      	mov	r9, r0
 80006fa:	e7b9      	b.n	8000670 <__udivmoddi4+0x220>
 80006fc:	4666      	mov	r6, ip
 80006fe:	e775      	b.n	80005ec <__udivmoddi4+0x19c>
 8000700:	4630      	mov	r0, r6
 8000702:	e74a      	b.n	800059a <__udivmoddi4+0x14a>
 8000704:	f1ac 0c02 	sub.w	ip, ip, #2
 8000708:	4439      	add	r1, r7
 800070a:	e713      	b.n	8000534 <__udivmoddi4+0xe4>
 800070c:	3802      	subs	r0, #2
 800070e:	443c      	add	r4, r7
 8000710:	e724      	b.n	800055c <__udivmoddi4+0x10c>
 8000712:	bf00      	nop

08000714 <__aeabi_idiv0>:
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop

08000718 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int32_t timerVal;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  _running = false;
 800073a:	4b31      	ldr	r3, [pc, #196]	; (8000800 <main+0xcc>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
  head_mov = 0;
 8000740:	4b30      	ldr	r3, [pc, #192]	; (8000804 <main+0xd0>)
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
  tail_mov = 1;
 8000746:	4b30      	ldr	r3, [pc, #192]	; (8000808 <main+0xd4>)
 8000748:	2201      	movs	r2, #1
 800074a:	601a      	str	r2, [r3, #0]
  head_full = 0;
 800074c:	4b2f      	ldr	r3, [pc, #188]	; (800080c <main+0xd8>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
  tail_full = 1;
 8000752:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <main+0xdc>)
 8000754:	2201      	movs	r2, #1
 8000756:	601a      	str	r2, [r3, #0]
  moving_sum = 0;
 8000758:	492e      	ldr	r1, [pc, #184]	; (8000814 <main+0xe0>)
 800075a:	f04f 0200 	mov.w	r2, #0
 800075e:	f04f 0300 	mov.w	r3, #0
 8000762:	e9c1 2300 	strd	r2, r3, [r1]
  moving_avg = 0;
 8000766:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <main+0xe4>)
 8000768:	f04f 0200 	mov.w	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
  counter = 0;
 800076e:	4b2b      	ldr	r3, [pc, #172]	; (800081c <main+0xe8>)
 8000770:	2200      	movs	r2, #0
 8000772:	801a      	strh	r2, [r3, #0]
  done = 0;
 8000774:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <main+0xec>)
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*4); i++){
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	e007      	b.n	8000790 <main+0x5c>
	  circular_buf_mov[i] = 0;
 8000780:	4a28      	ldr	r2, [pc, #160]	; (8000824 <main+0xf0>)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	4413      	add	r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*4); i++){
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3301      	adds	r3, #1
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 8000796:	dbf3      	blt.n	8000780 <main+0x4c>
  }
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*16); i++){
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	e007      	b.n	80007ae <main+0x7a>
	  circular_buf_full[i] = 0;
 800079e:	4a22      	ldr	r2, [pc, #136]	; (8000828 <main+0xf4>)
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	4413      	add	r3, r2
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*16); i++){
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	3301      	adds	r3, #1
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	f5b3 5f5c 	cmp.w	r3, #14080	; 0x3700
 80007b4:	dbf3      	blt.n	800079e <main+0x6a>
  }
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET * 2); i++){
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	e007      	b.n	80007cc <main+0x98>
	  _sampleBuffer[i] = 0;
 80007bc:	4a1b      	ldr	r2, [pc, #108]	; (800082c <main+0xf8>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2100      	movs	r1, #0
 80007c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET * 2); i++){
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3301      	adds	r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80007d2:	dbf3      	blt.n	80007bc <main+0x88>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d4:	f000 fe10 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d8:	f000 f82c 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007dc:	f000 f9be 	bl	8000b5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007e0:	f000 f95c 	bl	8000a9c <MX_USART2_UART_Init>
  MX_DMA_Init();
 80007e4:	f000 f984 	bl	8000af0 <MX_DMA_Init>
  MX_SAI1_Init();
 80007e8:	f000 f892 	bl	8000910 <MX_SAI1_Init>
  MX_UART4_Init();
 80007ec:	f000 f92c 	bl	8000a48 <MX_UART4_Init>
  MX_TIM2_Init();
 80007f0:	f000 f8d8 	bl	80009a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80007f4:	2108      	movs	r1, #8
 80007f6:	480e      	ldr	r0, [pc, #56]	; (8000830 <main+0xfc>)
 80007f8:	f003 fcea 	bl	80041d0 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <main+0xc8>
 80007fe:	bf00      	nop
 8000800:	20011aec 	.word	0x20011aec
 8000804:	20011c28 	.word	0x20011c28
 8000808:	20001f94 	.word	0x20001f94
 800080c:	200003a4 	.word	0x200003a4
 8000810:	20011af0 	.word	0x20011af0
 8000814:	20001f88 	.word	0x20001f88
 8000818:	20000030 	.word	0x20000030
 800081c:	20011af4 	.word	0x20011af4
 8000820:	20001f98 	.word	0x20001f98
 8000824:	20011a24 	.word	0x20011a24
 8000828:	20001f9c 	.word	0x20001f9c
 800082c:	200003a8 	.word	0x200003a8
 8000830:	20011b9c 	.word	0x20011b9c

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b094      	sub	sp, #80	; 0x50
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2234      	movs	r2, #52	; 0x34
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f005 f9c4 	bl	8005bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <SystemClock_Config+0xd4>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	4a29      	ldr	r2, [pc, #164]	; (8000908 <SystemClock_Config+0xd4>)
 8000862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000866:	6413      	str	r3, [r2, #64]	; 0x40
 8000868:	4b27      	ldr	r3, [pc, #156]	; (8000908 <SystemClock_Config+0xd4>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000874:	2300      	movs	r3, #0
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	4b24      	ldr	r3, [pc, #144]	; (800090c <SystemClock_Config+0xd8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000880:	4a22      	ldr	r2, [pc, #136]	; (800090c <SystemClock_Config+0xd8>)
 8000882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	4b20      	ldr	r3, [pc, #128]	; (800090c <SystemClock_Config+0xd8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000894:	2302      	movs	r3, #2
 8000896:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000898:	2301      	movs	r3, #1
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089c:	2310      	movs	r3, #16
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a0:	2302      	movs	r3, #2
 80008a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a4:	2300      	movs	r3, #0
 80008a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008a8:	2310      	movs	r3, #16
 80008aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008b2:	2304      	movs	r3, #4
 80008b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 fd2e 	bl	8003324 <HAL_RCC_OscConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ce:	f000 fb1d 	bl	8000f0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d2:	230f      	movs	r3, #15
 80008d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d6:	2302      	movs	r3, #2
 80008d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	2102      	movs	r1, #2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f001 fcda 	bl	80022a8 <HAL_RCC_ClockConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008fa:	f000 fb07 	bl	8000f0c <Error_Handler>
  }
}
 80008fe:	bf00      	nop
 8000900:	3750      	adds	r7, #80	; 0x50
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40007000 	.word	0x40007000

08000910 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_SAI1_Init+0x84>)
 8000916:	4a20      	ldr	r2, [pc, #128]	; (8000998 <MX_SAI1_Init+0x88>)
 8000918:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_RX;
 800091a:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <MX_SAI1_Init+0x84>)
 800091c:	2201      	movs	r2, #1
 800091e:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_SAI1_Init+0x84>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000926:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_SAI1_Init+0x84>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800092c:	4b19      	ldr	r3, [pc, #100]	; (8000994 <MX_SAI1_Init+0x84>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_SAI1_Init+0x84>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_SAI1_Init+0x84>)
 800093a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800093e:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_SAI1_Init+0x84>)
 8000942:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000946:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_SAI1_Init+0x84>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_SAI1_Init+0x84>)
 8000950:	2200      	movs	r2, #0
 8000952:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_SAI1_Init+0x84>)
 8000956:	2200      	movs	r2, #0
 8000958:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800095a:	2302      	movs	r3, #2
 800095c:	2202      	movs	r2, #2
 800095e:	2100      	movs	r1, #0
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <MX_SAI1_Init+0x84>)
 8000962:	f002 ff7d 	bl	8003860 <HAL_SAI_InitProtocol>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 800096c:	f000 face 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  if ((HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*) _sampleBuffer, MIC_SAMPLES_PER_PACKET * 2)) == HAL_OK) {
 8000970:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8000974:	4909      	ldr	r1, [pc, #36]	; (800099c <MX_SAI1_Init+0x8c>)
 8000976:	4807      	ldr	r0, [pc, #28]	; (8000994 <MX_SAI1_Init+0x84>)
 8000978:	f003 f8ce 	bl	8003b18 <HAL_SAI_Receive_DMA>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d106      	bne.n	8000990 <MX_SAI1_Init+0x80>
	  HAL_Delay(1000);
 8000982:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000986:	f000 fda9 	bl	80014dc <HAL_Delay>
	  _running = true;
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <MX_SAI1_Init+0x90>)
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END SAI1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2001199c 	.word	0x2001199c
 8000998:	40015824 	.word	0x40015824
 800099c:	200003a8 	.word	0x200003a8
 80009a0:	20011aec 	.word	0x20011aec

080009a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009c0:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <MX_TIM2_Init+0xa0>)
 80009c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <MX_TIM2_Init+0xa0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ce:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_TIM2_Init+0xa0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_TIM2_Init+0xa0>)
 80009d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009dc:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_TIM2_Init+0xa0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_TIM2_Init+0xa0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80009e8:	4816      	ldr	r0, [pc, #88]	; (8000a44 <MX_TIM2_Init+0xa0>)
 80009ea:	f003 fba1 	bl	8004130 <HAL_TIM_IC_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009f4:	f000 fa8a 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4619      	mov	r1, r3
 8000a06:	480f      	ldr	r0, [pc, #60]	; (8000a44 <MX_TIM2_Init+0xa0>)
 8000a08:	f004 f8c6 	bl	8004b98 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a12:	f000 fa7b 	bl	8000f0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000a26:	463b      	mov	r3, r7
 8000a28:	2208      	movs	r2, #8
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_TIM2_Init+0xa0>)
 8000a2e:	f003 fdff 	bl	8004630 <HAL_TIM_IC_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a38:	f000 fa68 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20011b9c 	.word	0x20011b9c

08000a48 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_UART4_Init+0x4c>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <MX_UART4_Init+0x50>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_UART4_Init+0x4c>)
 8000a54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a58:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_UART4_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_UART4_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_UART4_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_UART4_Init+0x4c>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_UART4_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_UART4_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_UART4_Init+0x4c>)
 8000a80:	f004 f91a 	bl	8004cb8 <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000a8a:	f000 fa3f 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20011b58 	.word	0x20011b58
 8000a98:	40004c00 	.word	0x40004c00

08000a9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <MX_USART2_UART_Init+0x50>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	f004 f8f0 	bl	8004cb8 <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ade:	f000 fa15 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20011be4 	.word	0x20011be4
 8000aec:	40004400 	.word	0x40004400

08000af0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_DMA_Init+0x68>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a16      	ldr	r2, [pc, #88]	; (8000b58 <MX_DMA_Init+0x68>)
 8000b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_DMA_Init+0x68>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_DMA_Init+0x68>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <MX_DMA_Init+0x68>)
 8000b1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <MX_DMA_Init+0x68>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	200d      	movs	r0, #13
 8000b34:	f000 fdd1 	bl	80016da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b38:	200d      	movs	r0, #13
 8000b3a:	f000 fdea 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	203c      	movs	r0, #60	; 0x3c
 8000b44:	f000 fdc9 	bl	80016da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000b48:	203c      	movs	r0, #60	; 0x3c
 8000b4a:	f000 fde2 	bl	8001712 <HAL_NVIC_EnableIRQ>

}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b2d      	ldr	r3, [pc, #180]	; (8000c2c <MX_GPIO_Init+0xd0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a2c      	ldr	r2, [pc, #176]	; (8000c2c <MX_GPIO_Init+0xd0>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <MX_GPIO_Init+0xd0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <MX_GPIO_Init+0xd0>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a25      	ldr	r2, [pc, #148]	; (8000c2c <MX_GPIO_Init+0xd0>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <MX_GPIO_Init+0xd0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <MX_GPIO_Init+0xd0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a1e      	ldr	r2, [pc, #120]	; (8000c2c <MX_GPIO_Init+0xd0>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <MX_GPIO_Init+0xd0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <MX_GPIO_Init+0xd0>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <MX_GPIO_Init+0xd0>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_GPIO_Init+0xd0>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2120      	movs	r1, #32
 8000be6:	4812      	ldr	r0, [pc, #72]	; (8000c30 <MX_GPIO_Init+0xd4>)
 8000be8:	f001 fb44 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	480c      	ldr	r0, [pc, #48]	; (8000c34 <MX_GPIO_Init+0xd8>)
 8000c04:	f001 f9a2 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c08:	2320      	movs	r3, #32
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4804      	ldr	r0, [pc, #16]	; (8000c30 <MX_GPIO_Init+0xd4>)
 8000c20:	f001 f994 	bl	8001f4c <HAL_GPIO_Init>

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000
 8000c34:	40020800 	.word	0x40020800

08000c38 <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	sendData(_sampleBuffer, _sendBuffer);
 8000c40:	4903      	ldr	r1, [pc, #12]	; (8000c50 <HAL_SAI_RxHalfCpltCallback+0x18>)
 8000c42:	4804      	ldr	r0, [pc, #16]	; (8000c54 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8000c44:	f000 f818 	bl	8000c78 <sendData>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000034 	.word	0x20000034
 8000c54:	200003a8 	.word	0x200003a8

08000c58 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	sendData(&_sampleBuffer[MIC_SAMPLES_PER_PACKET], &_sendBuffer[MIC_SAMPLES_PER_PACKET / 2]);
 8000c60:	4903      	ldr	r1, [pc, #12]	; (8000c70 <HAL_SAI_RxCpltCallback+0x18>)
 8000c62:	4804      	ldr	r0, [pc, #16]	; (8000c74 <HAL_SAI_RxCpltCallback+0x1c>)
 8000c64:	f000 f808 	bl	8000c78 <sendData>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200001ec 	.word	0x200001ec
 8000c74:	20001168 	.word	0x20001168

08000c78 <sendData>:

void sendData(volatile int32_t *data_in, int8_t *data_out) {
 8000c78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c7c:	b086      	sub	sp, #24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]

  if (_running) {
 8000c84:	4b90      	ldr	r3, [pc, #576]	; (8000ec8 <sendData+0x250>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f000 8118 	beq.w	8000ebe <sendData+0x246>

      for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8000c8e:	2300      	movs	r3, #0
 8000c90:	82fb      	strh	r3, [r7, #22]
 8000c92:	e10f      	b.n	8000eb4 <sendData+0x23c>

        int8_t sample = ((data_in[0]>>16) & 0xff);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	141b      	asrs	r3, r3, #16
 8000c9a:	757b      	strb	r3, [r7, #21]
        // int16_t sample_mov = (data_in[0] & 0x0000ffff);
        moving_sum += abs(sample);
 8000c9c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bfb8      	it	lt
 8000ca4:	425b      	neglt	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	b2d8      	uxtb	r0, r3
 8000caa:	f04f 0100 	mov.w	r1, #0
 8000cae:	4b87      	ldr	r3, [pc, #540]	; (8000ecc <sendData+0x254>)
 8000cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb4:	1884      	adds	r4, r0, r2
 8000cb6:	eb41 0503 	adc.w	r5, r1, r3
 8000cba:	4b84      	ldr	r3, [pc, #528]	; (8000ecc <sendData+0x254>)
 8000cbc:	e9c3 4500 	strd	r4, r5, [r3]
        moving_sum -= abs(circular_buf_mov[tail_mov]);
 8000cc0:	4b82      	ldr	r3, [pc, #520]	; (8000ecc <sendData+0x254>)
 8000cc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cc6:	4b82      	ldr	r3, [pc, #520]	; (8000ed0 <sendData+0x258>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a82      	ldr	r2, [pc, #520]	; (8000ed4 <sendData+0x25c>)
 8000ccc:	56d3      	ldrsb	r3, [r2, r3]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bfb8      	it	lt
 8000cd2:	425b      	neglt	r3, r3
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	ebb0 0802 	subs.w	r8, r0, r2
 8000ce0:	eb61 0903 	sbc.w	r9, r1, r3
 8000ce4:	4b79      	ldr	r3, [pc, #484]	; (8000ecc <sendData+0x254>)
 8000ce6:	e9c3 8900 	strd	r8, r9, [r3]
    	circular_buf_mov[tail_mov] = sample;
 8000cea:	4b79      	ldr	r3, [pc, #484]	; (8000ed0 <sendData+0x258>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4979      	ldr	r1, [pc, #484]	; (8000ed4 <sendData+0x25c>)
 8000cf0:	7d7a      	ldrb	r2, [r7, #21]
 8000cf2:	54ca      	strb	r2, [r1, r3]
    	circular_buf_full[tail_full] = sample;
 8000cf4:	4b78      	ldr	r3, [pc, #480]	; (8000ed8 <sendData+0x260>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4978      	ldr	r1, [pc, #480]	; (8000edc <sendData+0x264>)
 8000cfa:	7d7a      	ldrb	r2, [r7, #21]
 8000cfc:	54ca      	strb	r2, [r1, r3]
    	moving_avg = ((float) moving_sum)/(MOVING_AVG_LEN);
 8000cfe:	4b73      	ldr	r3, [pc, #460]	; (8000ecc <sendData+0x254>)
 8000d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d04:	4610      	mov	r0, r2
 8000d06:	4619      	mov	r1, r3
 8000d08:	f7ff fb4c 	bl	80003a4 <__aeabi_l2f>
 8000d0c:	ee06 0a90 	vmov	s13, r0
 8000d10:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8000ee0 <sendData+0x268>
 8000d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d18:	4b72      	ldr	r3, [pc, #456]	; (8000ee4 <sendData+0x26c>)
 8000d1a:	edc3 7a00 	vstr	s15, [r3]
    //	uint8_t buffer[50];

    //	sprintf(buffer, "%i\n", tmp);
    //	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 70);

    	if ((counter > 0) && (!done)){
 8000d1e:	4b72      	ldr	r3, [pc, #456]	; (8000ee8 <sendData+0x270>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d053      	beq.n	8000dce <sendData+0x156>
 8000d26:	4b71      	ldr	r3, [pc, #452]	; (8000eec <sendData+0x274>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d14f      	bne.n	8000dce <sendData+0x156>
    		counter++;
 8000d2e:	4b6e      	ldr	r3, [pc, #440]	; (8000ee8 <sendData+0x270>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b6c      	ldr	r3, [pc, #432]	; (8000ee8 <sendData+0x270>)
 8000d38:	801a      	strh	r2, [r3, #0]
    		if (counter == (SEND_LEN/2)){
 8000d3a:	4b6b      	ldr	r3, [pc, #428]	; (8000ee8 <sendData+0x270>)
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000d42:	d144      	bne.n	8000dce <sendData+0x156>
    			timerVal = TIM2->CNT;
 8000d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b68      	ldr	r3, [pc, #416]	; (8000ef0 <sendData+0x278>)
 8000d4e:	601a      	str	r2, [r3, #0]
    			if ((HAL_UART_Transmit(&huart2, (uint8_t*)&timerVal, 4, 70) != HAL_OK)){
 8000d50:	2346      	movs	r3, #70	; 0x46
 8000d52:	2204      	movs	r2, #4
 8000d54:	4966      	ldr	r1, [pc, #408]	; (8000ef0 <sendData+0x278>)
 8000d56:	4867      	ldr	r0, [pc, #412]	; (8000ef4 <sendData+0x27c>)
 8000d58:	f003 fffb 	bl	8004d52 <HAL_UART_Transmit>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <sendData+0xee>
    				Error_Handler();
 8000d62:	f000 f8d3 	bl	8000f0c <Error_Handler>
    			}
    			uint32_t endflag = 0xCDCDCDCD;
 8000d66:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
 8000d6a:	613b      	str	r3, [r7, #16]
    			if ((HAL_UART_Transmit(&huart2, (uint8_t*)&endflag, 4, 70) != HAL_OK)){
 8000d6c:	f107 0110 	add.w	r1, r7, #16
 8000d70:	2346      	movs	r3, #70	; 0x46
 8000d72:	2204      	movs	r2, #4
 8000d74:	485f      	ldr	r0, [pc, #380]	; (8000ef4 <sendData+0x27c>)
 8000d76:	f003 ffec 	bl	8004d52 <HAL_UART_Transmit>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <sendData+0x10c>
    			    				Error_Handler();
 8000d80:	f000 f8c4 	bl	8000f0c <Error_Handler>
    			}
    			if ((HAL_UART_Transmit(&huart2, circular_buf_full + tail_full, (SEND_LEN)-tail_full, HAL_MAX_DELAY)) != HAL_OK){
 8000d84:	4b54      	ldr	r3, [pc, #336]	; (8000ed8 <sendData+0x260>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a54      	ldr	r2, [pc, #336]	; (8000edc <sendData+0x264>)
 8000d8a:	1899      	adds	r1, r3, r2
 8000d8c:	4b52      	ldr	r3, [pc, #328]	; (8000ed8 <sendData+0x260>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	4b59      	ldr	r3, [pc, #356]	; (8000ef8 <sendData+0x280>)
 8000d94:	1a9b      	subs	r3, r3, r2
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d9c:	4855      	ldr	r0, [pc, #340]	; (8000ef4 <sendData+0x27c>)
 8000d9e:	f003 ffd8 	bl	8004d52 <HAL_UART_Transmit>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <sendData+0x134>
    				Error_Handler();
 8000da8:	f000 f8b0 	bl	8000f0c <Error_Handler>
    			}
    			if ((HAL_UART_Transmit(&huart2, circular_buf_full, tail_full, HAL_MAX_DELAY)) != HAL_OK){
 8000dac:	4b4a      	ldr	r3, [pc, #296]	; (8000ed8 <sendData+0x260>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000db6:	4949      	ldr	r1, [pc, #292]	; (8000edc <sendData+0x264>)
 8000db8:	484e      	ldr	r0, [pc, #312]	; (8000ef4 <sendData+0x27c>)
 8000dba:	f003 ffca 	bl	8004d52 <HAL_UART_Transmit>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <sendData+0x150>
    				Error_Handler();
 8000dc4:	f000 f8a2 	bl	8000f0c <Error_Handler>
    			}
    			done = 1;
 8000dc8:	4b48      	ldr	r3, [pc, #288]	; (8000eec <sendData+0x274>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]
    		}
    	}

    	if ((moving_avg >= MOVING_AVG_THRESHOLD) && (counter == 0)){
 8000dce:	4b45      	ldr	r3, [pc, #276]	; (8000ee4 <sendData+0x26c>)
 8000dd0:	edd3 7a00 	vldr	s15, [r3]
 8000dd4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de0:	db2c      	blt.n	8000e3c <sendData+0x1c4>
 8000de2:	4b41      	ldr	r3, [pc, #260]	; (8000ee8 <sendData+0x270>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d128      	bne.n	8000e3c <sendData+0x1c4>
    		counter += 1;
 8000dea:	4b3f      	ldr	r3, [pc, #252]	; (8000ee8 <sendData+0x270>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	3301      	adds	r3, #1
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	4b3d      	ldr	r3, [pc, #244]	; (8000ee8 <sendData+0x270>)
 8000df4:	801a      	strh	r2, [r3, #0]
    		done = 0;
 8000df6:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <sendData+0x274>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
			timerVal = TIM2->CNT;
 8000dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b3a      	ldr	r3, [pc, #232]	; (8000ef0 <sendData+0x278>)
 8000e06:	601a      	str	r2, [r3, #0]
			if ((HAL_UART_Transmit(&huart2, (uint8_t*)&timerVal, 4, 70) != HAL_OK)){
 8000e08:	2346      	movs	r3, #70	; 0x46
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	4938      	ldr	r1, [pc, #224]	; (8000ef0 <sendData+0x278>)
 8000e0e:	4839      	ldr	r0, [pc, #228]	; (8000ef4 <sendData+0x27c>)
 8000e10:	f003 ff9f 	bl	8004d52 <HAL_UART_Transmit>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <sendData+0x1a6>
				Error_Handler();
 8000e1a:	f000 f877 	bl	8000f0c <Error_Handler>
			}
			uint32_t endflag = 0xABABABAB;
 8000e1e:	f04f 33ab 	mov.w	r3, #2880154539	; 0xabababab
 8000e22:	60fb      	str	r3, [r7, #12]
			if ((HAL_UART_Transmit(&huart2, (uint8_t*)&endflag, 4, 70) != HAL_OK)){
 8000e24:	f107 010c 	add.w	r1, r7, #12
 8000e28:	2346      	movs	r3, #70	; 0x46
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	4831      	ldr	r0, [pc, #196]	; (8000ef4 <sendData+0x27c>)
 8000e2e:	f003 ff90 	bl	8004d52 <HAL_UART_Transmit>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <sendData+0x1c4>
			    				Error_Handler();
 8000e38:	f000 f868 	bl	8000f0c <Error_Handler>
			}
    	}
        tail_mov = (tail_mov + 1) % (MOVING_AVG_LEN);
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <sendData+0x258>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <sendData+0x284>)
 8000e44:	fba3 1302 	umull	r1, r3, r3, r2
 8000e48:	099b      	lsrs	r3, r3, #6
 8000e4a:	21c8      	movs	r1, #200	; 0xc8
 8000e4c:	fb01 f303 	mul.w	r3, r1, r3
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	4a1f      	ldr	r2, [pc, #124]	; (8000ed0 <sendData+0x258>)
 8000e54:	6013      	str	r3, [r2, #0]
        head_mov = (head_mov + 1) % (MOVING_AVG_LEN);
 8000e56:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <sendData+0x288>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	4b27      	ldr	r3, [pc, #156]	; (8000efc <sendData+0x284>)
 8000e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8000e62:	099b      	lsrs	r3, r3, #6
 8000e64:	21c8      	movs	r1, #200	; 0xc8
 8000e66:	fb01 f303 	mul.w	r3, r1, r3
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	4a24      	ldr	r2, [pc, #144]	; (8000f00 <sendData+0x288>)
 8000e6e:	6013      	str	r3, [r2, #0]

        tail_full = (tail_full + 1) % (SEND_LEN);
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <sendData+0x260>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	1c5a      	adds	r2, r3, #1
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <sendData+0x28c>)
 8000e78:	fba3 1302 	umull	r1, r3, r3, r2
 8000e7c:	0b1b      	lsrs	r3, r3, #12
 8000e7e:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 8000e82:	fb01 f303 	mul.w	r3, r1, r3
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <sendData+0x260>)
 8000e8a:	6013      	str	r3, [r2, #0]
        head_full = (head_full + 1) % (SEND_LEN);
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <sendData+0x290>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	1c5a      	adds	r2, r3, #1
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <sendData+0x28c>)
 8000e94:	fba3 1302 	umull	r1, r3, r3, r2
 8000e98:	0b1b      	lsrs	r3, r3, #12
 8000e9a:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 8000e9e:	fb01 f303 	mul.w	r3, r1, r3
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <sendData+0x290>)
 8000ea6:	6013      	str	r3, [r2, #0]

        data_in += 2;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3308      	adds	r3, #8
 8000eac:	607b      	str	r3, [r7, #4]
      for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8000eae:	8afb      	ldrh	r3, [r7, #22]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	82fb      	strh	r3, [r7, #22]
 8000eb4:	8afb      	ldrh	r3, [r7, #22]
 8000eb6:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8000eba:	f4ff aeeb 	bcc.w	8000c94 <sendData+0x1c>
      }


  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000ec8:	20011aec 	.word	0x20011aec
 8000ecc:	20001f88 	.word	0x20001f88
 8000ed0:	20001f94 	.word	0x20001f94
 8000ed4:	20011a24 	.word	0x20011a24
 8000ed8:	20011af0 	.word	0x20011af0
 8000edc:	20001f9c 	.word	0x20001f9c
 8000ee0:	43480000 	.word	0x43480000
 8000ee4:	20000030 	.word	0x20000030
 8000ee8:	20011af4 	.word	0x20011af4
 8000eec:	20001f98 	.word	0x20001f98
 8000ef0:	20001f90 	.word	0x20001f90
 8000ef4:	20011be4 	.word	0x20011be4
 8000ef8:	fffffa00 	.word	0xfffffa00
 8000efc:	51eb851f 	.word	0x51eb851f
 8000f00:	20011c28 	.word	0x20011c28
 8000f04:	10624dd3 	.word	0x10624dd3
 8000f08:	200003a4 	.word	0x200003a4

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i
}
 8000f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <Error_Handler+0x8>
	...

08000f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_MspInit+0x4c>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <HAL_MspInit+0x4c>)
 8000f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <HAL_MspInit+0x4c>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_MspInit+0x4c>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <HAL_MspInit+0x4c>)
 8000f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f48:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_MspInit+0x4c>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f56:	2007      	movs	r0, #7
 8000f58:	f000 fbb4 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40023800 	.word	0x40023800

08000f68 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f88:	d134      	bne.n	8000ff4 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_TIM_IC_MspInit+0x94>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a1a      	ldr	r2, [pc, #104]	; (8000ffc <HAL_TIM_IC_MspInit+0x94>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_TIM_IC_MspInit+0x94>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <HAL_TIM_IC_MspInit+0x94>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <HAL_TIM_IC_MspInit+0x94>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_TIM_IC_MspInit+0x94>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4808      	ldr	r0, [pc, #32]	; (8001000 <HAL_TIM_IC_MspInit+0x98>)
 8000fe0:	f000 ffb4 	bl	8001f4c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	201c      	movs	r0, #28
 8000fea:	f000 fb76 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fee:	201c      	movs	r0, #28
 8000ff0:	f000 fb8f 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3728      	adds	r7, #40	; 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020400 	.word	0x40020400

08001004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	; 0x30
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a4e      	ldr	r2, [pc, #312]	; (800115c <HAL_UART_MspInit+0x158>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d164      	bne.n	80010f0 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	4b4d      	ldr	r3, [pc, #308]	; (8001160 <HAL_UART_MspInit+0x15c>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	4a4c      	ldr	r2, [pc, #304]	; (8001160 <HAL_UART_MspInit+0x15c>)
 8001030:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001034:	6413      	str	r3, [r2, #64]	; 0x40
 8001036:	4b4a      	ldr	r3, [pc, #296]	; (8001160 <HAL_UART_MspInit+0x15c>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800103e:	61bb      	str	r3, [r7, #24]
 8001040:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	4b46      	ldr	r3, [pc, #280]	; (8001160 <HAL_UART_MspInit+0x15c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a45      	ldr	r2, [pc, #276]	; (8001160 <HAL_UART_MspInit+0x15c>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b43      	ldr	r3, [pc, #268]	; (8001160 <HAL_UART_MspInit+0x15c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800105e:	2303      	movs	r3, #3
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800106e:	2308      	movs	r3, #8
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	483a      	ldr	r0, [pc, #232]	; (8001164 <HAL_UART_MspInit+0x160>)
 800107a:	f000 ff67 	bl	8001f4c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800107e:	4b3a      	ldr	r3, [pc, #232]	; (8001168 <HAL_UART_MspInit+0x164>)
 8001080:	4a3a      	ldr	r2, [pc, #232]	; (800116c <HAL_UART_MspInit+0x168>)
 8001082:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001084:	4b38      	ldr	r3, [pc, #224]	; (8001168 <HAL_UART_MspInit+0x164>)
 8001086:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800108a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <HAL_UART_MspInit+0x164>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001092:	4b35      	ldr	r3, [pc, #212]	; (8001168 <HAL_UART_MspInit+0x164>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001098:	4b33      	ldr	r3, [pc, #204]	; (8001168 <HAL_UART_MspInit+0x164>)
 800109a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010a0:	4b31      	ldr	r3, [pc, #196]	; (8001168 <HAL_UART_MspInit+0x164>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a6:	4b30      	ldr	r3, [pc, #192]	; (8001168 <HAL_UART_MspInit+0x164>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80010ac:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <HAL_UART_MspInit+0x164>)
 80010ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80010b4:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <HAL_UART_MspInit+0x164>)
 80010b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ba:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010bc:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <HAL_UART_MspInit+0x164>)
 80010be:	2200      	movs	r2, #0
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80010c2:	4829      	ldr	r0, [pc, #164]	; (8001168 <HAL_UART_MspInit+0x164>)
 80010c4:	f000 fb40 	bl	8001748 <HAL_DMA_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80010ce:	f7ff ff1d 	bl	8000f0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a24      	ldr	r2, [pc, #144]	; (8001168 <HAL_UART_MspInit+0x164>)
 80010d6:	639a      	str	r2, [r3, #56]	; 0x38
 80010d8:	4a23      	ldr	r2, [pc, #140]	; (8001168 <HAL_UART_MspInit+0x164>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2034      	movs	r0, #52	; 0x34
 80010e4:	f000 faf9 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80010e8:	2034      	movs	r0, #52	; 0x34
 80010ea:	f000 fb12 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ee:	e030      	b.n	8001152 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a1e      	ldr	r2, [pc, #120]	; (8001170 <HAL_UART_MspInit+0x16c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d12b      	bne.n	8001152 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_UART_MspInit+0x15c>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_UART_MspInit+0x15c>)
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_UART_MspInit+0x15c>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_UART_MspInit+0x15c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a10      	ldr	r2, [pc, #64]	; (8001160 <HAL_UART_MspInit+0x15c>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_UART_MspInit+0x15c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001132:	230c      	movs	r3, #12
 8001134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001142:	2307      	movs	r3, #7
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <HAL_UART_MspInit+0x160>)
 800114e:	f000 fefd 	bl	8001f4c <HAL_GPIO_Init>
}
 8001152:	bf00      	nop
 8001154:	3730      	adds	r7, #48	; 0x30
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40004c00 	.word	0x40004c00
 8001160:	40023800 	.word	0x40023800
 8001164:	40020000 	.word	0x40020000
 8001168:	20001f28 	.word	0x20001f28
 800116c:	40026040 	.word	0x40026040
 8001170:	40004400 	.word	0x40004400

08001174 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b0a0      	sub	sp, #128	; 0x80
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	225c      	movs	r2, #92	; 0x5c
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f004 fd23 	bl	8005bd0 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a4c      	ldr	r2, [pc, #304]	; (80012c0 <HAL_SAI_MspInit+0x14c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	f040 8091 	bne.w	80012b8 <HAL_SAI_MspInit+0x144>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001196:	2304      	movs	r3, #4
 8001198:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 16;
 800119a:	2310      	movs	r3, #16
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800119e:	23c0      	movs	r3, #192	; 0xc0
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80011ae:	2300      	movs	r3, #0
 80011b0:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 f990 	bl	80024dc <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_SAI_MspInit+0x52>
    {
      Error_Handler();
 80011c2:	f7ff fea3 	bl	8000f0c <Error_Handler>
    }

      if (SAI1_client == 0)
 80011c6:	4b3f      	ldr	r3, [pc, #252]	; (80012c4 <HAL_SAI_MspInit+0x150>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10d      	bne.n	80011ea <HAL_SAI_MspInit+0x76>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b3d      	ldr	r3, [pc, #244]	; (80012c8 <HAL_SAI_MspInit+0x154>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a3c      	ldr	r2, [pc, #240]	; (80012c8 <HAL_SAI_MspInit+0x154>)
 80011d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b3a      	ldr	r3, [pc, #232]	; (80012c8 <HAL_SAI_MspInit+0x154>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80011ea:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <HAL_SAI_MspInit+0x150>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	4a34      	ldr	r2, [pc, #208]	; (80012c4 <HAL_SAI_MspInit+0x150>)
 80011f2:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PB12     ------> SAI1_SCK_B
    PA9     ------> SAI1_SD_B
    PB9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9;
 80011f4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80011f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001206:	2306      	movs	r3, #6
 8001208:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800120e:	4619      	mov	r1, r3
 8001210:	482e      	ldr	r0, [pc, #184]	; (80012cc <HAL_SAI_MspInit+0x158>)
 8001212:	f000 fe9b 	bl	8001f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800121a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001228:	2306      	movs	r3, #6
 800122a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001230:	4619      	mov	r1, r3
 8001232:	4827      	ldr	r0, [pc, #156]	; (80012d0 <HAL_SAI_MspInit+0x15c>)
 8001234:	f000 fe8a 	bl	8001f4c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 8001238:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 800123a:	4a27      	ldr	r2, [pc, #156]	; (80012d8 <HAL_SAI_MspInit+0x164>)
 800123c:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 800123e:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 8001240:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001244:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800124c:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 8001254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001258:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 800125c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001260:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001262:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 8001264:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001268:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 800126c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001270:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 800127a:	2204      	movs	r2, #4
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 8001280:	2203      	movs	r2, #3
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 8001286:	2200      	movs	r2, #0
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 800128c:	2200      	movs	r2, #0
 800128e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001290:	4810      	ldr	r0, [pc, #64]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 8001292:	f000 fa59 	bl	8001748 <HAL_DMA_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_SAI_MspInit+0x12c>
    {
      Error_Handler();
 800129c:	f7ff fe36 	bl	8000f0c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 80012a4:	675a      	str	r2, [r3, #116]	; 0x74
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 80012b0:	671a      	str	r2, [r3, #112]	; 0x70
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_SAI_MspInit+0x160>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80012b8:	bf00      	nop
 80012ba:	3780      	adds	r7, #128	; 0x80
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40015824 	.word	0x40015824
 80012c4:	2000002c 	.word	0x2000002c
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40020000 	.word	0x40020000
 80012d4:	20011af8 	.word	0x20011af8
 80012d8:	40026470 	.word	0x40026470

080012dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <NMI_Handler+0x4>

080012e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <MemManage_Handler+0x4>

080012ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001328:	f000 f8b8 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <DMA1_Stream2_IRQHandler+0x10>)
 8001336:	f000 fb9f 	bl	8001a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20001f28 	.word	0x20001f28

08001344 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <TIM2_IRQHandler+0x10>)
 800134a:	f003 f869 	bl	8004420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20011b9c 	.word	0x20011b9c

08001358 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <UART4_IRQHandler+0x10>)
 800135e:	f003 fd8b 	bl	8004e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20011b58 	.word	0x20011b58

0800136c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <DMA2_Stream4_IRQHandler+0x10>)
 8001372:	f000 fb81 	bl	8001a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20011af8 	.word	0x20011af8

08001380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <SystemInit+0x20>)
 8001386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <SystemInit+0x20>)
 800138c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013aa:	490e      	ldr	r1, [pc, #56]	; (80013e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b0:	e002      	b.n	80013b8 <LoopCopyDataInit>

080013b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b6:	3304      	adds	r3, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013bc:	d3f9      	bcc.n	80013b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013c0:	4c0b      	ldr	r4, [pc, #44]	; (80013f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c4:	e001      	b.n	80013ca <LoopFillZerobss>

080013c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c8:	3204      	adds	r2, #4

080013ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013cc:	d3fb      	bcc.n	80013c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013ce:	f7ff ffd7 	bl	8001380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013d2:	f004 fbd9 	bl	8005b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d6:	f7ff f9ad 	bl	8000734 <main>
  bx  lr    
 80013da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013e8:	08005c28 	.word	0x08005c28
  ldr r2, =_sbss
 80013ec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80013f0:	20011c30 	.word	0x20011c30

080013f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_Init+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <HAL_Init+0x40>)
 8001402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001406:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <HAL_Init+0x40>)
 800140e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001412:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_Init+0x40>)
 800141a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001420:	2003      	movs	r0, #3
 8001422:	f000 f94f 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001426:	2000      	movs	r0, #0
 8001428:	f000 f808 	bl	800143c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142c:	f7ff fd74 	bl	8000f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023c00 	.word	0x40023c00

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x54>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_InitTick+0x58>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	fbb3 f3f1 	udiv	r3, r3, r1
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f967 	bl	800172e <HAL_SYSTICK_Config>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e00e      	b.n	8001488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d80a      	bhi.n	8001486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001478:	f000 f92f 	bl	80016da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <HAL_InitTick+0x5c>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000000 	.word	0x20000000
 8001494:	20000008 	.word	0x20000008
 8001498:	20000004 	.word	0x20000004

0800149c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20011c2c 	.word	0x20011c2c

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20011c2c 	.word	0x20011c2c

080014dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff ffee 	bl	80014c4 <HAL_GetTick>
 80014e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014f4:	d005      	beq.n	8001502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_Delay+0x44>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001502:	bf00      	nop
 8001504:	f7ff ffde 	bl	80014c4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d8f7      	bhi.n	8001504 <HAL_Delay+0x28>
  {
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000008 	.word	0x20000008

08001524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800154c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db0b      	blt.n	80015b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f003 021f 	and.w	r2, r3, #31
 80015a0:	4907      	ldr	r1, [pc, #28]	; (80015c0 <__NVIC_EnableIRQ+0x38>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2001      	movs	r0, #1
 80015aa:	fa00 f202 	lsl.w	r2, r0, r2
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db0a      	blt.n	80015ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	490c      	ldr	r1, [pc, #48]	; (8001610 <__NVIC_SetPriority+0x4c>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	0112      	lsls	r2, r2, #4
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	440b      	add	r3, r1
 80015e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ec:	e00a      	b.n	8001604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4908      	ldr	r1, [pc, #32]	; (8001614 <__NVIC_SetPriority+0x50>)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	3b04      	subs	r3, #4
 80015fc:	0112      	lsls	r2, r2, #4
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	440b      	add	r3, r1
 8001602:	761a      	strb	r2, [r3, #24]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000e100 	.word	0xe000e100
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f1c3 0307 	rsb	r3, r3, #7
 8001632:	2b04      	cmp	r3, #4
 8001634:	bf28      	it	cs
 8001636:	2304      	movcs	r3, #4
 8001638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3304      	adds	r3, #4
 800163e:	2b06      	cmp	r3, #6
 8001640:	d902      	bls.n	8001648 <NVIC_EncodePriority+0x30>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3b03      	subs	r3, #3
 8001646:	e000      	b.n	800164a <NVIC_EncodePriority+0x32>
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001660:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43d9      	mvns	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	4313      	orrs	r3, r2
         );
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	; 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001690:	d301      	bcc.n	8001696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e00f      	b.n	80016b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <SysTick_Config+0x40>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	210f      	movs	r1, #15
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016a4:	f7ff ff8e 	bl	80015c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <SysTick_Config+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <SysTick_Config+0x40>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff29 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ec:	f7ff ff3e 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff ff8e 	bl	8001618 <NVIC_EncodePriority>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff5d 	bl	80015c4 <__NVIC_SetPriority>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff31 	bl	8001588 <__NVIC_EnableIRQ>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffa2 	bl	8001680 <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff feb6 	bl	80014c4 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e099      	b.n	8001898 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2202      	movs	r2, #2
 8001768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0201 	bic.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001784:	e00f      	b.n	80017a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001786:	f7ff fe9d 	bl	80014c4 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b05      	cmp	r3, #5
 8001792:	d908      	bls.n	80017a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2220      	movs	r2, #32
 8001798:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2203      	movs	r2, #3
 800179e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e078      	b.n	8001898 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1e8      	bne.n	8001786 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	4b38      	ldr	r3, [pc, #224]	; (80018a0 <HAL_DMA_Init+0x158>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d107      	bne.n	8001810 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	4313      	orrs	r3, r2
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	4313      	orrs	r3, r2
 800180e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f023 0307 	bic.w	r3, r3, #7
 8001826:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	4313      	orrs	r3, r2
 8001830:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	2b04      	cmp	r3, #4
 8001838:	d117      	bne.n	800186a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	4313      	orrs	r3, r2
 8001842:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00e      	beq.n	800186a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 fb01 	bl	8001e54 <DMA_CheckFifoParam>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d008      	beq.n	800186a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2240      	movs	r2, #64	; 0x40
 800185c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001866:	2301      	movs	r3, #1
 8001868:	e016      	b.n	8001898 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 fab8 	bl	8001de8 <DMA_CalcBaseAndBitshift>
 8001878:	4603      	mov	r3, r0
 800187a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001880:	223f      	movs	r2, #63	; 0x3f
 8001882:	409a      	lsls	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	f010803f 	.word	0xf010803f

080018a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_DMA_Start_IT+0x26>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e040      	b.n	800194c <HAL_DMA_Start_IT+0xa8>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d12f      	bne.n	800193e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2202      	movs	r2, #2
 80018e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 fa4a 	bl	8001d8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fc:	223f      	movs	r2, #63	; 0x3f
 80018fe:	409a      	lsls	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0216 	orr.w	r2, r2, #22
 8001912:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0208 	orr.w	r2, r2, #8
 800192a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	e005      	b.n	800194a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001946:	2302      	movs	r3, #2
 8001948:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800194a:	7dfb      	ldrb	r3, [r7, #23]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001962:	f7ff fdaf 	bl	80014c4 <HAL_GetTick>
 8001966:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d008      	beq.n	8001986 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2280      	movs	r2, #128	; 0x80
 8001978:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e052      	b.n	8001a2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0216 	bic.w	r2, r2, #22
 8001994:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695a      	ldr	r2, [r3, #20]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d103      	bne.n	80019b6 <HAL_DMA_Abort+0x62>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d007      	beq.n	80019c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0208 	bic.w	r2, r2, #8
 80019c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d6:	e013      	b.n	8001a00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019d8:	f7ff fd74 	bl	80014c4 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d90c      	bls.n	8001a00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2220      	movs	r2, #32
 80019ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2203      	movs	r2, #3
 80019f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e015      	b.n	8001a2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1e4      	bne.n	80019d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a12:	223f      	movs	r2, #63	; 0x3f
 8001a14:	409a      	lsls	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d004      	beq.n	8001a52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00c      	b.n	8001a6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2205      	movs	r2, #5
 8001a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0201 	bic.w	r2, r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a84:	4b92      	ldr	r3, [pc, #584]	; (8001cd0 <HAL_DMA_IRQHandler+0x258>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a92      	ldr	r2, [pc, #584]	; (8001cd4 <HAL_DMA_IRQHandler+0x25c>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	0a9b      	lsrs	r3, r3, #10
 8001a90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d01a      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d013      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0204 	bic.w	r2, r2, #4
 8001aca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001adc:	f043 0201 	orr.w	r2, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae8:	2201      	movs	r2, #1
 8001aea:	409a      	lsls	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d012      	beq.n	8001b1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00b      	beq.n	8001b1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b06:	2201      	movs	r2, #1
 8001b08:	409a      	lsls	r2, r3
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b12:	f043 0202 	orr.w	r2, r3, #2
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1e:	2204      	movs	r2, #4
 8001b20:	409a      	lsls	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4013      	ands	r3, r2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d012      	beq.n	8001b50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00b      	beq.n	8001b50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b48:	f043 0204 	orr.w	r2, r3, #4
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b54:	2210      	movs	r2, #16
 8001b56:	409a      	lsls	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d043      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d03c      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b72:	2210      	movs	r2, #16
 8001b74:	409a      	lsls	r2, r3
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d018      	beq.n	8001bba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d108      	bne.n	8001ba8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d024      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	4798      	blx	r3
 8001ba6:	e01f      	b.n	8001be8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d01b      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	4798      	blx	r3
 8001bb8:	e016      	b.n	8001be8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d107      	bne.n	8001bd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0208 	bic.w	r2, r2, #8
 8001bd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bec:	2220      	movs	r2, #32
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 808e 	beq.w	8001d16 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0310 	and.w	r3, r3, #16
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 8086 	beq.w	8001d16 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0e:	2220      	movs	r2, #32
 8001c10:	409a      	lsls	r2, r3
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b05      	cmp	r3, #5
 8001c20:	d136      	bne.n	8001c90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0216 	bic.w	r2, r2, #22
 8001c30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695a      	ldr	r2, [r3, #20]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d103      	bne.n	8001c52 <HAL_DMA_IRQHandler+0x1da>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d007      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0208 	bic.w	r2, r2, #8
 8001c60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c66:	223f      	movs	r2, #63	; 0x3f
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d07d      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
        }
        return;
 8001c8e:	e078      	b.n	8001d82 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01c      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d108      	bne.n	8001cbe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d030      	beq.n	8001d16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	4798      	blx	r3
 8001cbc:	e02b      	b.n	8001d16 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d027      	beq.n	8001d16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	4798      	blx	r3
 8001cce:	e022      	b.n	8001d16 <HAL_DMA_IRQHandler+0x29e>
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10f      	bne.n	8001d06 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0210 	bic.w	r2, r2, #16
 8001cf4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d032      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d022      	beq.n	8001d70 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2205      	movs	r2, #5
 8001d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0201 	bic.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	3301      	adds	r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d307      	bcc.n	8001d5e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f2      	bne.n	8001d42 <HAL_DMA_IRQHandler+0x2ca>
 8001d5c:	e000      	b.n	8001d60 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d5e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	4798      	blx	r3
 8001d80:	e000      	b.n	8001d84 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d82:	bf00      	nop
    }
  }
}
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop

08001d8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001da8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b40      	cmp	r3, #64	; 0x40
 8001db8:	d108      	bne.n	8001dcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dca:	e007      	b.n	8001ddc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	60da      	str	r2, [r3, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	3b10      	subs	r3, #16
 8001df8:	4a14      	ldr	r2, [pc, #80]	; (8001e4c <DMA_CalcBaseAndBitshift+0x64>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e02:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <DMA_CalcBaseAndBitshift+0x68>)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d909      	bls.n	8001e2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e1e:	f023 0303 	bic.w	r3, r3, #3
 8001e22:	1d1a      	adds	r2, r3, #4
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	659a      	str	r2, [r3, #88]	; 0x58
 8001e28:	e007      	b.n	8001e3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e32:	f023 0303 	bic.w	r3, r3, #3
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	aaaaaaab 	.word	0xaaaaaaab
 8001e50:	08005c10 	.word	0x08005c10

08001e54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d11f      	bne.n	8001eae <DMA_CheckFifoParam+0x5a>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d856      	bhi.n	8001f22 <DMA_CheckFifoParam+0xce>
 8001e74:	a201      	add	r2, pc, #4	; (adr r2, 8001e7c <DMA_CheckFifoParam+0x28>)
 8001e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7a:	bf00      	nop
 8001e7c:	08001e8d 	.word	0x08001e8d
 8001e80:	08001e9f 	.word	0x08001e9f
 8001e84:	08001e8d 	.word	0x08001e8d
 8001e88:	08001f23 	.word	0x08001f23
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d046      	beq.n	8001f26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e9c:	e043      	b.n	8001f26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ea6:	d140      	bne.n	8001f2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eac:	e03d      	b.n	8001f2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eb6:	d121      	bne.n	8001efc <DMA_CheckFifoParam+0xa8>
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d837      	bhi.n	8001f2e <DMA_CheckFifoParam+0xda>
 8001ebe:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <DMA_CheckFifoParam+0x70>)
 8001ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec4:	08001ed5 	.word	0x08001ed5
 8001ec8:	08001edb 	.word	0x08001edb
 8001ecc:	08001ed5 	.word	0x08001ed5
 8001ed0:	08001eed 	.word	0x08001eed
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed8:	e030      	b.n	8001f3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d025      	beq.n	8001f32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eea:	e022      	b.n	8001f32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ef4:	d11f      	bne.n	8001f36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001efa:	e01c      	b.n	8001f36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d903      	bls.n	8001f0a <DMA_CheckFifoParam+0xb6>
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d003      	beq.n	8001f10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f08:	e018      	b.n	8001f3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f0e:	e015      	b.n	8001f3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00e      	beq.n	8001f3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f20:	e00b      	b.n	8001f3a <DMA_CheckFifoParam+0xe6>
      break;
 8001f22:	bf00      	nop
 8001f24:	e00a      	b.n	8001f3c <DMA_CheckFifoParam+0xe8>
      break;
 8001f26:	bf00      	nop
 8001f28:	e008      	b.n	8001f3c <DMA_CheckFifoParam+0xe8>
      break;
 8001f2a:	bf00      	nop
 8001f2c:	e006      	b.n	8001f3c <DMA_CheckFifoParam+0xe8>
      break;
 8001f2e:	bf00      	nop
 8001f30:	e004      	b.n	8001f3c <DMA_CheckFifoParam+0xe8>
      break;
 8001f32:	bf00      	nop
 8001f34:	e002      	b.n	8001f3c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f36:	bf00      	nop
 8001f38:	e000      	b.n	8001f3c <DMA_CheckFifoParam+0xe8>
      break;
 8001f3a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop

08001f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	e165      	b.n	8002234 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	f040 8154 	bne.w	800222e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d005      	beq.n	8001f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d130      	bne.n	8002000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2203      	movs	r2, #3
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 0201 	and.w	r2, r3, #1
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b03      	cmp	r3, #3
 800200a:	d017      	beq.n	800203c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	2203      	movs	r2, #3
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d123      	bne.n	8002090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	08da      	lsrs	r2, r3, #3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3208      	adds	r2, #8
 8002050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	220f      	movs	r2, #15
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	08da      	lsrs	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3208      	adds	r2, #8
 800208a:	69b9      	ldr	r1, [r7, #24]
 800208c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0203 	and.w	r2, r3, #3
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 80ae 	beq.w	800222e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b5d      	ldr	r3, [pc, #372]	; (800224c <HAL_GPIO_Init+0x300>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4a5c      	ldr	r2, [pc, #368]	; (800224c <HAL_GPIO_Init+0x300>)
 80020dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e0:	6453      	str	r3, [r2, #68]	; 0x44
 80020e2:	4b5a      	ldr	r3, [pc, #360]	; (800224c <HAL_GPIO_Init+0x300>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ee:	4a58      	ldr	r2, [pc, #352]	; (8002250 <HAL_GPIO_Init+0x304>)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	3302      	adds	r3, #2
 80020f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	220f      	movs	r2, #15
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4f      	ldr	r2, [pc, #316]	; (8002254 <HAL_GPIO_Init+0x308>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d025      	beq.n	8002166 <HAL_GPIO_Init+0x21a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4e      	ldr	r2, [pc, #312]	; (8002258 <HAL_GPIO_Init+0x30c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d01f      	beq.n	8002162 <HAL_GPIO_Init+0x216>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4d      	ldr	r2, [pc, #308]	; (800225c <HAL_GPIO_Init+0x310>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d019      	beq.n	800215e <HAL_GPIO_Init+0x212>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4c      	ldr	r2, [pc, #304]	; (8002260 <HAL_GPIO_Init+0x314>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d013      	beq.n	800215a <HAL_GPIO_Init+0x20e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4b      	ldr	r2, [pc, #300]	; (8002264 <HAL_GPIO_Init+0x318>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00d      	beq.n	8002156 <HAL_GPIO_Init+0x20a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4a      	ldr	r2, [pc, #296]	; (8002268 <HAL_GPIO_Init+0x31c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d007      	beq.n	8002152 <HAL_GPIO_Init+0x206>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a49      	ldr	r2, [pc, #292]	; (800226c <HAL_GPIO_Init+0x320>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d101      	bne.n	800214e <HAL_GPIO_Init+0x202>
 800214a:	2306      	movs	r3, #6
 800214c:	e00c      	b.n	8002168 <HAL_GPIO_Init+0x21c>
 800214e:	2307      	movs	r3, #7
 8002150:	e00a      	b.n	8002168 <HAL_GPIO_Init+0x21c>
 8002152:	2305      	movs	r3, #5
 8002154:	e008      	b.n	8002168 <HAL_GPIO_Init+0x21c>
 8002156:	2304      	movs	r3, #4
 8002158:	e006      	b.n	8002168 <HAL_GPIO_Init+0x21c>
 800215a:	2303      	movs	r3, #3
 800215c:	e004      	b.n	8002168 <HAL_GPIO_Init+0x21c>
 800215e:	2302      	movs	r3, #2
 8002160:	e002      	b.n	8002168 <HAL_GPIO_Init+0x21c>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_GPIO_Init+0x21c>
 8002166:	2300      	movs	r3, #0
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	f002 0203 	and.w	r2, r2, #3
 800216e:	0092      	lsls	r2, r2, #2
 8002170:	4093      	lsls	r3, r2
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002178:	4935      	ldr	r1, [pc, #212]	; (8002250 <HAL_GPIO_Init+0x304>)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	089b      	lsrs	r3, r3, #2
 800217e:	3302      	adds	r3, #2
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002186:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <HAL_GPIO_Init+0x324>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021aa:	4a31      	ldr	r2, [pc, #196]	; (8002270 <HAL_GPIO_Init+0x324>)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021b0:	4b2f      	ldr	r3, [pc, #188]	; (8002270 <HAL_GPIO_Init+0x324>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021d4:	4a26      	ldr	r2, [pc, #152]	; (8002270 <HAL_GPIO_Init+0x324>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021da:	4b25      	ldr	r3, [pc, #148]	; (8002270 <HAL_GPIO_Init+0x324>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021fe:	4a1c      	ldr	r2, [pc, #112]	; (8002270 <HAL_GPIO_Init+0x324>)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002204:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <HAL_GPIO_Init+0x324>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002228:	4a11      	ldr	r2, [pc, #68]	; (8002270 <HAL_GPIO_Init+0x324>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3301      	adds	r3, #1
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	2b0f      	cmp	r3, #15
 8002238:	f67f ae96 	bls.w	8001f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	40013800 	.word	0x40013800
 8002254:	40020000 	.word	0x40020000
 8002258:	40020400 	.word	0x40020400
 800225c:	40020800 	.word	0x40020800
 8002260:	40020c00 	.word	0x40020c00
 8002264:	40021000 	.word	0x40021000
 8002268:	40021400 	.word	0x40021400
 800226c:	40021800 	.word	0x40021800
 8002270:	40013c00 	.word	0x40013c00

08002274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
 8002280:	4613      	mov	r3, r2
 8002282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002284:	787b      	ldrb	r3, [r7, #1]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002290:	e003      	b.n	800229a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002292:	887b      	ldrh	r3, [r7, #2]
 8002294:	041a      	lsls	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	619a      	str	r2, [r3, #24]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0cc      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b68      	ldr	r3, [pc, #416]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d90c      	bls.n	80022e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b65      	ldr	r3, [pc, #404]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d2:	4b63      	ldr	r3, [pc, #396]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0b8      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022fc:	4b59      	ldr	r3, [pc, #356]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4a58      	ldr	r2, [pc, #352]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002306:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002314:	4b53      	ldr	r3, [pc, #332]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	4a52      	ldr	r2, [pc, #328]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800231e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002320:	4b50      	ldr	r3, [pc, #320]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	494d      	ldr	r1, [pc, #308]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d044      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	4b47      	ldr	r3, [pc, #284]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d119      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e07f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d003      	beq.n	8002366 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002362:	2b03      	cmp	r3, #3
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	4b3f      	ldr	r3, [pc, #252]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e06f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002376:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e067      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002386:	4b37      	ldr	r3, [pc, #220]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 0203 	bic.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4934      	ldr	r1, [pc, #208]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	4313      	orrs	r3, r2
 8002396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002398:	f7ff f894 	bl	80014c4 <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a0:	f7ff f890 	bl	80014c4 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e04f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 020c 	and.w	r2, r3, #12
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d1eb      	bne.n	80023a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d20c      	bcs.n	80023f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b22      	ldr	r3, [pc, #136]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e032      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4916      	ldr	r1, [pc, #88]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	490e      	ldr	r1, [pc, #56]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800242e:	f000 fdc7 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8002432:	4602      	mov	r2, r0
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	490a      	ldr	r1, [pc, #40]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 8002440:	5ccb      	ldrb	r3, [r1, r3]
 8002442:	fa22 f303 	lsr.w	r3, r2, r3
 8002446:	4a09      	ldr	r2, [pc, #36]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_RCC_ClockConfig+0x1c8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fff4 	bl	800143c <HAL_InitTick>

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023c00 	.word	0x40023c00
 8002464:	40023800 	.word	0x40023800
 8002468:	08005bf8 	.word	0x08005bf8
 800246c:	20000000 	.word	0x20000000
 8002470:	20000004 	.word	0x20000004

08002474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <HAL_RCC_GetHCLKFreq+0x14>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000000 	.word	0x20000000

0800248c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002490:	f7ff fff0 	bl	8002474 <HAL_RCC_GetHCLKFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	0a9b      	lsrs	r3, r3, #10
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4903      	ldr	r1, [pc, #12]	; (80024b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	08005c08 	.word	0x08005c08

080024b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024b8:	f7ff ffdc 	bl	8002474 <HAL_RCC_GetHCLKFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	0b5b      	lsrs	r3, r3, #13
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	4903      	ldr	r1, [pc, #12]	; (80024d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ca:	5ccb      	ldrb	r3, [r1, r3]
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40023800 	.word	0x40023800
 80024d8:	08005c08 	.word	0x08005c08

080024dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08c      	sub	sp, #48	; 0x30
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d010      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002514:	4b6f      	ldr	r3, [pc, #444]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800251a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	496c      	ldr	r1, [pc, #432]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002532:	2301      	movs	r3, #1
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d010      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002542:	4b64      	ldr	r3, [pc, #400]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002548:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	4960      	ldr	r1, [pc, #384]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002560:	2301      	movs	r3, #1
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d017      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002570:	4b58      	ldr	r3, [pc, #352]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002576:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4955      	ldr	r1, [pc, #340]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800258e:	d101      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002590:	2301      	movs	r3, #1
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800259c:	2301      	movs	r3, #1
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d017      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025ac:	4b49      	ldr	r3, [pc, #292]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ba:	4946      	ldr	r1, [pc, #280]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ca:	d101      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80025cc:	2301      	movs	r3, #1
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80025d8:	2301      	movs	r3, #1
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 808a 	beq.w	80026fe <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	4b39      	ldr	r3, [pc, #228]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a38      	ldr	r2, [pc, #224]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b36      	ldr	r3, [pc, #216]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002606:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a33      	ldr	r2, [pc, #204]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002610:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002612:	f7fe ff57 	bl	80014c4 <HAL_GetTick>
 8002616:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002618:	e008      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800261a:	f7fe ff53 	bl	80014c4 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e278      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800262c:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002638:	4b26      	ldr	r3, [pc, #152]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800263a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002640:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d02f      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002650:	6a3a      	ldr	r2, [r7, #32]
 8002652:	429a      	cmp	r2, r3
 8002654:	d028      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002656:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002660:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002666:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800266c:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b01      	cmp	r3, #1
 800267c:	d114      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800267e:	f7fe ff21 	bl	80014c4 <HAL_GetTick>
 8002682:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7fe ff1d 	bl	80014c4 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e240      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ee      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026b4:	d114      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80026c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ca:	4902      	ldr	r1, [pc, #8]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	608b      	str	r3, [r1, #8]
 80026d0:	e00c      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x210>
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40007000 	.word	0x40007000
 80026dc:	42470e40 	.word	0x42470e40
 80026e0:	4b4a      	ldr	r3, [pc, #296]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a49      	ldr	r2, [pc, #292]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80026ea:	6093      	str	r3, [r2, #8]
 80026ec:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f8:	4944      	ldr	r1, [pc, #272]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	d004      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002710:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002712:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002720:	4b3a      	ldr	r3, [pc, #232]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002726:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	4937      	ldr	r1, [pc, #220]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002742:	4b32      	ldr	r3, [pc, #200]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002748:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002750:	492e      	ldr	r1, [pc, #184]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d011      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002764:	4b29      	ldr	r3, [pc, #164]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800276a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002772:	4926      	ldr	r1, [pc, #152]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d101      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002784:	2301      	movs	r3, #1
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002794:	4b1d      	ldr	r3, [pc, #116]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800279a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	491a      	ldr	r1, [pc, #104]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d011      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027bc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c4:	4911      	ldr	r1, [pc, #68]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027d4:	d101      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80027d6:	2301      	movs	r3, #1
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d005      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x310>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027e8:	f040 80ff 	bne.w	80029ea <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027f2:	f7fe fe67 	bl	80014c4 <HAL_GetTick>
 80027f6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027f8:	e00e      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027fa:	f7fe fe63 	bl	80014c4 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d907      	bls.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e188      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800280c:	40023800 	.word	0x40023800
 8002810:	424711e0 	.word	0x424711e0
 8002814:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002818:	4b7e      	ldr	r3, [pc, #504]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1ea      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	2b00      	cmp	r3, #0
 8002836:	d009      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002840:	2b00      	cmp	r3, #0
 8002842:	d028      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002848:	2b00      	cmp	r3, #0
 800284a:	d124      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800284c:	4b71      	ldr	r3, [pc, #452]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800284e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002852:	0c1b      	lsrs	r3, r3, #16
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	3301      	adds	r3, #1
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800285e:	4b6d      	ldr	r3, [pc, #436]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	0e1b      	lsrs	r3, r3, #24
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	019b      	lsls	r3, r3, #6
 8002876:	431a      	orrs	r2, r3
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	085b      	lsrs	r3, r3, #1
 800287c:	3b01      	subs	r3, #1
 800287e:	041b      	lsls	r3, r3, #16
 8002880:	431a      	orrs	r2, r3
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	071b      	lsls	r3, r3, #28
 800288e:	4961      	ldr	r1, [pc, #388]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d004      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d035      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c0:	d130      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80028c2:	4b54      	ldr	r3, [pc, #336]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	3301      	adds	r3, #1
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028d4:	4b4f      	ldr	r3, [pc, #316]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028da:	0f1b      	lsrs	r3, r3, #28
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	019b      	lsls	r3, r3, #6
 80028ec:	431a      	orrs	r2, r3
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	3b01      	subs	r3, #1
 80028f4:	041b      	lsls	r3, r3, #16
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	431a      	orrs	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	071b      	lsls	r3, r3, #28
 8002904:	4943      	ldr	r1, [pc, #268]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800290c:	4b41      	ldr	r3, [pc, #260]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800290e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002912:	f023 021f 	bic.w	r2, r3, #31
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	3b01      	subs	r3, #1
 800291c:	493d      	ldr	r1, [pc, #244]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292c:	2b00      	cmp	r3, #0
 800292e:	d029      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002938:	d124      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800293a:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800293c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	3301      	adds	r3, #1
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800294c:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800294e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002952:	0f1b      	lsrs	r3, r3, #28
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	019b      	lsls	r3, r3, #6
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	3b01      	subs	r3, #1
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	431a      	orrs	r2, r3
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	431a      	orrs	r2, r3
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	071b      	lsls	r3, r3, #28
 800297c:	4925      	ldr	r1, [pc, #148]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800298c:	2b00      	cmp	r3, #0
 800298e:	d016      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	019b      	lsls	r3, r3, #6
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	3b01      	subs	r3, #1
 80029a4:	041b      	lsls	r3, r3, #16
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	061b      	lsls	r3, r3, #24
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	071b      	lsls	r3, r3, #28
 80029b6:	4917      	ldr	r1, [pc, #92]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029be:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029c4:	f7fe fd7e 	bl	80014c4 <HAL_GetTick>
 80029c8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029cc:	f7fe fd7a 	bl	80014c4 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e09f      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029de:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	f040 8095 	bne.w	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029f8:	f7fe fd64 	bl	80014c4 <HAL_GetTick>
 80029fc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029fe:	e00f      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002a00:	f7fe fd60 	bl	80014c4 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d908      	bls.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e085      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	42470068 	.word	0x42470068
 8002a1c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a20:	4b41      	ldr	r3, [pc, #260]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a2c:	d0e8      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d02b      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d127      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002a56:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5c:	0c1b      	lsrs	r3, r3, #16
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	3301      	adds	r3, #1
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699a      	ldr	r2, [r3, #24]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	019b      	lsls	r3, r3, #6
 8002a72:	431a      	orrs	r2, r3
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	085b      	lsrs	r3, r3, #1
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	041b      	lsls	r3, r3, #16
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	061b      	lsls	r3, r3, #24
 8002a84:	4928      	ldr	r1, [pc, #160]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a8c:	4b26      	ldr	r3, [pc, #152]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a92:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	4922      	ldr	r1, [pc, #136]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01d      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aba:	d118      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	0e1b      	lsrs	r3, r3, #24
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	019b      	lsls	r3, r3, #6
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	3b01      	subs	r3, #1
 8002ade:	041b      	lsls	r3, r3, #16
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	061b      	lsls	r3, r3, #24
 8002ae6:	4910      	ldr	r1, [pc, #64]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002aee:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002af4:	f7fe fce6 	bl	80014c4 <HAL_GetTick>
 8002af8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002afc:	f7fe fce2 	bl	80014c4 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e007      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b0e:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b1a:	d1ef      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3730      	adds	r7, #48	; 0x30
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	42470070 	.word	0x42470070

08002b30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	2b07      	cmp	r3, #7
 8002b56:	f200 8224 	bhi.w	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8002b5a:	a201      	add	r2, pc, #4	; (adr r2, 8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8002b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b60:	08002d63 	.word	0x08002d63
 8002b64:	08002e8d 	.word	0x08002e8d
 8002b68:	08002fa3 	.word	0x08002fa3
 8002b6c:	08002b81 	.word	0x08002b81
 8002b70:	08002fa3 	.word	0x08002fa3
 8002b74:	08002fa3 	.word	0x08002fa3
 8002b78:	08002fa3 	.word	0x08002fa3
 8002b7c:	08002b81 	.word	0x08002b81
  switch (PeriphClk)
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8002b80:	4ba8      	ldr	r3, [pc, #672]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b86:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b96:	f000 80d6 	beq.w	8002d46 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ba0:	f200 80dd 	bhi.w	8002d5e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002baa:	f000 809f 	beq.w	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bb4:	f200 80d3 	bhi.w	8002d5e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bbe:	d05b      	beq.n	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc6:	f200 80ca 	bhi.w	8002d5e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002bd0:	f000 80b6 	beq.w	8002d40 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002bda:	f200 80c0 	bhi.w	8002d5e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002be4:	f000 8082 	beq.w	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bee:	f200 80b6 	bhi.w	8002d5e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d004      	beq.n	8002c02 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bfe:	d03b      	beq.n	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8002c00:	e0ad      	b.n	8002d5e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002c02:	4b88      	ldr	r3, [pc, #544]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8002c0e:	4b85      	ldr	r3, [pc, #532]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c18:	4a83      	ldr	r2, [pc, #524]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1e:	61bb      	str	r3, [r7, #24]
 8002c20:	e008      	b.n	8002c34 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8002c22:	4b80      	ldr	r3, [pc, #512]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c2c:	4a7f      	ldr	r2, [pc, #508]	; (8002e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8002c34:	4b7b      	ldr	r3, [pc, #492]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	0e1b      	lsrs	r3, r3, #24
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8002c42:	4b78      	ldr	r3, [pc, #480]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	fb02 f203 	mul.w	r2, r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5a:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8002c5c:	4b71      	ldr	r3, [pc, #452]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	3301      	adds	r3, #1
 8002c6a:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	61fb      	str	r3, [r7, #28]
          break;
 8002c76:	e073      	b.n	8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002c78:	4b6a      	ldr	r3, [pc, #424]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d109      	bne.n	8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002c84:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c8e:	4a66      	ldr	r2, [pc, #408]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	e008      	b.n	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8002c98:	4b62      	ldr	r3, [pc, #392]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ca2:	4a62      	ldr	r2, [pc, #392]	; (8002e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca8:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8002caa:	4b5e      	ldr	r3, [pc, #376]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb0:	0e1b      	lsrs	r3, r3, #24
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8002cb8:	4b5a      	ldr	r3, [pc, #360]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cbe:	099b      	lsrs	r3, r3, #6
 8002cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	fb02 f203 	mul.w	r2, r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd0:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8002cd2:	4b54      	ldr	r3, [pc, #336]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	3301      	adds	r3, #1
 8002cde:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce8:	61fb      	str	r3, [r7, #28]
          break;
 8002cea:	e039      	b.n	8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002cec:	4b4d      	ldr	r3, [pc, #308]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d108      	bne.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002cf8:	4b4a      	ldr	r3, [pc, #296]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d00:	4a49      	ldr	r2, [pc, #292]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	e007      	b.n	8002d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002d0a:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d12:	4a46      	ldr	r2, [pc, #280]	; (8002e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8002d1a:	4b42      	ldr	r3, [pc, #264]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	0f1b      	lsrs	r3, r3, #28
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8002d26:	4b3f      	ldr	r3, [pc, #252]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	099b      	lsrs	r3, r3, #6
 8002d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	fb02 f203 	mul.w	r2, r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3c:	61fb      	str	r3, [r7, #28]
          break;
 8002d3e:	e00f      	b.n	8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8002d40:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002d42:	61fb      	str	r3, [r7, #28]
          break;
 8002d44:	e00c      	b.n	8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002d46:	4b37      	ldr	r3, [pc, #220]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8002d52:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002d54:	61fb      	str	r3, [r7, #28]
          break;
 8002d56:	e003      	b.n	8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8002d58:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002d5a:	61fb      	str	r3, [r7, #28]
          break;
 8002d5c:	e000      	b.n	8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8002d5e:	bf00      	nop
        }
      }
      break;
 8002d60:	e11f      	b.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8002d62:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d68:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002d74:	d079      	beq.n	8002e6a <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002d7c:	f200 8082 	bhi.w	8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d86:	d03c      	beq.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d8e:	d879      	bhi.n	8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d006      	beq.n	8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d9c:	d172      	bne.n	8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002d9e:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002da0:	61fb      	str	r3, [r7, #28]
          break;
 8002da2:	e072      	b.n	8002e8a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002da4:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002db0:	d109      	bne.n	8002dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002db2:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dbc:	4a1b      	ldr	r2, [pc, #108]	; (8002e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002dc6:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dd0:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002dd8:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dde:	099b      	lsrs	r3, r3, #6
 8002de0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	fb02 f303 	mul.w	r3, r2, r3
 8002dea:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002dec:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002df2:	0f1b      	lsrs	r3, r3, #28
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfe:	61fb      	str	r3, [r7, #28]
          break;
 8002e00:	e043      	b.n	8002e8a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e0e:	d111      	bne.n	8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e18:	4a04      	ldr	r2, [pc, #16]	; (8002e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	e010      	b.n	8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	00f42400 	.word	0x00f42400
 8002e2c:	007a1200 	.word	0x007a1200
 8002e30:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002e34:	4b5e      	ldr	r3, [pc, #376]	; (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e3c:	4a5d      	ldr	r2, [pc, #372]	; (8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e42:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8002e44:	4b5a      	ldr	r3, [pc, #360]	; (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	fb02 f303 	mul.w	r3, r2, r3
 8002e54:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8002e56:	4b56      	ldr	r3, [pc, #344]	; (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	0f1b      	lsrs	r3, r3, #28
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e66:	61fb      	str	r3, [r7, #28]
          break;
 8002e68:	e00f      	b.n	8002e8a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e6a:	4b51      	ldr	r3, [pc, #324]	; (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e76:	d102      	bne.n	8002e7e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8002e78:	4b4f      	ldr	r3, [pc, #316]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002e7a:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8002e7c:	e005      	b.n	8002e8a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8002e7e:	4b4d      	ldr	r3, [pc, #308]	; (8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002e80:	61fb      	str	r3, [r7, #28]
          break;
 8002e82:	e002      	b.n	8002e8a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]
          break;
 8002e88:	bf00      	nop
        }
      }
      break;
 8002e8a:	e08a      	b.n	8002fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8002e8c:	4b48      	ldr	r3, [pc, #288]	; (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e92:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002e9e:	d06f      	beq.n	8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002ea6:	d878      	bhi.n	8002f9a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eae:	d03c      	beq.n	8002f2a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eb6:	d870      	bhi.n	8002f9a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d006      	beq.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec4:	d169      	bne.n	8002f9a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002ec6:	4b3d      	ldr	r3, [pc, #244]	; (8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8002ec8:	61fb      	str	r3, [r7, #28]
          break;
 8002eca:	e069      	b.n	8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ecc:	4b38      	ldr	r3, [pc, #224]	; (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed8:	d109      	bne.n	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002eda:	4b35      	ldr	r3, [pc, #212]	; (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ee4:	4a34      	ldr	r2, [pc, #208]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eea:	61bb      	str	r3, [r7, #24]
 8002eec:	e008      	b.n	8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002eee:	4b30      	ldr	r3, [pc, #192]	; (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef8:	4a2e      	ldr	r2, [pc, #184]	; (8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efe:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002f00:	4b2b      	ldr	r3, [pc, #172]	; (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f06:	099b      	lsrs	r3, r3, #6
 8002f08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002f14:	4b26      	ldr	r3, [pc, #152]	; (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f1a:	0f1b      	lsrs	r3, r3, #28
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f26:	61fb      	str	r3, [r7, #28]
          break;
 8002f28:	e03a      	b.n	8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f2a:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f36:	d108      	bne.n	8002f4a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002f38:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f40:	4a1d      	ldr	r2, [pc, #116]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	e007      	b.n	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002f4a:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f52:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8002f5a:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	099b      	lsrs	r3, r3, #6
 8002f60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	fb02 f303 	mul.w	r3, r2, r3
 8002f6a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8002f6c:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	0f1b      	lsrs	r3, r3, #28
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	61fb      	str	r3, [r7, #28]
          break;
 8002f7e:	e00f      	b.n	8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f8c:	d102      	bne.n	8002f94 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8002f90:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8002f92:	e005      	b.n	8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8002f94:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8002f96:	61fb      	str	r3, [r7, #28]
          break;
 8002f98:	e002      	b.n	8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
          break;
 8002f9e:	bf00      	nop
        }
      }
      break;
 8002fa0:	bf00      	nop
    }
  }
  return frequency;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3724      	adds	r7, #36	; 0x24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	00f42400 	.word	0x00f42400
 8002fb8:	007a1200 	.word	0x007a1200
 8002fbc:	00bb8000 	.word	0x00bb8000

08002fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc4:	b088      	sub	sp, #32
 8002fc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fdc:	4bce      	ldr	r3, [pc, #824]	; (8003318 <HAL_RCC_GetSysClockFreq+0x358>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b0c      	cmp	r3, #12
 8002fe6:	f200 818d 	bhi.w	8003304 <HAL_RCC_GetSysClockFreq+0x344>
 8002fea:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <HAL_RCC_GetSysClockFreq+0x30>)
 8002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff0:	08003025 	.word	0x08003025
 8002ff4:	08003305 	.word	0x08003305
 8002ff8:	08003305 	.word	0x08003305
 8002ffc:	08003305 	.word	0x08003305
 8003000:	0800302b 	.word	0x0800302b
 8003004:	08003305 	.word	0x08003305
 8003008:	08003305 	.word	0x08003305
 800300c:	08003305 	.word	0x08003305
 8003010:	08003031 	.word	0x08003031
 8003014:	08003305 	.word	0x08003305
 8003018:	08003305 	.word	0x08003305
 800301c:	08003305 	.word	0x08003305
 8003020:	080031a5 	.word	0x080031a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003024:	4bbd      	ldr	r3, [pc, #756]	; (800331c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003026:	61bb      	str	r3, [r7, #24]
       break;
 8003028:	e16f      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800302a:	4bbd      	ldr	r3, [pc, #756]	; (8003320 <HAL_RCC_GetSysClockFreq+0x360>)
 800302c:	61bb      	str	r3, [r7, #24]
      break;
 800302e:	e16c      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003030:	4bb9      	ldr	r3, [pc, #740]	; (8003318 <HAL_RCC_GetSysClockFreq+0x358>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003038:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800303a:	4bb7      	ldr	r3, [pc, #732]	; (8003318 <HAL_RCC_GetSysClockFreq+0x358>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d053      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003046:	4bb4      	ldr	r3, [pc, #720]	; (8003318 <HAL_RCC_GetSysClockFreq+0x358>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	099b      	lsrs	r3, r3, #6
 800304c:	461a      	mov	r2, r3
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003056:	f04f 0100 	mov.w	r1, #0
 800305a:	ea02 0400 	and.w	r4, r2, r0
 800305e:	603c      	str	r4, [r7, #0]
 8003060:	400b      	ands	r3, r1
 8003062:	607b      	str	r3, [r7, #4]
 8003064:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003068:	4620      	mov	r0, r4
 800306a:	4629      	mov	r1, r5
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	014b      	lsls	r3, r1, #5
 8003076:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800307a:	0142      	lsls	r2, r0, #5
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	4623      	mov	r3, r4
 8003082:	1ac0      	subs	r0, r0, r3
 8003084:	462b      	mov	r3, r5
 8003086:	eb61 0103 	sbc.w	r1, r1, r3
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	018b      	lsls	r3, r1, #6
 8003094:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003098:	0182      	lsls	r2, r0, #6
 800309a:	1a12      	subs	r2, r2, r0
 800309c:	eb63 0301 	sbc.w	r3, r3, r1
 80030a0:	f04f 0000 	mov.w	r0, #0
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	00d9      	lsls	r1, r3, #3
 80030aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030ae:	00d0      	lsls	r0, r2, #3
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4621      	mov	r1, r4
 80030b6:	1852      	adds	r2, r2, r1
 80030b8:	4629      	mov	r1, r5
 80030ba:	eb43 0101 	adc.w	r1, r3, r1
 80030be:	460b      	mov	r3, r1
 80030c0:	f04f 0000 	mov.w	r0, #0
 80030c4:	f04f 0100 	mov.w	r1, #0
 80030c8:	0259      	lsls	r1, r3, #9
 80030ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80030ce:	0250      	lsls	r0, r2, #9
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4610      	mov	r0, r2
 80030d6:	4619      	mov	r1, r3
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	461a      	mov	r2, r3
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	f7fd f99e 	bl	8000420 <__aeabi_uldivmod>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4613      	mov	r3, r2
 80030ea:	61fb      	str	r3, [r7, #28]
 80030ec:	e04c      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ee:	4b8a      	ldr	r3, [pc, #552]	; (8003318 <HAL_RCC_GetSysClockFreq+0x358>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	099b      	lsrs	r3, r3, #6
 80030f4:	461a      	mov	r2, r3
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030fe:	f04f 0100 	mov.w	r1, #0
 8003102:	ea02 0a00 	and.w	sl, r2, r0
 8003106:	ea03 0b01 	and.w	fp, r3, r1
 800310a:	4650      	mov	r0, sl
 800310c:	4659      	mov	r1, fp
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	014b      	lsls	r3, r1, #5
 8003118:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800311c:	0142      	lsls	r2, r0, #5
 800311e:	4610      	mov	r0, r2
 8003120:	4619      	mov	r1, r3
 8003122:	ebb0 000a 	subs.w	r0, r0, sl
 8003126:	eb61 010b 	sbc.w	r1, r1, fp
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	018b      	lsls	r3, r1, #6
 8003134:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003138:	0182      	lsls	r2, r0, #6
 800313a:	1a12      	subs	r2, r2, r0
 800313c:	eb63 0301 	sbc.w	r3, r3, r1
 8003140:	f04f 0000 	mov.w	r0, #0
 8003144:	f04f 0100 	mov.w	r1, #0
 8003148:	00d9      	lsls	r1, r3, #3
 800314a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800314e:	00d0      	lsls	r0, r2, #3
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	eb12 020a 	adds.w	r2, r2, sl
 8003158:	eb43 030b 	adc.w	r3, r3, fp
 800315c:	f04f 0000 	mov.w	r0, #0
 8003160:	f04f 0100 	mov.w	r1, #0
 8003164:	0299      	lsls	r1, r3, #10
 8003166:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800316a:	0290      	lsls	r0, r2, #10
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4610      	mov	r0, r2
 8003172:	4619      	mov	r1, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	461a      	mov	r2, r3
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	f7fd f950 	bl	8000420 <__aeabi_uldivmod>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4613      	mov	r3, r2
 8003186:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003188:	4b63      	ldr	r3, [pc, #396]	; (8003318 <HAL_RCC_GetSysClockFreq+0x358>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	3301      	adds	r3, #1
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a0:	61bb      	str	r3, [r7, #24]
      break;
 80031a2:	e0b2      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031a4:	4b5c      	ldr	r3, [pc, #368]	; (8003318 <HAL_RCC_GetSysClockFreq+0x358>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031ac:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ae:	4b5a      	ldr	r3, [pc, #360]	; (8003318 <HAL_RCC_GetSysClockFreq+0x358>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d04d      	beq.n	8003256 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ba:	4b57      	ldr	r3, [pc, #348]	; (8003318 <HAL_RCC_GetSysClockFreq+0x358>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	099b      	lsrs	r3, r3, #6
 80031c0:	461a      	mov	r2, r3
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031ca:	f04f 0100 	mov.w	r1, #0
 80031ce:	ea02 0800 	and.w	r8, r2, r0
 80031d2:	ea03 0901 	and.w	r9, r3, r1
 80031d6:	4640      	mov	r0, r8
 80031d8:	4649      	mov	r1, r9
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	014b      	lsls	r3, r1, #5
 80031e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031e8:	0142      	lsls	r2, r0, #5
 80031ea:	4610      	mov	r0, r2
 80031ec:	4619      	mov	r1, r3
 80031ee:	ebb0 0008 	subs.w	r0, r0, r8
 80031f2:	eb61 0109 	sbc.w	r1, r1, r9
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	018b      	lsls	r3, r1, #6
 8003200:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003204:	0182      	lsls	r2, r0, #6
 8003206:	1a12      	subs	r2, r2, r0
 8003208:	eb63 0301 	sbc.w	r3, r3, r1
 800320c:	f04f 0000 	mov.w	r0, #0
 8003210:	f04f 0100 	mov.w	r1, #0
 8003214:	00d9      	lsls	r1, r3, #3
 8003216:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800321a:	00d0      	lsls	r0, r2, #3
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	eb12 0208 	adds.w	r2, r2, r8
 8003224:	eb43 0309 	adc.w	r3, r3, r9
 8003228:	f04f 0000 	mov.w	r0, #0
 800322c:	f04f 0100 	mov.w	r1, #0
 8003230:	0259      	lsls	r1, r3, #9
 8003232:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003236:	0250      	lsls	r0, r2, #9
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4610      	mov	r0, r2
 800323e:	4619      	mov	r1, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	461a      	mov	r2, r3
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	f7fd f8ea 	bl	8000420 <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4613      	mov	r3, r2
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	e04a      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003256:	4b30      	ldr	r3, [pc, #192]	; (8003318 <HAL_RCC_GetSysClockFreq+0x358>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	099b      	lsrs	r3, r3, #6
 800325c:	461a      	mov	r2, r3
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003266:	f04f 0100 	mov.w	r1, #0
 800326a:	ea02 0400 	and.w	r4, r2, r0
 800326e:	ea03 0501 	and.w	r5, r3, r1
 8003272:	4620      	mov	r0, r4
 8003274:	4629      	mov	r1, r5
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	014b      	lsls	r3, r1, #5
 8003280:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003284:	0142      	lsls	r2, r0, #5
 8003286:	4610      	mov	r0, r2
 8003288:	4619      	mov	r1, r3
 800328a:	1b00      	subs	r0, r0, r4
 800328c:	eb61 0105 	sbc.w	r1, r1, r5
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	018b      	lsls	r3, r1, #6
 800329a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800329e:	0182      	lsls	r2, r0, #6
 80032a0:	1a12      	subs	r2, r2, r0
 80032a2:	eb63 0301 	sbc.w	r3, r3, r1
 80032a6:	f04f 0000 	mov.w	r0, #0
 80032aa:	f04f 0100 	mov.w	r1, #0
 80032ae:	00d9      	lsls	r1, r3, #3
 80032b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032b4:	00d0      	lsls	r0, r2, #3
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	1912      	adds	r2, r2, r4
 80032bc:	eb45 0303 	adc.w	r3, r5, r3
 80032c0:	f04f 0000 	mov.w	r0, #0
 80032c4:	f04f 0100 	mov.w	r1, #0
 80032c8:	0299      	lsls	r1, r3, #10
 80032ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032ce:	0290      	lsls	r0, r2, #10
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4610      	mov	r0, r2
 80032d6:	4619      	mov	r1, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	461a      	mov	r2, r3
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	f7fd f89e 	bl	8000420 <__aeabi_uldivmod>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4613      	mov	r3, r2
 80032ea:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <HAL_RCC_GetSysClockFreq+0x358>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	0f1b      	lsrs	r3, r3, #28
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003300:	61bb      	str	r3, [r7, #24]
      break;
 8003302:	e002      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003306:	61bb      	str	r3, [r7, #24]
      break;
 8003308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800330a:	69bb      	ldr	r3, [r7, #24]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3720      	adds	r7, #32
 8003310:	46bd      	mov	sp, r7
 8003312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003316:	bf00      	nop
 8003318:	40023800 	.word	0x40023800
 800331c:	00f42400 	.word	0x00f42400
 8003320:	007a1200 	.word	0x007a1200

08003324 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e28d      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 8083 	beq.w	800344a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003344:	4b94      	ldr	r3, [pc, #592]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b04      	cmp	r3, #4
 800334e:	d019      	beq.n	8003384 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003350:	4b91      	ldr	r3, [pc, #580]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003358:	2b08      	cmp	r3, #8
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800335c:	4b8e      	ldr	r3, [pc, #568]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003368:	d00c      	beq.n	8003384 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336a:	4b8b      	ldr	r3, [pc, #556]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003372:	2b0c      	cmp	r3, #12
 8003374:	d112      	bne.n	800339c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003376:	4b88      	ldr	r3, [pc, #544]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003382:	d10b      	bne.n	800339c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003384:	4b84      	ldr	r3, [pc, #528]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d05b      	beq.n	8003448 <HAL_RCC_OscConfig+0x124>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d157      	bne.n	8003448 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e25a      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a4:	d106      	bne.n	80033b4 <HAL_RCC_OscConfig+0x90>
 80033a6:	4b7c      	ldr	r3, [pc, #496]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a7b      	ldr	r2, [pc, #492]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e01d      	b.n	80033f0 <HAL_RCC_OscConfig+0xcc>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0xb4>
 80033be:	4b76      	ldr	r3, [pc, #472]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a75      	ldr	r2, [pc, #468]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	4b73      	ldr	r3, [pc, #460]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a72      	ldr	r2, [pc, #456]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e00b      	b.n	80033f0 <HAL_RCC_OscConfig+0xcc>
 80033d8:	4b6f      	ldr	r3, [pc, #444]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a6e      	ldr	r2, [pc, #440]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b6c      	ldr	r3, [pc, #432]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a6b      	ldr	r2, [pc, #428]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80033ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d013      	beq.n	8003420 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe f864 	bl	80014c4 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003400:	f7fe f860 	bl	80014c4 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e21f      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	4b61      	ldr	r3, [pc, #388]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0xdc>
 800341e:	e014      	b.n	800344a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe f850 	bl	80014c4 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003428:	f7fe f84c 	bl	80014c4 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e20b      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343a:	4b57      	ldr	r3, [pc, #348]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x104>
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d06f      	beq.n	8003536 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003456:	4b50      	ldr	r3, [pc, #320]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b00      	cmp	r3, #0
 8003460:	d017      	beq.n	8003492 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003462:	4b4d      	ldr	r3, [pc, #308]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800346a:	2b08      	cmp	r3, #8
 800346c:	d105      	bne.n	800347a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800346e:	4b4a      	ldr	r3, [pc, #296]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00b      	beq.n	8003492 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347a:	4b47      	ldr	r3, [pc, #284]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003482:	2b0c      	cmp	r3, #12
 8003484:	d11c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003486:	4b44      	ldr	r3, [pc, #272]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d116      	bne.n	80034c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003492:	4b41      	ldr	r3, [pc, #260]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <HAL_RCC_OscConfig+0x186>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d001      	beq.n	80034aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e1d3      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034aa:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4937      	ldr	r1, [pc, #220]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034be:	e03a      	b.n	8003536 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d020      	beq.n	800350a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c8:	4b34      	ldr	r3, [pc, #208]	; (800359c <HAL_RCC_OscConfig+0x278>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ce:	f7fd fff9 	bl	80014c4 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d6:	f7fd fff5 	bl	80014c4 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e1b4      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e8:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f4:	4b28      	ldr	r3, [pc, #160]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4925      	ldr	r1, [pc, #148]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 8003504:	4313      	orrs	r3, r2
 8003506:	600b      	str	r3, [r1, #0]
 8003508:	e015      	b.n	8003536 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800350a:	4b24      	ldr	r3, [pc, #144]	; (800359c <HAL_RCC_OscConfig+0x278>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fd ffd8 	bl	80014c4 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003518:	f7fd ffd4 	bl	80014c4 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e193      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352a:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d036      	beq.n	80035b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d016      	beq.n	8003578 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800354a:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <HAL_RCC_OscConfig+0x27c>)
 800354c:	2201      	movs	r2, #1
 800354e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fd ffb8 	bl	80014c4 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003558:	f7fd ffb4 	bl	80014c4 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e173      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356a:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <HAL_RCC_OscConfig+0x274>)
 800356c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x234>
 8003576:	e01b      	b.n	80035b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <HAL_RCC_OscConfig+0x27c>)
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357e:	f7fd ffa1 	bl	80014c4 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003584:	e00e      	b.n	80035a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003586:	f7fd ff9d 	bl	80014c4 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d907      	bls.n	80035a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e15c      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
 8003598:	40023800 	.word	0x40023800
 800359c:	42470000 	.word	0x42470000
 80035a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a4:	4b8a      	ldr	r3, [pc, #552]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80035a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1ea      	bne.n	8003586 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8097 	beq.w	80036ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035be:	2300      	movs	r3, #0
 80035c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035c2:	4b83      	ldr	r3, [pc, #524]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10f      	bne.n	80035ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	4b7f      	ldr	r3, [pc, #508]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	4a7e      	ldr	r2, [pc, #504]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80035d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035dc:	6413      	str	r3, [r2, #64]	; 0x40
 80035de:	4b7c      	ldr	r3, [pc, #496]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ee:	4b79      	ldr	r3, [pc, #484]	; (80037d4 <HAL_RCC_OscConfig+0x4b0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d118      	bne.n	800362c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035fa:	4b76      	ldr	r3, [pc, #472]	; (80037d4 <HAL_RCC_OscConfig+0x4b0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a75      	ldr	r2, [pc, #468]	; (80037d4 <HAL_RCC_OscConfig+0x4b0>)
 8003600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003606:	f7fd ff5d 	bl	80014c4 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360e:	f7fd ff59 	bl	80014c4 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e118      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003620:	4b6c      	ldr	r3, [pc, #432]	; (80037d4 <HAL_RCC_OscConfig+0x4b0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d106      	bne.n	8003642 <HAL_RCC_OscConfig+0x31e>
 8003634:	4b66      	ldr	r3, [pc, #408]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	4a65      	ldr	r2, [pc, #404]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	6713      	str	r3, [r2, #112]	; 0x70
 8003640:	e01c      	b.n	800367c <HAL_RCC_OscConfig+0x358>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b05      	cmp	r3, #5
 8003648:	d10c      	bne.n	8003664 <HAL_RCC_OscConfig+0x340>
 800364a:	4b61      	ldr	r3, [pc, #388]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	4a60      	ldr	r2, [pc, #384]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 8003650:	f043 0304 	orr.w	r3, r3, #4
 8003654:	6713      	str	r3, [r2, #112]	; 0x70
 8003656:	4b5e      	ldr	r3, [pc, #376]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	4a5d      	ldr	r2, [pc, #372]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	6713      	str	r3, [r2, #112]	; 0x70
 8003662:	e00b      	b.n	800367c <HAL_RCC_OscConfig+0x358>
 8003664:	4b5a      	ldr	r3, [pc, #360]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	4a59      	ldr	r2, [pc, #356]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	6713      	str	r3, [r2, #112]	; 0x70
 8003670:	4b57      	ldr	r3, [pc, #348]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	4a56      	ldr	r2, [pc, #344]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 8003676:	f023 0304 	bic.w	r3, r3, #4
 800367a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d015      	beq.n	80036b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003684:	f7fd ff1e 	bl	80014c4 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800368c:	f7fd ff1a 	bl	80014c4 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e0d7      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a2:	4b4b      	ldr	r3, [pc, #300]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0ee      	beq.n	800368c <HAL_RCC_OscConfig+0x368>
 80036ae:	e014      	b.n	80036da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b0:	f7fd ff08 	bl	80014c4 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b6:	e00a      	b.n	80036ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b8:	f7fd ff04 	bl	80014c4 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e0c1      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ce:	4b40      	ldr	r3, [pc, #256]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1ee      	bne.n	80036b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036da:	7dfb      	ldrb	r3, [r7, #23]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d105      	bne.n	80036ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e0:	4b3b      	ldr	r3, [pc, #236]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	4a3a      	ldr	r2, [pc, #232]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80036e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 80ad 	beq.w	8003850 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036f6:	4b36      	ldr	r3, [pc, #216]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d060      	beq.n	80037c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d145      	bne.n	8003796 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370a:	4b33      	ldr	r3, [pc, #204]	; (80037d8 <HAL_RCC_OscConfig+0x4b4>)
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fd fed8 	bl	80014c4 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003718:	f7fd fed4 	bl	80014c4 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e093      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372a:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	019b      	lsls	r3, r3, #6
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	3b01      	subs	r3, #1
 8003750:	041b      	lsls	r3, r3, #16
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	061b      	lsls	r3, r3, #24
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	071b      	lsls	r3, r3, #28
 8003762:	491b      	ldr	r1, [pc, #108]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003768:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <HAL_RCC_OscConfig+0x4b4>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fd fea9 	bl	80014c4 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003776:	f7fd fea5 	bl	80014c4 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e064      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003788:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x452>
 8003794:	e05c      	b.n	8003850 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003796:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <HAL_RCC_OscConfig+0x4b4>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fd fe92 	bl	80014c4 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a4:	f7fd fe8e 	bl	80014c4 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e04d      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <HAL_RCC_OscConfig+0x4ac>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x480>
 80037c2:	e045      	b.n	8003850 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d107      	bne.n	80037dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e040      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40007000 	.word	0x40007000
 80037d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037dc:	4b1f      	ldr	r3, [pc, #124]	; (800385c <HAL_RCC_OscConfig+0x538>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d030      	beq.n	800384c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d129      	bne.n	800384c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d122      	bne.n	800384c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800380c:	4013      	ands	r3, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003812:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003814:	4293      	cmp	r3, r2
 8003816:	d119      	bne.n	800384c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	3b01      	subs	r3, #1
 8003826:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d10f      	bne.n	800384c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d107      	bne.n	800384c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800

08003860 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d904      	bls.n	8003882 <HAL_SAI_InitProtocol+0x22>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	3b03      	subs	r3, #3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d812      	bhi.n	80038a6 <HAL_SAI_InitProtocol+0x46>
 8003880:	e008      	b.n	8003894 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f9dd 	bl	8003c48 <SAI_InitI2S>
 800388e:	4603      	mov	r3, r0
 8003890:	75fb      	strb	r3, [r7, #23]
      break;
 8003892:	e00b      	b.n	80038ac <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 fa82 	bl	8003da4 <SAI_InitPCM>
 80038a0:	4603      	mov	r3, r0
 80038a2:	75fb      	strb	r3, [r7, #23]
      break;
 80038a4:	e002      	b.n	80038ac <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	75fb      	strb	r3, [r7, #23]
      break;
 80038aa:	bf00      	nop
  }

  if (status == HAL_OK)
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d104      	bne.n	80038bc <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f808 	bl	80038c8 <HAL_SAI_Init>
 80038b8:	4603      	mov	r3, r0
 80038ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e10c      	b.n	8003b04 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fd fc38 	bl	8001174 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 faff 	bl	8003f10 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fba6 	bl	8004064 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d030      	beq.n	8003982 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fbe3 	bl	80040ec <SAI_GetInputClock>
 8003926:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	461a      	mov	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	025b      	lsls	r3, r3, #9
 800393a:	fbb2 f3f3 	udiv	r3, r2, r3
 800393e:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a72      	ldr	r2, [pc, #456]	; (8003b0c <HAL_SAI_Init+0x244>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	08da      	lsrs	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 800394e:	68f9      	ldr	r1, [r7, #12]
 8003950:	4b6e      	ldr	r3, [pc, #440]	; (8003b0c <HAL_SAI_Init+0x244>)
 8003952:	fba3 2301 	umull	r2, r3, r3, r1
 8003956:	08da      	lsrs	r2, r3, #3
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	1aca      	subs	r2, r1, r3
 8003962:	2a08      	cmp	r2, #8
 8003964:	d904      	bls.n	8003970 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003974:	2b04      	cmp	r3, #4
 8003976:	d104      	bne.n	8003982 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	085a      	lsrs	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_SAI_Init+0xca>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d109      	bne.n	80039a6 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_SAI_Init+0xd6>
 800399a:	2300      	movs	r3, #0
 800399c:	e001      	b.n	80039a2 <HAL_SAI_Init+0xda>
 800399e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	e008      	b.n	80039b8 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d102      	bne.n	80039b4 <HAL_SAI_Init+0xec>
 80039ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039b2:	e000      	b.n	80039b6 <HAL_SAI_Init+0xee>
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d811      	bhi.n	80039e4 <HAL_SAI_Init+0x11c>
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d20b      	bcs.n	80039dc <HAL_SAI_Init+0x114>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <HAL_SAI_Init+0x106>
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d003      	beq.n	80039d4 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 80039cc:	e00a      	b.n	80039e4 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	613b      	str	r3, [r7, #16]
    break;
 80039d2:	e008      	b.n	80039e6 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80039d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039d8:	613b      	str	r3, [r7, #16]
    break;
 80039da:	e004      	b.n	80039e6 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80039dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039e0:	613b      	str	r3, [r7, #16]
    break;
 80039e2:	e000      	b.n	80039e6 <HAL_SAI_Init+0x11e>
      break;
 80039e4:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6819      	ldr	r1, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4b47      	ldr	r3, [pc, #284]	; (8003b10 <HAL_SAI_Init+0x248>)
 80039f2:	400b      	ands	r3, r1
 80039f4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6819      	ldr	r1, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a04:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003a0a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	431a      	orrs	r2, r3
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8003a1e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003a2a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	051b      	lsls	r3, r3, #20
 8003a32:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003a4a:	f023 030f 	bic.w	r3, r3, #15
 8003a4e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6859      	ldr	r1, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6899      	ldr	r1, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <HAL_SAI_Init+0x24c>)
 8003a7a:	400b      	ands	r3, r1
 8003a7c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6899      	ldr	r1, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003a8e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 8003a94:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 8003a9a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8003aa4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68d9      	ldr	r1, [r3, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	f24f 0320 	movw	r3, #61472	; 0xf020
 8003abc:	400b      	ands	r3, r1
 8003abe:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68d9      	ldr	r1, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ace:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ad4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8003ad6:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003adc:	3b01      	subs	r3, #1
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	cccccccd 	.word	0xcccccccd
 8003b10:	ff05c010 	.word	0xff05c010
 8003b14:	fff88000 	.word	0xfff88000

08003b18 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	4613      	mov	r3, r2
 8003b24:	80fb      	strh	r3, [r7, #6]
  if ((pData == NULL) || (Size == 0))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_SAI_Receive_DMA+0x1a>
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e074      	b.n	8003c20 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d16d      	bne.n	8003c1e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_SAI_Receive_DMA+0x38>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e067      	b.n	8003c20 <HAL_SAI_Receive_DMA+0x108>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hsai->pBuffPtr = pData;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	669a      	str	r2, [r3, #104]	; 0x68
    hsai->XferSize = Size;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	88fa      	ldrh	r2, [r7, #6]
 8003b62:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    hsai->XferCount = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	88fa      	ldrh	r2, [r7, #6]
 8003b6a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2222      	movs	r2, #34	; 0x22
 8003b7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b82:	4a29      	ldr	r2, [pc, #164]	; (8003c28 <HAL_SAI_Receive_DMA+0x110>)
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8a:	4a28      	ldr	r2, [pc, #160]	; (8003c2c <HAL_SAI_Receive_DMA+0x114>)
 8003b8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b92:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <HAL_SAI_Receive_DMA+0x118>)
 8003b94:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	331c      	adds	r3, #28
 8003ba8:	4619      	mov	r1, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8003bb6:	f7fd fe75 	bl	80018a4 <HAL_DMA_Start_IT>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return  HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e029      	b.n	8003c20 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003bcc:	2100      	movs	r1, #0
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f968 	bl	8003ea4 <SAI_InterruptFlag>
 8003bd4:	4601      	mov	r1, r0
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003bf2:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d107      	bne.n	8003c12 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c10:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e000      	b.n	8003c20 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
  }
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	08003fe1 	.word	0x08003fe1
 8003c2c:	08003f81 	.word	0x08003f81
 8003c30:	08003ffd 	.word	0x08003ffd

08003c34 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <SAI_InitI2S+0x2a>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d103      	bne.n	8003c7a <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40
 8003c78:	e002      	b.n	8003c80 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c86:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c8e:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	661a      	str	r2, [r3, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e076      	b.n	8003d98 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d107      	bne.n	8003cc0 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003cbc:	655a      	str	r2, [r3, #84]	; 0x54
 8003cbe:	e006      	b.n	8003cce <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cc6:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	655a      	str	r2, [r3, #84]	; 0x54
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d84f      	bhi.n	8003d74 <SAI_InitI2S+0x12c>
 8003cd4:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <SAI_InitI2S+0x94>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003d0f 	.word	0x08003d0f
 8003ce4:	08003d31 	.word	0x08003d31
 8003ce8:	08003d53 	.word	0x08003d53

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2280      	movs	r2, #128	; 0x80
 8003cf0:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	085b      	lsrs	r3, r3, #1
 8003d00:	011a      	lsls	r2, r3, #4
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2240      	movs	r2, #64	; 0x40
 8003d0a:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8003d0c:	e034      	b.n	8003d78 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2280      	movs	r2, #128	; 0x80
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	085b      	lsrs	r3, r3, #1
 8003d18:	019a      	lsls	r2, r3, #6
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2280      	movs	r2, #128	; 0x80
 8003d2c:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8003d2e:	e023      	b.n	8003d78 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	22c0      	movs	r2, #192	; 0xc0
 8003d34:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	019a      	lsls	r2, r3, #6
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2280      	movs	r2, #128	; 0x80
 8003d4e:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8003d50:	e012      	b.n	8003d78 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	22e0      	movs	r2, #224	; 0xe0
 8003d56:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	019a      	lsls	r2, r3, #6
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2280      	movs	r2, #128	; 0x80
 8003d70:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8003d72:	e001      	b.n	8003d78 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e00f      	b.n	8003d98 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d10b      	bne.n	8003d96 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d102      	bne.n	8003d8a <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2210      	movs	r2, #16
 8003d88:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d102      	bne.n	8003d96 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2208      	movs	r2, #8
 8003d94:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <SAI_InitPCM+0x2a>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d103      	bne.n	8003dd6 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	641a      	str	r2, [r3, #64]	; 0x40
 8003dd4:	e002      	b.n	8003ddc <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003de8:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003df0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e04:	665a      	str	r2, [r3, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d103      	bne.n	8003e14 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	649a      	str	r2, [r3, #72]	; 0x48
 8003e12:	e002      	b.n	8003e1a <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	220d      	movs	r2, #13
 8003e18:	649a      	str	r2, [r3, #72]	; 0x48
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d837      	bhi.n	8003e90 <SAI_InitPCM+0xec>
 8003e20:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <SAI_InitPCM+0x84>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e39 	.word	0x08003e39
 8003e2c:	08003e4f 	.word	0x08003e4f
 8003e30:	08003e65 	.word	0x08003e65
 8003e34:	08003e7b 	.word	0x08003e7b
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2280      	movs	r2, #128	; 0x80
 8003e3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	011a      	lsls	r2, r3, #4
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2240      	movs	r2, #64	; 0x40
 8003e4a:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8003e4c:	e022      	b.n	8003e94 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2280      	movs	r2, #128	; 0x80
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2280      	movs	r2, #128	; 0x80
 8003e60:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8003e62:	e017      	b.n	8003e94 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	22c0      	movs	r2, #192	; 0xc0
 8003e68:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8003e78:	e00c      	b.n	8003e94 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	22e0      	movs	r2, #224	; 0xe0
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2280      	movs	r2, #128	; 0x80
 8003e8c:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8003e8e:	e001      	b.n	8003e94 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop

08003ea4 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d103      	bne.n	8003ec0 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f043 0308 	orr.w	r3, r3, #8
 8003ebe:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d10b      	bne.n	8003ee0 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d003      	beq.n	8003ed8 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d103      	bne.n	8003ee0 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f043 0310 	orr.w	r3, r3, #16
 8003ede:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d003      	beq.n	8003ef0 <SAI_InterruptFlag+0x4c>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d104      	bne.n	8003efa <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	e003      	b.n	8003f02 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f043 0304 	orr.w	r3, r3, #4
 8003f00:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8003f02:	68fb      	ldr	r3, [r7, #12]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8003f18:	4b17      	ldr	r3, [pc, #92]	; (8003f78 <SAI_Disable+0x68>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <SAI_Disable+0x6c>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	0b1b      	lsrs	r3, r3, #12
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f3a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1e5a      	subs	r2, r3, #1
 8003f40:	60fa      	str	r2, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10a      	bne.n	8003f5c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	72fb      	strb	r3, [r7, #11]
      break;
 8003f5a:	e006      	b.n	8003f6a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e8      	bne.n	8003f3c <SAI_Disable+0x2c>

  return status;
 8003f6a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	20000000 	.word	0x20000000
 8003f7c:	95cbec1b 	.word	0x95cbec1b

08003f80 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f96:	d01c      	beq.n	8003fd2 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003fa6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0U;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f7ff ff76 	bl	8003ea4 <SAI_InterruptFlag>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	43d9      	mvns	r1, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	400a      	ands	r2, r1
 8003fc8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f7fc fe40 	bl	8000c58 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003fd8:	bf00      	nop
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f7fc fe22 	bl	8000c38 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004008:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004010:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004020:	2b01      	cmp	r3, #1
 8004022:	d004      	beq.n	800402e <SAI_DMAError+0x32>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	2b01      	cmp	r3, #1
 800402c:	d112      	bne.n	8004054 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800403c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7ff ff66 	bl	8003f10 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f7ff fded 	bl	8003c34 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b02      	cmp	r3, #2
 8004072:	d00c      	beq.n	800408e <SAI_BlockSynchroConfig+0x2a>
 8004074:	2b02      	cmp	r3, #2
 8004076:	d80d      	bhi.n	8004094 <SAI_BlockSynchroConfig+0x30>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <SAI_BlockSynchroConfig+0x1e>
 800407c:	2b01      	cmp	r3, #1
 800407e:	d003      	beq.n	8004088 <SAI_BlockSynchroConfig+0x24>
 8004080:	e008      	b.n	8004094 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
      break;
 8004086:	e008      	b.n	800409a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004088:	2310      	movs	r3, #16
 800408a:	60fb      	str	r3, [r7, #12]
      break;
 800408c:	e005      	b.n	800409a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800408e:	2320      	movs	r3, #32
 8004090:	60fb      	str	r3, [r7, #12]
      break;
 8004092:	e002      	b.n	800409a <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]
      break;
 8004098:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d103      	bne.n	80040aa <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a0b      	ldr	r2, [pc, #44]	; (80040dc <SAI_BlockSynchroConfig+0x78>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d004      	beq.n	80040be <SAI_BlockSynchroConfig+0x5a>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <SAI_BlockSynchroConfig+0x7c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d103      	bne.n	80040c6 <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 80040be:	4a09      	ldr	r2, [pc, #36]	; (80040e4 <SAI_BlockSynchroConfig+0x80>)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	e003      	b.n	80040ce <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80040c6:	4a08      	ldr	r2, [pc, #32]	; (80040e8 <SAI_BlockSynchroConfig+0x84>)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 80040cc:	bf00      	nop
 80040ce:	bf00      	nop
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40015804 	.word	0x40015804
 80040e0:	40015824 	.word	0x40015824
 80040e4:	40015800 	.word	0x40015800
 80040e8:	40015c00 	.word	0x40015c00

080040ec <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a0a      	ldr	r2, [pc, #40]	; (8004128 <SAI_GetInputClock+0x3c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d004      	beq.n	800410c <SAI_GetInputClock+0x20>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a09      	ldr	r2, [pc, #36]	; (800412c <SAI_GetInputClock+0x40>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d104      	bne.n	8004116 <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800410c:	2004      	movs	r0, #4
 800410e:	f7fe fd0f 	bl	8002b30 <HAL_RCCEx_GetPeriphCLKFreq>
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	e003      	b.n	800411e <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004116:	2008      	movs	r0, #8
 8004118:	f7fe fd0a 	bl	8002b30 <HAL_RCCEx_GetPeriphCLKFreq>
 800411c:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 800411e:	68fb      	ldr	r3, [r7, #12]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40015804 	.word	0x40015804
 800412c:	40015824 	.word	0x40015824

08004130 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e041      	b.n	80041c6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fc ff06 	bl	8000f68 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3304      	adds	r3, #4
 800416c:	4619      	mov	r1, r3
 800416e:	4610      	mov	r0, r2
 8004170:	f000 fb22 	bl	80047b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d104      	bne.n	80041ee <HAL_TIM_IC_Start_IT+0x1e>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	e013      	b.n	8004216 <HAL_TIM_IC_Start_IT+0x46>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d104      	bne.n	80041fe <HAL_TIM_IC_Start_IT+0x2e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	e00b      	b.n	8004216 <HAL_TIM_IC_Start_IT+0x46>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d104      	bne.n	800420e <HAL_TIM_IC_Start_IT+0x3e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800420a:	b2db      	uxtb	r3, r3
 800420c:	e003      	b.n	8004216 <HAL_TIM_IC_Start_IT+0x46>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004214:	b2db      	uxtb	r3, r3
 8004216:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d104      	bne.n	8004228 <HAL_TIM_IC_Start_IT+0x58>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004224:	b2db      	uxtb	r3, r3
 8004226:	e013      	b.n	8004250 <HAL_TIM_IC_Start_IT+0x80>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b04      	cmp	r3, #4
 800422c:	d104      	bne.n	8004238 <HAL_TIM_IC_Start_IT+0x68>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004234:	b2db      	uxtb	r3, r3
 8004236:	e00b      	b.n	8004250 <HAL_TIM_IC_Start_IT+0x80>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b08      	cmp	r3, #8
 800423c:	d104      	bne.n	8004248 <HAL_TIM_IC_Start_IT+0x78>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004244:	b2db      	uxtb	r3, r3
 8004246:	e003      	b.n	8004250 <HAL_TIM_IC_Start_IT+0x80>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800424e:	b2db      	uxtb	r3, r3
 8004250:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004252:	7bbb      	ldrb	r3, [r7, #14]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d102      	bne.n	800425e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004258:	7b7b      	ldrb	r3, [r7, #13]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d001      	beq.n	8004262 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e0cc      	b.n	80043fc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <HAL_TIM_IC_Start_IT+0xa2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004270:	e013      	b.n	800429a <HAL_TIM_IC_Start_IT+0xca>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b04      	cmp	r3, #4
 8004276:	d104      	bne.n	8004282 <HAL_TIM_IC_Start_IT+0xb2>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004280:	e00b      	b.n	800429a <HAL_TIM_IC_Start_IT+0xca>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b08      	cmp	r3, #8
 8004286:	d104      	bne.n	8004292 <HAL_TIM_IC_Start_IT+0xc2>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004290:	e003      	b.n	800429a <HAL_TIM_IC_Start_IT+0xca>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d104      	bne.n	80042aa <HAL_TIM_IC_Start_IT+0xda>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042a8:	e013      	b.n	80042d2 <HAL_TIM_IC_Start_IT+0x102>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d104      	bne.n	80042ba <HAL_TIM_IC_Start_IT+0xea>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042b8:	e00b      	b.n	80042d2 <HAL_TIM_IC_Start_IT+0x102>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d104      	bne.n	80042ca <HAL_TIM_IC_Start_IT+0xfa>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c8:	e003      	b.n	80042d2 <HAL_TIM_IC_Start_IT+0x102>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2202      	movs	r2, #2
 80042ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b0c      	cmp	r3, #12
 80042d6:	d841      	bhi.n	800435c <HAL_TIM_IC_Start_IT+0x18c>
 80042d8:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <HAL_TIM_IC_Start_IT+0x110>)
 80042da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042de:	bf00      	nop
 80042e0:	08004315 	.word	0x08004315
 80042e4:	0800435d 	.word	0x0800435d
 80042e8:	0800435d 	.word	0x0800435d
 80042ec:	0800435d 	.word	0x0800435d
 80042f0:	08004327 	.word	0x08004327
 80042f4:	0800435d 	.word	0x0800435d
 80042f8:	0800435d 	.word	0x0800435d
 80042fc:	0800435d 	.word	0x0800435d
 8004300:	08004339 	.word	0x08004339
 8004304:	0800435d 	.word	0x0800435d
 8004308:	0800435d 	.word	0x0800435d
 800430c:	0800435d 	.word	0x0800435d
 8004310:	0800434b 	.word	0x0800434b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0202 	orr.w	r2, r2, #2
 8004322:	60da      	str	r2, [r3, #12]
      break;
 8004324:	e01d      	b.n	8004362 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f042 0204 	orr.w	r2, r2, #4
 8004334:	60da      	str	r2, [r3, #12]
      break;
 8004336:	e014      	b.n	8004362 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0208 	orr.w	r2, r2, #8
 8004346:	60da      	str	r2, [r3, #12]
      break;
 8004348:	e00b      	b.n	8004362 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0210 	orr.w	r2, r2, #16
 8004358:	60da      	str	r2, [r3, #12]
      break;
 800435a:	e002      	b.n	8004362 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
      break;
 8004360:	bf00      	nop
  }

  if (status == HAL_OK)
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d148      	bne.n	80043fa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2201      	movs	r2, #1
 800436e:	6839      	ldr	r1, [r7, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fbeb 	bl	8004b4c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a22      	ldr	r2, [pc, #136]	; (8004404 <HAL_TIM_IC_Start_IT+0x234>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d022      	beq.n	80043c6 <HAL_TIM_IC_Start_IT+0x1f6>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004388:	d01d      	beq.n	80043c6 <HAL_TIM_IC_Start_IT+0x1f6>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1e      	ldr	r2, [pc, #120]	; (8004408 <HAL_TIM_IC_Start_IT+0x238>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d018      	beq.n	80043c6 <HAL_TIM_IC_Start_IT+0x1f6>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1c      	ldr	r2, [pc, #112]	; (800440c <HAL_TIM_IC_Start_IT+0x23c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <HAL_TIM_IC_Start_IT+0x1f6>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1b      	ldr	r2, [pc, #108]	; (8004410 <HAL_TIM_IC_Start_IT+0x240>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00e      	beq.n	80043c6 <HAL_TIM_IC_Start_IT+0x1f6>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a19      	ldr	r2, [pc, #100]	; (8004414 <HAL_TIM_IC_Start_IT+0x244>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d009      	beq.n	80043c6 <HAL_TIM_IC_Start_IT+0x1f6>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a18      	ldr	r2, [pc, #96]	; (8004418 <HAL_TIM_IC_Start_IT+0x248>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d004      	beq.n	80043c6 <HAL_TIM_IC_Start_IT+0x1f6>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a16      	ldr	r2, [pc, #88]	; (800441c <HAL_TIM_IC_Start_IT+0x24c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d111      	bne.n	80043ea <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b06      	cmp	r3, #6
 80043d6:	d010      	beq.n	80043fa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e8:	e007      	b.n	80043fa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40010000 	.word	0x40010000
 8004408:	40000400 	.word	0x40000400
 800440c:	40000800 	.word	0x40000800
 8004410:	40000c00 	.word	0x40000c00
 8004414:	40010400 	.word	0x40010400
 8004418:	40014000 	.word	0x40014000
 800441c:	40001800 	.word	0x40001800

08004420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b02      	cmp	r3, #2
 8004434:	d122      	bne.n	800447c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b02      	cmp	r3, #2
 8004442:	d11b      	bne.n	800447c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0202 	mvn.w	r2, #2
 800444c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fc f958 	bl	8000718 <HAL_TIM_IC_CaptureCallback>
 8004468:	e005      	b.n	8004476 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f986 	bl	800477c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f98d 	bl	8004790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b04      	cmp	r3, #4
 8004488:	d122      	bne.n	80044d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b04      	cmp	r3, #4
 8004496:	d11b      	bne.n	80044d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0204 	mvn.w	r2, #4
 80044a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2202      	movs	r2, #2
 80044a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fc f92e 	bl	8000718 <HAL_TIM_IC_CaptureCallback>
 80044bc:	e005      	b.n	80044ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f95c 	bl	800477c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f963 	bl	8004790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d122      	bne.n	8004524 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d11b      	bne.n	8004524 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0208 	mvn.w	r2, #8
 80044f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2204      	movs	r2, #4
 80044fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fc f904 	bl	8000718 <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f932 	bl	800477c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f939 	bl	8004790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b10      	cmp	r3, #16
 8004530:	d122      	bne.n	8004578 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b10      	cmp	r3, #16
 800453e:	d11b      	bne.n	8004578 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0210 	mvn.w	r2, #16
 8004548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2208      	movs	r2, #8
 800454e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fc f8da 	bl	8000718 <HAL_TIM_IC_CaptureCallback>
 8004564:	e005      	b.n	8004572 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f908 	bl	800477c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f90f 	bl	8004790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b01      	cmp	r3, #1
 8004584:	d10e      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b01      	cmp	r3, #1
 8004592:	d107      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0201 	mvn.w	r2, #1
 800459c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f8e2 	bl	8004768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ae:	2b80      	cmp	r3, #128	; 0x80
 80045b0:	d10e      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045bc:	2b80      	cmp	r3, #128	; 0x80
 80045be:	d107      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fb6a 	bl	8004ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	d10e      	bne.n	80045fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e8:	2b40      	cmp	r3, #64	; 0x40
 80045ea:	d107      	bne.n	80045fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f8d4 	bl	80047a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b20      	cmp	r3, #32
 8004608:	d10e      	bne.n	8004628 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b20      	cmp	r3, #32
 8004616:	d107      	bne.n	8004628 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0220 	mvn.w	r2, #32
 8004620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fb34 	bl	8004c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004628:	bf00      	nop
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_TIM_IC_ConfigChannel+0x1e>
 800464a:	2302      	movs	r3, #2
 800464c:	e088      	b.n	8004760 <HAL_TIM_IC_ConfigChannel+0x130>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d11b      	bne.n	8004694 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	6819      	ldr	r1, [r3, #0]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f000 f944 	bl	80048f8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 020c 	bic.w	r2, r2, #12
 800467e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6999      	ldr	r1, [r3, #24]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	619a      	str	r2, [r3, #24]
 8004692:	e060      	b.n	8004756 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b04      	cmp	r3, #4
 8004698:	d11c      	bne.n	80046d4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	6819      	ldr	r1, [r3, #0]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f000 f999 	bl	80049e0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699a      	ldr	r2, [r3, #24]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046bc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6999      	ldr	r1, [r3, #24]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	021a      	lsls	r2, r3, #8
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	619a      	str	r2, [r3, #24]
 80046d2:	e040      	b.n	8004756 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d11b      	bne.n	8004712 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	6819      	ldr	r1, [r3, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f000 f9b6 	bl	8004a5a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69da      	ldr	r2, [r3, #28]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 020c 	bic.w	r2, r2, #12
 80046fc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69d9      	ldr	r1, [r3, #28]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	61da      	str	r2, [r3, #28]
 8004710:	e021      	b.n	8004756 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b0c      	cmp	r3, #12
 8004716:	d11c      	bne.n	8004752 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	6819      	ldr	r1, [r3, #0]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f000 f9d3 	bl	8004ad2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69da      	ldr	r2, [r3, #28]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800473a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69d9      	ldr	r1, [r3, #28]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	021a      	lsls	r2, r3, #8
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	61da      	str	r2, [r3, #28]
 8004750:	e001      	b.n	8004756 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800475e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a40      	ldr	r2, [pc, #256]	; (80048cc <TIM_Base_SetConfig+0x114>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <TIM_Base_SetConfig+0x40>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d6:	d00f      	beq.n	80047f8 <TIM_Base_SetConfig+0x40>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a3d      	ldr	r2, [pc, #244]	; (80048d0 <TIM_Base_SetConfig+0x118>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00b      	beq.n	80047f8 <TIM_Base_SetConfig+0x40>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a3c      	ldr	r2, [pc, #240]	; (80048d4 <TIM_Base_SetConfig+0x11c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d007      	beq.n	80047f8 <TIM_Base_SetConfig+0x40>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a3b      	ldr	r2, [pc, #236]	; (80048d8 <TIM_Base_SetConfig+0x120>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d003      	beq.n	80047f8 <TIM_Base_SetConfig+0x40>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a3a      	ldr	r2, [pc, #232]	; (80048dc <TIM_Base_SetConfig+0x124>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d108      	bne.n	800480a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a2f      	ldr	r2, [pc, #188]	; (80048cc <TIM_Base_SetConfig+0x114>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d02b      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004818:	d027      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a2c      	ldr	r2, [pc, #176]	; (80048d0 <TIM_Base_SetConfig+0x118>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d023      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a2b      	ldr	r2, [pc, #172]	; (80048d4 <TIM_Base_SetConfig+0x11c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01f      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a2a      	ldr	r2, [pc, #168]	; (80048d8 <TIM_Base_SetConfig+0x120>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01b      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a29      	ldr	r2, [pc, #164]	; (80048dc <TIM_Base_SetConfig+0x124>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d017      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a28      	ldr	r2, [pc, #160]	; (80048e0 <TIM_Base_SetConfig+0x128>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a27      	ldr	r2, [pc, #156]	; (80048e4 <TIM_Base_SetConfig+0x12c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00f      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a26      	ldr	r2, [pc, #152]	; (80048e8 <TIM_Base_SetConfig+0x130>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00b      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a25      	ldr	r2, [pc, #148]	; (80048ec <TIM_Base_SetConfig+0x134>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d007      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a24      	ldr	r2, [pc, #144]	; (80048f0 <TIM_Base_SetConfig+0x138>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d003      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a23      	ldr	r2, [pc, #140]	; (80048f4 <TIM_Base_SetConfig+0x13c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d108      	bne.n	800487c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a0a      	ldr	r2, [pc, #40]	; (80048cc <TIM_Base_SetConfig+0x114>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d003      	beq.n	80048b0 <TIM_Base_SetConfig+0xf8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a0c      	ldr	r2, [pc, #48]	; (80048dc <TIM_Base_SetConfig+0x124>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d103      	bne.n	80048b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	615a      	str	r2, [r3, #20]
}
 80048be:	bf00      	nop
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	40010000 	.word	0x40010000
 80048d0:	40000400 	.word	0x40000400
 80048d4:	40000800 	.word	0x40000800
 80048d8:	40000c00 	.word	0x40000c00
 80048dc:	40010400 	.word	0x40010400
 80048e0:	40014000 	.word	0x40014000
 80048e4:	40014400 	.word	0x40014400
 80048e8:	40014800 	.word	0x40014800
 80048ec:	40001800 	.word	0x40001800
 80048f0:	40001c00 	.word	0x40001c00
 80048f4:	40002000 	.word	0x40002000

080048f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f023 0201 	bic.w	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4a28      	ldr	r2, [pc, #160]	; (80049c4 <TIM_TI1_SetConfig+0xcc>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d01b      	beq.n	800495e <TIM_TI1_SetConfig+0x66>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492c:	d017      	beq.n	800495e <TIM_TI1_SetConfig+0x66>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a25      	ldr	r2, [pc, #148]	; (80049c8 <TIM_TI1_SetConfig+0xd0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <TIM_TI1_SetConfig+0x66>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a24      	ldr	r2, [pc, #144]	; (80049cc <TIM_TI1_SetConfig+0xd4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00f      	beq.n	800495e <TIM_TI1_SetConfig+0x66>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a23      	ldr	r2, [pc, #140]	; (80049d0 <TIM_TI1_SetConfig+0xd8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00b      	beq.n	800495e <TIM_TI1_SetConfig+0x66>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4a22      	ldr	r2, [pc, #136]	; (80049d4 <TIM_TI1_SetConfig+0xdc>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d007      	beq.n	800495e <TIM_TI1_SetConfig+0x66>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a21      	ldr	r2, [pc, #132]	; (80049d8 <TIM_TI1_SetConfig+0xe0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d003      	beq.n	800495e <TIM_TI1_SetConfig+0x66>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4a20      	ldr	r2, [pc, #128]	; (80049dc <TIM_TI1_SetConfig+0xe4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d101      	bne.n	8004962 <TIM_TI1_SetConfig+0x6a>
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <TIM_TI1_SetConfig+0x6c>
 8004962:	2300      	movs	r3, #0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	e003      	b.n	8004982 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	b2db      	uxtb	r3, r3
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f023 030a 	bic.w	r3, r3, #10
 800499c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f003 030a 	and.w	r3, r3, #10
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	621a      	str	r2, [r3, #32]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40000800 	.word	0x40000800
 80049d0:	40000c00 	.word	0x40000c00
 80049d4:	40010400 	.word	0x40010400
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40001800 	.word	0x40001800

080049e0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f023 0210 	bic.w	r2, r3, #16
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	021b      	lsls	r3, r3, #8
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	031b      	lsls	r3, r3, #12
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	621a      	str	r2, [r3, #32]
}
 8004a4e:	bf00      	nop
 8004a50:	371c      	adds	r7, #28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b087      	sub	sp, #28
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	60f8      	str	r0, [r7, #12]
 8004a62:	60b9      	str	r1, [r7, #8]
 8004a64:	607a      	str	r2, [r7, #4]
 8004a66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f023 0303 	bic.w	r3, r3, #3
 8004a86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004aaa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	021b      	lsls	r3, r3, #8
 8004ab0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b087      	sub	sp, #28
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	607a      	str	r2, [r7, #4]
 8004ade:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	021b      	lsls	r3, r3, #8
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	031b      	lsls	r3, r3, #12
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004b24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	031b      	lsls	r3, r3, #12
 8004b2a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	621a      	str	r2, [r3, #32]
}
 8004b40:	bf00      	nop
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	2201      	movs	r2, #1
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a1a      	ldr	r2, [r3, #32]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	401a      	ands	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a1a      	ldr	r2, [r3, #32]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	fa01 f303 	lsl.w	r3, r1, r3
 8004b84:	431a      	orrs	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e05a      	b.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a21      	ldr	r2, [pc, #132]	; (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d022      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfc:	d01d      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1d      	ldr	r2, [pc, #116]	; (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d018      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1b      	ldr	r2, [pc, #108]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d013      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1a      	ldr	r2, [pc, #104]	; (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00e      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a18      	ldr	r2, [pc, #96]	; (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d009      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a17      	ldr	r2, [pc, #92]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d004      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d10c      	bne.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800
 8004c80:	40000c00 	.word	0x40000c00
 8004c84:	40010400 	.word	0x40010400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40001800 	.word	0x40001800

08004c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e03f      	b.n	8004d4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fc f990 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2224      	movs	r2, #36	; 0x24
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fd7b 	bl	80057f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695a      	ldr	r2, [r3, #20]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b08a      	sub	sp, #40	; 0x28
 8004d56:	af02      	add	r7, sp, #8
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	d17c      	bne.n	8004e6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <HAL_UART_Transmit+0x2c>
 8004d78:	88fb      	ldrh	r3, [r7, #6]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e075      	b.n	8004e6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_UART_Transmit+0x3e>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e06e      	b.n	8004e6e <HAL_UART_Transmit+0x11c>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2221      	movs	r2, #33	; 0x21
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004da6:	f7fc fb8d 	bl	80014c4 <HAL_GetTick>
 8004daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	88fa      	ldrh	r2, [r7, #6]
 8004db0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	88fa      	ldrh	r2, [r7, #6]
 8004db6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc0:	d108      	bne.n	8004dd4 <HAL_UART_Transmit+0x82>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	e003      	b.n	8004ddc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004de4:	e02a      	b.n	8004e3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2200      	movs	r2, #0
 8004dee:	2180      	movs	r1, #128	; 0x80
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 faf9 	bl	80053e8 <UART_WaitOnFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e036      	b.n	8004e6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10b      	bne.n	8004e1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	3302      	adds	r3, #2
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	e007      	b.n	8004e2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	781a      	ldrb	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1cf      	bne.n	8004de6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2140      	movs	r1, #64	; 0x40
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 fac9 	bl	80053e8 <UART_WaitOnFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e006      	b.n	8004e6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	e000      	b.n	8004e6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e6c:	2302      	movs	r3, #2
  }
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3720      	adds	r7, #32
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b0ba      	sub	sp, #232	; 0xe8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10f      	bne.n	8004ede <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <HAL_UART_IRQHandler+0x66>
 8004eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fbd3 	bl	8005682 <UART_Receive_IT>
      return;
 8004edc:	e256      	b.n	800538c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 80de 	beq.w	80050a4 <HAL_UART_IRQHandler+0x22c>
 8004ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ef8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80d1 	beq.w	80050a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <HAL_UART_IRQHandler+0xae>
 8004f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f043 0201 	orr.w	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00b      	beq.n	8004f4a <HAL_UART_IRQHandler+0xd2>
 8004f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f043 0202 	orr.w	r2, r3, #2
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00b      	beq.n	8004f6e <HAL_UART_IRQHandler+0xf6>
 8004f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f043 0204 	orr.w	r2, r3, #4
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d011      	beq.n	8004f9e <HAL_UART_IRQHandler+0x126>
 8004f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d105      	bne.n	8004f92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f043 0208 	orr.w	r2, r3, #8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 81ed 	beq.w	8005382 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x14e>
 8004fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fb5e 	bl	8005682 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	bf0c      	ite	eq
 8004fd4:	2301      	moveq	r3, #1
 8004fd6:	2300      	movne	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d103      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x17a>
 8004fea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d04f      	beq.n	8005092 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fa66 	bl	80054c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005002:	2b40      	cmp	r3, #64	; 0x40
 8005004:	d141      	bne.n	800508a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3314      	adds	r3, #20
 800500c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800501c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3314      	adds	r3, #20
 800502e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005032:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800503e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800504a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1d9      	bne.n	8005006 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	2b00      	cmp	r3, #0
 8005058:	d013      	beq.n	8005082 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	4a7d      	ldr	r2, [pc, #500]	; (8005254 <HAL_UART_IRQHandler+0x3dc>)
 8005060:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	4618      	mov	r0, r3
 8005068:	f7fc fce4 	bl	8001a34 <HAL_DMA_Abort_IT>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800507c:	4610      	mov	r0, r2
 800507e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005080:	e00e      	b.n	80050a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f99a 	bl	80053bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005088:	e00a      	b.n	80050a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f996 	bl	80053bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005090:	e006      	b.n	80050a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f992 	bl	80053bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800509e:	e170      	b.n	8005382 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a0:	bf00      	nop
    return;
 80050a2:	e16e      	b.n	8005382 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	f040 814a 	bne.w	8005342 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80050ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 8143 	beq.w	8005342 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 813c 	beq.w	8005342 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050ca:	2300      	movs	r3, #0
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	60bb      	str	r3, [r7, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ea:	2b40      	cmp	r3, #64	; 0x40
 80050ec:	f040 80b4 	bne.w	8005258 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 8140 	beq.w	8005386 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800510a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800510e:	429a      	cmp	r2, r3
 8005110:	f080 8139 	bcs.w	8005386 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800511a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005126:	f000 8088 	beq.w	800523a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	330c      	adds	r3, #12
 8005130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005140:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005148:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	330c      	adds	r3, #12
 8005152:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005156:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800515a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005162:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800516e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1d9      	bne.n	800512a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3314      	adds	r3, #20
 800517c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005188:	f023 0301 	bic.w	r3, r3, #1
 800518c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3314      	adds	r3, #20
 8005196:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800519a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800519e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80051ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e1      	bne.n	8005176 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3314      	adds	r3, #20
 80051b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3314      	adds	r3, #20
 80051d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e3      	bne.n	80051b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	330c      	adds	r3, #12
 80051fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005202:	e853 3f00 	ldrex	r3, [r3]
 8005206:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800520a:	f023 0310 	bic.w	r3, r3, #16
 800520e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	330c      	adds	r3, #12
 8005218:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800521c:	65ba      	str	r2, [r7, #88]	; 0x58
 800521e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005222:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800522a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e3      	bne.n	80051f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	4618      	mov	r0, r3
 8005236:	f7fc fb8d 	bl	8001954 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005242:	b29b      	uxth	r3, r3
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	b29b      	uxth	r3, r3
 8005248:	4619      	mov	r1, r3
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f8c0 	bl	80053d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005250:	e099      	b.n	8005386 <HAL_UART_IRQHandler+0x50e>
 8005252:	bf00      	nop
 8005254:	0800558b 	.word	0x0800558b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005260:	b29b      	uxth	r3, r3
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 808b 	beq.w	800538a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005274:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 8086 	beq.w	800538a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	330c      	adds	r3, #12
 8005284:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800528e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005294:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	330c      	adds	r3, #12
 800529e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80052a2:	647a      	str	r2, [r7, #68]	; 0x44
 80052a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e3      	bne.n	800527e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3314      	adds	r3, #20
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	623b      	str	r3, [r7, #32]
   return(result);
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3314      	adds	r3, #20
 80052d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052da:	633a      	str	r2, [r7, #48]	; 0x30
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e3      	bne.n	80052b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	330c      	adds	r3, #12
 8005302:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	60fb      	str	r3, [r7, #12]
   return(result);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0310 	bic.w	r3, r3, #16
 8005312:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005320:	61fa      	str	r2, [r7, #28]
 8005322:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	69b9      	ldr	r1, [r7, #24]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	617b      	str	r3, [r7, #20]
   return(result);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e3      	bne.n	80052fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005334:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005338:	4619      	mov	r1, r3
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f848 	bl	80053d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005340:	e023      	b.n	800538a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534a:	2b00      	cmp	r3, #0
 800534c:	d009      	beq.n	8005362 <HAL_UART_IRQHandler+0x4ea>
 800534e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f929 	bl	80055b2 <UART_Transmit_IT>
    return;
 8005360:	e014      	b.n	800538c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00e      	beq.n	800538c <HAL_UART_IRQHandler+0x514>
 800536e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	d008      	beq.n	800538c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f969 	bl	8005652 <UART_EndTransmit_IT>
    return;
 8005380:	e004      	b.n	800538c <HAL_UART_IRQHandler+0x514>
    return;
 8005382:	bf00      	nop
 8005384:	e002      	b.n	800538c <HAL_UART_IRQHandler+0x514>
      return;
 8005386:	bf00      	nop
 8005388:	e000      	b.n	800538c <HAL_UART_IRQHandler+0x514>
      return;
 800538a:	bf00      	nop
  }
}
 800538c:	37e8      	adds	r7, #232	; 0xe8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop

08005394 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b090      	sub	sp, #64	; 0x40
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	4613      	mov	r3, r2
 80053f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f8:	e050      	b.n	800549c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005400:	d04c      	beq.n	800549c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <UART_WaitOnFlagUntilTimeout+0x30>
 8005408:	f7fc f85c 	bl	80014c4 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005414:	429a      	cmp	r2, r3
 8005416:	d241      	bcs.n	800549c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800542e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	330c      	adds	r3, #12
 8005436:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005438:	637a      	str	r2, [r7, #52]	; 0x34
 800543a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800543e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e5      	bne.n	8005418 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3314      	adds	r3, #20
 8005452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	613b      	str	r3, [r7, #16]
   return(result);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f023 0301 	bic.w	r3, r3, #1
 8005462:	63bb      	str	r3, [r7, #56]	; 0x38
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3314      	adds	r3, #20
 800546a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800546c:	623a      	str	r2, [r7, #32]
 800546e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	69f9      	ldr	r1, [r7, #28]
 8005472:	6a3a      	ldr	r2, [r7, #32]
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	61bb      	str	r3, [r7, #24]
   return(result);
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e5      	bne.n	800544c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e00f      	b.n	80054bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	4013      	ands	r3, r2
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	bf0c      	ite	eq
 80054ac:	2301      	moveq	r3, #1
 80054ae:	2300      	movne	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	461a      	mov	r2, r3
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d09f      	beq.n	80053fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3740      	adds	r7, #64	; 0x40
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b095      	sub	sp, #84	; 0x54
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	330c      	adds	r3, #12
 80054d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	330c      	adds	r3, #12
 80054ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054ec:	643a      	str	r2, [r7, #64]	; 0x40
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e5      	bne.n	80054cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3314      	adds	r3, #20
 8005506:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f023 0301 	bic.w	r3, r3, #1
 8005516:	64bb      	str	r3, [r7, #72]	; 0x48
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3314      	adds	r3, #20
 800551e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005520:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005528:	e841 2300 	strex	r3, r2, [r1]
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e5      	bne.n	8005500 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	2b01      	cmp	r3, #1
 800553a:	d119      	bne.n	8005570 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	330c      	adds	r3, #12
 8005542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	e853 3f00 	ldrex	r3, [r3]
 800554a:	60bb      	str	r3, [r7, #8]
   return(result);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f023 0310 	bic.w	r3, r3, #16
 8005552:	647b      	str	r3, [r7, #68]	; 0x44
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	330c      	adds	r3, #12
 800555a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800555c:	61ba      	str	r2, [r7, #24]
 800555e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	6979      	ldr	r1, [r7, #20]
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	e841 2300 	strex	r3, r2, [r1]
 8005568:	613b      	str	r3, [r7, #16]
   return(result);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e5      	bne.n	800553c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800557e:	bf00      	nop
 8005580:	3754      	adds	r7, #84	; 0x54
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005596:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7ff ff09 	bl	80053bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055aa:	bf00      	nop
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b085      	sub	sp, #20
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b21      	cmp	r3, #33	; 0x21
 80055c4:	d13e      	bne.n	8005644 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ce:	d114      	bne.n	80055fa <UART_Transmit_IT+0x48>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d110      	bne.n	80055fa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	1c9a      	adds	r2, r3, #2
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	621a      	str	r2, [r3, #32]
 80055f8:	e008      	b.n	800560c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	1c59      	adds	r1, r3, #1
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6211      	str	r1, [r2, #32]
 8005604:	781a      	ldrb	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005610:	b29b      	uxth	r3, r3
 8005612:	3b01      	subs	r3, #1
 8005614:	b29b      	uxth	r3, r3
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	4619      	mov	r1, r3
 800561a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10f      	bne.n	8005640 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800562e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800563e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	e000      	b.n	8005646 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005644:	2302      	movs	r3, #2
  }
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b082      	sub	sp, #8
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005668:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff fe8e 	bl	8005394 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b08c      	sub	sp, #48	; 0x30
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b22      	cmp	r3, #34	; 0x22
 8005694:	f040 80ab 	bne.w	80057ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a0:	d117      	bne.n	80056d2 <UART_Receive_IT+0x50>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d113      	bne.n	80056d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	1c9a      	adds	r2, r3, #2
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	629a      	str	r2, [r3, #40]	; 0x28
 80056d0:	e026      	b.n	8005720 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80056d8:	2300      	movs	r3, #0
 80056da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e4:	d007      	beq.n	80056f6 <UART_Receive_IT+0x74>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10a      	bne.n	8005704 <UART_Receive_IT+0x82>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005700:	701a      	strb	r2, [r3, #0]
 8005702:	e008      	b.n	8005716 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005710:	b2da      	uxtb	r2, r3
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005724:	b29b      	uxth	r3, r3
 8005726:	3b01      	subs	r3, #1
 8005728:	b29b      	uxth	r3, r3
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	4619      	mov	r1, r3
 800572e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005730:	2b00      	cmp	r3, #0
 8005732:	d15a      	bne.n	80057ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0220 	bic.w	r2, r2, #32
 8005742:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005752:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695a      	ldr	r2, [r3, #20]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0201 	bic.w	r2, r2, #1
 8005762:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005770:	2b01      	cmp	r3, #1
 8005772:	d135      	bne.n	80057e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	330c      	adds	r3, #12
 8005780:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	613b      	str	r3, [r7, #16]
   return(result);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f023 0310 	bic.w	r3, r3, #16
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	330c      	adds	r3, #12
 8005798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579a:	623a      	str	r2, [r7, #32]
 800579c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	69f9      	ldr	r1, [r7, #28]
 80057a0:	6a3a      	ldr	r2, [r7, #32]
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e5      	bne.n	800577a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d10a      	bne.n	80057d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff fdf9 	bl	80053d0 <HAL_UARTEx_RxEventCallback>
 80057de:	e002      	b.n	80057e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff fde1 	bl	80053a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	e002      	b.n	80057f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e000      	b.n	80057f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80057ee:	2302      	movs	r3, #2
  }
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3730      	adds	r7, #48	; 0x30
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	b09f      	sub	sp, #124	; 0x7c
 80057fe:	af00      	add	r7, sp, #0
 8005800:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800580c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800580e:	68d9      	ldr	r1, [r3, #12]
 8005810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	ea40 0301 	orr.w	r3, r0, r1
 8005818:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800581a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	431a      	orrs	r2, r3
 8005824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	431a      	orrs	r2, r3
 800582a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	4313      	orrs	r3, r2
 8005830:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800583c:	f021 010c 	bic.w	r1, r1, #12
 8005840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005846:	430b      	orrs	r3, r1
 8005848:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800584a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005856:	6999      	ldr	r1, [r3, #24]
 8005858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	ea40 0301 	orr.w	r3, r0, r1
 8005860:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	4bc5      	ldr	r3, [pc, #788]	; (8005b7c <UART_SetConfig+0x384>)
 8005868:	429a      	cmp	r2, r3
 800586a:	d004      	beq.n	8005876 <UART_SetConfig+0x7e>
 800586c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	4bc3      	ldr	r3, [pc, #780]	; (8005b80 <UART_SetConfig+0x388>)
 8005872:	429a      	cmp	r2, r3
 8005874:	d103      	bne.n	800587e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005876:	f7fc fe1d 	bl	80024b4 <HAL_RCC_GetPCLK2Freq>
 800587a:	6778      	str	r0, [r7, #116]	; 0x74
 800587c:	e002      	b.n	8005884 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800587e:	f7fc fe05 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 8005882:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800588c:	f040 80b6 	bne.w	80059fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005892:	461c      	mov	r4, r3
 8005894:	f04f 0500 	mov.w	r5, #0
 8005898:	4622      	mov	r2, r4
 800589a:	462b      	mov	r3, r5
 800589c:	1891      	adds	r1, r2, r2
 800589e:	6439      	str	r1, [r7, #64]	; 0x40
 80058a0:	415b      	adcs	r3, r3
 80058a2:	647b      	str	r3, [r7, #68]	; 0x44
 80058a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058a8:	1912      	adds	r2, r2, r4
 80058aa:	eb45 0303 	adc.w	r3, r5, r3
 80058ae:	f04f 0000 	mov.w	r0, #0
 80058b2:	f04f 0100 	mov.w	r1, #0
 80058b6:	00d9      	lsls	r1, r3, #3
 80058b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058bc:	00d0      	lsls	r0, r2, #3
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	1911      	adds	r1, r2, r4
 80058c4:	6639      	str	r1, [r7, #96]	; 0x60
 80058c6:	416b      	adcs	r3, r5
 80058c8:	667b      	str	r3, [r7, #100]	; 0x64
 80058ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f04f 0300 	mov.w	r3, #0
 80058d4:	1891      	adds	r1, r2, r2
 80058d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80058d8:	415b      	adcs	r3, r3
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80058e4:	f7fa fd9c 	bl	8000420 <__aeabi_uldivmod>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4ba5      	ldr	r3, [pc, #660]	; (8005b84 <UART_SetConfig+0x38c>)
 80058ee:	fba3 2302 	umull	r2, r3, r3, r2
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	011e      	lsls	r6, r3, #4
 80058f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058f8:	461c      	mov	r4, r3
 80058fa:	f04f 0500 	mov.w	r5, #0
 80058fe:	4622      	mov	r2, r4
 8005900:	462b      	mov	r3, r5
 8005902:	1891      	adds	r1, r2, r2
 8005904:	6339      	str	r1, [r7, #48]	; 0x30
 8005906:	415b      	adcs	r3, r3
 8005908:	637b      	str	r3, [r7, #52]	; 0x34
 800590a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800590e:	1912      	adds	r2, r2, r4
 8005910:	eb45 0303 	adc.w	r3, r5, r3
 8005914:	f04f 0000 	mov.w	r0, #0
 8005918:	f04f 0100 	mov.w	r1, #0
 800591c:	00d9      	lsls	r1, r3, #3
 800591e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005922:	00d0      	lsls	r0, r2, #3
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	1911      	adds	r1, r2, r4
 800592a:	65b9      	str	r1, [r7, #88]	; 0x58
 800592c:	416b      	adcs	r3, r5
 800592e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	461a      	mov	r2, r3
 8005936:	f04f 0300 	mov.w	r3, #0
 800593a:	1891      	adds	r1, r2, r2
 800593c:	62b9      	str	r1, [r7, #40]	; 0x28
 800593e:	415b      	adcs	r3, r3
 8005940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005946:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800594a:	f7fa fd69 	bl	8000420 <__aeabi_uldivmod>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4b8c      	ldr	r3, [pc, #560]	; (8005b84 <UART_SetConfig+0x38c>)
 8005954:	fba3 1302 	umull	r1, r3, r3, r2
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	2164      	movs	r1, #100	; 0x64
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	3332      	adds	r3, #50	; 0x32
 8005966:	4a87      	ldr	r2, [pc, #540]	; (8005b84 <UART_SetConfig+0x38c>)
 8005968:	fba2 2303 	umull	r2, r3, r2, r3
 800596c:	095b      	lsrs	r3, r3, #5
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005974:	441e      	add	r6, r3
 8005976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005978:	4618      	mov	r0, r3
 800597a:	f04f 0100 	mov.w	r1, #0
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	1894      	adds	r4, r2, r2
 8005984:	623c      	str	r4, [r7, #32]
 8005986:	415b      	adcs	r3, r3
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
 800598a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800598e:	1812      	adds	r2, r2, r0
 8005990:	eb41 0303 	adc.w	r3, r1, r3
 8005994:	f04f 0400 	mov.w	r4, #0
 8005998:	f04f 0500 	mov.w	r5, #0
 800599c:	00dd      	lsls	r5, r3, #3
 800599e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059a2:	00d4      	lsls	r4, r2, #3
 80059a4:	4622      	mov	r2, r4
 80059a6:	462b      	mov	r3, r5
 80059a8:	1814      	adds	r4, r2, r0
 80059aa:	653c      	str	r4, [r7, #80]	; 0x50
 80059ac:	414b      	adcs	r3, r1
 80059ae:	657b      	str	r3, [r7, #84]	; 0x54
 80059b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	461a      	mov	r2, r3
 80059b6:	f04f 0300 	mov.w	r3, #0
 80059ba:	1891      	adds	r1, r2, r2
 80059bc:	61b9      	str	r1, [r7, #24]
 80059be:	415b      	adcs	r3, r3
 80059c0:	61fb      	str	r3, [r7, #28]
 80059c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80059ca:	f7fa fd29 	bl	8000420 <__aeabi_uldivmod>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4b6c      	ldr	r3, [pc, #432]	; (8005b84 <UART_SetConfig+0x38c>)
 80059d4:	fba3 1302 	umull	r1, r3, r3, r2
 80059d8:	095b      	lsrs	r3, r3, #5
 80059da:	2164      	movs	r1, #100	; 0x64
 80059dc:	fb01 f303 	mul.w	r3, r1, r3
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	3332      	adds	r3, #50	; 0x32
 80059e6:	4a67      	ldr	r2, [pc, #412]	; (8005b84 <UART_SetConfig+0x38c>)
 80059e8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ec:	095b      	lsrs	r3, r3, #5
 80059ee:	f003 0207 	and.w	r2, r3, #7
 80059f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4432      	add	r2, r6
 80059f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059fa:	e0b9      	b.n	8005b70 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059fe:	461c      	mov	r4, r3
 8005a00:	f04f 0500 	mov.w	r5, #0
 8005a04:	4622      	mov	r2, r4
 8005a06:	462b      	mov	r3, r5
 8005a08:	1891      	adds	r1, r2, r2
 8005a0a:	6139      	str	r1, [r7, #16]
 8005a0c:	415b      	adcs	r3, r3
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a14:	1912      	adds	r2, r2, r4
 8005a16:	eb45 0303 	adc.w	r3, r5, r3
 8005a1a:	f04f 0000 	mov.w	r0, #0
 8005a1e:	f04f 0100 	mov.w	r1, #0
 8005a22:	00d9      	lsls	r1, r3, #3
 8005a24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a28:	00d0      	lsls	r0, r2, #3
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	eb12 0804 	adds.w	r8, r2, r4
 8005a32:	eb43 0905 	adc.w	r9, r3, r5
 8005a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f04f 0100 	mov.w	r1, #0
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	008b      	lsls	r3, r1, #2
 8005a4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a4e:	0082      	lsls	r2, r0, #2
 8005a50:	4640      	mov	r0, r8
 8005a52:	4649      	mov	r1, r9
 8005a54:	f7fa fce4 	bl	8000420 <__aeabi_uldivmod>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4b49      	ldr	r3, [pc, #292]	; (8005b84 <UART_SetConfig+0x38c>)
 8005a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	011e      	lsls	r6, r3, #4
 8005a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f04f 0100 	mov.w	r1, #0
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	1894      	adds	r4, r2, r2
 8005a74:	60bc      	str	r4, [r7, #8]
 8005a76:	415b      	adcs	r3, r3
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a7e:	1812      	adds	r2, r2, r0
 8005a80:	eb41 0303 	adc.w	r3, r1, r3
 8005a84:	f04f 0400 	mov.w	r4, #0
 8005a88:	f04f 0500 	mov.w	r5, #0
 8005a8c:	00dd      	lsls	r5, r3, #3
 8005a8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a92:	00d4      	lsls	r4, r2, #3
 8005a94:	4622      	mov	r2, r4
 8005a96:	462b      	mov	r3, r5
 8005a98:	1814      	adds	r4, r2, r0
 8005a9a:	64bc      	str	r4, [r7, #72]	; 0x48
 8005a9c:	414b      	adcs	r3, r1
 8005a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f04f 0100 	mov.w	r1, #0
 8005aaa:	f04f 0200 	mov.w	r2, #0
 8005aae:	f04f 0300 	mov.w	r3, #0
 8005ab2:	008b      	lsls	r3, r1, #2
 8005ab4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ab8:	0082      	lsls	r2, r0, #2
 8005aba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005abe:	f7fa fcaf 	bl	8000420 <__aeabi_uldivmod>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4b2f      	ldr	r3, [pc, #188]	; (8005b84 <UART_SetConfig+0x38c>)
 8005ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	2164      	movs	r1, #100	; 0x64
 8005ad0:	fb01 f303 	mul.w	r3, r1, r3
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	3332      	adds	r3, #50	; 0x32
 8005ada:	4a2a      	ldr	r2, [pc, #168]	; (8005b84 <UART_SetConfig+0x38c>)
 8005adc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae0:	095b      	lsrs	r3, r3, #5
 8005ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ae6:	441e      	add	r6, r3
 8005ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aea:	4618      	mov	r0, r3
 8005aec:	f04f 0100 	mov.w	r1, #0
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	1894      	adds	r4, r2, r2
 8005af6:	603c      	str	r4, [r7, #0]
 8005af8:	415b      	adcs	r3, r3
 8005afa:	607b      	str	r3, [r7, #4]
 8005afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b00:	1812      	adds	r2, r2, r0
 8005b02:	eb41 0303 	adc.w	r3, r1, r3
 8005b06:	f04f 0400 	mov.w	r4, #0
 8005b0a:	f04f 0500 	mov.w	r5, #0
 8005b0e:	00dd      	lsls	r5, r3, #3
 8005b10:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b14:	00d4      	lsls	r4, r2, #3
 8005b16:	4622      	mov	r2, r4
 8005b18:	462b      	mov	r3, r5
 8005b1a:	eb12 0a00 	adds.w	sl, r2, r0
 8005b1e:	eb43 0b01 	adc.w	fp, r3, r1
 8005b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f04f 0100 	mov.w	r1, #0
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	008b      	lsls	r3, r1, #2
 8005b36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b3a:	0082      	lsls	r2, r0, #2
 8005b3c:	4650      	mov	r0, sl
 8005b3e:	4659      	mov	r1, fp
 8005b40:	f7fa fc6e 	bl	8000420 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4b0e      	ldr	r3, [pc, #56]	; (8005b84 <UART_SetConfig+0x38c>)
 8005b4a:	fba3 1302 	umull	r1, r3, r3, r2
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	2164      	movs	r1, #100	; 0x64
 8005b52:	fb01 f303 	mul.w	r3, r1, r3
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	3332      	adds	r3, #50	; 0x32
 8005b5c:	4a09      	ldr	r2, [pc, #36]	; (8005b84 <UART_SetConfig+0x38c>)
 8005b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	f003 020f 	and.w	r2, r3, #15
 8005b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4432      	add	r2, r6
 8005b6e:	609a      	str	r2, [r3, #8]
}
 8005b70:	bf00      	nop
 8005b72:	377c      	adds	r7, #124	; 0x7c
 8005b74:	46bd      	mov	sp, r7
 8005b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7a:	bf00      	nop
 8005b7c:	40011000 	.word	0x40011000
 8005b80:	40011400 	.word	0x40011400
 8005b84:	51eb851f 	.word	0x51eb851f

08005b88 <__libc_init_array>:
 8005b88:	b570      	push	{r4, r5, r6, lr}
 8005b8a:	4d0d      	ldr	r5, [pc, #52]	; (8005bc0 <__libc_init_array+0x38>)
 8005b8c:	4c0d      	ldr	r4, [pc, #52]	; (8005bc4 <__libc_init_array+0x3c>)
 8005b8e:	1b64      	subs	r4, r4, r5
 8005b90:	10a4      	asrs	r4, r4, #2
 8005b92:	2600      	movs	r6, #0
 8005b94:	42a6      	cmp	r6, r4
 8005b96:	d109      	bne.n	8005bac <__libc_init_array+0x24>
 8005b98:	4d0b      	ldr	r5, [pc, #44]	; (8005bc8 <__libc_init_array+0x40>)
 8005b9a:	4c0c      	ldr	r4, [pc, #48]	; (8005bcc <__libc_init_array+0x44>)
 8005b9c:	f000 f820 	bl	8005be0 <_init>
 8005ba0:	1b64      	subs	r4, r4, r5
 8005ba2:	10a4      	asrs	r4, r4, #2
 8005ba4:	2600      	movs	r6, #0
 8005ba6:	42a6      	cmp	r6, r4
 8005ba8:	d105      	bne.n	8005bb6 <__libc_init_array+0x2e>
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb0:	4798      	blx	r3
 8005bb2:	3601      	adds	r6, #1
 8005bb4:	e7ee      	b.n	8005b94 <__libc_init_array+0xc>
 8005bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bba:	4798      	blx	r3
 8005bbc:	3601      	adds	r6, #1
 8005bbe:	e7f2      	b.n	8005ba6 <__libc_init_array+0x1e>
 8005bc0:	08005c20 	.word	0x08005c20
 8005bc4:	08005c20 	.word	0x08005c20
 8005bc8:	08005c20 	.word	0x08005c20
 8005bcc:	08005c24 	.word	0x08005c24

08005bd0 <memset>:
 8005bd0:	4402      	add	r2, r0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d100      	bne.n	8005bda <memset+0xa>
 8005bd8:	4770      	bx	lr
 8005bda:	f803 1b01 	strb.w	r1, [r3], #1
 8005bde:	e7f9      	b.n	8005bd4 <memset+0x4>

08005be0 <_init>:
 8005be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be2:	bf00      	nop
 8005be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be6:	bc08      	pop	{r3}
 8005be8:	469e      	mov	lr, r3
 8005bea:	4770      	bx	lr

08005bec <_fini>:
 8005bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bee:	bf00      	nop
 8005bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf2:	bc08      	pop	{r3}
 8005bf4:	469e      	mov	lr, r3
 8005bf6:	4770      	bx	lr
