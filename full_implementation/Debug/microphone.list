
microphone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e38  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007000  08007000  00017000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007020  08007020  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08007020  08007020  00017020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007028  08007028  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007028  08007028  00017028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800702c  0800702c  0001702c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08007030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011c78  20000028  08007054  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011ca0  08007054  00021ca0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d9b  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c7  00000000  00000000  00033def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  000364b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00037670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ff0  00000000  00000000  00038758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141e6  00000000  00000000  0005b748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5ffa  00000000  00000000  0006f92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145928  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bcc  00000000  00000000  00145978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000028 	.word	0x20000028
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006fe8 	.word	0x08006fe8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000002c 	.word	0x2000002c
 8000204:	08006fe8 	.word	0x08006fe8

08000208 <__aeabi_frsub>:
 8000208:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__addsf3>
 800020e:	bf00      	nop

08000210 <__aeabi_fsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000214 <__addsf3>:
 8000214:	0042      	lsls	r2, r0, #1
 8000216:	bf1f      	itttt	ne
 8000218:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800021c:	ea92 0f03 	teqne	r2, r3
 8000220:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000224:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000228:	d06a      	beq.n	8000300 <__addsf3+0xec>
 800022a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800022e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000232:	bfc1      	itttt	gt
 8000234:	18d2      	addgt	r2, r2, r3
 8000236:	4041      	eorgt	r1, r0
 8000238:	4048      	eorgt	r0, r1
 800023a:	4041      	eorgt	r1, r0
 800023c:	bfb8      	it	lt
 800023e:	425b      	neglt	r3, r3
 8000240:	2b19      	cmp	r3, #25
 8000242:	bf88      	it	hi
 8000244:	4770      	bxhi	lr
 8000246:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800024a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800024e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000252:	bf18      	it	ne
 8000254:	4240      	negne	r0, r0
 8000256:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800025a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800025e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000262:	bf18      	it	ne
 8000264:	4249      	negne	r1, r1
 8000266:	ea92 0f03 	teq	r2, r3
 800026a:	d03f      	beq.n	80002ec <__addsf3+0xd8>
 800026c:	f1a2 0201 	sub.w	r2, r2, #1
 8000270:	fa41 fc03 	asr.w	ip, r1, r3
 8000274:	eb10 000c 	adds.w	r0, r0, ip
 8000278:	f1c3 0320 	rsb	r3, r3, #32
 800027c:	fa01 f103 	lsl.w	r1, r1, r3
 8000280:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000284:	d502      	bpl.n	800028c <__addsf3+0x78>
 8000286:	4249      	negs	r1, r1
 8000288:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800028c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000290:	d313      	bcc.n	80002ba <__addsf3+0xa6>
 8000292:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000296:	d306      	bcc.n	80002a6 <__addsf3+0x92>
 8000298:	0840      	lsrs	r0, r0, #1
 800029a:	ea4f 0131 	mov.w	r1, r1, rrx
 800029e:	f102 0201 	add.w	r2, r2, #1
 80002a2:	2afe      	cmp	r2, #254	; 0xfe
 80002a4:	d251      	bcs.n	800034a <__addsf3+0x136>
 80002a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ae:	bf08      	it	eq
 80002b0:	f020 0001 	biceq.w	r0, r0, #1
 80002b4:	ea40 0003 	orr.w	r0, r0, r3
 80002b8:	4770      	bx	lr
 80002ba:	0049      	lsls	r1, r1, #1
 80002bc:	eb40 0000 	adc.w	r0, r0, r0
 80002c0:	3a01      	subs	r2, #1
 80002c2:	bf28      	it	cs
 80002c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002c8:	d2ed      	bcs.n	80002a6 <__addsf3+0x92>
 80002ca:	fab0 fc80 	clz	ip, r0
 80002ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80002d2:	ebb2 020c 	subs.w	r2, r2, ip
 80002d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002da:	bfaa      	itet	ge
 80002dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002e0:	4252      	neglt	r2, r2
 80002e2:	4318      	orrge	r0, r3
 80002e4:	bfbc      	itt	lt
 80002e6:	40d0      	lsrlt	r0, r2
 80002e8:	4318      	orrlt	r0, r3
 80002ea:	4770      	bx	lr
 80002ec:	f092 0f00 	teq	r2, #0
 80002f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002f4:	bf06      	itte	eq
 80002f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002fa:	3201      	addeq	r2, #1
 80002fc:	3b01      	subne	r3, #1
 80002fe:	e7b5      	b.n	800026c <__addsf3+0x58>
 8000300:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000304:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000308:	bf18      	it	ne
 800030a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800030e:	d021      	beq.n	8000354 <__addsf3+0x140>
 8000310:	ea92 0f03 	teq	r2, r3
 8000314:	d004      	beq.n	8000320 <__addsf3+0x10c>
 8000316:	f092 0f00 	teq	r2, #0
 800031a:	bf08      	it	eq
 800031c:	4608      	moveq	r0, r1
 800031e:	4770      	bx	lr
 8000320:	ea90 0f01 	teq	r0, r1
 8000324:	bf1c      	itt	ne
 8000326:	2000      	movne	r0, #0
 8000328:	4770      	bxne	lr
 800032a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800032e:	d104      	bne.n	800033a <__addsf3+0x126>
 8000330:	0040      	lsls	r0, r0, #1
 8000332:	bf28      	it	cs
 8000334:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000338:	4770      	bx	lr
 800033a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800033e:	bf3c      	itt	cc
 8000340:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000344:	4770      	bxcc	lr
 8000346:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800034a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800034e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000352:	4770      	bx	lr
 8000354:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000358:	bf16      	itet	ne
 800035a:	4608      	movne	r0, r1
 800035c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000360:	4601      	movne	r1, r0
 8000362:	0242      	lsls	r2, r0, #9
 8000364:	bf06      	itte	eq
 8000366:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800036a:	ea90 0f01 	teqeq	r0, r1
 800036e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000372:	4770      	bx	lr

08000374 <__aeabi_ui2f>:
 8000374:	f04f 0300 	mov.w	r3, #0
 8000378:	e004      	b.n	8000384 <__aeabi_i2f+0x8>
 800037a:	bf00      	nop

0800037c <__aeabi_i2f>:
 800037c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000380:	bf48      	it	mi
 8000382:	4240      	negmi	r0, r0
 8000384:	ea5f 0c00 	movs.w	ip, r0
 8000388:	bf08      	it	eq
 800038a:	4770      	bxeq	lr
 800038c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000390:	4601      	mov	r1, r0
 8000392:	f04f 0000 	mov.w	r0, #0
 8000396:	e01c      	b.n	80003d2 <__aeabi_l2f+0x2a>

08000398 <__aeabi_ul2f>:
 8000398:	ea50 0201 	orrs.w	r2, r0, r1
 800039c:	bf08      	it	eq
 800039e:	4770      	bxeq	lr
 80003a0:	f04f 0300 	mov.w	r3, #0
 80003a4:	e00a      	b.n	80003bc <__aeabi_l2f+0x14>
 80003a6:	bf00      	nop

080003a8 <__aeabi_l2f>:
 80003a8:	ea50 0201 	orrs.w	r2, r0, r1
 80003ac:	bf08      	it	eq
 80003ae:	4770      	bxeq	lr
 80003b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003b4:	d502      	bpl.n	80003bc <__aeabi_l2f+0x14>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	ea5f 0c01 	movs.w	ip, r1
 80003c0:	bf02      	ittt	eq
 80003c2:	4684      	moveq	ip, r0
 80003c4:	4601      	moveq	r1, r0
 80003c6:	2000      	moveq	r0, #0
 80003c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003cc:	bf08      	it	eq
 80003ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003d6:	fabc f28c 	clz	r2, ip
 80003da:	3a08      	subs	r2, #8
 80003dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003e0:	db10      	blt.n	8000404 <__aeabi_l2f+0x5c>
 80003e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003e6:	4463      	add	r3, ip
 80003e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003ec:	f1c2 0220 	rsb	r2, r2, #32
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	fa20 f202 	lsr.w	r2, r0, r2
 80003f8:	eb43 0002 	adc.w	r0, r3, r2
 80003fc:	bf08      	it	eq
 80003fe:	f020 0001 	biceq.w	r0, r0, #1
 8000402:	4770      	bx	lr
 8000404:	f102 0220 	add.w	r2, r2, #32
 8000408:	fa01 fc02 	lsl.w	ip, r1, r2
 800040c:	f1c2 0220 	rsb	r2, r2, #32
 8000410:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000414:	fa21 f202 	lsr.w	r2, r1, r2
 8000418:	eb43 0002 	adc.w	r0, r3, r2
 800041c:	bf08      	it	eq
 800041e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000422:	4770      	bx	lr

08000424 <__aeabi_uldivmod>:
 8000424:	b953      	cbnz	r3, 800043c <__aeabi_uldivmod+0x18>
 8000426:	b94a      	cbnz	r2, 800043c <__aeabi_uldivmod+0x18>
 8000428:	2900      	cmp	r1, #0
 800042a:	bf08      	it	eq
 800042c:	2800      	cmpeq	r0, #0
 800042e:	bf1c      	itt	ne
 8000430:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000434:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000438:	f000 b974 	b.w	8000724 <__aeabi_idiv0>
 800043c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000440:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	f8dd e004 	ldr.w	lr, [sp, #4]
 800044c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000450:	b004      	add	sp, #16
 8000452:	4770      	bx	lr

08000454 <__udivmoddi4>:
 8000454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000458:	9d08      	ldr	r5, [sp, #32]
 800045a:	4604      	mov	r4, r0
 800045c:	468e      	mov	lr, r1
 800045e:	2b00      	cmp	r3, #0
 8000460:	d14d      	bne.n	80004fe <__udivmoddi4+0xaa>
 8000462:	428a      	cmp	r2, r1
 8000464:	4694      	mov	ip, r2
 8000466:	d969      	bls.n	800053c <__udivmoddi4+0xe8>
 8000468:	fab2 f282 	clz	r2, r2
 800046c:	b152      	cbz	r2, 8000484 <__udivmoddi4+0x30>
 800046e:	fa01 f302 	lsl.w	r3, r1, r2
 8000472:	f1c2 0120 	rsb	r1, r2, #32
 8000476:	fa20 f101 	lsr.w	r1, r0, r1
 800047a:	fa0c fc02 	lsl.w	ip, ip, r2
 800047e:	ea41 0e03 	orr.w	lr, r1, r3
 8000482:	4094      	lsls	r4, r2
 8000484:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000488:	0c21      	lsrs	r1, r4, #16
 800048a:	fbbe f6f8 	udiv	r6, lr, r8
 800048e:	fa1f f78c 	uxth.w	r7, ip
 8000492:	fb08 e316 	mls	r3, r8, r6, lr
 8000496:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800049a:	fb06 f107 	mul.w	r1, r6, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d90a      	bls.n	80004b8 <__udivmoddi4+0x64>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80004aa:	f080 811f 	bcs.w	80006ec <__udivmoddi4+0x298>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 811c 	bls.w	80006ec <__udivmoddi4+0x298>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c8:	fb00 f707 	mul.w	r7, r0, r7
 80004cc:	42a7      	cmp	r7, r4
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x92>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d8:	f080 810a 	bcs.w	80006f0 <__udivmoddi4+0x29c>
 80004dc:	42a7      	cmp	r7, r4
 80004de:	f240 8107 	bls.w	80006f0 <__udivmoddi4+0x29c>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ea:	1be4      	subs	r4, r4, r7
 80004ec:	2600      	movs	r6, #0
 80004ee:	b11d      	cbz	r5, 80004f8 <__udivmoddi4+0xa4>
 80004f0:	40d4      	lsrs	r4, r2
 80004f2:	2300      	movs	r3, #0
 80004f4:	e9c5 4300 	strd	r4, r3, [r5]
 80004f8:	4631      	mov	r1, r6
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	428b      	cmp	r3, r1
 8000500:	d909      	bls.n	8000516 <__udivmoddi4+0xc2>
 8000502:	2d00      	cmp	r5, #0
 8000504:	f000 80ef 	beq.w	80006e6 <__udivmoddi4+0x292>
 8000508:	2600      	movs	r6, #0
 800050a:	e9c5 0100 	strd	r0, r1, [r5]
 800050e:	4630      	mov	r0, r6
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	fab3 f683 	clz	r6, r3
 800051a:	2e00      	cmp	r6, #0
 800051c:	d14a      	bne.n	80005b4 <__udivmoddi4+0x160>
 800051e:	428b      	cmp	r3, r1
 8000520:	d302      	bcc.n	8000528 <__udivmoddi4+0xd4>
 8000522:	4282      	cmp	r2, r0
 8000524:	f200 80f9 	bhi.w	800071a <__udivmoddi4+0x2c6>
 8000528:	1a84      	subs	r4, r0, r2
 800052a:	eb61 0303 	sbc.w	r3, r1, r3
 800052e:	2001      	movs	r0, #1
 8000530:	469e      	mov	lr, r3
 8000532:	2d00      	cmp	r5, #0
 8000534:	d0e0      	beq.n	80004f8 <__udivmoddi4+0xa4>
 8000536:	e9c5 4e00 	strd	r4, lr, [r5]
 800053a:	e7dd      	b.n	80004f8 <__udivmoddi4+0xa4>
 800053c:	b902      	cbnz	r2, 8000540 <__udivmoddi4+0xec>
 800053e:	deff      	udf	#255	; 0xff
 8000540:	fab2 f282 	clz	r2, r2
 8000544:	2a00      	cmp	r2, #0
 8000546:	f040 8092 	bne.w	800066e <__udivmoddi4+0x21a>
 800054a:	eba1 010c 	sub.w	r1, r1, ip
 800054e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000552:	fa1f fe8c 	uxth.w	lr, ip
 8000556:	2601      	movs	r6, #1
 8000558:	0c20      	lsrs	r0, r4, #16
 800055a:	fbb1 f3f7 	udiv	r3, r1, r7
 800055e:	fb07 1113 	mls	r1, r7, r3, r1
 8000562:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000566:	fb0e f003 	mul.w	r0, lr, r3
 800056a:	4288      	cmp	r0, r1
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x12c>
 800056e:	eb1c 0101 	adds.w	r1, ip, r1
 8000572:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000576:	d202      	bcs.n	800057e <__udivmoddi4+0x12a>
 8000578:	4288      	cmp	r0, r1
 800057a:	f200 80cb 	bhi.w	8000714 <__udivmoddi4+0x2c0>
 800057e:	4643      	mov	r3, r8
 8000580:	1a09      	subs	r1, r1, r0
 8000582:	b2a4      	uxth	r4, r4
 8000584:	fbb1 f0f7 	udiv	r0, r1, r7
 8000588:	fb07 1110 	mls	r1, r7, r0, r1
 800058c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000590:	fb0e fe00 	mul.w	lr, lr, r0
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x156>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005a0:	d202      	bcs.n	80005a8 <__udivmoddi4+0x154>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	f200 80bb 	bhi.w	800071e <__udivmoddi4+0x2ca>
 80005a8:	4608      	mov	r0, r1
 80005aa:	eba4 040e 	sub.w	r4, r4, lr
 80005ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005b2:	e79c      	b.n	80004ee <__udivmoddi4+0x9a>
 80005b4:	f1c6 0720 	rsb	r7, r6, #32
 80005b8:	40b3      	lsls	r3, r6
 80005ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80005be:	ea4c 0c03 	orr.w	ip, ip, r3
 80005c2:	fa20 f407 	lsr.w	r4, r0, r7
 80005c6:	fa01 f306 	lsl.w	r3, r1, r6
 80005ca:	431c      	orrs	r4, r3
 80005cc:	40f9      	lsrs	r1, r7
 80005ce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005d2:	fa00 f306 	lsl.w	r3, r0, r6
 80005d6:	fbb1 f8f9 	udiv	r8, r1, r9
 80005da:	0c20      	lsrs	r0, r4, #16
 80005dc:	fa1f fe8c 	uxth.w	lr, ip
 80005e0:	fb09 1118 	mls	r1, r9, r8, r1
 80005e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005e8:	fb08 f00e 	mul.w	r0, r8, lr
 80005ec:	4288      	cmp	r0, r1
 80005ee:	fa02 f206 	lsl.w	r2, r2, r6
 80005f2:	d90b      	bls.n	800060c <__udivmoddi4+0x1b8>
 80005f4:	eb1c 0101 	adds.w	r1, ip, r1
 80005f8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80005fc:	f080 8088 	bcs.w	8000710 <__udivmoddi4+0x2bc>
 8000600:	4288      	cmp	r0, r1
 8000602:	f240 8085 	bls.w	8000710 <__udivmoddi4+0x2bc>
 8000606:	f1a8 0802 	sub.w	r8, r8, #2
 800060a:	4461      	add	r1, ip
 800060c:	1a09      	subs	r1, r1, r0
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb1 f0f9 	udiv	r0, r1, r9
 8000614:	fb09 1110 	mls	r1, r9, r0, r1
 8000618:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800061c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000620:	458e      	cmp	lr, r1
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x1e2>
 8000624:	eb1c 0101 	adds.w	r1, ip, r1
 8000628:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800062c:	d26c      	bcs.n	8000708 <__udivmoddi4+0x2b4>
 800062e:	458e      	cmp	lr, r1
 8000630:	d96a      	bls.n	8000708 <__udivmoddi4+0x2b4>
 8000632:	3802      	subs	r0, #2
 8000634:	4461      	add	r1, ip
 8000636:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800063a:	fba0 9402 	umull	r9, r4, r0, r2
 800063e:	eba1 010e 	sub.w	r1, r1, lr
 8000642:	42a1      	cmp	r1, r4
 8000644:	46c8      	mov	r8, r9
 8000646:	46a6      	mov	lr, r4
 8000648:	d356      	bcc.n	80006f8 <__udivmoddi4+0x2a4>
 800064a:	d053      	beq.n	80006f4 <__udivmoddi4+0x2a0>
 800064c:	b15d      	cbz	r5, 8000666 <__udivmoddi4+0x212>
 800064e:	ebb3 0208 	subs.w	r2, r3, r8
 8000652:	eb61 010e 	sbc.w	r1, r1, lr
 8000656:	fa01 f707 	lsl.w	r7, r1, r7
 800065a:	fa22 f306 	lsr.w	r3, r2, r6
 800065e:	40f1      	lsrs	r1, r6
 8000660:	431f      	orrs	r7, r3
 8000662:	e9c5 7100 	strd	r7, r1, [r5]
 8000666:	2600      	movs	r6, #0
 8000668:	4631      	mov	r1, r6
 800066a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066e:	f1c2 0320 	rsb	r3, r2, #32
 8000672:	40d8      	lsrs	r0, r3
 8000674:	fa0c fc02 	lsl.w	ip, ip, r2
 8000678:	fa21 f303 	lsr.w	r3, r1, r3
 800067c:	4091      	lsls	r1, r2
 800067e:	4301      	orrs	r1, r0
 8000680:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000684:	fa1f fe8c 	uxth.w	lr, ip
 8000688:	fbb3 f0f7 	udiv	r0, r3, r7
 800068c:	fb07 3610 	mls	r6, r7, r0, r3
 8000690:	0c0b      	lsrs	r3, r1, #16
 8000692:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000696:	fb00 f60e 	mul.w	r6, r0, lr
 800069a:	429e      	cmp	r6, r3
 800069c:	fa04 f402 	lsl.w	r4, r4, r2
 80006a0:	d908      	bls.n	80006b4 <__udivmoddi4+0x260>
 80006a2:	eb1c 0303 	adds.w	r3, ip, r3
 80006a6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80006aa:	d22f      	bcs.n	800070c <__udivmoddi4+0x2b8>
 80006ac:	429e      	cmp	r6, r3
 80006ae:	d92d      	bls.n	800070c <__udivmoddi4+0x2b8>
 80006b0:	3802      	subs	r0, #2
 80006b2:	4463      	add	r3, ip
 80006b4:	1b9b      	subs	r3, r3, r6
 80006b6:	b289      	uxth	r1, r1
 80006b8:	fbb3 f6f7 	udiv	r6, r3, r7
 80006bc:	fb07 3316 	mls	r3, r7, r6, r3
 80006c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006c4:	fb06 f30e 	mul.w	r3, r6, lr
 80006c8:	428b      	cmp	r3, r1
 80006ca:	d908      	bls.n	80006de <__udivmoddi4+0x28a>
 80006cc:	eb1c 0101 	adds.w	r1, ip, r1
 80006d0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80006d4:	d216      	bcs.n	8000704 <__udivmoddi4+0x2b0>
 80006d6:	428b      	cmp	r3, r1
 80006d8:	d914      	bls.n	8000704 <__udivmoddi4+0x2b0>
 80006da:	3e02      	subs	r6, #2
 80006dc:	4461      	add	r1, ip
 80006de:	1ac9      	subs	r1, r1, r3
 80006e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006e4:	e738      	b.n	8000558 <__udivmoddi4+0x104>
 80006e6:	462e      	mov	r6, r5
 80006e8:	4628      	mov	r0, r5
 80006ea:	e705      	b.n	80004f8 <__udivmoddi4+0xa4>
 80006ec:	4606      	mov	r6, r0
 80006ee:	e6e3      	b.n	80004b8 <__udivmoddi4+0x64>
 80006f0:	4618      	mov	r0, r3
 80006f2:	e6f8      	b.n	80004e6 <__udivmoddi4+0x92>
 80006f4:	454b      	cmp	r3, r9
 80006f6:	d2a9      	bcs.n	800064c <__udivmoddi4+0x1f8>
 80006f8:	ebb9 0802 	subs.w	r8, r9, r2
 80006fc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000700:	3801      	subs	r0, #1
 8000702:	e7a3      	b.n	800064c <__udivmoddi4+0x1f8>
 8000704:	4646      	mov	r6, r8
 8000706:	e7ea      	b.n	80006de <__udivmoddi4+0x28a>
 8000708:	4620      	mov	r0, r4
 800070a:	e794      	b.n	8000636 <__udivmoddi4+0x1e2>
 800070c:	4640      	mov	r0, r8
 800070e:	e7d1      	b.n	80006b4 <__udivmoddi4+0x260>
 8000710:	46d0      	mov	r8, sl
 8000712:	e77b      	b.n	800060c <__udivmoddi4+0x1b8>
 8000714:	3b02      	subs	r3, #2
 8000716:	4461      	add	r1, ip
 8000718:	e732      	b.n	8000580 <__udivmoddi4+0x12c>
 800071a:	4630      	mov	r0, r6
 800071c:	e709      	b.n	8000532 <__udivmoddi4+0xde>
 800071e:	4464      	add	r4, ip
 8000720:	3802      	subs	r0, #2
 8000722:	e742      	b.n	80005aa <__udivmoddi4+0x156>

08000724 <__aeabi_idiv0>:
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop

08000728 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800073e:	b2db      	uxtb	r3, r3
 8000740:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6858      	ldr	r0, [r3, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	8adb      	ldrh	r3, [r3, #22]
 800074a:	2200      	movs	r2, #0
 800074c:	4619      	mov	r1, r3
 800074e:	f002 f8c3 	bl	80028d8 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6818      	ldr	r0, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	1cf9      	adds	r1, r7, #3
 800075c:	2201      	movs	r2, #1
 800075e:	f004 f920 	bl	80049a2 <HAL_SPI_Transmit>
 8000762:	4603      	mov	r3, r0
 8000764:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	f107 010f 	add.w	r1, r7, #15
 8000772:	2201      	movs	r2, #1
 8000774:	f004 fa51 	bl	8004c1a <HAL_SPI_Receive>
 8000778:	4603      	mov	r3, r0
 800077a:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6858      	ldr	r0, [r3, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	8adb      	ldrh	r3, [r3, #22]
 8000784:	2201      	movs	r2, #1
 8000786:	4619      	mov	r1, r3
 8000788:	f002 f8a6 	bl	80028d8 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 800078c:	7bfb      	ldrb	r3, [r7, #15]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b084      	sub	sp, #16
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	460b      	mov	r3, r1
 80007a0:	70fb      	strb	r3, [r7, #3]
 80007a2:	4613      	mov	r3, r2
 80007a4:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007ac:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 80007ae:	78bb      	ldrb	r3, [r7, #2]
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	78fb      	ldrb	r3, [r7, #3]
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	4313      	orrs	r3, r2
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	b29b      	uxth	r3, r3
 80007be:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6858      	ldr	r0, [r3, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	8adb      	ldrh	r3, [r3, #22]
 80007c8:	2200      	movs	r2, #0
 80007ca:	4619      	mov	r1, r3
 80007cc:	f002 f884 	bl	80028d8 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	f107 010a 	add.w	r1, r7, #10
 80007dc:	2202      	movs	r2, #2
 80007de:	f004 f8e0 	bl	80049a2 <HAL_SPI_Transmit>
 80007e2:	4603      	mov	r3, r0
 80007e4:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6858      	ldr	r0, [r3, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	8adb      	ldrh	r3, [r3, #22]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4619      	mov	r1, r3
 80007f2:	f002 f871 	bl	80028d8 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	460b      	mov	r3, r1
 8000808:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 800080a:	78fb      	ldrb	r3, [r7, #3]
 800080c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000810:	b2db      	uxtb	r3, r3
 8000812:	461a      	mov	r2, r3
 8000814:	2101      	movs	r1, #1
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f7ff ffbd 	bl	8000796 <write_register>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	2b2c      	cmp	r3, #44	; 0x2c
 8000834:	d801      	bhi.n	800083a <set_OCP+0x16>
    imax = 45;
 8000836:	232d      	movs	r3, #45	; 0x2d
 8000838:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 800083a:	78fb      	ldrb	r3, [r7, #3]
 800083c:	2bf0      	cmp	r3, #240	; 0xf0
 800083e:	d901      	bls.n	8000844 <set_OCP+0x20>
    imax = 240;
 8000840:	23f0      	movs	r3, #240	; 0xf0
 8000842:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8000844:	78fb      	ldrb	r3, [r7, #3]
 8000846:	2b81      	cmp	r3, #129	; 0x81
 8000848:	d809      	bhi.n	800085e <set_OCP+0x3a>
    value = (imax - 45) / 5;
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	3b2d      	subs	r3, #45	; 0x2d
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <set_OCP+0x68>)
 8000850:	fb82 1203 	smull	r1, r2, r2, r3
 8000854:	1052      	asrs	r2, r2, #1
 8000856:	17db      	asrs	r3, r3, #31
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	73fb      	strb	r3, [r7, #15]
 800085c:	e008      	b.n	8000870 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 800085e:	78fb      	ldrb	r3, [r7, #3]
 8000860:	331e      	adds	r3, #30
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <set_OCP+0x68>)
 8000864:	fb82 1203 	smull	r1, r2, r2, r3
 8000868:	1092      	asrs	r2, r2, #2
 800086a:	17db      	asrs	r3, r3, #31
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	f043 0320 	orr.w	r3, r3, #32
 8000876:	b2db      	uxtb	r3, r3
 8000878:	461a      	mov	r2, r3
 800087a:	210b      	movs	r1, #11
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ff8a 	bl	8000796 <write_register>
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	66666667 	.word	0x66666667

08000890 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8000890:	b5b0      	push	{r4, r5, r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8000898:	211d      	movs	r1, #29
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ff44 	bl	8000728 <read_register>
 80008a0:	4603      	mov	r3, r0
 80008a2:	091b      	lsrs	r3, r3, #4
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2200      	movs	r2, #0
 80008aa:	461c      	mov	r4, r3
 80008ac:	4615      	mov	r5, r2
 80008ae:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 80008b2:	211e      	movs	r1, #30
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff ff37 	bl	8000728 <read_register>
 80008ba:	4603      	mov	r3, r0
 80008bc:	091b      	lsrs	r3, r3, #4
 80008be:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 80008c0:	2304      	movs	r3, #4
 80008c2:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	2b0a      	cmp	r3, #10
 80008c8:	d908      	bls.n	80008dc <set_low_data_rate_optimization+0x4c>
 80008ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80008ce:	1fd1      	subs	r1, r2, #7
 80008d0:	430b      	orrs	r3, r1
 80008d2:	d103      	bne.n	80008dc <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 80008d4:	7ffb      	ldrb	r3, [r7, #31]
 80008d6:	f043 0308 	orr.w	r3, r3, #8
 80008da:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 80008dc:	7ffb      	ldrb	r3, [r7, #31]
 80008de:	461a      	mov	r2, r3
 80008e0:	2126      	movs	r1, #38	; 0x26
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ff57 	bl	8000796 <write_register>
}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bdb0      	pop	{r4, r5, r7, pc}

080008f0 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 80008f8:	2100      	movs	r1, #0
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ff7f 	bl	80007fe <set_mode>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8000910:	2101      	movs	r1, #1
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff ff73 	bl	80007fe <set_mode>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8000928:	211d      	movs	r1, #29
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff fefc 	bl	8000728 <read_register>
 8000930:	4603      	mov	r3, r0
 8000932:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	f023 0301 	bic.w	r3, r3, #1
 800093a:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	461a      	mov	r2, r3
 8000940:	211d      	movs	r1, #29
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ff27 	bl	8000796 <write_register>
}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d10e      	bne.n	8000982 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	2b0f      	cmp	r3, #15
 8000968:	d901      	bls.n	800096e <lora_set_tx_power+0x1e>
      level = 15;
 800096a:	230f      	movs	r3, #15
 800096c:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 800096e:	78fb      	ldrb	r3, [r7, #3]
 8000970:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000974:	b2db      	uxtb	r3, r3
 8000976:	461a      	mov	r2, r3
 8000978:	2109      	movs	r1, #9
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ff0b 	bl	8000796 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8000980:	e02e      	b.n	80009e0 <lora_set_tx_power+0x90>
    if (level > 20) {
 8000982:	78fb      	ldrb	r3, [r7, #3]
 8000984:	2b14      	cmp	r3, #20
 8000986:	d901      	bls.n	800098c <lora_set_tx_power+0x3c>
      level = 20;
 8000988:	2314      	movs	r3, #20
 800098a:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d801      	bhi.n	8000996 <lora_set_tx_power+0x46>
      level = 2;
 8000992:	2302      	movs	r3, #2
 8000994:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8000996:	78fb      	ldrb	r3, [r7, #3]
 8000998:	2b11      	cmp	r3, #17
 800099a:	d90c      	bls.n	80009b6 <lora_set_tx_power+0x66>
      level -= 3;
 800099c:	78fb      	ldrb	r3, [r7, #3]
 800099e:	3b03      	subs	r3, #3
 80009a0:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80009a2:	2287      	movs	r2, #135	; 0x87
 80009a4:	214d      	movs	r1, #77	; 0x4d
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff fef5 	bl	8000796 <write_register>
      set_OCP(lora, 140);
 80009ac:	218c      	movs	r1, #140	; 0x8c
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff ff38 	bl	8000824 <set_OCP>
 80009b4:	e008      	b.n	80009c8 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 80009b6:	2284      	movs	r2, #132	; 0x84
 80009b8:	214d      	movs	r1, #77	; 0x4d
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff feeb 	bl	8000796 <write_register>
      set_OCP(lora, 97);
 80009c0:	2161      	movs	r1, #97	; 0x61
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ff2e 	bl	8000824 <set_OCP>
    level -= 2;
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	3b02      	subs	r3, #2
 80009cc:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	2109      	movs	r1, #9
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff fedb 	bl	8000796 <write_register>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 80009f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009f8:	f04f 0000 	mov.w	r0, #0
 80009fc:	f04f 0100 	mov.w	r1, #0
 8000a00:	04d9      	lsls	r1, r3, #19
 8000a02:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000a06:	04d0      	lsls	r0, r2, #19
 8000a08:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <lora_set_frequency+0x88>)
 8000a0a:	f04f 0300 	mov.w	r3, #0
 8000a0e:	f7ff fd09 	bl	8000424 <__aeabi_uldivmod>
 8000a12:	4602      	mov	r2, r0
 8000a14:	460b      	mov	r3, r1
 8000a16:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8000a1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000a1e:	f04f 0200 	mov.w	r2, #0
 8000a22:	f04f 0300 	mov.w	r3, #0
 8000a26:	0c02      	lsrs	r2, r0, #16
 8000a28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a2c:	0c0b      	lsrs	r3, r1, #16
 8000a2e:	b2d3      	uxtb	r3, r2
 8000a30:	461a      	mov	r2, r3
 8000a32:	2106      	movs	r1, #6
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f7ff feae 	bl	8000796 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8000a3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000a3e:	f04f 0200 	mov.w	r2, #0
 8000a42:	f04f 0300 	mov.w	r3, #0
 8000a46:	0a02      	lsrs	r2, r0, #8
 8000a48:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000a4c:	0a0b      	lsrs	r3, r1, #8
 8000a4e:	b2d3      	uxtb	r3, r2
 8000a50:	461a      	mov	r2, r3
 8000a52:	2107      	movs	r1, #7
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f7ff fe9e 	bl	8000796 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8000a5a:	7c3b      	ldrb	r3, [r7, #16]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	2108      	movs	r1, #8
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f7ff fe98 	bl	8000796 <write_register>
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	01e84800 	.word	0x01e84800

08000a74 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8000a80:	78fb      	ldrb	r3, [r7, #3]
 8000a82:	2b05      	cmp	r3, #5
 8000a84:	d802      	bhi.n	8000a8c <lora_set_spreading_factor+0x18>
    sf = 6;
 8000a86:	2306      	movs	r3, #6
 8000a88:	70fb      	strb	r3, [r7, #3]
 8000a8a:	e004      	b.n	8000a96 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2b0c      	cmp	r3, #12
 8000a90:	d901      	bls.n	8000a96 <lora_set_spreading_factor+0x22>
    sf = 12;
 8000a92:	230c      	movs	r3, #12
 8000a94:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8000a96:	78fb      	ldrb	r3, [r7, #3]
 8000a98:	2b06      	cmp	r3, #6
 8000a9a:	d10a      	bne.n	8000ab2 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8000a9c:	22c5      	movs	r2, #197	; 0xc5
 8000a9e:	2131      	movs	r1, #49	; 0x31
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff fe78 	bl	8000796 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	2137      	movs	r1, #55	; 0x37
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff fe73 	bl	8000796 <write_register>
 8000ab0:	e009      	b.n	8000ac6 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8000ab2:	22c3      	movs	r2, #195	; 0xc3
 8000ab4:	2131      	movs	r1, #49	; 0x31
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fe6d 	bl	8000796 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000abc:	220a      	movs	r2, #10
 8000abe:	2137      	movs	r1, #55	; 0x37
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff fe68 	bl	8000796 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8000ac6:	211e      	movs	r1, #30
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff fe2d 	bl	8000728 <read_register>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	73fb      	strb	r3, [r7, #15]
  mc2 |= sf << 4;
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	011b      	lsls	r3, r3, #4
 8000ad6:	b25a      	sxtb	r2, r3
 8000ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	211e      	movs	r1, #30
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fe54 	bl	8000796 <write_register>

  set_low_data_rate_optimization(lora);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff fece 	bl	8000890 <set_low_data_rate_optimization>
}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8000b08:	887b      	ldrh	r3, [r7, #2]
 8000b0a:	0a1b      	lsrs	r3, r3, #8
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	2120      	movs	r1, #32
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff fe3e 	bl	8000796 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	461a      	mov	r2, r3
 8000b26:	2121      	movs	r1, #33	; 0x21
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff fe34 	bl	8000796 <write_register>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	807b      	strh	r3, [r7, #2]

  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	887a      	ldrh	r2, [r7, #2]
 8000b54:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000b56:	6a3a      	ldr	r2, [r7, #32]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	2200      	movs	r2, #0
 8000b66:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b74:	609a      	str	r2, [r3, #8]
    return LORA_ERROR;
  }
#endif

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f7ff feba 	bl	80008f0 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000b7c:	68f8      	ldr	r0, [r7, #12]
 8000b7e:	f7ff feb7 	bl	80008f0 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000b82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000b86:	68f8      	ldr	r0, [r7, #12]
 8000b88:	f7ff ff2e 	bl	80009e8 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000b8c:	2107      	movs	r1, #7
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f7ff ff70 	bl	8000a74 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000b94:	210a      	movs	r1, #10
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f7ff ffb0 	bl	8000afc <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f7ff febf 	bl	8000920 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000ba2:	210c      	movs	r1, #12
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f7ff fdbf 	bl	8000728 <read_register>
 8000baa:	4603      	mov	r3, r0
 8000bac:	75fb      	strb	r3, [r7, #23]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000bae:	7dfb      	ldrb	r3, [r7, #23]
 8000bb0:	f043 0303 	orr.w	r3, r3, #3
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	210c      	movs	r1, #12
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f7ff fdeb 	bl	8000796 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	2126      	movs	r1, #38	; 0x26
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f7ff fde6 	bl	8000796 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000bca:	2111      	movs	r1, #17
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f7ff febf 	bl	8000950 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f7ff fe98 	bl	8000908 <lora_mode_standby>

  return LORA_OK;
 8000bd8:	2300      	movs	r3, #0

}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int32_t timerVal;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	; 0x30
 8000c04:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  _running = false;
 8000c06:	4b4c      	ldr	r3, [pc, #304]	; (8000d38 <main+0x138>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
  head_mov = 0;
 8000c0c:	4b4b      	ldr	r3, [pc, #300]	; (8000d3c <main+0x13c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
  tail_mov = 1;
 8000c12:	4b4b      	ldr	r3, [pc, #300]	; (8000d40 <main+0x140>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
  head_full = 0;
 8000c18:	4b4a      	ldr	r3, [pc, #296]	; (8000d44 <main+0x144>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
  tail_full = 1;
 8000c1e:	4b4a      	ldr	r3, [pc, #296]	; (8000d48 <main+0x148>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	601a      	str	r2, [r3, #0]
  moving_sum = 0;
 8000c24:	4949      	ldr	r1, [pc, #292]	; (8000d4c <main+0x14c>)
 8000c26:	f04f 0200 	mov.w	r2, #0
 8000c2a:	f04f 0300 	mov.w	r3, #0
 8000c2e:	e9c1 2300 	strd	r2, r3, [r1]
  moving_avg = 0;
 8000c32:	4b47      	ldr	r3, [pc, #284]	; (8000d50 <main+0x150>)
 8000c34:	f04f 0200 	mov.w	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
  counter = 0;
 8000c3a:	4b46      	ldr	r3, [pc, #280]	; (8000d54 <main+0x154>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	801a      	strh	r2, [r3, #0]
  done = 0;
 8000c40:	4b45      	ldr	r3, [pc, #276]	; (8000d58 <main+0x158>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*4); i++){
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
 8000c4a:	e007      	b.n	8000c5c <main+0x5c>
	  circular_buf_mov[i] = 0;
 8000c4c:	4a43      	ldr	r2, [pc, #268]	; (8000d5c <main+0x15c>)
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	4413      	add	r3, r2
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*4); i++){
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	3301      	adds	r3, #1
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 8000c62:	dbf3      	blt.n	8000c4c <main+0x4c>
  }
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*16); i++){
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
 8000c68:	e007      	b.n	8000c7a <main+0x7a>
	  circular_buf_full[i] = 0;
 8000c6a:	4a3d      	ldr	r2, [pc, #244]	; (8000d60 <main+0x160>)
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	4413      	add	r3, r2
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*16); i++){
 8000c74:	6a3b      	ldr	r3, [r7, #32]
 8000c76:	3301      	adds	r3, #1
 8000c78:	623b      	str	r3, [r7, #32]
 8000c7a:	6a3b      	ldr	r3, [r7, #32]
 8000c7c:	f5b3 5f5c 	cmp.w	r3, #14080	; 0x3700
 8000c80:	dbf3      	blt.n	8000c6a <main+0x6a>
  }
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET * 2); i++){
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
 8000c86:	e007      	b.n	8000c98 <main+0x98>
	  _sampleBuffer[i] = 0;
 8000c88:	4a36      	ldr	r2, [pc, #216]	; (8000d64 <main+0x164>)
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET * 2); i++){
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3301      	adds	r3, #1
 8000c96:	61fb      	str	r3, [r7, #28]
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8000c9e:	dbf3      	blt.n	8000c88 <main+0x88>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca0:	f000 fedc 	bl	8001a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca4:	f000 f86c 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca8:	f000 fa34 	bl	8001114 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cac:	f000 f920 	bl	8000ef0 <MX_SPI1_Init>
  MX_DMA_Init();
 8000cb0:	f000 f9fa 	bl	80010a8 <MX_DMA_Init>
  MX_UART4_Init();
 8000cb4:	f000 f9a4 	bl	8001000 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8000cb8:	f000 f9cc 	bl	8001054 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cbc:	f000 f94e 	bl	8000f5c <MX_TIM2_Init>
  MX_SAI1_Init();
 8000cc0:	f000 f8cc 	bl	8000e5c <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000cc4:	2108      	movs	r1, #8
 8000cc6:	4828      	ldr	r0, [pc, #160]	; (8000d68 <main+0x168>)
 8000cc8:	f004 fbda 	bl	8005480 <HAL_TIM_IC_Start_IT>

  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2120      	movs	r1, #32
 8000cd0:	4826      	ldr	r0, [pc, #152]	; (8000d6c <main+0x16c>)
 8000cd2:	f001 fe01 	bl	80028d8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000cd6:	2064      	movs	r0, #100	; 0x64
 8000cd8:	f000 ff32 	bl	8001b40 <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2120      	movs	r1, #32
 8000ce0:	4822      	ldr	r0, [pc, #136]	; (8000d6c <main+0x16c>)
 8000ce2:	f001 fdf9 	bl	80028d8 <HAL_GPIO_WritePin>
  lora_sx1276 lora;

  uint8_t res = lora_init(&lora, &hspi1, NSS_GPIO_Port, NSS_Pin, LORA_BASE_FREQUENCY_US);
 8000ce6:	1d38      	adds	r0, r7, #4
 8000ce8:	a311      	add	r3, pc, #68	; (adr r3, 8000d30 <main+0x130>)
 8000cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cee:	e9cd 2300 	strd	r2, r3, [sp]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <main+0x170>)
 8000cf6:	491f      	ldr	r1, [pc, #124]	; (8000d74 <main+0x174>)
 8000cf8:	f7ff ff1d 	bl	8000b36 <lora_init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	70fb      	strb	r3, [r7, #3]
  HAL_Delay(100);
 8000d00:	2064      	movs	r0, #100	; 0x64
 8000d02:	f000 ff1d 	bl	8001b40 <HAL_Delay>
  if (res != LORA_OK) {
 8000d06:	78fb      	ldrb	r3, [r7, #3]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d007      	beq.n	8000d1c <main+0x11c>
	  HAL_UART_Transmit(&huart2, &res, sizeof(res), 1000);
 8000d0c:	1cf9      	adds	r1, r7, #3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	2201      	movs	r2, #1
 8000d14:	4818      	ldr	r0, [pc, #96]	; (8000d78 <main+0x178>)
 8000d16:	f005 f974 	bl	8006002 <HAL_UART_Transmit>
 8000d1a:	e006      	b.n	8000d2a <main+0x12a>
  }
  else{
	  HAL_UART_Transmit(&huart2, success, sizeof(success), 1000);
 8000d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d20:	2217      	movs	r2, #23
 8000d22:	4916      	ldr	r1, [pc, #88]	; (8000d7c <main+0x17c>)
 8000d24:	4814      	ldr	r0, [pc, #80]	; (8000d78 <main+0x178>)
 8000d26:	f005 f96c 	bl	8006002 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <main+0x12a>
 8000d2c:	f3af 8000 	nop.w
 8000d30:	3689cac0 	.word	0x3689cac0
 8000d34:	00000000 	.word	0x00000000
 8000d38:	20011c8c 	.word	0x20011c8c
 8000d3c:	2000226c 	.word	0x2000226c
 8000d40:	20002270 	.word	0x20002270
 8000d44:	20011c74 	.word	0x20011c74
 8000d48:	20011c78 	.word	0x20011c78
 8000d4c:	20011c80 	.word	0x20011c80
 8000d50:	20011c88 	.word	0x20011c88
 8000d54:	20011c8e 	.word	0x20011c8e
 8000d58:	20011c90 	.word	0x20011c90
 8000d5c:	200021a4 	.word	0x200021a4
 8000d60:	20002274 	.word	0x20002274
 8000d64:	200002b4 	.word	0x200002b4
 8000d68:	20000184 	.word	0x20000184
 8000d6c:	40020800 	.word	0x40020800
 8000d70:	40020400 	.word	0x40020400
 8000d74:	2000012c 	.word	0x2000012c
 8000d78:	20000210 	.word	0x20000210
 8000d7c:	20000000 	.word	0x20000000

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b094      	sub	sp, #80	; 0x50
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	2234      	movs	r2, #52	; 0x34
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f006 f922 	bl	8006fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <SystemClock_Config+0xd4>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	4a29      	ldr	r2, [pc, #164]	; (8000e54 <SystemClock_Config+0xd4>)
 8000dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db2:	6413      	str	r3, [r2, #64]	; 0x40
 8000db4:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <SystemClock_Config+0xd4>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <SystemClock_Config+0xd8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dcc:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <SystemClock_Config+0xd8>)
 8000dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <SystemClock_Config+0xd8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de8:	2310      	movs	r3, #16
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dec:	2302      	movs	r3, #2
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df0:	2300      	movs	r3, #0
 8000df2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000df4:	2310      	movs	r3, #16
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000df8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dfc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e02:	2302      	movs	r3, #2
 8000e04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f002 fe38 	bl	8003a84 <HAL_RCC_OscConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e1a:	f000 fb61 	bl	80014e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1e:	230f      	movs	r3, #15
 8000e20:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e22:	2302      	movs	r3, #2
 8000e24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fd66 	bl	800290c <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e46:	f000 fb4b 	bl	80014e0 <Error_Handler>
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3750      	adds	r7, #80	; 0x50
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40007000 	.word	0x40007000

08000e5c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000e60:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <MX_SAI1_Init+0x84>)
 8000e62:	4a20      	ldr	r2, [pc, #128]	; (8000ee4 <MX_SAI1_Init+0x88>)
 8000e64:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <MX_SAI1_Init+0x84>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <MX_SAI1_Init+0x84>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_SAI1_Init+0x84>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <MX_SAI1_Init+0x84>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_SAI1_Init+0x84>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_SAI1_Init+0x84>)
 8000e86:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e8a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_SAI1_Init+0x84>)
 8000e8e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000e92:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_SAI1_Init+0x84>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_SAI1_Init+0x84>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_SAI1_Init+0x84>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	2100      	movs	r1, #0
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <MX_SAI1_Init+0x84>)
 8000eae:	f003 f887 	bl	8003fc0 <HAL_SAI_InitProtocol>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8000eb8:	f000 fb12 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  if ((HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*) _sampleBuffer, MIC_SAMPLES_PER_PACKET * 2)) == HAL_OK) {
 8000ebc:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8000ec0:	4909      	ldr	r1, [pc, #36]	; (8000ee8 <MX_SAI1_Init+0x8c>)
 8000ec2:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <MX_SAI1_Init+0x84>)
 8000ec4:	f003 f9d8 	bl	8004278 <HAL_SAI_Receive_DMA>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d106      	bne.n	8000edc <MX_SAI1_Init+0x80>
	  HAL_Delay(1000);
 8000ece:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed2:	f000 fe35 	bl	8001b40 <HAL_Delay>
	  _running = true;
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <MX_SAI1_Init+0x90>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END SAI1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000044 	.word	0x20000044
 8000ee4:	40015824 	.word	0x40015824
 8000ee8:	200002b4 	.word	0x200002b4
 8000eec:	20011c8c 	.word	0x20011c8c

08000ef0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000ef6:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <MX_SPI1_Init+0x68>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000efc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f24:	2238      	movs	r2, #56	; 0x38
 8000f26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f3c:	220a      	movs	r2, #10
 8000f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f40:	4804      	ldr	r0, [pc, #16]	; (8000f54 <MX_SPI1_Init+0x64>)
 8000f42:	f003 fca5 	bl	8004890 <HAL_SPI_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f4c:	f000 fac8 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	2000012c 	.word	0x2000012c
 8000f58:	40013000 	.word	0x40013000

08000f5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f78:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <MX_TIM2_Init+0xa0>)
 8000f7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <MX_TIM2_Init+0xa0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <MX_TIM2_Init+0xa0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_TIM2_Init+0xa0>)
 8000f8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <MX_TIM2_Init+0xa0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <MX_TIM2_Init+0xa0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000fa0:	4816      	ldr	r0, [pc, #88]	; (8000ffc <MX_TIM2_Init+0xa0>)
 8000fa2:	f004 fa1d 	bl	80053e0 <HAL_TIM_IC_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fac:	f000 fa98 	bl	80014e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480f      	ldr	r0, [pc, #60]	; (8000ffc <MX_TIM2_Init+0xa0>)
 8000fc0:	f004 ff42 	bl	8005e48 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000fca:	f000 fa89 	bl	80014e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000fde:	463b      	mov	r3, r7
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_TIM2_Init+0xa0>)
 8000fe6:	f004 fc7b 	bl	80058e0 <HAL_TIM_IC_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000ff0:	f000 fa76 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000184 	.word	0x20000184

08001000 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_UART4_Init+0x4c>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <MX_UART4_Init+0x50>)
 8001008:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <MX_UART4_Init+0x4c>)
 800100c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001010:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_UART4_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_UART4_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_UART4_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_UART4_Init+0x4c>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <MX_UART4_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_UART4_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_UART4_Init+0x4c>)
 8001038:	f004 ff96 	bl	8005f68 <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001042:	f000 fa4d 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001cc 	.word	0x200001cc
 8001050:	40004c00 	.word	0x40004c00

08001054 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_USART2_UART_Init+0x4c>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <MX_USART2_UART_Init+0x50>)
 800105c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MX_USART2_UART_Init+0x4c>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_USART2_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_USART2_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_USART2_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_USART2_UART_Init+0x4c>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_USART2_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_USART2_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_USART2_UART_Init+0x4c>)
 800108c:	f004 ff6c 	bl	8005f68 <HAL_UART_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001096:	f000 fa23 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000210 	.word	0x20000210
 80010a4:	40004400 	.word	0x40004400

080010a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <MX_DMA_Init+0x68>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a16      	ldr	r2, [pc, #88]	; (8001110 <MX_DMA_Init+0x68>)
 80010b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <MX_DMA_Init+0x68>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <MX_DMA_Init+0x68>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <MX_DMA_Init+0x68>)
 80010d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <MX_DMA_Init+0x68>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	200d      	movs	r0, #13
 80010ec:	f000 fe27 	bl	8001d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80010f0:	200d      	movs	r0, #13
 80010f2:	f000 fe40 	bl	8001d76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	203c      	movs	r0, #60	; 0x3c
 80010fc:	f000 fe1f 	bl	8001d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001100:	203c      	movs	r0, #60	; 0x3c
 8001102:	f000 fe38 	bl	8001d76 <HAL_NVIC_EnableIRQ>

}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <MX_GPIO_Init+0xdc>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a2f      	ldr	r2, [pc, #188]	; (80011f0 <MX_GPIO_Init+0xdc>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <MX_GPIO_Init+0xdc>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <MX_GPIO_Init+0xdc>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a28      	ldr	r2, [pc, #160]	; (80011f0 <MX_GPIO_Init+0xdc>)
 8001150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <MX_GPIO_Init+0xdc>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <MX_GPIO_Init+0xdc>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a21      	ldr	r2, [pc, #132]	; (80011f0 <MX_GPIO_Init+0xdc>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <MX_GPIO_Init+0xdc>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_GPIO_Init+0xdc>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a1a      	ldr	r2, [pc, #104]	; (80011f0 <MX_GPIO_Init+0xdc>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_GPIO_Init+0xdc>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2120      	movs	r1, #32
 800119e:	4815      	ldr	r0, [pc, #84]	; (80011f4 <MX_GPIO_Init+0xe0>)
 80011a0:	f001 fb9a 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2101      	movs	r1, #1
 80011a8:	4813      	ldr	r0, [pc, #76]	; (80011f8 <MX_GPIO_Init+0xe4>)
 80011aa:	f001 fb95 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80011ae:	2320      	movs	r3, #32
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	480b      	ldr	r0, [pc, #44]	; (80011f4 <MX_GPIO_Init+0xe0>)
 80011c6:	f001 f9f3 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80011ca:	2301      	movs	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_GPIO_Init+0xe4>)
 80011e2:	f001 f9e5 	bl	80025b0 <HAL_GPIO_Init>

}
 80011e6:	bf00      	nop
 80011e8:	3728      	adds	r7, #40	; 0x28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020800 	.word	0x40020800
 80011f8:	40020400 	.word	0x40020400

080011fc <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	sendData(_sampleBuffer, _sendBuffer);
 8001204:	4903      	ldr	r1, [pc, #12]	; (8001214 <HAL_SAI_RxHalfCpltCallback+0x18>)
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8001208:	f000 f818 	bl	800123c <sendData>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20001e34 	.word	0x20001e34
 8001218:	200002b4 	.word	0x200002b4

0800121c <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	sendData(&_sampleBuffer[MIC_SAMPLES_PER_PACKET], &_sendBuffer[MIC_SAMPLES_PER_PACKET / 2]);
 8001224:	4903      	ldr	r1, [pc, #12]	; (8001234 <HAL_SAI_RxCpltCallback+0x18>)
 8001226:	4804      	ldr	r0, [pc, #16]	; (8001238 <HAL_SAI_RxCpltCallback+0x1c>)
 8001228:	f000 f808 	bl	800123c <sendData>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20001fec 	.word	0x20001fec
 8001238:	20001074 	.word	0x20001074

0800123c <sendData>:

void sendData(volatile int32_t *data_in, int8_t *data_out) {
 800123c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001240:	b088      	sub	sp, #32
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]

  if (_running) {
 8001248:	4b94      	ldr	r3, [pc, #592]	; (800149c <sendData+0x260>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 811f 	beq.w	8001490 <sendData+0x254>

      for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8001252:	2300      	movs	r3, #0
 8001254:	83fb      	strh	r3, [r7, #30]
 8001256:	e116      	b.n	8001486 <sendData+0x24a>

        int8_t sample = ((data_in[0]>>16) & 0xff);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	141b      	asrs	r3, r3, #16
 800125e:	777b      	strb	r3, [r7, #29]
        // int16_t sample_mov = (data_in[0] & 0x0000ffff);
        moving_sum += abs(sample);
 8001260:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001264:	2b00      	cmp	r3, #0
 8001266:	bfb8      	it	lt
 8001268:	425b      	neglt	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2200      	movs	r2, #0
 8001270:	461c      	mov	r4, r3
 8001272:	4615      	mov	r5, r2
 8001274:	4b8a      	ldr	r3, [pc, #552]	; (80014a0 <sendData+0x264>)
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	eb14 0a02 	adds.w	sl, r4, r2
 800127e:	eb45 0b03 	adc.w	fp, r5, r3
 8001282:	4b87      	ldr	r3, [pc, #540]	; (80014a0 <sendData+0x264>)
 8001284:	e9c3 ab00 	strd	sl, fp, [r3]
        moving_sum -= abs(circular_buf_mov[tail_mov]);
 8001288:	4b85      	ldr	r3, [pc, #532]	; (80014a0 <sendData+0x264>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	4985      	ldr	r1, [pc, #532]	; (80014a4 <sendData+0x268>)
 8001290:	6809      	ldr	r1, [r1, #0]
 8001292:	4885      	ldr	r0, [pc, #532]	; (80014a8 <sendData+0x26c>)
 8001294:	5641      	ldrsb	r1, [r0, r1]
 8001296:	2900      	cmp	r1, #0
 8001298:	bfb8      	it	lt
 800129a:	4249      	neglt	r1, r1
 800129c:	b2c9      	uxtb	r1, r1
 800129e:	b2c9      	uxtb	r1, r1
 80012a0:	2000      	movs	r0, #0
 80012a2:	4688      	mov	r8, r1
 80012a4:	4681      	mov	r9, r0
 80012a6:	ebb2 0108 	subs.w	r1, r2, r8
 80012aa:	6039      	str	r1, [r7, #0]
 80012ac:	eb63 0309 	sbc.w	r3, r3, r9
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b7b      	ldr	r3, [pc, #492]	; (80014a0 <sendData+0x264>)
 80012b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80012b8:	e9c3 1200 	strd	r1, r2, [r3]
    	circular_buf_mov[tail_mov] = sample;
 80012bc:	4b79      	ldr	r3, [pc, #484]	; (80014a4 <sendData+0x268>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4979      	ldr	r1, [pc, #484]	; (80014a8 <sendData+0x26c>)
 80012c2:	7f7a      	ldrb	r2, [r7, #29]
 80012c4:	54ca      	strb	r2, [r1, r3]
    	circular_buf_full[tail_full] = sample;
 80012c6:	4b79      	ldr	r3, [pc, #484]	; (80014ac <sendData+0x270>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4979      	ldr	r1, [pc, #484]	; (80014b0 <sendData+0x274>)
 80012cc:	7f7a      	ldrb	r2, [r7, #29]
 80012ce:	54ca      	strb	r2, [r1, r3]
    	moving_avg = ((float) moving_sum)/(MOVING_AVG_LEN);
 80012d0:	4b73      	ldr	r3, [pc, #460]	; (80014a0 <sendData+0x264>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff f865 	bl	80003a8 <__aeabi_l2f>
 80012de:	ee06 0a90 	vmov	s13, r0
 80012e2:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80014b4 <sendData+0x278>
 80012e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ea:	4b73      	ldr	r3, [pc, #460]	; (80014b8 <sendData+0x27c>)
 80012ec:	edc3 7a00 	vstr	s15, [r3]
    //	uint8_t buffer[50];

    //	sprintf(buffer, "%i\n", tmp);
    //	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 70);

    	if ((counter > 0) && (!done)){
 80012f0:	4b72      	ldr	r3, [pc, #456]	; (80014bc <sendData+0x280>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d053      	beq.n	80013a0 <sendData+0x164>
 80012f8:	4b71      	ldr	r3, [pc, #452]	; (80014c0 <sendData+0x284>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d14f      	bne.n	80013a0 <sendData+0x164>
    		counter++;
 8001300:	4b6e      	ldr	r3, [pc, #440]	; (80014bc <sendData+0x280>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	b29a      	uxth	r2, r3
 8001308:	4b6c      	ldr	r3, [pc, #432]	; (80014bc <sendData+0x280>)
 800130a:	801a      	strh	r2, [r3, #0]
    		if (counter == (SEND_LEN/2)){
 800130c:	4b6b      	ldr	r3, [pc, #428]	; (80014bc <sendData+0x280>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001314:	d144      	bne.n	80013a0 <sendData+0x164>
    			timerVal = TIM2->CNT;
 8001316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	461a      	mov	r2, r3
 800131e:	4b69      	ldr	r3, [pc, #420]	; (80014c4 <sendData+0x288>)
 8001320:	601a      	str	r2, [r3, #0]
    			if ((HAL_UART_Transmit(&huart2, (uint8_t*)&timerVal, 4, 70) != HAL_OK)){
 8001322:	2346      	movs	r3, #70	; 0x46
 8001324:	2204      	movs	r2, #4
 8001326:	4967      	ldr	r1, [pc, #412]	; (80014c4 <sendData+0x288>)
 8001328:	4867      	ldr	r0, [pc, #412]	; (80014c8 <sendData+0x28c>)
 800132a:	f004 fe6a 	bl	8006002 <HAL_UART_Transmit>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <sendData+0xfc>
    				Error_Handler();
 8001334:	f000 f8d4 	bl	80014e0 <Error_Handler>
    			}
    			uint32_t endflag = 0xCDCDCDCD;
 8001338:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
 800133c:	61bb      	str	r3, [r7, #24]
    			if ((HAL_UART_Transmit(&huart2, (uint8_t*)&endflag, 4, 70) != HAL_OK)){
 800133e:	f107 0118 	add.w	r1, r7, #24
 8001342:	2346      	movs	r3, #70	; 0x46
 8001344:	2204      	movs	r2, #4
 8001346:	4860      	ldr	r0, [pc, #384]	; (80014c8 <sendData+0x28c>)
 8001348:	f004 fe5b 	bl	8006002 <HAL_UART_Transmit>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <sendData+0x11a>
    			    				Error_Handler();
 8001352:	f000 f8c5 	bl	80014e0 <Error_Handler>
    			}
    			if ((HAL_UART_Transmit(&huart2, circular_buf_full + tail_full, (SEND_LEN)-tail_full, HAL_MAX_DELAY)) != HAL_OK){
 8001356:	4b55      	ldr	r3, [pc, #340]	; (80014ac <sendData+0x270>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a55      	ldr	r2, [pc, #340]	; (80014b0 <sendData+0x274>)
 800135c:	1899      	adds	r1, r3, r2
 800135e:	4b53      	ldr	r3, [pc, #332]	; (80014ac <sendData+0x270>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	b29a      	uxth	r2, r3
 8001364:	4b59      	ldr	r3, [pc, #356]	; (80014cc <sendData+0x290>)
 8001366:	1a9b      	subs	r3, r3, r2
 8001368:	b29a      	uxth	r2, r3
 800136a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800136e:	4856      	ldr	r0, [pc, #344]	; (80014c8 <sendData+0x28c>)
 8001370:	f004 fe47 	bl	8006002 <HAL_UART_Transmit>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <sendData+0x142>
    				Error_Handler();
 800137a:	f000 f8b1 	bl	80014e0 <Error_Handler>
    			}
    			if ((HAL_UART_Transmit(&huart2, circular_buf_full, tail_full, HAL_MAX_DELAY)) != HAL_OK){
 800137e:	4b4b      	ldr	r3, [pc, #300]	; (80014ac <sendData+0x270>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	b29a      	uxth	r2, r3
 8001384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001388:	4949      	ldr	r1, [pc, #292]	; (80014b0 <sendData+0x274>)
 800138a:	484f      	ldr	r0, [pc, #316]	; (80014c8 <sendData+0x28c>)
 800138c:	f004 fe39 	bl	8006002 <HAL_UART_Transmit>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <sendData+0x15e>
    				Error_Handler();
 8001396:	f000 f8a3 	bl	80014e0 <Error_Handler>
    			}
    			done = 1;
 800139a:	4b49      	ldr	r3, [pc, #292]	; (80014c0 <sendData+0x284>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]
    		}
    	}

    	if ((moving_avg >= MOVING_AVG_THRESHOLD) && (counter == 0)){
 80013a0:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <sendData+0x27c>)
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80013aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b2:	db2c      	blt.n	800140e <sendData+0x1d2>
 80013b4:	4b41      	ldr	r3, [pc, #260]	; (80014bc <sendData+0x280>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d128      	bne.n	800140e <sendData+0x1d2>
    		counter += 1;
 80013bc:	4b3f      	ldr	r3, [pc, #252]	; (80014bc <sendData+0x280>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <sendData+0x280>)
 80013c6:	801a      	strh	r2, [r3, #0]
    		done = 0;
 80013c8:	4b3d      	ldr	r3, [pc, #244]	; (80014c0 <sendData+0x284>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
			timerVal = TIM2->CNT;
 80013ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <sendData+0x288>)
 80013d8:	601a      	str	r2, [r3, #0]
			if ((HAL_UART_Transmit(&huart2, (uint8_t*)&timerVal, 4, 70) != HAL_OK)){
 80013da:	2346      	movs	r3, #70	; 0x46
 80013dc:	2204      	movs	r2, #4
 80013de:	4939      	ldr	r1, [pc, #228]	; (80014c4 <sendData+0x288>)
 80013e0:	4839      	ldr	r0, [pc, #228]	; (80014c8 <sendData+0x28c>)
 80013e2:	f004 fe0e 	bl	8006002 <HAL_UART_Transmit>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <sendData+0x1b4>
				Error_Handler();
 80013ec:	f000 f878 	bl	80014e0 <Error_Handler>
			}
			uint32_t endflag = 0xABABABAB;
 80013f0:	f04f 33ab 	mov.w	r3, #2880154539	; 0xabababab
 80013f4:	617b      	str	r3, [r7, #20]
			if ((HAL_UART_Transmit(&huart2, (uint8_t*)&endflag, 4, 70) != HAL_OK)){
 80013f6:	f107 0114 	add.w	r1, r7, #20
 80013fa:	2346      	movs	r3, #70	; 0x46
 80013fc:	2204      	movs	r2, #4
 80013fe:	4832      	ldr	r0, [pc, #200]	; (80014c8 <sendData+0x28c>)
 8001400:	f004 fdff 	bl	8006002 <HAL_UART_Transmit>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <sendData+0x1d2>
			    				Error_Handler();
 800140a:	f000 f869 	bl	80014e0 <Error_Handler>
			}
    	}
        tail_mov = (tail_mov + 1) % (MOVING_AVG_LEN);
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <sendData+0x268>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <sendData+0x294>)
 8001416:	fba3 1302 	umull	r1, r3, r3, r2
 800141a:	099b      	lsrs	r3, r3, #6
 800141c:	21c8      	movs	r1, #200	; 0xc8
 800141e:	fb01 f303 	mul.w	r3, r1, r3
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	4a1f      	ldr	r2, [pc, #124]	; (80014a4 <sendData+0x268>)
 8001426:	6013      	str	r3, [r2, #0]
        head_mov = (head_mov + 1) % (MOVING_AVG_LEN);
 8001428:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <sendData+0x298>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <sendData+0x294>)
 8001430:	fba3 1302 	umull	r1, r3, r3, r2
 8001434:	099b      	lsrs	r3, r3, #6
 8001436:	21c8      	movs	r1, #200	; 0xc8
 8001438:	fb01 f303 	mul.w	r3, r1, r3
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	4a25      	ldr	r2, [pc, #148]	; (80014d4 <sendData+0x298>)
 8001440:	6013      	str	r3, [r2, #0]

        tail_full = (tail_full + 1) % (SEND_LEN);
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <sendData+0x270>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <sendData+0x29c>)
 800144a:	fba3 1302 	umull	r1, r3, r3, r2
 800144e:	0b1b      	lsrs	r3, r3, #12
 8001450:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 8001454:	fb01 f303 	mul.w	r3, r1, r3
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	4a14      	ldr	r2, [pc, #80]	; (80014ac <sendData+0x270>)
 800145c:	6013      	str	r3, [r2, #0]
        head_full = (head_full + 1) % (SEND_LEN);
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <sendData+0x2a0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <sendData+0x29c>)
 8001466:	fba3 1302 	umull	r1, r3, r3, r2
 800146a:	0b1b      	lsrs	r3, r3, #12
 800146c:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 8001470:	fb01 f303 	mul.w	r3, r1, r3
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	4a19      	ldr	r2, [pc, #100]	; (80014dc <sendData+0x2a0>)
 8001478:	6013      	str	r3, [r2, #0]

        data_in += 2;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3308      	adds	r3, #8
 800147e:	60fb      	str	r3, [r7, #12]
      for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8001480:	8bfb      	ldrh	r3, [r7, #30]
 8001482:	3301      	adds	r3, #1
 8001484:	83fb      	strh	r3, [r7, #30]
 8001486:	8bfb      	ldrh	r3, [r7, #30]
 8001488:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 800148c:	f4ff aee4 	bcc.w	8001258 <sendData+0x1c>
      }


  }
}
 8001490:	bf00      	nop
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800149a:	bf00      	nop
 800149c:	20011c8c 	.word	0x20011c8c
 80014a0:	20011c80 	.word	0x20011c80
 80014a4:	20002270 	.word	0x20002270
 80014a8:	200021a4 	.word	0x200021a4
 80014ac:	20011c78 	.word	0x20011c78
 80014b0:	20002274 	.word	0x20002274
 80014b4:	43480000 	.word	0x43480000
 80014b8:	20011c88 	.word	0x20011c88
 80014bc:	20011c8e 	.word	0x20011c8e
 80014c0:	20011c90 	.word	0x20011c90
 80014c4:	20011c94 	.word	0x20011c94
 80014c8:	20000210 	.word	0x20000210
 80014cc:	fffffa00 	.word	0xfffffa00
 80014d0:	51eb851f 	.word	0x51eb851f
 80014d4:	2000226c 	.word	0x2000226c
 80014d8:	10624dd3 	.word	0x10624dd3
 80014dc:	20011c74 	.word	0x20011c74

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <Error_Handler+0x8>
	...

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <HAL_MspInit+0x4c>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_MspInit+0x4c>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <HAL_SPI_MspInit+0x84>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d12b      	bne.n	80015b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_SPI_MspInit+0x88>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <HAL_SPI_MspInit+0x88>)
 8001568:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800156c:	6453      	str	r3, [r2, #68]	; 0x44
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_SPI_MspInit+0x88>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_SPI_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <HAL_SPI_MspInit+0x88>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_SPI_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001596:	23e0      	movs	r3, #224	; 0xe0
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015a6:	2305      	movs	r3, #5
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <HAL_SPI_MspInit+0x8c>)
 80015b2:	f000 fffd 	bl	80025b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40013000 	.word	0x40013000
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000

080015cc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ec:	d134      	bne.n	8001658 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_TIM_IC_MspInit+0x94>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <HAL_TIM_IC_MspInit+0x94>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_TIM_IC_MspInit+0x94>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_TIM_IC_MspInit+0x94>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a13      	ldr	r2, [pc, #76]	; (8001660 <HAL_TIM_IC_MspInit+0x94>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_TIM_IC_MspInit+0x94>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001638:	2301      	movs	r3, #1
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	4808      	ldr	r0, [pc, #32]	; (8001664 <HAL_TIM_IC_MspInit+0x98>)
 8001644:	f000 ffb4 	bl	80025b0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	201c      	movs	r0, #28
 800164e:	f000 fb76 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001652:	201c      	movs	r0, #28
 8001654:	f000 fb8f 	bl	8001d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	40020400 	.word	0x40020400

08001668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4e      	ldr	r2, [pc, #312]	; (80017c0 <HAL_UART_MspInit+0x158>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d164      	bne.n	8001754 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	4b4d      	ldr	r3, [pc, #308]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a4c      	ldr	r2, [pc, #304]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b4a      	ldr	r3, [pc, #296]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016a2:	61bb      	str	r3, [r7, #24]
 80016a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	4b46      	ldr	r3, [pc, #280]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a45      	ldr	r2, [pc, #276]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016c2:	2303      	movs	r3, #3
 80016c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016d2:	2308      	movs	r3, #8
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	483a      	ldr	r0, [pc, #232]	; (80017c8 <HAL_UART_MspInit+0x160>)
 80016de:	f000 ff67 	bl	80025b0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80016e2:	4b3a      	ldr	r3, [pc, #232]	; (80017cc <HAL_UART_MspInit+0x164>)
 80016e4:	4a3a      	ldr	r2, [pc, #232]	; (80017d0 <HAL_UART_MspInit+0x168>)
 80016e6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80016e8:	4b38      	ldr	r3, [pc, #224]	; (80017cc <HAL_UART_MspInit+0x164>)
 80016ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ee:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f0:	4b36      	ldr	r3, [pc, #216]	; (80017cc <HAL_UART_MspInit+0x164>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f6:	4b35      	ldr	r3, [pc, #212]	; (80017cc <HAL_UART_MspInit+0x164>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016fc:	4b33      	ldr	r3, [pc, #204]	; (80017cc <HAL_UART_MspInit+0x164>)
 80016fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001702:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001704:	4b31      	ldr	r3, [pc, #196]	; (80017cc <HAL_UART_MspInit+0x164>)
 8001706:	2200      	movs	r2, #0
 8001708:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800170a:	4b30      	ldr	r3, [pc, #192]	; (80017cc <HAL_UART_MspInit+0x164>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001710:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <HAL_UART_MspInit+0x164>)
 8001712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001716:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001718:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <HAL_UART_MspInit+0x164>)
 800171a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800171e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001720:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <HAL_UART_MspInit+0x164>)
 8001722:	2200      	movs	r2, #0
 8001724:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001726:	4829      	ldr	r0, [pc, #164]	; (80017cc <HAL_UART_MspInit+0x164>)
 8001728:	f000 fb40 	bl	8001dac <HAL_DMA_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001732:	f7ff fed5 	bl	80014e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a24      	ldr	r2, [pc, #144]	; (80017cc <HAL_UART_MspInit+0x164>)
 800173a:	639a      	str	r2, [r3, #56]	; 0x38
 800173c:	4a23      	ldr	r2, [pc, #140]	; (80017cc <HAL_UART_MspInit+0x164>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	2034      	movs	r0, #52	; 0x34
 8001748:	f000 faf9 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800174c:	2034      	movs	r0, #52	; 0x34
 800174e:	f000 fb12 	bl	8001d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001752:	e030      	b.n	80017b6 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_UART_MspInit+0x16c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d12b      	bne.n	80017b6 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176c:	6413      	str	r3, [r2, #64]	; 0x40
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a10      	ldr	r2, [pc, #64]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_UART_MspInit+0x15c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001796:	230c      	movs	r3, #12
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017a6:	2307      	movs	r3, #7
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <HAL_UART_MspInit+0x160>)
 80017b2:	f000 fefd 	bl	80025b0 <HAL_GPIO_Init>
}
 80017b6:	bf00      	nop
 80017b8:	3730      	adds	r7, #48	; 0x30
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40004c00 	.word	0x40004c00
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020000 	.word	0x40020000
 80017cc:	20000254 	.word	0x20000254
 80017d0:	40026040 	.word	0x40026040
 80017d4:	40004400 	.word	0x40004400

080017d8 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b0a0      	sub	sp, #128	; 0x80
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	225c      	movs	r2, #92	; 0x5c
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f005 fbf5 	bl	8006fd8 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a4c      	ldr	r2, [pc, #304]	; (8001924 <HAL_SAI_MspInit+0x14c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	f040 8091 	bne.w	800191c <HAL_SAI_MspInit+0x144>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80017fa:	2304      	movs	r3, #4
 80017fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 16;
 80017fe:	2310      	movs	r3, #16
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001802:	23c0      	movs	r3, #192	; 0xc0
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001806:	2302      	movs	r3, #2
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800180a:	2302      	movs	r3, #2
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8001812:	2300      	movs	r3, #0
 8001814:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	4618      	mov	r0, r3
 800181c:	f001 f990 	bl	8002b40 <HAL_RCCEx_PeriphCLKConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_SAI_MspInit+0x52>
    {
      Error_Handler();
 8001826:	f7ff fe5b 	bl	80014e0 <Error_Handler>
    }

      if (SAI1_client == 0)
 800182a:	4b3f      	ldr	r3, [pc, #252]	; (8001928 <HAL_SAI_MspInit+0x150>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10d      	bne.n	800184e <HAL_SAI_MspInit+0x76>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b3d      	ldr	r3, [pc, #244]	; (800192c <HAL_SAI_MspInit+0x154>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a3c      	ldr	r2, [pc, #240]	; (800192c <HAL_SAI_MspInit+0x154>)
 800183c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b3a      	ldr	r3, [pc, #232]	; (800192c <HAL_SAI_MspInit+0x154>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800184e:	4b36      	ldr	r3, [pc, #216]	; (8001928 <HAL_SAI_MspInit+0x150>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	4a34      	ldr	r2, [pc, #208]	; (8001928 <HAL_SAI_MspInit+0x150>)
 8001856:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PB12     ------> SAI1_SCK_B
    PA9     ------> SAI1_SD_B
    PB9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9;
 8001858:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800185c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800186a:	2306      	movs	r3, #6
 800186c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001872:	4619      	mov	r1, r3
 8001874:	482e      	ldr	r0, [pc, #184]	; (8001930 <HAL_SAI_MspInit+0x158>)
 8001876:	f000 fe9b 	bl	80025b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800187a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800187e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800188c:	2306      	movs	r3, #6
 800188e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001894:	4619      	mov	r1, r3
 8001896:	4827      	ldr	r0, [pc, #156]	; (8001934 <HAL_SAI_MspInit+0x15c>)
 8001898:	f000 fe8a 	bl	80025b0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 800189c:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_SAI_MspInit+0x160>)
 800189e:	4a27      	ldr	r2, [pc, #156]	; (800193c <HAL_SAI_MspInit+0x164>)
 80018a0:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 80018a2:	4b25      	ldr	r3, [pc, #148]	; (8001938 <HAL_SAI_MspInit+0x160>)
 80018a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a8:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018aa:	4b23      	ldr	r3, [pc, #140]	; (8001938 <HAL_SAI_MspInit+0x160>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b0:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_SAI_MspInit+0x160>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_SAI_MspInit+0x160>)
 80018b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018bc:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018be:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_SAI_MspInit+0x160>)
 80018c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018c4:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <HAL_SAI_MspInit+0x160>)
 80018c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018cc:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_SAI_MspInit+0x160>)
 80018d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d4:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_SAI_MspInit+0x160>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018dc:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_SAI_MspInit+0x160>)
 80018de:	2204      	movs	r2, #4
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_SAI_MspInit+0x160>)
 80018e4:	2203      	movs	r2, #3
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_SAI_MspInit+0x160>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_SAI_MspInit+0x160>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80018f4:	4810      	ldr	r0, [pc, #64]	; (8001938 <HAL_SAI_MspInit+0x160>)
 80018f6:	f000 fa59 	bl	8001dac <HAL_DMA_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_SAI_MspInit+0x12c>
    {
      Error_Handler();
 8001900:	f7ff fdee 	bl	80014e0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <HAL_SAI_MspInit+0x160>)
 8001908:	675a      	str	r2, [r3, #116]	; 0x74
 800190a:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <HAL_SAI_MspInit+0x160>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a09      	ldr	r2, [pc, #36]	; (8001938 <HAL_SAI_MspInit+0x160>)
 8001914:	671a      	str	r2, [r3, #112]	; 0x70
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_SAI_MspInit+0x160>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 800191c:	bf00      	nop
 800191e:	3780      	adds	r7, #128	; 0x80
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40015824 	.word	0x40015824
 8001928:	20011c98 	.word	0x20011c98
 800192c:	40023800 	.word	0x40023800
 8001930:	40020400 	.word	0x40020400
 8001934:	40020000 	.word	0x40020000
 8001938:	200000cc 	.word	0x200000cc
 800193c:	40026470 	.word	0x40026470

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <NMI_Handler+0x4>

08001946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler+0x4>

08001952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <UsageFault_Handler+0x4>

0800195e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198c:	f000 f8b8 	bl	8001b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}

08001994 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <DMA1_Stream2_IRQHandler+0x10>)
 800199a:	f000 fb9f 	bl	80020dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000254 	.word	0x20000254

080019a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <TIM2_IRQHandler+0x10>)
 80019ae:	f003 fe8f 	bl	80056d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000184 	.word	0x20000184

080019bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <UART4_IRQHandler+0x10>)
 80019c2:	f004 fbb1 	bl	8006128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200001cc 	.word	0x200001cc

080019d0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <DMA2_Stream4_IRQHandler+0x10>)
 80019d6:	f000 fb81 	bl	80020dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200000cc 	.word	0x200000cc

080019e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <SystemInit+0x20>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <SystemInit+0x20>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a0c:	480d      	ldr	r0, [pc, #52]	; (8001a44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a0e:	490e      	ldr	r1, [pc, #56]	; (8001a48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a10:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a14:	e002      	b.n	8001a1c <LoopCopyDataInit>

08001a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1a:	3304      	adds	r3, #4

08001a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a20:	d3f9      	bcc.n	8001a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a22:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a24:	4c0b      	ldr	r4, [pc, #44]	; (8001a54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a28:	e001      	b.n	8001a2e <LoopFillZerobss>

08001a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a2c:	3204      	adds	r2, #4

08001a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a30:	d3fb      	bcc.n	8001a2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a32:	f7ff ffd7 	bl	80019e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a36:	f005 faab 	bl	8006f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3a:	f7ff f8e1 	bl	8000c00 <main>
  bx  lr    
 8001a3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a48:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001a4c:	08007030 	.word	0x08007030
  ldr r2, =_sbss
 8001a50:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001a54:	20011ca0 	.word	0x20011ca0

08001a58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC_IRQHandler>
	...

08001a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_Init+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <HAL_Init+0x40>)
 8001a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_Init+0x40>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <HAL_Init+0x40>)
 8001a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_Init+0x40>)
 8001a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a84:	2003      	movs	r0, #3
 8001a86:	f000 f94f 	bl	8001d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8a:	200f      	movs	r0, #15
 8001a8c:	f000 f808 	bl	8001aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a90:	f7ff fd2c 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_InitTick+0x54>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_InitTick+0x58>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f967 	bl	8001d92 <HAL_SYSTICK_Config>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00e      	b.n	8001aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b0f      	cmp	r3, #15
 8001ad2:	d80a      	bhi.n	8001aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001adc:	f000 f92f 	bl	8001d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae0:	4a06      	ldr	r2, [pc, #24]	; (8001afc <HAL_InitTick+0x5c>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e000      	b.n	8001aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000018 	.word	0x20000018
 8001af8:	20000020 	.word	0x20000020
 8001afc:	2000001c 	.word	0x2000001c

08001b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x20>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x24>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_IncTick+0x24>)
 8001b12:	6013      	str	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000020 	.word	0x20000020
 8001b24:	20011c9c 	.word	0x20011c9c

08001b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_GetTick+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20011c9c 	.word	0x20011c9c

08001b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b48:	f7ff ffee 	bl	8001b28 <HAL_GetTick>
 8001b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b58:	d005      	beq.n	8001b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_Delay+0x44>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b66:	bf00      	nop
 8001b68:	f7ff ffde 	bl	8001b28 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d8f7      	bhi.n	8001b68 <HAL_Delay+0x28>
  {
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000020 	.word	0x20000020

08001b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	0a1b      	lsrs	r3, r3, #8
 8001bda:	f003 0307 	and.w	r3, r3, #7
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	db0b      	blt.n	8001c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	f003 021f 	and.w	r2, r3, #31
 8001c04:	4907      	ldr	r1, [pc, #28]	; (8001c24 <__NVIC_EnableIRQ+0x38>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000e100 	.word	0xe000e100

08001c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0a      	blt.n	8001c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	490c      	ldr	r1, [pc, #48]	; (8001c74 <__NVIC_SetPriority+0x4c>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c50:	e00a      	b.n	8001c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4908      	ldr	r1, [pc, #32]	; (8001c78 <__NVIC_SetPriority+0x50>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3b04      	subs	r3, #4
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	761a      	strb	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1c3 0307 	rsb	r3, r3, #7
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf28      	it	cs
 8001c9a:	2304      	movcs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d902      	bls.n	8001cac <NVIC_EncodePriority+0x30>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b03      	subs	r3, #3
 8001caa:	e000      	b.n	8001cae <NVIC_EncodePriority+0x32>
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	4313      	orrs	r3, r2
         );
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3724      	adds	r7, #36	; 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf4:	d301      	bcc.n	8001cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00f      	b.n	8001d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <SysTick_Config+0x40>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d02:	210f      	movs	r1, #15
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d08:	f7ff ff8e 	bl	8001c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <SysTick_Config+0x40>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <SysTick_Config+0x40>)
 8001d14:	2207      	movs	r2, #7
 8001d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	e000e010 	.word	0xe000e010

08001d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ff29 	bl	8001b88 <__NVIC_SetPriorityGrouping>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d50:	f7ff ff3e 	bl	8001bd0 <__NVIC_GetPriorityGrouping>
 8001d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7ff ff8e 	bl	8001c7c <NVIC_EncodePriority>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff5d 	bl	8001c28 <__NVIC_SetPriority>
}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff31 	bl	8001bec <__NVIC_EnableIRQ>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ffa2 	bl	8001ce4 <SysTick_Config>
 8001da0:	4603      	mov	r3, r0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff feb6 	bl	8001b28 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e099      	b.n	8001efc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de8:	e00f      	b.n	8001e0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dea:	f7ff fe9d 	bl	8001b28 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b05      	cmp	r3, #5
 8001df6:	d908      	bls.n	8001e0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2203      	movs	r2, #3
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e078      	b.n	8001efc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e8      	bne.n	8001dea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <HAL_DMA_Init+0x158>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d107      	bne.n	8001e74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f023 0307 	bic.w	r3, r3, #7
 8001e8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d117      	bne.n	8001ece <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00e      	beq.n	8001ece <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fb01 	bl	80024b8 <DMA_CheckFifoParam>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2240      	movs	r2, #64	; 0x40
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e016      	b.n	8001efc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fab8 	bl	800244c <DMA_CalcBaseAndBitshift>
 8001edc:	4603      	mov	r3, r0
 8001ede:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee4:	223f      	movs	r2, #63	; 0x3f
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	f010803f 	.word	0xf010803f

08001f08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_DMA_Start_IT+0x26>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e040      	b.n	8001fb0 <HAL_DMA_Start_IT+0xa8>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d12f      	bne.n	8001fa2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2202      	movs	r2, #2
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 fa4a 	bl	80023f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f60:	223f      	movs	r2, #63	; 0x3f
 8001f62:	409a      	lsls	r2, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0216 	orr.w	r2, r2, #22
 8001f76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0208 	orr.w	r2, r2, #8
 8001f8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	e005      	b.n	8001fae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001faa:	2302      	movs	r3, #2
 8001fac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fc6:	f7ff fdaf 	bl	8001b28 <HAL_GetTick>
 8001fca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d008      	beq.n	8001fea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2280      	movs	r2, #128	; 0x80
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e052      	b.n	8002090 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0216 	bic.w	r2, r2, #22
 8001ff8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002008:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d103      	bne.n	800201a <HAL_DMA_Abort+0x62>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0208 	bic.w	r2, r2, #8
 8002028:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0201 	bic.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800203a:	e013      	b.n	8002064 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800203c:	f7ff fd74 	bl	8001b28 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b05      	cmp	r3, #5
 8002048:	d90c      	bls.n	8002064 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2220      	movs	r2, #32
 800204e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2203      	movs	r2, #3
 8002054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e015      	b.n	8002090 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1e4      	bne.n	800203c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002076:	223f      	movs	r2, #63	; 0x3f
 8002078:	409a      	lsls	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d004      	beq.n	80020b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00c      	b.n	80020d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2205      	movs	r2, #5
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020e8:	4b8e      	ldr	r3, [pc, #568]	; (8002324 <HAL_DMA_IRQHandler+0x248>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a8e      	ldr	r2, [pc, #568]	; (8002328 <HAL_DMA_IRQHandler+0x24c>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	0a9b      	lsrs	r3, r3, #10
 80020f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	2208      	movs	r2, #8
 8002108:	409a      	lsls	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d01a      	beq.n	8002148 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0204 	bic.w	r2, r2, #4
 800212e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	2208      	movs	r2, #8
 8002136:	409a      	lsls	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	2201      	movs	r2, #1
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d012      	beq.n	800217e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	2201      	movs	r2, #1
 800216c:	409a      	lsls	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	f043 0202 	orr.w	r2, r3, #2
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	2204      	movs	r2, #4
 8002184:	409a      	lsls	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d012      	beq.n	80021b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00b      	beq.n	80021b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	2204      	movs	r2, #4
 80021a2:	409a      	lsls	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	f043 0204 	orr.w	r2, r3, #4
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b8:	2210      	movs	r2, #16
 80021ba:	409a      	lsls	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d043      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d03c      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d6:	2210      	movs	r2, #16
 80021d8:	409a      	lsls	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d018      	beq.n	800221e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d108      	bne.n	800220c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d024      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
 800220a:	e01f      	b.n	800224c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01b      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
 800221c:	e016      	b.n	800224c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d107      	bne.n	800223c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0208 	bic.w	r2, r2, #8
 800223a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	2220      	movs	r2, #32
 8002252:	409a      	lsls	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 808f 	beq.w	800237c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8087 	beq.w	800237c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	2220      	movs	r2, #32
 8002274:	409a      	lsls	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b05      	cmp	r3, #5
 8002284:	d136      	bne.n	80022f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0216 	bic.w	r2, r2, #22
 8002294:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d103      	bne.n	80022b6 <HAL_DMA_IRQHandler+0x1da>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0208 	bic.w	r2, r2, #8
 80022c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ca:	223f      	movs	r2, #63	; 0x3f
 80022cc:	409a      	lsls	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d07e      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
        }
        return;
 80022f2:	e079      	b.n	80023e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d01d      	beq.n	800233e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10d      	bne.n	800232c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	2b00      	cmp	r3, #0
 8002316:	d031      	beq.n	800237c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
 8002320:	e02c      	b.n	800237c <HAL_DMA_IRQHandler+0x2a0>
 8002322:	bf00      	nop
 8002324:	20000018 	.word	0x20000018
 8002328:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d023      	beq.n	800237c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4798      	blx	r3
 800233c:	e01e      	b.n	800237c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10f      	bne.n	800236c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0210 	bic.w	r2, r2, #16
 800235a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002380:	2b00      	cmp	r3, #0
 8002382:	d032      	beq.n	80023ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d022      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2205      	movs	r2, #5
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	3301      	adds	r3, #1
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d307      	bcc.n	80023c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f2      	bne.n	80023a8 <HAL_DMA_IRQHandler+0x2cc>
 80023c2:	e000      	b.n	80023c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	4798      	blx	r3
 80023e6:	e000      	b.n	80023ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80023e8:	bf00      	nop
    }
  }
}
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800240c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b40      	cmp	r3, #64	; 0x40
 800241c:	d108      	bne.n	8002430 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800242e:	e007      	b.n	8002440 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	60da      	str	r2, [r3, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	3b10      	subs	r3, #16
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <DMA_CalcBaseAndBitshift+0x64>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002466:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d909      	bls.n	800248e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002482:	f023 0303 	bic.w	r3, r3, #3
 8002486:	1d1a      	adds	r2, r3, #4
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	659a      	str	r2, [r3, #88]	; 0x58
 800248c:	e007      	b.n	800249e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002496:	f023 0303 	bic.w	r3, r3, #3
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	aaaaaaab 	.word	0xaaaaaaab
 80024b4:	08007018 	.word	0x08007018

080024b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d11f      	bne.n	8002512 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d856      	bhi.n	8002586 <DMA_CheckFifoParam+0xce>
 80024d8:	a201      	add	r2, pc, #4	; (adr r2, 80024e0 <DMA_CheckFifoParam+0x28>)
 80024da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024de:	bf00      	nop
 80024e0:	080024f1 	.word	0x080024f1
 80024e4:	08002503 	.word	0x08002503
 80024e8:	080024f1 	.word	0x080024f1
 80024ec:	08002587 	.word	0x08002587
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d046      	beq.n	800258a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002500:	e043      	b.n	800258a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800250a:	d140      	bne.n	800258e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002510:	e03d      	b.n	800258e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800251a:	d121      	bne.n	8002560 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b03      	cmp	r3, #3
 8002520:	d837      	bhi.n	8002592 <DMA_CheckFifoParam+0xda>
 8002522:	a201      	add	r2, pc, #4	; (adr r2, 8002528 <DMA_CheckFifoParam+0x70>)
 8002524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002528:	08002539 	.word	0x08002539
 800252c:	0800253f 	.word	0x0800253f
 8002530:	08002539 	.word	0x08002539
 8002534:	08002551 	.word	0x08002551
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
      break;
 800253c:	e030      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d025      	beq.n	8002596 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800254e:	e022      	b.n	8002596 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002558:	d11f      	bne.n	800259a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800255e:	e01c      	b.n	800259a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d903      	bls.n	800256e <DMA_CheckFifoParam+0xb6>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d003      	beq.n	8002574 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800256c:	e018      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
      break;
 8002572:	e015      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00e      	beq.n	800259e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
      break;
 8002584:	e00b      	b.n	800259e <DMA_CheckFifoParam+0xe6>
      break;
 8002586:	bf00      	nop
 8002588:	e00a      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 800258a:	bf00      	nop
 800258c:	e008      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 800258e:	bf00      	nop
 8002590:	e006      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002592:	bf00      	nop
 8002594:	e004      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002596:	bf00      	nop
 8002598:	e002      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800259a:	bf00      	nop
 800259c:	e000      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 800259e:	bf00      	nop
    }
  } 
  
  return status; 
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop

080025b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	e165      	b.n	8002898 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025cc:	2201      	movs	r2, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	f040 8154 	bne.w	8002892 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d005      	beq.n	8002602 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d130      	bne.n	8002664 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	2203      	movs	r2, #3
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002638:	2201      	movs	r2, #1
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 0201 	and.w	r2, r3, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b03      	cmp	r3, #3
 800266e:	d017      	beq.n	80026a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d123      	bne.n	80026f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	08da      	lsrs	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3208      	adds	r2, #8
 80026b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	220f      	movs	r2, #15
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	08da      	lsrs	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3208      	adds	r2, #8
 80026ee:	69b9      	ldr	r1, [r7, #24]
 80026f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	2203      	movs	r2, #3
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0203 	and.w	r2, r3, #3
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80ae 	beq.w	8002892 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	4b5d      	ldr	r3, [pc, #372]	; (80028b0 <HAL_GPIO_Init+0x300>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	4a5c      	ldr	r2, [pc, #368]	; (80028b0 <HAL_GPIO_Init+0x300>)
 8002740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002744:	6453      	str	r3, [r2, #68]	; 0x44
 8002746:	4b5a      	ldr	r3, [pc, #360]	; (80028b0 <HAL_GPIO_Init+0x300>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002752:	4a58      	ldr	r2, [pc, #352]	; (80028b4 <HAL_GPIO_Init+0x304>)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	089b      	lsrs	r3, r3, #2
 8002758:	3302      	adds	r3, #2
 800275a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	220f      	movs	r2, #15
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a4f      	ldr	r2, [pc, #316]	; (80028b8 <HAL_GPIO_Init+0x308>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d025      	beq.n	80027ca <HAL_GPIO_Init+0x21a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a4e      	ldr	r2, [pc, #312]	; (80028bc <HAL_GPIO_Init+0x30c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d01f      	beq.n	80027c6 <HAL_GPIO_Init+0x216>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a4d      	ldr	r2, [pc, #308]	; (80028c0 <HAL_GPIO_Init+0x310>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d019      	beq.n	80027c2 <HAL_GPIO_Init+0x212>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a4c      	ldr	r2, [pc, #304]	; (80028c4 <HAL_GPIO_Init+0x314>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d013      	beq.n	80027be <HAL_GPIO_Init+0x20e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a4b      	ldr	r2, [pc, #300]	; (80028c8 <HAL_GPIO_Init+0x318>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00d      	beq.n	80027ba <HAL_GPIO_Init+0x20a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a4a      	ldr	r2, [pc, #296]	; (80028cc <HAL_GPIO_Init+0x31c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d007      	beq.n	80027b6 <HAL_GPIO_Init+0x206>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a49      	ldr	r2, [pc, #292]	; (80028d0 <HAL_GPIO_Init+0x320>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d101      	bne.n	80027b2 <HAL_GPIO_Init+0x202>
 80027ae:	2306      	movs	r3, #6
 80027b0:	e00c      	b.n	80027cc <HAL_GPIO_Init+0x21c>
 80027b2:	2307      	movs	r3, #7
 80027b4:	e00a      	b.n	80027cc <HAL_GPIO_Init+0x21c>
 80027b6:	2305      	movs	r3, #5
 80027b8:	e008      	b.n	80027cc <HAL_GPIO_Init+0x21c>
 80027ba:	2304      	movs	r3, #4
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x21c>
 80027be:	2303      	movs	r3, #3
 80027c0:	e004      	b.n	80027cc <HAL_GPIO_Init+0x21c>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e002      	b.n	80027cc <HAL_GPIO_Init+0x21c>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_GPIO_Init+0x21c>
 80027ca:	2300      	movs	r3, #0
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	f002 0203 	and.w	r2, r2, #3
 80027d2:	0092      	lsls	r2, r2, #2
 80027d4:	4093      	lsls	r3, r2
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027dc:	4935      	ldr	r1, [pc, #212]	; (80028b4 <HAL_GPIO_Init+0x304>)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	3302      	adds	r3, #2
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ea:	4b3a      	ldr	r3, [pc, #232]	; (80028d4 <HAL_GPIO_Init+0x324>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800280e:	4a31      	ldr	r2, [pc, #196]	; (80028d4 <HAL_GPIO_Init+0x324>)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002814:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <HAL_GPIO_Init+0x324>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002838:	4a26      	ldr	r2, [pc, #152]	; (80028d4 <HAL_GPIO_Init+0x324>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283e:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <HAL_GPIO_Init+0x324>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002862:	4a1c      	ldr	r2, [pc, #112]	; (80028d4 <HAL_GPIO_Init+0x324>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002868:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <HAL_GPIO_Init+0x324>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800288c:	4a11      	ldr	r2, [pc, #68]	; (80028d4 <HAL_GPIO_Init+0x324>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3301      	adds	r3, #1
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	2b0f      	cmp	r3, #15
 800289c:	f67f ae96 	bls.w	80025cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3724      	adds	r7, #36	; 0x24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40013800 	.word	0x40013800
 80028b8:	40020000 	.word	0x40020000
 80028bc:	40020400 	.word	0x40020400
 80028c0:	40020800 	.word	0x40020800
 80028c4:	40020c00 	.word	0x40020c00
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40021400 	.word	0x40021400
 80028d0:	40021800 	.word	0x40021800
 80028d4:	40013c00 	.word	0x40013c00

080028d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	807b      	strh	r3, [r7, #2]
 80028e4:	4613      	mov	r3, r2
 80028e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e8:	787b      	ldrb	r3, [r7, #1]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028f4:	e003      	b.n	80028fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028f6:	887b      	ldrh	r3, [r7, #2]
 80028f8:	041a      	lsls	r2, r3, #16
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	619a      	str	r2, [r3, #24]
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0cc      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002920:	4b68      	ldr	r3, [pc, #416]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d90c      	bls.n	8002948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b65      	ldr	r3, [pc, #404]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b63      	ldr	r3, [pc, #396]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0b8      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002960:	4b59      	ldr	r3, [pc, #356]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	4a58      	ldr	r2, [pc, #352]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800296a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a52      	ldr	r2, [pc, #328]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002984:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	494d      	ldr	r1, [pc, #308]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d044      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d119      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e07f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d003      	beq.n	80029ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ca:	4b3f      	ldr	r3, [pc, #252]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e06f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e067      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f023 0203 	bic.w	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4934      	ldr	r1, [pc, #208]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029fc:	f7ff f894 	bl	8001b28 <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a04:	f7ff f890 	bl	8001b28 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e04f      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 020c 	and.w	r2, r3, #12
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d1eb      	bne.n	8002a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d20c      	bcs.n	8002a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e032      	b.n	8002aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4916      	ldr	r1, [pc, #88]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	490e      	ldr	r1, [pc, #56]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a92:	f000 fdc7 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8002a96:	4602      	mov	r2, r0
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	490a      	ldr	r1, [pc, #40]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002aa4:	5ccb      	ldrb	r3, [r1, r3]
 8002aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe fff4 	bl	8001aa0 <HAL_InitTick>

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023c00 	.word	0x40023c00
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	08007000 	.word	0x08007000
 8002ad0:	20000018 	.word	0x20000018
 8002ad4:	2000001c 	.word	0x2000001c

08002ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <HAL_RCC_GetHCLKFreq+0x14>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000018 	.word	0x20000018

08002af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002af4:	f7ff fff0 	bl	8002ad8 <HAL_RCC_GetHCLKFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	0a9b      	lsrs	r3, r3, #10
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4903      	ldr	r1, [pc, #12]	; (8002b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40023800 	.word	0x40023800
 8002b14:	08007010 	.word	0x08007010

08002b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b1c:	f7ff ffdc 	bl	8002ad8 <HAL_RCC_GetHCLKFreq>
 8002b20:	4602      	mov	r2, r0
 8002b22:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	0b5b      	lsrs	r3, r3, #13
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	4903      	ldr	r1, [pc, #12]	; (8002b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b2e:	5ccb      	ldrb	r3, [r1, r3]
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	08007010 	.word	0x08007010

08002b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08c      	sub	sp, #48	; 0x30
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d010      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002b78:	4b6f      	ldr	r3, [pc, #444]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b7e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	496c      	ldr	r1, [pc, #432]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002b96:	2301      	movs	r3, #1
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d010      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002ba6:	4b64      	ldr	r3, [pc, #400]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bac:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb4:	4960      	ldr	r1, [pc, #384]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d017      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bd4:	4b58      	ldr	r3, [pc, #352]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4955      	ldr	r1, [pc, #340]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002c00:	2301      	movs	r3, #1
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d017      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c10:	4b49      	ldr	r3, [pc, #292]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1e:	4946      	ldr	r1, [pc, #280]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002c30:	2301      	movs	r3, #1
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 808a 	beq.w	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	4b39      	ldr	r3, [pc, #228]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	4a38      	ldr	r2, [pc, #224]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5e:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002c6a:	4b34      	ldr	r3, [pc, #208]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a33      	ldr	r2, [pc, #204]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c76:	f7fe ff57 	bl	8001b28 <HAL_GetTick>
 8002c7a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c7e:	f7fe ff53 	bl	8001b28 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e278      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c90:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c9c:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d02f      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb4:	6a3a      	ldr	r2, [r7, #32]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d028      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cba:	4b1f      	ldr	r3, [pc, #124]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cca:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002cd0:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cd6:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d114      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7fe ff21 	bl	8001b28 <HAL_GetTick>
 8002ce6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fe ff1d 	bl	8001b28 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e240      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d00:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ee      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d18:	d114      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002d1a:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2e:	4902      	ldr	r1, [pc, #8]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]
 8002d34:	e00c      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40007000 	.word	0x40007000
 8002d40:	42470e40 	.word	0x42470e40
 8002d44:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4a49      	ldr	r2, [pc, #292]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d4e:	6093      	str	r3, [r2, #8]
 8002d50:	4b47      	ldr	r3, [pc, #284]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d5c:	4944      	ldr	r1, [pc, #272]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d004      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002d74:	4b3f      	ldr	r3, [pc, #252]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002d76:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002d84:	4b3a      	ldr	r3, [pc, #232]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	4937      	ldr	r1, [pc, #220]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002da6:	4b32      	ldr	r3, [pc, #200]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dac:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db4:	492e      	ldr	r1, [pc, #184]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d011      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002dc8:	4b29      	ldr	r3, [pc, #164]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dce:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	4926      	ldr	r1, [pc, #152]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002de6:	d101      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002de8:	2301      	movs	r3, #1
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002df8:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	491a      	ldr	r1, [pc, #104]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d011      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002e1a:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e20:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e28:	4911      	ldr	r1, [pc, #68]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e38:	d101      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d005      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e4c:	f040 80ff 	bne.w	800304e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e50:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e56:	f7fe fe67 	bl	8001b28 <HAL_GetTick>
 8002e5a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e5c:	e00e      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e5e:	f7fe fe63 	bl	8001b28 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d907      	bls.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e188      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002e70:	40023800 	.word	0x40023800
 8002e74:	424711e0 	.word	0x424711e0
 8002e78:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e7c:	4b7e      	ldr	r3, [pc, #504]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1ea      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d009      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d028      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d124      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002eb0:	4b71      	ldr	r3, [pc, #452]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eb6:	0c1b      	lsrs	r3, r3, #16
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ec2:	4b6d      	ldr	r3, [pc, #436]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec8:	0e1b      	lsrs	r3, r3, #24
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	019b      	lsls	r3, r3, #6
 8002eda:	431a      	orrs	r2, r3
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	085b      	lsrs	r3, r3, #1
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	061b      	lsls	r3, r3, #24
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	071b      	lsls	r3, r3, #28
 8002ef2:	4961      	ldr	r1, [pc, #388]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d004      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f0e:	d00a      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d035      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f24:	d130      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002f26:	4b54      	ldr	r3, [pc, #336]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2c:	0c1b      	lsrs	r3, r3, #16
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	3301      	adds	r3, #1
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f38:	4b4f      	ldr	r3, [pc, #316]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f3e:	0f1b      	lsrs	r3, r3, #28
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	019b      	lsls	r3, r3, #6
 8002f50:	431a      	orrs	r2, r3
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	085b      	lsrs	r3, r3, #1
 8002f56:	3b01      	subs	r3, #1
 8002f58:	041b      	lsls	r3, r3, #16
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	061b      	lsls	r3, r3, #24
 8002f62:	431a      	orrs	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	071b      	lsls	r3, r3, #28
 8002f68:	4943      	ldr	r1, [pc, #268]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f70:	4b41      	ldr	r3, [pc, #260]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f76:	f023 021f 	bic.w	r2, r3, #31
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	493d      	ldr	r1, [pc, #244]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d029      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f9c:	d124      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002f9e:	4b36      	ldr	r3, [pc, #216]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa4:	0c1b      	lsrs	r3, r3, #16
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	3301      	adds	r3, #1
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fb0:	4b31      	ldr	r3, [pc, #196]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb6:	0f1b      	lsrs	r3, r3, #28
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	019b      	lsls	r3, r3, #6
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	041b      	lsls	r3, r3, #16
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	071b      	lsls	r3, r3, #28
 8002fe0:	4925      	ldr	r1, [pc, #148]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d016      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	019b      	lsls	r3, r3, #6
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	3b01      	subs	r3, #1
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	061b      	lsls	r3, r3, #24
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	071b      	lsls	r3, r3, #28
 800301a:	4917      	ldr	r1, [pc, #92]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003022:	4b16      	ldr	r3, [pc, #88]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003028:	f7fe fd7e 	bl	8001b28 <HAL_GetTick>
 800302c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003030:	f7fe fd7a 	bl	8001b28 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e09f      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003042:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	2b01      	cmp	r3, #1
 8003052:	f040 8095 	bne.w	8003180 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003056:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800305c:	f7fe fd64 	bl	8001b28 <HAL_GetTick>
 8003060:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003062:	e00f      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003064:	f7fe fd60 	bl	8001b28 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d908      	bls.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e085      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	42470068 	.word	0x42470068
 8003080:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003084:	4b41      	ldr	r3, [pc, #260]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800308c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003090:	d0e8      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d02b      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d127      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80030ba:	4b34      	ldr	r3, [pc, #208]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	3301      	adds	r3, #1
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699a      	ldr	r2, [r3, #24]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	019b      	lsls	r3, r3, #6
 80030d6:	431a      	orrs	r2, r3
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	3b01      	subs	r3, #1
 80030de:	041b      	lsls	r3, r3, #16
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	061b      	lsls	r3, r3, #24
 80030e8:	4928      	ldr	r1, [pc, #160]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030f0:	4b26      	ldr	r3, [pc, #152]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030f6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	3b01      	subs	r3, #1
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	4922      	ldr	r1, [pc, #136]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d01d      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800311e:	d118      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003120:	4b1a      	ldr	r3, [pc, #104]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	0e1b      	lsrs	r3, r3, #24
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	019b      	lsls	r3, r3, #6
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	085b      	lsrs	r3, r3, #1
 8003140:	3b01      	subs	r3, #1
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	431a      	orrs	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	061b      	lsls	r3, r3, #24
 800314a:	4910      	ldr	r1, [pc, #64]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003152:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003154:	2201      	movs	r2, #1
 8003156:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003158:	f7fe fce6 	bl	8001b28 <HAL_GetTick>
 800315c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003160:	f7fe fce2 	bl	8001b28 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e007      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800317a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800317e:	d1ef      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3730      	adds	r7, #48	; 0x30
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	42470070 	.word	0x42470070

08003194 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	2b07      	cmp	r3, #7
 80031ba:	f200 8224 	bhi.w	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80031be:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80031c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c4:	080033c7 	.word	0x080033c7
 80031c8:	080034f1 	.word	0x080034f1
 80031cc:	08003607 	.word	0x08003607
 80031d0:	080031e5 	.word	0x080031e5
 80031d4:	08003607 	.word	0x08003607
 80031d8:	08003607 	.word	0x08003607
 80031dc:	08003607 	.word	0x08003607
 80031e0:	080031e5 	.word	0x080031e5
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80031e4:	4ba8      	ldr	r3, [pc, #672]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80031e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ea:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031fa:	f000 80d6 	beq.w	80033aa <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003204:	f200 80dd 	bhi.w	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800320e:	f000 809f 	beq.w	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003218:	f200 80d3 	bhi.w	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003222:	d05b      	beq.n	80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800322a:	f200 80ca 	bhi.w	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003234:	f000 80b6 	beq.w	80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800323e:	f200 80c0 	bhi.w	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003248:	f000 8082 	beq.w	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003252:	f200 80b6 	bhi.w	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d004      	beq.n	8003266 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003262:	d03b      	beq.n	80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8003264:	e0ad      	b.n	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003266:	4b88      	ldr	r3, [pc, #544]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8003272:	4b85      	ldr	r3, [pc, #532]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800327c:	4a83      	ldr	r2, [pc, #524]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800327e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	e008      	b.n	8003298 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8003286:	4b80      	ldr	r3, [pc, #512]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003290:	4a7f      	ldr	r2, [pc, #508]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003292:	fbb2 f3f3 	udiv	r3, r2, r3
 8003296:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003298:	4b7b      	ldr	r3, [pc, #492]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329e:	0e1b      	lsrs	r3, r3, #24
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 80032a6:	4b78      	ldr	r3, [pc, #480]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ac:	099b      	lsrs	r3, r3, #6
 80032ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	fb03 f202 	mul.w	r2, r3, r2
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80032c0:	4b71      	ldr	r3, [pc, #452]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80032c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c6:	0a1b      	lsrs	r3, r3, #8
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	3301      	adds	r3, #1
 80032ce:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	61fb      	str	r3, [r7, #28]
          break;
 80032da:	e073      	b.n	80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80032dc:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80032e8:	4b67      	ldr	r3, [pc, #412]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80032ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032f2:	4a66      	ldr	r2, [pc, #408]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	61bb      	str	r3, [r7, #24]
 80032fa:	e008      	b.n	800330e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80032fc:	4b62      	ldr	r3, [pc, #392]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80032fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003302:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003306:	4a62      	ldr	r2, [pc, #392]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003308:	fbb2 f3f3 	udiv	r3, r2, r3
 800330c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800330e:	4b5e      	ldr	r3, [pc, #376]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003314:	0e1b      	lsrs	r3, r3, #24
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 800331c:	4b5a      	ldr	r3, [pc, #360]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800331e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003322:	099b      	lsrs	r3, r3, #6
 8003324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	fb03 f202 	mul.w	r2, r3, r2
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8003336:	4b54      	ldr	r3, [pc, #336]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	3301      	adds	r3, #1
 8003342:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	fbb2 f3f3 	udiv	r3, r2, r3
 800334c:	61fb      	str	r3, [r7, #28]
          break;
 800334e:	e039      	b.n	80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003350:	4b4d      	ldr	r3, [pc, #308]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d108      	bne.n	800336e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800335c:	4b4a      	ldr	r3, [pc, #296]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003364:	4a49      	ldr	r2, [pc, #292]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003366:	fbb2 f3f3 	udiv	r3, r2, r3
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	e007      	b.n	800337e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800336e:	4b46      	ldr	r3, [pc, #280]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003376:	4a46      	ldr	r2, [pc, #280]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800337e:	4b42      	ldr	r3, [pc, #264]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	0f1b      	lsrs	r3, r3, #28
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800338a:	4b3f      	ldr	r3, [pc, #252]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	099b      	lsrs	r3, r3, #6
 8003390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	fb03 f202 	mul.w	r2, r3, r2
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a0:	61fb      	str	r3, [r7, #28]
          break;
 80033a2:	e00f      	b.n	80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 80033a4:	4b3b      	ldr	r3, [pc, #236]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80033a6:	61fb      	str	r3, [r7, #28]
          break;
 80033a8:	e00c      	b.n	80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80033aa:	4b37      	ldr	r3, [pc, #220]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80033b6:	4b35      	ldr	r3, [pc, #212]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80033b8:	61fb      	str	r3, [r7, #28]
          break;
 80033ba:	e003      	b.n	80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80033bc:	4b34      	ldr	r3, [pc, #208]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80033be:	61fb      	str	r3, [r7, #28]
          break;
 80033c0:	e000      	b.n	80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80033c2:	bf00      	nop
        }
      }
      break;
 80033c4:	e11f      	b.n	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80033c6:	4b30      	ldr	r3, [pc, #192]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80033c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033cc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80033d8:	d079      	beq.n	80034ce <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80033e0:	f200 8082 	bhi.w	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ea:	d03c      	beq.n	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033f2:	d879      	bhi.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d006      	beq.n	8003408 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003400:	d172      	bne.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003402:	4b24      	ldr	r3, [pc, #144]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003404:	61fb      	str	r3, [r7, #28]
          break;
 8003406:	e072      	b.n	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003408:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003414:	d109      	bne.n	800342a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003416:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003420:	4a1b      	ldr	r2, [pc, #108]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003422:	fbb2 f3f3 	udiv	r3, r2, r3
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	e008      	b.n	800343c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800342a:	4b17      	ldr	r3, [pc, #92]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800342c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003434:	4a15      	ldr	r2, [pc, #84]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800343c:	4b12      	ldr	r3, [pc, #72]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800343e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003442:	099b      	lsrs	r3, r3, #6
 8003444:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003456:	0f1b      	lsrs	r3, r3, #28
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003462:	61fb      	str	r3, [r7, #28]
          break;
 8003464:	e043      	b.n	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003472:	d111      	bne.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800347c:	4a04      	ldr	r2, [pc, #16]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800347e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	e010      	b.n	80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003486:	bf00      	nop
 8003488:	40023800 	.word	0x40023800
 800348c:	00f42400 	.word	0x00f42400
 8003490:	007a1200 	.word	0x007a1200
 8003494:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003498:	4b5e      	ldr	r3, [pc, #376]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a0:	4a5d      	ldr	r2, [pc, #372]	; (8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80034a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a6:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80034a8:	4b5a      	ldr	r3, [pc, #360]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	099b      	lsrs	r3, r3, #6
 80034ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	fb02 f303 	mul.w	r3, r2, r3
 80034b8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80034ba:	4b56      	ldr	r3, [pc, #344]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	0f1b      	lsrs	r3, r3, #28
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	61fb      	str	r3, [r7, #28]
          break;
 80034cc:	e00f      	b.n	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80034ce:	4b51      	ldr	r3, [pc, #324]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034da:	d102      	bne.n	80034e2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80034dc:	4b4f      	ldr	r3, [pc, #316]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80034de:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80034e0:	e005      	b.n	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 80034e2:	4b4d      	ldr	r3, [pc, #308]	; (8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80034e4:	61fb      	str	r3, [r7, #28]
          break;
 80034e6:	e002      	b.n	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61fb      	str	r3, [r7, #28]
          break;
 80034ec:	bf00      	nop
        }
      }
      break;
 80034ee:	e08a      	b.n	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80034f0:	4b48      	ldr	r3, [pc, #288]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80034f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f6:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003502:	d06f      	beq.n	80035e4 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800350a:	d878      	bhi.n	80035fe <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003512:	d03c      	beq.n	800358e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800351a:	d870      	bhi.n	80035fe <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d006      	beq.n	8003530 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003528:	d169      	bne.n	80035fe <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800352a:	4b3d      	ldr	r3, [pc, #244]	; (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800352c:	61fb      	str	r3, [r7, #28]
          break;
 800352e:	e069      	b.n	8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003530:	4b38      	ldr	r3, [pc, #224]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003538:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800353c:	d109      	bne.n	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800353e:	4b35      	ldr	r3, [pc, #212]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003548:	4a34      	ldr	r2, [pc, #208]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800354a:	fbb2 f3f3 	udiv	r3, r2, r3
 800354e:	61bb      	str	r3, [r7, #24]
 8003550:	e008      	b.n	8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003552:	4b30      	ldr	r3, [pc, #192]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800355c:	4a2e      	ldr	r2, [pc, #184]	; (8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800355e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003562:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003564:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	fb02 f303 	mul.w	r3, r2, r3
 8003576:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003578:	4b26      	ldr	r3, [pc, #152]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800357a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800357e:	0f1b      	lsrs	r3, r3, #28
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	fbb2 f3f3 	udiv	r3, r2, r3
 800358a:	61fb      	str	r3, [r7, #28]
          break;
 800358c:	e03a      	b.n	8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800358e:	4b21      	ldr	r3, [pc, #132]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800359a:	d108      	bne.n	80035ae <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800359c:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035a4:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80035a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	e007      	b.n	80035be <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035ae:	4b19      	ldr	r3, [pc, #100]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b6:	4a18      	ldr	r2, [pc, #96]	; (8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80035b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035bc:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80035be:	4b15      	ldr	r3, [pc, #84]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	099b      	lsrs	r3, r3, #6
 80035c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80035d0:	4b10      	ldr	r3, [pc, #64]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	0f1b      	lsrs	r3, r3, #28
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e0:	61fb      	str	r3, [r7, #28]
          break;
 80035e2:	e00f      	b.n	8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f0:	d102      	bne.n	80035f8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80035f4:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80035f6:	e005      	b.n	8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80035f8:	4b07      	ldr	r3, [pc, #28]	; (8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80035fa:	61fb      	str	r3, [r7, #28]
          break;
 80035fc:	e002      	b.n	8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
          break;
 8003602:	bf00      	nop
        }
      }
      break;
 8003604:	bf00      	nop
    }
  }
  return frequency;
 8003606:	69fb      	ldr	r3, [r7, #28]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3724      	adds	r7, #36	; 0x24
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40023800 	.word	0x40023800
 8003618:	00f42400 	.word	0x00f42400
 800361c:	007a1200 	.word	0x007a1200
 8003620:	00bb8000 	.word	0x00bb8000

08003624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003628:	b0ae      	sub	sp, #184	; 0xb8
 800362a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800364a:	4bcb      	ldr	r3, [pc, #812]	; (8003978 <HAL_RCC_GetSysClockFreq+0x354>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b0c      	cmp	r3, #12
 8003654:	f200 8206 	bhi.w	8003a64 <HAL_RCC_GetSysClockFreq+0x440>
 8003658:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <HAL_RCC_GetSysClockFreq+0x3c>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	08003695 	.word	0x08003695
 8003664:	08003a65 	.word	0x08003a65
 8003668:	08003a65 	.word	0x08003a65
 800366c:	08003a65 	.word	0x08003a65
 8003670:	0800369d 	.word	0x0800369d
 8003674:	08003a65 	.word	0x08003a65
 8003678:	08003a65 	.word	0x08003a65
 800367c:	08003a65 	.word	0x08003a65
 8003680:	080036a5 	.word	0x080036a5
 8003684:	08003a65 	.word	0x08003a65
 8003688:	08003a65 	.word	0x08003a65
 800368c:	08003a65 	.word	0x08003a65
 8003690:	08003895 	.word	0x08003895
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003694:	4bb9      	ldr	r3, [pc, #740]	; (800397c <HAL_RCC_GetSysClockFreq+0x358>)
 8003696:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800369a:	e1e7      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800369c:	4bb8      	ldr	r3, [pc, #736]	; (8003980 <HAL_RCC_GetSysClockFreq+0x35c>)
 800369e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036a2:	e1e3      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a4:	4bb4      	ldr	r3, [pc, #720]	; (8003978 <HAL_RCC_GetSysClockFreq+0x354>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b0:	4bb1      	ldr	r3, [pc, #708]	; (8003978 <HAL_RCC_GetSysClockFreq+0x354>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d071      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036bc:	4bae      	ldr	r3, [pc, #696]	; (8003978 <HAL_RCC_GetSysClockFreq+0x354>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	099b      	lsrs	r3, r3, #6
 80036c2:	2200      	movs	r2, #0
 80036c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036c8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80036cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036d8:	2300      	movs	r3, #0
 80036da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80036de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036e2:	4622      	mov	r2, r4
 80036e4:	462b      	mov	r3, r5
 80036e6:	f04f 0000 	mov.w	r0, #0
 80036ea:	f04f 0100 	mov.w	r1, #0
 80036ee:	0159      	lsls	r1, r3, #5
 80036f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036f4:	0150      	lsls	r0, r2, #5
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4621      	mov	r1, r4
 80036fc:	1a51      	subs	r1, r2, r1
 80036fe:	6439      	str	r1, [r7, #64]	; 0x40
 8003700:	4629      	mov	r1, r5
 8003702:	eb63 0301 	sbc.w	r3, r3, r1
 8003706:	647b      	str	r3, [r7, #68]	; 0x44
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003714:	4649      	mov	r1, r9
 8003716:	018b      	lsls	r3, r1, #6
 8003718:	4641      	mov	r1, r8
 800371a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800371e:	4641      	mov	r1, r8
 8003720:	018a      	lsls	r2, r1, #6
 8003722:	4641      	mov	r1, r8
 8003724:	1a51      	subs	r1, r2, r1
 8003726:	63b9      	str	r1, [r7, #56]	; 0x38
 8003728:	4649      	mov	r1, r9
 800372a:	eb63 0301 	sbc.w	r3, r3, r1
 800372e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800373c:	4649      	mov	r1, r9
 800373e:	00cb      	lsls	r3, r1, #3
 8003740:	4641      	mov	r1, r8
 8003742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003746:	4641      	mov	r1, r8
 8003748:	00ca      	lsls	r2, r1, #3
 800374a:	4610      	mov	r0, r2
 800374c:	4619      	mov	r1, r3
 800374e:	4603      	mov	r3, r0
 8003750:	4622      	mov	r2, r4
 8003752:	189b      	adds	r3, r3, r2
 8003754:	633b      	str	r3, [r7, #48]	; 0x30
 8003756:	462b      	mov	r3, r5
 8003758:	460a      	mov	r2, r1
 800375a:	eb42 0303 	adc.w	r3, r2, r3
 800375e:	637b      	str	r3, [r7, #52]	; 0x34
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800376c:	4629      	mov	r1, r5
 800376e:	024b      	lsls	r3, r1, #9
 8003770:	4621      	mov	r1, r4
 8003772:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003776:	4621      	mov	r1, r4
 8003778:	024a      	lsls	r2, r1, #9
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003782:	2200      	movs	r2, #0
 8003784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003788:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800378c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003790:	f7fc fe48 	bl	8000424 <__aeabi_uldivmod>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4613      	mov	r3, r2
 800379a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800379e:	e067      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a0:	4b75      	ldr	r3, [pc, #468]	; (8003978 <HAL_RCC_GetSysClockFreq+0x354>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	099b      	lsrs	r3, r3, #6
 80037a6:	2200      	movs	r2, #0
 80037a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037ac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80037b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80037ba:	2300      	movs	r3, #0
 80037bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80037be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80037c2:	4622      	mov	r2, r4
 80037c4:	462b      	mov	r3, r5
 80037c6:	f04f 0000 	mov.w	r0, #0
 80037ca:	f04f 0100 	mov.w	r1, #0
 80037ce:	0159      	lsls	r1, r3, #5
 80037d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d4:	0150      	lsls	r0, r2, #5
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4621      	mov	r1, r4
 80037dc:	1a51      	subs	r1, r2, r1
 80037de:	62b9      	str	r1, [r7, #40]	; 0x28
 80037e0:	4629      	mov	r1, r5
 80037e2:	eb63 0301 	sbc.w	r3, r3, r1
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80037f4:	4649      	mov	r1, r9
 80037f6:	018b      	lsls	r3, r1, #6
 80037f8:	4641      	mov	r1, r8
 80037fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037fe:	4641      	mov	r1, r8
 8003800:	018a      	lsls	r2, r1, #6
 8003802:	4641      	mov	r1, r8
 8003804:	ebb2 0a01 	subs.w	sl, r2, r1
 8003808:	4649      	mov	r1, r9
 800380a:	eb63 0b01 	sbc.w	fp, r3, r1
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800381a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800381e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003822:	4692      	mov	sl, r2
 8003824:	469b      	mov	fp, r3
 8003826:	4623      	mov	r3, r4
 8003828:	eb1a 0303 	adds.w	r3, sl, r3
 800382c:	623b      	str	r3, [r7, #32]
 800382e:	462b      	mov	r3, r5
 8003830:	eb4b 0303 	adc.w	r3, fp, r3
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003842:	4629      	mov	r1, r5
 8003844:	028b      	lsls	r3, r1, #10
 8003846:	4621      	mov	r1, r4
 8003848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800384c:	4621      	mov	r1, r4
 800384e:	028a      	lsls	r2, r1, #10
 8003850:	4610      	mov	r0, r2
 8003852:	4619      	mov	r1, r3
 8003854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003858:	2200      	movs	r2, #0
 800385a:	673b      	str	r3, [r7, #112]	; 0x70
 800385c:	677a      	str	r2, [r7, #116]	; 0x74
 800385e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003862:	f7fc fddf 	bl	8000424 <__aeabi_uldivmod>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	4613      	mov	r3, r2
 800386c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003870:	4b41      	ldr	r3, [pc, #260]	; (8003978 <HAL_RCC_GetSysClockFreq+0x354>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	3301      	adds	r3, #1
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003882:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003886:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800388a:	fbb2 f3f3 	udiv	r3, r2, r3
 800388e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003892:	e0eb      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003894:	4b38      	ldr	r3, [pc, #224]	; (8003978 <HAL_RCC_GetSysClockFreq+0x354>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800389c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038a0:	4b35      	ldr	r3, [pc, #212]	; (8003978 <HAL_RCC_GetSysClockFreq+0x354>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d06b      	beq.n	8003984 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ac:	4b32      	ldr	r3, [pc, #200]	; (8003978 <HAL_RCC_GetSysClockFreq+0x354>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	099b      	lsrs	r3, r3, #6
 80038b2:	2200      	movs	r2, #0
 80038b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80038b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038be:	663b      	str	r3, [r7, #96]	; 0x60
 80038c0:	2300      	movs	r3, #0
 80038c2:	667b      	str	r3, [r7, #100]	; 0x64
 80038c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80038c8:	4622      	mov	r2, r4
 80038ca:	462b      	mov	r3, r5
 80038cc:	f04f 0000 	mov.w	r0, #0
 80038d0:	f04f 0100 	mov.w	r1, #0
 80038d4:	0159      	lsls	r1, r3, #5
 80038d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038da:	0150      	lsls	r0, r2, #5
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4621      	mov	r1, r4
 80038e2:	1a51      	subs	r1, r2, r1
 80038e4:	61b9      	str	r1, [r7, #24]
 80038e6:	4629      	mov	r1, r5
 80038e8:	eb63 0301 	sbc.w	r3, r3, r1
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80038fa:	4659      	mov	r1, fp
 80038fc:	018b      	lsls	r3, r1, #6
 80038fe:	4651      	mov	r1, sl
 8003900:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003904:	4651      	mov	r1, sl
 8003906:	018a      	lsls	r2, r1, #6
 8003908:	4651      	mov	r1, sl
 800390a:	ebb2 0801 	subs.w	r8, r2, r1
 800390e:	4659      	mov	r1, fp
 8003910:	eb63 0901 	sbc.w	r9, r3, r1
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003920:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003924:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003928:	4690      	mov	r8, r2
 800392a:	4699      	mov	r9, r3
 800392c:	4623      	mov	r3, r4
 800392e:	eb18 0303 	adds.w	r3, r8, r3
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	462b      	mov	r3, r5
 8003936:	eb49 0303 	adc.w	r3, r9, r3
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003948:	4629      	mov	r1, r5
 800394a:	024b      	lsls	r3, r1, #9
 800394c:	4621      	mov	r1, r4
 800394e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003952:	4621      	mov	r1, r4
 8003954:	024a      	lsls	r2, r1, #9
 8003956:	4610      	mov	r0, r2
 8003958:	4619      	mov	r1, r3
 800395a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800395e:	2200      	movs	r2, #0
 8003960:	65bb      	str	r3, [r7, #88]	; 0x58
 8003962:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003964:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003968:	f7fc fd5c 	bl	8000424 <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4613      	mov	r3, r2
 8003972:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003976:	e065      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x420>
 8003978:	40023800 	.word	0x40023800
 800397c:	00f42400 	.word	0x00f42400
 8003980:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003984:	4b3d      	ldr	r3, [pc, #244]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x458>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	099b      	lsrs	r3, r3, #6
 800398a:	2200      	movs	r2, #0
 800398c:	4618      	mov	r0, r3
 800398e:	4611      	mov	r1, r2
 8003990:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003994:	653b      	str	r3, [r7, #80]	; 0x50
 8003996:	2300      	movs	r3, #0
 8003998:	657b      	str	r3, [r7, #84]	; 0x54
 800399a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800399e:	4642      	mov	r2, r8
 80039a0:	464b      	mov	r3, r9
 80039a2:	f04f 0000 	mov.w	r0, #0
 80039a6:	f04f 0100 	mov.w	r1, #0
 80039aa:	0159      	lsls	r1, r3, #5
 80039ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039b0:	0150      	lsls	r0, r2, #5
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4641      	mov	r1, r8
 80039b8:	1a51      	subs	r1, r2, r1
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	4649      	mov	r1, r9
 80039be:	eb63 0301 	sbc.w	r3, r3, r1
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80039d0:	4659      	mov	r1, fp
 80039d2:	018b      	lsls	r3, r1, #6
 80039d4:	4651      	mov	r1, sl
 80039d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039da:	4651      	mov	r1, sl
 80039dc:	018a      	lsls	r2, r1, #6
 80039de:	4651      	mov	r1, sl
 80039e0:	1a54      	subs	r4, r2, r1
 80039e2:	4659      	mov	r1, fp
 80039e4:	eb63 0501 	sbc.w	r5, r3, r1
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	00eb      	lsls	r3, r5, #3
 80039f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039f6:	00e2      	lsls	r2, r4, #3
 80039f8:	4614      	mov	r4, r2
 80039fa:	461d      	mov	r5, r3
 80039fc:	4643      	mov	r3, r8
 80039fe:	18e3      	adds	r3, r4, r3
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	464b      	mov	r3, r9
 8003a04:	eb45 0303 	adc.w	r3, r5, r3
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a16:	4629      	mov	r1, r5
 8003a18:	028b      	lsls	r3, r1, #10
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a20:	4621      	mov	r1, r4
 8003a22:	028a      	lsls	r2, r1, #10
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a30:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003a32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a36:	f7fc fcf5 	bl	8000424 <__aeabi_uldivmod>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4613      	mov	r3, r2
 8003a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003a44:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x458>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	0f1b      	lsrs	r3, r3, #28
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003a52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a62:	e003      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003a66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	37b8      	adds	r7, #184	; 0xb8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	00f42400 	.word	0x00f42400

08003a84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e28d      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8083 	beq.w	8003baa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003aa4:	4b94      	ldr	r3, [pc, #592]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d019      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ab0:	4b91      	ldr	r3, [pc, #580]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d106      	bne.n	8003aca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003abc:	4b8e      	ldr	r3, [pc, #568]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ac8:	d00c      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aca:	4b8b      	ldr	r3, [pc, #556]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ad2:	2b0c      	cmp	r3, #12
 8003ad4:	d112      	bne.n	8003afc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ad6:	4b88      	ldr	r3, [pc, #544]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ae2:	d10b      	bne.n	8003afc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae4:	4b84      	ldr	r3, [pc, #528]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d05b      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x124>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d157      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e25a      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b04:	d106      	bne.n	8003b14 <HAL_RCC_OscConfig+0x90>
 8003b06:	4b7c      	ldr	r3, [pc, #496]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a7b      	ldr	r2, [pc, #492]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	e01d      	b.n	8003b50 <HAL_RCC_OscConfig+0xcc>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b1c:	d10c      	bne.n	8003b38 <HAL_RCC_OscConfig+0xb4>
 8003b1e:	4b76      	ldr	r3, [pc, #472]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a75      	ldr	r2, [pc, #468]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	4b73      	ldr	r3, [pc, #460]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a72      	ldr	r2, [pc, #456]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e00b      	b.n	8003b50 <HAL_RCC_OscConfig+0xcc>
 8003b38:	4b6f      	ldr	r3, [pc, #444]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a6e      	ldr	r2, [pc, #440]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	4b6c      	ldr	r3, [pc, #432]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a6b      	ldr	r2, [pc, #428]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d013      	beq.n	8003b80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd ffe6 	bl	8001b28 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b60:	f7fd ffe2 	bl	8001b28 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	; 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e21f      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b72:	4b61      	ldr	r3, [pc, #388]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0xdc>
 8003b7e:	e014      	b.n	8003baa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fd ffd2 	bl	8001b28 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b88:	f7fd ffce 	bl	8001b28 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	; 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e20b      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9a:	4b57      	ldr	r3, [pc, #348]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x104>
 8003ba6:	e000      	b.n	8003baa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d06f      	beq.n	8003c96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003bb6:	4b50      	ldr	r3, [pc, #320]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d017      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003bc2:	4b4d      	ldr	r3, [pc, #308]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d105      	bne.n	8003bda <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003bce:	4b4a      	ldr	r3, [pc, #296]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bda:	4b47      	ldr	r3, [pc, #284]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003be2:	2b0c      	cmp	r3, #12
 8003be4:	d11c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be6:	4b44      	ldr	r3, [pc, #272]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d116      	bne.n	8003c20 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf2:	4b41      	ldr	r3, [pc, #260]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <HAL_RCC_OscConfig+0x186>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d001      	beq.n	8003c0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e1d3      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0a:	4b3b      	ldr	r3, [pc, #236]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4937      	ldr	r1, [pc, #220]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1e:	e03a      	b.n	8003c96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d020      	beq.n	8003c6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c28:	4b34      	ldr	r3, [pc, #208]	; (8003cfc <HAL_RCC_OscConfig+0x278>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2e:	f7fd ff7b 	bl	8001b28 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c36:	f7fd ff77 	bl	8001b28 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e1b4      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c48:	4b2b      	ldr	r3, [pc, #172]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c54:	4b28      	ldr	r3, [pc, #160]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4925      	ldr	r1, [pc, #148]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	600b      	str	r3, [r1, #0]
 8003c68:	e015      	b.n	8003c96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c6a:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <HAL_RCC_OscConfig+0x278>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fd ff5a 	bl	8001b28 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c78:	f7fd ff56 	bl	8001b28 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e193      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8a:	4b1b      	ldr	r3, [pc, #108]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d036      	beq.n	8003d10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d016      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003caa:	4b15      	ldr	r3, [pc, #84]	; (8003d00 <HAL_RCC_OscConfig+0x27c>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb0:	f7fd ff3a 	bl	8001b28 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb8:	f7fd ff36 	bl	8001b28 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e173      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cca:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <HAL_RCC_OscConfig+0x274>)
 8003ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x234>
 8003cd6:	e01b      	b.n	8003d10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <HAL_RCC_OscConfig+0x27c>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cde:	f7fd ff23 	bl	8001b28 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce4:	e00e      	b.n	8003d04 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce6:	f7fd ff1f 	bl	8001b28 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d907      	bls.n	8003d04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e15c      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	42470000 	.word	0x42470000
 8003d00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d04:	4b8a      	ldr	r3, [pc, #552]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1ea      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 8097 	beq.w	8003e4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d22:	4b83      	ldr	r3, [pc, #524]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10f      	bne.n	8003d4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	4b7f      	ldr	r3, [pc, #508]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	4a7e      	ldr	r2, [pc, #504]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d3e:	4b7c      	ldr	r3, [pc, #496]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4e:	4b79      	ldr	r3, [pc, #484]	; (8003f34 <HAL_RCC_OscConfig+0x4b0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d118      	bne.n	8003d8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d5a:	4b76      	ldr	r3, [pc, #472]	; (8003f34 <HAL_RCC_OscConfig+0x4b0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a75      	ldr	r2, [pc, #468]	; (8003f34 <HAL_RCC_OscConfig+0x4b0>)
 8003d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d66:	f7fd fedf 	bl	8001b28 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6e:	f7fd fedb 	bl	8001b28 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e118      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d80:	4b6c      	ldr	r3, [pc, #432]	; (8003f34 <HAL_RCC_OscConfig+0x4b0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d106      	bne.n	8003da2 <HAL_RCC_OscConfig+0x31e>
 8003d94:	4b66      	ldr	r3, [pc, #408]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	4a65      	ldr	r2, [pc, #404]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003da0:	e01c      	b.n	8003ddc <HAL_RCC_OscConfig+0x358>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b05      	cmp	r3, #5
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x340>
 8003daa:	4b61      	ldr	r3, [pc, #388]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	4a60      	ldr	r2, [pc, #384]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003db0:	f043 0304 	orr.w	r3, r3, #4
 8003db4:	6713      	str	r3, [r2, #112]	; 0x70
 8003db6:	4b5e      	ldr	r3, [pc, #376]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	4a5d      	ldr	r2, [pc, #372]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc2:	e00b      	b.n	8003ddc <HAL_RCC_OscConfig+0x358>
 8003dc4:	4b5a      	ldr	r3, [pc, #360]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	4a59      	ldr	r2, [pc, #356]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003dca:	f023 0301 	bic.w	r3, r3, #1
 8003dce:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd0:	4b57      	ldr	r3, [pc, #348]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	4a56      	ldr	r2, [pc, #344]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003dd6:	f023 0304 	bic.w	r3, r3, #4
 8003dda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d015      	beq.n	8003e10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de4:	f7fd fea0 	bl	8001b28 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dea:	e00a      	b.n	8003e02 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dec:	f7fd fe9c 	bl	8001b28 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e0d7      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e02:	4b4b      	ldr	r3, [pc, #300]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0ee      	beq.n	8003dec <HAL_RCC_OscConfig+0x368>
 8003e0e:	e014      	b.n	8003e3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e10:	f7fd fe8a 	bl	8001b28 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e18:	f7fd fe86 	bl	8001b28 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e0c1      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e2e:	4b40      	ldr	r3, [pc, #256]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1ee      	bne.n	8003e18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d105      	bne.n	8003e4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e40:	4b3b      	ldr	r3, [pc, #236]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	4a3a      	ldr	r2, [pc, #232]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80ad 	beq.w	8003fb0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e56:	4b36      	ldr	r3, [pc, #216]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d060      	beq.n	8003f24 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d145      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6a:	4b33      	ldr	r3, [pc, #204]	; (8003f38 <HAL_RCC_OscConfig+0x4b4>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7fd fe5a 	bl	8001b28 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e78:	f7fd fe56 	bl	8001b28 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e093      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8a:	4b29      	ldr	r3, [pc, #164]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69da      	ldr	r2, [r3, #28]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	019b      	lsls	r3, r3, #6
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eac:	085b      	lsrs	r3, r3, #1
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	041b      	lsls	r3, r3, #16
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	061b      	lsls	r3, r3, #24
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	071b      	lsls	r3, r3, #28
 8003ec2:	491b      	ldr	r1, [pc, #108]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <HAL_RCC_OscConfig+0x4b4>)
 8003eca:	2201      	movs	r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ece:	f7fd fe2b 	bl	8001b28 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed6:	f7fd fe27 	bl	8001b28 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e064      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee8:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0f0      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x452>
 8003ef4:	e05c      	b.n	8003fb0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef6:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <HAL_RCC_OscConfig+0x4b4>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fd fe14 	bl	8001b28 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f04:	f7fd fe10 	bl	8001b28 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e04d      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_RCC_OscConfig+0x4ac>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x480>
 8003f22:	e045      	b.n	8003fb0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d107      	bne.n	8003f3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e040      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40007000 	.word	0x40007000
 8003f38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f3c:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <HAL_RCC_OscConfig+0x538>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d030      	beq.n	8003fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d129      	bne.n	8003fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d122      	bne.n	8003fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d119      	bne.n	8003fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	085b      	lsrs	r3, r3, #1
 8003f84:	3b01      	subs	r3, #1
 8003f86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d10f      	bne.n	8003fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d107      	bne.n	8003fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800

08003fc0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d904      	bls.n	8003fe2 <HAL_SAI_InitProtocol+0x22>
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	3b03      	subs	r3, #3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d812      	bhi.n	8004006 <HAL_SAI_InitProtocol+0x46>
 8003fe0:	e008      	b.n	8003ff4 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f9dd 	bl	80043a8 <SAI_InitI2S>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff2:	e00b      	b.n	800400c <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fa82 	bl	8004504 <SAI_InitPCM>
 8004000:	4603      	mov	r3, r0
 8004002:	75fb      	strb	r3, [r7, #23]
      break;
 8004004:	e002      	b.n	800400c <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	75fb      	strb	r3, [r7, #23]
      break;
 800400a:	bf00      	nop
  }

  if (status == HAL_OK)
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d104      	bne.n	800401c <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f808 	bl	8004028 <HAL_SAI_Init>
 8004018:	4603      	mov	r3, r0
 800401a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800401c:	7dfb      	ldrb	r3, [r7, #23]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e10c      	b.n	8004264 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fd fbba 	bl	80017d8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 faff 	bl	8004670 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fba6 	bl	80047c4 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d030      	beq.n	80040e2 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 fbe3 	bl	800484c <SAI_GetInputClock>
 8004086:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	461a      	mov	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	025b      	lsls	r3, r3, #9
 800409a:	fbb2 f3f3 	udiv	r3, r2, r3
 800409e:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a72      	ldr	r2, [pc, #456]	; (800426c <HAL_SAI_Init+0x244>)
 80040a4:	fba2 2303 	umull	r2, r3, r2, r3
 80040a8:	08da      	lsrs	r2, r3, #3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 80040ae:	68f9      	ldr	r1, [r7, #12]
 80040b0:	4b6e      	ldr	r3, [pc, #440]	; (800426c <HAL_SAI_Init+0x244>)
 80040b2:	fba3 2301 	umull	r2, r3, r3, r1
 80040b6:	08da      	lsrs	r2, r3, #3
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	1aca      	subs	r2, r1, r3
 80040c2:	2a08      	cmp	r2, #8
 80040c4:	d904      	bls.n	80040d0 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d104      	bne.n	80040e2 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	085a      	lsrs	r2, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_SAI_Init+0xca>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d109      	bne.n	8004106 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_SAI_Init+0xd6>
 80040fa:	2300      	movs	r3, #0
 80040fc:	e001      	b.n	8004102 <HAL_SAI_Init+0xda>
 80040fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	e008      	b.n	8004118 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	2b01      	cmp	r3, #1
 800410c:	d102      	bne.n	8004114 <HAL_SAI_Init+0xec>
 800410e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004112:	e000      	b.n	8004116 <HAL_SAI_Init+0xee>
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b03      	cmp	r3, #3
 800411e:	d811      	bhi.n	8004144 <HAL_SAI_Init+0x11c>
 8004120:	2b02      	cmp	r3, #2
 8004122:	d20b      	bcs.n	800413c <HAL_SAI_Init+0x114>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <HAL_SAI_Init+0x106>
 8004128:	2b01      	cmp	r3, #1
 800412a:	d003      	beq.n	8004134 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 800412c:	e00a      	b.n	8004144 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	613b      	str	r3, [r7, #16]
    break;
 8004132:	e008      	b.n	8004146 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004138:	613b      	str	r3, [r7, #16]
    break;
 800413a:	e004      	b.n	8004146 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800413c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004140:	613b      	str	r3, [r7, #16]
    break;
 8004142:	e000      	b.n	8004146 <HAL_SAI_Init+0x11e>
      break;
 8004144:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6819      	ldr	r1, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4b47      	ldr	r3, [pc, #284]	; (8004270 <HAL_SAI_Init+0x248>)
 8004152:	400b      	ands	r3, r1
 8004154:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6819      	ldr	r1, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004164:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800416a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004170:	431a      	orrs	r2, r3
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800417e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800418a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	051b      	lsls	r3, r3, #20
 8004192:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80041aa:	f023 030f 	bic.w	r3, r3, #15
 80041ae:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6859      	ldr	r1, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6899      	ldr	r1, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4b26      	ldr	r3, [pc, #152]	; (8004274 <HAL_SAI_Init+0x24c>)
 80041da:	400b      	ands	r3, r1
 80041dc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6899      	ldr	r1, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80041ee:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 80041f4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 80041fa:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004200:	3b01      	subs	r3, #1
 8004202:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004204:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68d9      	ldr	r1, [r3, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	f24f 0320 	movw	r3, #61472	; 0xf020
 800421c:	400b      	ands	r3, r1
 800421e:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68d9      	ldr	r1, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422e:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004234:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8004236:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423c:	3b01      	subs	r3, #1
 800423e:	021b      	lsls	r3, r3, #8
 8004240:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	cccccccd 	.word	0xcccccccd
 8004270:	ff05c010 	.word	0xff05c010
 8004274:	fff88000 	.word	0xfff88000

08004278 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	4613      	mov	r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]
  if ((pData == NULL) || (Size == 0))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_SAI_Receive_DMA+0x1a>
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e074      	b.n	8004380 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d16d      	bne.n	800437e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_SAI_Receive_DMA+0x38>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e067      	b.n	8004380 <HAL_SAI_Receive_DMA+0x108>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hsai->pBuffPtr = pData;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	669a      	str	r2, [r3, #104]	; 0x68
    hsai->XferSize = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	88fa      	ldrh	r2, [r7, #6]
 80042c2:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    hsai->XferCount = Size;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	88fa      	ldrh	r2, [r7, #6]
 80042ca:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2222      	movs	r2, #34	; 0x22
 80042da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e2:	4a29      	ldr	r2, [pc, #164]	; (8004388 <HAL_SAI_Receive_DMA+0x110>)
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ea:	4a28      	ldr	r2, [pc, #160]	; (800438c <HAL_SAI_Receive_DMA+0x114>)
 80042ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f2:	4a27      	ldr	r2, [pc, #156]	; (8004390 <HAL_SAI_Receive_DMA+0x118>)
 80042f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fa:	2200      	movs	r2, #0
 80042fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	331c      	adds	r3, #28
 8004308:	4619      	mov	r1, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800430e:	461a      	mov	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8004316:	f7fd fdf7 	bl	8001f08 <HAL_DMA_Start_IT>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return  HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e029      	b.n	8004380 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800432c:	2100      	movs	r1, #0
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f968 	bl	8004604 <SAI_InterruptFlag>
 8004334:	4601      	mov	r1, r0
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004352:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d107      	bne.n	8004372 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004370:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	08004741 	.word	0x08004741
 800438c:	080046e1 	.word	0x080046e1
 8004390:	0800475d 	.word	0x0800475d

08004394 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <SAI_InitI2S+0x2a>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d103      	bne.n	80043da <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40
 80043d8:	e002      	b.n	80043e0 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043ee:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e076      	b.n	80044f8 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d107      	bne.n	8004420 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800441c:	655a      	str	r2, [r3, #84]	; 0x54
 800441e:	e006      	b.n	800442e <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004426:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Frame definition */
  switch (datasize)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b03      	cmp	r3, #3
 8004432:	d84f      	bhi.n	80044d4 <SAI_InitI2S+0x12c>
 8004434:	a201      	add	r2, pc, #4	; (adr r2, 800443c <SAI_InitI2S+0x94>)
 8004436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443a:	bf00      	nop
 800443c:	0800444d 	.word	0x0800444d
 8004440:	0800446f 	.word	0x0800446f
 8004444:	08004491 	.word	0x08004491
 8004448:	080044b3 	.word	0x080044b3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2280      	movs	r2, #128	; 0x80
 8004450:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	011a      	lsls	r2, r3, #4
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2240      	movs	r2, #64	; 0x40
 800446a:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800446c:	e034      	b.n	80044d8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2280      	movs	r2, #128	; 0x80
 8004472:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	019a      	lsls	r2, r3, #6
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2280      	movs	r2, #128	; 0x80
 800448c:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800448e:	e023      	b.n	80044d8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	22c0      	movs	r2, #192	; 0xc0
 8004494:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	085b      	lsrs	r3, r3, #1
 800449a:	019a      	lsls	r2, r3, #6
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	085b      	lsrs	r3, r3, #1
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2280      	movs	r2, #128	; 0x80
 80044ae:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80044b0:	e012      	b.n	80044d8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	22e0      	movs	r2, #224	; 0xe0
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	019a      	lsls	r2, r3, #6
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2280      	movs	r2, #128	; 0x80
 80044d0:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80044d2:	e001      	b.n	80044d8 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e00f      	b.n	80044f8 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d10b      	bne.n	80044f6 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d102      	bne.n	80044ea <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2210      	movs	r2, #16
 80044e8:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d102      	bne.n	80044f6 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2208      	movs	r2, #8
 80044f4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <SAI_InitPCM+0x2a>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d103      	bne.n	8004536 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2201      	movs	r2, #1
 8004532:	641a      	str	r2, [r3, #64]	; 0x40
 8004534:	e002      	b.n	800453c <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004548:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004550:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004564:	665a      	str	r2, [r3, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b04      	cmp	r3, #4
 800456a:	d103      	bne.n	8004574 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	649a      	str	r2, [r3, #72]	; 0x48
 8004572:	e002      	b.n	800457a <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	220d      	movs	r2, #13
 8004578:	649a      	str	r2, [r3, #72]	; 0x48
  }

  switch (datasize)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b03      	cmp	r3, #3
 800457e:	d837      	bhi.n	80045f0 <SAI_InitPCM+0xec>
 8004580:	a201      	add	r2, pc, #4	; (adr r2, 8004588 <SAI_InitPCM+0x84>)
 8004582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004586:	bf00      	nop
 8004588:	08004599 	.word	0x08004599
 800458c:	080045af 	.word	0x080045af
 8004590:	080045c5 	.word	0x080045c5
 8004594:	080045db 	.word	0x080045db
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2280      	movs	r2, #128	; 0x80
 800459c:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	011a      	lsls	r2, r3, #4
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2240      	movs	r2, #64	; 0x40
 80045aa:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80045ac:	e022      	b.n	80045f4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2280      	movs	r2, #128	; 0x80
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2280      	movs	r2, #128	; 0x80
 80045c0:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80045c2:	e017      	b.n	80045f4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	22c0      	movs	r2, #192	; 0xc0
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2280      	movs	r2, #128	; 0x80
 80045d6:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80045d8:	e00c      	b.n	80045f4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	22e0      	movs	r2, #224	; 0xe0
 80045de:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2280      	movs	r2, #128	; 0x80
 80045ec:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80045ee:	e001      	b.n	80045f4 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop

08004604 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800460e:	2301      	movs	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d103      	bne.n	8004620 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f043 0308 	orr.w	r3, r3, #8
 800461e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004624:	2b08      	cmp	r3, #8
 8004626:	d10b      	bne.n	8004640 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800462c:	2b03      	cmp	r3, #3
 800462e:	d003      	beq.n	8004638 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d103      	bne.n	8004640 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f043 0310 	orr.w	r3, r3, #16
 800463e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d003      	beq.n	8004650 <SAI_InterruptFlag+0x4c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d104      	bne.n	800465a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	e003      	b.n	8004662 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f043 0304 	orr.w	r3, r3, #4
 8004660:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8004662:	68fb      	ldr	r3, [r7, #12]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004678:	4b17      	ldr	r3, [pc, #92]	; (80046d8 <SAI_Disable+0x68>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a17      	ldr	r2, [pc, #92]	; (80046dc <SAI_Disable+0x6c>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	0b1b      	lsrs	r3, r3, #12
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800469a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1e5a      	subs	r2, r3, #1
 80046a0:	60fa      	str	r2, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	72fb      	strb	r3, [r7, #11]
      break;
 80046ba:	e006      	b.n	80046ca <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e8      	bne.n	800469c <SAI_Disable+0x2c>

  return status;
 80046ca:	7afb      	ldrb	r3, [r7, #11]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	20000018 	.word	0x20000018
 80046dc:	95cbec1b 	.word	0x95cbec1b

080046e0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f6:	d01c      	beq.n	8004732 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004706:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004710:	2100      	movs	r1, #0
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7ff ff76 	bl	8004604 <SAI_InterruptFlag>
 8004718:	4603      	mov	r3, r0
 800471a:	43d9      	mvns	r1, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	400a      	ands	r2, r1
 8004728:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f7fc fd72 	bl	800121c <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004738:	bf00      	nop
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f7fc fd54 	bl	80011fc <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004770:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004780:	2b01      	cmp	r3, #1
 8004782:	d004      	beq.n	800478e <SAI_DMAError+0x32>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	2b01      	cmp	r3, #1
 800478c:	d112      	bne.n	80047b4 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800479c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f7ff ff66 	bl	8004670 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f7ff fded 	bl	8004394 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d00c      	beq.n	80047ee <SAI_BlockSynchroConfig+0x2a>
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d80d      	bhi.n	80047f4 <SAI_BlockSynchroConfig+0x30>
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <SAI_BlockSynchroConfig+0x1e>
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d003      	beq.n	80047e8 <SAI_BlockSynchroConfig+0x24>
 80047e0:	e008      	b.n	80047f4 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	60fb      	str	r3, [r7, #12]
      break;
 80047e6:	e008      	b.n	80047fa <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80047e8:	2310      	movs	r3, #16
 80047ea:	60fb      	str	r3, [r7, #12]
      break;
 80047ec:	e005      	b.n	80047fa <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80047ee:	2320      	movs	r3, #32
 80047f0:	60fb      	str	r3, [r7, #12]
      break;
 80047f2:	e002      	b.n	80047fa <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
      break;
 80047f8:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b03      	cmp	r3, #3
 8004800:	d103      	bne.n	800480a <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f043 0301 	orr.w	r3, r3, #1
 8004808:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a0b      	ldr	r2, [pc, #44]	; (800483c <SAI_BlockSynchroConfig+0x78>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d004      	beq.n	800481e <SAI_BlockSynchroConfig+0x5a>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a09      	ldr	r2, [pc, #36]	; (8004840 <SAI_BlockSynchroConfig+0x7c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d103      	bne.n	8004826 <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 800481e:	4a09      	ldr	r2, [pc, #36]	; (8004844 <SAI_BlockSynchroConfig+0x80>)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	e003      	b.n	800482e <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004826:	4a08      	ldr	r2, [pc, #32]	; (8004848 <SAI_BlockSynchroConfig+0x84>)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 800482c:	bf00      	nop
 800482e:	bf00      	nop
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40015804 	.word	0x40015804
 8004840:	40015824 	.word	0x40015824
 8004844:	40015800 	.word	0x40015800
 8004848:	40015c00 	.word	0x40015c00

0800484c <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a0a      	ldr	r2, [pc, #40]	; (8004888 <SAI_GetInputClock+0x3c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d004      	beq.n	800486c <SAI_GetInputClock+0x20>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a09      	ldr	r2, [pc, #36]	; (800488c <SAI_GetInputClock+0x40>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d104      	bne.n	8004876 <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800486c:	2004      	movs	r0, #4
 800486e:	f7fe fc91 	bl	8003194 <HAL_RCCEx_GetPeriphCLKFreq>
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	e003      	b.n	800487e <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004876:	2008      	movs	r0, #8
 8004878:	f7fe fc8c 	bl	8003194 <HAL_RCCEx_GetPeriphCLKFreq>
 800487c:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 800487e:	68fb      	ldr	r3, [r7, #12]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40015804 	.word	0x40015804
 800488c:	40015824 	.word	0x40015824

08004890 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e07b      	b.n	800499a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d108      	bne.n	80048bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048b2:	d009      	beq.n	80048c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	61da      	str	r2, [r3, #28]
 80048ba:	e005      	b.n	80048c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fc fe2a 	bl	800153c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494c:	ea42 0103 	orr.w	r1, r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	0c1b      	lsrs	r3, r3, #16
 8004966:	f003 0104 	and.w	r1, r3, #4
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	f003 0210 	and.w	r2, r3, #16
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69da      	ldr	r2, [r3, #28]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004988:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b088      	sub	sp, #32
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	603b      	str	r3, [r7, #0]
 80049ae:	4613      	mov	r3, r2
 80049b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_SPI_Transmit+0x22>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e126      	b.n	8004c12 <HAL_SPI_Transmit+0x270>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049cc:	f7fd f8ac 	bl	8001b28 <HAL_GetTick>
 80049d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d002      	beq.n	80049e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049e2:	2302      	movs	r3, #2
 80049e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049e6:	e10b      	b.n	8004c00 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <HAL_SPI_Transmit+0x52>
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049f8:	e102      	b.n	8004c00 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2203      	movs	r2, #3
 80049fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	88fa      	ldrh	r2, [r7, #6]
 8004a12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	88fa      	ldrh	r2, [r7, #6]
 8004a18:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a40:	d10f      	bne.n	8004a62 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b40      	cmp	r3, #64	; 0x40
 8004a6e:	d007      	beq.n	8004a80 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a88:	d14b      	bne.n	8004b22 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_SPI_Transmit+0xf6>
 8004a92:	8afb      	ldrh	r3, [r7, #22]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d13e      	bne.n	8004b16 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	881a      	ldrh	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	1c9a      	adds	r2, r3, #2
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004abc:	e02b      	b.n	8004b16 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d112      	bne.n	8004af2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	881a      	ldrh	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	1c9a      	adds	r2, r3, #2
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	86da      	strh	r2, [r3, #54]	; 0x36
 8004af0:	e011      	b.n	8004b16 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004af2:	f7fd f819 	bl	8001b28 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d803      	bhi.n	8004b0a <HAL_SPI_Transmit+0x168>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b08:	d102      	bne.n	8004b10 <HAL_SPI_Transmit+0x16e>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d102      	bne.n	8004b16 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b14:	e074      	b.n	8004c00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1ce      	bne.n	8004abe <HAL_SPI_Transmit+0x11c>
 8004b20:	e04c      	b.n	8004bbc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <HAL_SPI_Transmit+0x18e>
 8004b2a:	8afb      	ldrh	r3, [r7, #22]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d140      	bne.n	8004bb2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	7812      	ldrb	r2, [r2, #0]
 8004b3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b56:	e02c      	b.n	8004bb2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d113      	bne.n	8004b8e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	330c      	adds	r3, #12
 8004b70:	7812      	ldrb	r2, [r2, #0]
 8004b72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b8c:	e011      	b.n	8004bb2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b8e:	f7fc ffcb 	bl	8001b28 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d803      	bhi.n	8004ba6 <HAL_SPI_Transmit+0x204>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ba4:	d102      	bne.n	8004bac <HAL_SPI_Transmit+0x20a>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bb0:	e026      	b.n	8004c00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1cd      	bne.n	8004b58 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	6839      	ldr	r1, [r7, #0]
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 fbcb 	bl	800535c <SPI_EndRxTxTransaction>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10a      	bne.n	8004bf0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e000      	b.n	8004c00 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004bfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c10:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b088      	sub	sp, #32
 8004c1e:	af02      	add	r7, sp, #8
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	4613      	mov	r3, r2
 8004c28:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c36:	d112      	bne.n	8004c5e <HAL_SPI_Receive+0x44>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10e      	bne.n	8004c5e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2204      	movs	r2, #4
 8004c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c48:	88fa      	ldrh	r2, [r7, #6]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f8f1 	bl	8004e3c <HAL_SPI_TransmitReceive>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	e0ea      	b.n	8004e34 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_SPI_Receive+0x52>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e0e3      	b.n	8004e34 <HAL_SPI_Receive+0x21a>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c74:	f7fc ff58 	bl	8001b28 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d002      	beq.n	8004c8c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c86:	2302      	movs	r3, #2
 8004c88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c8a:	e0ca      	b.n	8004e22 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <HAL_SPI_Receive+0x7e>
 8004c92:	88fb      	ldrh	r3, [r7, #6]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d102      	bne.n	8004c9e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c9c:	e0c1      	b.n	8004e22 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	88fa      	ldrh	r2, [r7, #6]
 8004cb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	88fa      	ldrh	r2, [r7, #6]
 8004cbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce4:	d10f      	bne.n	8004d06 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b40      	cmp	r3, #64	; 0x40
 8004d12:	d007      	beq.n	8004d24 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d162      	bne.n	8004df2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d2c:	e02e      	b.n	8004d8c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d115      	bne.n	8004d68 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f103 020c 	add.w	r2, r3, #12
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	7812      	ldrb	r2, [r2, #0]
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d66:	e011      	b.n	8004d8c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d68:	f7fc fede 	bl	8001b28 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d803      	bhi.n	8004d80 <HAL_SPI_Receive+0x166>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d7e:	d102      	bne.n	8004d86 <HAL_SPI_Receive+0x16c>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d8a:	e04a      	b.n	8004e22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1cb      	bne.n	8004d2e <HAL_SPI_Receive+0x114>
 8004d96:	e031      	b.n	8004dfc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d113      	bne.n	8004dce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	b292      	uxth	r2, r2
 8004db2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	1c9a      	adds	r2, r3, #2
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dcc:	e011      	b.n	8004df2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dce:	f7fc feab 	bl	8001b28 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d803      	bhi.n	8004de6 <HAL_SPI_Receive+0x1cc>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004de4:	d102      	bne.n	8004dec <HAL_SPI_Receive+0x1d2>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004df0:	e017      	b.n	8004e22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1cd      	bne.n	8004d98 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	6839      	ldr	r1, [r7, #0]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fa45 	bl	8005290 <SPI_EndRxTransaction>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
 8004e1e:	e000      	b.n	8004e22 <HAL_SPI_Receive+0x208>
  }

error :
 8004e20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08c      	sub	sp, #48	; 0x30
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_SPI_TransmitReceive+0x26>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e18a      	b.n	8005178 <HAL_SPI_TransmitReceive+0x33c>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e6a:	f7fc fe5d 	bl	8001b28 <HAL_GetTick>
 8004e6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e80:	887b      	ldrh	r3, [r7, #2]
 8004e82:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d00f      	beq.n	8004eac <HAL_SPI_TransmitReceive+0x70>
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e92:	d107      	bne.n	8004ea4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d103      	bne.n	8004ea4 <HAL_SPI_TransmitReceive+0x68>
 8004e9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d003      	beq.n	8004eac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004eaa:	e15b      	b.n	8005164 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <HAL_SPI_TransmitReceive+0x82>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_SPI_TransmitReceive+0x82>
 8004eb8:	887b      	ldrh	r3, [r7, #2]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d103      	bne.n	8004ec6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ec4:	e14e      	b.n	8005164 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d003      	beq.n	8004eda <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2205      	movs	r2, #5
 8004ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	887a      	ldrh	r2, [r7, #2]
 8004eea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	887a      	ldrh	r2, [r7, #2]
 8004ef0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	887a      	ldrh	r2, [r7, #2]
 8004efc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	887a      	ldrh	r2, [r7, #2]
 8004f02:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b40      	cmp	r3, #64	; 0x40
 8004f1c:	d007      	beq.n	8004f2e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f36:	d178      	bne.n	800502a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <HAL_SPI_TransmitReceive+0x10a>
 8004f40:	8b7b      	ldrh	r3, [r7, #26]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d166      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	881a      	ldrh	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	1c9a      	adds	r2, r3, #2
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f6a:	e053      	b.n	8005014 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d11b      	bne.n	8004fb2 <HAL_SPI_TransmitReceive+0x176>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d016      	beq.n	8004fb2 <HAL_SPI_TransmitReceive+0x176>
 8004f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d113      	bne.n	8004fb2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	881a      	ldrh	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	1c9a      	adds	r2, r3, #2
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d119      	bne.n	8004ff4 <HAL_SPI_TransmitReceive+0x1b8>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d014      	beq.n	8004ff4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	b292      	uxth	r2, r2
 8004fd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	1c9a      	adds	r2, r3, #2
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ff4:	f7fc fd98 	bl	8001b28 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005000:	429a      	cmp	r2, r3
 8005002:	d807      	bhi.n	8005014 <HAL_SPI_TransmitReceive+0x1d8>
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800500a:	d003      	beq.n	8005014 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005012:	e0a7      	b.n	8005164 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1a6      	bne.n	8004f6c <HAL_SPI_TransmitReceive+0x130>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1a1      	bne.n	8004f6c <HAL_SPI_TransmitReceive+0x130>
 8005028:	e07c      	b.n	8005124 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <HAL_SPI_TransmitReceive+0x1fc>
 8005032:	8b7b      	ldrh	r3, [r7, #26]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d16b      	bne.n	8005110 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	7812      	ldrb	r2, [r2, #0]
 8005044:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800505e:	e057      	b.n	8005110 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b02      	cmp	r3, #2
 800506c:	d11c      	bne.n	80050a8 <HAL_SPI_TransmitReceive+0x26c>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d017      	beq.n	80050a8 <HAL_SPI_TransmitReceive+0x26c>
 8005078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507a:	2b01      	cmp	r3, #1
 800507c:	d114      	bne.n	80050a8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	330c      	adds	r3, #12
 8005088:	7812      	ldrb	r2, [r2, #0]
 800508a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d119      	bne.n	80050ea <HAL_SPI_TransmitReceive+0x2ae>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d014      	beq.n	80050ea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050e6:	2301      	movs	r3, #1
 80050e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050ea:	f7fc fd1d 	bl	8001b28 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d803      	bhi.n	8005102 <HAL_SPI_TransmitReceive+0x2c6>
 80050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005100:	d102      	bne.n	8005108 <HAL_SPI_TransmitReceive+0x2cc>
 8005102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005104:	2b00      	cmp	r3, #0
 8005106:	d103      	bne.n	8005110 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800510e:	e029      	b.n	8005164 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1a2      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x224>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d19d      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005126:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f917 	bl	800535c <SPI_EndRxTxTransaction>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d006      	beq.n	8005142 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005140:	e010      	b.n	8005164 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10b      	bne.n	8005162 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	e000      	b.n	8005164 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005162:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005174:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005178:	4618      	mov	r0, r3
 800517a:	3730      	adds	r7, #48	; 0x30
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005190:	f7fc fcca 	bl	8001b28 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	1a9b      	subs	r3, r3, r2
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	4413      	add	r3, r2
 800519e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051a0:	f7fc fcc2 	bl	8001b28 <HAL_GetTick>
 80051a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051a6:	4b39      	ldr	r3, [pc, #228]	; (800528c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	015b      	lsls	r3, r3, #5
 80051ac:	0d1b      	lsrs	r3, r3, #20
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	fb02 f303 	mul.w	r3, r2, r3
 80051b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051b6:	e054      	b.n	8005262 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051be:	d050      	beq.n	8005262 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051c0:	f7fc fcb2 	bl	8001b28 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d902      	bls.n	80051d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d13d      	bne.n	8005252 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ee:	d111      	bne.n	8005214 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f8:	d004      	beq.n	8005204 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005202:	d107      	bne.n	8005214 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005212:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800521c:	d10f      	bne.n	800523e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800523c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e017      	b.n	8005282 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	3b01      	subs	r3, #1
 8005260:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4013      	ands	r3, r2
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	bf0c      	ite	eq
 8005272:	2301      	moveq	r3, #1
 8005274:	2300      	movne	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	461a      	mov	r2, r3
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	429a      	cmp	r2, r3
 800527e:	d19b      	bne.n	80051b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000018 	.word	0x20000018

08005290 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af02      	add	r7, sp, #8
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052a4:	d111      	bne.n	80052ca <SPI_EndRxTransaction+0x3a>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ae:	d004      	beq.n	80052ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b8:	d107      	bne.n	80052ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052d2:	d12a      	bne.n	800532a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052dc:	d012      	beq.n	8005304 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2200      	movs	r2, #0
 80052e6:	2180      	movs	r1, #128	; 0x80
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f7ff ff49 	bl	8005180 <SPI_WaitFlagStateUntilTimeout>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d02d      	beq.n	8005350 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f8:	f043 0220 	orr.w	r2, r3, #32
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e026      	b.n	8005352 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2200      	movs	r2, #0
 800530c:	2101      	movs	r1, #1
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7ff ff36 	bl	8005180 <SPI_WaitFlagStateUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d01a      	beq.n	8005350 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531e:	f043 0220 	orr.w	r2, r3, #32
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e013      	b.n	8005352 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2200      	movs	r2, #0
 8005332:	2101      	movs	r1, #1
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7ff ff23 	bl	8005180 <SPI_WaitFlagStateUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d007      	beq.n	8005350 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005344:	f043 0220 	orr.w	r2, r3, #32
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e000      	b.n	8005352 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af02      	add	r7, sp, #8
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005368:	4b1b      	ldr	r3, [pc, #108]	; (80053d8 <SPI_EndRxTxTransaction+0x7c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a1b      	ldr	r2, [pc, #108]	; (80053dc <SPI_EndRxTxTransaction+0x80>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	0d5b      	lsrs	r3, r3, #21
 8005374:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005378:	fb02 f303 	mul.w	r3, r2, r3
 800537c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005386:	d112      	bne.n	80053ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2200      	movs	r2, #0
 8005390:	2180      	movs	r1, #128	; 0x80
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f7ff fef4 	bl	8005180 <SPI_WaitFlagStateUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d016      	beq.n	80053cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a2:	f043 0220 	orr.w	r2, r3, #32
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e00f      	b.n	80053ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c4:	2b80      	cmp	r3, #128	; 0x80
 80053c6:	d0f2      	beq.n	80053ae <SPI_EndRxTxTransaction+0x52>
 80053c8:	e000      	b.n	80053cc <SPI_EndRxTxTransaction+0x70>
        break;
 80053ca:	bf00      	nop
  }

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000018 	.word	0x20000018
 80053dc:	165e9f81 	.word	0x165e9f81

080053e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e041      	b.n	8005476 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fc f8e0 	bl	80015cc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3304      	adds	r3, #4
 800541c:	4619      	mov	r1, r3
 800541e:	4610      	mov	r0, r2
 8005420:	f000 fb22 	bl	8005a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d104      	bne.n	800549e <HAL_TIM_IC_Start_IT+0x1e>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800549a:	b2db      	uxtb	r3, r3
 800549c:	e013      	b.n	80054c6 <HAL_TIM_IC_Start_IT+0x46>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_IC_Start_IT+0x2e>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	e00b      	b.n	80054c6 <HAL_TIM_IC_Start_IT+0x46>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d104      	bne.n	80054be <HAL_TIM_IC_Start_IT+0x3e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	e003      	b.n	80054c6 <HAL_TIM_IC_Start_IT+0x46>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d104      	bne.n	80054d8 <HAL_TIM_IC_Start_IT+0x58>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	e013      	b.n	8005500 <HAL_TIM_IC_Start_IT+0x80>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d104      	bne.n	80054e8 <HAL_TIM_IC_Start_IT+0x68>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	e00b      	b.n	8005500 <HAL_TIM_IC_Start_IT+0x80>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b08      	cmp	r3, #8
 80054ec:	d104      	bne.n	80054f8 <HAL_TIM_IC_Start_IT+0x78>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	e003      	b.n	8005500 <HAL_TIM_IC_Start_IT+0x80>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005502:	7bbb      	ldrb	r3, [r7, #14]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d102      	bne.n	800550e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005508:	7b7b      	ldrb	r3, [r7, #13]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d001      	beq.n	8005512 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e0cc      	b.n	80056ac <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d104      	bne.n	8005522 <HAL_TIM_IC_Start_IT+0xa2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005520:	e013      	b.n	800554a <HAL_TIM_IC_Start_IT+0xca>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b04      	cmp	r3, #4
 8005526:	d104      	bne.n	8005532 <HAL_TIM_IC_Start_IT+0xb2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005530:	e00b      	b.n	800554a <HAL_TIM_IC_Start_IT+0xca>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b08      	cmp	r3, #8
 8005536:	d104      	bne.n	8005542 <HAL_TIM_IC_Start_IT+0xc2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005540:	e003      	b.n	800554a <HAL_TIM_IC_Start_IT+0xca>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2202      	movs	r2, #2
 8005546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d104      	bne.n	800555a <HAL_TIM_IC_Start_IT+0xda>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005558:	e013      	b.n	8005582 <HAL_TIM_IC_Start_IT+0x102>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b04      	cmp	r3, #4
 800555e:	d104      	bne.n	800556a <HAL_TIM_IC_Start_IT+0xea>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005568:	e00b      	b.n	8005582 <HAL_TIM_IC_Start_IT+0x102>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b08      	cmp	r3, #8
 800556e:	d104      	bne.n	800557a <HAL_TIM_IC_Start_IT+0xfa>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005578:	e003      	b.n	8005582 <HAL_TIM_IC_Start_IT+0x102>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2202      	movs	r2, #2
 800557e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b0c      	cmp	r3, #12
 8005586:	d841      	bhi.n	800560c <HAL_TIM_IC_Start_IT+0x18c>
 8005588:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <HAL_TIM_IC_Start_IT+0x110>)
 800558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558e:	bf00      	nop
 8005590:	080055c5 	.word	0x080055c5
 8005594:	0800560d 	.word	0x0800560d
 8005598:	0800560d 	.word	0x0800560d
 800559c:	0800560d 	.word	0x0800560d
 80055a0:	080055d7 	.word	0x080055d7
 80055a4:	0800560d 	.word	0x0800560d
 80055a8:	0800560d 	.word	0x0800560d
 80055ac:	0800560d 	.word	0x0800560d
 80055b0:	080055e9 	.word	0x080055e9
 80055b4:	0800560d 	.word	0x0800560d
 80055b8:	0800560d 	.word	0x0800560d
 80055bc:	0800560d 	.word	0x0800560d
 80055c0:	080055fb 	.word	0x080055fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0202 	orr.w	r2, r2, #2
 80055d2:	60da      	str	r2, [r3, #12]
      break;
 80055d4:	e01d      	b.n	8005612 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0204 	orr.w	r2, r2, #4
 80055e4:	60da      	str	r2, [r3, #12]
      break;
 80055e6:	e014      	b.n	8005612 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0208 	orr.w	r2, r2, #8
 80055f6:	60da      	str	r2, [r3, #12]
      break;
 80055f8:	e00b      	b.n	8005612 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0210 	orr.w	r2, r2, #16
 8005608:	60da      	str	r2, [r3, #12]
      break;
 800560a:	e002      	b.n	8005612 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	73fb      	strb	r3, [r7, #15]
      break;
 8005610:	bf00      	nop
  }

  if (status == HAL_OK)
 8005612:	7bfb      	ldrb	r3, [r7, #15]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d148      	bne.n	80056aa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2201      	movs	r2, #1
 800561e:	6839      	ldr	r1, [r7, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fbeb 	bl	8005dfc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a22      	ldr	r2, [pc, #136]	; (80056b4 <HAL_TIM_IC_Start_IT+0x234>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d022      	beq.n	8005676 <HAL_TIM_IC_Start_IT+0x1f6>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005638:	d01d      	beq.n	8005676 <HAL_TIM_IC_Start_IT+0x1f6>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a1e      	ldr	r2, [pc, #120]	; (80056b8 <HAL_TIM_IC_Start_IT+0x238>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d018      	beq.n	8005676 <HAL_TIM_IC_Start_IT+0x1f6>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a1c      	ldr	r2, [pc, #112]	; (80056bc <HAL_TIM_IC_Start_IT+0x23c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d013      	beq.n	8005676 <HAL_TIM_IC_Start_IT+0x1f6>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1b      	ldr	r2, [pc, #108]	; (80056c0 <HAL_TIM_IC_Start_IT+0x240>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00e      	beq.n	8005676 <HAL_TIM_IC_Start_IT+0x1f6>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a19      	ldr	r2, [pc, #100]	; (80056c4 <HAL_TIM_IC_Start_IT+0x244>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d009      	beq.n	8005676 <HAL_TIM_IC_Start_IT+0x1f6>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a18      	ldr	r2, [pc, #96]	; (80056c8 <HAL_TIM_IC_Start_IT+0x248>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d004      	beq.n	8005676 <HAL_TIM_IC_Start_IT+0x1f6>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a16      	ldr	r2, [pc, #88]	; (80056cc <HAL_TIM_IC_Start_IT+0x24c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d111      	bne.n	800569a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b06      	cmp	r3, #6
 8005686:	d010      	beq.n	80056aa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005698:	e007      	b.n	80056aa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0201 	orr.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40010000 	.word	0x40010000
 80056b8:	40000400 	.word	0x40000400
 80056bc:	40000800 	.word	0x40000800
 80056c0:	40000c00 	.word	0x40000c00
 80056c4:	40010400 	.word	0x40010400
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40001800 	.word	0x40001800

080056d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d122      	bne.n	800572c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d11b      	bne.n	800572c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0202 	mvn.w	r2, #2
 80056fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	f003 0303 	and.w	r3, r3, #3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fb fa65 	bl	8000be2 <HAL_TIM_IC_CaptureCallback>
 8005718:	e005      	b.n	8005726 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f986 	bl	8005a2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f98d 	bl	8005a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 0304 	and.w	r3, r3, #4
 8005736:	2b04      	cmp	r3, #4
 8005738:	d122      	bne.n	8005780 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b04      	cmp	r3, #4
 8005746:	d11b      	bne.n	8005780 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0204 	mvn.w	r2, #4
 8005750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2202      	movs	r2, #2
 8005756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fb fa3b 	bl	8000be2 <HAL_TIM_IC_CaptureCallback>
 800576c:	e005      	b.n	800577a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f95c 	bl	8005a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f963 	bl	8005a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b08      	cmp	r3, #8
 800578c:	d122      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f003 0308 	and.w	r3, r3, #8
 8005798:	2b08      	cmp	r3, #8
 800579a:	d11b      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f06f 0208 	mvn.w	r2, #8
 80057a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2204      	movs	r2, #4
 80057aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fb fa11 	bl	8000be2 <HAL_TIM_IC_CaptureCallback>
 80057c0:	e005      	b.n	80057ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f932 	bl	8005a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f939 	bl	8005a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f003 0310 	and.w	r3, r3, #16
 80057de:	2b10      	cmp	r3, #16
 80057e0:	d122      	bne.n	8005828 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d11b      	bne.n	8005828 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f06f 0210 	mvn.w	r2, #16
 80057f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2208      	movs	r2, #8
 80057fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fb f9e7 	bl	8000be2 <HAL_TIM_IC_CaptureCallback>
 8005814:	e005      	b.n	8005822 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f908 	bl	8005a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f90f 	bl	8005a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b01      	cmp	r3, #1
 8005834:	d10e      	bne.n	8005854 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b01      	cmp	r3, #1
 8005842:	d107      	bne.n	8005854 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0201 	mvn.w	r2, #1
 800584c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f8e2 	bl	8005a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585e:	2b80      	cmp	r3, #128	; 0x80
 8005860:	d10e      	bne.n	8005880 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586c:	2b80      	cmp	r3, #128	; 0x80
 800586e:	d107      	bne.n	8005880 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fb6a 	bl	8005f54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588a:	2b40      	cmp	r3, #64	; 0x40
 800588c:	d10e      	bne.n	80058ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005898:	2b40      	cmp	r3, #64	; 0x40
 800589a:	d107      	bne.n	80058ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f8d4 	bl	8005a54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	d10e      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f003 0320 	and.w	r3, r3, #32
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	d107      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0220 	mvn.w	r2, #32
 80058d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fb34 	bl	8005f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058d8:	bf00      	nop
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_TIM_IC_ConfigChannel+0x1e>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e088      	b.n	8005a10 <HAL_TIM_IC_ConfigChannel+0x130>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d11b      	bne.n	8005944 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6818      	ldr	r0, [r3, #0]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	6819      	ldr	r1, [r3, #0]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f000 f944 	bl	8005ba8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 020c 	bic.w	r2, r2, #12
 800592e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6999      	ldr	r1, [r3, #24]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	619a      	str	r2, [r3, #24]
 8005942:	e060      	b.n	8005a06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b04      	cmp	r3, #4
 8005948:	d11c      	bne.n	8005984 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	6819      	ldr	r1, [r3, #0]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f000 f999 	bl	8005c90 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699a      	ldr	r2, [r3, #24]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800596c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6999      	ldr	r1, [r3, #24]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	021a      	lsls	r2, r3, #8
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	619a      	str	r2, [r3, #24]
 8005982:	e040      	b.n	8005a06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b08      	cmp	r3, #8
 8005988:	d11b      	bne.n	80059c2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6819      	ldr	r1, [r3, #0]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f000 f9b6 	bl	8005d0a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 020c 	bic.w	r2, r2, #12
 80059ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69d9      	ldr	r1, [r3, #28]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	61da      	str	r2, [r3, #28]
 80059c0:	e021      	b.n	8005a06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b0c      	cmp	r3, #12
 80059c6:	d11c      	bne.n	8005a02 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	6819      	ldr	r1, [r3, #0]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f000 f9d3 	bl	8005d82 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	69da      	ldr	r2, [r3, #28]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69d9      	ldr	r1, [r3, #28]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	021a      	lsls	r2, r3, #8
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	61da      	str	r2, [r3, #28]
 8005a00:	e001      	b.n	8005a06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a40      	ldr	r2, [pc, #256]	; (8005b7c <TIM_Base_SetConfig+0x114>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d013      	beq.n	8005aa8 <TIM_Base_SetConfig+0x40>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a86:	d00f      	beq.n	8005aa8 <TIM_Base_SetConfig+0x40>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a3d      	ldr	r2, [pc, #244]	; (8005b80 <TIM_Base_SetConfig+0x118>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00b      	beq.n	8005aa8 <TIM_Base_SetConfig+0x40>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a3c      	ldr	r2, [pc, #240]	; (8005b84 <TIM_Base_SetConfig+0x11c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d007      	beq.n	8005aa8 <TIM_Base_SetConfig+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a3b      	ldr	r2, [pc, #236]	; (8005b88 <TIM_Base_SetConfig+0x120>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_Base_SetConfig+0x40>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a3a      	ldr	r2, [pc, #232]	; (8005b8c <TIM_Base_SetConfig+0x124>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d108      	bne.n	8005aba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a2f      	ldr	r2, [pc, #188]	; (8005b7c <TIM_Base_SetConfig+0x114>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d02b      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac8:	d027      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a2c      	ldr	r2, [pc, #176]	; (8005b80 <TIM_Base_SetConfig+0x118>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d023      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2b      	ldr	r2, [pc, #172]	; (8005b84 <TIM_Base_SetConfig+0x11c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d01f      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a2a      	ldr	r2, [pc, #168]	; (8005b88 <TIM_Base_SetConfig+0x120>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d01b      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a29      	ldr	r2, [pc, #164]	; (8005b8c <TIM_Base_SetConfig+0x124>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d017      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a28      	ldr	r2, [pc, #160]	; (8005b90 <TIM_Base_SetConfig+0x128>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d013      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a27      	ldr	r2, [pc, #156]	; (8005b94 <TIM_Base_SetConfig+0x12c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00f      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a26      	ldr	r2, [pc, #152]	; (8005b98 <TIM_Base_SetConfig+0x130>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00b      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a25      	ldr	r2, [pc, #148]	; (8005b9c <TIM_Base_SetConfig+0x134>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d007      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a24      	ldr	r2, [pc, #144]	; (8005ba0 <TIM_Base_SetConfig+0x138>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d003      	beq.n	8005b1a <TIM_Base_SetConfig+0xb2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a23      	ldr	r2, [pc, #140]	; (8005ba4 <TIM_Base_SetConfig+0x13c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d108      	bne.n	8005b2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a0a      	ldr	r2, [pc, #40]	; (8005b7c <TIM_Base_SetConfig+0x114>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d003      	beq.n	8005b60 <TIM_Base_SetConfig+0xf8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a0c      	ldr	r2, [pc, #48]	; (8005b8c <TIM_Base_SetConfig+0x124>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d103      	bne.n	8005b68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	615a      	str	r2, [r3, #20]
}
 8005b6e:	bf00      	nop
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40010000 	.word	0x40010000
 8005b80:	40000400 	.word	0x40000400
 8005b84:	40000800 	.word	0x40000800
 8005b88:	40000c00 	.word	0x40000c00
 8005b8c:	40010400 	.word	0x40010400
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40014400 	.word	0x40014400
 8005b98:	40014800 	.word	0x40014800
 8005b9c:	40001800 	.word	0x40001800
 8005ba0:	40001c00 	.word	0x40001c00
 8005ba4:	40002000 	.word	0x40002000

08005ba8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f023 0201 	bic.w	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4a28      	ldr	r2, [pc, #160]	; (8005c74 <TIM_TI1_SetConfig+0xcc>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d01b      	beq.n	8005c0e <TIM_TI1_SetConfig+0x66>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bdc:	d017      	beq.n	8005c0e <TIM_TI1_SetConfig+0x66>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4a25      	ldr	r2, [pc, #148]	; (8005c78 <TIM_TI1_SetConfig+0xd0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d013      	beq.n	8005c0e <TIM_TI1_SetConfig+0x66>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4a24      	ldr	r2, [pc, #144]	; (8005c7c <TIM_TI1_SetConfig+0xd4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00f      	beq.n	8005c0e <TIM_TI1_SetConfig+0x66>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4a23      	ldr	r2, [pc, #140]	; (8005c80 <TIM_TI1_SetConfig+0xd8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00b      	beq.n	8005c0e <TIM_TI1_SetConfig+0x66>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4a22      	ldr	r2, [pc, #136]	; (8005c84 <TIM_TI1_SetConfig+0xdc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d007      	beq.n	8005c0e <TIM_TI1_SetConfig+0x66>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4a21      	ldr	r2, [pc, #132]	; (8005c88 <TIM_TI1_SetConfig+0xe0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d003      	beq.n	8005c0e <TIM_TI1_SetConfig+0x66>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4a20      	ldr	r2, [pc, #128]	; (8005c8c <TIM_TI1_SetConfig+0xe4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d101      	bne.n	8005c12 <TIM_TI1_SetConfig+0x6a>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <TIM_TI1_SetConfig+0x6c>
 8005c12:	2300      	movs	r3, #0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d008      	beq.n	8005c2a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f023 0303 	bic.w	r3, r3, #3
 8005c1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	e003      	b.n	8005c32 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f043 0301 	orr.w	r3, r3, #1
 8005c30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f023 030a 	bic.w	r3, r3, #10
 8005c4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f003 030a 	and.w	r3, r3, #10
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	621a      	str	r2, [r3, #32]
}
 8005c66:	bf00      	nop
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	40010000 	.word	0x40010000
 8005c78:	40000400 	.word	0x40000400
 8005c7c:	40000800 	.word	0x40000800
 8005c80:	40000c00 	.word	0x40000c00
 8005c84:	40010400 	.word	0x40010400
 8005c88:	40014000 	.word	0x40014000
 8005c8c:	40001800 	.word	0x40001800

08005c90 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f023 0210 	bic.w	r2, r3, #16
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	031b      	lsls	r3, r3, #12
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ce2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	621a      	str	r2, [r3, #32]
}
 8005cfe:	bf00      	nop
 8005d00:	371c      	adds	r7, #28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b087      	sub	sp, #28
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	607a      	str	r2, [r7, #4]
 8005d16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f023 0303 	bic.w	r3, r3, #3
 8005d36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d46:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005d5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	621a      	str	r2, [r3, #32]
}
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b087      	sub	sp, #28
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	607a      	str	r2, [r7, #4]
 8005d8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	031b      	lsls	r3, r3, #12
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005dd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	031b      	lsls	r3, r3, #12
 8005dda:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	621a      	str	r2, [r3, #32]
}
 8005df0:	bf00      	nop
 8005df2:	371c      	adds	r7, #28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f003 031f 	and.w	r3, r3, #31
 8005e0e:	2201      	movs	r2, #1
 8005e10:	fa02 f303 	lsl.w	r3, r2, r3
 8005e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a1a      	ldr	r2, [r3, #32]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	43db      	mvns	r3, r3
 8005e1e:	401a      	ands	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1a      	ldr	r2, [r3, #32]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f003 031f 	and.w	r3, r3, #31
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	fa01 f303 	lsl.w	r3, r1, r3
 8005e34:	431a      	orrs	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	621a      	str	r2, [r3, #32]
}
 8005e3a:	bf00      	nop
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
	...

08005e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d101      	bne.n	8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e05a      	b.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a21      	ldr	r2, [pc, #132]	; (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d022      	beq.n	8005eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eac:	d01d      	beq.n	8005eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1d      	ldr	r2, [pc, #116]	; (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d018      	beq.n	8005eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1b      	ldr	r2, [pc, #108]	; (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d013      	beq.n	8005eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1a      	ldr	r2, [pc, #104]	; (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00e      	beq.n	8005eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a18      	ldr	r2, [pc, #96]	; (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d009      	beq.n	8005eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a17      	ldr	r2, [pc, #92]	; (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d004      	beq.n	8005eea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a15      	ldr	r2, [pc, #84]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d10c      	bne.n	8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40010000 	.word	0x40010000
 8005f28:	40000400 	.word	0x40000400
 8005f2c:	40000800 	.word	0x40000800
 8005f30:	40000c00 	.word	0x40000c00
 8005f34:	40010400 	.word	0x40010400
 8005f38:	40014000 	.word	0x40014000
 8005f3c:	40001800 	.word	0x40001800

08005f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e03f      	b.n	8005ffa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fb fb6a 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2224      	movs	r2, #36	; 0x24
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005faa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fd7b 	bl	8006aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	695a      	ldr	r2, [r3, #20]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fe0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b08a      	sub	sp, #40	; 0x28
 8006006:	af02      	add	r7, sp, #8
 8006008:	60f8      	str	r0, [r7, #12]
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	603b      	str	r3, [r7, #0]
 800600e:	4613      	mov	r3, r2
 8006010:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b20      	cmp	r3, #32
 8006020:	d17c      	bne.n	800611c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <HAL_UART_Transmit+0x2c>
 8006028:	88fb      	ldrh	r3, [r7, #6]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e075      	b.n	800611e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_UART_Transmit+0x3e>
 800603c:	2302      	movs	r3, #2
 800603e:	e06e      	b.n	800611e <HAL_UART_Transmit+0x11c>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2221      	movs	r2, #33	; 0x21
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006056:	f7fb fd67 	bl	8001b28 <HAL_GetTick>
 800605a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	88fa      	ldrh	r2, [r7, #6]
 8006060:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	88fa      	ldrh	r2, [r7, #6]
 8006066:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006070:	d108      	bne.n	8006084 <HAL_UART_Transmit+0x82>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d104      	bne.n	8006084 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800607a:	2300      	movs	r3, #0
 800607c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	61bb      	str	r3, [r7, #24]
 8006082:	e003      	b.n	800608c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006088:	2300      	movs	r3, #0
 800608a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006094:	e02a      	b.n	80060ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2200      	movs	r2, #0
 800609e:	2180      	movs	r1, #128	; 0x80
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 faf9 	bl	8006698 <UART_WaitOnFlagUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e036      	b.n	800611e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10b      	bne.n	80060ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	3302      	adds	r3, #2
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	e007      	b.n	80060de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	781a      	ldrb	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	3301      	adds	r3, #1
 80060dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1cf      	bne.n	8006096 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2200      	movs	r2, #0
 80060fe:	2140      	movs	r1, #64	; 0x40
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 fac9 	bl	8006698 <UART_WaitOnFlagUntilTimeout>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e006      	b.n	800611e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	e000      	b.n	800611e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800611c:	2302      	movs	r3, #2
  }
}
 800611e:	4618      	mov	r0, r3
 8006120:	3720      	adds	r7, #32
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b0ba      	sub	sp, #232	; 0xe8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800614e:	2300      	movs	r3, #0
 8006150:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006154:	2300      	movs	r3, #0
 8006156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800615a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10f      	bne.n	800618e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800616e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <HAL_UART_IRQHandler+0x66>
 800617a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fbd3 	bl	8006932 <UART_Receive_IT>
      return;
 800618c:	e256      	b.n	800663c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800618e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 80de 	beq.w	8006354 <HAL_UART_IRQHandler+0x22c>
 8006198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d106      	bne.n	80061b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80d1 	beq.w	8006354 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00b      	beq.n	80061d6 <HAL_UART_IRQHandler+0xae>
 80061be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	f043 0201 	orr.w	r2, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00b      	beq.n	80061fa <HAL_UART_IRQHandler+0xd2>
 80061e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d005      	beq.n	80061fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	f043 0202 	orr.w	r2, r3, #2
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00b      	beq.n	800621e <HAL_UART_IRQHandler+0xf6>
 8006206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	f043 0204 	orr.w	r2, r3, #4
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800621e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d011      	beq.n	800624e <HAL_UART_IRQHandler+0x126>
 800622a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b00      	cmp	r3, #0
 8006234:	d105      	bne.n	8006242 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d005      	beq.n	800624e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	f043 0208 	orr.w	r2, r3, #8
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 81ed 	beq.w	8006632 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b00      	cmp	r3, #0
 8006262:	d008      	beq.n	8006276 <HAL_UART_IRQHandler+0x14e>
 8006264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006268:	f003 0320 	and.w	r3, r3, #32
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fb5e 	bl	8006932 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006280:	2b40      	cmp	r3, #64	; 0x40
 8006282:	bf0c      	ite	eq
 8006284:	2301      	moveq	r3, #1
 8006286:	2300      	movne	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f003 0308 	and.w	r3, r3, #8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d103      	bne.n	80062a2 <HAL_UART_IRQHandler+0x17a>
 800629a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d04f      	beq.n	8006342 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fa66 	bl	8006774 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b2:	2b40      	cmp	r3, #64	; 0x40
 80062b4:	d141      	bne.n	800633a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3314      	adds	r3, #20
 80062bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3314      	adds	r3, #20
 80062de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1d9      	bne.n	80062b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	2b00      	cmp	r3, #0
 8006308:	d013      	beq.n	8006332 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	4a7d      	ldr	r2, [pc, #500]	; (8006504 <HAL_UART_IRQHandler+0x3dc>)
 8006310:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	4618      	mov	r0, r3
 8006318:	f7fb febe 	bl	8002098 <HAL_DMA_Abort_IT>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d016      	beq.n	8006350 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800632c:	4610      	mov	r0, r2
 800632e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006330:	e00e      	b.n	8006350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f99a 	bl	800666c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006338:	e00a      	b.n	8006350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f996 	bl	800666c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006340:	e006      	b.n	8006350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f992 	bl	800666c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800634e:	e170      	b.n	8006632 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006350:	bf00      	nop
    return;
 8006352:	e16e      	b.n	8006632 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006358:	2b01      	cmp	r3, #1
 800635a:	f040 814a 	bne.w	80065f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800635e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006362:	f003 0310 	and.w	r3, r3, #16
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 8143 	beq.w	80065f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800636c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006370:	f003 0310 	and.w	r3, r3, #16
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 813c 	beq.w	80065f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800637a:	2300      	movs	r3, #0
 800637c:	60bb      	str	r3, [r7, #8]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60bb      	str	r3, [r7, #8]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	60bb      	str	r3, [r7, #8]
 800638e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639a:	2b40      	cmp	r3, #64	; 0x40
 800639c:	f040 80b4 	bne.w	8006508 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 8140 	beq.w	8006636 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063be:	429a      	cmp	r2, r3
 80063c0:	f080 8139 	bcs.w	8006636 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d6:	f000 8088 	beq.w	80064ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	330c      	adds	r3, #12
 80063e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	330c      	adds	r3, #12
 8006402:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006406:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800640a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006412:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800641e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1d9      	bne.n	80063da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3314      	adds	r3, #20
 800642c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006438:	f023 0301 	bic.w	r3, r3, #1
 800643c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3314      	adds	r3, #20
 8006446:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800644a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800644e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006452:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800645c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e1      	bne.n	8006426 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3314      	adds	r3, #20
 8006468:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3314      	adds	r3, #20
 8006482:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006486:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006488:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800648c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e3      	bne.n	8006462 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	330c      	adds	r3, #12
 80064ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ba:	f023 0310 	bic.w	r3, r3, #16
 80064be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330c      	adds	r3, #12
 80064c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80064ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e3      	bne.n	80064a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fb fd67 	bl	8001fb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f8c0 	bl	8006680 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006500:	e099      	b.n	8006636 <HAL_UART_IRQHandler+0x50e>
 8006502:	bf00      	nop
 8006504:	0800683b 	.word	0x0800683b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006510:	b29b      	uxth	r3, r3
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800651c:	b29b      	uxth	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 808b 	beq.w	800663a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 8086 	beq.w	800663a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	330c      	adds	r3, #12
 8006534:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800653e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006540:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006544:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	330c      	adds	r3, #12
 800654e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006552:	647a      	str	r2, [r7, #68]	; 0x44
 8006554:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e3      	bne.n	800652e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3314      	adds	r3, #20
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	623b      	str	r3, [r7, #32]
   return(result);
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	f023 0301 	bic.w	r3, r3, #1
 800657c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3314      	adds	r3, #20
 8006586:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800658a:	633a      	str	r2, [r7, #48]	; 0x30
 800658c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e3      	bne.n	8006566 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	330c      	adds	r3, #12
 80065b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	e853 3f00 	ldrex	r3, [r3]
 80065ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0310 	bic.w	r3, r3, #16
 80065c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	330c      	adds	r3, #12
 80065cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065d0:	61fa      	str	r2, [r7, #28]
 80065d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	69b9      	ldr	r1, [r7, #24]
 80065d6:	69fa      	ldr	r2, [r7, #28]
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	617b      	str	r3, [r7, #20]
   return(result);
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e3      	bne.n	80065ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065e8:	4619      	mov	r1, r3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f848 	bl	8006680 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065f0:	e023      	b.n	800663a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d009      	beq.n	8006612 <HAL_UART_IRQHandler+0x4ea>
 80065fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f929 	bl	8006862 <UART_Transmit_IT>
    return;
 8006610:	e014      	b.n	800663c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00e      	beq.n	800663c <HAL_UART_IRQHandler+0x514>
 800661e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	d008      	beq.n	800663c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f969 	bl	8006902 <UART_EndTransmit_IT>
    return;
 8006630:	e004      	b.n	800663c <HAL_UART_IRQHandler+0x514>
    return;
 8006632:	bf00      	nop
 8006634:	e002      	b.n	800663c <HAL_UART_IRQHandler+0x514>
      return;
 8006636:	bf00      	nop
 8006638:	e000      	b.n	800663c <HAL_UART_IRQHandler+0x514>
      return;
 800663a:	bf00      	nop
  }
}
 800663c:	37e8      	adds	r7, #232	; 0xe8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop

08006644 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	460b      	mov	r3, r1
 800668a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b090      	sub	sp, #64	; 0x40
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	603b      	str	r3, [r7, #0]
 80066a4:	4613      	mov	r3, r2
 80066a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066a8:	e050      	b.n	800674c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066b0:	d04c      	beq.n	800674c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80066b8:	f7fb fa36 	bl	8001b28 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d241      	bcs.n	800674c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	330c      	adds	r3, #12
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d2:	e853 3f00 	ldrex	r3, [r3]
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	330c      	adds	r3, #12
 80066e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066e8:	637a      	str	r2, [r7, #52]	; 0x34
 80066ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066f0:	e841 2300 	strex	r3, r2, [r1]
 80066f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1e5      	bne.n	80066c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3314      	adds	r3, #20
 8006702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	613b      	str	r3, [r7, #16]
   return(result);
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f023 0301 	bic.w	r3, r3, #1
 8006712:	63bb      	str	r3, [r7, #56]	; 0x38
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3314      	adds	r3, #20
 800671a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800671c:	623a      	str	r2, [r7, #32]
 800671e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	69f9      	ldr	r1, [r7, #28]
 8006722:	6a3a      	ldr	r2, [r7, #32]
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	61bb      	str	r3, [r7, #24]
   return(result);
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e5      	bne.n	80066fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2220      	movs	r2, #32
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e00f      	b.n	800676c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4013      	ands	r3, r2
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	429a      	cmp	r2, r3
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	429a      	cmp	r2, r3
 8006768:	d09f      	beq.n	80066aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3740      	adds	r7, #64	; 0x40
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b095      	sub	sp, #84	; 0x54
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	330c      	adds	r3, #12
 8006782:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006786:	e853 3f00 	ldrex	r3, [r3]
 800678a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	330c      	adds	r3, #12
 800679a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800679c:	643a      	str	r2, [r7, #64]	; 0x40
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067a4:	e841 2300 	strex	r3, r2, [r1]
 80067a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e5      	bne.n	800677c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3314      	adds	r3, #20
 80067b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	e853 3f00 	ldrex	r3, [r3]
 80067be:	61fb      	str	r3, [r7, #28]
   return(result);
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f023 0301 	bic.w	r3, r3, #1
 80067c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3314      	adds	r3, #20
 80067ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067d8:	e841 2300 	strex	r3, r2, [r1]
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1e5      	bne.n	80067b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d119      	bne.n	8006820 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	330c      	adds	r3, #12
 80067f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f023 0310 	bic.w	r3, r3, #16
 8006802:	647b      	str	r3, [r7, #68]	; 0x44
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	330c      	adds	r3, #12
 800680a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800680c:	61ba      	str	r2, [r7, #24]
 800680e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6979      	ldr	r1, [r7, #20]
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	613b      	str	r3, [r7, #16]
   return(result);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e5      	bne.n	80067ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800682e:	bf00      	nop
 8006830:	3754      	adds	r7, #84	; 0x54
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006846:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f7ff ff09 	bl	800666c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800685a:	bf00      	nop
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006862:	b480      	push	{r7}
 8006864:	b085      	sub	sp, #20
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b21      	cmp	r3, #33	; 0x21
 8006874:	d13e      	bne.n	80068f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800687e:	d114      	bne.n	80068aa <UART_Transmit_IT+0x48>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d110      	bne.n	80068aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800689c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	1c9a      	adds	r2, r3, #2
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	621a      	str	r2, [r3, #32]
 80068a8:	e008      	b.n	80068bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	1c59      	adds	r1, r3, #1
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6211      	str	r1, [r2, #32]
 80068b4:	781a      	ldrb	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	3b01      	subs	r3, #1
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	4619      	mov	r1, r3
 80068ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10f      	bne.n	80068f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068f0:	2300      	movs	r3, #0
 80068f2:	e000      	b.n	80068f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068f4:	2302      	movs	r3, #2
  }
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b082      	sub	sp, #8
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006918:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7ff fe8e 	bl	8006644 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b08c      	sub	sp, #48	; 0x30
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b22      	cmp	r3, #34	; 0x22
 8006944:	f040 80ab 	bne.w	8006a9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006950:	d117      	bne.n	8006982 <UART_Receive_IT+0x50>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d113      	bne.n	8006982 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800695a:	2300      	movs	r3, #0
 800695c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	b29b      	uxth	r3, r3
 800696c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006970:	b29a      	uxth	r2, r3
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	1c9a      	adds	r2, r3, #2
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	629a      	str	r2, [r3, #40]	; 0x28
 8006980:	e026      	b.n	80069d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006986:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006988:	2300      	movs	r3, #0
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006994:	d007      	beq.n	80069a6 <UART_Receive_IT+0x74>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10a      	bne.n	80069b4 <UART_Receive_IT+0x82>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	e008      	b.n	80069c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29b      	uxth	r3, r3
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	4619      	mov	r1, r3
 80069de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d15a      	bne.n	8006a9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0220 	bic.w	r2, r2, #32
 80069f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	695a      	ldr	r2, [r3, #20]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0201 	bic.w	r2, r2, #1
 8006a12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d135      	bne.n	8006a90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	330c      	adds	r3, #12
 8006a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	613b      	str	r3, [r7, #16]
   return(result);
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f023 0310 	bic.w	r3, r3, #16
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	330c      	adds	r3, #12
 8006a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a4a:	623a      	str	r2, [r7, #32]
 8006a4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	69f9      	ldr	r1, [r7, #28]
 8006a50:	6a3a      	ldr	r2, [r7, #32]
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e5      	bne.n	8006a2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0310 	and.w	r3, r3, #16
 8006a68:	2b10      	cmp	r3, #16
 8006a6a:	d10a      	bne.n	8006a82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff fdf9 	bl	8006680 <HAL_UARTEx_RxEventCallback>
 8006a8e:	e002      	b.n	8006a96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff fde1 	bl	8006658 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	e002      	b.n	8006aa0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e000      	b.n	8006aa0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a9e:	2302      	movs	r3, #2
  }
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3730      	adds	r7, #48	; 0x30
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006aac:	b0c0      	sub	sp, #256	; 0x100
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac4:	68d9      	ldr	r1, [r3, #12]
 8006ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	ea40 0301 	orr.w	r3, r0, r1
 8006ad0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b00:	f021 010c 	bic.w	r1, r1, #12
 8006b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b0e:	430b      	orrs	r3, r1
 8006b10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b22:	6999      	ldr	r1, [r3, #24]
 8006b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	ea40 0301 	orr.w	r3, r0, r1
 8006b2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	4b8f      	ldr	r3, [pc, #572]	; (8006d74 <UART_SetConfig+0x2cc>)
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d005      	beq.n	8006b48 <UART_SetConfig+0xa0>
 8006b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4b8d      	ldr	r3, [pc, #564]	; (8006d78 <UART_SetConfig+0x2d0>)
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d104      	bne.n	8006b52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b48:	f7fb ffe6 	bl	8002b18 <HAL_RCC_GetPCLK2Freq>
 8006b4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006b50:	e003      	b.n	8006b5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b52:	f7fb ffcd 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
 8006b56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b64:	f040 810c 	bne.w	8006d80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006b76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006b7a:	4622      	mov	r2, r4
 8006b7c:	462b      	mov	r3, r5
 8006b7e:	1891      	adds	r1, r2, r2
 8006b80:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b82:	415b      	adcs	r3, r3
 8006b84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	eb12 0801 	adds.w	r8, r2, r1
 8006b90:	4629      	mov	r1, r5
 8006b92:	eb43 0901 	adc.w	r9, r3, r1
 8006b96:	f04f 0200 	mov.w	r2, #0
 8006b9a:	f04f 0300 	mov.w	r3, #0
 8006b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006baa:	4690      	mov	r8, r2
 8006bac:	4699      	mov	r9, r3
 8006bae:	4623      	mov	r3, r4
 8006bb0:	eb18 0303 	adds.w	r3, r8, r3
 8006bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bb8:	462b      	mov	r3, r5
 8006bba:	eb49 0303 	adc.w	r3, r9, r3
 8006bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006bd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	18db      	adds	r3, r3, r3
 8006bda:	653b      	str	r3, [r7, #80]	; 0x50
 8006bdc:	4613      	mov	r3, r2
 8006bde:	eb42 0303 	adc.w	r3, r2, r3
 8006be2:	657b      	str	r3, [r7, #84]	; 0x54
 8006be4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006be8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006bec:	f7f9 fc1a 	bl	8000424 <__aeabi_uldivmod>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4b61      	ldr	r3, [pc, #388]	; (8006d7c <UART_SetConfig+0x2d4>)
 8006bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8006bfa:	095b      	lsrs	r3, r3, #5
 8006bfc:	011c      	lsls	r4, r3, #4
 8006bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c02:	2200      	movs	r2, #0
 8006c04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c10:	4642      	mov	r2, r8
 8006c12:	464b      	mov	r3, r9
 8006c14:	1891      	adds	r1, r2, r2
 8006c16:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c18:	415b      	adcs	r3, r3
 8006c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c20:	4641      	mov	r1, r8
 8006c22:	eb12 0a01 	adds.w	sl, r2, r1
 8006c26:	4649      	mov	r1, r9
 8006c28:	eb43 0b01 	adc.w	fp, r3, r1
 8006c2c:	f04f 0200 	mov.w	r2, #0
 8006c30:	f04f 0300 	mov.w	r3, #0
 8006c34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c40:	4692      	mov	sl, r2
 8006c42:	469b      	mov	fp, r3
 8006c44:	4643      	mov	r3, r8
 8006c46:	eb1a 0303 	adds.w	r3, sl, r3
 8006c4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c4e:	464b      	mov	r3, r9
 8006c50:	eb4b 0303 	adc.w	r3, fp, r3
 8006c54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	18db      	adds	r3, r3, r3
 8006c70:	643b      	str	r3, [r7, #64]	; 0x40
 8006c72:	4613      	mov	r3, r2
 8006c74:	eb42 0303 	adc.w	r3, r2, r3
 8006c78:	647b      	str	r3, [r7, #68]	; 0x44
 8006c7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006c82:	f7f9 fbcf 	bl	8000424 <__aeabi_uldivmod>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	4b3b      	ldr	r3, [pc, #236]	; (8006d7c <UART_SetConfig+0x2d4>)
 8006c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8006c92:	095b      	lsrs	r3, r3, #5
 8006c94:	2264      	movs	r2, #100	; 0x64
 8006c96:	fb02 f303 	mul.w	r3, r2, r3
 8006c9a:	1acb      	subs	r3, r1, r3
 8006c9c:	00db      	lsls	r3, r3, #3
 8006c9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ca2:	4b36      	ldr	r3, [pc, #216]	; (8006d7c <UART_SetConfig+0x2d4>)
 8006ca4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	005b      	lsls	r3, r3, #1
 8006cac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cb0:	441c      	add	r4, r3
 8006cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006cc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	464b      	mov	r3, r9
 8006cc8:	1891      	adds	r1, r2, r2
 8006cca:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ccc:	415b      	adcs	r3, r3
 8006cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006cd4:	4641      	mov	r1, r8
 8006cd6:	1851      	adds	r1, r2, r1
 8006cd8:	6339      	str	r1, [r7, #48]	; 0x30
 8006cda:	4649      	mov	r1, r9
 8006cdc:	414b      	adcs	r3, r1
 8006cde:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce0:	f04f 0200 	mov.w	r2, #0
 8006ce4:	f04f 0300 	mov.w	r3, #0
 8006ce8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006cec:	4659      	mov	r1, fp
 8006cee:	00cb      	lsls	r3, r1, #3
 8006cf0:	4651      	mov	r1, sl
 8006cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cf6:	4651      	mov	r1, sl
 8006cf8:	00ca      	lsls	r2, r1, #3
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	4603      	mov	r3, r0
 8006d00:	4642      	mov	r2, r8
 8006d02:	189b      	adds	r3, r3, r2
 8006d04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d08:	464b      	mov	r3, r9
 8006d0a:	460a      	mov	r2, r1
 8006d0c:	eb42 0303 	adc.w	r3, r2, r3
 8006d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d28:	460b      	mov	r3, r1
 8006d2a:	18db      	adds	r3, r3, r3
 8006d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d2e:	4613      	mov	r3, r2
 8006d30:	eb42 0303 	adc.w	r3, r2, r3
 8006d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d3e:	f7f9 fb71 	bl	8000424 <__aeabi_uldivmod>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4b0d      	ldr	r3, [pc, #52]	; (8006d7c <UART_SetConfig+0x2d4>)
 8006d48:	fba3 1302 	umull	r1, r3, r3, r2
 8006d4c:	095b      	lsrs	r3, r3, #5
 8006d4e:	2164      	movs	r1, #100	; 0x64
 8006d50:	fb01 f303 	mul.w	r3, r1, r3
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	3332      	adds	r3, #50	; 0x32
 8006d5a:	4a08      	ldr	r2, [pc, #32]	; (8006d7c <UART_SetConfig+0x2d4>)
 8006d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d60:	095b      	lsrs	r3, r3, #5
 8006d62:	f003 0207 	and.w	r2, r3, #7
 8006d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4422      	add	r2, r4
 8006d6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d70:	e105      	b.n	8006f7e <UART_SetConfig+0x4d6>
 8006d72:	bf00      	nop
 8006d74:	40011000 	.word	0x40011000
 8006d78:	40011400 	.word	0x40011400
 8006d7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d84:	2200      	movs	r2, #0
 8006d86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006d92:	4642      	mov	r2, r8
 8006d94:	464b      	mov	r3, r9
 8006d96:	1891      	adds	r1, r2, r2
 8006d98:	6239      	str	r1, [r7, #32]
 8006d9a:	415b      	adcs	r3, r3
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006da2:	4641      	mov	r1, r8
 8006da4:	1854      	adds	r4, r2, r1
 8006da6:	4649      	mov	r1, r9
 8006da8:	eb43 0501 	adc.w	r5, r3, r1
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	00eb      	lsls	r3, r5, #3
 8006db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dba:	00e2      	lsls	r2, r4, #3
 8006dbc:	4614      	mov	r4, r2
 8006dbe:	461d      	mov	r5, r3
 8006dc0:	4643      	mov	r3, r8
 8006dc2:	18e3      	adds	r3, r4, r3
 8006dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006dc8:	464b      	mov	r3, r9
 8006dca:	eb45 0303 	adc.w	r3, r5, r3
 8006dce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006dde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006de2:	f04f 0200 	mov.w	r2, #0
 8006de6:	f04f 0300 	mov.w	r3, #0
 8006dea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006dee:	4629      	mov	r1, r5
 8006df0:	008b      	lsls	r3, r1, #2
 8006df2:	4621      	mov	r1, r4
 8006df4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006df8:	4621      	mov	r1, r4
 8006dfa:	008a      	lsls	r2, r1, #2
 8006dfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e00:	f7f9 fb10 	bl	8000424 <__aeabi_uldivmod>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4b60      	ldr	r3, [pc, #384]	; (8006f8c <UART_SetConfig+0x4e4>)
 8006e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e0e:	095b      	lsrs	r3, r3, #5
 8006e10:	011c      	lsls	r4, r3, #4
 8006e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e24:	4642      	mov	r2, r8
 8006e26:	464b      	mov	r3, r9
 8006e28:	1891      	adds	r1, r2, r2
 8006e2a:	61b9      	str	r1, [r7, #24]
 8006e2c:	415b      	adcs	r3, r3
 8006e2e:	61fb      	str	r3, [r7, #28]
 8006e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e34:	4641      	mov	r1, r8
 8006e36:	1851      	adds	r1, r2, r1
 8006e38:	6139      	str	r1, [r7, #16]
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	414b      	adcs	r3, r1
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	f04f 0300 	mov.w	r3, #0
 8006e48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e4c:	4659      	mov	r1, fp
 8006e4e:	00cb      	lsls	r3, r1, #3
 8006e50:	4651      	mov	r1, sl
 8006e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e56:	4651      	mov	r1, sl
 8006e58:	00ca      	lsls	r2, r1, #3
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	4603      	mov	r3, r0
 8006e60:	4642      	mov	r2, r8
 8006e62:	189b      	adds	r3, r3, r2
 8006e64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e68:	464b      	mov	r3, r9
 8006e6a:	460a      	mov	r2, r1
 8006e6c:	eb42 0303 	adc.w	r3, r2, r3
 8006e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	008b      	lsls	r3, r1, #2
 8006e90:	4641      	mov	r1, r8
 8006e92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e96:	4641      	mov	r1, r8
 8006e98:	008a      	lsls	r2, r1, #2
 8006e9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006e9e:	f7f9 fac1 	bl	8000424 <__aeabi_uldivmod>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4b39      	ldr	r3, [pc, #228]	; (8006f8c <UART_SetConfig+0x4e4>)
 8006ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	2164      	movs	r1, #100	; 0x64
 8006eb0:	fb01 f303 	mul.w	r3, r1, r3
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	011b      	lsls	r3, r3, #4
 8006eb8:	3332      	adds	r3, #50	; 0x32
 8006eba:	4a34      	ldr	r2, [pc, #208]	; (8006f8c <UART_SetConfig+0x4e4>)
 8006ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec0:	095b      	lsrs	r3, r3, #5
 8006ec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ec6:	441c      	add	r4, r3
 8006ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ecc:	2200      	movs	r2, #0
 8006ece:	673b      	str	r3, [r7, #112]	; 0x70
 8006ed0:	677a      	str	r2, [r7, #116]	; 0x74
 8006ed2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ed6:	4642      	mov	r2, r8
 8006ed8:	464b      	mov	r3, r9
 8006eda:	1891      	adds	r1, r2, r2
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	415b      	adcs	r3, r3
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ee6:	4641      	mov	r1, r8
 8006ee8:	1851      	adds	r1, r2, r1
 8006eea:	6039      	str	r1, [r7, #0]
 8006eec:	4649      	mov	r1, r9
 8006eee:	414b      	adcs	r3, r1
 8006ef0:	607b      	str	r3, [r7, #4]
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006efe:	4659      	mov	r1, fp
 8006f00:	00cb      	lsls	r3, r1, #3
 8006f02:	4651      	mov	r1, sl
 8006f04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f08:	4651      	mov	r1, sl
 8006f0a:	00ca      	lsls	r2, r1, #3
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4619      	mov	r1, r3
 8006f10:	4603      	mov	r3, r0
 8006f12:	4642      	mov	r2, r8
 8006f14:	189b      	adds	r3, r3, r2
 8006f16:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f18:	464b      	mov	r3, r9
 8006f1a:	460a      	mov	r2, r1
 8006f1c:	eb42 0303 	adc.w	r3, r2, r3
 8006f20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	663b      	str	r3, [r7, #96]	; 0x60
 8006f2c:	667a      	str	r2, [r7, #100]	; 0x64
 8006f2e:	f04f 0200 	mov.w	r2, #0
 8006f32:	f04f 0300 	mov.w	r3, #0
 8006f36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	008b      	lsls	r3, r1, #2
 8006f3e:	4641      	mov	r1, r8
 8006f40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f44:	4641      	mov	r1, r8
 8006f46:	008a      	lsls	r2, r1, #2
 8006f48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f4c:	f7f9 fa6a 	bl	8000424 <__aeabi_uldivmod>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4b0d      	ldr	r3, [pc, #52]	; (8006f8c <UART_SetConfig+0x4e4>)
 8006f56:	fba3 1302 	umull	r1, r3, r3, r2
 8006f5a:	095b      	lsrs	r3, r3, #5
 8006f5c:	2164      	movs	r1, #100	; 0x64
 8006f5e:	fb01 f303 	mul.w	r3, r1, r3
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	011b      	lsls	r3, r3, #4
 8006f66:	3332      	adds	r3, #50	; 0x32
 8006f68:	4a08      	ldr	r2, [pc, #32]	; (8006f8c <UART_SetConfig+0x4e4>)
 8006f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	f003 020f 	and.w	r2, r3, #15
 8006f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4422      	add	r2, r4
 8006f7c:	609a      	str	r2, [r3, #8]
}
 8006f7e:	bf00      	nop
 8006f80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006f84:	46bd      	mov	sp, r7
 8006f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f8a:	bf00      	nop
 8006f8c:	51eb851f 	.word	0x51eb851f

08006f90 <__libc_init_array>:
 8006f90:	b570      	push	{r4, r5, r6, lr}
 8006f92:	4d0d      	ldr	r5, [pc, #52]	; (8006fc8 <__libc_init_array+0x38>)
 8006f94:	4c0d      	ldr	r4, [pc, #52]	; (8006fcc <__libc_init_array+0x3c>)
 8006f96:	1b64      	subs	r4, r4, r5
 8006f98:	10a4      	asrs	r4, r4, #2
 8006f9a:	2600      	movs	r6, #0
 8006f9c:	42a6      	cmp	r6, r4
 8006f9e:	d109      	bne.n	8006fb4 <__libc_init_array+0x24>
 8006fa0:	4d0b      	ldr	r5, [pc, #44]	; (8006fd0 <__libc_init_array+0x40>)
 8006fa2:	4c0c      	ldr	r4, [pc, #48]	; (8006fd4 <__libc_init_array+0x44>)
 8006fa4:	f000 f820 	bl	8006fe8 <_init>
 8006fa8:	1b64      	subs	r4, r4, r5
 8006faa:	10a4      	asrs	r4, r4, #2
 8006fac:	2600      	movs	r6, #0
 8006fae:	42a6      	cmp	r6, r4
 8006fb0:	d105      	bne.n	8006fbe <__libc_init_array+0x2e>
 8006fb2:	bd70      	pop	{r4, r5, r6, pc}
 8006fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb8:	4798      	blx	r3
 8006fba:	3601      	adds	r6, #1
 8006fbc:	e7ee      	b.n	8006f9c <__libc_init_array+0xc>
 8006fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc2:	4798      	blx	r3
 8006fc4:	3601      	adds	r6, #1
 8006fc6:	e7f2      	b.n	8006fae <__libc_init_array+0x1e>
 8006fc8:	08007028 	.word	0x08007028
 8006fcc:	08007028 	.word	0x08007028
 8006fd0:	08007028 	.word	0x08007028
 8006fd4:	0800702c 	.word	0x0800702c

08006fd8 <memset>:
 8006fd8:	4402      	add	r2, r0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d100      	bne.n	8006fe2 <memset+0xa>
 8006fe0:	4770      	bx	lr
 8006fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fe6:	e7f9      	b.n	8006fdc <memset+0x4>

08006fe8 <_init>:
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fea:	bf00      	nop
 8006fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fee:	bc08      	pop	{r3}
 8006ff0:	469e      	mov	lr, r3
 8006ff2:	4770      	bx	lr

08006ff4 <_fini>:
 8006ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff6:	bf00      	nop
 8006ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffa:	bc08      	pop	{r3}
 8006ffc:	469e      	mov	lr, r3
 8006ffe:	4770      	bx	lr
