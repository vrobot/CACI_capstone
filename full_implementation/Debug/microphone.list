
microphone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007368  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007530  08007530  00017530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007550  08007550  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08007550  08007550  00017550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007558  08007558  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007558  08007558  00017558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800755c  0800755c  0001755c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08007560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c88  20000040  080075a0  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002cc8  080075a0  00022cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ebf  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026cc  00000000  00000000  00033f2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00036600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  000377b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ffc  00000000  00000000  000388a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001422c  00000000  00000000  0005b89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d608c  00000000  00000000  0006fac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145b54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf4  00000000  00000000  00145ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000040 	.word	0x20000040
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007518 	.word	0x08007518

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000044 	.word	0x20000044
 8000204:	08007518 	.word	0x08007518

08000208 <__aeabi_frsub>:
 8000208:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__addsf3>
 800020e:	bf00      	nop

08000210 <__aeabi_fsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000214 <__addsf3>:
 8000214:	0042      	lsls	r2, r0, #1
 8000216:	bf1f      	itttt	ne
 8000218:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800021c:	ea92 0f03 	teqne	r2, r3
 8000220:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000224:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000228:	d06a      	beq.n	8000300 <__addsf3+0xec>
 800022a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800022e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000232:	bfc1      	itttt	gt
 8000234:	18d2      	addgt	r2, r2, r3
 8000236:	4041      	eorgt	r1, r0
 8000238:	4048      	eorgt	r0, r1
 800023a:	4041      	eorgt	r1, r0
 800023c:	bfb8      	it	lt
 800023e:	425b      	neglt	r3, r3
 8000240:	2b19      	cmp	r3, #25
 8000242:	bf88      	it	hi
 8000244:	4770      	bxhi	lr
 8000246:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800024a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800024e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000252:	bf18      	it	ne
 8000254:	4240      	negne	r0, r0
 8000256:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800025a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800025e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000262:	bf18      	it	ne
 8000264:	4249      	negne	r1, r1
 8000266:	ea92 0f03 	teq	r2, r3
 800026a:	d03f      	beq.n	80002ec <__addsf3+0xd8>
 800026c:	f1a2 0201 	sub.w	r2, r2, #1
 8000270:	fa41 fc03 	asr.w	ip, r1, r3
 8000274:	eb10 000c 	adds.w	r0, r0, ip
 8000278:	f1c3 0320 	rsb	r3, r3, #32
 800027c:	fa01 f103 	lsl.w	r1, r1, r3
 8000280:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000284:	d502      	bpl.n	800028c <__addsf3+0x78>
 8000286:	4249      	negs	r1, r1
 8000288:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800028c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000290:	d313      	bcc.n	80002ba <__addsf3+0xa6>
 8000292:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000296:	d306      	bcc.n	80002a6 <__addsf3+0x92>
 8000298:	0840      	lsrs	r0, r0, #1
 800029a:	ea4f 0131 	mov.w	r1, r1, rrx
 800029e:	f102 0201 	add.w	r2, r2, #1
 80002a2:	2afe      	cmp	r2, #254	; 0xfe
 80002a4:	d251      	bcs.n	800034a <__addsf3+0x136>
 80002a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ae:	bf08      	it	eq
 80002b0:	f020 0001 	biceq.w	r0, r0, #1
 80002b4:	ea40 0003 	orr.w	r0, r0, r3
 80002b8:	4770      	bx	lr
 80002ba:	0049      	lsls	r1, r1, #1
 80002bc:	eb40 0000 	adc.w	r0, r0, r0
 80002c0:	3a01      	subs	r2, #1
 80002c2:	bf28      	it	cs
 80002c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002c8:	d2ed      	bcs.n	80002a6 <__addsf3+0x92>
 80002ca:	fab0 fc80 	clz	ip, r0
 80002ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80002d2:	ebb2 020c 	subs.w	r2, r2, ip
 80002d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002da:	bfaa      	itet	ge
 80002dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002e0:	4252      	neglt	r2, r2
 80002e2:	4318      	orrge	r0, r3
 80002e4:	bfbc      	itt	lt
 80002e6:	40d0      	lsrlt	r0, r2
 80002e8:	4318      	orrlt	r0, r3
 80002ea:	4770      	bx	lr
 80002ec:	f092 0f00 	teq	r2, #0
 80002f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002f4:	bf06      	itte	eq
 80002f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002fa:	3201      	addeq	r2, #1
 80002fc:	3b01      	subne	r3, #1
 80002fe:	e7b5      	b.n	800026c <__addsf3+0x58>
 8000300:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000304:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000308:	bf18      	it	ne
 800030a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800030e:	d021      	beq.n	8000354 <__addsf3+0x140>
 8000310:	ea92 0f03 	teq	r2, r3
 8000314:	d004      	beq.n	8000320 <__addsf3+0x10c>
 8000316:	f092 0f00 	teq	r2, #0
 800031a:	bf08      	it	eq
 800031c:	4608      	moveq	r0, r1
 800031e:	4770      	bx	lr
 8000320:	ea90 0f01 	teq	r0, r1
 8000324:	bf1c      	itt	ne
 8000326:	2000      	movne	r0, #0
 8000328:	4770      	bxne	lr
 800032a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800032e:	d104      	bne.n	800033a <__addsf3+0x126>
 8000330:	0040      	lsls	r0, r0, #1
 8000332:	bf28      	it	cs
 8000334:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000338:	4770      	bx	lr
 800033a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800033e:	bf3c      	itt	cc
 8000340:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000344:	4770      	bxcc	lr
 8000346:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800034a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800034e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000352:	4770      	bx	lr
 8000354:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000358:	bf16      	itet	ne
 800035a:	4608      	movne	r0, r1
 800035c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000360:	4601      	movne	r1, r0
 8000362:	0242      	lsls	r2, r0, #9
 8000364:	bf06      	itte	eq
 8000366:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800036a:	ea90 0f01 	teqeq	r0, r1
 800036e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000372:	4770      	bx	lr

08000374 <__aeabi_ui2f>:
 8000374:	f04f 0300 	mov.w	r3, #0
 8000378:	e004      	b.n	8000384 <__aeabi_i2f+0x8>
 800037a:	bf00      	nop

0800037c <__aeabi_i2f>:
 800037c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000380:	bf48      	it	mi
 8000382:	4240      	negmi	r0, r0
 8000384:	ea5f 0c00 	movs.w	ip, r0
 8000388:	bf08      	it	eq
 800038a:	4770      	bxeq	lr
 800038c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000390:	4601      	mov	r1, r0
 8000392:	f04f 0000 	mov.w	r0, #0
 8000396:	e01c      	b.n	80003d2 <__aeabi_l2f+0x2a>

08000398 <__aeabi_ul2f>:
 8000398:	ea50 0201 	orrs.w	r2, r0, r1
 800039c:	bf08      	it	eq
 800039e:	4770      	bxeq	lr
 80003a0:	f04f 0300 	mov.w	r3, #0
 80003a4:	e00a      	b.n	80003bc <__aeabi_l2f+0x14>
 80003a6:	bf00      	nop

080003a8 <__aeabi_l2f>:
 80003a8:	ea50 0201 	orrs.w	r2, r0, r1
 80003ac:	bf08      	it	eq
 80003ae:	4770      	bxeq	lr
 80003b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003b4:	d502      	bpl.n	80003bc <__aeabi_l2f+0x14>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	ea5f 0c01 	movs.w	ip, r1
 80003c0:	bf02      	ittt	eq
 80003c2:	4684      	moveq	ip, r0
 80003c4:	4601      	moveq	r1, r0
 80003c6:	2000      	moveq	r0, #0
 80003c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003cc:	bf08      	it	eq
 80003ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003d6:	fabc f28c 	clz	r2, ip
 80003da:	3a08      	subs	r2, #8
 80003dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003e0:	db10      	blt.n	8000404 <__aeabi_l2f+0x5c>
 80003e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003e6:	4463      	add	r3, ip
 80003e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003ec:	f1c2 0220 	rsb	r2, r2, #32
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	fa20 f202 	lsr.w	r2, r0, r2
 80003f8:	eb43 0002 	adc.w	r0, r3, r2
 80003fc:	bf08      	it	eq
 80003fe:	f020 0001 	biceq.w	r0, r0, #1
 8000402:	4770      	bx	lr
 8000404:	f102 0220 	add.w	r2, r2, #32
 8000408:	fa01 fc02 	lsl.w	ip, r1, r2
 800040c:	f1c2 0220 	rsb	r2, r2, #32
 8000410:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000414:	fa21 f202 	lsr.w	r2, r1, r2
 8000418:	eb43 0002 	adc.w	r0, r3, r2
 800041c:	bf08      	it	eq
 800041e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000422:	4770      	bx	lr

08000424 <__aeabi_uldivmod>:
 8000424:	b953      	cbnz	r3, 800043c <__aeabi_uldivmod+0x18>
 8000426:	b94a      	cbnz	r2, 800043c <__aeabi_uldivmod+0x18>
 8000428:	2900      	cmp	r1, #0
 800042a:	bf08      	it	eq
 800042c:	2800      	cmpeq	r0, #0
 800042e:	bf1c      	itt	ne
 8000430:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000434:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000438:	f000 b974 	b.w	8000724 <__aeabi_idiv0>
 800043c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000440:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	f8dd e004 	ldr.w	lr, [sp, #4]
 800044c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000450:	b004      	add	sp, #16
 8000452:	4770      	bx	lr

08000454 <__udivmoddi4>:
 8000454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000458:	9d08      	ldr	r5, [sp, #32]
 800045a:	4604      	mov	r4, r0
 800045c:	468e      	mov	lr, r1
 800045e:	2b00      	cmp	r3, #0
 8000460:	d14d      	bne.n	80004fe <__udivmoddi4+0xaa>
 8000462:	428a      	cmp	r2, r1
 8000464:	4694      	mov	ip, r2
 8000466:	d969      	bls.n	800053c <__udivmoddi4+0xe8>
 8000468:	fab2 f282 	clz	r2, r2
 800046c:	b152      	cbz	r2, 8000484 <__udivmoddi4+0x30>
 800046e:	fa01 f302 	lsl.w	r3, r1, r2
 8000472:	f1c2 0120 	rsb	r1, r2, #32
 8000476:	fa20 f101 	lsr.w	r1, r0, r1
 800047a:	fa0c fc02 	lsl.w	ip, ip, r2
 800047e:	ea41 0e03 	orr.w	lr, r1, r3
 8000482:	4094      	lsls	r4, r2
 8000484:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000488:	0c21      	lsrs	r1, r4, #16
 800048a:	fbbe f6f8 	udiv	r6, lr, r8
 800048e:	fa1f f78c 	uxth.w	r7, ip
 8000492:	fb08 e316 	mls	r3, r8, r6, lr
 8000496:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800049a:	fb06 f107 	mul.w	r1, r6, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d90a      	bls.n	80004b8 <__udivmoddi4+0x64>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80004aa:	f080 811f 	bcs.w	80006ec <__udivmoddi4+0x298>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 811c 	bls.w	80006ec <__udivmoddi4+0x298>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c8:	fb00 f707 	mul.w	r7, r0, r7
 80004cc:	42a7      	cmp	r7, r4
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x92>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d8:	f080 810a 	bcs.w	80006f0 <__udivmoddi4+0x29c>
 80004dc:	42a7      	cmp	r7, r4
 80004de:	f240 8107 	bls.w	80006f0 <__udivmoddi4+0x29c>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ea:	1be4      	subs	r4, r4, r7
 80004ec:	2600      	movs	r6, #0
 80004ee:	b11d      	cbz	r5, 80004f8 <__udivmoddi4+0xa4>
 80004f0:	40d4      	lsrs	r4, r2
 80004f2:	2300      	movs	r3, #0
 80004f4:	e9c5 4300 	strd	r4, r3, [r5]
 80004f8:	4631      	mov	r1, r6
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	428b      	cmp	r3, r1
 8000500:	d909      	bls.n	8000516 <__udivmoddi4+0xc2>
 8000502:	2d00      	cmp	r5, #0
 8000504:	f000 80ef 	beq.w	80006e6 <__udivmoddi4+0x292>
 8000508:	2600      	movs	r6, #0
 800050a:	e9c5 0100 	strd	r0, r1, [r5]
 800050e:	4630      	mov	r0, r6
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	fab3 f683 	clz	r6, r3
 800051a:	2e00      	cmp	r6, #0
 800051c:	d14a      	bne.n	80005b4 <__udivmoddi4+0x160>
 800051e:	428b      	cmp	r3, r1
 8000520:	d302      	bcc.n	8000528 <__udivmoddi4+0xd4>
 8000522:	4282      	cmp	r2, r0
 8000524:	f200 80f9 	bhi.w	800071a <__udivmoddi4+0x2c6>
 8000528:	1a84      	subs	r4, r0, r2
 800052a:	eb61 0303 	sbc.w	r3, r1, r3
 800052e:	2001      	movs	r0, #1
 8000530:	469e      	mov	lr, r3
 8000532:	2d00      	cmp	r5, #0
 8000534:	d0e0      	beq.n	80004f8 <__udivmoddi4+0xa4>
 8000536:	e9c5 4e00 	strd	r4, lr, [r5]
 800053a:	e7dd      	b.n	80004f8 <__udivmoddi4+0xa4>
 800053c:	b902      	cbnz	r2, 8000540 <__udivmoddi4+0xec>
 800053e:	deff      	udf	#255	; 0xff
 8000540:	fab2 f282 	clz	r2, r2
 8000544:	2a00      	cmp	r2, #0
 8000546:	f040 8092 	bne.w	800066e <__udivmoddi4+0x21a>
 800054a:	eba1 010c 	sub.w	r1, r1, ip
 800054e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000552:	fa1f fe8c 	uxth.w	lr, ip
 8000556:	2601      	movs	r6, #1
 8000558:	0c20      	lsrs	r0, r4, #16
 800055a:	fbb1 f3f7 	udiv	r3, r1, r7
 800055e:	fb07 1113 	mls	r1, r7, r3, r1
 8000562:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000566:	fb0e f003 	mul.w	r0, lr, r3
 800056a:	4288      	cmp	r0, r1
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x12c>
 800056e:	eb1c 0101 	adds.w	r1, ip, r1
 8000572:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000576:	d202      	bcs.n	800057e <__udivmoddi4+0x12a>
 8000578:	4288      	cmp	r0, r1
 800057a:	f200 80cb 	bhi.w	8000714 <__udivmoddi4+0x2c0>
 800057e:	4643      	mov	r3, r8
 8000580:	1a09      	subs	r1, r1, r0
 8000582:	b2a4      	uxth	r4, r4
 8000584:	fbb1 f0f7 	udiv	r0, r1, r7
 8000588:	fb07 1110 	mls	r1, r7, r0, r1
 800058c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000590:	fb0e fe00 	mul.w	lr, lr, r0
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x156>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005a0:	d202      	bcs.n	80005a8 <__udivmoddi4+0x154>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	f200 80bb 	bhi.w	800071e <__udivmoddi4+0x2ca>
 80005a8:	4608      	mov	r0, r1
 80005aa:	eba4 040e 	sub.w	r4, r4, lr
 80005ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005b2:	e79c      	b.n	80004ee <__udivmoddi4+0x9a>
 80005b4:	f1c6 0720 	rsb	r7, r6, #32
 80005b8:	40b3      	lsls	r3, r6
 80005ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80005be:	ea4c 0c03 	orr.w	ip, ip, r3
 80005c2:	fa20 f407 	lsr.w	r4, r0, r7
 80005c6:	fa01 f306 	lsl.w	r3, r1, r6
 80005ca:	431c      	orrs	r4, r3
 80005cc:	40f9      	lsrs	r1, r7
 80005ce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005d2:	fa00 f306 	lsl.w	r3, r0, r6
 80005d6:	fbb1 f8f9 	udiv	r8, r1, r9
 80005da:	0c20      	lsrs	r0, r4, #16
 80005dc:	fa1f fe8c 	uxth.w	lr, ip
 80005e0:	fb09 1118 	mls	r1, r9, r8, r1
 80005e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005e8:	fb08 f00e 	mul.w	r0, r8, lr
 80005ec:	4288      	cmp	r0, r1
 80005ee:	fa02 f206 	lsl.w	r2, r2, r6
 80005f2:	d90b      	bls.n	800060c <__udivmoddi4+0x1b8>
 80005f4:	eb1c 0101 	adds.w	r1, ip, r1
 80005f8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80005fc:	f080 8088 	bcs.w	8000710 <__udivmoddi4+0x2bc>
 8000600:	4288      	cmp	r0, r1
 8000602:	f240 8085 	bls.w	8000710 <__udivmoddi4+0x2bc>
 8000606:	f1a8 0802 	sub.w	r8, r8, #2
 800060a:	4461      	add	r1, ip
 800060c:	1a09      	subs	r1, r1, r0
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb1 f0f9 	udiv	r0, r1, r9
 8000614:	fb09 1110 	mls	r1, r9, r0, r1
 8000618:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800061c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000620:	458e      	cmp	lr, r1
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x1e2>
 8000624:	eb1c 0101 	adds.w	r1, ip, r1
 8000628:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800062c:	d26c      	bcs.n	8000708 <__udivmoddi4+0x2b4>
 800062e:	458e      	cmp	lr, r1
 8000630:	d96a      	bls.n	8000708 <__udivmoddi4+0x2b4>
 8000632:	3802      	subs	r0, #2
 8000634:	4461      	add	r1, ip
 8000636:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800063a:	fba0 9402 	umull	r9, r4, r0, r2
 800063e:	eba1 010e 	sub.w	r1, r1, lr
 8000642:	42a1      	cmp	r1, r4
 8000644:	46c8      	mov	r8, r9
 8000646:	46a6      	mov	lr, r4
 8000648:	d356      	bcc.n	80006f8 <__udivmoddi4+0x2a4>
 800064a:	d053      	beq.n	80006f4 <__udivmoddi4+0x2a0>
 800064c:	b15d      	cbz	r5, 8000666 <__udivmoddi4+0x212>
 800064e:	ebb3 0208 	subs.w	r2, r3, r8
 8000652:	eb61 010e 	sbc.w	r1, r1, lr
 8000656:	fa01 f707 	lsl.w	r7, r1, r7
 800065a:	fa22 f306 	lsr.w	r3, r2, r6
 800065e:	40f1      	lsrs	r1, r6
 8000660:	431f      	orrs	r7, r3
 8000662:	e9c5 7100 	strd	r7, r1, [r5]
 8000666:	2600      	movs	r6, #0
 8000668:	4631      	mov	r1, r6
 800066a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066e:	f1c2 0320 	rsb	r3, r2, #32
 8000672:	40d8      	lsrs	r0, r3
 8000674:	fa0c fc02 	lsl.w	ip, ip, r2
 8000678:	fa21 f303 	lsr.w	r3, r1, r3
 800067c:	4091      	lsls	r1, r2
 800067e:	4301      	orrs	r1, r0
 8000680:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000684:	fa1f fe8c 	uxth.w	lr, ip
 8000688:	fbb3 f0f7 	udiv	r0, r3, r7
 800068c:	fb07 3610 	mls	r6, r7, r0, r3
 8000690:	0c0b      	lsrs	r3, r1, #16
 8000692:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000696:	fb00 f60e 	mul.w	r6, r0, lr
 800069a:	429e      	cmp	r6, r3
 800069c:	fa04 f402 	lsl.w	r4, r4, r2
 80006a0:	d908      	bls.n	80006b4 <__udivmoddi4+0x260>
 80006a2:	eb1c 0303 	adds.w	r3, ip, r3
 80006a6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80006aa:	d22f      	bcs.n	800070c <__udivmoddi4+0x2b8>
 80006ac:	429e      	cmp	r6, r3
 80006ae:	d92d      	bls.n	800070c <__udivmoddi4+0x2b8>
 80006b0:	3802      	subs	r0, #2
 80006b2:	4463      	add	r3, ip
 80006b4:	1b9b      	subs	r3, r3, r6
 80006b6:	b289      	uxth	r1, r1
 80006b8:	fbb3 f6f7 	udiv	r6, r3, r7
 80006bc:	fb07 3316 	mls	r3, r7, r6, r3
 80006c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006c4:	fb06 f30e 	mul.w	r3, r6, lr
 80006c8:	428b      	cmp	r3, r1
 80006ca:	d908      	bls.n	80006de <__udivmoddi4+0x28a>
 80006cc:	eb1c 0101 	adds.w	r1, ip, r1
 80006d0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80006d4:	d216      	bcs.n	8000704 <__udivmoddi4+0x2b0>
 80006d6:	428b      	cmp	r3, r1
 80006d8:	d914      	bls.n	8000704 <__udivmoddi4+0x2b0>
 80006da:	3e02      	subs	r6, #2
 80006dc:	4461      	add	r1, ip
 80006de:	1ac9      	subs	r1, r1, r3
 80006e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006e4:	e738      	b.n	8000558 <__udivmoddi4+0x104>
 80006e6:	462e      	mov	r6, r5
 80006e8:	4628      	mov	r0, r5
 80006ea:	e705      	b.n	80004f8 <__udivmoddi4+0xa4>
 80006ec:	4606      	mov	r6, r0
 80006ee:	e6e3      	b.n	80004b8 <__udivmoddi4+0x64>
 80006f0:	4618      	mov	r0, r3
 80006f2:	e6f8      	b.n	80004e6 <__udivmoddi4+0x92>
 80006f4:	454b      	cmp	r3, r9
 80006f6:	d2a9      	bcs.n	800064c <__udivmoddi4+0x1f8>
 80006f8:	ebb9 0802 	subs.w	r8, r9, r2
 80006fc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000700:	3801      	subs	r0, #1
 8000702:	e7a3      	b.n	800064c <__udivmoddi4+0x1f8>
 8000704:	4646      	mov	r6, r8
 8000706:	e7ea      	b.n	80006de <__udivmoddi4+0x28a>
 8000708:	4620      	mov	r0, r4
 800070a:	e794      	b.n	8000636 <__udivmoddi4+0x1e2>
 800070c:	4640      	mov	r0, r8
 800070e:	e7d1      	b.n	80006b4 <__udivmoddi4+0x260>
 8000710:	46d0      	mov	r8, sl
 8000712:	e77b      	b.n	800060c <__udivmoddi4+0x1b8>
 8000714:	3b02      	subs	r3, #2
 8000716:	4461      	add	r1, ip
 8000718:	e732      	b.n	8000580 <__udivmoddi4+0x12c>
 800071a:	4630      	mov	r0, r6
 800071c:	e709      	b.n	8000532 <__udivmoddi4+0xde>
 800071e:	4464      	add	r4, ip
 8000720:	3802      	subs	r0, #2
 8000722:	e742      	b.n	80005aa <__udivmoddi4+0x156>

08000724 <__aeabi_idiv0>:
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop

08000728 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800073e:	b2db      	uxtb	r3, r3
 8000740:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6858      	ldr	r0, [r3, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	8adb      	ldrh	r3, [r3, #22]
 800074a:	2200      	movs	r2, #0
 800074c:	4619      	mov	r1, r3
 800074e:	f002 f9f7 	bl	8002b40 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6818      	ldr	r0, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	1cf9      	adds	r1, r7, #3
 800075c:	2201      	movs	r2, #1
 800075e:	f004 fa54 	bl	8004c0a <HAL_SPI_Transmit>
 8000762:	4603      	mov	r3, r0
 8000764:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	f107 010f 	add.w	r1, r7, #15
 8000772:	2201      	movs	r2, #1
 8000774:	f004 fb85 	bl	8004e82 <HAL_SPI_Receive>
 8000778:	4603      	mov	r3, r0
 800077a:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6858      	ldr	r0, [r3, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	8adb      	ldrh	r3, [r3, #22]
 8000784:	2201      	movs	r2, #1
 8000786:	4619      	mov	r1, r3
 8000788:	f002 f9da 	bl	8002b40 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 800078c:	7bfb      	ldrb	r3, [r7, #15]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b084      	sub	sp, #16
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	460b      	mov	r3, r1
 80007a0:	70fb      	strb	r3, [r7, #3]
 80007a2:	4613      	mov	r3, r2
 80007a4:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007ac:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 80007ae:	78bb      	ldrb	r3, [r7, #2]
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	78fb      	ldrb	r3, [r7, #3]
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	4313      	orrs	r3, r2
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	b29b      	uxth	r3, r3
 80007be:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6858      	ldr	r0, [r3, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	8adb      	ldrh	r3, [r3, #22]
 80007c8:	2200      	movs	r2, #0
 80007ca:	4619      	mov	r1, r3
 80007cc:	f002 f9b8 	bl	8002b40 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	f107 010a 	add.w	r1, r7, #10
 80007dc:	2202      	movs	r2, #2
 80007de:	f004 fa14 	bl	8004c0a <HAL_SPI_Transmit>
 80007e2:	4603      	mov	r3, r0
 80007e4:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6858      	ldr	r0, [r3, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	8adb      	ldrh	r3, [r3, #22]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4619      	mov	r1, r3
 80007f2:	f002 f9a5 	bl	8002b40 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b088      	sub	sp, #32
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	4611      	mov	r1, r2
 800080a:	461a      	mov	r2, r3
 800080c:	460b      	mov	r3, r1
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	4613      	mov	r3, r2
 8000812:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	6858      	ldr	r0, [r3, #4]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	8adb      	ldrh	r3, [r3, #22]
 8000820:	2200      	movs	r2, #0
 8000822:	4619      	mov	r1, r3
 8000824:	f002 f98c 	bl	8002b40 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	6818      	ldr	r0, [r3, #0]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	f107 0117 	add.w	r1, r7, #23
 8000834:	2201      	movs	r2, #1
 8000836:	f004 f9e8 	bl	8004c0a <HAL_SPI_Transmit>
 800083a:	4603      	mov	r3, r0
 800083c:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 800083e:	79bb      	ldrb	r3, [r7, #6]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d108      	bne.n	8000856 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	79fa      	ldrb	r2, [r7, #7]
 800084a:	b292      	uxth	r2, r2
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	4618      	mov	r0, r3
 8000850:	f004 fdca 	bl	80053e8 <HAL_SPI_Transmit_DMA>
 8000854:	e012      	b.n	800087c <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	6818      	ldr	r0, [r3, #0]
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	b29a      	uxth	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	68b9      	ldr	r1, [r7, #8]
 8000864:	f004 f9d1 	bl	8004c0a <HAL_SPI_Transmit>
 8000868:	4603      	mov	r3, r0
 800086a:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	6858      	ldr	r0, [r3, #4]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	8adb      	ldrh	r3, [r3, #22]
 8000874:	2201      	movs	r2, #1
 8000876:	4619      	mov	r1, r3
 8000878:	f002 f962 	bl	8002b40 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 800087c:	3720      	adds	r7, #32
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
 800088a:	460b      	mov	r3, r1
 800088c:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000894:	b2db      	uxtb	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	2101      	movs	r1, #1
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ff7b 	bl	8000796 <write_register>
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	2b2c      	cmp	r3, #44	; 0x2c
 80008b8:	d801      	bhi.n	80008be <set_OCP+0x16>
    imax = 45;
 80008ba:	232d      	movs	r3, #45	; 0x2d
 80008bc:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	2bf0      	cmp	r3, #240	; 0xf0
 80008c2:	d901      	bls.n	80008c8 <set_OCP+0x20>
    imax = 240;
 80008c4:	23f0      	movs	r3, #240	; 0xf0
 80008c6:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	2b81      	cmp	r3, #129	; 0x81
 80008cc:	d809      	bhi.n	80008e2 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	3b2d      	subs	r3, #45	; 0x2d
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <set_OCP+0x68>)
 80008d4:	fb82 1203 	smull	r1, r2, r2, r3
 80008d8:	1052      	asrs	r2, r2, #1
 80008da:	17db      	asrs	r3, r3, #31
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	73fb      	strb	r3, [r7, #15]
 80008e0:	e008      	b.n	80008f4 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	331e      	adds	r3, #30
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <set_OCP+0x68>)
 80008e8:	fb82 1203 	smull	r1, r2, r2, r3
 80008ec:	1092      	asrs	r2, r2, #2
 80008ee:	17db      	asrs	r3, r3, #31
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	f043 0320 	orr.w	r3, r3, #32
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	210b      	movs	r1, #11
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff48 	bl	8000796 <write_register>
}
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	66666667 	.word	0x66666667

08000914 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8000914:	b5b0      	push	{r4, r5, r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 800091c:	211d      	movs	r1, #29
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ff02 	bl	8000728 <read_register>
 8000924:	4603      	mov	r3, r0
 8000926:	091b      	lsrs	r3, r3, #4
 8000928:	b2db      	uxtb	r3, r3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2200      	movs	r2, #0
 800092e:	461c      	mov	r4, r3
 8000930:	4615      	mov	r5, r2
 8000932:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8000936:	211e      	movs	r1, #30
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff fef5 	bl	8000728 <read_register>
 800093e:	4603      	mov	r3, r0
 8000940:	091b      	lsrs	r3, r3, #4
 8000942:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8000944:	2304      	movs	r3, #4
 8000946:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2b0a      	cmp	r3, #10
 800094c:	d908      	bls.n	8000960 <set_low_data_rate_optimization+0x4c>
 800094e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000952:	1fd1      	subs	r1, r2, #7
 8000954:	430b      	orrs	r3, r1
 8000956:	d103      	bne.n	8000960 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8000958:	7ffb      	ldrb	r3, [r7, #31]
 800095a:	f043 0308 	orr.w	r3, r3, #8
 800095e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8000960:	7ffb      	ldrb	r3, [r7, #31]
 8000962:	461a      	mov	r2, r3
 8000964:	2126      	movs	r1, #38	; 0x26
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ff15 	bl	8000796 <write_register>
}
 800096c:	bf00      	nop
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bdb0      	pop	{r4, r5, r7, pc}

08000974 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 800097c:	2100      	movs	r1, #0
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ff7f 	bl	8000882 <set_mode>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8000994:	2101      	movs	r1, #1
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ff73 	bl	8000882 <set_mode>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80009ac:	211d      	movs	r1, #29
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff feba 	bl	8000728 <read_register>
 80009b4:	4603      	mov	r3, r0
 80009b6:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	f023 0301 	bic.w	r3, r3, #1
 80009be:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	461a      	mov	r2, r3
 80009c4:	211d      	movs	r1, #29
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff fee5 	bl	8000796 <write_register>
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	691b      	ldr	r3, [r3, #16]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d10e      	bne.n	8000a06 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	2b0f      	cmp	r3, #15
 80009ec:	d901      	bls.n	80009f2 <lora_set_tx_power+0x1e>
      level = 15;
 80009ee:	230f      	movs	r3, #15
 80009f0:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80009f2:	78fb      	ldrb	r3, [r7, #3]
 80009f4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	461a      	mov	r2, r3
 80009fc:	2109      	movs	r1, #9
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff fec9 	bl	8000796 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8000a04:	e02e      	b.n	8000a64 <lora_set_tx_power+0x90>
    if (level > 20) {
 8000a06:	78fb      	ldrb	r3, [r7, #3]
 8000a08:	2b14      	cmp	r3, #20
 8000a0a:	d901      	bls.n	8000a10 <lora_set_tx_power+0x3c>
      level = 20;
 8000a0c:	2314      	movs	r3, #20
 8000a0e:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8000a10:	78fb      	ldrb	r3, [r7, #3]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d801      	bhi.n	8000a1a <lora_set_tx_power+0x46>
      level = 2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8000a1a:	78fb      	ldrb	r3, [r7, #3]
 8000a1c:	2b11      	cmp	r3, #17
 8000a1e:	d90c      	bls.n	8000a3a <lora_set_tx_power+0x66>
      level -= 3;
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	3b03      	subs	r3, #3
 8000a24:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8000a26:	2287      	movs	r2, #135	; 0x87
 8000a28:	214d      	movs	r1, #77	; 0x4d
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff feb3 	bl	8000796 <write_register>
      set_OCP(lora, 140);
 8000a30:	218c      	movs	r1, #140	; 0x8c
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ff38 	bl	80008a8 <set_OCP>
 8000a38:	e008      	b.n	8000a4c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8000a3a:	2284      	movs	r2, #132	; 0x84
 8000a3c:	214d      	movs	r1, #77	; 0x4d
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff fea9 	bl	8000796 <write_register>
      set_OCP(lora, 97);
 8000a44:	2161      	movs	r1, #97	; 0x61
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ff2e 	bl	80008a8 <set_OCP>
    level -= 2;
 8000a4c:	78fb      	ldrb	r3, [r7, #3]
 8000a4e:	3b02      	subs	r3, #2
 8000a50:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8000a52:	78fb      	ldrb	r3, [r7, #3]
 8000a54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	2109      	movs	r1, #9
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff fe99 	bl	8000796 <write_register>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8000a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	f04f 0100 	mov.w	r1, #0
 8000a84:	04d9      	lsls	r1, r3, #19
 8000a86:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000a8a:	04d0      	lsls	r0, r2, #19
 8000a8c:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <lora_set_frequency+0x88>)
 8000a8e:	f04f 0300 	mov.w	r3, #0
 8000a92:	f7ff fcc7 	bl	8000424 <__aeabi_uldivmod>
 8000a96:	4602      	mov	r2, r0
 8000a98:	460b      	mov	r3, r1
 8000a9a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8000a9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000aa2:	f04f 0200 	mov.w	r2, #0
 8000aa6:	f04f 0300 	mov.w	r3, #0
 8000aaa:	0c02      	lsrs	r2, r0, #16
 8000aac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ab0:	0c0b      	lsrs	r3, r1, #16
 8000ab2:	b2d3      	uxtb	r3, r2
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	2106      	movs	r1, #6
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f7ff fe6c 	bl	8000796 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8000abe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ac2:	f04f 0200 	mov.w	r2, #0
 8000ac6:	f04f 0300 	mov.w	r3, #0
 8000aca:	0a02      	lsrs	r2, r0, #8
 8000acc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000ad0:	0a0b      	lsrs	r3, r1, #8
 8000ad2:	b2d3      	uxtb	r3, r2
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	2107      	movs	r1, #7
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff fe5c 	bl	8000796 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8000ade:	7c3b      	ldrb	r3, [r7, #16]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	2108      	movs	r1, #8
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 8000ae6:	f7ff fe56 	bl	8000796 <write_register>
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	01e84800 	.word	0x01e84800

08000af8 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8000b04:	78fb      	ldrb	r3, [r7, #3]
 8000b06:	2b05      	cmp	r3, #5
 8000b08:	d802      	bhi.n	8000b10 <lora_set_spreading_factor+0x18>
    sf = 6;
 8000b0a:	2306      	movs	r3, #6
 8000b0c:	70fb      	strb	r3, [r7, #3]
 8000b0e:	e004      	b.n	8000b1a <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	2b0c      	cmp	r3, #12
 8000b14:	d901      	bls.n	8000b1a <lora_set_spreading_factor+0x22>
    sf = 12;
 8000b16:	230c      	movs	r3, #12
 8000b18:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8000b1a:	78fb      	ldrb	r3, [r7, #3]
 8000b1c:	2b06      	cmp	r3, #6
 8000b1e:	d10a      	bne.n	8000b36 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8000b20:	22c5      	movs	r2, #197	; 0xc5
 8000b22:	2131      	movs	r1, #49	; 0x31
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff fe36 	bl	8000796 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	2137      	movs	r1, #55	; 0x37
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff fe31 	bl	8000796 <write_register>
 8000b34:	e009      	b.n	8000b4a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8000b36:	22c3      	movs	r2, #195	; 0xc3
 8000b38:	2131      	movs	r1, #49	; 0x31
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff fe2b 	bl	8000796 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000b40:	220a      	movs	r2, #10
 8000b42:	2137      	movs	r1, #55	; 0x37
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff fe26 	bl	8000796 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8000b4a:	211e      	movs	r1, #30
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff fdeb 	bl	8000728 <read_register>
 8000b52:	4603      	mov	r3, r0
 8000b54:	73fb      	strb	r3, [r7, #15]
  mc2 |= sf << 4;
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	011b      	lsls	r3, r3, #4
 8000b5a:	b25a      	sxtb	r2, r3
 8000b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	b25b      	sxtb	r3, r3
 8000b64:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	211e      	movs	r1, #30
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff fe12 	bl	8000796 <write_register>

  set_low_data_rate_optimization(lora);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff fece 	bl	8000914 <set_low_data_rate_optimization>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8000b8c:	887b      	ldrh	r3, [r7, #2]
 8000b8e:	0a1b      	lsrs	r3, r3, #8
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	2120      	movs	r1, #32
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fdfc 	bl	8000796 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	461a      	mov	r2, r3
 8000baa:	2121      	movs	r1, #33	; 0x21
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fdf2 	bl	8000796 <write_register>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <lora_is_transmitting>:

  return read_register(lora, REG_VERSION);
}

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fdaf 	bl	8000728 <read_register>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d101      	bne.n	8000bdc <lora_is_transmitting+0x22>
 8000bd8:	2305      	movs	r3, #5
 8000bda:	e000      	b.n	8000bde <lora_is_transmitting+0x24>
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b084      	sub	sp, #16
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f7ff ffdc 	bl	8000bba <lora_is_transmitting>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8000c08:	2305      	movs	r3, #5
 8000c0a:	e02a      	b.n	8000c62 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	68f8      	ldr	r0, [r7, #12]
 8000c10:	f7ff fe37 	bl	8000882 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f000 f83a 	bl	8000c8e <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	7d1b      	ldrb	r3, [r3, #20]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	210d      	movs	r1, #13
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f7ff fdb7 	bl	8000796 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	7d1b      	ldrb	r3, [r3, #20]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	210e      	movs	r1, #14
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f7ff fdb0 	bl	8000796 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	2122      	movs	r1, #34	; 0x22
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	f7ff fdaa 	bl	8000796 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	79fa      	ldrb	r2, [r7, #7]
 8000c46:	68b9      	ldr	r1, [r7, #8]
 8000c48:	68f8      	ldr	r0, [r7, #12]
 8000c4a:	f7ff fdd8 	bl	80007fe <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8000c4e:	79bb      	ldrb	r3, [r7, #6]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d101      	bne.n	8000c58 <lora_send_packet_base+0x72>
    return LORA_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	e004      	b.n	8000c62 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8000c58:	2103      	movs	r1, #3
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f7ff fe11 	bl	8000882 <set_mode>
  return LORA_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b084      	sub	sp, #16
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	4613      	mov	r3, r2
 8000c76:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8000c78:	79fa      	ldrb	r2, [r7, #7]
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f7ff ffb1 	bl	8000be6 <lora_send_packet_base>
 8000c84:	4603      	mov	r3, r0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8000c96:	2208      	movs	r2, #8
 8000c98:	2112      	movs	r1, #18
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fd7b 	bl	8000796 <write_register>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	807b      	strh	r3, [r7, #2]

  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	68ba      	ldr	r2, [r7, #8]
 8000cba:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	887a      	ldrh	r2, [r7, #2]
 8000cc6:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000cc8:	6a3a      	ldr	r2, [r7, #32]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ce6:	609a      	str	r2, [r3, #8]
    return LORA_ERROR;
  }
#endif

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	f7ff fe43 	bl	8000974 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f7ff fe40 	bl	8000974 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000cf4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000cf8:	68f8      	ldr	r0, [r7, #12]
 8000cfa:	f7ff feb7 	bl	8000a6c <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000cfe:	2107      	movs	r1, #7
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f7ff fef9 	bl	8000af8 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000d06:	210a      	movs	r1, #10
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff ff39 	bl	8000b80 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	f7ff fe48 	bl	80009a4 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000d14:	210c      	movs	r1, #12
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f7ff fd06 	bl	8000728 <read_register>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	75fb      	strb	r3, [r7, #23]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	f043 0303 	orr.w	r3, r3, #3
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	461a      	mov	r2, r3
 8000d2a:	210c      	movs	r1, #12
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f7ff fd32 	bl	8000796 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000d32:	2204      	movs	r2, #4
 8000d34:	2126      	movs	r1, #38	; 0x26
 8000d36:	68f8      	ldr	r0, [r7, #12]
 8000d38:	f7ff fd2d 	bl	8000796 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000d3c:	2111      	movs	r1, #17
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f7ff fe48 	bl	80009d4 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	f7ff fe21 	bl	800098c <lora_mode_standby>

  return LORA_OK;
 8000d4a:	2300      	movs	r3, #0

}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int32_t timerVal;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  _running = false;
 8000d76:	4b48      	ldr	r3, [pc, #288]	; (8000e98 <main+0x128>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
  head_mov = 0;
 8000d7c:	4b47      	ldr	r3, [pc, #284]	; (8000e9c <main+0x12c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
  tail_mov = 1;
 8000d82:	4b47      	ldr	r3, [pc, #284]	; (8000ea0 <main+0x130>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
  head_full = 0;
 8000d88:	4b46      	ldr	r3, [pc, #280]	; (8000ea4 <main+0x134>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
  tail_full = 1;
 8000d8e:	4b46      	ldr	r3, [pc, #280]	; (8000ea8 <main+0x138>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]
  moving_sum = 0;
 8000d94:	4945      	ldr	r1, [pc, #276]	; (8000eac <main+0x13c>)
 8000d96:	f04f 0200 	mov.w	r2, #0
 8000d9a:	f04f 0300 	mov.w	r3, #0
 8000d9e:	e9c1 2300 	strd	r2, r3, [r1]
  moving_avg = 0;
 8000da2:	4b43      	ldr	r3, [pc, #268]	; (8000eb0 <main+0x140>)
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
  counter = 0;
 8000daa:	4b42      	ldr	r3, [pc, #264]	; (8000eb4 <main+0x144>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	801a      	strh	r2, [r3, #0]
  done = 0;
 8000db0:	4b41      	ldr	r3, [pc, #260]	; (8000eb8 <main+0x148>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*4); i++){
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	e007      	b.n	8000dcc <main+0x5c>
	  circular_buf_mov[i] = 0;
 8000dbc:	4a3f      	ldr	r2, [pc, #252]	; (8000ebc <main+0x14c>)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*4); i++){
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 8000dd2:	dbf3      	blt.n	8000dbc <main+0x4c>
  }
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*16); i++){
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	e007      	b.n	8000dea <main+0x7a>
	  circular_buf_full[i] = 0;
 8000dda:	4a39      	ldr	r2, [pc, #228]	; (8000ec0 <main+0x150>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4413      	add	r3, r2
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*16); i++){
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	3301      	adds	r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	f5b3 5f5c 	cmp.w	r3, #14080	; 0x3700
 8000df0:	dbf3      	blt.n	8000dda <main+0x6a>
  }
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET * 2); i++){
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	e007      	b.n	8000e08 <main+0x98>
	  _sampleBuffer[i] = 0;
 8000df8:	4a32      	ldr	r2, [pc, #200]	; (8000ec4 <main+0x154>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET * 2); i++){
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3301      	adds	r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8000e0e:	dbf3      	blt.n	8000df8 <main+0x88>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e10:	f000 ff58 	bl	8001cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e14:	f000 f866 	bl	8000ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e18:	f000 fa2e 	bl	8001278 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e1c:	f000 f91a 	bl	8001054 <MX_SPI1_Init>
  MX_DMA_Init();
 8000e20:	f000 f9f4 	bl	800120c <MX_DMA_Init>
  MX_UART4_Init();
 8000e24:	f000 f99e 	bl	8001164 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8000e28:	f000 f9c6 	bl	80011b8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e2c:	f000 f948 	bl	80010c0 <MX_TIM2_Init>
  MX_SAI1_Init();
 8000e30:	f000 f8c6 	bl	8000fc0 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000e34:	2108      	movs	r1, #8
 8000e36:	4824      	ldr	r0, [pc, #144]	; (8000ec8 <main+0x158>)
 8000e38:	f004 fdac 	bl	8005994 <HAL_TIM_IC_Start_IT>

  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2120      	movs	r1, #32
 8000e40:	4822      	ldr	r0, [pc, #136]	; (8000ecc <main+0x15c>)
 8000e42:	f001 fe7d 	bl	8002b40 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000e46:	2064      	movs	r0, #100	; 0x64
 8000e48:	f000 ffae 	bl	8001da8 <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2120      	movs	r1, #32
 8000e50:	481e      	ldr	r0, [pc, #120]	; (8000ecc <main+0x15c>)
 8000e52:	f001 fe75 	bl	8002b40 <HAL_GPIO_WritePin>

  uint8_t res = lora_init(&lora, &hspi1, NSS_GPIO_Port, NSS_Pin, LORA_BASE_FREQUENCY_US);
 8000e56:	a30e      	add	r3, pc, #56	; (adr r3, 8000e90 <main+0x120>)
 8000e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5c:	e9cd 2300 	strd	r2, r3, [sp]
 8000e60:	2301      	movs	r3, #1
 8000e62:	4a1b      	ldr	r2, [pc, #108]	; (8000ed0 <main+0x160>)
 8000e64:	491b      	ldr	r1, [pc, #108]	; (8000ed4 <main+0x164>)
 8000e66:	481c      	ldr	r0, [pc, #112]	; (8000ed8 <main+0x168>)
 8000e68:	f7ff ff1e 	bl	8000ca8 <lora_init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	70fb      	strb	r3, [r7, #3]
  HAL_Delay(100);
 8000e70:	2064      	movs	r0, #100	; 0x64
 8000e72:	f000 ff99 	bl	8001da8 <HAL_Delay>
  if (res != LORA_OK) {
 8000e76:	78fb      	ldrb	r3, [r7, #3]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d006      	beq.n	8000e8a <main+0x11a>
	  HAL_UART_Transmit(&huart2, iterfacing_failed, sizeof(iterfacing_failed), 1000);
 8000e7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e80:	2213      	movs	r2, #19
 8000e82:	4916      	ldr	r1, [pc, #88]	; (8000edc <main+0x16c>)
 8000e84:	4816      	ldr	r0, [pc, #88]	; (8000ee0 <main+0x170>)
 8000e86:	f005 fb46 	bl	8006516 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <main+0x11a>
 8000e8c:	f3af 8000 	nop.w
 8000e90:	3689cac0 	.word	0x3689cac0
 8000e94:	00000000 	.word	0x00000000
 8000e98:	20002c9c 	.word	0x20002c9c
 8000e9c:	20002284 	.word	0x20002284
 8000ea0:	20002288 	.word	0x20002288
 8000ea4:	20002c84 	.word	0x20002c84
 8000ea8:	20002c88 	.word	0x20002c88
 8000eac:	20002c90 	.word	0x20002c90
 8000eb0:	20002c98 	.word	0x20002c98
 8000eb4:	20002c9e 	.word	0x20002c9e
 8000eb8:	20002ca0 	.word	0x20002ca0
 8000ebc:	200021bc 	.word	0x200021bc
 8000ec0:	2000228c 	.word	0x2000228c
 8000ec4:	200002cc 	.word	0x200002cc
 8000ec8:	2000019c 	.word	0x2000019c
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	20000144 	.word	0x20000144
 8000ed8:	20002ca4 	.word	0x20002ca4
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000228 	.word	0x20000228

08000ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b094      	sub	sp, #80	; 0x50
 8000ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	2234      	movs	r2, #52	; 0x34
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f006 fb08 	bl	8007508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <SystemClock_Config+0xd4>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	4a29      	ldr	r2, [pc, #164]	; (8000fb8 <SystemClock_Config+0xd4>)
 8000f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f16:	6413      	str	r3, [r2, #64]	; 0x40
 8000f18:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <SystemClock_Config+0xd4>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f24:	2300      	movs	r3, #0
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <SystemClock_Config+0xd8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f30:	4a22      	ldr	r2, [pc, #136]	; (8000fbc <SystemClock_Config+0xd8>)
 8000f32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <SystemClock_Config+0xd8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f50:	2302      	movs	r3, #2
 8000f52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f54:	2300      	movs	r3, #0
 8000f56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f58:	2310      	movs	r3, #16
 8000f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f5c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f60:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f62:	2304      	movs	r3, #4
 8000f64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f66:	2302      	movs	r3, #2
 8000f68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 feba 	bl	8003cec <HAL_RCC_OscConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f7e:	f000 fbe3 	bl	8001748 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f82:	230f      	movs	r3, #15
 8000f84:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f86:	2302      	movs	r3, #2
 8000f88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 fde8 	bl	8002b74 <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000faa:	f000 fbcd 	bl	8001748 <Error_Handler>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3750      	adds	r7, #80	; 0x50
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40007000 	.word	0x40007000

08000fc0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <MX_SAI1_Init+0x84>)
 8000fc6:	4a20      	ldr	r2, [pc, #128]	; (8001048 <MX_SAI1_Init+0x88>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000fca:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <MX_SAI1_Init+0x84>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <MX_SAI1_Init+0x84>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <MX_SAI1_Init+0x84>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <MX_SAI1_Init+0x84>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <MX_SAI1_Init+0x84>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <MX_SAI1_Init+0x84>)
 8000fea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000fee:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <MX_SAI1_Init+0x84>)
 8000ff2:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000ff6:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <MX_SAI1_Init+0x84>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_SAI1_Init+0x84>)
 8001000:	2200      	movs	r2, #0
 8001002:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <MX_SAI1_Init+0x84>)
 8001006:	2200      	movs	r2, #0
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800100a:	2302      	movs	r3, #2
 800100c:	2202      	movs	r2, #2
 800100e:	2100      	movs	r1, #0
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <MX_SAI1_Init+0x84>)
 8001012:	f003 f909 	bl	8004228 <HAL_SAI_InitProtocol>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 800101c:	f000 fb94 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  if ((HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*) _sampleBuffer, MIC_SAMPLES_PER_PACKET * 2)) == HAL_OK) {
 8001020:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001024:	4909      	ldr	r1, [pc, #36]	; (800104c <MX_SAI1_Init+0x8c>)
 8001026:	4807      	ldr	r0, [pc, #28]	; (8001044 <MX_SAI1_Init+0x84>)
 8001028:	f003 fa5a 	bl	80044e0 <HAL_SAI_Receive_DMA>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d106      	bne.n	8001040 <MX_SAI1_Init+0x80>
	  HAL_Delay(1000);
 8001032:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001036:	f000 feb7 	bl	8001da8 <HAL_Delay>
	  _running = true;
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <MX_SAI1_Init+0x90>)
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END SAI1_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2000005c 	.word	0x2000005c
 8001048:	40015824 	.word	0x40015824
 800104c:	200002cc 	.word	0x200002cc
 8001050:	20002c9c 	.word	0x20002c9c

08001054 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <MX_SPI1_Init+0x64>)
 800105a:	4a18      	ldr	r2, [pc, #96]	; (80010bc <MX_SPI1_Init+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_SPI1_Init+0x64>)
 8001060:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001064:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_SPI1_Init+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_SPI1_Init+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_SPI1_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_SPI1_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_SPI1_Init+0x64>)
 8001080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001084:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_SPI1_Init+0x64>)
 8001088:	2238      	movs	r2, #56	; 0x38
 800108a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <MX_SPI1_Init+0x64>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_SPI1_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <MX_SPI1_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_SPI1_Init+0x64>)
 80010a0:	220a      	movs	r2, #10
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_SPI1_Init+0x64>)
 80010a6:	f003 fd27 	bl	8004af8 <HAL_SPI_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010b0:	f000 fb4a 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000144 	.word	0x20000144
 80010bc:	40013000 	.word	0x40013000

080010c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010d0:	463b      	mov	r3, r7
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010dc:	4b20      	ldr	r3, [pc, #128]	; (8001160 <MX_TIM2_Init+0xa0>)
 80010de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010e4:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <MX_TIM2_Init+0xa0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_TIM2_Init+0xa0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <MX_TIM2_Init+0xa0>)
 80010f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_TIM2_Init+0xa0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <MX_TIM2_Init+0xa0>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001104:	4816      	ldr	r0, [pc, #88]	; (8001160 <MX_TIM2_Init+0xa0>)
 8001106:	f004 fbf5 	bl	80058f4 <HAL_TIM_IC_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001110:	f000 fb1a 	bl	8001748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	4619      	mov	r1, r3
 8001122:	480f      	ldr	r0, [pc, #60]	; (8001160 <MX_TIM2_Init+0xa0>)
 8001124:	f005 f91a 	bl	800635c <HAL_TIMEx_MasterConfigSynchronization>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800112e:	f000 fb0b 	bl	8001748 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001136:	2301      	movs	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	2208      	movs	r2, #8
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_TIM2_Init+0xa0>)
 800114a:	f004 fe53 	bl	8005df4 <HAL_TIM_IC_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001154:	f000 faf8 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000019c 	.word	0x2000019c

08001164 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_UART4_Init+0x4c>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_UART4_Init+0x50>)
 800116c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_UART4_Init+0x4c>)
 8001170:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001174:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_UART4_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_UART4_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_UART4_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_UART4_Init+0x4c>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_UART4_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_UART4_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_UART4_Init+0x4c>)
 800119c:	f005 f96e 	bl	800647c <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80011a6:	f000 facf 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200001e4 	.word	0x200001e4
 80011b4:	40004c00 	.word	0x40004c00

080011b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <MX_USART2_UART_Init+0x50>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f005 f944 	bl	800647c <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011fa:	f000 faa5 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000228 	.word	0x20000228
 8001208:	40004400 	.word	0x40004400

0800120c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_DMA_Init+0x68>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a16      	ldr	r2, [pc, #88]	; (8001274 <MX_DMA_Init+0x68>)
 800121c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_DMA_Init+0x68>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_DMA_Init+0x68>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <MX_DMA_Init+0x68>)
 8001238:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <MX_DMA_Init+0x68>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	200d      	movs	r0, #13
 8001250:	f000 fea9 	bl	8001fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001254:	200d      	movs	r0, #13
 8001256:	f000 fec2 	bl	8001fde <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	203c      	movs	r0, #60	; 0x3c
 8001260:	f000 fea1 	bl	8001fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001264:	203c      	movs	r0, #60	; 0x3c
 8001266:	f000 feba 	bl	8001fde <HAL_NVIC_EnableIRQ>

}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800

08001278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b30      	ldr	r3, [pc, #192]	; (8001354 <MX_GPIO_Init+0xdc>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a2f      	ldr	r2, [pc, #188]	; (8001354 <MX_GPIO_Init+0xdc>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <MX_GPIO_Init+0xdc>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <MX_GPIO_Init+0xdc>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a28      	ldr	r2, [pc, #160]	; (8001354 <MX_GPIO_Init+0xdc>)
 80012b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <MX_GPIO_Init+0xdc>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <MX_GPIO_Init+0xdc>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a21      	ldr	r2, [pc, #132]	; (8001354 <MX_GPIO_Init+0xdc>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_GPIO_Init+0xdc>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_GPIO_Init+0xdc>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a1a      	ldr	r2, [pc, #104]	; (8001354 <MX_GPIO_Init+0xdc>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_GPIO_Init+0xdc>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2120      	movs	r1, #32
 8001302:	4815      	ldr	r0, [pc, #84]	; (8001358 <MX_GPIO_Init+0xe0>)
 8001304:	f001 fc1c 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2101      	movs	r1, #1
 800130c:	4813      	ldr	r0, [pc, #76]	; (800135c <MX_GPIO_Init+0xe4>)
 800130e:	f001 fc17 	bl	8002b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001312:	2320      	movs	r3, #32
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <MX_GPIO_Init+0xe0>)
 800132a:	f001 fa75 	bl	8002818 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 800132e:	2301      	movs	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_GPIO_Init+0xe4>)
 8001346:	f001 fa67 	bl	8002818 <HAL_GPIO_Init>

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40020800 	.word	0x40020800
 800135c:	40020400 	.word	0x40020400

08001360 <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	sendData(_sampleBuffer, _sendBuffer);
 8001368:	4903      	ldr	r1, [pc, #12]	; (8001378 <HAL_SAI_RxHalfCpltCallback+0x18>)
 800136a:	4804      	ldr	r0, [pc, #16]	; (800137c <HAL_SAI_RxHalfCpltCallback+0x1c>)
 800136c:	f000 f818 	bl	80013a0 <sendData>
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20001e4c 	.word	0x20001e4c
 800137c:	200002cc 	.word	0x200002cc

08001380 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	sendData(&_sampleBuffer[MIC_SAMPLES_PER_PACKET], &_sendBuffer[MIC_SAMPLES_PER_PACKET / 2]);
 8001388:	4903      	ldr	r1, [pc, #12]	; (8001398 <HAL_SAI_RxCpltCallback+0x18>)
 800138a:	4804      	ldr	r0, [pc, #16]	; (800139c <HAL_SAI_RxCpltCallback+0x1c>)
 800138c:	f000 f808 	bl	80013a0 <sendData>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20002004 	.word	0x20002004
 800139c:	2000108c 	.word	0x2000108c

080013a0 <sendData>:

void sendData(volatile int32_t *data_in, int8_t *data_out) {
 80013a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013a4:	f5ad 6d23 	sub.w	sp, sp, #2608	; 0xa30
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 80013ae:	f6a3 2324 	subw	r3, r3, #2596	; 0xa24
 80013b2:	6018      	str	r0, [r3, #0]
 80013b4:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 80013b8:	f6a3 2328 	subw	r3, r3, #2600	; 0xa28
 80013bc:	6019      	str	r1, [r3, #0]

  if (_running) {
 80013be:	4b82      	ldr	r3, [pc, #520]	; (80015c8 <sendData+0x228>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 81a3 	beq.w	800170e <sendData+0x36e>

      for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8a7 3a2e 	strh.w	r3, [r7, #2606]	; 0xa2e
 80013ce:	e198      	b.n	8001702 <sendData+0x362>

        int8_t sample = ((data_in[0]>>16) & 0xff);
 80013d0:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 80013d4:	f6a3 2324 	subw	r3, r3, #2596	; 0xa24
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	141b      	asrs	r3, r3, #16
 80013de:	f887 3a1b 	strb.w	r3, [r7, #2587]	; 0xa1b
        moving_sum += abs(sample);
 80013e2:	f997 3a1b 	ldrsb.w	r3, [r7, #2587]	; 0xa1b
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	bfb8      	it	lt
 80013ea:	425b      	neglt	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2200      	movs	r2, #0
 80013f2:	461c      	mov	r4, r3
 80013f4:	4615      	mov	r5, r2
 80013f6:	4b75      	ldr	r3, [pc, #468]	; (80015cc <sendData+0x22c>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	eb14 0a02 	adds.w	sl, r4, r2
 8001400:	eb45 0b03 	adc.w	fp, r5, r3
 8001404:	4b71      	ldr	r3, [pc, #452]	; (80015cc <sendData+0x22c>)
 8001406:	e9c3 ab00 	strd	sl, fp, [r3]
        moving_sum -= abs(circular_buf_mov[tail_mov]);
 800140a:	4b70      	ldr	r3, [pc, #448]	; (80015cc <sendData+0x22c>)
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	496f      	ldr	r1, [pc, #444]	; (80015d0 <sendData+0x230>)
 8001412:	6809      	ldr	r1, [r1, #0]
 8001414:	486f      	ldr	r0, [pc, #444]	; (80015d4 <sendData+0x234>)
 8001416:	5641      	ldrsb	r1, [r0, r1]
 8001418:	2900      	cmp	r1, #0
 800141a:	bfb8      	it	lt
 800141c:	4249      	neglt	r1, r1
 800141e:	b2c9      	uxtb	r1, r1
 8001420:	b2c9      	uxtb	r1, r1
 8001422:	2000      	movs	r0, #0
 8001424:	4688      	mov	r8, r1
 8001426:	4681      	mov	r9, r0
 8001428:	ebb2 0108 	subs.w	r1, r2, r8
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	eb63 0309 	sbc.w	r3, r3, r9
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	4b65      	ldr	r3, [pc, #404]	; (80015cc <sendData+0x22c>)
 8001436:	e9d7 1200 	ldrd	r1, r2, [r7]
 800143a:	e9c3 1200 	strd	r1, r2, [r3]
    	circular_buf_mov[tail_mov] = sample;
 800143e:	4b64      	ldr	r3, [pc, #400]	; (80015d0 <sendData+0x230>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4964      	ldr	r1, [pc, #400]	; (80015d4 <sendData+0x234>)
 8001444:	f897 2a1b 	ldrb.w	r2, [r7, #2587]	; 0xa1b
 8001448:	54ca      	strb	r2, [r1, r3]
    	circular_buf_full[tail_full] = sample;
 800144a:	4b63      	ldr	r3, [pc, #396]	; (80015d8 <sendData+0x238>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4963      	ldr	r1, [pc, #396]	; (80015dc <sendData+0x23c>)
 8001450:	f897 2a1b 	ldrb.w	r2, [r7, #2587]	; 0xa1b
 8001454:	54ca      	strb	r2, [r1, r3]
    	moving_avg = ((float) moving_sum)/(MOVING_AVG_LEN);
 8001456:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <sendData+0x22c>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f7fe ffa2 	bl	80003a8 <__aeabi_l2f>
 8001464:	ee06 0a90 	vmov	s13, r0
 8001468:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80015e0 <sendData+0x240>
 800146c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001470:	4b5c      	ldr	r3, [pc, #368]	; (80015e4 <sendData+0x244>)
 8001472:	edc3 7a00 	vstr	s15, [r3]


    	if ((counter > 0) && (!done)){
 8001476:	4b5c      	ldr	r3, [pc, #368]	; (80015e8 <sendData+0x248>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 80dc 	beq.w	8001638 <sendData+0x298>
 8001480:	4b5a      	ldr	r3, [pc, #360]	; (80015ec <sendData+0x24c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f040 80d7 	bne.w	8001638 <sendData+0x298>
    		counter++;
 800148a:	4b57      	ldr	r3, [pc, #348]	; (80015e8 <sendData+0x248>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b55      	ldr	r3, [pc, #340]	; (80015e8 <sendData+0x248>)
 8001494:	801a      	strh	r2, [r3, #0]
    		if (counter == (SEND_LEN-100)){
 8001496:	4b54      	ldr	r3, [pc, #336]	; (80015e8 <sendData+0x248>)
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	f640 1292 	movw	r2, #2450	; 0x992
 800149e:	4293      	cmp	r3, r2
 80014a0:	f040 80ca 	bne.w	8001638 <sendData+0x298>
    			if ((HAL_UART_Transmit(&huart2, circular_buf_full, tail_full, HAL_MAX_DELAY)) != HAL_OK){
    				Error_Handler();
    			}
    			*/

    			for(int delay = 0; delay < NODE_DELAY; delay++); // non-blocking delay used to offset the transmissions of each node to prevent garbled transmissions
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
 80014aa:	e004      	b.n	80014b6 <sendData+0x116>
 80014ac:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 80014b0:	3301      	adds	r3, #1
 80014b2:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
 80014b6:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	dbf6      	blt.n	80014ac <sendData+0x10c>
 80014be:	4b4c      	ldr	r3, [pc, #304]	; (80015f0 <sendData+0x250>)
 80014c0:	681b      	ldr	r3, [r3, #0]

    			uint8_t metaData[12];
    			memcpy(metaData, &timerVal, 4);
 80014c2:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
    			memcpy(metaData+4, &devID, 4);
 80014c6:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 80014ca:	3304      	adds	r3, #4
 80014cc:	4a49      	ldr	r2, [pc, #292]	; (80015f4 <sendData+0x254>)
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	601a      	str	r2, [r3, #0]
    			memcpy(metaData+8, &endPadding, 4);
 80014d2:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 80014d6:	3308      	adds	r3, #8
 80014d8:	4a47      	ldr	r2, [pc, #284]	; (80015f8 <sendData+0x258>)
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	601a      	str	r2, [r3, #0]

    			uint8_t packet_res = lora_send_packet(&lora, metaData, 12);
 80014de:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 80014e2:	220c      	movs	r2, #12
 80014e4:	4619      	mov	r1, r3
 80014e6:	4845      	ldr	r0, [pc, #276]	; (80015fc <sendData+0x25c>)
 80014e8:	f7ff fbbf 	bl	8000c6a <lora_send_packet>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f887 3a0b 	strb.w	r3, [r7, #2571]	; 0xa0b

    			if (packet_res != LORA_OK) {
 80014f2:	f897 3a0b 	ldrb.w	r3, [r7, #2571]	; 0xa0b
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d008      	beq.n	800150c <sendData+0x16c>
    				HAL_UART_Transmit(&huart2, &packet_res, sizeof(packet_res), 1000);
 80014fa:	f607 210b 	addw	r1, r7, #2571	; 0xa0b
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	2201      	movs	r2, #1
 8001504:	483e      	ldr	r0, [pc, #248]	; (8001600 <sendData+0x260>)
 8001506:	f005 f806 	bl	8006516 <HAL_UART_Transmit>
 800150a:	e006      	b.n	800151a <sendData+0x17a>
    			}
    			else {
    				HAL_UART_Transmit(&huart2, transmission_success, sizeof(transmission_success), 1000);
 800150c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001510:	2215      	movs	r2, #21
 8001512:	493c      	ldr	r1, [pc, #240]	; (8001604 <sendData+0x264>)
 8001514:	483a      	ldr	r0, [pc, #232]	; (8001600 <sendData+0x260>)
 8001516:	f004 fffe 	bl	8006516 <HAL_UART_Transmit>
    			}

    			for(int delay = 0; delay < 5000000; delay++); // non-blocking delay
 800151a:	2300      	movs	r3, #0
 800151c:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
 8001520:	e004      	b.n	800152c <sendData+0x18c>
 8001522:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 8001526:	3301      	adds	r3, #1
 8001528:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
 800152c:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 8001530:	4a35      	ldr	r2, [pc, #212]	; (8001608 <sendData+0x268>)
 8001532:	4293      	cmp	r3, r2
 8001534:	ddf5      	ble.n	8001522 <sendData+0x182>

    			uint8_t sendBuf[SEND_LEN];
    			memcpy(sendBuf, circular_buf_full+tail_full, (SEND_LEN)-tail_full);
 8001536:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <sendData+0x238>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a28      	ldr	r2, [pc, #160]	; (80015dc <sendData+0x23c>)
 800153c:	1899      	adds	r1, r3, r2
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <sendData+0x238>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f5c3 631f 	rsb	r3, r3, #2544	; 0x9f0
 8001546:	3306      	adds	r3, #6
 8001548:	f107 0014 	add.w	r0, r7, #20
 800154c:	461a      	mov	r2, r3
 800154e:	f005 ffcd 	bl	80074ec <memcpy>
    			memcpy(sendBuf+(SEND_LEN)-tail_full, circular_buf_full, tail_full);
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <sendData+0x238>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f5c3 631f 	rsb	r3, r3, #2544	; 0x9f0
 800155a:	3306      	adds	r3, #6
 800155c:	f107 0214 	add.w	r2, r7, #20
 8001560:	4413      	add	r3, r2
 8001562:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <sendData+0x238>)
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	491d      	ldr	r1, [pc, #116]	; (80015dc <sendData+0x23c>)
 8001568:	4618      	mov	r0, r3
 800156a:	f005 ffbf 	bl	80074ec <memcpy>

    			for(int send_loop_cnt = 0; send_loop_cnt < 10; send_loop_cnt++){
 800156e:	2300      	movs	r3, #0
 8001570:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
 8001574:	e059      	b.n	800162a <sendData+0x28a>
    				packet_res = lora_send_packet(&lora, sendBuf+(255*send_loop_cnt), 255);
 8001576:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 800157a:	4613      	mov	r3, r2
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	461a      	mov	r2, r3
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4413      	add	r3, r2
 8001588:	22ff      	movs	r2, #255	; 0xff
 800158a:	4619      	mov	r1, r3
 800158c:	481b      	ldr	r0, [pc, #108]	; (80015fc <sendData+0x25c>)
 800158e:	f7ff fb6c 	bl	8000c6a <lora_send_packet>
 8001592:	4603      	mov	r3, r0
 8001594:	f887 3a0b 	strb.w	r3, [r7, #2571]	; 0xa0b
    				if (packet_res != LORA_OK) {
 8001598:	f897 3a0b 	ldrb.w	r3, [r7, #2571]	; 0xa0b
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <sendData+0x212>
    					HAL_UART_Transmit(&huart2, &packet_res, sizeof(packet_res), 1000);
 80015a0:	f607 210b 	addw	r1, r7, #2571	; 0xa0b
 80015a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a8:	2201      	movs	r2, #1
 80015aa:	4815      	ldr	r0, [pc, #84]	; (8001600 <sendData+0x260>)
 80015ac:	f004 ffb3 	bl	8006516 <HAL_UART_Transmit>
 80015b0:	e006      	b.n	80015c0 <sendData+0x220>
    				}
    				else {
    					HAL_UART_Transmit(&huart2, transmission_success, sizeof(transmission_success), 1000);
 80015b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b6:	2215      	movs	r2, #21
 80015b8:	4912      	ldr	r1, [pc, #72]	; (8001604 <sendData+0x264>)
 80015ba:	4811      	ldr	r0, [pc, #68]	; (8001600 <sendData+0x260>)
 80015bc:	f004 ffab 	bl	8006516 <HAL_UART_Transmit>
    				}
    				for(int delay = 0; delay < 5000000; delay++); // non-blocking delay
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 80015c6:	e026      	b.n	8001616 <sendData+0x276>
 80015c8:	20002c9c 	.word	0x20002c9c
 80015cc:	20002c90 	.word	0x20002c90
 80015d0:	20002288 	.word	0x20002288
 80015d4:	200021bc 	.word	0x200021bc
 80015d8:	20002c88 	.word	0x20002c88
 80015dc:	2000228c 	.word	0x2000228c
 80015e0:	43480000 	.word	0x43480000
 80015e4:	20002c98 	.word	0x20002c98
 80015e8:	20002c9e 	.word	0x20002c9e
 80015ec:	20002ca0 	.word	0x20002ca0
 80015f0:	20002cbc 	.word	0x20002cbc
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000004 	.word	0x20000004
 80015fc:	20002ca4 	.word	0x20002ca4
 8001600:	20000228 	.word	0x20000228
 8001604:	2000001c 	.word	0x2000001c
 8001608:	004c4b3f 	.word	0x004c4b3f
 800160c:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 8001610:	3301      	adds	r3, #1
 8001612:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 8001616:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 800161a:	4a40      	ldr	r2, [pc, #256]	; (800171c <sendData+0x37c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	ddf5      	ble.n	800160c <sendData+0x26c>
    			for(int send_loop_cnt = 0; send_loop_cnt < 10; send_loop_cnt++){
 8001620:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 8001624:	3301      	adds	r3, #1
 8001626:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
 800162a:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 800162e:	2b09      	cmp	r3, #9
 8001630:	dda1      	ble.n	8001576 <sendData+0x1d6>
    			}

    			done = 1;
 8001632:	4b3b      	ldr	r3, [pc, #236]	; (8001720 <sendData+0x380>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]
    		}
    	}

    	if ((moving_avg >= MOVING_AVG_THRESHOLD) && (counter == 0)){
 8001638:	4b3a      	ldr	r3, [pc, #232]	; (8001724 <sendData+0x384>)
 800163a:	edd3 7a00 	vldr	s15, [r3]
 800163e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	db12      	blt.n	8001672 <sendData+0x2d2>
 800164c:	4b36      	ldr	r3, [pc, #216]	; (8001728 <sendData+0x388>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10e      	bne.n	8001672 <sendData+0x2d2>
    		counter += 1;
 8001654:	4b34      	ldr	r3, [pc, #208]	; (8001728 <sendData+0x388>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	b29a      	uxth	r2, r3
 800165c:	4b32      	ldr	r3, [pc, #200]	; (8001728 <sendData+0x388>)
 800165e:	801a      	strh	r2, [r3, #0]
    		done = 0;
 8001660:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <sendData+0x380>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
			timerVal = TIM2->CNT;
 8001666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	461a      	mov	r2, r3
 800166e:	4b2f      	ldr	r3, [pc, #188]	; (800172c <sendData+0x38c>)
 8001670:	601a      	str	r2, [r3, #0]
			if ((HAL_UART_Transmit(&huart2, (uint8_t*)&endflag, 4, 70) != HAL_OK)){
			    				Error_Handler();
			}
			*/
    	}
        tail_mov = (tail_mov + 1) % (MOVING_AVG_LEN);
 8001672:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <sendData+0x390>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <sendData+0x394>)
 800167a:	fba3 1302 	umull	r1, r3, r3, r2
 800167e:	099b      	lsrs	r3, r3, #6
 8001680:	21c8      	movs	r1, #200	; 0xc8
 8001682:	fb01 f303 	mul.w	r3, r1, r3
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	4a29      	ldr	r2, [pc, #164]	; (8001730 <sendData+0x390>)
 800168a:	6013      	str	r3, [r2, #0]
        head_mov = (head_mov + 1) % (MOVING_AVG_LEN);
 800168c:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <sendData+0x398>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	4b28      	ldr	r3, [pc, #160]	; (8001734 <sendData+0x394>)
 8001694:	fba3 1302 	umull	r1, r3, r3, r2
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	21c8      	movs	r1, #200	; 0xc8
 800169c:	fb01 f303 	mul.w	r3, r1, r3
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	4a25      	ldr	r2, [pc, #148]	; (8001738 <sendData+0x398>)
 80016a4:	6013      	str	r3, [r2, #0]

        tail_full = (tail_full + 1) % (SEND_LEN);
 80016a6:	4b25      	ldr	r3, [pc, #148]	; (800173c <sendData+0x39c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	0853      	lsrs	r3, r2, #1
 80016ae:	4924      	ldr	r1, [pc, #144]	; (8001740 <sendData+0x3a0>)
 80016b0:	fba1 1303 	umull	r1, r3, r1, r3
 80016b4:	0a9b      	lsrs	r3, r3, #10
 80016b6:	f640 11f6 	movw	r1, #2550	; 0x9f6
 80016ba:	fb01 f303 	mul.w	r3, r1, r3
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	4a1e      	ldr	r2, [pc, #120]	; (800173c <sendData+0x39c>)
 80016c2:	6013      	str	r3, [r2, #0]
        head_full = (head_full + 1) % (SEND_LEN);
 80016c4:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <sendData+0x3a4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	0853      	lsrs	r3, r2, #1
 80016cc:	491c      	ldr	r1, [pc, #112]	; (8001740 <sendData+0x3a0>)
 80016ce:	fba1 1303 	umull	r1, r3, r1, r3
 80016d2:	0a9b      	lsrs	r3, r3, #10
 80016d4:	f640 11f6 	movw	r1, #2550	; 0x9f6
 80016d8:	fb01 f303 	mul.w	r3, r1, r3
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	4a19      	ldr	r2, [pc, #100]	; (8001744 <sendData+0x3a4>)
 80016e0:	6013      	str	r3, [r2, #0]

        data_in += 2;
 80016e2:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 80016e6:	f6a3 2324 	subw	r3, r3, #2596	; 0xa24
 80016ea:	f507 6223 	add.w	r2, r7, #2608	; 0xa30
 80016ee:	f6a2 2224 	subw	r2, r2, #2596	; 0xa24
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	3208      	adds	r2, #8
 80016f6:	601a      	str	r2, [r3, #0]
      for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 80016f8:	f8b7 3a2e 	ldrh.w	r3, [r7, #2606]	; 0xa2e
 80016fc:	3301      	adds	r3, #1
 80016fe:	f8a7 3a2e 	strh.w	r3, [r7, #2606]	; 0xa2e
 8001702:	f8b7 3a2e 	ldrh.w	r3, [r7, #2606]	; 0xa2e
 8001706:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 800170a:	f4ff ae61 	bcc.w	80013d0 <sendData+0x30>
      }


  }
}
 800170e:	bf00      	nop
 8001710:	f507 6723 	add.w	r7, r7, #2608	; 0xa30
 8001714:	46bd      	mov	sp, r7
 8001716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800171a:	bf00      	nop
 800171c:	004c4b3f 	.word	0x004c4b3f
 8001720:	20002ca0 	.word	0x20002ca0
 8001724:	20002c98 	.word	0x20002c98
 8001728:	20002c9e 	.word	0x20002c9e
 800172c:	20002cbc 	.word	0x20002cbc
 8001730:	20002288 	.word	0x20002288
 8001734:	51eb851f 	.word	0x51eb851f
 8001738:	20002284 	.word	0x20002284
 800173c:	20002c88 	.word	0x20002c88
 8001740:	cd9a6735 	.word	0xcd9a6735
 8001744:	20002c84 	.word	0x20002c84

08001748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800174c:	b672      	cpsid	i
}
 800174e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001750:	e7fe      	b.n	8001750 <Error_Handler+0x8>
	...

08001754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_MspInit+0x4c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <HAL_MspInit+0x4c>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_MspInit+0x4c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_MspInit+0x4c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <HAL_MspInit+0x4c>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_MspInit+0x4c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a19      	ldr	r2, [pc, #100]	; (8001828 <HAL_SPI_MspInit+0x84>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d12b      	bne.n	800181e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017d4:	6453      	str	r3, [r2, #68]	; 0x44
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a10      	ldr	r2, [pc, #64]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017fe:	23e0      	movs	r3, #224	; 0xe0
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800180e:	2305      	movs	r3, #5
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4805      	ldr	r0, [pc, #20]	; (8001830 <HAL_SPI_MspInit+0x8c>)
 800181a:	f000 fffd 	bl	8002818 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800181e:	bf00      	nop
 8001820:	3728      	adds	r7, #40	; 0x28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40013000 	.word	0x40013000
 800182c:	40023800 	.word	0x40023800
 8001830:	40020000 	.word	0x40020000

08001834 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001854:	d134      	bne.n	80018c0 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_TIM_IC_MspInit+0x94>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a1a      	ldr	r2, [pc, #104]	; (80018c8 <HAL_TIM_IC_MspInit+0x94>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_TIM_IC_MspInit+0x94>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_TIM_IC_MspInit+0x94>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <HAL_TIM_IC_MspInit+0x94>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <HAL_TIM_IC_MspInit+0x94>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800188e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018a0:	2301      	movs	r3, #1
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	4808      	ldr	r0, [pc, #32]	; (80018cc <HAL_TIM_IC_MspInit+0x98>)
 80018ac:	f000 ffb4 	bl	8002818 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2100      	movs	r1, #0
 80018b4:	201c      	movs	r0, #28
 80018b6:	f000 fb76 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018ba:	201c      	movs	r0, #28
 80018bc:	f000 fb8f 	bl	8001fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018c0:	bf00      	nop
 80018c2:	3728      	adds	r7, #40	; 0x28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020400 	.word	0x40020400

080018d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08c      	sub	sp, #48	; 0x30
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a4e      	ldr	r2, [pc, #312]	; (8001a28 <HAL_UART_MspInit+0x158>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d164      	bne.n	80019bc <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	4b4d      	ldr	r3, [pc, #308]	; (8001a2c <HAL_UART_MspInit+0x15c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a4c      	ldr	r2, [pc, #304]	; (8001a2c <HAL_UART_MspInit+0x15c>)
 80018fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b4a      	ldr	r3, [pc, #296]	; (8001a2c <HAL_UART_MspInit+0x15c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800190a:	61bb      	str	r3, [r7, #24]
 800190c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	4b46      	ldr	r3, [pc, #280]	; (8001a2c <HAL_UART_MspInit+0x15c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a45      	ldr	r2, [pc, #276]	; (8001a2c <HAL_UART_MspInit+0x15c>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b43      	ldr	r3, [pc, #268]	; (8001a2c <HAL_UART_MspInit+0x15c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800192a:	2303      	movs	r3, #3
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800193a:	2308      	movs	r3, #8
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 031c 	add.w	r3, r7, #28
 8001942:	4619      	mov	r1, r3
 8001944:	483a      	ldr	r0, [pc, #232]	; (8001a30 <HAL_UART_MspInit+0x160>)
 8001946:	f000 ff67 	bl	8002818 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800194a:	4b3a      	ldr	r3, [pc, #232]	; (8001a34 <HAL_UART_MspInit+0x164>)
 800194c:	4a3a      	ldr	r2, [pc, #232]	; (8001a38 <HAL_UART_MspInit+0x168>)
 800194e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001950:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <HAL_UART_MspInit+0x164>)
 8001952:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001956:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001958:	4b36      	ldr	r3, [pc, #216]	; (8001a34 <HAL_UART_MspInit+0x164>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800195e:	4b35      	ldr	r3, [pc, #212]	; (8001a34 <HAL_UART_MspInit+0x164>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001964:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <HAL_UART_MspInit+0x164>)
 8001966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800196a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800196c:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <HAL_UART_MspInit+0x164>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001972:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <HAL_UART_MspInit+0x164>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001978:	4b2e      	ldr	r3, [pc, #184]	; (8001a34 <HAL_UART_MspInit+0x164>)
 800197a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800197e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001980:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <HAL_UART_MspInit+0x164>)
 8001982:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001986:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001988:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <HAL_UART_MspInit+0x164>)
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800198e:	4829      	ldr	r0, [pc, #164]	; (8001a34 <HAL_UART_MspInit+0x164>)
 8001990:	f000 fb40 	bl	8002014 <HAL_DMA_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800199a:	f7ff fed5 	bl	8001748 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a24      	ldr	r2, [pc, #144]	; (8001a34 <HAL_UART_MspInit+0x164>)
 80019a2:	639a      	str	r2, [r3, #56]	; 0x38
 80019a4:	4a23      	ldr	r2, [pc, #140]	; (8001a34 <HAL_UART_MspInit+0x164>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	2034      	movs	r0, #52	; 0x34
 80019b0:	f000 faf9 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80019b4:	2034      	movs	r0, #52	; 0x34
 80019b6:	f000 fb12 	bl	8001fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ba:	e030      	b.n	8001a1e <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <HAL_UART_MspInit+0x16c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d12b      	bne.n	8001a1e <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <HAL_UART_MspInit+0x15c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a17      	ldr	r2, [pc, #92]	; (8001a2c <HAL_UART_MspInit+0x15c>)
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_UART_MspInit+0x15c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_UART_MspInit+0x15c>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <HAL_UART_MspInit+0x15c>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_UART_MspInit+0x15c>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019fe:	230c      	movs	r3, #12
 8001a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a0e:	2307      	movs	r3, #7
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	; (8001a30 <HAL_UART_MspInit+0x160>)
 8001a1a:	f000 fefd 	bl	8002818 <HAL_GPIO_Init>
}
 8001a1e:	bf00      	nop
 8001a20:	3730      	adds	r7, #48	; 0x30
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40004c00 	.word	0x40004c00
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020000 	.word	0x40020000
 8001a34:	2000026c 	.word	0x2000026c
 8001a38:	40026040 	.word	0x40026040
 8001a3c:	40004400 	.word	0x40004400

08001a40 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b0a0      	sub	sp, #128	; 0x80
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	225c      	movs	r2, #92	; 0x5c
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f005 fd59 	bl	8007508 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a4c      	ldr	r2, [pc, #304]	; (8001b8c <HAL_SAI_MspInit+0x14c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	f040 8091 	bne.w	8001b84 <HAL_SAI_MspInit+0x144>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001a62:	2304      	movs	r3, #4
 8001a64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 16;
 8001a66:	2310      	movs	r3, #16
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001a6a:	23c0      	movs	r3, #192	; 0xc0
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001a72:	2302      	movs	r3, #2
 8001a74:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001a76:	2301      	movs	r3, #1
 8001a78:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a7e:	f107 0310 	add.w	r3, r7, #16
 8001a82:	4618      	mov	r0, r3
 8001a84:	f001 f990 	bl	8002da8 <HAL_RCCEx_PeriphCLKConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_SAI_MspInit+0x52>
    {
      Error_Handler();
 8001a8e:	f7ff fe5b 	bl	8001748 <Error_Handler>
    }

      if (SAI1_client == 0)
 8001a92:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <HAL_SAI_MspInit+0x150>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10d      	bne.n	8001ab6 <HAL_SAI_MspInit+0x76>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	; (8001b94 <HAL_SAI_MspInit+0x154>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a3c      	ldr	r2, [pc, #240]	; (8001b94 <HAL_SAI_MspInit+0x154>)
 8001aa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <HAL_SAI_MspInit+0x154>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001ab6:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <HAL_SAI_MspInit+0x150>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	3301      	adds	r3, #1
 8001abc:	4a34      	ldr	r2, [pc, #208]	; (8001b90 <HAL_SAI_MspInit+0x150>)
 8001abe:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PB12     ------> SAI1_SCK_B
    PA9     ------> SAI1_SD_B
    PB9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9;
 8001ac0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001ac4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001ad2:	2306      	movs	r3, #6
 8001ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ada:	4619      	mov	r1, r3
 8001adc:	482e      	ldr	r0, [pc, #184]	; (8001b98 <HAL_SAI_MspInit+0x158>)
 8001ade:	f000 fe9b 	bl	8002818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001af4:	2306      	movs	r3, #6
 8001af6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001afc:	4619      	mov	r1, r3
 8001afe:	4827      	ldr	r0, [pc, #156]	; (8001b9c <HAL_SAI_MspInit+0x15c>)
 8001b00:	f000 fe8a 	bl	8002818 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 8001b04:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b06:	4a27      	ldr	r2, [pc, #156]	; (8001ba4 <HAL_SAI_MspInit+0x164>)
 8001b08:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 8001b0a:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b10:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b24:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b2c:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b34:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b3c:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b44:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b46:	2204      	movs	r2, #4
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001b5c:	4810      	ldr	r0, [pc, #64]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b5e:	f000 fa59 	bl	8002014 <HAL_DMA_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_SAI_MspInit+0x12c>
    {
      Error_Handler();
 8001b68:	f7ff fdee 	bl	8001748 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b70:	675a      	str	r2, [r3, #116]	; 0x74
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b7c:	671a      	str	r2, [r3, #112]	; 0x70
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_SAI_MspInit+0x160>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001b84:	bf00      	nop
 8001b86:	3780      	adds	r7, #128	; 0x80
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40015824 	.word	0x40015824
 8001b90:	20002cc0 	.word	0x20002cc0
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	40020000 	.word	0x40020000
 8001ba0:	200000e4 	.word	0x200000e4
 8001ba4:	40026470 	.word	0x40026470

08001ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <NMI_Handler+0x4>

08001bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <HardFault_Handler+0x4>

08001bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <MemManage_Handler+0x4>

08001bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <BusFault_Handler+0x4>

08001bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <UsageFault_Handler+0x4>

08001bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf4:	f000 f8b8 	bl	8001d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <DMA1_Stream2_IRQHandler+0x10>)
 8001c02:	f000 fb9f 	bl	8002344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000026c 	.word	0x2000026c

08001c10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <TIM2_IRQHandler+0x10>)
 8001c16:	f003 ffe5 	bl	8005be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000019c 	.word	0x2000019c

08001c24 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <UART4_IRQHandler+0x10>)
 8001c2a:	f004 fd07 	bl	800663c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200001e4 	.word	0x200001e4

08001c38 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <DMA2_Stream4_IRQHandler+0x10>)
 8001c3e:	f000 fb81 	bl	8002344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200000e4 	.word	0x200000e4

08001c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <SystemInit+0x20>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <SystemInit+0x20>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c74:	480d      	ldr	r0, [pc, #52]	; (8001cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c76:	490e      	ldr	r1, [pc, #56]	; (8001cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c78:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c7c:	e002      	b.n	8001c84 <LoopCopyDataInit>

08001c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c82:	3304      	adds	r3, #4

08001c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c88:	d3f9      	bcc.n	8001c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8a:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c8c:	4c0b      	ldr	r4, [pc, #44]	; (8001cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c90:	e001      	b.n	8001c96 <LoopFillZerobss>

08001c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c94:	3204      	adds	r2, #4

08001c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c98:	d3fb      	bcc.n	8001c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c9a:	f7ff ffd7 	bl	8001c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c9e:	f005 fc01 	bl	80074a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca2:	f7ff f865 	bl	8000d70 <main>
  bx  lr    
 8001ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb0:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001cb4:	08007560 	.word	0x08007560
  ldr r2, =_sbss
 8001cb8:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001cbc:	20002cc8 	.word	0x20002cc8

08001cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc0:	e7fe      	b.n	8001cc0 <ADC_IRQHandler>
	...

08001cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <HAL_Init+0x40>)
 8001cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <HAL_Init+0x40>)
 8001cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_Init+0x40>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_Init+0x40>)
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f000 f94f 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf2:	200f      	movs	r0, #15
 8001cf4:	f000 f808 	bl	8001d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf8:	f7ff fd2c 	bl	8001754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023c00 	.word	0x40023c00

08001d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_InitTick+0x54>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_InitTick+0x58>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f967 	bl	8001ffa <HAL_SYSTICK_Config>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00e      	b.n	8001d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b0f      	cmp	r3, #15
 8001d3a:	d80a      	bhi.n	8001d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d44:	f000 f92f 	bl	8001fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d48:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <HAL_InitTick+0x5c>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e000      	b.n	8001d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000034 	.word	0x20000034
 8001d60:	2000003c 	.word	0x2000003c
 8001d64:	20000038 	.word	0x20000038

08001d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_IncTick+0x20>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_IncTick+0x24>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <HAL_IncTick+0x24>)
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	2000003c 	.word	0x2000003c
 8001d8c:	20002cc4 	.word	0x20002cc4

08001d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return uwTick;
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <HAL_GetTick+0x14>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20002cc4 	.word	0x20002cc4

08001da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db0:	f7ff ffee 	bl	8001d90 <HAL_GetTick>
 8001db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dc0:	d005      	beq.n	8001dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_Delay+0x44>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4413      	add	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dce:	bf00      	nop
 8001dd0:	f7ff ffde 	bl	8001d90 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d8f7      	bhi.n	8001dd0 <HAL_Delay+0x28>
  {
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	2000003c 	.word	0x2000003c

08001df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <__NVIC_SetPriorityGrouping+0x44>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e22:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <__NVIC_SetPriorityGrouping+0x44>)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	60d3      	str	r3, [r2, #12]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <__NVIC_GetPriorityGrouping+0x18>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	0a1b      	lsrs	r3, r3, #8
 8001e42:	f003 0307 	and.w	r3, r3, #7
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	db0b      	blt.n	8001e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	f003 021f 	and.w	r2, r3, #31
 8001e6c:	4907      	ldr	r1, [pc, #28]	; (8001e8c <__NVIC_EnableIRQ+0x38>)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	2001      	movs	r0, #1
 8001e76:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000e100 	.word	0xe000e100

08001e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db0a      	blt.n	8001eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	490c      	ldr	r1, [pc, #48]	; (8001edc <__NVIC_SetPriority+0x4c>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	0112      	lsls	r2, r2, #4
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb8:	e00a      	b.n	8001ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4908      	ldr	r1, [pc, #32]	; (8001ee0 <__NVIC_SetPriority+0x50>)
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	3b04      	subs	r3, #4
 8001ec8:	0112      	lsls	r2, r2, #4
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	440b      	add	r3, r1
 8001ece:	761a      	strb	r2, [r3, #24]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000e100 	.word	0xe000e100
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f1c3 0307 	rsb	r3, r3, #7
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	bf28      	it	cs
 8001f02:	2304      	movcs	r3, #4
 8001f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d902      	bls.n	8001f14 <NVIC_EncodePriority+0x30>
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3b03      	subs	r3, #3
 8001f12:	e000      	b.n	8001f16 <NVIC_EncodePriority+0x32>
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	401a      	ands	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	43d9      	mvns	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	4313      	orrs	r3, r2
         );
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3724      	adds	r7, #36	; 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f5c:	d301      	bcc.n	8001f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00f      	b.n	8001f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <SysTick_Config+0x40>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f70:	f7ff ff8e 	bl	8001e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <SysTick_Config+0x40>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <SysTick_Config+0x40>)
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff29 	bl	8001df0 <__NVIC_SetPriorityGrouping>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb8:	f7ff ff3e 	bl	8001e38 <__NVIC_GetPriorityGrouping>
 8001fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7ff ff8e 	bl	8001ee4 <NVIC_EncodePriority>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff5d 	bl	8001e90 <__NVIC_SetPriority>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff31 	bl	8001e54 <__NVIC_EnableIRQ>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ffa2 	bl	8001f4c <SysTick_Config>
 8002008:	4603      	mov	r3, r0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff feb6 	bl	8001d90 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e099      	b.n	8002164 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002050:	e00f      	b.n	8002072 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002052:	f7ff fe9d 	bl	8001d90 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b05      	cmp	r3, #5
 800205e:	d908      	bls.n	8002072 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2203      	movs	r2, #3
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e078      	b.n	8002164 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1e8      	bne.n	8002052 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4b38      	ldr	r3, [pc, #224]	; (800216c <HAL_DMA_Init+0x158>)
 800208c:	4013      	ands	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800209e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d107      	bne.n	80020dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4313      	orrs	r3, r2
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4313      	orrs	r3, r2
 80020da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f023 0307 	bic.w	r3, r3, #7
 80020f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	2b04      	cmp	r3, #4
 8002104:	d117      	bne.n	8002136 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00e      	beq.n	8002136 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 fb01 	bl	8002720 <DMA_CheckFifoParam>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2240      	movs	r2, #64	; 0x40
 8002128:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002132:	2301      	movs	r3, #1
 8002134:	e016      	b.n	8002164 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fab8 	bl	80026b4 <DMA_CalcBaseAndBitshift>
 8002144:	4603      	mov	r3, r0
 8002146:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	223f      	movs	r2, #63	; 0x3f
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	f010803f 	.word	0xf010803f

08002170 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002186:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_DMA_Start_IT+0x26>
 8002192:	2302      	movs	r3, #2
 8002194:	e040      	b.n	8002218 <HAL_DMA_Start_IT+0xa8>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d12f      	bne.n	800220a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2202      	movs	r2, #2
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fa4a 	bl	8002658 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c8:	223f      	movs	r2, #63	; 0x3f
 80021ca:	409a      	lsls	r2, r3
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0216 	orr.w	r2, r2, #22
 80021de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0208 	orr.w	r2, r2, #8
 80021f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e005      	b.n	8002216 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002212:	2302      	movs	r3, #2
 8002214:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002216:	7dfb      	ldrb	r3, [r7, #23]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800222e:	f7ff fdaf 	bl	8001d90 <HAL_GetTick>
 8002232:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d008      	beq.n	8002252 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2280      	movs	r2, #128	; 0x80
 8002244:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e052      	b.n	80022f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0216 	bic.w	r2, r2, #22
 8002260:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695a      	ldr	r2, [r3, #20]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002270:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d103      	bne.n	8002282 <HAL_DMA_Abort+0x62>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0208 	bic.w	r2, r2, #8
 8002290:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a2:	e013      	b.n	80022cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022a4:	f7ff fd74 	bl	8001d90 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	d90c      	bls.n	80022cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2220      	movs	r2, #32
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2203      	movs	r2, #3
 80022bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e015      	b.n	80022f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1e4      	bne.n	80022a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022de:	223f      	movs	r2, #63	; 0x3f
 80022e0:	409a      	lsls	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d004      	beq.n	800231e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2280      	movs	r2, #128	; 0x80
 8002318:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e00c      	b.n	8002338 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2205      	movs	r2, #5
 8002322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002350:	4b8e      	ldr	r3, [pc, #568]	; (800258c <HAL_DMA_IRQHandler+0x248>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a8e      	ldr	r2, [pc, #568]	; (8002590 <HAL_DMA_IRQHandler+0x24c>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0a9b      	lsrs	r3, r3, #10
 800235c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236e:	2208      	movs	r2, #8
 8002370:	409a      	lsls	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d01a      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d013      	beq.n	80023b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0204 	bic.w	r2, r2, #4
 8002396:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239c:	2208      	movs	r2, #8
 800239e:	409a      	lsls	r2, r3
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	f043 0201 	orr.w	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b4:	2201      	movs	r2, #1
 80023b6:	409a      	lsls	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d012      	beq.n	80023e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d2:	2201      	movs	r2, #1
 80023d4:	409a      	lsls	r2, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	f043 0202 	orr.w	r2, r3, #2
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ea:	2204      	movs	r2, #4
 80023ec:	409a      	lsls	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d012      	beq.n	800241c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00b      	beq.n	800241c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002408:	2204      	movs	r2, #4
 800240a:	409a      	lsls	r2, r3
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002414:	f043 0204 	orr.w	r2, r3, #4
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	2210      	movs	r2, #16
 8002422:	409a      	lsls	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4013      	ands	r3, r2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d043      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d03c      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243e:	2210      	movs	r2, #16
 8002440:	409a      	lsls	r2, r3
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d018      	beq.n	8002486 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d108      	bne.n	8002474 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	d024      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	4798      	blx	r3
 8002472:	e01f      	b.n	80024b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01b      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	4798      	blx	r3
 8002484:	e016      	b.n	80024b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d107      	bne.n	80024a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0208 	bic.w	r2, r2, #8
 80024a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b8:	2220      	movs	r2, #32
 80024ba:	409a      	lsls	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 808f 	beq.w	80025e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8087 	beq.w	80025e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024da:	2220      	movs	r2, #32
 80024dc:	409a      	lsls	r2, r3
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b05      	cmp	r3, #5
 80024ec:	d136      	bne.n	800255c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0216 	bic.w	r2, r2, #22
 80024fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800250c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d103      	bne.n	800251e <HAL_DMA_IRQHandler+0x1da>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0208 	bic.w	r2, r2, #8
 800252c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	223f      	movs	r2, #63	; 0x3f
 8002534:	409a      	lsls	r2, r3
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254e:	2b00      	cmp	r3, #0
 8002550:	d07e      	beq.n	8002650 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	4798      	blx	r3
        }
        return;
 800255a:	e079      	b.n	8002650 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d01d      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10d      	bne.n	8002594 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	2b00      	cmp	r3, #0
 800257e:	d031      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	4798      	blx	r3
 8002588:	e02c      	b.n	80025e4 <HAL_DMA_IRQHandler+0x2a0>
 800258a:	bf00      	nop
 800258c:	20000034 	.word	0x20000034
 8002590:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d023      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
 80025a4:	e01e      	b.n	80025e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10f      	bne.n	80025d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0210 	bic.w	r2, r2, #16
 80025c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d032      	beq.n	8002652 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d022      	beq.n	800263e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2205      	movs	r2, #5
 80025fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0201 	bic.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	3301      	adds	r3, #1
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	429a      	cmp	r2, r3
 800261a:	d307      	bcc.n	800262c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f2      	bne.n	8002610 <HAL_DMA_IRQHandler+0x2cc>
 800262a:	e000      	b.n	800262e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800262c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	4798      	blx	r3
 800264e:	e000      	b.n	8002652 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002650:	bf00      	nop
    }
  }
}
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002674:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b40      	cmp	r3, #64	; 0x40
 8002684:	d108      	bne.n	8002698 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002696:	e007      	b.n	80026a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	60da      	str	r2, [r3, #12]
}
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	3b10      	subs	r3, #16
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <DMA_CalcBaseAndBitshift+0x64>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026ce:	4a13      	ldr	r2, [pc, #76]	; (800271c <DMA_CalcBaseAndBitshift+0x68>)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d909      	bls.n	80026f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026ea:	f023 0303 	bic.w	r3, r3, #3
 80026ee:	1d1a      	adds	r2, r3, #4
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	659a      	str	r2, [r3, #88]	; 0x58
 80026f4:	e007      	b.n	8002706 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026fe:	f023 0303 	bic.w	r3, r3, #3
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	aaaaaaab 	.word	0xaaaaaaab
 800271c:	08007548 	.word	0x08007548

08002720 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d11f      	bne.n	800277a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d856      	bhi.n	80027ee <DMA_CheckFifoParam+0xce>
 8002740:	a201      	add	r2, pc, #4	; (adr r2, 8002748 <DMA_CheckFifoParam+0x28>)
 8002742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002746:	bf00      	nop
 8002748:	08002759 	.word	0x08002759
 800274c:	0800276b 	.word	0x0800276b
 8002750:	08002759 	.word	0x08002759
 8002754:	080027ef 	.word	0x080027ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d046      	beq.n	80027f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002768:	e043      	b.n	80027f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002772:	d140      	bne.n	80027f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002778:	e03d      	b.n	80027f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002782:	d121      	bne.n	80027c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d837      	bhi.n	80027fa <DMA_CheckFifoParam+0xda>
 800278a:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <DMA_CheckFifoParam+0x70>)
 800278c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002790:	080027a1 	.word	0x080027a1
 8002794:	080027a7 	.word	0x080027a7
 8002798:	080027a1 	.word	0x080027a1
 800279c:	080027b9 	.word	0x080027b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
      break;
 80027a4:	e030      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d025      	beq.n	80027fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b6:	e022      	b.n	80027fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027c0:	d11f      	bne.n	8002802 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027c6:	e01c      	b.n	8002802 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d903      	bls.n	80027d6 <DMA_CheckFifoParam+0xb6>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d003      	beq.n	80027dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027d4:	e018      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
      break;
 80027da:	e015      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00e      	beq.n	8002806 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
      break;
 80027ec:	e00b      	b.n	8002806 <DMA_CheckFifoParam+0xe6>
      break;
 80027ee:	bf00      	nop
 80027f0:	e00a      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;
 80027f2:	bf00      	nop
 80027f4:	e008      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;
 80027f6:	bf00      	nop
 80027f8:	e006      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;
 80027fa:	bf00      	nop
 80027fc:	e004      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;
 80027fe:	bf00      	nop
 8002800:	e002      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;   
 8002802:	bf00      	nop
 8002804:	e000      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;
 8002806:	bf00      	nop
    }
  } 
  
  return status; 
 8002808:	7bfb      	ldrb	r3, [r7, #15]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop

08002818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	; 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	e165      	b.n	8002b00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002834:	2201      	movs	r2, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	429a      	cmp	r2, r3
 800284e:	f040 8154 	bne.w	8002afa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d005      	beq.n	800286a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002866:	2b02      	cmp	r3, #2
 8002868:	d130      	bne.n	80028cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	2203      	movs	r2, #3
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a0:	2201      	movs	r2, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	f003 0201 	and.w	r2, r3, #1
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d017      	beq.n	8002908 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d123      	bne.n	800295c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	220f      	movs	r2, #15
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	08da      	lsrs	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3208      	adds	r2, #8
 8002956:	69b9      	ldr	r1, [r7, #24]
 8002958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0203 	and.w	r2, r3, #3
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80ae 	beq.w	8002afa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	4b5d      	ldr	r3, [pc, #372]	; (8002b18 <HAL_GPIO_Init+0x300>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	4a5c      	ldr	r2, [pc, #368]	; (8002b18 <HAL_GPIO_Init+0x300>)
 80029a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ac:	6453      	str	r3, [r2, #68]	; 0x44
 80029ae:	4b5a      	ldr	r3, [pc, #360]	; (8002b18 <HAL_GPIO_Init+0x300>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ba:	4a58      	ldr	r2, [pc, #352]	; (8002b1c <HAL_GPIO_Init+0x304>)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	3302      	adds	r3, #2
 80029c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	220f      	movs	r2, #15
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4f      	ldr	r2, [pc, #316]	; (8002b20 <HAL_GPIO_Init+0x308>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d025      	beq.n	8002a32 <HAL_GPIO_Init+0x21a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4e      	ldr	r2, [pc, #312]	; (8002b24 <HAL_GPIO_Init+0x30c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01f      	beq.n	8002a2e <HAL_GPIO_Init+0x216>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4d      	ldr	r2, [pc, #308]	; (8002b28 <HAL_GPIO_Init+0x310>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d019      	beq.n	8002a2a <HAL_GPIO_Init+0x212>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4c      	ldr	r2, [pc, #304]	; (8002b2c <HAL_GPIO_Init+0x314>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_GPIO_Init+0x20e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4b      	ldr	r2, [pc, #300]	; (8002b30 <HAL_GPIO_Init+0x318>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00d      	beq.n	8002a22 <HAL_GPIO_Init+0x20a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4a      	ldr	r2, [pc, #296]	; (8002b34 <HAL_GPIO_Init+0x31c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <HAL_GPIO_Init+0x206>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a49      	ldr	r2, [pc, #292]	; (8002b38 <HAL_GPIO_Init+0x320>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_GPIO_Init+0x202>
 8002a16:	2306      	movs	r3, #6
 8002a18:	e00c      	b.n	8002a34 <HAL_GPIO_Init+0x21c>
 8002a1a:	2307      	movs	r3, #7
 8002a1c:	e00a      	b.n	8002a34 <HAL_GPIO_Init+0x21c>
 8002a1e:	2305      	movs	r3, #5
 8002a20:	e008      	b.n	8002a34 <HAL_GPIO_Init+0x21c>
 8002a22:	2304      	movs	r3, #4
 8002a24:	e006      	b.n	8002a34 <HAL_GPIO_Init+0x21c>
 8002a26:	2303      	movs	r3, #3
 8002a28:	e004      	b.n	8002a34 <HAL_GPIO_Init+0x21c>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e002      	b.n	8002a34 <HAL_GPIO_Init+0x21c>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_GPIO_Init+0x21c>
 8002a32:	2300      	movs	r3, #0
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	f002 0203 	and.w	r2, r2, #3
 8002a3a:	0092      	lsls	r2, r2, #2
 8002a3c:	4093      	lsls	r3, r2
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a44:	4935      	ldr	r1, [pc, #212]	; (8002b1c <HAL_GPIO_Init+0x304>)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a52:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <HAL_GPIO_Init+0x324>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a76:	4a31      	ldr	r2, [pc, #196]	; (8002b3c <HAL_GPIO_Init+0x324>)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a7c:	4b2f      	ldr	r3, [pc, #188]	; (8002b3c <HAL_GPIO_Init+0x324>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aa0:	4a26      	ldr	r2, [pc, #152]	; (8002b3c <HAL_GPIO_Init+0x324>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aa6:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <HAL_GPIO_Init+0x324>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aca:	4a1c      	ldr	r2, [pc, #112]	; (8002b3c <HAL_GPIO_Init+0x324>)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <HAL_GPIO_Init+0x324>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af4:	4a11      	ldr	r2, [pc, #68]	; (8002b3c <HAL_GPIO_Init+0x324>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3301      	adds	r3, #1
 8002afe:	61fb      	str	r3, [r7, #28]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b0f      	cmp	r3, #15
 8002b04:	f67f ae96 	bls.w	8002834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	3724      	adds	r7, #36	; 0x24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40013800 	.word	0x40013800
 8002b20:	40020000 	.word	0x40020000
 8002b24:	40020400 	.word	0x40020400
 8002b28:	40020800 	.word	0x40020800
 8002b2c:	40020c00 	.word	0x40020c00
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40021400 	.word	0x40021400
 8002b38:	40021800 	.word	0x40021800
 8002b3c:	40013c00 	.word	0x40013c00

08002b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	807b      	strh	r3, [r7, #2]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b50:	787b      	ldrb	r3, [r7, #1]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b5c:	e003      	b.n	8002b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b5e:	887b      	ldrh	r3, [r7, #2]
 8002b60:	041a      	lsls	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	619a      	str	r2, [r3, #24]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0cc      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b88:	4b68      	ldr	r3, [pc, #416]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d90c      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b65      	ldr	r3, [pc, #404]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b63      	ldr	r3, [pc, #396]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0b8      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc8:	4b59      	ldr	r3, [pc, #356]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4a58      	ldr	r2, [pc, #352]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be0:	4b53      	ldr	r3, [pc, #332]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	4a52      	ldr	r2, [pc, #328]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bec:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	494d      	ldr	r1, [pc, #308]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d044      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	4b47      	ldr	r3, [pc, #284]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d119      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e07f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c32:	4b3f      	ldr	r3, [pc, #252]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e06f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c42:	4b3b      	ldr	r3, [pc, #236]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e067      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c52:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f023 0203 	bic.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4934      	ldr	r1, [pc, #208]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c64:	f7ff f894 	bl	8001d90 <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6c:	f7ff f890 	bl	8001d90 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e04f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c82:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 020c 	and.w	r2, r3, #12
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d1eb      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c94:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d20c      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e032      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4916      	ldr	r1, [pc, #88]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	490e      	ldr	r1, [pc, #56]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cfa:	f000 fdc7 	bl	800388c <HAL_RCC_GetSysClockFreq>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	490a      	ldr	r1, [pc, #40]	; (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	5ccb      	ldrb	r3, [r1, r3]
 8002d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fff4 	bl	8001d08 <HAL_InitTick>

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023c00 	.word	0x40023c00
 8002d30:	40023800 	.word	0x40023800
 8002d34:	08007530 	.word	0x08007530
 8002d38:	20000034 	.word	0x20000034
 8002d3c:	20000038 	.word	0x20000038

08002d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d44:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000034 	.word	0x20000034

08002d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d5c:	f7ff fff0 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002d60:	4602      	mov	r2, r0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	0a9b      	lsrs	r3, r3, #10
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4903      	ldr	r1, [pc, #12]	; (8002d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d6e:	5ccb      	ldrb	r3, [r1, r3]
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	08007540 	.word	0x08007540

08002d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d84:	f7ff ffdc 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	0b5b      	lsrs	r3, r3, #13
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	4903      	ldr	r1, [pc, #12]	; (8002da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d96:	5ccb      	ldrb	r3, [r1, r3]
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40023800 	.word	0x40023800
 8002da4:	08007540 	.word	0x08007540

08002da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08c      	sub	sp, #48	; 0x30
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d010      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002de0:	4b6f      	ldr	r3, [pc, #444]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002de6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	496c      	ldr	r1, [pc, #432]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d010      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002e0e:	4b64      	ldr	r3, [pc, #400]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e14:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1c:	4960      	ldr	r1, [pc, #384]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d017      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e3c:	4b58      	ldr	r3, [pc, #352]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	4955      	ldr	r1, [pc, #340]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d017      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e78:	4b49      	ldr	r3, [pc, #292]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e86:	4946      	ldr	r1, [pc, #280]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e96:	d101      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 808a 	beq.w	8002fca <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	4a38      	ldr	r2, [pc, #224]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec6:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ed2:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a33      	ldr	r2, [pc, #204]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002edc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ede:	f7fe ff57 	bl	8001d90 <HAL_GetTick>
 8002ee2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ee6:	f7fe ff53 	bl	8001d90 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e278      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ef8:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f04:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d02f      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1c:	6a3a      	ldr	r2, [r7, #32]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d028      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f22:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f32:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002f38:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f3e:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d114      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f4a:	f7fe ff21 	bl	8001d90 <HAL_GetTick>
 8002f4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7fe ff1d 	bl	8001d90 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e240      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f68:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ee      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f80:	d114      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002f82:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f96:	4902      	ldr	r1, [pc, #8]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	608b      	str	r3, [r1, #8]
 8002f9c:	e00c      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	42470e40 	.word	0x42470e40
 8002fac:	4b4a      	ldr	r3, [pc, #296]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a49      	ldr	r2, [pc, #292]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fb2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fb6:	6093      	str	r3, [r2, #8]
 8002fb8:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc4:	4944      	ldr	r1, [pc, #272]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d004      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002fdc:	4b3f      	ldr	r3, [pc, #252]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002fde:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002fec:	4b3a      	ldr	r3, [pc, #232]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffa:	4937      	ldr	r1, [pc, #220]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800300e:	4b32      	ldr	r3, [pc, #200]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003014:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301c:	492e      	ldr	r1, [pc, #184]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d011      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003030:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003036:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	4926      	ldr	r1, [pc, #152]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800304e:	d101      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003050:	2301      	movs	r3, #1
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003060:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003066:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	491a      	ldr	r1, [pc, #104]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307e:	2b00      	cmp	r3, #0
 8003080:	d011      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003082:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003088:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003090:	4911      	ldr	r1, [pc, #68]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800309c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030a0:	d101      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80030a2:	2301      	movs	r3, #1
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d005      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b4:	f040 80ff 	bne.w	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030b8:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030be:	f7fe fe67 	bl	8001d90 <HAL_GetTick>
 80030c2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030c4:	e00e      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030c6:	f7fe fe63 	bl	8001d90 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d907      	bls.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e188      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x642>
 80030d8:	40023800 	.word	0x40023800
 80030dc:	424711e0 	.word	0x424711e0
 80030e0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030e4:	4b7e      	ldr	r3, [pc, #504]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1ea      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	2b00      	cmp	r3, #0
 8003102:	d009      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800310c:	2b00      	cmp	r3, #0
 800310e:	d028      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d124      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003118:	4b71      	ldr	r3, [pc, #452]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800311a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800311e:	0c1b      	lsrs	r3, r3, #16
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	3301      	adds	r3, #1
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800312a:	4b6d      	ldr	r3, [pc, #436]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800312c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003130:	0e1b      	lsrs	r3, r3, #24
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	019b      	lsls	r3, r3, #6
 8003142:	431a      	orrs	r2, r3
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	085b      	lsrs	r3, r3, #1
 8003148:	3b01      	subs	r3, #1
 800314a:	041b      	lsls	r3, r3, #16
 800314c:	431a      	orrs	r2, r3
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	061b      	lsls	r3, r3, #24
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	071b      	lsls	r3, r3, #28
 800315a:	4961      	ldr	r1, [pc, #388]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	d004      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003176:	d00a      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003180:	2b00      	cmp	r3, #0
 8003182:	d035      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800318c:	d130      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800318e:	4b54      	ldr	r3, [pc, #336]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003194:	0c1b      	lsrs	r3, r3, #16
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	3301      	adds	r3, #1
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031a0:	4b4f      	ldr	r3, [pc, #316]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a6:	0f1b      	lsrs	r3, r3, #28
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	019b      	lsls	r3, r3, #6
 80031b8:	431a      	orrs	r2, r3
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	3b01      	subs	r3, #1
 80031c0:	041b      	lsls	r3, r3, #16
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	431a      	orrs	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	071b      	lsls	r3, r3, #28
 80031d0:	4943      	ldr	r1, [pc, #268]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031d8:	4b41      	ldr	r3, [pc, #260]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031de:	f023 021f 	bic.w	r2, r3, #31
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	3b01      	subs	r3, #1
 80031e8:	493d      	ldr	r1, [pc, #244]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d029      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003204:	d124      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003206:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	3301      	adds	r3, #1
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003218:	4b31      	ldr	r3, [pc, #196]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800321a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800321e:	0f1b      	lsrs	r3, r3, #28
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	019b      	lsls	r3, r3, #6
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	3b01      	subs	r3, #1
 800323a:	041b      	lsls	r3, r3, #16
 800323c:	431a      	orrs	r2, r3
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	061b      	lsls	r3, r3, #24
 8003242:	431a      	orrs	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	071b      	lsls	r3, r3, #28
 8003248:	4925      	ldr	r1, [pc, #148]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003258:	2b00      	cmp	r3, #0
 800325a:	d016      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	019b      	lsls	r3, r3, #6
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	085b      	lsrs	r3, r3, #1
 800326e:	3b01      	subs	r3, #1
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	061b      	lsls	r3, r3, #24
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	071b      	lsls	r3, r3, #28
 8003282:	4917      	ldr	r1, [pc, #92]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800328a:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003290:	f7fe fd7e 	bl	8001d90 <HAL_GetTick>
 8003294:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003298:	f7fe fd7a 	bl	8001d90 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e09f      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	f040 8095 	bne.w	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032c4:	f7fe fd64 	bl	8001d90 <HAL_GetTick>
 80032c8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032ca:	e00f      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80032cc:	f7fe fd60 	bl	8001d90 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d908      	bls.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e085      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x642>
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800
 80032e4:	42470068 	.word	0x42470068
 80032e8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032ec:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f8:	d0e8      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	2b00      	cmp	r3, #0
 800330c:	d009      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003316:	2b00      	cmp	r3, #0
 8003318:	d02b      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331e:	2b00      	cmp	r3, #0
 8003320:	d127      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003322:	4b34      	ldr	r3, [pc, #208]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	3301      	adds	r3, #1
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699a      	ldr	r2, [r3, #24]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	019b      	lsls	r3, r3, #6
 800333e:	431a      	orrs	r2, r3
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	3b01      	subs	r3, #1
 8003346:	041b      	lsls	r3, r3, #16
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	061b      	lsls	r3, r3, #24
 8003350:	4928      	ldr	r1, [pc, #160]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003358:	4b26      	ldr	r3, [pc, #152]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800335a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800335e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	3b01      	subs	r3, #1
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	4922      	ldr	r1, [pc, #136]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d01d      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x612>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003386:	d118      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003388:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	0e1b      	lsrs	r3, r3, #24
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	019b      	lsls	r3, r3, #6
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	085b      	lsrs	r3, r3, #1
 80033a8:	3b01      	subs	r3, #1
 80033aa:	041b      	lsls	r3, r3, #16
 80033ac:	431a      	orrs	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	061b      	lsls	r3, r3, #24
 80033b2:	4910      	ldr	r1, [pc, #64]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033ba:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033c0:	f7fe fce6 	bl	8001d90 <HAL_GetTick>
 80033c4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80033c8:	f7fe fce2 	bl	8001d90 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e007      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033da:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033e6:	d1ef      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3730      	adds	r7, #48	; 0x30
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
 80033f8:	42470070 	.word	0x42470070

080033fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b089      	sub	sp, #36	; 0x24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	2b07      	cmp	r3, #7
 8003422:	f200 8224 	bhi.w	800386e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8003426:	a201      	add	r2, pc, #4	; (adr r2, 800342c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	0800362f 	.word	0x0800362f
 8003430:	08003759 	.word	0x08003759
 8003434:	0800386f 	.word	0x0800386f
 8003438:	0800344d 	.word	0x0800344d
 800343c:	0800386f 	.word	0x0800386f
 8003440:	0800386f 	.word	0x0800386f
 8003444:	0800386f 	.word	0x0800386f
 8003448:	0800344d 	.word	0x0800344d
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 800344c:	4ba8      	ldr	r3, [pc, #672]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800344e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003452:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003462:	f000 80d6 	beq.w	8003612 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800346c:	f200 80dd 	bhi.w	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003476:	f000 809f 	beq.w	80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003480:	f200 80d3 	bhi.w	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800348a:	d05b      	beq.n	8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003492:	f200 80ca 	bhi.w	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800349c:	f000 80b6 	beq.w	800360c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034a6:	f200 80c0 	bhi.w	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b0:	f000 8082 	beq.w	80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ba:	f200 80b6 	bhi.w	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d004      	beq.n	80034ce <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ca:	d03b      	beq.n	8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 80034cc:	e0ad      	b.n	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80034ce:	4b88      	ldr	r3, [pc, #544]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 80034da:	4b85      	ldr	r3, [pc, #532]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034e4:	4a83      	ldr	r2, [pc, #524]	; (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80034e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ea:	61bb      	str	r3, [r7, #24]
 80034ec:	e008      	b.n	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 80034ee:	4b80      	ldr	r3, [pc, #512]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f8:	4a7f      	ldr	r2, [pc, #508]	; (80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80034fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fe:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003500:	4b7b      	ldr	r3, [pc, #492]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	0e1b      	lsrs	r3, r3, #24
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800350e:	4b78      	ldr	r3, [pc, #480]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003514:	099b      	lsrs	r3, r3, #6
 8003516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	fb03 f202 	mul.w	r2, r3, r2
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8003528:	4b71      	ldr	r3, [pc, #452]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800352a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	3301      	adds	r3, #1
 8003536:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003538:	69fa      	ldr	r2, [r7, #28]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	61fb      	str	r3, [r7, #28]
          break;
 8003542:	e073      	b.n	800362c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003544:	4b6a      	ldr	r3, [pc, #424]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d109      	bne.n	8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003550:	4b67      	ldr	r3, [pc, #412]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800355a:	4a66      	ldr	r2, [pc, #408]	; (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	e008      	b.n	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8003564:	4b62      	ldr	r3, [pc, #392]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800356a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800356e:	4a62      	ldr	r2, [pc, #392]	; (80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8003576:	4b5e      	ldr	r3, [pc, #376]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800357c:	0e1b      	lsrs	r3, r3, #24
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8003584:	4b5a      	ldr	r3, [pc, #360]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800358a:	099b      	lsrs	r3, r3, #6
 800358c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	fb03 f202 	mul.w	r2, r3, r2
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	fbb2 f3f3 	udiv	r3, r2, r3
 800359c:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800359e:	4b54      	ldr	r3, [pc, #336]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	3301      	adds	r3, #1
 80035aa:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	61fb      	str	r3, [r7, #28]
          break;
 80035b6:	e039      	b.n	800362c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80035b8:	4b4d      	ldr	r3, [pc, #308]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d108      	bne.n	80035d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035c4:	4b4a      	ldr	r3, [pc, #296]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035cc:	4a49      	ldr	r2, [pc, #292]	; (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80035ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d2:	61bb      	str	r3, [r7, #24]
 80035d4:	e007      	b.n	80035e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80035d6:	4b46      	ldr	r3, [pc, #280]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035de:	4a46      	ldr	r2, [pc, #280]	; (80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 80035e6:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	0f1b      	lsrs	r3, r3, #28
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 80035f2:	4b3f      	ldr	r3, [pc, #252]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	099b      	lsrs	r3, r3, #6
 80035f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	fb03 f202 	mul.w	r2, r3, r2
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	61fb      	str	r3, [r7, #28]
          break;
 800360a:	e00f      	b.n	800362c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 800360c:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800360e:	61fb      	str	r3, [r7, #28]
          break;
 8003610:	e00c      	b.n	800362c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003612:	4b37      	ldr	r3, [pc, #220]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d102      	bne.n	8003624 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 800361e:	4b35      	ldr	r3, [pc, #212]	; (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003620:	61fb      	str	r3, [r7, #28]
          break;
 8003622:	e003      	b.n	800362c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8003624:	4b34      	ldr	r3, [pc, #208]	; (80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003626:	61fb      	str	r3, [r7, #28]
          break;
 8003628:	e000      	b.n	800362c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 800362a:	bf00      	nop
        }
      }
      break;
 800362c:	e11f      	b.n	800386e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800362e:	4b30      	ldr	r3, [pc, #192]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003634:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003640:	d079      	beq.n	8003736 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003648:	f200 8082 	bhi.w	8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003652:	d03c      	beq.n	80036ce <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800365a:	d879      	bhi.n	8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d006      	beq.n	8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003668:	d172      	bne.n	8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800366a:	4b24      	ldr	r3, [pc, #144]	; (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800366c:	61fb      	str	r3, [r7, #28]
          break;
 800366e:	e072      	b.n	8003756 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003670:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003678:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800367c:	d109      	bne.n	8003692 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800367e:	4b1c      	ldr	r3, [pc, #112]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003688:	4a1b      	ldr	r2, [pc, #108]	; (80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800368a:	fbb2 f3f3 	udiv	r3, r2, r3
 800368e:	61bb      	str	r3, [r7, #24]
 8003690:	e008      	b.n	80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003692:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800369c:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800369e:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80036a4:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036aa:	099b      	lsrs	r3, r3, #6
 80036ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036be:	0f1b      	lsrs	r3, r3, #28
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ca:	61fb      	str	r3, [r7, #28]
          break;
 80036cc:	e043      	b.n	8003756 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80036ce:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036da:	d111      	bne.n	8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e4:	4a04      	ldr	r2, [pc, #16]	; (80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80036e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ea:	61bb      	str	r3, [r7, #24]
 80036ec:	e010      	b.n	8003710 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	00f42400 	.word	0x00f42400
 80036f8:	007a1200 	.word	0x007a1200
 80036fc:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003700:	4b5e      	ldr	r3, [pc, #376]	; (800387c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003708:	4a5d      	ldr	r2, [pc, #372]	; (8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800370a:	fbb2 f3f3 	udiv	r3, r2, r3
 800370e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003710:	4b5a      	ldr	r3, [pc, #360]	; (800387c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	099b      	lsrs	r3, r3, #6
 8003716:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	fb02 f303 	mul.w	r3, r2, r3
 8003720:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003722:	4b56      	ldr	r3, [pc, #344]	; (800387c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	0f1b      	lsrs	r3, r3, #28
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003732:	61fb      	str	r3, [r7, #28]
          break;
 8003734:	e00f      	b.n	8003756 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003736:	4b51      	ldr	r3, [pc, #324]	; (800387c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003742:	d102      	bne.n	800374a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8003744:	4b4f      	ldr	r3, [pc, #316]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003746:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003748:	e005      	b.n	8003756 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 800374a:	4b4d      	ldr	r3, [pc, #308]	; (8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800374c:	61fb      	str	r3, [r7, #28]
          break;
 800374e:	e002      	b.n	8003756 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	61fb      	str	r3, [r7, #28]
          break;
 8003754:	bf00      	nop
        }
      }
      break;
 8003756:	e08a      	b.n	800386e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003758:	4b48      	ldr	r3, [pc, #288]	; (800387c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800375a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800375e:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800376a:	d06f      	beq.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003772:	d878      	bhi.n	8003866 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800377a:	d03c      	beq.n	80037f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003782:	d870      	bhi.n	8003866 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d006      	beq.n	8003798 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003790:	d169      	bne.n	8003866 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003792:	4b3d      	ldr	r3, [pc, #244]	; (8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003794:	61fb      	str	r3, [r7, #28]
          break;
 8003796:	e069      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003798:	4b38      	ldr	r3, [pc, #224]	; (800387c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a4:	d109      	bne.n	80037ba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80037a6:	4b35      	ldr	r3, [pc, #212]	; (800387c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80037a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b0:	4a34      	ldr	r2, [pc, #208]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80037b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b6:	61bb      	str	r3, [r7, #24]
 80037b8:	e008      	b.n	80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80037ba:	4b30      	ldr	r3, [pc, #192]	; (800387c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80037bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c4:	4a2e      	ldr	r2, [pc, #184]	; (8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80037c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ca:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80037cc:	4b2b      	ldr	r3, [pc, #172]	; (800387c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80037ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d2:	099b      	lsrs	r3, r3, #6
 80037d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	fb02 f303 	mul.w	r3, r2, r3
 80037de:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80037e0:	4b26      	ldr	r3, [pc, #152]	; (800387c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80037e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e6:	0f1b      	lsrs	r3, r3, #28
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f2:	61fb      	str	r3, [r7, #28]
          break;
 80037f4:	e03a      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80037f6:	4b21      	ldr	r3, [pc, #132]	; (800387c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003802:	d108      	bne.n	8003816 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003804:	4b1d      	ldr	r3, [pc, #116]	; (800387c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800380c:	4a1d      	ldr	r2, [pc, #116]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800380e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	e007      	b.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003816:	4b19      	ldr	r3, [pc, #100]	; (800387c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800381e:	4a18      	ldr	r2, [pc, #96]	; (8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003820:	fbb2 f3f3 	udiv	r3, r2, r3
 8003824:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003826:	4b15      	ldr	r3, [pc, #84]	; (800387c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	099b      	lsrs	r3, r3, #6
 800382c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	fb02 f303 	mul.w	r3, r2, r3
 8003836:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003838:	4b10      	ldr	r3, [pc, #64]	; (800387c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	0f1b      	lsrs	r3, r3, #28
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	fbb2 f3f3 	udiv	r3, r2, r3
 8003848:	61fb      	str	r3, [r7, #28]
          break;
 800384a:	e00f      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003858:	d102      	bne.n	8003860 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 800385a:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800385c:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800385e:	e005      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003862:	61fb      	str	r3, [r7, #28]
          break;
 8003864:	e002      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
          break;
 800386a:	bf00      	nop
        }
      }
      break;
 800386c:	bf00      	nop
    }
  }
  return frequency;
 800386e:	69fb      	ldr	r3, [r7, #28]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3724      	adds	r7, #36	; 0x24
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40023800 	.word	0x40023800
 8003880:	00f42400 	.word	0x00f42400
 8003884:	007a1200 	.word	0x007a1200
 8003888:	00bb8000 	.word	0x00bb8000

0800388c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800388c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003890:	b0ae      	sub	sp, #184	; 0xb8
 8003892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038b2:	4bcb      	ldr	r3, [pc, #812]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x354>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b0c      	cmp	r3, #12
 80038bc:	f200 8206 	bhi.w	8003ccc <HAL_RCC_GetSysClockFreq+0x440>
 80038c0:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	080038fd 	.word	0x080038fd
 80038cc:	08003ccd 	.word	0x08003ccd
 80038d0:	08003ccd 	.word	0x08003ccd
 80038d4:	08003ccd 	.word	0x08003ccd
 80038d8:	08003905 	.word	0x08003905
 80038dc:	08003ccd 	.word	0x08003ccd
 80038e0:	08003ccd 	.word	0x08003ccd
 80038e4:	08003ccd 	.word	0x08003ccd
 80038e8:	0800390d 	.word	0x0800390d
 80038ec:	08003ccd 	.word	0x08003ccd
 80038f0:	08003ccd 	.word	0x08003ccd
 80038f4:	08003ccd 	.word	0x08003ccd
 80038f8:	08003afd 	.word	0x08003afd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038fc:	4bb9      	ldr	r3, [pc, #740]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x358>)
 80038fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003902:	e1e7      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003904:	4bb8      	ldr	r3, [pc, #736]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003906:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800390a:	e1e3      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800390c:	4bb4      	ldr	r3, [pc, #720]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x354>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003918:	4bb1      	ldr	r3, [pc, #708]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x354>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d071      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003924:	4bae      	ldr	r3, [pc, #696]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	099b      	lsrs	r3, r3, #6
 800392a:	2200      	movs	r2, #0
 800392c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003930:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003934:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003940:	2300      	movs	r3, #0
 8003942:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800394a:	4622      	mov	r2, r4
 800394c:	462b      	mov	r3, r5
 800394e:	f04f 0000 	mov.w	r0, #0
 8003952:	f04f 0100 	mov.w	r1, #0
 8003956:	0159      	lsls	r1, r3, #5
 8003958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800395c:	0150      	lsls	r0, r2, #5
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4621      	mov	r1, r4
 8003964:	1a51      	subs	r1, r2, r1
 8003966:	6439      	str	r1, [r7, #64]	; 0x40
 8003968:	4629      	mov	r1, r5
 800396a:	eb63 0301 	sbc.w	r3, r3, r1
 800396e:	647b      	str	r3, [r7, #68]	; 0x44
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800397c:	4649      	mov	r1, r9
 800397e:	018b      	lsls	r3, r1, #6
 8003980:	4641      	mov	r1, r8
 8003982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003986:	4641      	mov	r1, r8
 8003988:	018a      	lsls	r2, r1, #6
 800398a:	4641      	mov	r1, r8
 800398c:	1a51      	subs	r1, r2, r1
 800398e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003990:	4649      	mov	r1, r9
 8003992:	eb63 0301 	sbc.w	r3, r3, r1
 8003996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80039a4:	4649      	mov	r1, r9
 80039a6:	00cb      	lsls	r3, r1, #3
 80039a8:	4641      	mov	r1, r8
 80039aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ae:	4641      	mov	r1, r8
 80039b0:	00ca      	lsls	r2, r1, #3
 80039b2:	4610      	mov	r0, r2
 80039b4:	4619      	mov	r1, r3
 80039b6:	4603      	mov	r3, r0
 80039b8:	4622      	mov	r2, r4
 80039ba:	189b      	adds	r3, r3, r2
 80039bc:	633b      	str	r3, [r7, #48]	; 0x30
 80039be:	462b      	mov	r3, r5
 80039c0:	460a      	mov	r2, r1
 80039c2:	eb42 0303 	adc.w	r3, r2, r3
 80039c6:	637b      	str	r3, [r7, #52]	; 0x34
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039d4:	4629      	mov	r1, r5
 80039d6:	024b      	lsls	r3, r1, #9
 80039d8:	4621      	mov	r1, r4
 80039da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039de:	4621      	mov	r1, r4
 80039e0:	024a      	lsls	r2, r1, #9
 80039e2:	4610      	mov	r0, r2
 80039e4:	4619      	mov	r1, r3
 80039e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80039f8:	f7fc fd14 	bl	8000424 <__aeabi_uldivmod>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4613      	mov	r3, r2
 8003a02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a06:	e067      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a08:	4b75      	ldr	r3, [pc, #468]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	099b      	lsrs	r3, r3, #6
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a14:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a22:	2300      	movs	r3, #0
 8003a24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003a2a:	4622      	mov	r2, r4
 8003a2c:	462b      	mov	r3, r5
 8003a2e:	f04f 0000 	mov.w	r0, #0
 8003a32:	f04f 0100 	mov.w	r1, #0
 8003a36:	0159      	lsls	r1, r3, #5
 8003a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a3c:	0150      	lsls	r0, r2, #5
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4621      	mov	r1, r4
 8003a44:	1a51      	subs	r1, r2, r1
 8003a46:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a48:	4629      	mov	r1, r5
 8003a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003a5c:	4649      	mov	r1, r9
 8003a5e:	018b      	lsls	r3, r1, #6
 8003a60:	4641      	mov	r1, r8
 8003a62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a66:	4641      	mov	r1, r8
 8003a68:	018a      	lsls	r2, r1, #6
 8003a6a:	4641      	mov	r1, r8
 8003a6c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a70:	4649      	mov	r1, r9
 8003a72:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a8a:	4692      	mov	sl, r2
 8003a8c:	469b      	mov	fp, r3
 8003a8e:	4623      	mov	r3, r4
 8003a90:	eb1a 0303 	adds.w	r3, sl, r3
 8003a94:	623b      	str	r3, [r7, #32]
 8003a96:	462b      	mov	r3, r5
 8003a98:	eb4b 0303 	adc.w	r3, fp, r3
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003aaa:	4629      	mov	r1, r5
 8003aac:	028b      	lsls	r3, r1, #10
 8003aae:	4621      	mov	r1, r4
 8003ab0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	028a      	lsls	r2, r1, #10
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ac4:	677a      	str	r2, [r7, #116]	; 0x74
 8003ac6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003aca:	f7fc fcab 	bl	8000424 <__aeabi_uldivmod>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ad8:	4b41      	ldr	r3, [pc, #260]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	0c1b      	lsrs	r3, r3, #16
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003aea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003aee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003afa:	e0eb      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003afc:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b08:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d06b      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b14:	4b32      	ldr	r3, [pc, #200]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	099b      	lsrs	r3, r3, #6
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b26:	663b      	str	r3, [r7, #96]	; 0x60
 8003b28:	2300      	movs	r3, #0
 8003b2a:	667b      	str	r3, [r7, #100]	; 0x64
 8003b2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003b30:	4622      	mov	r2, r4
 8003b32:	462b      	mov	r3, r5
 8003b34:	f04f 0000 	mov.w	r0, #0
 8003b38:	f04f 0100 	mov.w	r1, #0
 8003b3c:	0159      	lsls	r1, r3, #5
 8003b3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b42:	0150      	lsls	r0, r2, #5
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4621      	mov	r1, r4
 8003b4a:	1a51      	subs	r1, r2, r1
 8003b4c:	61b9      	str	r1, [r7, #24]
 8003b4e:	4629      	mov	r1, r5
 8003b50:	eb63 0301 	sbc.w	r3, r3, r1
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b62:	4659      	mov	r1, fp
 8003b64:	018b      	lsls	r3, r1, #6
 8003b66:	4651      	mov	r1, sl
 8003b68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b6c:	4651      	mov	r1, sl
 8003b6e:	018a      	lsls	r2, r1, #6
 8003b70:	4651      	mov	r1, sl
 8003b72:	ebb2 0801 	subs.w	r8, r2, r1
 8003b76:	4659      	mov	r1, fp
 8003b78:	eb63 0901 	sbc.w	r9, r3, r1
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b90:	4690      	mov	r8, r2
 8003b92:	4699      	mov	r9, r3
 8003b94:	4623      	mov	r3, r4
 8003b96:	eb18 0303 	adds.w	r3, r8, r3
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	462b      	mov	r3, r5
 8003b9e:	eb49 0303 	adc.w	r3, r9, r3
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	024b      	lsls	r3, r1, #9
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bba:	4621      	mov	r1, r4
 8003bbc:	024a      	lsls	r2, r1, #9
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bca:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003bcc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bd0:	f7fc fc28 	bl	8000424 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4613      	mov	r3, r2
 8003bda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bde:	e065      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x420>
 8003be0:	40023800 	.word	0x40023800
 8003be4:	00f42400 	.word	0x00f42400
 8003be8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bec:	4b3d      	ldr	r3, [pc, #244]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x458>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	099b      	lsrs	r3, r3, #6
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bfc:	653b      	str	r3, [r7, #80]	; 0x50
 8003bfe:	2300      	movs	r3, #0
 8003c00:	657b      	str	r3, [r7, #84]	; 0x54
 8003c02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003c06:	4642      	mov	r2, r8
 8003c08:	464b      	mov	r3, r9
 8003c0a:	f04f 0000 	mov.w	r0, #0
 8003c0e:	f04f 0100 	mov.w	r1, #0
 8003c12:	0159      	lsls	r1, r3, #5
 8003c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c18:	0150      	lsls	r0, r2, #5
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4641      	mov	r1, r8
 8003c20:	1a51      	subs	r1, r2, r1
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	4649      	mov	r1, r9
 8003c26:	eb63 0301 	sbc.w	r3, r3, r1
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c38:	4659      	mov	r1, fp
 8003c3a:	018b      	lsls	r3, r1, #6
 8003c3c:	4651      	mov	r1, sl
 8003c3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c42:	4651      	mov	r1, sl
 8003c44:	018a      	lsls	r2, r1, #6
 8003c46:	4651      	mov	r1, sl
 8003c48:	1a54      	subs	r4, r2, r1
 8003c4a:	4659      	mov	r1, fp
 8003c4c:	eb63 0501 	sbc.w	r5, r3, r1
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	00eb      	lsls	r3, r5, #3
 8003c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c5e:	00e2      	lsls	r2, r4, #3
 8003c60:	4614      	mov	r4, r2
 8003c62:	461d      	mov	r5, r3
 8003c64:	4643      	mov	r3, r8
 8003c66:	18e3      	adds	r3, r4, r3
 8003c68:	603b      	str	r3, [r7, #0]
 8003c6a:	464b      	mov	r3, r9
 8003c6c:	eb45 0303 	adc.w	r3, r5, r3
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c7e:	4629      	mov	r1, r5
 8003c80:	028b      	lsls	r3, r1, #10
 8003c82:	4621      	mov	r1, r4
 8003c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c88:	4621      	mov	r1, r4
 8003c8a:	028a      	lsls	r2, r1, #10
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c94:	2200      	movs	r2, #0
 8003c96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c98:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003c9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c9e:	f7fc fbc1 	bl	8000424 <__aeabi_uldivmod>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cac:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x458>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	0f1b      	lsrs	r3, r3, #28
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003cba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cca:	e003      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	37b8      	adds	r7, #184	; 0xb8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	00f42400 	.word	0x00f42400

08003cec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e28d      	b.n	800421a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 8083 	beq.w	8003e12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d0c:	4b94      	ldr	r3, [pc, #592]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d019      	beq.n	8003d4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d18:	4b91      	ldr	r3, [pc, #580]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d106      	bne.n	8003d32 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d24:	4b8e      	ldr	r3, [pc, #568]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d30:	d00c      	beq.n	8003d4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d32:	4b8b      	ldr	r3, [pc, #556]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d3a:	2b0c      	cmp	r3, #12
 8003d3c:	d112      	bne.n	8003d64 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3e:	4b88      	ldr	r3, [pc, #544]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4a:	d10b      	bne.n	8003d64 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	4b84      	ldr	r3, [pc, #528]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d05b      	beq.n	8003e10 <HAL_RCC_OscConfig+0x124>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d157      	bne.n	8003e10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e25a      	b.n	800421a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6c:	d106      	bne.n	8003d7c <HAL_RCC_OscConfig+0x90>
 8003d6e:	4b7c      	ldr	r3, [pc, #496]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a7b      	ldr	r2, [pc, #492]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e01d      	b.n	8003db8 <HAL_RCC_OscConfig+0xcc>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCC_OscConfig+0xb4>
 8003d86:	4b76      	ldr	r3, [pc, #472]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a75      	ldr	r2, [pc, #468]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b73      	ldr	r3, [pc, #460]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a72      	ldr	r2, [pc, #456]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCC_OscConfig+0xcc>
 8003da0:	4b6f      	ldr	r3, [pc, #444]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a6e      	ldr	r2, [pc, #440]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4b6c      	ldr	r3, [pc, #432]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a6b      	ldr	r2, [pc, #428]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d013      	beq.n	8003de8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fd ffe6 	bl	8001d90 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7fd ffe2 	bl	8001d90 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e21f      	b.n	800421a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	4b61      	ldr	r3, [pc, #388]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xdc>
 8003de6:	e014      	b.n	8003e12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7fd ffd2 	bl	8001d90 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df0:	f7fd ffce 	bl	8001d90 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e20b      	b.n	800421a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e02:	4b57      	ldr	r3, [pc, #348]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x104>
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d06f      	beq.n	8003efe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e1e:	4b50      	ldr	r3, [pc, #320]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d017      	beq.n	8003e5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e2a:	4b4d      	ldr	r3, [pc, #308]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d105      	bne.n	8003e42 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e36:	4b4a      	ldr	r3, [pc, #296]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e42:	4b47      	ldr	r3, [pc, #284]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e4a:	2b0c      	cmp	r3, #12
 8003e4c:	d11c      	bne.n	8003e88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e4e:	4b44      	ldr	r3, [pc, #272]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d116      	bne.n	8003e88 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5a:	4b41      	ldr	r3, [pc, #260]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d005      	beq.n	8003e72 <HAL_RCC_OscConfig+0x186>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d001      	beq.n	8003e72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e1d3      	b.n	800421a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e72:	4b3b      	ldr	r3, [pc, #236]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4937      	ldr	r1, [pc, #220]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e86:	e03a      	b.n	8003efe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d020      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e90:	4b34      	ldr	r3, [pc, #208]	; (8003f64 <HAL_RCC_OscConfig+0x278>)
 8003e92:	2201      	movs	r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e96:	f7fd ff7b 	bl	8001d90 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e9e:	f7fd ff77 	bl	8001d90 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e1b4      	b.n	800421a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb0:	4b2b      	ldr	r3, [pc, #172]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ebc:	4b28      	ldr	r3, [pc, #160]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4925      	ldr	r1, [pc, #148]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	600b      	str	r3, [r1, #0]
 8003ed0:	e015      	b.n	8003efe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ed2:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <HAL_RCC_OscConfig+0x278>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fd ff5a 	bl	8001d90 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ee0:	f7fd ff56 	bl	8001d90 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e193      	b.n	800421a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef2:	4b1b      	ldr	r3, [pc, #108]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d036      	beq.n	8003f78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d016      	beq.n	8003f40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f12:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <HAL_RCC_OscConfig+0x27c>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f18:	f7fd ff3a 	bl	8001d90 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f20:	f7fd ff36 	bl	8001d90 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e173      	b.n	800421a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f32:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_RCC_OscConfig+0x274>)
 8003f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x234>
 8003f3e:	e01b      	b.n	8003f78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f40:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <HAL_RCC_OscConfig+0x27c>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f46:	f7fd ff23 	bl	8001d90 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f4c:	e00e      	b.n	8003f6c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f4e:	f7fd ff1f 	bl	8001d90 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d907      	bls.n	8003f6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e15c      	b.n	800421a <HAL_RCC_OscConfig+0x52e>
 8003f60:	40023800 	.word	0x40023800
 8003f64:	42470000 	.word	0x42470000
 8003f68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f6c:	4b8a      	ldr	r3, [pc, #552]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 8003f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1ea      	bne.n	8003f4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8097 	beq.w	80040b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8a:	4b83      	ldr	r3, [pc, #524]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10f      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	4b7f      	ldr	r3, [pc, #508]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	4a7e      	ldr	r2, [pc, #504]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 8003fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa6:	4b7c      	ldr	r3, [pc, #496]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb6:	4b79      	ldr	r3, [pc, #484]	; (800419c <HAL_RCC_OscConfig+0x4b0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d118      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fc2:	4b76      	ldr	r3, [pc, #472]	; (800419c <HAL_RCC_OscConfig+0x4b0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a75      	ldr	r2, [pc, #468]	; (800419c <HAL_RCC_OscConfig+0x4b0>)
 8003fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fce:	f7fd fedf 	bl	8001d90 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd6:	f7fd fedb 	bl	8001d90 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e118      	b.n	800421a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe8:	4b6c      	ldr	r3, [pc, #432]	; (800419c <HAL_RCC_OscConfig+0x4b0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d106      	bne.n	800400a <HAL_RCC_OscConfig+0x31e>
 8003ffc:	4b66      	ldr	r3, [pc, #408]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004000:	4a65      	ldr	r2, [pc, #404]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	6713      	str	r3, [r2, #112]	; 0x70
 8004008:	e01c      	b.n	8004044 <HAL_RCC_OscConfig+0x358>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b05      	cmp	r3, #5
 8004010:	d10c      	bne.n	800402c <HAL_RCC_OscConfig+0x340>
 8004012:	4b61      	ldr	r3, [pc, #388]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	4a60      	ldr	r2, [pc, #384]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 8004018:	f043 0304 	orr.w	r3, r3, #4
 800401c:	6713      	str	r3, [r2, #112]	; 0x70
 800401e:	4b5e      	ldr	r3, [pc, #376]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4a5d      	ldr	r2, [pc, #372]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	6713      	str	r3, [r2, #112]	; 0x70
 800402a:	e00b      	b.n	8004044 <HAL_RCC_OscConfig+0x358>
 800402c:	4b5a      	ldr	r3, [pc, #360]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 800402e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004030:	4a59      	ldr	r2, [pc, #356]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	6713      	str	r3, [r2, #112]	; 0x70
 8004038:	4b57      	ldr	r3, [pc, #348]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	4a56      	ldr	r2, [pc, #344]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 800403e:	f023 0304 	bic.w	r3, r3, #4
 8004042:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d015      	beq.n	8004078 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404c:	f7fd fea0 	bl	8001d90 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004052:	e00a      	b.n	800406a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004054:	f7fd fe9c 	bl	8001d90 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e0d7      	b.n	800421a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406a:	4b4b      	ldr	r3, [pc, #300]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0ee      	beq.n	8004054 <HAL_RCC_OscConfig+0x368>
 8004076:	e014      	b.n	80040a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004078:	f7fd fe8a 	bl	8001d90 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800407e:	e00a      	b.n	8004096 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004080:	f7fd fe86 	bl	8001d90 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	; 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e0c1      	b.n	800421a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004096:	4b40      	ldr	r3, [pc, #256]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 8004098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1ee      	bne.n	8004080 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d105      	bne.n	80040b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a8:	4b3b      	ldr	r3, [pc, #236]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	4a3a      	ldr	r2, [pc, #232]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 80040ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80ad 	beq.w	8004218 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040be:	4b36      	ldr	r3, [pc, #216]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d060      	beq.n	800418c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d145      	bne.n	800415e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d2:	4b33      	ldr	r3, [pc, #204]	; (80041a0 <HAL_RCC_OscConfig+0x4b4>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fd fe5a 	bl	8001d90 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e0:	f7fd fe56 	bl	8001d90 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e093      	b.n	800421a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f2:	4b29      	ldr	r3, [pc, #164]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69da      	ldr	r2, [r3, #28]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	019b      	lsls	r3, r3, #6
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	085b      	lsrs	r3, r3, #1
 8004116:	3b01      	subs	r3, #1
 8004118:	041b      	lsls	r3, r3, #16
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	061b      	lsls	r3, r3, #24
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	071b      	lsls	r3, r3, #28
 800412a:	491b      	ldr	r1, [pc, #108]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 800412c:	4313      	orrs	r3, r2
 800412e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004130:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <HAL_RCC_OscConfig+0x4b4>)
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004136:	f7fd fe2b 	bl	8001d90 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413e:	f7fd fe27 	bl	8001d90 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e064      	b.n	800421a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x452>
 800415c:	e05c      	b.n	8004218 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415e:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <HAL_RCC_OscConfig+0x4b4>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fd fe14 	bl	8001d90 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800416c:	f7fd fe10 	bl	8001d90 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e04d      	b.n	800421a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_RCC_OscConfig+0x4ac>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x480>
 800418a:	e045      	b.n	8004218 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d107      	bne.n	80041a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e040      	b.n	800421a <HAL_RCC_OscConfig+0x52e>
 8004198:	40023800 	.word	0x40023800
 800419c:	40007000 	.word	0x40007000
 80041a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041a4:	4b1f      	ldr	r3, [pc, #124]	; (8004224 <HAL_RCC_OscConfig+0x538>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d030      	beq.n	8004214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041bc:	429a      	cmp	r2, r3
 80041be:	d129      	bne.n	8004214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d122      	bne.n	8004214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041d4:	4013      	ands	r3, r2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041dc:	4293      	cmp	r3, r2
 80041de:	d119      	bne.n	8004214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	085b      	lsrs	r3, r3, #1
 80041ec:	3b01      	subs	r3, #1
 80041ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d10f      	bne.n	8004214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d107      	bne.n	8004214 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800

08004228 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d904      	bls.n	800424a <HAL_SAI_InitProtocol+0x22>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	3b03      	subs	r3, #3
 8004244:	2b01      	cmp	r3, #1
 8004246:	d812      	bhi.n	800426e <HAL_SAI_InitProtocol+0x46>
 8004248:	e008      	b.n	800425c <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f9dd 	bl	8004610 <SAI_InitI2S>
 8004256:	4603      	mov	r3, r0
 8004258:	75fb      	strb	r3, [r7, #23]
      break;
 800425a:	e00b      	b.n	8004274 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	68b9      	ldr	r1, [r7, #8]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 fa82 	bl	800476c <SAI_InitPCM>
 8004268:	4603      	mov	r3, r0
 800426a:	75fb      	strb	r3, [r7, #23]
      break;
 800426c:	e002      	b.n	8004274 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	75fb      	strb	r3, [r7, #23]
      break;
 8004272:	bf00      	nop
  }

  if (status == HAL_OK)
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d104      	bne.n	8004284 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f808 	bl	8004290 <HAL_SAI_Init>
 8004280:	4603      	mov	r3, r0
 8004282:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004284:	7dfb      	ldrb	r3, [r7, #23]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e10c      	b.n	80044cc <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fd fbba 	bl	8001a40 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 faff 	bl	80048d8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fba6 	bl	8004a2c <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d030      	beq.n	800434a <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fbe3 	bl	8004ab4 <SAI_GetInputClock>
 80042ee:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	461a      	mov	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	025b      	lsls	r3, r3, #9
 8004302:	fbb2 f3f3 	udiv	r3, r2, r3
 8004306:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4a72      	ldr	r2, [pc, #456]	; (80044d4 <HAL_SAI_Init+0x244>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	08da      	lsrs	r2, r3, #3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8004316:	68f9      	ldr	r1, [r7, #12]
 8004318:	4b6e      	ldr	r3, [pc, #440]	; (80044d4 <HAL_SAI_Init+0x244>)
 800431a:	fba3 2301 	umull	r2, r3, r3, r1
 800431e:	08da      	lsrs	r2, r3, #3
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	1aca      	subs	r2, r1, r3
 800432a:	2a08      	cmp	r2, #8
 800432c:	d904      	bls.n	8004338 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433c:	2b04      	cmp	r3, #4
 800433e:	d104      	bne.n	800434a <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	085a      	lsrs	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_SAI_Init+0xca>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d109      	bne.n	800436e <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_SAI_Init+0xd6>
 8004362:	2300      	movs	r3, #0
 8004364:	e001      	b.n	800436a <HAL_SAI_Init+0xda>
 8004366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	e008      	b.n	8004380 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	2b01      	cmp	r3, #1
 8004374:	d102      	bne.n	800437c <HAL_SAI_Init+0xec>
 8004376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800437a:	e000      	b.n	800437e <HAL_SAI_Init+0xee>
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d811      	bhi.n	80043ac <HAL_SAI_Init+0x11c>
 8004388:	2b02      	cmp	r3, #2
 800438a:	d20b      	bcs.n	80043a4 <HAL_SAI_Init+0x114>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_SAI_Init+0x106>
 8004390:	2b01      	cmp	r3, #1
 8004392:	d003      	beq.n	800439c <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8004394:	e00a      	b.n	80043ac <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
    break;
 800439a:	e008      	b.n	80043ae <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800439c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043a0:	613b      	str	r3, [r7, #16]
    break;
 80043a2:	e004      	b.n	80043ae <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80043a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043a8:	613b      	str	r3, [r7, #16]
    break;
 80043aa:	e000      	b.n	80043ae <HAL_SAI_Init+0x11e>
      break;
 80043ac:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6819      	ldr	r1, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b47      	ldr	r3, [pc, #284]	; (80044d8 <HAL_SAI_Init+0x248>)
 80043ba:	400b      	ands	r3, r1
 80043bc:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6819      	ldr	r1, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043cc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80043d2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d8:	431a      	orrs	r2, r3
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 80043e6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80043f2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	051b      	lsls	r3, r3, #20
 80043fa:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004412:	f023 030f 	bic.w	r3, r3, #15
 8004416:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6859      	ldr	r1, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6899      	ldr	r1, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b26      	ldr	r3, [pc, #152]	; (80044dc <HAL_SAI_Init+0x24c>)
 8004442:	400b      	ands	r3, r1
 8004444:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6899      	ldr	r1, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004450:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004456:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 800445c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 8004462:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004468:	3b01      	subs	r3, #1
 800446a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800446c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68d9      	ldr	r1, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004484:	400b      	ands	r3, r1
 8004486:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68d9      	ldr	r1, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004496:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800449c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800449e:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a4:	3b01      	subs	r3, #1
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	cccccccd 	.word	0xcccccccd
 80044d8:	ff05c010 	.word	0xff05c010
 80044dc:	fff88000 	.word	0xfff88000

080044e0 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	4613      	mov	r3, r2
 80044ec:	80fb      	strh	r3, [r7, #6]
  if ((pData == NULL) || (Size == 0))
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <HAL_SAI_Receive_DMA+0x1a>
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e074      	b.n	80045e8 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b01      	cmp	r3, #1
 8004508:	d16d      	bne.n	80045e6 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_SAI_Receive_DMA+0x38>
 8004514:	2302      	movs	r3, #2
 8004516:	e067      	b.n	80045e8 <HAL_SAI_Receive_DMA+0x108>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hsai->pBuffPtr = pData;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	669a      	str	r2, [r3, #104]	; 0x68
    hsai->XferSize = Size;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	88fa      	ldrh	r2, [r7, #6]
 800452a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    hsai->XferCount = Size;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	88fa      	ldrh	r2, [r7, #6]
 8004532:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2222      	movs	r2, #34	; 0x22
 8004542:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454a:	4a29      	ldr	r2, [pc, #164]	; (80045f0 <HAL_SAI_Receive_DMA+0x110>)
 800454c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004552:	4a28      	ldr	r2, [pc, #160]	; (80045f4 <HAL_SAI_Receive_DMA+0x114>)
 8004554:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455a:	4a27      	ldr	r2, [pc, #156]	; (80045f8 <HAL_SAI_Receive_DMA+0x118>)
 800455c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004562:	2200      	movs	r2, #0
 8004564:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	331c      	adds	r3, #28
 8004570:	4619      	mov	r1, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004576:	461a      	mov	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800457e:	f7fd fdf7 	bl	8002170 <HAL_DMA_Start_IT>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return  HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e029      	b.n	80045e8 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004594:	2100      	movs	r1, #0
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f968 	bl	800486c <SAI_InterruptFlag>
 800459c:	4601      	mov	r1, r0
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80045ba:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d107      	bne.n	80045da <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045d8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e000      	b.n	80045e8 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 80045e6:	2302      	movs	r3, #2
  }
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	080049a9 	.word	0x080049a9
 80045f4:	08004949 	.word	0x08004949
 80045f8:	080049c5 	.word	0x080049c5

080045fc <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <SAI_InitI2S+0x2a>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d103      	bne.n	8004642 <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
 8004640:	e002      	b.n	8004648 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800464e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004656:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	661a      	str	r2, [r3, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e076      	b.n	8004760 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d107      	bne.n	8004688 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004684:	655a      	str	r2, [r3, #84]	; 0x54
 8004686:	e006      	b.n	8004696 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800468e:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Frame definition */
  switch (datasize)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d84f      	bhi.n	800473c <SAI_InitI2S+0x12c>
 800469c:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <SAI_InitI2S+0x94>)
 800469e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a2:	bf00      	nop
 80046a4:	080046b5 	.word	0x080046b5
 80046a8:	080046d7 	.word	0x080046d7
 80046ac:	080046f9 	.word	0x080046f9
 80046b0:	0800471b 	.word	0x0800471b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2280      	movs	r2, #128	; 0x80
 80046b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	085b      	lsrs	r3, r3, #1
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	085b      	lsrs	r3, r3, #1
 80046c8:	011a      	lsls	r2, r3, #4
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2240      	movs	r2, #64	; 0x40
 80046d2:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80046d4:	e034      	b.n	8004740 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2280      	movs	r2, #128	; 0x80
 80046da:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	085b      	lsrs	r3, r3, #1
 80046e0:	019a      	lsls	r2, r3, #6
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2280      	movs	r2, #128	; 0x80
 80046f4:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80046f6:	e023      	b.n	8004740 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	22c0      	movs	r2, #192	; 0xc0
 80046fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	019a      	lsls	r2, r3, #6
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	085b      	lsrs	r3, r3, #1
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2280      	movs	r2, #128	; 0x80
 8004716:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004718:	e012      	b.n	8004740 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	22e0      	movs	r2, #224	; 0xe0
 800471e:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	085b      	lsrs	r3, r3, #1
 8004724:	019a      	lsls	r2, r3, #6
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2280      	movs	r2, #128	; 0x80
 8004738:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800473a:	e001      	b.n	8004740 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e00f      	b.n	8004760 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d10b      	bne.n	800475e <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d102      	bne.n	8004752 <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2210      	movs	r2, #16
 8004750:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b02      	cmp	r3, #2
 8004756:	d102      	bne.n	800475e <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2208      	movs	r2, #8
 800475c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <SAI_InitPCM+0x2a>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d103      	bne.n	800479e <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	641a      	str	r2, [r3, #64]	; 0x40
 800479c:	e002      	b.n	80047a4 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047b0:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80047b8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047cc:	665a      	str	r2, [r3, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d103      	bne.n	80047dc <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	649a      	str	r2, [r3, #72]	; 0x48
 80047da:	e002      	b.n	80047e2 <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	220d      	movs	r2, #13
 80047e0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  switch (datasize)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d837      	bhi.n	8004858 <SAI_InitPCM+0xec>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <SAI_InitPCM+0x84>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004801 	.word	0x08004801
 80047f4:	08004817 	.word	0x08004817
 80047f8:	0800482d 	.word	0x0800482d
 80047fc:	08004843 	.word	0x08004843
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2280      	movs	r2, #128	; 0x80
 8004804:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	011a      	lsls	r2, r3, #4
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2240      	movs	r2, #64	; 0x40
 8004812:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004814:	e022      	b.n	800485c <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2280      	movs	r2, #128	; 0x80
 800481a:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2280      	movs	r2, #128	; 0x80
 8004828:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800482a:	e017      	b.n	800485c <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	22c0      	movs	r2, #192	; 0xc0
 8004830:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2280      	movs	r2, #128	; 0x80
 800483e:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004840:	e00c      	b.n	800485c <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	22e0      	movs	r2, #224	; 0xe0
 8004846:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2280      	movs	r2, #128	; 0x80
 8004854:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004856:	e001      	b.n	800485c <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop

0800486c <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004876:	2301      	movs	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d103      	bne.n	8004888 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f043 0308 	orr.w	r3, r3, #8
 8004886:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488c:	2b08      	cmp	r3, #8
 800488e:	d10b      	bne.n	80048a8 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004894:	2b03      	cmp	r3, #3
 8004896:	d003      	beq.n	80048a0 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d103      	bne.n	80048a8 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f043 0310 	orr.w	r3, r3, #16
 80048a6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d003      	beq.n	80048b8 <SAI_InterruptFlag+0x4c>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d104      	bne.n	80048c2 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e003      	b.n	80048ca <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f043 0304 	orr.w	r3, r3, #4
 80048c8:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80048ca:	68fb      	ldr	r3, [r7, #12]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80048e0:	4b17      	ldr	r3, [pc, #92]	; (8004940 <SAI_Disable+0x68>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a17      	ldr	r2, [pc, #92]	; (8004944 <SAI_Disable+0x6c>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	0b1b      	lsrs	r3, r3, #12
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004902:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1e5a      	subs	r2, r3, #1
 8004908:	60fa      	str	r2, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004914:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	72fb      	strb	r3, [r7, #11]
      break;
 8004922:	e006      	b.n	8004932 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e8      	bne.n	8004904 <SAI_Disable+0x2c>

  return status;
 8004932:	7afb      	ldrb	r3, [r7, #11]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	20000034 	.word	0x20000034
 8004944:	95cbec1b 	.word	0x95cbec1b

08004948 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495e:	d01c      	beq.n	800499a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800496e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004978:	2100      	movs	r1, #0
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f7ff ff76 	bl	800486c <SAI_InterruptFlag>
 8004980:	4603      	mov	r3, r0
 8004982:	43d9      	mvns	r1, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	400a      	ands	r2, r1
 8004990:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f7fc fcf0 	bl	8001380 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f7fc fcd2 	bl	8001360 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80049bc:	bf00      	nop
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d004      	beq.n	80049f6 <SAI_DMAError+0x32>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d112      	bne.n	8004a1c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004a04:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff ff66 	bl	80048d8 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f7ff fded 	bl	80045fc <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004a22:	bf00      	nop
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d00c      	beq.n	8004a56 <SAI_BlockSynchroConfig+0x2a>
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d80d      	bhi.n	8004a5c <SAI_BlockSynchroConfig+0x30>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <SAI_BlockSynchroConfig+0x1e>
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d003      	beq.n	8004a50 <SAI_BlockSynchroConfig+0x24>
 8004a48:	e008      	b.n	8004a5c <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
      break;
 8004a4e:	e008      	b.n	8004a62 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004a50:	2310      	movs	r3, #16
 8004a52:	60fb      	str	r3, [r7, #12]
      break;
 8004a54:	e005      	b.n	8004a62 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004a56:	2320      	movs	r3, #32
 8004a58:	60fb      	str	r3, [r7, #12]
      break;
 8004a5a:	e002      	b.n	8004a62 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]
      break;
 8004a60:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d103      	bne.n	8004a72 <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f043 0301 	orr.w	r3, r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a0b      	ldr	r2, [pc, #44]	; (8004aa4 <SAI_BlockSynchroConfig+0x78>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d004      	beq.n	8004a86 <SAI_BlockSynchroConfig+0x5a>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <SAI_BlockSynchroConfig+0x7c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d103      	bne.n	8004a8e <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 8004a86:	4a09      	ldr	r2, [pc, #36]	; (8004aac <SAI_BlockSynchroConfig+0x80>)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	e003      	b.n	8004a96 <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004a8e:	4a08      	ldr	r2, [pc, #32]	; (8004ab0 <SAI_BlockSynchroConfig+0x84>)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40015804 	.word	0x40015804
 8004aa8:	40015824 	.word	0x40015824
 8004aac:	40015800 	.word	0x40015800
 8004ab0:	40015c00 	.word	0x40015c00

08004ab4 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a0a      	ldr	r2, [pc, #40]	; (8004af0 <SAI_GetInputClock+0x3c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <SAI_GetInputClock+0x20>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a09      	ldr	r2, [pc, #36]	; (8004af4 <SAI_GetInputClock+0x40>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d104      	bne.n	8004ade <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004ad4:	2004      	movs	r0, #4
 8004ad6:	f7fe fc91 	bl	80033fc <HAL_RCCEx_GetPeriphCLKFreq>
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	e003      	b.n	8004ae6 <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004ade:	2008      	movs	r0, #8
 8004ae0:	f7fe fc8c 	bl	80033fc <HAL_RCCEx_GetPeriphCLKFreq>
 8004ae4:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40015804 	.word	0x40015804
 8004af4:	40015824 	.word	0x40015824

08004af8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e07b      	b.n	8004c02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d108      	bne.n	8004b24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b1a:	d009      	beq.n	8004b30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	61da      	str	r2, [r3, #28]
 8004b22:	e005      	b.n	8004b30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fc fe2a 	bl	80017a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb4:	ea42 0103 	orr.w	r1, r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	0c1b      	lsrs	r3, r3, #16
 8004bce:	f003 0104 	and.w	r1, r3, #4
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	f003 0210 	and.w	r2, r3, #16
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69da      	ldr	r2, [r3, #28]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bf0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b088      	sub	sp, #32
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	60f8      	str	r0, [r7, #12]
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	603b      	str	r3, [r7, #0]
 8004c16:	4613      	mov	r3, r2
 8004c18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_SPI_Transmit+0x22>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e126      	b.n	8004e7a <HAL_SPI_Transmit+0x270>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c34:	f7fd f8ac 	bl	8001d90 <HAL_GetTick>
 8004c38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d002      	beq.n	8004c50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c4e:	e10b      	b.n	8004e68 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_SPI_Transmit+0x52>
 8004c56:	88fb      	ldrh	r3, [r7, #6]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d102      	bne.n	8004c62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c60:	e102      	b.n	8004e68 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2203      	movs	r2, #3
 8004c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	88fa      	ldrh	r2, [r7, #6]
 8004c7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	88fa      	ldrh	r2, [r7, #6]
 8004c80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca8:	d10f      	bne.n	8004cca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd4:	2b40      	cmp	r3, #64	; 0x40
 8004cd6:	d007      	beq.n	8004ce8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ce6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cf0:	d14b      	bne.n	8004d8a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <HAL_SPI_Transmit+0xf6>
 8004cfa:	8afb      	ldrh	r3, [r7, #22]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d13e      	bne.n	8004d7e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d04:	881a      	ldrh	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	1c9a      	adds	r2, r3, #2
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d24:	e02b      	b.n	8004d7e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d112      	bne.n	8004d5a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	881a      	ldrh	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	1c9a      	adds	r2, r3, #2
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d58:	e011      	b.n	8004d7e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d5a:	f7fd f819 	bl	8001d90 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d803      	bhi.n	8004d72 <HAL_SPI_Transmit+0x168>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d70:	d102      	bne.n	8004d78 <HAL_SPI_Transmit+0x16e>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d102      	bne.n	8004d7e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d7c:	e074      	b.n	8004e68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1ce      	bne.n	8004d26 <HAL_SPI_Transmit+0x11c>
 8004d88:	e04c      	b.n	8004e24 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_SPI_Transmit+0x18e>
 8004d92:	8afb      	ldrh	r3, [r7, #22]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d140      	bne.n	8004e1a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	330c      	adds	r3, #12
 8004da2:	7812      	ldrb	r2, [r2, #0]
 8004da4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004dbe:	e02c      	b.n	8004e1a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d113      	bne.n	8004df6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	330c      	adds	r3, #12
 8004dd8:	7812      	ldrb	r2, [r2, #0]
 8004dda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004df4:	e011      	b.n	8004e1a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004df6:	f7fc ffcb 	bl	8001d90 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d803      	bhi.n	8004e0e <HAL_SPI_Transmit+0x204>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e0c:	d102      	bne.n	8004e14 <HAL_SPI_Transmit+0x20a>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d102      	bne.n	8004e1a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e18:	e026      	b.n	8004e68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1cd      	bne.n	8004dc0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	6839      	ldr	r1, [r7, #0]
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fd21 	bl	8005870 <SPI_EndRxTxTransaction>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10a      	bne.n	8004e58 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	77fb      	strb	r3, [r7, #31]
 8004e64:	e000      	b.n	8004e68 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e78:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b088      	sub	sp, #32
 8004e86:	af02      	add	r7, sp, #8
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	603b      	str	r3, [r7, #0]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e9e:	d112      	bne.n	8004ec6 <HAL_SPI_Receive+0x44>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10e      	bne.n	8004ec6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2204      	movs	r2, #4
 8004eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004eb0:	88fa      	ldrh	r2, [r7, #6]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f8f1 	bl	80050a4 <HAL_SPI_TransmitReceive>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	e0ea      	b.n	800509c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_SPI_Receive+0x52>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e0e3      	b.n	800509c <HAL_SPI_Receive+0x21a>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004edc:	f7fc ff58 	bl	8001d90 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d002      	beq.n	8004ef4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004eee:	2302      	movs	r3, #2
 8004ef0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ef2:	e0ca      	b.n	800508a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_SPI_Receive+0x7e>
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f04:	e0c1      	b.n	800508a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2204      	movs	r2, #4
 8004f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	88fa      	ldrh	r2, [r7, #6]
 8004f1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	88fa      	ldrh	r2, [r7, #6]
 8004f24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f4c:	d10f      	bne.n	8004f6e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	d007      	beq.n	8004f8c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d162      	bne.n	800505a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f94:	e02e      	b.n	8004ff4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d115      	bne.n	8004fd0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f103 020c 	add.w	r2, r3, #12
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	7812      	ldrb	r2, [r2, #0]
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fce:	e011      	b.n	8004ff4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fd0:	f7fc fede 	bl	8001d90 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d803      	bhi.n	8004fe8 <HAL_SPI_Receive+0x166>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fe6:	d102      	bne.n	8004fee <HAL_SPI_Receive+0x16c>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d102      	bne.n	8004ff4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ff2:	e04a      	b.n	800508a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1cb      	bne.n	8004f96 <HAL_SPI_Receive+0x114>
 8004ffe:	e031      	b.n	8005064 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b01      	cmp	r3, #1
 800500c:	d113      	bne.n	8005036 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	b292      	uxth	r2, r2
 800501a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	1c9a      	adds	r2, r3, #2
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005034:	e011      	b.n	800505a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005036:	f7fc feab 	bl	8001d90 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d803      	bhi.n	800504e <HAL_SPI_Receive+0x1cc>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800504c:	d102      	bne.n	8005054 <HAL_SPI_Receive+0x1d2>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d102      	bne.n	800505a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005058:	e017      	b.n	800508a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1cd      	bne.n	8005000 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	6839      	ldr	r1, [r7, #0]
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 fb9b 	bl	80057a4 <SPI_EndRxTransaction>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	75fb      	strb	r3, [r7, #23]
 8005086:	e000      	b.n	800508a <HAL_SPI_Receive+0x208>
  }

error :
 8005088:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800509a:	7dfb      	ldrb	r3, [r7, #23]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08c      	sub	sp, #48	; 0x30
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050b2:	2301      	movs	r3, #1
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_SPI_TransmitReceive+0x26>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e18a      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x33c>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050d2:	f7fc fe5d 	bl	8001d90 <HAL_GetTick>
 80050d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80050e8:	887b      	ldrh	r3, [r7, #2]
 80050ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d00f      	beq.n	8005114 <HAL_SPI_TransmitReceive+0x70>
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050fa:	d107      	bne.n	800510c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d103      	bne.n	800510c <HAL_SPI_TransmitReceive+0x68>
 8005104:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005108:	2b04      	cmp	r3, #4
 800510a:	d003      	beq.n	8005114 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800510c:	2302      	movs	r3, #2
 800510e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005112:	e15b      	b.n	80053cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_SPI_TransmitReceive+0x82>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_SPI_TransmitReceive+0x82>
 8005120:	887b      	ldrh	r3, [r7, #2]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d103      	bne.n	800512e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800512c:	e14e      	b.n	80053cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b04      	cmp	r3, #4
 8005138:	d003      	beq.n	8005142 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2205      	movs	r2, #5
 800513e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	887a      	ldrh	r2, [r7, #2]
 8005152:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	887a      	ldrh	r2, [r7, #2]
 8005158:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	887a      	ldrh	r2, [r7, #2]
 8005164:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	887a      	ldrh	r2, [r7, #2]
 800516a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	2b40      	cmp	r3, #64	; 0x40
 8005184:	d007      	beq.n	8005196 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005194:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800519e:	d178      	bne.n	8005292 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <HAL_SPI_TransmitReceive+0x10a>
 80051a8:	8b7b      	ldrh	r3, [r7, #26]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d166      	bne.n	800527c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	881a      	ldrh	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	1c9a      	adds	r2, r3, #2
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051d2:	e053      	b.n	800527c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d11b      	bne.n	800521a <HAL_SPI_TransmitReceive+0x176>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d016      	beq.n	800521a <HAL_SPI_TransmitReceive+0x176>
 80051ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d113      	bne.n	800521a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	881a      	ldrh	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	1c9a      	adds	r2, r3, #2
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b01      	cmp	r3, #1
 8005226:	d119      	bne.n	800525c <HAL_SPI_TransmitReceive+0x1b8>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d014      	beq.n	800525c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	b292      	uxth	r2, r2
 800523e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	1c9a      	adds	r2, r3, #2
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005258:	2301      	movs	r3, #1
 800525a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800525c:	f7fc fd98 	bl	8001d90 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005268:	429a      	cmp	r2, r3
 800526a:	d807      	bhi.n	800527c <HAL_SPI_TransmitReceive+0x1d8>
 800526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005272:	d003      	beq.n	800527c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800527a:	e0a7      	b.n	80053cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1a6      	bne.n	80051d4 <HAL_SPI_TransmitReceive+0x130>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1a1      	bne.n	80051d4 <HAL_SPI_TransmitReceive+0x130>
 8005290:	e07c      	b.n	800538c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <HAL_SPI_TransmitReceive+0x1fc>
 800529a:	8b7b      	ldrh	r3, [r7, #26]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d16b      	bne.n	8005378 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	330c      	adds	r3, #12
 80052aa:	7812      	ldrb	r2, [r2, #0]
 80052ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052c6:	e057      	b.n	8005378 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d11c      	bne.n	8005310 <HAL_SPI_TransmitReceive+0x26c>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d017      	beq.n	8005310 <HAL_SPI_TransmitReceive+0x26c>
 80052e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d114      	bne.n	8005310 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	7812      	ldrb	r2, [r2, #0]
 80052f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800530c:	2300      	movs	r3, #0
 800530e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b01      	cmp	r3, #1
 800531c:	d119      	bne.n	8005352 <HAL_SPI_TransmitReceive+0x2ae>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d014      	beq.n	8005352 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800534e:	2301      	movs	r3, #1
 8005350:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005352:	f7fc fd1d 	bl	8001d90 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800535e:	429a      	cmp	r2, r3
 8005360:	d803      	bhi.n	800536a <HAL_SPI_TransmitReceive+0x2c6>
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005368:	d102      	bne.n	8005370 <HAL_SPI_TransmitReceive+0x2cc>
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	2b00      	cmp	r3, #0
 800536e:	d103      	bne.n	8005378 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005376:	e029      	b.n	80053cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1a2      	bne.n	80052c8 <HAL_SPI_TransmitReceive+0x224>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d19d      	bne.n	80052c8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800538c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 fa6d 	bl	8005870 <SPI_EndRxTxTransaction>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d006      	beq.n	80053aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80053a8:	e010      	b.n	80053cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10b      	bne.n	80053ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	617b      	str	r3, [r7, #20]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	e000      	b.n	80053cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80053ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3730      	adds	r7, #48	; 0x30
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	4613      	mov	r3, r2
 80053f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_SPI_Transmit_DMA+0x20>
 8005404:	2302      	movs	r3, #2
 8005406:	e09b      	b.n	8005540 <HAL_SPI_Transmit_DMA+0x158>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	d002      	beq.n	8005422 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800541c:	2302      	movs	r3, #2
 800541e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005420:	e089      	b.n	8005536 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <HAL_SPI_Transmit_DMA+0x46>
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d102      	bne.n	8005434 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005432:	e080      	b.n	8005536 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2203      	movs	r2, #3
 8005438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	88fa      	ldrh	r2, [r7, #6]
 800544c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	88fa      	ldrh	r2, [r7, #6]
 8005452:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800547a:	d10f      	bne.n	800549c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800548a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800549a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a0:	4a29      	ldr	r2, [pc, #164]	; (8005548 <HAL_SPI_Transmit_DMA+0x160>)
 80054a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a8:	4a28      	ldr	r2, [pc, #160]	; (800554c <HAL_SPI_Transmit_DMA+0x164>)
 80054aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b0:	4a27      	ldr	r2, [pc, #156]	; (8005550 <HAL_SPI_Transmit_DMA+0x168>)
 80054b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b8:	2200      	movs	r2, #0
 80054ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c4:	4619      	mov	r1, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	330c      	adds	r3, #12
 80054cc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80054d4:	f7fc fe4c 	bl	8002170 <HAL_DMA_Start_IT>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00c      	beq.n	80054f8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e2:	f043 0210 	orr.w	r2, r3, #16
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80054f6:	e01e      	b.n	8005536 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b40      	cmp	r3, #64	; 0x40
 8005504:	d007      	beq.n	8005516 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005514:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f042 0220 	orr.w	r2, r2, #32
 8005524:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0202 	orr.w	r2, r2, #2
 8005534:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800553e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	08005639 	.word	0x08005639
 800554c:	08005591 	.word	0x08005591
 8005550:	08005655 	.word	0x08005655

08005554 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800559e:	f7fc fbf7 	bl	8001d90 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b2:	d03b      	beq.n	800562c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0220 	bic.w	r2, r2, #32
 80055c2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0202 	bic.w	r2, r2, #2
 80055d2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	2164      	movs	r1, #100	; 0x64
 80055d8:	6978      	ldr	r0, [r7, #20]
 80055da:	f000 f949 	bl	8005870 <SPI_EndRxTxTransaction>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e8:	f043 0220 	orr.w	r2, r3, #32
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10a      	bne.n	800560e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055f8:	2300      	movs	r3, #0
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2200      	movs	r2, #0
 8005612:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005624:	6978      	ldr	r0, [r7, #20]
 8005626:	f7ff ffa9 	bl	800557c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800562a:	e002      	b.n	8005632 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800562c:	6978      	ldr	r0, [r7, #20]
 800562e:	f7ff ff91 	bl	8005554 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005644:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f7ff ff8e 	bl	8005568 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0203 	bic.w	r2, r2, #3
 8005670:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005676:	f043 0210 	orr.w	r2, r3, #16
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f7ff ff78 	bl	800557c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	4613      	mov	r3, r2
 80056a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056a4:	f7fc fb74 	bl	8001d90 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	4413      	add	r3, r2
 80056b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056b4:	f7fc fb6c 	bl	8001d90 <HAL_GetTick>
 80056b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056ba:	4b39      	ldr	r3, [pc, #228]	; (80057a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	015b      	lsls	r3, r3, #5
 80056c0:	0d1b      	lsrs	r3, r3, #20
 80056c2:	69fa      	ldr	r2, [r7, #28]
 80056c4:	fb02 f303 	mul.w	r3, r2, r3
 80056c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ca:	e054      	b.n	8005776 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056d2:	d050      	beq.n	8005776 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056d4:	f7fc fb5c 	bl	8001d90 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d902      	bls.n	80056ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d13d      	bne.n	8005766 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005702:	d111      	bne.n	8005728 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800570c:	d004      	beq.n	8005718 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005716:	d107      	bne.n	8005728 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005726:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005730:	d10f      	bne.n	8005752 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005750:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e017      	b.n	8005796 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	3b01      	subs	r3, #1
 8005774:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4013      	ands	r3, r2
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	429a      	cmp	r2, r3
 8005784:	bf0c      	ite	eq
 8005786:	2301      	moveq	r3, #1
 8005788:	2300      	movne	r3, #0
 800578a:	b2db      	uxtb	r3, r3
 800578c:	461a      	mov	r2, r3
 800578e:	79fb      	ldrb	r3, [r7, #7]
 8005790:	429a      	cmp	r2, r3
 8005792:	d19b      	bne.n	80056cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3720      	adds	r7, #32
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	20000034 	.word	0x20000034

080057a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057b8:	d111      	bne.n	80057de <SPI_EndRxTransaction+0x3a>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c2:	d004      	beq.n	80057ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057cc:	d107      	bne.n	80057de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057dc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e6:	d12a      	bne.n	800583e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f0:	d012      	beq.n	8005818 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2200      	movs	r2, #0
 80057fa:	2180      	movs	r1, #128	; 0x80
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f7ff ff49 	bl	8005694 <SPI_WaitFlagStateUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d02d      	beq.n	8005864 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580c:	f043 0220 	orr.w	r2, r3, #32
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e026      	b.n	8005866 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2200      	movs	r2, #0
 8005820:	2101      	movs	r1, #1
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7ff ff36 	bl	8005694 <SPI_WaitFlagStateUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d01a      	beq.n	8005864 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005832:	f043 0220 	orr.w	r2, r3, #32
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e013      	b.n	8005866 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2200      	movs	r2, #0
 8005846:	2101      	movs	r1, #1
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f7ff ff23 	bl	8005694 <SPI_WaitFlagStateUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d007      	beq.n	8005864 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005858:	f043 0220 	orr.w	r2, r3, #32
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e000      	b.n	8005866 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af02      	add	r7, sp, #8
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800587c:	4b1b      	ldr	r3, [pc, #108]	; (80058ec <SPI_EndRxTxTransaction+0x7c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a1b      	ldr	r2, [pc, #108]	; (80058f0 <SPI_EndRxTxTransaction+0x80>)
 8005882:	fba2 2303 	umull	r2, r3, r2, r3
 8005886:	0d5b      	lsrs	r3, r3, #21
 8005888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800588c:	fb02 f303 	mul.w	r3, r2, r3
 8005890:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800589a:	d112      	bne.n	80058c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2200      	movs	r2, #0
 80058a4:	2180      	movs	r1, #128	; 0x80
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff fef4 	bl	8005694 <SPI_WaitFlagStateUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d016      	beq.n	80058e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	f043 0220 	orr.w	r2, r3, #32
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e00f      	b.n	80058e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d8:	2b80      	cmp	r3, #128	; 0x80
 80058da:	d0f2      	beq.n	80058c2 <SPI_EndRxTxTransaction+0x52>
 80058dc:	e000      	b.n	80058e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80058de:	bf00      	nop
  }

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20000034 	.word	0x20000034
 80058f0:	165e9f81 	.word	0x165e9f81

080058f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e041      	b.n	800598a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d106      	bne.n	8005920 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fb ff8a 	bl	8001834 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3304      	adds	r3, #4
 8005930:	4619      	mov	r1, r3
 8005932:	4610      	mov	r0, r2
 8005934:	f000 fb22 	bl	8005f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d104      	bne.n	80059b2 <HAL_TIM_IC_Start_IT+0x1e>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	e013      	b.n	80059da <HAL_TIM_IC_Start_IT+0x46>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d104      	bne.n	80059c2 <HAL_TIM_IC_Start_IT+0x2e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	e00b      	b.n	80059da <HAL_TIM_IC_Start_IT+0x46>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d104      	bne.n	80059d2 <HAL_TIM_IC_Start_IT+0x3e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	e003      	b.n	80059da <HAL_TIM_IC_Start_IT+0x46>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d104      	bne.n	80059ec <HAL_TIM_IC_Start_IT+0x58>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	e013      	b.n	8005a14 <HAL_TIM_IC_Start_IT+0x80>
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d104      	bne.n	80059fc <HAL_TIM_IC_Start_IT+0x68>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	e00b      	b.n	8005a14 <HAL_TIM_IC_Start_IT+0x80>
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d104      	bne.n	8005a0c <HAL_TIM_IC_Start_IT+0x78>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	e003      	b.n	8005a14 <HAL_TIM_IC_Start_IT+0x80>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a16:	7bbb      	ldrb	r3, [r7, #14]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d102      	bne.n	8005a22 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a1c:	7b7b      	ldrb	r3, [r7, #13]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d001      	beq.n	8005a26 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e0cc      	b.n	8005bc0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d104      	bne.n	8005a36 <HAL_TIM_IC_Start_IT+0xa2>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a34:	e013      	b.n	8005a5e <HAL_TIM_IC_Start_IT+0xca>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d104      	bne.n	8005a46 <HAL_TIM_IC_Start_IT+0xb2>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a44:	e00b      	b.n	8005a5e <HAL_TIM_IC_Start_IT+0xca>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d104      	bne.n	8005a56 <HAL_TIM_IC_Start_IT+0xc2>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a54:	e003      	b.n	8005a5e <HAL_TIM_IC_Start_IT+0xca>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <HAL_TIM_IC_Start_IT+0xda>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a6c:	e013      	b.n	8005a96 <HAL_TIM_IC_Start_IT+0x102>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d104      	bne.n	8005a7e <HAL_TIM_IC_Start_IT+0xea>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a7c:	e00b      	b.n	8005a96 <HAL_TIM_IC_Start_IT+0x102>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d104      	bne.n	8005a8e <HAL_TIM_IC_Start_IT+0xfa>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a8c:	e003      	b.n	8005a96 <HAL_TIM_IC_Start_IT+0x102>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2202      	movs	r2, #2
 8005a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b0c      	cmp	r3, #12
 8005a9a:	d841      	bhi.n	8005b20 <HAL_TIM_IC_Start_IT+0x18c>
 8005a9c:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <HAL_TIM_IC_Start_IT+0x110>)
 8005a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa2:	bf00      	nop
 8005aa4:	08005ad9 	.word	0x08005ad9
 8005aa8:	08005b21 	.word	0x08005b21
 8005aac:	08005b21 	.word	0x08005b21
 8005ab0:	08005b21 	.word	0x08005b21
 8005ab4:	08005aeb 	.word	0x08005aeb
 8005ab8:	08005b21 	.word	0x08005b21
 8005abc:	08005b21 	.word	0x08005b21
 8005ac0:	08005b21 	.word	0x08005b21
 8005ac4:	08005afd 	.word	0x08005afd
 8005ac8:	08005b21 	.word	0x08005b21
 8005acc:	08005b21 	.word	0x08005b21
 8005ad0:	08005b21 	.word	0x08005b21
 8005ad4:	08005b0f 	.word	0x08005b0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0202 	orr.w	r2, r2, #2
 8005ae6:	60da      	str	r2, [r3, #12]
      break;
 8005ae8:	e01d      	b.n	8005b26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0204 	orr.w	r2, r2, #4
 8005af8:	60da      	str	r2, [r3, #12]
      break;
 8005afa:	e014      	b.n	8005b26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0208 	orr.w	r2, r2, #8
 8005b0a:	60da      	str	r2, [r3, #12]
      break;
 8005b0c:	e00b      	b.n	8005b26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68da      	ldr	r2, [r3, #12]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f042 0210 	orr.w	r2, r2, #16
 8005b1c:	60da      	str	r2, [r3, #12]
      break;
 8005b1e:	e002      	b.n	8005b26 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	73fb      	strb	r3, [r7, #15]
      break;
 8005b24:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d148      	bne.n	8005bbe <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2201      	movs	r2, #1
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 fbeb 	bl	8006310 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a22      	ldr	r2, [pc, #136]	; (8005bc8 <HAL_TIM_IC_Start_IT+0x234>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d022      	beq.n	8005b8a <HAL_TIM_IC_Start_IT+0x1f6>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4c:	d01d      	beq.n	8005b8a <HAL_TIM_IC_Start_IT+0x1f6>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1e      	ldr	r2, [pc, #120]	; (8005bcc <HAL_TIM_IC_Start_IT+0x238>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d018      	beq.n	8005b8a <HAL_TIM_IC_Start_IT+0x1f6>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1c      	ldr	r2, [pc, #112]	; (8005bd0 <HAL_TIM_IC_Start_IT+0x23c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d013      	beq.n	8005b8a <HAL_TIM_IC_Start_IT+0x1f6>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1b      	ldr	r2, [pc, #108]	; (8005bd4 <HAL_TIM_IC_Start_IT+0x240>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00e      	beq.n	8005b8a <HAL_TIM_IC_Start_IT+0x1f6>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a19      	ldr	r2, [pc, #100]	; (8005bd8 <HAL_TIM_IC_Start_IT+0x244>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d009      	beq.n	8005b8a <HAL_TIM_IC_Start_IT+0x1f6>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <HAL_TIM_IC_Start_IT+0x248>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d004      	beq.n	8005b8a <HAL_TIM_IC_Start_IT+0x1f6>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <HAL_TIM_IC_Start_IT+0x24c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d111      	bne.n	8005bae <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b06      	cmp	r3, #6
 8005b9a:	d010      	beq.n	8005bbe <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0201 	orr.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bac:	e007      	b.n	8005bbe <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0201 	orr.w	r2, r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40010000 	.word	0x40010000
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40000800 	.word	0x40000800
 8005bd4:	40000c00 	.word	0x40000c00
 8005bd8:	40010400 	.word	0x40010400
 8005bdc:	40014000 	.word	0x40014000
 8005be0:	40001800 	.word	0x40001800

08005be4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d122      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d11b      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0202 	mvn.w	r2, #2
 8005c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fb f894 	bl	8000d54 <HAL_TIM_IC_CaptureCallback>
 8005c2c:	e005      	b.n	8005c3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f986 	bl	8005f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f98d 	bl	8005f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d122      	bne.n	8005c94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d11b      	bne.n	8005c94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f06f 0204 	mvn.w	r2, #4
 8005c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fb f86a 	bl	8000d54 <HAL_TIM_IC_CaptureCallback>
 8005c80:	e005      	b.n	8005c8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f95c 	bl	8005f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f963 	bl	8005f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d122      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d11b      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0208 	mvn.w	r2, #8
 8005cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2204      	movs	r2, #4
 8005cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fb f840 	bl	8000d54 <HAL_TIM_IC_CaptureCallback>
 8005cd4:	e005      	b.n	8005ce2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f932 	bl	8005f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f939 	bl	8005f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0310 	and.w	r3, r3, #16
 8005cf2:	2b10      	cmp	r3, #16
 8005cf4:	d122      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d11b      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f06f 0210 	mvn.w	r2, #16
 8005d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2208      	movs	r2, #8
 8005d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fb f816 	bl	8000d54 <HAL_TIM_IC_CaptureCallback>
 8005d28:	e005      	b.n	8005d36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f908 	bl	8005f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f90f 	bl	8005f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d10e      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d107      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0201 	mvn.w	r2, #1
 8005d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f8e2 	bl	8005f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d72:	2b80      	cmp	r3, #128	; 0x80
 8005d74:	d10e      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d80:	2b80      	cmp	r3, #128	; 0x80
 8005d82:	d107      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fb6a 	bl	8006468 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b40      	cmp	r3, #64	; 0x40
 8005da0:	d10e      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dac:	2b40      	cmp	r3, #64	; 0x40
 8005dae:	d107      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f8d4 	bl	8005f68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d10e      	bne.n	8005dec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	d107      	bne.n	8005dec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0220 	mvn.w	r2, #32
 8005de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fb34 	bl	8006454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dec:	bf00      	nop
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e088      	b.n	8005f24 <HAL_TIM_IC_ConfigChannel+0x130>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d11b      	bne.n	8005e58 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6818      	ldr	r0, [r3, #0]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	6819      	ldr	r1, [r3, #0]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f000 f944 	bl	80060bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 020c 	bic.w	r2, r2, #12
 8005e42:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6999      	ldr	r1, [r3, #24]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	619a      	str	r2, [r3, #24]
 8005e56:	e060      	b.n	8005f1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d11c      	bne.n	8005e98 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	6819      	ldr	r1, [r3, #0]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f000 f999 	bl	80061a4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	699a      	ldr	r2, [r3, #24]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e80:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6999      	ldr	r1, [r3, #24]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	021a      	lsls	r2, r3, #8
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	619a      	str	r2, [r3, #24]
 8005e96:	e040      	b.n	8005f1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b08      	cmp	r3, #8
 8005e9c:	d11b      	bne.n	8005ed6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6818      	ldr	r0, [r3, #0]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	6819      	ldr	r1, [r3, #0]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f000 f9b6 	bl	800621e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 020c 	bic.w	r2, r2, #12
 8005ec0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69d9      	ldr	r1, [r3, #28]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	61da      	str	r2, [r3, #28]
 8005ed4:	e021      	b.n	8005f1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b0c      	cmp	r3, #12
 8005eda:	d11c      	bne.n	8005f16 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	6819      	ldr	r1, [r3, #0]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f000 f9d3 	bl	8006296 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69da      	ldr	r2, [r3, #28]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005efe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	69d9      	ldr	r1, [r3, #28]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	021a      	lsls	r2, r3, #8
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	61da      	str	r2, [r3, #28]
 8005f14:	e001      	b.n	8005f1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a40      	ldr	r2, [pc, #256]	; (8006090 <TIM_Base_SetConfig+0x114>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d013      	beq.n	8005fbc <TIM_Base_SetConfig+0x40>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f9a:	d00f      	beq.n	8005fbc <TIM_Base_SetConfig+0x40>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a3d      	ldr	r2, [pc, #244]	; (8006094 <TIM_Base_SetConfig+0x118>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d00b      	beq.n	8005fbc <TIM_Base_SetConfig+0x40>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a3c      	ldr	r2, [pc, #240]	; (8006098 <TIM_Base_SetConfig+0x11c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d007      	beq.n	8005fbc <TIM_Base_SetConfig+0x40>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a3b      	ldr	r2, [pc, #236]	; (800609c <TIM_Base_SetConfig+0x120>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d003      	beq.n	8005fbc <TIM_Base_SetConfig+0x40>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a3a      	ldr	r2, [pc, #232]	; (80060a0 <TIM_Base_SetConfig+0x124>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d108      	bne.n	8005fce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a2f      	ldr	r2, [pc, #188]	; (8006090 <TIM_Base_SetConfig+0x114>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d02b      	beq.n	800602e <TIM_Base_SetConfig+0xb2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fdc:	d027      	beq.n	800602e <TIM_Base_SetConfig+0xb2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a2c      	ldr	r2, [pc, #176]	; (8006094 <TIM_Base_SetConfig+0x118>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d023      	beq.n	800602e <TIM_Base_SetConfig+0xb2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a2b      	ldr	r2, [pc, #172]	; (8006098 <TIM_Base_SetConfig+0x11c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d01f      	beq.n	800602e <TIM_Base_SetConfig+0xb2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a2a      	ldr	r2, [pc, #168]	; (800609c <TIM_Base_SetConfig+0x120>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d01b      	beq.n	800602e <TIM_Base_SetConfig+0xb2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a29      	ldr	r2, [pc, #164]	; (80060a0 <TIM_Base_SetConfig+0x124>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d017      	beq.n	800602e <TIM_Base_SetConfig+0xb2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a28      	ldr	r2, [pc, #160]	; (80060a4 <TIM_Base_SetConfig+0x128>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d013      	beq.n	800602e <TIM_Base_SetConfig+0xb2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a27      	ldr	r2, [pc, #156]	; (80060a8 <TIM_Base_SetConfig+0x12c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00f      	beq.n	800602e <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a26      	ldr	r2, [pc, #152]	; (80060ac <TIM_Base_SetConfig+0x130>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00b      	beq.n	800602e <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a25      	ldr	r2, [pc, #148]	; (80060b0 <TIM_Base_SetConfig+0x134>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d007      	beq.n	800602e <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a24      	ldr	r2, [pc, #144]	; (80060b4 <TIM_Base_SetConfig+0x138>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d003      	beq.n	800602e <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a23      	ldr	r2, [pc, #140]	; (80060b8 <TIM_Base_SetConfig+0x13c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d108      	bne.n	8006040 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	4313      	orrs	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a0a      	ldr	r2, [pc, #40]	; (8006090 <TIM_Base_SetConfig+0x114>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d003      	beq.n	8006074 <TIM_Base_SetConfig+0xf8>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a0c      	ldr	r2, [pc, #48]	; (80060a0 <TIM_Base_SetConfig+0x124>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d103      	bne.n	800607c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	615a      	str	r2, [r3, #20]
}
 8006082:	bf00      	nop
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	40010000 	.word	0x40010000
 8006094:	40000400 	.word	0x40000400
 8006098:	40000800 	.word	0x40000800
 800609c:	40000c00 	.word	0x40000c00
 80060a0:	40010400 	.word	0x40010400
 80060a4:	40014000 	.word	0x40014000
 80060a8:	40014400 	.word	0x40014400
 80060ac:	40014800 	.word	0x40014800
 80060b0:	40001800 	.word	0x40001800
 80060b4:	40001c00 	.word	0x40001c00
 80060b8:	40002000 	.word	0x40002000

080060bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f023 0201 	bic.w	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a28      	ldr	r2, [pc, #160]	; (8006188 <TIM_TI1_SetConfig+0xcc>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d01b      	beq.n	8006122 <TIM_TI1_SetConfig+0x66>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f0:	d017      	beq.n	8006122 <TIM_TI1_SetConfig+0x66>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4a25      	ldr	r2, [pc, #148]	; (800618c <TIM_TI1_SetConfig+0xd0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <TIM_TI1_SetConfig+0x66>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4a24      	ldr	r2, [pc, #144]	; (8006190 <TIM_TI1_SetConfig+0xd4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00f      	beq.n	8006122 <TIM_TI1_SetConfig+0x66>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	4a23      	ldr	r2, [pc, #140]	; (8006194 <TIM_TI1_SetConfig+0xd8>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00b      	beq.n	8006122 <TIM_TI1_SetConfig+0x66>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4a22      	ldr	r2, [pc, #136]	; (8006198 <TIM_TI1_SetConfig+0xdc>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d007      	beq.n	8006122 <TIM_TI1_SetConfig+0x66>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4a21      	ldr	r2, [pc, #132]	; (800619c <TIM_TI1_SetConfig+0xe0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d003      	beq.n	8006122 <TIM_TI1_SetConfig+0x66>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4a20      	ldr	r2, [pc, #128]	; (80061a0 <TIM_TI1_SetConfig+0xe4>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d101      	bne.n	8006126 <TIM_TI1_SetConfig+0x6a>
 8006122:	2301      	movs	r3, #1
 8006124:	e000      	b.n	8006128 <TIM_TI1_SetConfig+0x6c>
 8006126:	2300      	movs	r3, #0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d008      	beq.n	800613e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f023 0303 	bic.w	r3, r3, #3
 8006132:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4313      	orrs	r3, r2
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	e003      	b.n	8006146 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f043 0301 	orr.w	r3, r3, #1
 8006144:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800614c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	b2db      	uxtb	r3, r3
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	4313      	orrs	r3, r2
 8006158:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f023 030a 	bic.w	r3, r3, #10
 8006160:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f003 030a 	and.w	r3, r3, #10
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4313      	orrs	r3, r2
 800616c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	621a      	str	r2, [r3, #32]
}
 800617a:	bf00      	nop
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40010000 	.word	0x40010000
 800618c:	40000400 	.word	0x40000400
 8006190:	40000800 	.word	0x40000800
 8006194:	40000c00 	.word	0x40000c00
 8006198:	40010400 	.word	0x40010400
 800619c:	40014000 	.word	0x40014000
 80061a0:	40001800 	.word	0x40001800

080061a4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f023 0210 	bic.w	r2, r3, #16
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	021b      	lsls	r3, r3, #8
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	031b      	lsls	r3, r3, #12
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061f6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	621a      	str	r2, [r3, #32]
}
 8006212:	bf00      	nop
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800621e:	b480      	push	{r7}
 8006220:	b087      	sub	sp, #28
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	607a      	str	r2, [r7, #4]
 800622a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 0303 	bic.w	r3, r3, #3
 800624a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800625a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	b2db      	uxtb	r3, r3
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	4313      	orrs	r3, r2
 8006266:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800626e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	021b      	lsls	r3, r3, #8
 8006274:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	621a      	str	r2, [r3, #32]
}
 800628a:	bf00      	nop
 800628c:	371c      	adds	r7, #28
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006296:	b480      	push	{r7}
 8006298:	b087      	sub	sp, #28
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	607a      	str	r2, [r7, #4]
 80062a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	021b      	lsls	r3, r3, #8
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	031b      	lsls	r3, r3, #12
 80062da:	b29b      	uxth	r3, r3
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80062e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	031b      	lsls	r3, r3, #12
 80062ee:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	621a      	str	r2, [r3, #32]
}
 8006304:	bf00      	nop
 8006306:	371c      	adds	r7, #28
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	2201      	movs	r2, #1
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6a1a      	ldr	r2, [r3, #32]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	43db      	mvns	r3, r3
 8006332:	401a      	ands	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a1a      	ldr	r2, [r3, #32]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f003 031f 	and.w	r3, r3, #31
 8006342:	6879      	ldr	r1, [r7, #4]
 8006344:	fa01 f303 	lsl.w	r3, r1, r3
 8006348:	431a      	orrs	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	621a      	str	r2, [r3, #32]
}
 800634e:	bf00      	nop
 8006350:	371c      	adds	r7, #28
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
	...

0800635c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800636c:	2b01      	cmp	r3, #1
 800636e:	d101      	bne.n	8006374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006370:	2302      	movs	r3, #2
 8006372:	e05a      	b.n	800642a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a21      	ldr	r2, [pc, #132]	; (8006438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d022      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c0:	d01d      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1d      	ldr	r2, [pc, #116]	; (800643c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d018      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a1b      	ldr	r2, [pc, #108]	; (8006440 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d013      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1a      	ldr	r2, [pc, #104]	; (8006444 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00e      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a18      	ldr	r2, [pc, #96]	; (8006448 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d009      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a17      	ldr	r2, [pc, #92]	; (800644c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d004      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a15      	ldr	r2, [pc, #84]	; (8006450 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d10c      	bne.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006404:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	4313      	orrs	r3, r2
 800640e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40010000 	.word	0x40010000
 800643c:	40000400 	.word	0x40000400
 8006440:	40000800 	.word	0x40000800
 8006444:	40000c00 	.word	0x40000c00
 8006448:	40010400 	.word	0x40010400
 800644c:	40014000 	.word	0x40014000
 8006450:	40001800 	.word	0x40001800

08006454 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e03f      	b.n	800650e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d106      	bne.n	80064a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7fb fa14 	bl	80018d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2224      	movs	r2, #36	; 0x24
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fd7b 	bl	8006fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	691a      	ldr	r2, [r3, #16]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695a      	ldr	r2, [r3, #20]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2220      	movs	r2, #32
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2220      	movs	r2, #32
 8006508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b08a      	sub	sp, #40	; 0x28
 800651a:	af02      	add	r7, sp, #8
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	603b      	str	r3, [r7, #0]
 8006522:	4613      	mov	r3, r2
 8006524:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b20      	cmp	r3, #32
 8006534:	d17c      	bne.n	8006630 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <HAL_UART_Transmit+0x2c>
 800653c:	88fb      	ldrh	r3, [r7, #6]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e075      	b.n	8006632 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800654c:	2b01      	cmp	r3, #1
 800654e:	d101      	bne.n	8006554 <HAL_UART_Transmit+0x3e>
 8006550:	2302      	movs	r3, #2
 8006552:	e06e      	b.n	8006632 <HAL_UART_Transmit+0x11c>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2221      	movs	r2, #33	; 0x21
 8006566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800656a:	f7fb fc11 	bl	8001d90 <HAL_GetTick>
 800656e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	88fa      	ldrh	r2, [r7, #6]
 8006574:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	88fa      	ldrh	r2, [r7, #6]
 800657a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006584:	d108      	bne.n	8006598 <HAL_UART_Transmit+0x82>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d104      	bne.n	8006598 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800658e:	2300      	movs	r3, #0
 8006590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	e003      	b.n	80065a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800659c:	2300      	movs	r3, #0
 800659e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80065a8:	e02a      	b.n	8006600 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2200      	movs	r2, #0
 80065b2:	2180      	movs	r1, #128	; 0x80
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 faf9 	bl	8006bac <UART_WaitOnFlagUntilTimeout>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e036      	b.n	8006632 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10b      	bne.n	80065e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	3302      	adds	r3, #2
 80065de:	61bb      	str	r3, [r7, #24]
 80065e0:	e007      	b.n	80065f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	781a      	ldrb	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	3301      	adds	r3, #1
 80065f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006604:	b29b      	uxth	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1cf      	bne.n	80065aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2200      	movs	r2, #0
 8006612:	2140      	movs	r1, #64	; 0x40
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 fac9 	bl	8006bac <UART_WaitOnFlagUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e006      	b.n	8006632 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	e000      	b.n	8006632 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006630:	2302      	movs	r3, #2
  }
}
 8006632:	4618      	mov	r0, r3
 8006634:	3720      	adds	r7, #32
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b0ba      	sub	sp, #232	; 0xe8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006662:	2300      	movs	r3, #0
 8006664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006668:	2300      	movs	r3, #0
 800666a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800666e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006672:	f003 030f 	and.w	r3, r3, #15
 8006676:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800667a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10f      	bne.n	80066a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006686:	f003 0320 	and.w	r3, r3, #32
 800668a:	2b00      	cmp	r3, #0
 800668c:	d009      	beq.n	80066a2 <HAL_UART_IRQHandler+0x66>
 800668e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fbd3 	bl	8006e46 <UART_Receive_IT>
      return;
 80066a0:	e256      	b.n	8006b50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 80de 	beq.w	8006868 <HAL_UART_IRQHandler+0x22c>
 80066ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d106      	bne.n	80066c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 80d1 	beq.w	8006868 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00b      	beq.n	80066ea <HAL_UART_IRQHandler+0xae>
 80066d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d005      	beq.n	80066ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	f043 0201 	orr.w	r2, r3, #1
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ee:	f003 0304 	and.w	r3, r3, #4
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00b      	beq.n	800670e <HAL_UART_IRQHandler+0xd2>
 80066f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d005      	beq.n	800670e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	f043 0202 	orr.w	r2, r3, #2
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800670e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00b      	beq.n	8006732 <HAL_UART_IRQHandler+0xf6>
 800671a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d005      	beq.n	8006732 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	f043 0204 	orr.w	r2, r3, #4
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006736:	f003 0308 	and.w	r3, r3, #8
 800673a:	2b00      	cmp	r3, #0
 800673c:	d011      	beq.n	8006762 <HAL_UART_IRQHandler+0x126>
 800673e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b00      	cmp	r3, #0
 8006748:	d105      	bne.n	8006756 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800674a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	f043 0208 	orr.w	r2, r3, #8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 81ed 	beq.w	8006b46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800676c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006770:	f003 0320 	and.w	r3, r3, #32
 8006774:	2b00      	cmp	r3, #0
 8006776:	d008      	beq.n	800678a <HAL_UART_IRQHandler+0x14e>
 8006778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800677c:	f003 0320 	and.w	r3, r3, #32
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fb5e 	bl	8006e46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006794:	2b40      	cmp	r3, #64	; 0x40
 8006796:	bf0c      	ite	eq
 8006798:	2301      	moveq	r3, #1
 800679a:	2300      	movne	r3, #0
 800679c:	b2db      	uxtb	r3, r3
 800679e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	f003 0308 	and.w	r3, r3, #8
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d103      	bne.n	80067b6 <HAL_UART_IRQHandler+0x17a>
 80067ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d04f      	beq.n	8006856 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fa66 	bl	8006c88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c6:	2b40      	cmp	r3, #64	; 0x40
 80067c8:	d141      	bne.n	800684e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3314      	adds	r3, #20
 80067d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3314      	adds	r3, #20
 80067f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006802:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800680e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1d9      	bne.n	80067ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681a:	2b00      	cmp	r3, #0
 800681c:	d013      	beq.n	8006846 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	4a7d      	ldr	r2, [pc, #500]	; (8006a18 <HAL_UART_IRQHandler+0x3dc>)
 8006824:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	4618      	mov	r0, r3
 800682c:	f7fb fd68 	bl	8002300 <HAL_DMA_Abort_IT>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d016      	beq.n	8006864 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006840:	4610      	mov	r0, r2
 8006842:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006844:	e00e      	b.n	8006864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f99a 	bl	8006b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684c:	e00a      	b.n	8006864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f996 	bl	8006b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006854:	e006      	b.n	8006864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f992 	bl	8006b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006862:	e170      	b.n	8006b46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006864:	bf00      	nop
    return;
 8006866:	e16e      	b.n	8006b46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686c:	2b01      	cmp	r3, #1
 800686e:	f040 814a 	bne.w	8006b06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006876:	f003 0310 	and.w	r3, r3, #16
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 8143 	beq.w	8006b06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006884:	f003 0310 	and.w	r3, r3, #16
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 813c 	beq.w	8006b06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800688e:	2300      	movs	r3, #0
 8006890:	60bb      	str	r3, [r7, #8]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60bb      	str	r3, [r7, #8]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	60bb      	str	r3, [r7, #8]
 80068a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ae:	2b40      	cmp	r3, #64	; 0x40
 80068b0:	f040 80b4 	bne.w	8006a1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8140 	beq.w	8006b4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068d2:	429a      	cmp	r2, r3
 80068d4:	f080 8139 	bcs.w	8006b4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ea:	f000 8088 	beq.w	80069fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	330c      	adds	r3, #12
 80068f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800690c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	330c      	adds	r3, #12
 8006916:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800691a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800691e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006926:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800692a:	e841 2300 	strex	r3, r2, [r1]
 800692e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006932:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1d9      	bne.n	80068ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3314      	adds	r3, #20
 8006940:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006944:	e853 3f00 	ldrex	r3, [r3]
 8006948:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800694a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800694c:	f023 0301 	bic.w	r3, r3, #1
 8006950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3314      	adds	r3, #20
 800695a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800695e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006962:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006966:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800696a:	e841 2300 	strex	r3, r2, [r1]
 800696e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e1      	bne.n	800693a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3314      	adds	r3, #20
 800697c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800698c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3314      	adds	r3, #20
 8006996:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800699a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800699c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e3      	bne.n	8006976 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	330c      	adds	r3, #12
 80069c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c6:	e853 3f00 	ldrex	r3, [r3]
 80069ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ce:	f023 0310 	bic.w	r3, r3, #16
 80069d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	330c      	adds	r3, #12
 80069dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80069e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069e8:	e841 2300 	strex	r3, r2, [r1]
 80069ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e3      	bne.n	80069bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fb fc11 	bl	8002220 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f8c0 	bl	8006b94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a14:	e099      	b.n	8006b4a <HAL_UART_IRQHandler+0x50e>
 8006a16:	bf00      	nop
 8006a18:	08006d4f 	.word	0x08006d4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 808b 	beq.w	8006b4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006a38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 8086 	beq.w	8006b4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	330c      	adds	r3, #12
 8006a48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	330c      	adds	r3, #12
 8006a62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a66:	647a      	str	r2, [r7, #68]	; 0x44
 8006a68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e3      	bne.n	8006a42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3314      	adds	r3, #20
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	623b      	str	r3, [r7, #32]
   return(result);
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	f023 0301 	bic.w	r3, r3, #1
 8006a90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3314      	adds	r3, #20
 8006a9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a9e:	633a      	str	r2, [r7, #48]	; 0x30
 8006aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e3      	bne.n	8006a7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	330c      	adds	r3, #12
 8006ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0310 	bic.w	r3, r3, #16
 8006ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	330c      	adds	r3, #12
 8006ae0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ae4:	61fa      	str	r2, [r7, #28]
 8006ae6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	69b9      	ldr	r1, [r7, #24]
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	617b      	str	r3, [r7, #20]
   return(result);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e3      	bne.n	8006ac0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006afc:	4619      	mov	r1, r3
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f848 	bl	8006b94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b04:	e023      	b.n	8006b4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <HAL_UART_IRQHandler+0x4ea>
 8006b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f929 	bl	8006d76 <UART_Transmit_IT>
    return;
 8006b24:	e014      	b.n	8006b50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00e      	beq.n	8006b50 <HAL_UART_IRQHandler+0x514>
 8006b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d008      	beq.n	8006b50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f969 	bl	8006e16 <UART_EndTransmit_IT>
    return;
 8006b44:	e004      	b.n	8006b50 <HAL_UART_IRQHandler+0x514>
    return;
 8006b46:	bf00      	nop
 8006b48:	e002      	b.n	8006b50 <HAL_UART_IRQHandler+0x514>
      return;
 8006b4a:	bf00      	nop
 8006b4c:	e000      	b.n	8006b50 <HAL_UART_IRQHandler+0x514>
      return;
 8006b4e:	bf00      	nop
  }
}
 8006b50:	37e8      	adds	r7, #232	; 0xe8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop

08006b58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b090      	sub	sp, #64	; 0x40
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	603b      	str	r3, [r7, #0]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bbc:	e050      	b.n	8006c60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc4:	d04c      	beq.n	8006c60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d007      	beq.n	8006bdc <UART_WaitOnFlagUntilTimeout+0x30>
 8006bcc:	f7fb f8e0 	bl	8001d90 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d241      	bcs.n	8006c60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330c      	adds	r3, #12
 8006be2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	330c      	adds	r3, #12
 8006bfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bfc:	637a      	str	r2, [r7, #52]	; 0x34
 8006bfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e5      	bne.n	8006bdc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3314      	adds	r3, #20
 8006c16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f023 0301 	bic.w	r3, r3, #1
 8006c26:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3314      	adds	r3, #20
 8006c2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c30:	623a      	str	r2, [r7, #32]
 8006c32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	69f9      	ldr	r1, [r7, #28]
 8006c36:	6a3a      	ldr	r2, [r7, #32]
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e5      	bne.n	8006c10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e00f      	b.n	8006c80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	bf0c      	ite	eq
 8006c70:	2301      	moveq	r3, #1
 8006c72:	2300      	movne	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	79fb      	ldrb	r3, [r7, #7]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d09f      	beq.n	8006bbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3740      	adds	r7, #64	; 0x40
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b095      	sub	sp, #84	; 0x54
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	330c      	adds	r3, #12
 8006c96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	330c      	adds	r3, #12
 8006cae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cb0:	643a      	str	r2, [r7, #64]	; 0x40
 8006cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e5      	bne.n	8006c90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3314      	adds	r3, #20
 8006cca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	f023 0301 	bic.w	r3, r3, #1
 8006cda:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3314      	adds	r3, #20
 8006ce2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ce4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e5      	bne.n	8006cc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d119      	bne.n	8006d34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	330c      	adds	r3, #12
 8006d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	e853 3f00 	ldrex	r3, [r3]
 8006d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f023 0310 	bic.w	r3, r3, #16
 8006d16:	647b      	str	r3, [r7, #68]	; 0x44
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	330c      	adds	r3, #12
 8006d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d20:	61ba      	str	r2, [r7, #24]
 8006d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	6979      	ldr	r1, [r7, #20]
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	e841 2300 	strex	r3, r2, [r1]
 8006d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e5      	bne.n	8006d00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d42:	bf00      	nop
 8006d44:	3754      	adds	r7, #84	; 0x54
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f7ff ff09 	bl	8006b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b085      	sub	sp, #20
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b21      	cmp	r3, #33	; 0x21
 8006d88:	d13e      	bne.n	8006e08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d92:	d114      	bne.n	8006dbe <UART_Transmit_IT+0x48>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d110      	bne.n	8006dbe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006db0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	1c9a      	adds	r2, r3, #2
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	621a      	str	r2, [r3, #32]
 8006dbc:	e008      	b.n	8006dd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	1c59      	adds	r1, r3, #1
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6211      	str	r1, [r2, #32]
 8006dc8:	781a      	ldrb	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	4619      	mov	r1, r3
 8006dde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10f      	bne.n	8006e04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006df2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	e000      	b.n	8006e0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e08:	2302      	movs	r3, #2
  }
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68da      	ldr	r2, [r3, #12]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff fe8e 	bl	8006b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b08c      	sub	sp, #48	; 0x30
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b22      	cmp	r3, #34	; 0x22
 8006e58:	f040 80ab 	bne.w	8006fb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e64:	d117      	bne.n	8006e96 <UART_Receive_IT+0x50>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d113      	bne.n	8006e96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8e:	1c9a      	adds	r2, r3, #2
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	629a      	str	r2, [r3, #40]	; 0x28
 8006e94:	e026      	b.n	8006ee4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ea8:	d007      	beq.n	8006eba <UART_Receive_IT+0x74>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10a      	bne.n	8006ec8 <UART_Receive_IT+0x82>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	701a      	strb	r2, [r3, #0]
 8006ec6:	e008      	b.n	8006eda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	3b01      	subs	r3, #1
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d15a      	bne.n	8006fae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68da      	ldr	r2, [r3, #12]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0220 	bic.w	r2, r2, #32
 8006f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695a      	ldr	r2, [r3, #20]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0201 	bic.w	r2, r2, #1
 8006f26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d135      	bne.n	8006fa4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	330c      	adds	r3, #12
 8006f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f023 0310 	bic.w	r3, r3, #16
 8006f54:	627b      	str	r3, [r7, #36]	; 0x24
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	330c      	adds	r3, #12
 8006f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f5e:	623a      	str	r2, [r7, #32]
 8006f60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f62:	69f9      	ldr	r1, [r7, #28]
 8006f64:	6a3a      	ldr	r2, [r7, #32]
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1e5      	bne.n	8006f3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0310 	and.w	r3, r3, #16
 8006f7c:	2b10      	cmp	r3, #16
 8006f7e:	d10a      	bne.n	8006f96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7ff fdf9 	bl	8006b94 <HAL_UARTEx_RxEventCallback>
 8006fa2:	e002      	b.n	8006faa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff fde1 	bl	8006b6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	e002      	b.n	8006fb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	e000      	b.n	8006fb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006fb2:	2302      	movs	r3, #2
  }
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3730      	adds	r7, #48	; 0x30
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fc0:	b0c0      	sub	sp, #256	; 0x100
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd8:	68d9      	ldr	r1, [r3, #12]
 8006fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	ea40 0301 	orr.w	r3, r0, r1
 8006fe4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	4313      	orrs	r3, r2
 8007004:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007014:	f021 010c 	bic.w	r1, r1, #12
 8007018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007022:	430b      	orrs	r3, r1
 8007024:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007036:	6999      	ldr	r1, [r3, #24]
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	ea40 0301 	orr.w	r3, r0, r1
 8007042:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	4b8f      	ldr	r3, [pc, #572]	; (8007288 <UART_SetConfig+0x2cc>)
 800704c:	429a      	cmp	r2, r3
 800704e:	d005      	beq.n	800705c <UART_SetConfig+0xa0>
 8007050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	4b8d      	ldr	r3, [pc, #564]	; (800728c <UART_SetConfig+0x2d0>)
 8007058:	429a      	cmp	r2, r3
 800705a:	d104      	bne.n	8007066 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800705c:	f7fb fe90 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 8007060:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007064:	e003      	b.n	800706e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007066:	f7fb fe77 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 800706a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800706e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007078:	f040 810c 	bne.w	8007294 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800707c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007080:	2200      	movs	r2, #0
 8007082:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007086:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800708a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800708e:	4622      	mov	r2, r4
 8007090:	462b      	mov	r3, r5
 8007092:	1891      	adds	r1, r2, r2
 8007094:	65b9      	str	r1, [r7, #88]	; 0x58
 8007096:	415b      	adcs	r3, r3
 8007098:	65fb      	str	r3, [r7, #92]	; 0x5c
 800709a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800709e:	4621      	mov	r1, r4
 80070a0:	eb12 0801 	adds.w	r8, r2, r1
 80070a4:	4629      	mov	r1, r5
 80070a6:	eb43 0901 	adc.w	r9, r3, r1
 80070aa:	f04f 0200 	mov.w	r2, #0
 80070ae:	f04f 0300 	mov.w	r3, #0
 80070b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070be:	4690      	mov	r8, r2
 80070c0:	4699      	mov	r9, r3
 80070c2:	4623      	mov	r3, r4
 80070c4:	eb18 0303 	adds.w	r3, r8, r3
 80070c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070cc:	462b      	mov	r3, r5
 80070ce:	eb49 0303 	adc.w	r3, r9, r3
 80070d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80070e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80070ea:	460b      	mov	r3, r1
 80070ec:	18db      	adds	r3, r3, r3
 80070ee:	653b      	str	r3, [r7, #80]	; 0x50
 80070f0:	4613      	mov	r3, r2
 80070f2:	eb42 0303 	adc.w	r3, r2, r3
 80070f6:	657b      	str	r3, [r7, #84]	; 0x54
 80070f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80070fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007100:	f7f9 f990 	bl	8000424 <__aeabi_uldivmod>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4b61      	ldr	r3, [pc, #388]	; (8007290 <UART_SetConfig+0x2d4>)
 800710a:	fba3 2302 	umull	r2, r3, r3, r2
 800710e:	095b      	lsrs	r3, r3, #5
 8007110:	011c      	lsls	r4, r3, #4
 8007112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007116:	2200      	movs	r2, #0
 8007118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800711c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007120:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007124:	4642      	mov	r2, r8
 8007126:	464b      	mov	r3, r9
 8007128:	1891      	adds	r1, r2, r2
 800712a:	64b9      	str	r1, [r7, #72]	; 0x48
 800712c:	415b      	adcs	r3, r3
 800712e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007130:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007134:	4641      	mov	r1, r8
 8007136:	eb12 0a01 	adds.w	sl, r2, r1
 800713a:	4649      	mov	r1, r9
 800713c:	eb43 0b01 	adc.w	fp, r3, r1
 8007140:	f04f 0200 	mov.w	r2, #0
 8007144:	f04f 0300 	mov.w	r3, #0
 8007148:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800714c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007154:	4692      	mov	sl, r2
 8007156:	469b      	mov	fp, r3
 8007158:	4643      	mov	r3, r8
 800715a:	eb1a 0303 	adds.w	r3, sl, r3
 800715e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007162:	464b      	mov	r3, r9
 8007164:	eb4b 0303 	adc.w	r3, fp, r3
 8007168:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007178:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800717c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007180:	460b      	mov	r3, r1
 8007182:	18db      	adds	r3, r3, r3
 8007184:	643b      	str	r3, [r7, #64]	; 0x40
 8007186:	4613      	mov	r3, r2
 8007188:	eb42 0303 	adc.w	r3, r2, r3
 800718c:	647b      	str	r3, [r7, #68]	; 0x44
 800718e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007192:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007196:	f7f9 f945 	bl	8000424 <__aeabi_uldivmod>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	4611      	mov	r1, r2
 80071a0:	4b3b      	ldr	r3, [pc, #236]	; (8007290 <UART_SetConfig+0x2d4>)
 80071a2:	fba3 2301 	umull	r2, r3, r3, r1
 80071a6:	095b      	lsrs	r3, r3, #5
 80071a8:	2264      	movs	r2, #100	; 0x64
 80071aa:	fb02 f303 	mul.w	r3, r2, r3
 80071ae:	1acb      	subs	r3, r1, r3
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80071b6:	4b36      	ldr	r3, [pc, #216]	; (8007290 <UART_SetConfig+0x2d4>)
 80071b8:	fba3 2302 	umull	r2, r3, r3, r2
 80071bc:	095b      	lsrs	r3, r3, #5
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071c4:	441c      	add	r4, r3
 80071c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80071d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80071d8:	4642      	mov	r2, r8
 80071da:	464b      	mov	r3, r9
 80071dc:	1891      	adds	r1, r2, r2
 80071de:	63b9      	str	r1, [r7, #56]	; 0x38
 80071e0:	415b      	adcs	r3, r3
 80071e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071e8:	4641      	mov	r1, r8
 80071ea:	1851      	adds	r1, r2, r1
 80071ec:	6339      	str	r1, [r7, #48]	; 0x30
 80071ee:	4649      	mov	r1, r9
 80071f0:	414b      	adcs	r3, r1
 80071f2:	637b      	str	r3, [r7, #52]	; 0x34
 80071f4:	f04f 0200 	mov.w	r2, #0
 80071f8:	f04f 0300 	mov.w	r3, #0
 80071fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007200:	4659      	mov	r1, fp
 8007202:	00cb      	lsls	r3, r1, #3
 8007204:	4651      	mov	r1, sl
 8007206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800720a:	4651      	mov	r1, sl
 800720c:	00ca      	lsls	r2, r1, #3
 800720e:	4610      	mov	r0, r2
 8007210:	4619      	mov	r1, r3
 8007212:	4603      	mov	r3, r0
 8007214:	4642      	mov	r2, r8
 8007216:	189b      	adds	r3, r3, r2
 8007218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800721c:	464b      	mov	r3, r9
 800721e:	460a      	mov	r2, r1
 8007220:	eb42 0303 	adc.w	r3, r2, r3
 8007224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007234:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007238:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800723c:	460b      	mov	r3, r1
 800723e:	18db      	adds	r3, r3, r3
 8007240:	62bb      	str	r3, [r7, #40]	; 0x28
 8007242:	4613      	mov	r3, r2
 8007244:	eb42 0303 	adc.w	r3, r2, r3
 8007248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800724a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800724e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007252:	f7f9 f8e7 	bl	8000424 <__aeabi_uldivmod>
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	4b0d      	ldr	r3, [pc, #52]	; (8007290 <UART_SetConfig+0x2d4>)
 800725c:	fba3 1302 	umull	r1, r3, r3, r2
 8007260:	095b      	lsrs	r3, r3, #5
 8007262:	2164      	movs	r1, #100	; 0x64
 8007264:	fb01 f303 	mul.w	r3, r1, r3
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	3332      	adds	r3, #50	; 0x32
 800726e:	4a08      	ldr	r2, [pc, #32]	; (8007290 <UART_SetConfig+0x2d4>)
 8007270:	fba2 2303 	umull	r2, r3, r2, r3
 8007274:	095b      	lsrs	r3, r3, #5
 8007276:	f003 0207 	and.w	r2, r3, #7
 800727a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4422      	add	r2, r4
 8007282:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007284:	e105      	b.n	8007492 <UART_SetConfig+0x4d6>
 8007286:	bf00      	nop
 8007288:	40011000 	.word	0x40011000
 800728c:	40011400 	.word	0x40011400
 8007290:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007298:	2200      	movs	r2, #0
 800729a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800729e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80072a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80072a6:	4642      	mov	r2, r8
 80072a8:	464b      	mov	r3, r9
 80072aa:	1891      	adds	r1, r2, r2
 80072ac:	6239      	str	r1, [r7, #32]
 80072ae:	415b      	adcs	r3, r3
 80072b0:	627b      	str	r3, [r7, #36]	; 0x24
 80072b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072b6:	4641      	mov	r1, r8
 80072b8:	1854      	adds	r4, r2, r1
 80072ba:	4649      	mov	r1, r9
 80072bc:	eb43 0501 	adc.w	r5, r3, r1
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	00eb      	lsls	r3, r5, #3
 80072ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072ce:	00e2      	lsls	r2, r4, #3
 80072d0:	4614      	mov	r4, r2
 80072d2:	461d      	mov	r5, r3
 80072d4:	4643      	mov	r3, r8
 80072d6:	18e3      	adds	r3, r4, r3
 80072d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072dc:	464b      	mov	r3, r9
 80072de:	eb45 0303 	adc.w	r3, r5, r3
 80072e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80072e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072f6:	f04f 0200 	mov.w	r2, #0
 80072fa:	f04f 0300 	mov.w	r3, #0
 80072fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007302:	4629      	mov	r1, r5
 8007304:	008b      	lsls	r3, r1, #2
 8007306:	4621      	mov	r1, r4
 8007308:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800730c:	4621      	mov	r1, r4
 800730e:	008a      	lsls	r2, r1, #2
 8007310:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007314:	f7f9 f886 	bl	8000424 <__aeabi_uldivmod>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	4b60      	ldr	r3, [pc, #384]	; (80074a0 <UART_SetConfig+0x4e4>)
 800731e:	fba3 2302 	umull	r2, r3, r3, r2
 8007322:	095b      	lsrs	r3, r3, #5
 8007324:	011c      	lsls	r4, r3, #4
 8007326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800732a:	2200      	movs	r2, #0
 800732c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007330:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007334:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007338:	4642      	mov	r2, r8
 800733a:	464b      	mov	r3, r9
 800733c:	1891      	adds	r1, r2, r2
 800733e:	61b9      	str	r1, [r7, #24]
 8007340:	415b      	adcs	r3, r3
 8007342:	61fb      	str	r3, [r7, #28]
 8007344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007348:	4641      	mov	r1, r8
 800734a:	1851      	adds	r1, r2, r1
 800734c:	6139      	str	r1, [r7, #16]
 800734e:	4649      	mov	r1, r9
 8007350:	414b      	adcs	r3, r1
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	f04f 0200 	mov.w	r2, #0
 8007358:	f04f 0300 	mov.w	r3, #0
 800735c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007360:	4659      	mov	r1, fp
 8007362:	00cb      	lsls	r3, r1, #3
 8007364:	4651      	mov	r1, sl
 8007366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800736a:	4651      	mov	r1, sl
 800736c:	00ca      	lsls	r2, r1, #3
 800736e:	4610      	mov	r0, r2
 8007370:	4619      	mov	r1, r3
 8007372:	4603      	mov	r3, r0
 8007374:	4642      	mov	r2, r8
 8007376:	189b      	adds	r3, r3, r2
 8007378:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800737c:	464b      	mov	r3, r9
 800737e:	460a      	mov	r2, r1
 8007380:	eb42 0303 	adc.w	r3, r2, r3
 8007384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	67bb      	str	r3, [r7, #120]	; 0x78
 8007392:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007394:	f04f 0200 	mov.w	r2, #0
 8007398:	f04f 0300 	mov.w	r3, #0
 800739c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80073a0:	4649      	mov	r1, r9
 80073a2:	008b      	lsls	r3, r1, #2
 80073a4:	4641      	mov	r1, r8
 80073a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073aa:	4641      	mov	r1, r8
 80073ac:	008a      	lsls	r2, r1, #2
 80073ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80073b2:	f7f9 f837 	bl	8000424 <__aeabi_uldivmod>
 80073b6:	4602      	mov	r2, r0
 80073b8:	460b      	mov	r3, r1
 80073ba:	4b39      	ldr	r3, [pc, #228]	; (80074a0 <UART_SetConfig+0x4e4>)
 80073bc:	fba3 1302 	umull	r1, r3, r3, r2
 80073c0:	095b      	lsrs	r3, r3, #5
 80073c2:	2164      	movs	r1, #100	; 0x64
 80073c4:	fb01 f303 	mul.w	r3, r1, r3
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	3332      	adds	r3, #50	; 0x32
 80073ce:	4a34      	ldr	r2, [pc, #208]	; (80074a0 <UART_SetConfig+0x4e4>)
 80073d0:	fba2 2303 	umull	r2, r3, r2, r3
 80073d4:	095b      	lsrs	r3, r3, #5
 80073d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073da:	441c      	add	r4, r3
 80073dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073e0:	2200      	movs	r2, #0
 80073e2:	673b      	str	r3, [r7, #112]	; 0x70
 80073e4:	677a      	str	r2, [r7, #116]	; 0x74
 80073e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80073ea:	4642      	mov	r2, r8
 80073ec:	464b      	mov	r3, r9
 80073ee:	1891      	adds	r1, r2, r2
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	415b      	adcs	r3, r3
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073fa:	4641      	mov	r1, r8
 80073fc:	1851      	adds	r1, r2, r1
 80073fe:	6039      	str	r1, [r7, #0]
 8007400:	4649      	mov	r1, r9
 8007402:	414b      	adcs	r3, r1
 8007404:	607b      	str	r3, [r7, #4]
 8007406:	f04f 0200 	mov.w	r2, #0
 800740a:	f04f 0300 	mov.w	r3, #0
 800740e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007412:	4659      	mov	r1, fp
 8007414:	00cb      	lsls	r3, r1, #3
 8007416:	4651      	mov	r1, sl
 8007418:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800741c:	4651      	mov	r1, sl
 800741e:	00ca      	lsls	r2, r1, #3
 8007420:	4610      	mov	r0, r2
 8007422:	4619      	mov	r1, r3
 8007424:	4603      	mov	r3, r0
 8007426:	4642      	mov	r2, r8
 8007428:	189b      	adds	r3, r3, r2
 800742a:	66bb      	str	r3, [r7, #104]	; 0x68
 800742c:	464b      	mov	r3, r9
 800742e:	460a      	mov	r2, r1
 8007430:	eb42 0303 	adc.w	r3, r2, r3
 8007434:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	663b      	str	r3, [r7, #96]	; 0x60
 8007440:	667a      	str	r2, [r7, #100]	; 0x64
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	f04f 0300 	mov.w	r3, #0
 800744a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800744e:	4649      	mov	r1, r9
 8007450:	008b      	lsls	r3, r1, #2
 8007452:	4641      	mov	r1, r8
 8007454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007458:	4641      	mov	r1, r8
 800745a:	008a      	lsls	r2, r1, #2
 800745c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007460:	f7f8 ffe0 	bl	8000424 <__aeabi_uldivmod>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <UART_SetConfig+0x4e4>)
 800746a:	fba3 1302 	umull	r1, r3, r3, r2
 800746e:	095b      	lsrs	r3, r3, #5
 8007470:	2164      	movs	r1, #100	; 0x64
 8007472:	fb01 f303 	mul.w	r3, r1, r3
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	011b      	lsls	r3, r3, #4
 800747a:	3332      	adds	r3, #50	; 0x32
 800747c:	4a08      	ldr	r2, [pc, #32]	; (80074a0 <UART_SetConfig+0x4e4>)
 800747e:	fba2 2303 	umull	r2, r3, r2, r3
 8007482:	095b      	lsrs	r3, r3, #5
 8007484:	f003 020f 	and.w	r2, r3, #15
 8007488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4422      	add	r2, r4
 8007490:	609a      	str	r2, [r3, #8]
}
 8007492:	bf00      	nop
 8007494:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007498:	46bd      	mov	sp, r7
 800749a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800749e:	bf00      	nop
 80074a0:	51eb851f 	.word	0x51eb851f

080074a4 <__libc_init_array>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	4d0d      	ldr	r5, [pc, #52]	; (80074dc <__libc_init_array+0x38>)
 80074a8:	4c0d      	ldr	r4, [pc, #52]	; (80074e0 <__libc_init_array+0x3c>)
 80074aa:	1b64      	subs	r4, r4, r5
 80074ac:	10a4      	asrs	r4, r4, #2
 80074ae:	2600      	movs	r6, #0
 80074b0:	42a6      	cmp	r6, r4
 80074b2:	d109      	bne.n	80074c8 <__libc_init_array+0x24>
 80074b4:	4d0b      	ldr	r5, [pc, #44]	; (80074e4 <__libc_init_array+0x40>)
 80074b6:	4c0c      	ldr	r4, [pc, #48]	; (80074e8 <__libc_init_array+0x44>)
 80074b8:	f000 f82e 	bl	8007518 <_init>
 80074bc:	1b64      	subs	r4, r4, r5
 80074be:	10a4      	asrs	r4, r4, #2
 80074c0:	2600      	movs	r6, #0
 80074c2:	42a6      	cmp	r6, r4
 80074c4:	d105      	bne.n	80074d2 <__libc_init_array+0x2e>
 80074c6:	bd70      	pop	{r4, r5, r6, pc}
 80074c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074cc:	4798      	blx	r3
 80074ce:	3601      	adds	r6, #1
 80074d0:	e7ee      	b.n	80074b0 <__libc_init_array+0xc>
 80074d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074d6:	4798      	blx	r3
 80074d8:	3601      	adds	r6, #1
 80074da:	e7f2      	b.n	80074c2 <__libc_init_array+0x1e>
 80074dc:	08007558 	.word	0x08007558
 80074e0:	08007558 	.word	0x08007558
 80074e4:	08007558 	.word	0x08007558
 80074e8:	0800755c 	.word	0x0800755c

080074ec <memcpy>:
 80074ec:	440a      	add	r2, r1
 80074ee:	4291      	cmp	r1, r2
 80074f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80074f4:	d100      	bne.n	80074f8 <memcpy+0xc>
 80074f6:	4770      	bx	lr
 80074f8:	b510      	push	{r4, lr}
 80074fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007502:	4291      	cmp	r1, r2
 8007504:	d1f9      	bne.n	80074fa <memcpy+0xe>
 8007506:	bd10      	pop	{r4, pc}

08007508 <memset>:
 8007508:	4402      	add	r2, r0
 800750a:	4603      	mov	r3, r0
 800750c:	4293      	cmp	r3, r2
 800750e:	d100      	bne.n	8007512 <memset+0xa>
 8007510:	4770      	bx	lr
 8007512:	f803 1b01 	strb.w	r1, [r3], #1
 8007516:	e7f9      	b.n	800750c <memset+0x4>

08007518 <_init>:
 8007518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751a:	bf00      	nop
 800751c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800751e:	bc08      	pop	{r3}
 8007520:	469e      	mov	lr, r3
 8007522:	4770      	bx	lr

08007524 <_fini>:
 8007524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007526:	bf00      	nop
 8007528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800752a:	bc08      	pop	{r3}
 800752c:	469e      	mov	lr, r3
 800752e:	4770      	bx	lr
