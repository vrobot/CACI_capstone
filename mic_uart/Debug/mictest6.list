
mictest6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000497c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004b04  08004b04  00014b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b5c  08004b5c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004b5c  08004b5c  00014b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b64  08004b64  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003238  20000010  08004b7c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003248  08004b7c  00023248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e07f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e48  00000000  00000000  0002e0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c88  00000000  00000000  0002ff08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b90  00000000  00000000  00030b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000270e8  00000000  00000000  00031720  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009fde  00000000  00000000  00058808  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1302  00000000  00000000  000627e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153ae8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000334c  00000000  00000000  00153b64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004aec 	.word	0x08004aec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004aec 	.word	0x08004aec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	683a      	ldr	r2, [r7, #0]
 80004d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80004f4:	68fa      	ldr	r2, [r7, #12]
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	4013      	ands	r3, r2
 80004fa:	041a      	lsls	r2, r3, #16
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	43d9      	mvns	r1, r3
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	400b      	ands	r3, r1
 8000504:	431a      	orrs	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	619a      	str	r2, [r3, #24]
}
 800050a:	bf00      	nop
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
	...

08000518 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000524:	4907      	ldr	r1, [pc, #28]	; (8000544 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800052e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4013      	ands	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000536:	68fb      	ldr	r3, [r7, #12]
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	40021000 	.word	0x40021000

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b087      	sub	sp, #28
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fcba 	bl	8000ec6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f887 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f9c5 	bl	80008e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800055a:	f000 f995 	bl	8000888 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800055e:	f000 f963 	bl	8000828 <MX_USART2_UART_Init>
  MX_DFSDM1_Init();
 8000562:	f000 f8fb 	bl	800075c <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */

  /* Start DFSDM conversions */
  if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuff, 2048))
 8000566:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800056a:	4936      	ldr	r1, [pc, #216]	; (8000644 <main+0xfc>)
 800056c:	4836      	ldr	r0, [pc, #216]	; (8000648 <main+0x100>)
 800056e:	f001 f825 	bl	80015bc <HAL_DFSDM_FilterRegularStart_DMA>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <main+0x34>
  {
    Error_Handler();
 8000578:	f000 fa30 	bl	80009dc <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t hello_world[] = "Hello, world!\n";
 800057c:	4b33      	ldr	r3, [pc, #204]	; (800064c <main+0x104>)
 800057e:	463c      	mov	r4, r7
 8000580:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000582:	c407      	stmia	r4!, {r0, r1, r2}
 8000584:	8023      	strh	r3, [r4, #0]
 8000586:	3402      	adds	r4, #2
 8000588:	0c1b      	lsrs	r3, r3, #16
 800058a:	7023      	strb	r3, [r4, #0]
  {
	if(tx_complete){
		// HAL_UART_Transmit_DMA(&huart2, hello_world, sizeof(hello_world)-1);
		// tx_complete = 0;
	}
    if(DmaRecHalfBuffCplt == 1)
 800058c:	4b30      	ldr	r3, [pc, #192]	; (8000650 <main+0x108>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d125      	bne.n	80005e0 <main+0x98>
    {
      /* Store values on Play buff */
      for(uint32_t i = 0; i < 1024; i++)
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
 8000598:	e01b      	b.n	80005d2 <main+0x8a>
      {
        PlayBuff[i]     = SaturaLH((RecBuff[i] >> 8), -32768, 32767);
 800059a:	4a2a      	ldr	r2, [pc, #168]	; (8000644 <main+0xfc>)
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a2:	121b      	asrs	r3, r3, #8
 80005a4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80005a8:	db0b      	blt.n	80005c2 <main+0x7a>
 80005aa:	4a26      	ldr	r2, [pc, #152]	; (8000644 <main+0xfc>)
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b2:	121b      	asrs	r3, r3, #8
 80005b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80005b8:	4293      	cmp	r3, r2
 80005ba:	bfa8      	it	ge
 80005bc:	4613      	movge	r3, r2
 80005be:	b21a      	sxth	r2, r3
 80005c0:	e000      	b.n	80005c4 <main+0x7c>
 80005c2:	4a24      	ldr	r2, [pc, #144]	; (8000654 <main+0x10c>)
 80005c4:	4924      	ldr	r1, [pc, #144]	; (8000658 <main+0x110>)
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      for(uint32_t i = 0; i < 1024; i++)
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	3301      	adds	r3, #1
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005d8:	d3df      	bcc.n	800059a <main+0x52>
        // PlayBuff[(2*i)+1] = PlayBuff[2*i];
      }

      DmaRecHalfBuffCplt  = 0;
 80005da:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <main+0x108>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
    }
    if(DmaRecBuffCplt == 1)
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <main+0x114>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d1d1      	bne.n	800058c <main+0x44>
    {
      /* Store values on Play buff */
      for(uint32_t i = 1024; i < 2048; i++)
 80005e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ec:	613b      	str	r3, [r7, #16]
 80005ee:	e01b      	b.n	8000628 <main+0xe0>
      {
        PlayBuff[i]     = SaturaLH((RecBuff[i] >> 8), -32768, 32767);
 80005f0:	4a14      	ldr	r2, [pc, #80]	; (8000644 <main+0xfc>)
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f8:	121b      	asrs	r3, r3, #8
 80005fa:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80005fe:	db0b      	blt.n	8000618 <main+0xd0>
 8000600:	4a10      	ldr	r2, [pc, #64]	; (8000644 <main+0xfc>)
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000608:	121b      	asrs	r3, r3, #8
 800060a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800060e:	4293      	cmp	r3, r2
 8000610:	bfa8      	it	ge
 8000612:	4613      	movge	r3, r2
 8000614:	b21a      	sxth	r2, r3
 8000616:	e000      	b.n	800061a <main+0xd2>
 8000618:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <main+0x10c>)
 800061a:	490f      	ldr	r1, [pc, #60]	; (8000658 <main+0x110>)
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      for(uint32_t i = 1024; i < 2048; i++)
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	3301      	adds	r3, #1
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800062e:	d3df      	bcc.n	80005f0 <main+0xa8>
        // PlayBuff[(2*i)+1] = PlayBuff[2*i];
      }
      HAL_UART_Transmit_DMA(&huart2, (uint8_t *) PlayBuff, sizeof(PlayBuff));
 8000630:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000634:	4908      	ldr	r1, [pc, #32]	; (8000658 <main+0x110>)
 8000636:	480a      	ldr	r0, [pc, #40]	; (8000660 <main+0x118>)
 8000638:	f003 f9c4 	bl	80039c4 <HAL_UART_Transmit_DMA>
      DmaRecBuffCplt  = 0;
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <main+0x114>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
	if(tx_complete){
 8000642:	e7a3      	b.n	800058c <main+0x44>
 8000644:	200000a8 	.word	0x200000a8
 8000648:	200020a8 	.word	0x200020a8
 800064c:	08004b04 	.word	0x08004b04
 8000650:	2000002c 	.word	0x2000002c
 8000654:	ffff8000 	.word	0xffff8000
 8000658:	200020fc 	.word	0x200020fc
 800065c:	20000030 	.word	0x20000030
 8000660:	2000318c 	.word	0x2000318c

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0b8      	sub	sp, #224	; 0xe0
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800066e:	2244      	movs	r2, #68	; 0x44
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f004 fa32 	bl	8004adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2288      	movs	r2, #136	; 0x88
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fa24 	bl	8004adc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000694:	2310      	movs	r3, #16
 8000696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800069a:	2301      	movs	r3, #1
 800069c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006a6:	2360      	movs	r3, #96	; 0x60
 80006a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fe9c 	bl	80023f4 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80006c2:	f000 f98b 	bl	80009dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fa68 	bl	8002bc0 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006f6:	f000 f971 	bl	80009dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_SAI1
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <SystemClock_Config+0xf4>)
 80006fc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_DFSDM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006fe:	2300      	movs	r3, #0
 8000700:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000702:	2300      	movs	r3, #0
 8000704:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000706:	2300      	movs	r3, #0
 8000708:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800070c:	2301      	movs	r3, #1
 800070e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000718:	2307      	movs	r3, #7
 800071a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000728:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072a:	463b      	mov	r3, r7
 800072c:	4618      	mov	r0, r3
 800072e:	f002 fc4b 	bl	8002fc8 <HAL_RCCEx_PeriphCLKConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000738:	f000 f950 	bl	80009dc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800073c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000740:	f001 fe02 	bl	8002348 <HAL_PWREx_ControlVoltageScaling>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800074a:	f000 f947 	bl	80009dc <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	37e0      	adds	r7, #224	; 0xe0
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	00010802 	.word	0x00010802

0800075c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000760:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <MX_DFSDM1_Init+0xb8>)
 8000762:	4a2d      	ldr	r2, [pc, #180]	; (8000818 <MX_DFSDM1_Init+0xbc>)
 8000764:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000766:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <MX_DFSDM1_Init+0xb8>)
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800076c:	4b29      	ldr	r3, [pc, #164]	; (8000814 <MX_DFSDM1_Init+0xb8>)
 800076e:	2201      	movs	r2, #1
 8000770:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000772:	4b28      	ldr	r3, [pc, #160]	; (8000814 <MX_DFSDM1_Init+0xb8>)
 8000774:	2201      	movs	r2, #1
 8000776:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC1_ORDER;
 8000778:	4b26      	ldr	r3, [pc, #152]	; (8000814 <MX_DFSDM1_Init+0xb8>)
 800077a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800077e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 128;
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_DFSDM1_Init+0xb8>)
 8000782:	2280      	movs	r2, #128	; 0x80
 8000784:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000786:	4b23      	ldr	r3, [pc, #140]	; (8000814 <MX_DFSDM1_Init+0xb8>)
 8000788:	2201      	movs	r2, #1
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800078c:	4821      	ldr	r0, [pc, #132]	; (8000814 <MX_DFSDM1_Init+0xb8>)
 800078e:	f000 fdf5 	bl	800137c <HAL_DFSDM_FilterInit>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000798:	f000 f920 	bl	80009dc <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_DFSDM1_Init+0xc0>)
 800079e:	4a20      	ldr	r2, [pc, #128]	; (8000820 <MX_DFSDM1_Init+0xc4>)
 80007a0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80007a2:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_DFSDM1_Init+0xc0>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_DFSDM1_Init+0xc0>)
 80007aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ae:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 4;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_DFSDM1_Init+0xc0>)
 80007b2:	2204      	movs	r2, #4
 80007b4:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_DFSDM1_Init+0xc0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_DFSDM1_Init+0xc0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_DFSDM1_Init+0xc0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_DFSDM1_Init+0xc0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_DFSDM1_Init+0xc0>)
 80007d0:	2204      	movs	r2, #4
 80007d2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_DFSDM1_Init+0xc0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_DFSDM1_Init+0xc0>)
 80007dc:	2201      	movs	r2, #1
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_DFSDM1_Init+0xc0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_DFSDM1_Init+0xc0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <MX_DFSDM1_Init+0xc0>)
 80007ee:	f000 fcf1 	bl	80011d4 <HAL_DFSDM_ChannelInit>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 80007f8:	f000 f8f0 	bl	80009dc <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80007fc:	2201      	movs	r2, #1
 80007fe:	4909      	ldr	r1, [pc, #36]	; (8000824 <MX_DFSDM1_Init+0xc8>)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_DFSDM1_Init+0xb8>)
 8000802:	f000 fe95 	bl	8001530 <HAL_DFSDM_FilterConfigRegChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 800080c:	f000 f8e6 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200020a8 	.word	0x200020a8
 8000818:	40016100 	.word	0x40016100
 800081c:	2000320c 	.word	0x2000320c
 8000820:	40016040 	.word	0x40016040
 8000824:	00020004 	.word	0x00020004

08000828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_USART2_UART_Init+0x58>)
 800082e:	4a15      	ldr	r2, [pc, #84]	; (8000884 <MX_USART2_UART_Init+0x5c>)
 8000830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_USART2_UART_Init+0x58>)
 8000834:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_USART2_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART2_UART_Init+0x58>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART2_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART2_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART2_UART_Init+0x58>)
 800086c:	f003 f85c 	bl	8003928 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 f8b1 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000318c 	.word	0x2000318c
 8000884:	40004400 	.word	0x40004400

08000888 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_DMA_Init+0x58>)
 8000890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000892:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <MX_DMA_Init+0x58>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6493      	str	r3, [r2, #72]	; 0x48
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_DMA_Init+0x58>)
 800089c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	200e      	movs	r0, #14
 80008ac:	f000 fc5b 	bl	8001166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80008b0:	200e      	movs	r0, #14
 80008b2:	f000 fc74 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2010      	movs	r0, #16
 80008bc:	f000 fc53 	bl	8001166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80008c0:	2010      	movs	r0, #16
 80008c2:	f000 fc6c 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2011      	movs	r0, #17
 80008cc:	f000 fc4b 	bl	8001166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80008d0:	2011      	movs	r0, #17
 80008d2:	f000 fc64 	bl	800119e <HAL_NVIC_EnableIRQ>

}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	463b      	mov	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
 80008f8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80008fa:	2002      	movs	r0, #2
 80008fc:	f7ff fe0c 	bl	8000518 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8000900:	2010      	movs	r0, #16
 8000902:	f7ff fe09 	bl	8000518 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8000906:	2008      	movs	r0, #8
 8000908:	f7ff fe06 	bl	8000518 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_2);
 800090c:	2104      	movs	r1, #4
 800090e:	4815      	ldr	r0, [pc, #84]	; (8000964 <MX_GPIO_Init+0x80>)
 8000910:	f7ff fdda 	bl	80004c8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_8);
 8000914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000918:	4813      	ldr	r0, [pc, #76]	; (8000968 <MX_GPIO_Init+0x84>)
 800091a:	f7ff fdd5 	bl	80004c8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800091e:	2304      	movs	r3, #4
 8000920:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000922:	2301      	movs	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	463b      	mov	r3, r7
 8000934:	4619      	mov	r1, r3
 8000936:	480b      	ldr	r0, [pc, #44]	; (8000964 <MX_GPIO_Init+0x80>)
 8000938:	f004 f835 	bl	80049a6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800093c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000940:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000942:	2301      	movs	r3, #1
 8000944:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_GPIO_Init+0x84>)
 8000958:	f004 f825 	bl	80049a6 <LL_GPIO_Init>

}
 800095c:	bf00      	nop
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	48000400 	.word	0x48000400
 8000968:	48001000 	.word	0x48001000

0800096c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	tx_complete = 1;
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <HAL_UART_TxCpltCallback+0x20>)
 8000976:	2201      	movs	r2, #1
 8000978:	601a      	str	r2, [r3, #0]
	LL_GPIO_TogglePin(GPIOE, LL_GPIO_PIN_8);
 800097a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097e:	4804      	ldr	r0, [pc, #16]	; (8000990 <HAL_UART_TxCpltCallback+0x24>)
 8000980:	f7ff fdb0 	bl	80004e4 <LL_GPIO_TogglePin>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000000 	.word	0x20000000
 8000990:	48001000 	.word	0x48001000

08000994 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	DmaRecHalfBuffCplt = 1;
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 800099e:	2201      	movs	r2, #1
 80009a0:	601a      	str	r2, [r3, #0]
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	2000002c 	.word	0x2000002c

080009b4 <HAL_DFSDM_FilterRegConvCpltCallback>:


void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_2);
 80009bc:	2104      	movs	r1, #4
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <HAL_DFSDM_FilterRegConvCpltCallback+0x20>)
 80009c0:	f7ff fd90 	bl	80004e4 <LL_GPIO_TogglePin>
	DmaRecBuffCplt = 1;
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <HAL_DFSDM_FilterRegConvCpltCallback+0x24>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	601a      	str	r2, [r3, #0]
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	48000400 	.word	0x48000400
 80009d8:	20000030 	.word	0x20000030

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <Error_Handler+0x6>

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_MspInit+0x44>)
 80009ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_MspInit+0x44>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6613      	str	r3, [r2, #96]	; 0x60
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_MspInit+0x44>)
 80009f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_MspInit+0x44>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_MspInit+0x44>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_MspInit+0x44>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000a44:	4b3e      	ldr	r3, [pc, #248]	; (8000b40 <HAL_DFSDM_FilterMspInit+0x114>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d13e      	bne.n	8000aca <HAL_DFSDM_FilterMspInit+0x9e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000a4c:	4b3d      	ldr	r3, [pc, #244]	; (8000b44 <HAL_DFSDM_FilterMspInit+0x118>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3301      	adds	r3, #1
 8000a52:	4a3c      	ldr	r2, [pc, #240]	; (8000b44 <HAL_DFSDM_FilterMspInit+0x118>)
 8000a54:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000a56:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <HAL_DFSDM_FilterMspInit+0x118>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d10b      	bne.n	8000a76 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000a5e:	4b3a      	ldr	r3, [pc, #232]	; (8000b48 <HAL_DFSDM_FilterMspInit+0x11c>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	4a39      	ldr	r2, [pc, #228]	; (8000b48 <HAL_DFSDM_FilterMspInit+0x11c>)
 8000a64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a68:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6a:	4b37      	ldr	r3, [pc, #220]	; (8000b48 <HAL_DFSDM_FilterMspInit+0x11c>)
 8000a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a76:	4b34      	ldr	r3, [pc, #208]	; (8000b48 <HAL_DFSDM_FilterMspInit+0x11c>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a33      	ldr	r2, [pc, #204]	; (8000b48 <HAL_DFSDM_FilterMspInit+0x11c>)
 8000a7c:	f043 0310 	orr.w	r3, r3, #16
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b31      	ldr	r3, [pc, #196]	; (8000b48 <HAL_DFSDM_FilterMspInit+0x11c>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000a8e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000aa0:	2306      	movs	r3, #6
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4828      	ldr	r0, [pc, #160]	; (8000b4c <HAL_DFSDM_FilterMspInit+0x120>)
 8000aac:	f001 fa96 	bl	8001fdc <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	203d      	movs	r0, #61	; 0x3d
 8000ab6:	f000 fb56 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 8000aba:	203d      	movs	r0, #61	; 0x3d
 8000abc:	f000 fb6f 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <HAL_DFSDM_FilterMspInit+0x114>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	4a1e      	ldr	r2, [pc, #120]	; (8000b40 <HAL_DFSDM_FilterMspInit+0x114>)
 8000ac8:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a20      	ldr	r2, [pc, #128]	; (8000b50 <HAL_DFSDM_FilterMspInit+0x124>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d130      	bne.n	8000b36 <HAL_DFSDM_FilterMspInit+0x10a>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <HAL_DFSDM_FilterMspInit+0x128>)
 8000ad6:	4a20      	ldr	r2, [pc, #128]	; (8000b58 <HAL_DFSDM_FilterMspInit+0x12c>)
 8000ad8:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <HAL_DFSDM_FilterMspInit+0x128>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_DFSDM_FilterMspInit+0x128>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <HAL_DFSDM_FilterMspInit+0x128>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_DFSDM_FilterMspInit+0x128>)
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <HAL_DFSDM_FilterMspInit+0x128>)
 8000af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af8:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <HAL_DFSDM_FilterMspInit+0x128>)
 8000afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b00:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <HAL_DFSDM_FilterMspInit+0x128>)
 8000b04:	2220      	movs	r2, #32
 8000b06:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_DFSDM_FilterMspInit+0x128>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000b0e:	4811      	ldr	r0, [pc, #68]	; (8000b54 <HAL_DFSDM_FilterMspInit+0x128>)
 8000b10:	f001 f82c 	bl	8001b6c <HAL_DMA_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_DFSDM_FilterMspInit+0xf2>
    {
      Error_Handler();
 8000b1a:	f7ff ff5f 	bl	80009dc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a0c      	ldr	r2, [pc, #48]	; (8000b54 <HAL_DFSDM_FilterMspInit+0x128>)
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b24:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <HAL_DFSDM_FilterMspInit+0x128>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a09      	ldr	r2, [pc, #36]	; (8000b54 <HAL_DFSDM_FilterMspInit+0x128>)
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8000b30:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_DFSDM_FilterMspInit+0x128>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000038 	.word	0x20000038
 8000b44:	20000034 	.word	0x20000034
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	48001000 	.word	0x48001000
 8000b50:	40016100 	.word	0x40016100
 8000b54:	20003144 	.word	0x20003144
 8000b58:	40020044 	.word	0x40020044

08000b5c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <HAL_DFSDM_ChannelMspInit+0x98>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d136      	bne.n	8000bea <HAL_DFSDM_ChannelMspInit+0x8e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <HAL_DFSDM_ChannelMspInit+0x9c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <HAL_DFSDM_ChannelMspInit+0x9c>)
 8000b84:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_DFSDM_ChannelMspInit+0x9c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d10b      	bne.n	8000ba6 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <HAL_DFSDM_ChannelMspInit+0xa0>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	4a1a      	ldr	r2, [pc, #104]	; (8000bfc <HAL_DFSDM_ChannelMspInit+0xa0>)
 8000b94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b98:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_DFSDM_ChannelMspInit+0xa0>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_DFSDM_ChannelMspInit+0xa0>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <HAL_DFSDM_ChannelMspInit+0xa0>)
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_DFSDM_ChannelMspInit+0xa0>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0310 	and.w	r3, r3, #16
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000bbe:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000bd0:	2306      	movs	r3, #6
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4809      	ldr	r0, [pc, #36]	; (8000c00 <HAL_DFSDM_ChannelMspInit+0xa4>)
 8000bdc:	f001 f9fe 	bl	8001fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <HAL_DFSDM_ChannelMspInit+0x98>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	4a03      	ldr	r2, [pc, #12]	; (8000bf4 <HAL_DFSDM_ChannelMspInit+0x98>)
 8000be8:	6013      	str	r3, [r2, #0]
  }

}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	; 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000038 	.word	0x20000038
 8000bf8:	20000034 	.word	0x20000034
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	48001000 	.word	0x48001000

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a44      	ldr	r2, [pc, #272]	; (8000d34 <HAL_UART_MspInit+0x130>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	f040 8082 	bne.w	8000d2c <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c28:	4b43      	ldr	r3, [pc, #268]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2c:	4a42      	ldr	r2, [pc, #264]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c32:	6593      	str	r3, [r2, #88]	; 0x58
 8000c34:	4b40      	ldr	r3, [pc, #256]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c40:	4b3d      	ldr	r3, [pc, #244]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c44:	4a3c      	ldr	r2, [pc, #240]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000c46:	f043 0308 	orr.w	r3, r3, #8
 8000c4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4c:	4b3a      	ldr	r3, [pc, #232]	; (8000d38 <HAL_UART_MspInit+0x134>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c50:	f003 0308 	and.w	r3, r3, #8
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c58:	2360      	movs	r3, #96	; 0x60
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c68:	2307      	movs	r3, #7
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4832      	ldr	r0, [pc, #200]	; (8000d3c <HAL_UART_MspInit+0x138>)
 8000c74:	f001 f9b2 	bl	8001fdc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000c78:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <HAL_UART_MspInit+0x13c>)
 8000c7a:	4a32      	ldr	r2, [pc, #200]	; (8000d44 <HAL_UART_MspInit+0x140>)
 8000c7c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000c7e:	4b30      	ldr	r3, [pc, #192]	; (8000d40 <HAL_UART_MspInit+0x13c>)
 8000c80:	2202      	movs	r2, #2
 8000c82:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c84:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <HAL_UART_MspInit+0x13c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <HAL_UART_MspInit+0x13c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c90:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <HAL_UART_MspInit+0x13c>)
 8000c92:	2280      	movs	r2, #128	; 0x80
 8000c94:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c96:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <HAL_UART_MspInit+0x13c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c9c:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <HAL_UART_MspInit+0x13c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ca2:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <HAL_UART_MspInit+0x13c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ca8:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <HAL_UART_MspInit+0x13c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000cae:	4824      	ldr	r0, [pc, #144]	; (8000d40 <HAL_UART_MspInit+0x13c>)
 8000cb0:	f000 ff5c 	bl	8001b6c <HAL_DMA_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8000cba:	f7ff fe8f 	bl	80009dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a1f      	ldr	r2, [pc, #124]	; (8000d40 <HAL_UART_MspInit+0x13c>)
 8000cc2:	66da      	str	r2, [r3, #108]	; 0x6c
 8000cc4:	4a1e      	ldr	r2, [pc, #120]	; (8000d40 <HAL_UART_MspInit+0x13c>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <HAL_UART_MspInit+0x144>)
 8000ccc:	4a1f      	ldr	r2, [pc, #124]	; (8000d4c <HAL_UART_MspInit+0x148>)
 8000cce:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <HAL_UART_MspInit+0x144>)
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <HAL_UART_MspInit+0x144>)
 8000cd8:	2210      	movs	r2, #16
 8000cda:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <HAL_UART_MspInit+0x144>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <HAL_UART_MspInit+0x144>)
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_UART_MspInit+0x144>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <HAL_UART_MspInit+0x144>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_UART_MspInit+0x144>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <HAL_UART_MspInit+0x144>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d00:	4811      	ldr	r0, [pc, #68]	; (8000d48 <HAL_UART_MspInit+0x144>)
 8000d02:	f000 ff33 	bl	8001b6c <HAL_DMA_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000d0c:	f7ff fe66 	bl	80009dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <HAL_UART_MspInit+0x144>)
 8000d14:	669a      	str	r2, [r3, #104]	; 0x68
 8000d16:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <HAL_UART_MspInit+0x144>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2026      	movs	r0, #38	; 0x26
 8000d22:	f000 fa20 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d26:	2026      	movs	r0, #38	; 0x26
 8000d28:	f000 fa39 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3728      	adds	r7, #40	; 0x28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40004400 	.word	0x40004400
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	48000c00 	.word	0x48000c00
 8000d40:	20000060 	.word	0x20000060
 8000d44:	4002006c 	.word	0x4002006c
 8000d48:	200030fc 	.word	0x200030fc
 8000d4c:	40020080 	.word	0x40020080

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9c:	f000 f8e8 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <DMA1_Channel4_IRQHandler+0x10>)
 8000daa:	f001 f838 	bl	8001e1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20003144 	.word	0x20003144

08000db8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <DMA1_Channel6_IRQHandler+0x10>)
 8000dbe:	f001 f82e 	bl	8001e1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000060 	.word	0x20000060

08000dcc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <DMA1_Channel7_IRQHandler+0x10>)
 8000dd2:	f001 f824 	bl	8001e1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200030fc 	.word	0x200030fc

08000de0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <USART2_IRQHandler+0x10>)
 8000de6:	f002 fe69 	bl	8003abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2000318c 	.word	0x2000318c

08000df4 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <DFSDM1_FLT0_IRQHandler+0x10>)
 8000dfa:	f000 fc61 	bl	80016c0 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200020a8 	.word	0x200020a8

08000e08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <SystemInit+0x64>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e12:	4a16      	ldr	r2, [pc, #88]	; (8000e6c <SystemInit+0x64>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <SystemInit+0x68>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <SystemInit+0x68>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <SystemInit+0x68>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <SystemInit+0x68>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <SystemInit+0x68>)
 8000e34:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e38:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e3c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <SystemInit+0x68>)
 8000e40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e44:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <SystemInit+0x68>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <SystemInit+0x68>)
 8000e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e50:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <SystemInit+0x68>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <SystemInit+0x64>)
 8000e5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00
 8000e70:	40021000 	.word	0x40021000

08000e74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e78:	f7ff ffc6 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e7e:	e003      	b.n	8000e88 <LoopCopyDataInit>

08000e80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e86:	3104      	adds	r1, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e88:	480a      	ldr	r0, [pc, #40]	; (8000eb4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e90:	d3f6      	bcc.n	8000e80 <CopyDataInit>
	ldr	r2, =_sbss
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e94:	e002      	b.n	8000e9c <LoopFillZerobss>

08000e96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e98:	f842 3b04 	str.w	r3, [r2], #4

08000e9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <LoopForever+0x16>)
	cmp	r2, r3
 8000e9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ea0:	d3f9      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f003 fdf7 	bl	8004a94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ea6:	f7ff fb4f 	bl	8000548 <main>

08000eaa <LoopForever>:

LoopForever:
    b LoopForever
 8000eaa:	e7fe      	b.n	8000eaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000eac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000eb0:	08004b6c 	.word	0x08004b6c
	ldr	r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000eb8:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000ebc:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000ec0:	20003248 	.word	0x20003248

08000ec4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC1_2_IRQHandler>

08000ec6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f93d 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f80e 	bl	8000ef8 <HAL_InitTick>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d002      	beq.n	8000ee8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	e001      	b.n	8000eec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee8:	f7ff fd7c 	bl	80009e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eec:	79fb      	ldrb	r3, [r7, #7]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <HAL_InitTick+0x6c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d023      	beq.n	8000f54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_InitTick+0x70>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_InitTick+0x6c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f949 	bl	80011ba <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10f      	bne.n	8000f4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d809      	bhi.n	8000f48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f3c:	f000 f913 	bl	8001166 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f40:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <HAL_InitTick+0x74>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e007      	b.n	8000f58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e004      	b.n	8000f58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	73fb      	strb	r3, [r7, #15]
 8000f52:	e001      	b.n	8000f58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000000c 	.word	0x2000000c
 8000f68:	20000004 	.word	0x20000004
 8000f6c:	20000008 	.word	0x20000008

08000f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x20>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x24>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_IncTick+0x24>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	2000000c 	.word	0x2000000c
 8000f94:	20003244 	.word	0x20003244

08000f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_GetTick+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20003244 	.word	0x20003244

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	; (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff29 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff3e 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff31 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffa2 	bl	800110c <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e0ac      	b.n	8001340 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fc1c 	bl	8001a28 <DFSDM_GetChannelFromInstance>
 80011f0:	4602      	mov	r2, r0
 80011f2:	4b55      	ldr	r3, [pc, #340]	; (8001348 <HAL_DFSDM_ChannelInit+0x174>)
 80011f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e09f      	b.n	8001340 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff fcab 	bl	8000b5c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001206:	4b51      	ldr	r3, [pc, #324]	; (800134c <HAL_DFSDM_ChannelInit+0x178>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	4a4f      	ldr	r2, [pc, #316]	; (800134c <HAL_DFSDM_ChannelInit+0x178>)
 800120e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001210:	4b4e      	ldr	r3, [pc, #312]	; (800134c <HAL_DFSDM_ChannelInit+0x178>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d125      	bne.n	8001264 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001218:	4b4d      	ldr	r3, [pc, #308]	; (8001350 <HAL_DFSDM_ChannelInit+0x17c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a4c      	ldr	r2, [pc, #304]	; (8001350 <HAL_DFSDM_ChannelInit+0x17c>)
 800121e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001222:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001224:	4b4a      	ldr	r3, [pc, #296]	; (8001350 <HAL_DFSDM_ChannelInit+0x17c>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	4948      	ldr	r1, [pc, #288]	; (8001350 <HAL_DFSDM_ChannelInit+0x17c>)
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001232:	4b47      	ldr	r3, [pc, #284]	; (8001350 <HAL_DFSDM_ChannelInit+0x17c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a46      	ldr	r2, [pc, #280]	; (8001350 <HAL_DFSDM_ChannelInit+0x17c>)
 8001238:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800123c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	791b      	ldrb	r3, [r3, #4]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d108      	bne.n	8001258 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001246:	4b42      	ldr	r3, [pc, #264]	; (8001350 <HAL_DFSDM_ChannelInit+0x17c>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	3b01      	subs	r3, #1
 8001250:	041b      	lsls	r3, r3, #16
 8001252:	493f      	ldr	r1, [pc, #252]	; (8001350 <HAL_DFSDM_ChannelInit+0x17c>)
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001258:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <HAL_DFSDM_ChannelInit+0x17c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a3c      	ldr	r2, [pc, #240]	; (8001350 <HAL_DFSDM_ChannelInit+0x17c>)
 800125e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001262:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001272:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6819      	ldr	r1, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001282:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001288:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 020f 	bic.w	r2, r2, #15
 80012a0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6819      	ldr	r1, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80012c8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6899      	ldr	r1, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	3b01      	subs	r3, #1
 80012da:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f002 0207 	and.w	r2, r2, #7
 80012f4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6859      	ldr	r1, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001320:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fb7a 	bl	8001a28 <DFSDM_GetChannelFromInstance>
 8001334:	4601      	mov	r1, r0
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <HAL_DFSDM_ChannelInit+0x174>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000040 	.word	0x20000040
 800134c:	2000003c 	.word	0x2000003c
 8001350:	40016000 	.word	0x40016000

08001354 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e0ca      	b.n	8001524 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a66      	ldr	r2, [pc, #408]	; (800152c <HAL_DFSDM_FilterInit+0x1b0>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d109      	bne.n	80013ac <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800139c:	2b01      	cmp	r3, #1
 800139e:	d003      	beq.n	80013a8 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0bb      	b.n	8001524 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fb31 	bl	8000a2c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80013d8:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7a1b      	ldrb	r3, [r3, #8]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d108      	bne.n	80013f4 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e007      	b.n	8001404 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001402:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7a5b      	ldrb	r3, [r3, #9]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d108      	bne.n	800141e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	e007      	b.n	800142e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800142c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 800143c:	f023 0308 	bic.w	r3, r3, #8
 8001440:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d108      	bne.n	800145c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6819      	ldr	r1, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	695a      	ldr	r2, [r3, #20]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7c1b      	ldrb	r3, [r3, #16]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d108      	bne.n	8001476 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0210 	orr.w	r2, r2, #16
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e007      	b.n	8001486 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0210 	bic.w	r2, r2, #16
 8001484:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7c5b      	ldrb	r3, [r3, #17]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d108      	bne.n	80014a0 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 0220 	orr.w	r2, r2, #32
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e007      	b.n	80014b0 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0220 	bic.w	r2, r2, #32
 80014ae:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80014be:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80014c2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6959      	ldr	r1, [r3, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80014d6:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80014de:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	699a      	ldr	r2, [r3, #24]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7c1a      	ldrb	r2, [r3, #16]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0201 	orr.w	r2, r2, #1
 8001518:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40016100 	.word	0x40016100

08001530 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001546:	2b00      	cmp	r3, #0
 8001548:	d02e      	beq.n	80015a8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001550:	2bff      	cmp	r3, #255	; 0xff
 8001552:	d029      	beq.n	80015a8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	6812      	ldr	r2, [r2, #0]
 800155e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001566:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d10d      	bne.n	800158a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800157c:	431a      	orrs	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e00a      	b.n	80015a0 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6819      	ldr	r1, [r3, #0]
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	631a      	str	r2, [r3, #48]	; 0x30
 80015a6:	e001      	b.n	80015ac <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80015ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d002      	beq.n	80015d8 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	75fb      	strb	r3, [r7, #23]
 80015dc:	e064      	b.n	80016a8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80015ec:	d002      	beq.n	80015f4 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	75fb      	strb	r3, [r7, #23]
 80015f2:	e059      	b.n	80016a8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10e      	bne.n	800161a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10a      	bne.n	800161a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800160a:	2b00      	cmp	r3, #0
 800160c:	d105      	bne.n	800161a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d002      	beq.n	800161a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	75fb      	strb	r3, [r7, #23]
 8001618:	e046      	b.n	80016a8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10b      	bne.n	800163a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001626:	2b00      	cmp	r3, #0
 8001628:	d107      	bne.n	800163a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001630:	2b20      	cmp	r3, #32
 8001632:	d102      	bne.n	800163a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	75fb      	strb	r3, [r7, #23]
 8001638:	e036      	b.n	80016a8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001640:	2b01      	cmp	r3, #1
 8001642:	d004      	beq.n	800164e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800164a:	2b03      	cmp	r3, #3
 800164c:	d12a      	bne.n	80016a4 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001652:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800165c:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001664:	2b20      	cmp	r3, #32
 8001666:	d101      	bne.n	800166c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8001668:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800166a:	e000      	b.n	800166e <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 800166c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	331c      	adds	r3, #28
 800167e:	4619      	mov	r1, r3
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f000 fb2a 	bl	8001cdc <HAL_DMA_Start_IT>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	22ff      	movs	r2, #255	; 0xff
 8001692:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800169a:	e005      	b.n	80016a8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 fa0f 	bl	8001ac0 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80016a2:	e001      	b.n	80016a8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	080019e9 	.word	0x080019e9
 80016b8:	08001a05 	.word	0x08001a05
 80016bc:	080019cd 	.word	0x080019cd

080016c0 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08c      	sub	sp, #48	; 0x30
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00f      	beq.n	8001702 <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00a      	beq.n	8001702 <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2208      	movs	r2, #8
 80016f2:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f95c 	bl	80019b8 <HAL_DFSDM_FilterErrorCallback>
 8001700:	e13b      	b.n	800197a <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00f      	beq.n	800172c <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00a      	beq.n	800172c <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2204      	movs	r2, #4
 800171c:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2202      	movs	r2, #2
 8001722:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f947 	bl	80019b8 <HAL_DFSDM_FilterErrorCallback>
 800172a:	e126      	b.n	800197a <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d025      	beq.n	8001782 <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff f937 	bl	80009b4 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 8114 	bne.w	8001978 <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001754:	2b00      	cmp	r3, #0
 8001756:	f040 810f 	bne.w	8001978 <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0202 	bic.w	r2, r2, #2
 8001768:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001770:	2b02      	cmp	r3, #2
 8001772:	d101      	bne.n	8001778 <HAL_DFSDM_IRQHandler+0xb8>
 8001774:	2201      	movs	r2, #1
 8001776:	e000      	b.n	800177a <HAL_DFSDM_IRQHandler+0xba>
 8001778:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001780:	e0fa      	b.n	8001978 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b00      	cmp	r3, #0
 800178a:	d034      	beq.n	80017f6 <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001792:	2b00      	cmp	r3, #0
 8001794:	d02f      	beq.n	80017f6 <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f8f8 	bl	800198c <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a0:	1e5a      	subs	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 80e5 	bne.w	800197a <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d112      	bne.n	80017de <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0201 	bic.w	r2, r2, #1
 80017c6:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d101      	bne.n	80017d6 <HAL_DFSDM_IRQHandler+0x116>
 80017d2:	2201      	movs	r2, #1
 80017d4:	e000      	b.n	80017d8 <HAL_DFSDM_IRQHandler+0x118>
 80017d6:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d102      	bne.n	80017ee <HAL_DFSDM_IRQHandler+0x12e>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	e000      	b.n	80017f0 <HAL_DFSDM_IRQHandler+0x130>
 80017ee:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80017f4:	e0c1      	b.n	800197a <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d03d      	beq.n	800187c <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8001806:	2b00      	cmp	r3, #0
 8001808:	d038      	beq.n	800187c <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 8001816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_DFSDM_IRQHandler+0x162>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <HAL_DFSDM_IRQHandler+0x164>
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d109      	bne.n	8001840 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 800182c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001832:	e005      	b.n	8001840 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8001834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001836:	3301      	adds	r3, #1
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	085b      	lsrs	r3, r3, #1
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d102      	bne.n	8001850 <HAL_DFSDM_IRQHandler+0x190>
 800184a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184c:	2b06      	cmp	r3, #6
 800184e:	d9f1      	bls.n	8001834 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d105      	bne.n	8001862 <HAL_DFSDM_IRQHandler+0x1a2>
 8001856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001858:	3308      	adds	r3, #8
 800185a:	2201      	movs	r2, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	e003      	b.n	800186a <HAL_DFSDM_IRQHandler+0x1aa>
 8001862:	2201      	movs	r2, #1
 8001864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f893 	bl	80019a0 <HAL_DFSDM_FilterAwdCallback>
  {
 800187a:	e07e      	b.n	800197a <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a40      	ldr	r2, [pc, #256]	; (8001984 <HAL_DFSDM_IRQHandler+0x2c4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d141      	bne.n	800190a <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800188c:	2b00      	cmp	r3, #0
 800188e:	d03c      	beq.n	800190a <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8001896:	2b00      	cmp	r3, #0
 8001898:	d037      	beq.n	800190a <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	0c1b      	lsrs	r3, r3, #16
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 80018aa:	e02a      	b.n	8001902 <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d01f      	beq.n	80018f6 <HAL_DFSDM_IRQHandler+0x236>
 80018b6:	4a34      	ldr	r2, [pc, #208]	; (8001988 <HAL_DFSDM_IRQHandler+0x2c8>)
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d019      	beq.n	80018f6 <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 80018c2:	4a31      	ldr	r2, [pc, #196]	; (8001988 <HAL_DFSDM_IRQHandler+0x2c8>)
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00f      	beq.n	80018f6 <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	f103 0210 	add.w	r2, r3, #16
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2101      	movs	r1, #1
 80018e2:	fa01 f202 	lsl.w	r2, r1, r2
 80018e6:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 80018e8:	4a27      	ldr	r2, [pc, #156]	; (8001988 <HAL_DFSDM_IRQHandler+0x2c8>)
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fd2f 	bl	8001354 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	3301      	adds	r3, #1
 80018fa:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	085b      	lsrs	r3, r3, #1
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	2b07      	cmp	r3, #7
 8001906:	d9d1      	bls.n	80018ac <HAL_DFSDM_IRQHandler+0x1ec>
  {
 8001908:	e037      	b.n	800197a <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <HAL_DFSDM_IRQHandler+0x2c4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d132      	bne.n	800197a <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800191a:	2b00      	cmp	r3, #0
 800191c:	d02d      	beq.n	800197a <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8001924:	2b00      	cmp	r3, #0
 8001926:	d028      	beq.n	800197a <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	0e1b      	lsrs	r3, r3, #24
 8001934:	b2db      	uxtb	r3, r3
 8001936:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001938:	e005      	b.n	8001946 <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	3301      	adds	r3, #1
 800193e:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <HAL_DFSDM_IRQHandler+0x296>
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b06      	cmp	r3, #6
 8001954:	d9f1      	bls.n	800193a <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	f103 0218 	add.w	r2, r3, #24
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2101      	movs	r1, #1
 8001962:	fa01 f202 	lsl.w	r2, r1, r2
 8001966:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_DFSDM_IRQHandler+0x2c8>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fcf9 	bl	8001368 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8001976:	e000      	b.n	800197a <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001978:	bf00      	nop
}
 800197a:	bf00      	nop
 800197c:	3730      	adds	r7, #48	; 0x30
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40016100 	.word	0x40016100
 8001988:	20000040 	.word	0x20000040

0800198c <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f7fe ffda 	bl	8000994 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7fe ffdc 	bl	80009b4 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2203      	movs	r2, #3
 8001a16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f7ff ffcd 	bl	80019b8 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <DFSDM_GetChannelFromInstance+0x7c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d102      	bne.n	8001a3e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	e02b      	b.n	8001a96 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <DFSDM_GetChannelFromInstance+0x80>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d102      	bne.n	8001a4c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001a46:	2301      	movs	r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	e024      	b.n	8001a96 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a17      	ldr	r2, [pc, #92]	; (8001aac <DFSDM_GetChannelFromInstance+0x84>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d102      	bne.n	8001a5a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001a54:	2302      	movs	r3, #2
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	e01d      	b.n	8001a96 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <DFSDM_GetChannelFromInstance+0x88>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d102      	bne.n	8001a68 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001a62:	2304      	movs	r3, #4
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	e016      	b.n	8001a96 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <DFSDM_GetChannelFromInstance+0x8c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d102      	bne.n	8001a76 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001a70:	2305      	movs	r3, #5
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	e00f      	b.n	8001a96 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a0f      	ldr	r2, [pc, #60]	; (8001ab8 <DFSDM_GetChannelFromInstance+0x90>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d102      	bne.n	8001a84 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001a7e:	2306      	movs	r3, #6
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	e008      	b.n	8001a96 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <DFSDM_GetChannelFromInstance+0x94>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d102      	bne.n	8001a92 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001a8c:	2307      	movs	r3, #7
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e001      	b.n	8001a96 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001a92:	2303      	movs	r3, #3
 8001a94:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	40016000 	.word	0x40016000
 8001aa8:	40016020 	.word	0x40016020
 8001aac:	40016040 	.word	0x40016040
 8001ab0:	40016080 	.word	0x40016080
 8001ab4:	400160a0 	.word	0x400160a0
 8001ab8:	400160c0 	.word	0x400160c0
 8001abc:	400160e0 	.word	0x400160e0

08001ac0 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d108      	bne.n	8001ae2 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e033      	b.n	8001b4a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0201 	bic.w	r2, r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b00:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0201 	orr.w	r2, r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d116      	bne.n	8001b4a <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d107      	bne.n	8001b34 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0202 	orr.w	r2, r2, #2
 8001b32:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d102      	bne.n	8001b44 <DFSDM_RegConvStart+0x84>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	e000      	b.n	8001b46 <DFSDM_RegConvStart+0x86>
 8001b44:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <DFSDM_RegConvStart+0x98>
 8001b54:	2202      	movs	r2, #2
 8001b56:	e000      	b.n	8001b5a <DFSDM_RegConvStart+0x9a>
 8001b58:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e098      	b.n	8001cb0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b4d      	ldr	r3, [pc, #308]	; (8001cbc <HAL_DMA_Init+0x150>)
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d80f      	bhi.n	8001baa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b4b      	ldr	r3, [pc, #300]	; (8001cc0 <HAL_DMA_Init+0x154>)
 8001b92:	4413      	add	r3, r2
 8001b94:	4a4b      	ldr	r2, [pc, #300]	; (8001cc4 <HAL_DMA_Init+0x158>)
 8001b96:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	009a      	lsls	r2, r3, #2
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a48      	ldr	r2, [pc, #288]	; (8001cc8 <HAL_DMA_Init+0x15c>)
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ba8:	e00e      	b.n	8001bc8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b46      	ldr	r3, [pc, #280]	; (8001ccc <HAL_DMA_Init+0x160>)
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a43      	ldr	r2, [pc, #268]	; (8001cc4 <HAL_DMA_Init+0x158>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	009a      	lsls	r2, r3, #2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a42      	ldr	r2, [pc, #264]	; (8001cd0 <HAL_DMA_Init+0x164>)
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c22:	d039      	beq.n	8001c98 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	4a27      	ldr	r2, [pc, #156]	; (8001cc8 <HAL_DMA_Init+0x15c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d11a      	bne.n	8001c64 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c2e:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <HAL_DMA_Init+0x168>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f003 031c 	and.w	r3, r3, #28
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	4924      	ldr	r1, [pc, #144]	; (8001cd4 <HAL_DMA_Init+0x168>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c48:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <HAL_DMA_Init+0x168>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6859      	ldr	r1, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c54:	f003 031c 	and.w	r3, r3, #28
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	491d      	ldr	r1, [pc, #116]	; (8001cd4 <HAL_DMA_Init+0x168>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
 8001c62:	e019      	b.n	8001c98 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c64:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <HAL_DMA_Init+0x16c>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6c:	f003 031c 	and.w	r3, r3, #28
 8001c70:	210f      	movs	r1, #15
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	4917      	ldr	r1, [pc, #92]	; (8001cd8 <HAL_DMA_Init+0x16c>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <HAL_DMA_Init+0x16c>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6859      	ldr	r1, [r3, #4]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f003 031c 	and.w	r3, r3, #28
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	4911      	ldr	r1, [pc, #68]	; (8001cd8 <HAL_DMA_Init+0x16c>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	40020407 	.word	0x40020407
 8001cc0:	bffdfff8 	.word	0xbffdfff8
 8001cc4:	cccccccd 	.word	0xcccccccd
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	bffdfbf8 	.word	0xbffdfbf8
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	400200a8 	.word	0x400200a8
 8001cd8:	400204a8 	.word	0x400204a8

08001cdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_DMA_Start_IT+0x20>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e04b      	b.n	8001d94 <HAL_DMA_Start_IT+0xb8>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d13a      	bne.n	8001d86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0201 	bic.w	r2, r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 f921 	bl	8001f7c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d008      	beq.n	8001d54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 020e 	orr.w	r2, r2, #14
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	e00f      	b.n	8001d74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0204 	bic.w	r2, r2, #4
 8001d62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 020a 	orr.w	r2, r2, #10
 8001d72:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	e005      	b.n	8001d92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d005      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2204      	movs	r2, #4
 8001db8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	e029      	b.n	8001e14 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 020e 	bic.w	r2, r2, #14
 8001dce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de4:	f003 021c 	and.w	r2, r3, #28
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	2101      	movs	r1, #1
 8001dee:	fa01 f202 	lsl.w	r2, r1, r2
 8001df2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4798      	blx	r3
    }
  }
  return status;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f003 031c 	and.w	r3, r3, #28
 8001e3e:	2204      	movs	r2, #4
 8001e40:	409a      	lsls	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d026      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x7a>
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d021      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d107      	bne.n	8001e72 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0204 	bic.w	r2, r2, #4
 8001e70:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f003 021c 	and.w	r2, r3, #28
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	2104      	movs	r1, #4
 8001e80:	fa01 f202 	lsl.w	r2, r1, r2
 8001e84:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d071      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001e96:	e06c      	b.n	8001f72 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9c:	f003 031c 	and.w	r3, r3, #28
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d02e      	beq.n	8001f0a <HAL_DMA_IRQHandler+0xec>
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d029      	beq.n	8001f0a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10b      	bne.n	8001edc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 020a 	bic.w	r2, r2, #10
 8001ed2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	f003 021c 	and.w	r2, r3, #28
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	2102      	movs	r1, #2
 8001eea:	fa01 f202 	lsl.w	r2, r1, r2
 8001eee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d038      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f08:	e033      	b.n	8001f72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f003 031c 	and.w	r3, r3, #28
 8001f12:	2208      	movs	r2, #8
 8001f14:	409a      	lsls	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d02a      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x156>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d025      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 020e 	bic.w	r2, r2, #14
 8001f36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	f003 021c 	and.w	r2, r3, #28
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	2101      	movs	r1, #1
 8001f46:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d004      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f72:	bf00      	nop
 8001f74:	bf00      	nop
}
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f003 021c 	and.w	r2, r3, #28
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	2101      	movs	r1, #1
 8001f98:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d108      	bne.n	8001fc0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fbe:	e007      	b.n	8001fd0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fea:	e17f      	b.n	80022ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8171 	beq.w	80022e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d00b      	beq.n	8002024 <HAL_GPIO_Init+0x48>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d007      	beq.n	8002024 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002018:	2b11      	cmp	r3, #17
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b12      	cmp	r3, #18
 8002022:	d130      	bne.n	8002086 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800205a:	2201      	movs	r2, #1
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	f003 0201 	and.w	r2, r3, #1
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b03      	cmp	r3, #3
 8002090:	d118      	bne.n	80020c4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002098:	2201      	movs	r2, #1
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	08db      	lsrs	r3, r3, #3
 80020ae:	f003 0201 	and.w	r2, r3, #1
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	2203      	movs	r2, #3
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x128>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b12      	cmp	r3, #18
 8002102:	d123      	bne.n	800214c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	08da      	lsrs	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3208      	adds	r2, #8
 800210c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	220f      	movs	r2, #15
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	08da      	lsrs	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3208      	adds	r2, #8
 8002146:	6939      	ldr	r1, [r7, #16]
 8002148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0203 	and.w	r2, r3, #3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80ac 	beq.w	80022e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218e:	4b5e      	ldr	r3, [pc, #376]	; (8002308 <HAL_GPIO_Init+0x32c>)
 8002190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002192:	4a5d      	ldr	r2, [pc, #372]	; (8002308 <HAL_GPIO_Init+0x32c>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6613      	str	r3, [r2, #96]	; 0x60
 800219a:	4b5b      	ldr	r3, [pc, #364]	; (8002308 <HAL_GPIO_Init+0x32c>)
 800219c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021a6:	4a59      	ldr	r2, [pc, #356]	; (800230c <HAL_GPIO_Init+0x330>)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	3302      	adds	r3, #2
 80021ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	220f      	movs	r2, #15
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021d0:	d025      	beq.n	800221e <HAL_GPIO_Init+0x242>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4e      	ldr	r2, [pc, #312]	; (8002310 <HAL_GPIO_Init+0x334>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01f      	beq.n	800221a <HAL_GPIO_Init+0x23e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4d      	ldr	r2, [pc, #308]	; (8002314 <HAL_GPIO_Init+0x338>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d019      	beq.n	8002216 <HAL_GPIO_Init+0x23a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4c      	ldr	r2, [pc, #304]	; (8002318 <HAL_GPIO_Init+0x33c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_GPIO_Init+0x236>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4b      	ldr	r2, [pc, #300]	; (800231c <HAL_GPIO_Init+0x340>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00d      	beq.n	800220e <HAL_GPIO_Init+0x232>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4a      	ldr	r2, [pc, #296]	; (8002320 <HAL_GPIO_Init+0x344>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <HAL_GPIO_Init+0x22e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a49      	ldr	r2, [pc, #292]	; (8002324 <HAL_GPIO_Init+0x348>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <HAL_GPIO_Init+0x22a>
 8002202:	2306      	movs	r3, #6
 8002204:	e00c      	b.n	8002220 <HAL_GPIO_Init+0x244>
 8002206:	2307      	movs	r3, #7
 8002208:	e00a      	b.n	8002220 <HAL_GPIO_Init+0x244>
 800220a:	2305      	movs	r3, #5
 800220c:	e008      	b.n	8002220 <HAL_GPIO_Init+0x244>
 800220e:	2304      	movs	r3, #4
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x244>
 8002212:	2303      	movs	r3, #3
 8002214:	e004      	b.n	8002220 <HAL_GPIO_Init+0x244>
 8002216:	2302      	movs	r3, #2
 8002218:	e002      	b.n	8002220 <HAL_GPIO_Init+0x244>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x244>
 800221e:	2300      	movs	r3, #0
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	f002 0203 	and.w	r2, r2, #3
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	4093      	lsls	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002230:	4936      	ldr	r1, [pc, #216]	; (800230c <HAL_GPIO_Init+0x330>)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800223e:	4b3a      	ldr	r3, [pc, #232]	; (8002328 <HAL_GPIO_Init+0x34c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002262:	4a31      	ldr	r2, [pc, #196]	; (8002328 <HAL_GPIO_Init+0x34c>)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002268:	4b2f      	ldr	r3, [pc, #188]	; (8002328 <HAL_GPIO_Init+0x34c>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800228c:	4a26      	ldr	r2, [pc, #152]	; (8002328 <HAL_GPIO_Init+0x34c>)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002292:	4b25      	ldr	r3, [pc, #148]	; (8002328 <HAL_GPIO_Init+0x34c>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022b6:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <HAL_GPIO_Init+0x34c>)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022bc:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_GPIO_Init+0x34c>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022e0:	4a11      	ldr	r2, [pc, #68]	; (8002328 <HAL_GPIO_Init+0x34c>)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	3301      	adds	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa22 f303 	lsr.w	r3, r2, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f47f ae78 	bne.w	8001fec <HAL_GPIO_Init+0x10>
  }
}
 80022fc:	bf00      	nop
 80022fe:	371c      	adds	r7, #28
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	40021000 	.word	0x40021000
 800230c:	40010000 	.word	0x40010000
 8002310:	48000400 	.word	0x48000400
 8002314:	48000800 	.word	0x48000800
 8002318:	48000c00 	.word	0x48000c00
 800231c:	48001000 	.word	0x48001000
 8002320:	48001400 	.word	0x48001400
 8002324:	48001800 	.word	0x48001800
 8002328:	40010400 	.word	0x40010400

0800232c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <HAL_PWREx_GetVoltageRange+0x18>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40007000 	.word	0x40007000

08002348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002356:	d130      	bne.n	80023ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002358:	4b23      	ldr	r3, [pc, #140]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002364:	d038      	beq.n	80023d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002366:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800236e:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002370:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002374:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002376:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2232      	movs	r2, #50	; 0x32
 800237c:	fb02 f303 	mul.w	r3, r2, r3
 8002380:	4a1b      	ldr	r2, [pc, #108]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002382:	fba2 2303 	umull	r2, r3, r2, r3
 8002386:	0c9b      	lsrs	r3, r3, #18
 8002388:	3301      	adds	r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800238c:	e002      	b.n	8002394 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3b01      	subs	r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a0:	d102      	bne.n	80023a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f2      	bne.n	800238e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b4:	d110      	bne.n	80023d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e00f      	b.n	80023da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c6:	d007      	beq.n	80023d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023d0:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40007000 	.word	0x40007000
 80023ec:	20000004 	.word	0x20000004
 80023f0:	431bde83 	.word	0x431bde83

080023f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e3d4      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002406:	4ba1      	ldr	r3, [pc, #644]	; (800268c <HAL_RCC_OscConfig+0x298>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002410:	4b9e      	ldr	r3, [pc, #632]	; (800268c <HAL_RCC_OscConfig+0x298>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80e4 	beq.w	80025f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <HAL_RCC_OscConfig+0x4a>
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	2b0c      	cmp	r3, #12
 8002432:	f040 808b 	bne.w	800254c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2b01      	cmp	r3, #1
 800243a:	f040 8087 	bne.w	800254c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800243e:	4b93      	ldr	r3, [pc, #588]	; (800268c <HAL_RCC_OscConfig+0x298>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d005      	beq.n	8002456 <HAL_RCC_OscConfig+0x62>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e3ac      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1a      	ldr	r2, [r3, #32]
 800245a:	4b8c      	ldr	r3, [pc, #560]	; (800268c <HAL_RCC_OscConfig+0x298>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d004      	beq.n	8002470 <HAL_RCC_OscConfig+0x7c>
 8002466:	4b89      	ldr	r3, [pc, #548]	; (800268c <HAL_RCC_OscConfig+0x298>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800246e:	e005      	b.n	800247c <HAL_RCC_OscConfig+0x88>
 8002470:	4b86      	ldr	r3, [pc, #536]	; (800268c <HAL_RCC_OscConfig+0x298>)
 8002472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800247c:	4293      	cmp	r3, r2
 800247e:	d223      	bcs.n	80024c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4618      	mov	r0, r3
 8002486:	f000 fd3f 	bl	8002f08 <RCC_SetFlashLatencyFromMSIRange>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e38d      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002494:	4b7d      	ldr	r3, [pc, #500]	; (800268c <HAL_RCC_OscConfig+0x298>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a7c      	ldr	r2, [pc, #496]	; (800268c <HAL_RCC_OscConfig+0x298>)
 800249a:	f043 0308 	orr.w	r3, r3, #8
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b7a      	ldr	r3, [pc, #488]	; (800268c <HAL_RCC_OscConfig+0x298>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4977      	ldr	r1, [pc, #476]	; (800268c <HAL_RCC_OscConfig+0x298>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b2:	4b76      	ldr	r3, [pc, #472]	; (800268c <HAL_RCC_OscConfig+0x298>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	4972      	ldr	r1, [pc, #456]	; (800268c <HAL_RCC_OscConfig+0x298>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]
 80024c6:	e025      	b.n	8002514 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024c8:	4b70      	ldr	r3, [pc, #448]	; (800268c <HAL_RCC_OscConfig+0x298>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a6f      	ldr	r2, [pc, #444]	; (800268c <HAL_RCC_OscConfig+0x298>)
 80024ce:	f043 0308 	orr.w	r3, r3, #8
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b6d      	ldr	r3, [pc, #436]	; (800268c <HAL_RCC_OscConfig+0x298>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	496a      	ldr	r1, [pc, #424]	; (800268c <HAL_RCC_OscConfig+0x298>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024e6:	4b69      	ldr	r3, [pc, #420]	; (800268c <HAL_RCC_OscConfig+0x298>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	4965      	ldr	r1, [pc, #404]	; (800268c <HAL_RCC_OscConfig+0x298>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d109      	bne.n	8002514 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fcff 	bl	8002f08 <RCC_SetFlashLatencyFromMSIRange>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e34d      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002514:	f000 fc36 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 8002518:	4601      	mov	r1, r0
 800251a:	4b5c      	ldr	r3, [pc, #368]	; (800268c <HAL_RCC_OscConfig+0x298>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	4a5a      	ldr	r2, [pc, #360]	; (8002690 <HAL_RCC_OscConfig+0x29c>)
 8002526:	5cd3      	ldrb	r3, [r2, r3]
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	fa21 f303 	lsr.w	r3, r1, r3
 8002530:	4a58      	ldr	r2, [pc, #352]	; (8002694 <HAL_RCC_OscConfig+0x2a0>)
 8002532:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002534:	4b58      	ldr	r3, [pc, #352]	; (8002698 <HAL_RCC_OscConfig+0x2a4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe fcdd 	bl	8000ef8 <HAL_InitTick>
 800253e:	4603      	mov	r3, r0
 8002540:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d052      	beq.n	80025ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	e331      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d032      	beq.n	80025ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002554:	4b4d      	ldr	r3, [pc, #308]	; (800268c <HAL_RCC_OscConfig+0x298>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a4c      	ldr	r2, [pc, #304]	; (800268c <HAL_RCC_OscConfig+0x298>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002560:	f7fe fd1a 	bl	8000f98 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002568:	f7fe fd16 	bl	8000f98 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e31a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800257a:	4b44      	ldr	r3, [pc, #272]	; (800268c <HAL_RCC_OscConfig+0x298>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002586:	4b41      	ldr	r3, [pc, #260]	; (800268c <HAL_RCC_OscConfig+0x298>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a40      	ldr	r2, [pc, #256]	; (800268c <HAL_RCC_OscConfig+0x298>)
 800258c:	f043 0308 	orr.w	r3, r3, #8
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4b3e      	ldr	r3, [pc, #248]	; (800268c <HAL_RCC_OscConfig+0x298>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	493b      	ldr	r1, [pc, #236]	; (800268c <HAL_RCC_OscConfig+0x298>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025a4:	4b39      	ldr	r3, [pc, #228]	; (800268c <HAL_RCC_OscConfig+0x298>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	021b      	lsls	r3, r3, #8
 80025b2:	4936      	ldr	r1, [pc, #216]	; (800268c <HAL_RCC_OscConfig+0x298>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
 80025b8:	e01a      	b.n	80025f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025ba:	4b34      	ldr	r3, [pc, #208]	; (800268c <HAL_RCC_OscConfig+0x298>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a33      	ldr	r2, [pc, #204]	; (800268c <HAL_RCC_OscConfig+0x298>)
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025c6:	f7fe fce7 	bl	8000f98 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025ce:	f7fe fce3 	bl	8000f98 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e2e7      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025e0:	4b2a      	ldr	r3, [pc, #168]	; (800268c <HAL_RCC_OscConfig+0x298>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f0      	bne.n	80025ce <HAL_RCC_OscConfig+0x1da>
 80025ec:	e000      	b.n	80025f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d074      	beq.n	80026e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d005      	beq.n	800260e <HAL_RCC_OscConfig+0x21a>
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	2b0c      	cmp	r3, #12
 8002606:	d10e      	bne.n	8002626 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2b03      	cmp	r3, #3
 800260c:	d10b      	bne.n	8002626 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260e:	4b1f      	ldr	r3, [pc, #124]	; (800268c <HAL_RCC_OscConfig+0x298>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d064      	beq.n	80026e4 <HAL_RCC_OscConfig+0x2f0>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d160      	bne.n	80026e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e2c4      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262e:	d106      	bne.n	800263e <HAL_RCC_OscConfig+0x24a>
 8002630:	4b16      	ldr	r3, [pc, #88]	; (800268c <HAL_RCC_OscConfig+0x298>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a15      	ldr	r2, [pc, #84]	; (800268c <HAL_RCC_OscConfig+0x298>)
 8002636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	e01d      	b.n	800267a <HAL_RCC_OscConfig+0x286>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002646:	d10c      	bne.n	8002662 <HAL_RCC_OscConfig+0x26e>
 8002648:	4b10      	ldr	r3, [pc, #64]	; (800268c <HAL_RCC_OscConfig+0x298>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0f      	ldr	r2, [pc, #60]	; (800268c <HAL_RCC_OscConfig+0x298>)
 800264e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b0d      	ldr	r3, [pc, #52]	; (800268c <HAL_RCC_OscConfig+0x298>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0c      	ldr	r2, [pc, #48]	; (800268c <HAL_RCC_OscConfig+0x298>)
 800265a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	e00b      	b.n	800267a <HAL_RCC_OscConfig+0x286>
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <HAL_RCC_OscConfig+0x298>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a09      	ldr	r2, [pc, #36]	; (800268c <HAL_RCC_OscConfig+0x298>)
 8002668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <HAL_RCC_OscConfig+0x298>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a06      	ldr	r2, [pc, #24]	; (800268c <HAL_RCC_OscConfig+0x298>)
 8002674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002678:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d01c      	beq.n	80026bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7fe fc89 	bl	8000f98 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002688:	e011      	b.n	80026ae <HAL_RCC_OscConfig+0x2ba>
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
 8002690:	08004b14 	.word	0x08004b14
 8002694:	20000004 	.word	0x20000004
 8002698:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800269c:	f7fe fc7c 	bl	8000f98 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e280      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ae:	4baf      	ldr	r3, [pc, #700]	; (800296c <HAL_RCC_OscConfig+0x578>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x2a8>
 80026ba:	e014      	b.n	80026e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe fc6c 	bl	8000f98 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c4:	f7fe fc68 	bl	8000f98 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	; 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e26c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026d6:	4ba5      	ldr	r3, [pc, #660]	; (800296c <HAL_RCC_OscConfig+0x578>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x2d0>
 80026e2:	e000      	b.n	80026e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d060      	beq.n	80027b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_OscConfig+0x310>
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d119      	bne.n	8002732 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d116      	bne.n	8002732 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002704:	4b99      	ldr	r3, [pc, #612]	; (800296c <HAL_RCC_OscConfig+0x578>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_OscConfig+0x328>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e249      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271c:	4b93      	ldr	r3, [pc, #588]	; (800296c <HAL_RCC_OscConfig+0x578>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	061b      	lsls	r3, r3, #24
 800272a:	4990      	ldr	r1, [pc, #576]	; (800296c <HAL_RCC_OscConfig+0x578>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002730:	e040      	b.n	80027b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d023      	beq.n	8002782 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273a:	4b8c      	ldr	r3, [pc, #560]	; (800296c <HAL_RCC_OscConfig+0x578>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a8b      	ldr	r2, [pc, #556]	; (800296c <HAL_RCC_OscConfig+0x578>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002746:	f7fe fc27 	bl	8000f98 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274e:	f7fe fc23 	bl	8000f98 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e227      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002760:	4b82      	ldr	r3, [pc, #520]	; (800296c <HAL_RCC_OscConfig+0x578>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276c:	4b7f      	ldr	r3, [pc, #508]	; (800296c <HAL_RCC_OscConfig+0x578>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	061b      	lsls	r3, r3, #24
 800277a:	497c      	ldr	r1, [pc, #496]	; (800296c <HAL_RCC_OscConfig+0x578>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
 8002780:	e018      	b.n	80027b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002782:	4b7a      	ldr	r3, [pc, #488]	; (800296c <HAL_RCC_OscConfig+0x578>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a79      	ldr	r2, [pc, #484]	; (800296c <HAL_RCC_OscConfig+0x578>)
 8002788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800278c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe fc03 	bl	8000f98 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002796:	f7fe fbff 	bl	8000f98 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e203      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027a8:	4b70      	ldr	r3, [pc, #448]	; (800296c <HAL_RCC_OscConfig+0x578>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f0      	bne.n	8002796 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d03c      	beq.n	800283a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d01c      	beq.n	8002802 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c8:	4b68      	ldr	r3, [pc, #416]	; (800296c <HAL_RCC_OscConfig+0x578>)
 80027ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ce:	4a67      	ldr	r2, [pc, #412]	; (800296c <HAL_RCC_OscConfig+0x578>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d8:	f7fe fbde 	bl	8000f98 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e0:	f7fe fbda 	bl	8000f98 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e1de      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027f2:	4b5e      	ldr	r3, [pc, #376]	; (800296c <HAL_RCC_OscConfig+0x578>)
 80027f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0ef      	beq.n	80027e0 <HAL_RCC_OscConfig+0x3ec>
 8002800:	e01b      	b.n	800283a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002802:	4b5a      	ldr	r3, [pc, #360]	; (800296c <HAL_RCC_OscConfig+0x578>)
 8002804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002808:	4a58      	ldr	r2, [pc, #352]	; (800296c <HAL_RCC_OscConfig+0x578>)
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002812:	f7fe fbc1 	bl	8000f98 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800281a:	f7fe fbbd 	bl	8000f98 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e1c1      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800282c:	4b4f      	ldr	r3, [pc, #316]	; (800296c <HAL_RCC_OscConfig+0x578>)
 800282e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1ef      	bne.n	800281a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80a6 	beq.w	8002994 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002848:	2300      	movs	r3, #0
 800284a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800284c:	4b47      	ldr	r3, [pc, #284]	; (800296c <HAL_RCC_OscConfig+0x578>)
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10d      	bne.n	8002874 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002858:	4b44      	ldr	r3, [pc, #272]	; (800296c <HAL_RCC_OscConfig+0x578>)
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	4a43      	ldr	r2, [pc, #268]	; (800296c <HAL_RCC_OscConfig+0x578>)
 800285e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002862:	6593      	str	r3, [r2, #88]	; 0x58
 8002864:	4b41      	ldr	r3, [pc, #260]	; (800296c <HAL_RCC_OscConfig+0x578>)
 8002866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002870:	2301      	movs	r3, #1
 8002872:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002874:	4b3e      	ldr	r3, [pc, #248]	; (8002970 <HAL_RCC_OscConfig+0x57c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	d118      	bne.n	80028b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002880:	4b3b      	ldr	r3, [pc, #236]	; (8002970 <HAL_RCC_OscConfig+0x57c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a3a      	ldr	r2, [pc, #232]	; (8002970 <HAL_RCC_OscConfig+0x57c>)
 8002886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288c:	f7fe fb84 	bl	8000f98 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002894:	f7fe fb80 	bl	8000f98 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e184      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028a6:	4b32      	ldr	r3, [pc, #200]	; (8002970 <HAL_RCC_OscConfig+0x57c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d108      	bne.n	80028cc <HAL_RCC_OscConfig+0x4d8>
 80028ba:	4b2c      	ldr	r3, [pc, #176]	; (800296c <HAL_RCC_OscConfig+0x578>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c0:	4a2a      	ldr	r2, [pc, #168]	; (800296c <HAL_RCC_OscConfig+0x578>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028ca:	e024      	b.n	8002916 <HAL_RCC_OscConfig+0x522>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	d110      	bne.n	80028f6 <HAL_RCC_OscConfig+0x502>
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <HAL_RCC_OscConfig+0x578>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	4a24      	ldr	r2, [pc, #144]	; (800296c <HAL_RCC_OscConfig+0x578>)
 80028dc:	f043 0304 	orr.w	r3, r3, #4
 80028e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e4:	4b21      	ldr	r3, [pc, #132]	; (800296c <HAL_RCC_OscConfig+0x578>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ea:	4a20      	ldr	r2, [pc, #128]	; (800296c <HAL_RCC_OscConfig+0x578>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028f4:	e00f      	b.n	8002916 <HAL_RCC_OscConfig+0x522>
 80028f6:	4b1d      	ldr	r3, [pc, #116]	; (800296c <HAL_RCC_OscConfig+0x578>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	4a1b      	ldr	r2, [pc, #108]	; (800296c <HAL_RCC_OscConfig+0x578>)
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002906:	4b19      	ldr	r3, [pc, #100]	; (800296c <HAL_RCC_OscConfig+0x578>)
 8002908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290c:	4a17      	ldr	r2, [pc, #92]	; (800296c <HAL_RCC_OscConfig+0x578>)
 800290e:	f023 0304 	bic.w	r3, r3, #4
 8002912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d016      	beq.n	800294c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7fe fb3b 	bl	8000f98 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002924:	e00a      	b.n	800293c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7fe fb37 	bl	8000f98 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	; 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e139      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_RCC_OscConfig+0x578>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0ed      	beq.n	8002926 <HAL_RCC_OscConfig+0x532>
 800294a:	e01a      	b.n	8002982 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7fe fb24 	bl	8000f98 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002952:	e00f      	b.n	8002974 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002954:	f7fe fb20 	bl	8000f98 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d906      	bls.n	8002974 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e122      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002974:	4b90      	ldr	r3, [pc, #576]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1e8      	bne.n	8002954 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002982:	7ffb      	ldrb	r3, [r7, #31]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d105      	bne.n	8002994 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002988:	4b8b      	ldr	r3, [pc, #556]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	4a8a      	ldr	r2, [pc, #552]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 800298e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002992:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 8108 	beq.w	8002bae <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	f040 80d0 	bne.w	8002b48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029a8:	4b83      	ldr	r3, [pc, #524]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f003 0203 	and.w	r2, r3, #3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d130      	bne.n	8002a1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	3b01      	subs	r3, #1
 80029c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d127      	bne.n	8002a1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029da:	429a      	cmp	r2, r3
 80029dc:	d11f      	bne.n	8002a1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029e8:	2a07      	cmp	r2, #7
 80029ea:	bf14      	ite	ne
 80029ec:	2201      	movne	r2, #1
 80029ee:	2200      	moveq	r2, #0
 80029f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d113      	bne.n	8002a1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	3b01      	subs	r3, #1
 8002a04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d109      	bne.n	8002a1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	085b      	lsrs	r3, r3, #1
 8002a16:	3b01      	subs	r3, #1
 8002a18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d06e      	beq.n	8002afc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b0c      	cmp	r3, #12
 8002a22:	d069      	beq.n	8002af8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a24:	4b64      	ldr	r3, [pc, #400]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d105      	bne.n	8002a3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a30:	4b61      	ldr	r3, [pc, #388]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0b7      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a40:	4b5d      	ldr	r3, [pc, #372]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a5c      	ldr	r2, [pc, #368]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a4c:	f7fe faa4 	bl	8000f98 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a54:	f7fe faa0 	bl	8000f98 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e0a4      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a66:	4b54      	ldr	r3, [pc, #336]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a72:	4b51      	ldr	r3, [pc, #324]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	4b51      	ldr	r3, [pc, #324]	; (8002bbc <HAL_RCC_OscConfig+0x7c8>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a82:	3a01      	subs	r2, #1
 8002a84:	0112      	lsls	r2, r2, #4
 8002a86:	4311      	orrs	r1, r2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a8c:	0212      	lsls	r2, r2, #8
 8002a8e:	4311      	orrs	r1, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a94:	0852      	lsrs	r2, r2, #1
 8002a96:	3a01      	subs	r2, #1
 8002a98:	0552      	lsls	r2, r2, #21
 8002a9a:	4311      	orrs	r1, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002aa0:	0852      	lsrs	r2, r2, #1
 8002aa2:	3a01      	subs	r2, #1
 8002aa4:	0652      	lsls	r2, r2, #25
 8002aa6:	4311      	orrs	r1, r2
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002aac:	0912      	lsrs	r2, r2, #4
 8002aae:	0452      	lsls	r2, r2, #17
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	4941      	ldr	r1, [pc, #260]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ab8:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a3e      	ldr	r2, [pc, #248]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ac2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ac4:	4b3c      	ldr	r3, [pc, #240]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4a3b      	ldr	r2, [pc, #236]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ace:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ad0:	f7fe fa62 	bl	8000f98 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7fe fa5e 	bl	8000f98 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e062      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aea:	4b33      	ldr	r3, [pc, #204]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002af6:	e05a      	b.n	8002bae <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e059      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002afc:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d152      	bne.n	8002bae <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b08:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b14:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4a27      	ldr	r2, [pc, #156]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b20:	f7fe fa3a 	bl	8000f98 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b28:	f7fe fa36 	bl	8000f98 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e03a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b3a:	4b1f      	ldr	r3, [pc, #124]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x734>
 8002b46:	e032      	b.n	8002bae <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2b0c      	cmp	r3, #12
 8002b4c:	d02d      	beq.n	8002baa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a19      	ldr	r2, [pc, #100]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b58:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d105      	bne.n	8002b72 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b6c:	f023 0303 	bic.w	r3, r3, #3
 8002b70:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	4a10      	ldr	r2, [pc, #64]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b78:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b80:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b82:	f7fe fa09 	bl	8000f98 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7fe fa05 	bl	8000f98 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e009      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_RCC_OscConfig+0x7c4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f0      	bne.n	8002b8a <HAL_RCC_OscConfig+0x796>
 8002ba8:	e001      	b.n	8002bae <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3720      	adds	r7, #32
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	f99d808c 	.word	0xf99d808c

08002bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0c8      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b66      	ldr	r3, [pc, #408]	; (8002d70 <HAL_RCC_ClockConfig+0x1b0>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d910      	bls.n	8002c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b63      	ldr	r3, [pc, #396]	; (8002d70 <HAL_RCC_ClockConfig+0x1b0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 0207 	bic.w	r2, r3, #7
 8002bea:	4961      	ldr	r1, [pc, #388]	; (8002d70 <HAL_RCC_ClockConfig+0x1b0>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b5f      	ldr	r3, [pc, #380]	; (8002d70 <HAL_RCC_ClockConfig+0x1b0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0b0      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d04c      	beq.n	8002caa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d107      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c18:	4b56      	ldr	r3, [pc, #344]	; (8002d74 <HAL_RCC_ClockConfig+0x1b4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d121      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e09e      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d107      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c30:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <HAL_RCC_ClockConfig+0x1b4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d115      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e092      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d107      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c48:	4b4a      	ldr	r3, [pc, #296]	; (8002d74 <HAL_RCC_ClockConfig+0x1b4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d109      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e086      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c58:	4b46      	ldr	r3, [pc, #280]	; (8002d74 <HAL_RCC_ClockConfig+0x1b4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e07e      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c68:	4b42      	ldr	r3, [pc, #264]	; (8002d74 <HAL_RCC_ClockConfig+0x1b4>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f023 0203 	bic.w	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	493f      	ldr	r1, [pc, #252]	; (8002d74 <HAL_RCC_ClockConfig+0x1b4>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7a:	f7fe f98d 	bl	8000f98 <HAL_GetTick>
 8002c7e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c82:	f7fe f989 	bl	8000f98 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e066      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c98:	4b36      	ldr	r3, [pc, #216]	; (8002d74 <HAL_RCC_ClockConfig+0x1b4>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 020c 	and.w	r2, r3, #12
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d1eb      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb6:	4b2f      	ldr	r3, [pc, #188]	; (8002d74 <HAL_RCC_ClockConfig+0x1b4>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	492c      	ldr	r1, [pc, #176]	; (8002d74 <HAL_RCC_ClockConfig+0x1b4>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <HAL_RCC_ClockConfig+0x1b0>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d210      	bcs.n	8002cf8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <HAL_RCC_ClockConfig+0x1b0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 0207 	bic.w	r2, r3, #7
 8002cde:	4924      	ldr	r1, [pc, #144]	; (8002d70 <HAL_RCC_ClockConfig+0x1b0>)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce6:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <HAL_RCC_ClockConfig+0x1b0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e036      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <HAL_RCC_ClockConfig+0x1b4>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4918      	ldr	r1, [pc, #96]	; (8002d74 <HAL_RCC_ClockConfig+0x1b4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d009      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d22:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <HAL_RCC_ClockConfig+0x1b4>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4910      	ldr	r1, [pc, #64]	; (8002d74 <HAL_RCC_ClockConfig+0x1b4>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d36:	f000 f825 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 8002d3a:	4601      	mov	r1, r0
 8002d3c:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <HAL_RCC_ClockConfig+0x1b4>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	5cd3      	ldrb	r3, [r2, r3]
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8002d52:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe f8cc 	bl	8000ef8 <HAL_InitTick>
 8002d60:	4603      	mov	r3, r0
 8002d62:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d64:	7afb      	ldrb	r3, [r7, #11]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40022000 	.word	0x40022000
 8002d74:	40021000 	.word	0x40021000
 8002d78:	08004b14 	.word	0x08004b14
 8002d7c:	20000004 	.word	0x20000004
 8002d80:	20000008 	.word	0x20000008

08002d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b089      	sub	sp, #36	; 0x24
 8002d88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d92:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d9c:	4b3a      	ldr	r3, [pc, #232]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0x34>
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b0c      	cmp	r3, #12
 8002db0:	d121      	bne.n	8002df6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d11e      	bne.n	8002df6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002db8:	4b33      	ldr	r3, [pc, #204]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d107      	bne.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dc4:	4b30      	ldr	r3, [pc, #192]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	e005      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dd4:	4b2c      	ldr	r3, [pc, #176]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002de0:	4a2a      	ldr	r2, [pc, #168]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10d      	bne.n	8002e0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002df4:	e00a      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d102      	bne.n	8002e02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dfc:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dfe:	61bb      	str	r3, [r7, #24]
 8002e00:	e004      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e08:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	2b0c      	cmp	r3, #12
 8002e10:	d133      	bne.n	8002e7a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d002      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0xa4>
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d003      	beq.n	8002e2e <HAL_RCC_GetSysClockFreq+0xaa>
 8002e26:	e005      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e28:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e2a:	617b      	str	r3, [r7, #20]
      break;
 8002e2c:	e005      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e2e:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e30:	617b      	str	r3, [r7, #20]
      break;
 8002e32:	e002      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	617b      	str	r3, [r7, #20]
      break;
 8002e38:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e3a:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	3301      	adds	r3, #1
 8002e46:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e48:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	0a1b      	lsrs	r3, r3, #8
 8002e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	fb02 f203 	mul.w	r2, r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	0e5b      	lsrs	r3, r3, #25
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e7a:	69bb      	ldr	r3, [r7, #24]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3724      	adds	r7, #36	; 0x24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	08004b2c 	.word	0x08004b2c
 8002e90:	00f42400 	.word	0x00f42400
 8002e94:	007a1200 	.word	0x007a1200

08002e98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_RCC_GetHCLKFreq+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000004 	.word	0x20000004

08002eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002eb4:	f7ff fff0 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002eb8:	4601      	mov	r1, r0
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ec6:	5cd3      	ldrb	r3, [r2, r3]
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	08004b24 	.word	0x08004b24

08002edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ee0:	f7ff ffda 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002ee4:	4601      	mov	r1, r0
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	0adb      	lsrs	r3, r3, #11
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	4a04      	ldr	r2, [pc, #16]	; (8002f04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ef2:	5cd3      	ldrb	r3, [r2, r3]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40021000 	.word	0x40021000
 8002f04:	08004b24 	.word	0x08004b24

08002f08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f14:	4b2a      	ldr	r3, [pc, #168]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f20:	f7ff fa04 	bl	800232c <HAL_PWREx_GetVoltageRange>
 8002f24:	6178      	str	r0, [r7, #20]
 8002f26:	e014      	b.n	8002f52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f28:	4b25      	ldr	r3, [pc, #148]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	4a24      	ldr	r2, [pc, #144]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f32:	6593      	str	r3, [r2, #88]	; 0x58
 8002f34:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f40:	f7ff f9f4 	bl	800232c <HAL_PWREx_GetVoltageRange>
 8002f44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f46:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	4a1d      	ldr	r2, [pc, #116]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f58:	d10b      	bne.n	8002f72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b80      	cmp	r3, #128	; 0x80
 8002f5e:	d919      	bls.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2ba0      	cmp	r3, #160	; 0xa0
 8002f64:	d902      	bls.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f66:	2302      	movs	r3, #2
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	e013      	b.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	e010      	b.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b80      	cmp	r3, #128	; 0x80
 8002f76:	d902      	bls.n	8002f7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f78:	2303      	movs	r3, #3
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	e00a      	b.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b80      	cmp	r3, #128	; 0x80
 8002f82:	d102      	bne.n	8002f8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f84:	2302      	movs	r3, #2
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	e004      	b.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b70      	cmp	r3, #112	; 0x70
 8002f8e:	d101      	bne.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f90:	2301      	movs	r3, #1
 8002f92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 0207 	bic.w	r2, r3, #7
 8002f9c:	4909      	ldr	r1, [pc, #36]	; (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fa4:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d001      	beq.n	8002fb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40022000 	.word	0x40022000

08002fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d03f      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fec:	d01c      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ff2:	d802      	bhi.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00e      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002ff8:	e01f      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002ffa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ffe:	d003      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003000:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003004:	d01c      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003006:	e018      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003008:	4b85      	ldr	r3, [pc, #532]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4a84      	ldr	r2, [pc, #528]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800300e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003012:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003014:	e015      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3304      	adds	r3, #4
 800301a:	2100      	movs	r1, #0
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fab9 	bl	8003594 <RCCEx_PLLSAI1_Config>
 8003022:	4603      	mov	r3, r0
 8003024:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003026:	e00c      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3320      	adds	r3, #32
 800302c:	2100      	movs	r1, #0
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fba0 	bl	8003774 <RCCEx_PLLSAI2_Config>
 8003034:	4603      	mov	r3, r0
 8003036:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003038:	e003      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	74fb      	strb	r3, [r7, #19]
      break;
 800303e:	e000      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003042:	7cfb      	ldrb	r3, [r7, #19]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10b      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003048:	4b75      	ldr	r3, [pc, #468]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003056:	4972      	ldr	r1, [pc, #456]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800305e:	e001      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003060:	7cfb      	ldrb	r3, [r7, #19]
 8003062:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d03f      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003078:	d01c      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800307a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800307e:	d802      	bhi.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00e      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003084:	e01f      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003086:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800308a:	d003      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800308c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003090:	d01c      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003092:	e018      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003094:	4b62      	ldr	r3, [pc, #392]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a61      	ldr	r2, [pc, #388]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030a0:	e015      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fa73 	bl	8003594 <RCCEx_PLLSAI1_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030b2:	e00c      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3320      	adds	r3, #32
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fb5a 	bl	8003774 <RCCEx_PLLSAI2_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030c4:	e003      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	74fb      	strb	r3, [r7, #19]
      break;
 80030ca:	e000      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80030cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030d4:	4b52      	ldr	r3, [pc, #328]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e2:	494f      	ldr	r1, [pc, #316]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030ea:	e001      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80a0 	beq.w	800323e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fe:	2300      	movs	r3, #0
 8003100:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003102:	4b47      	ldr	r3, [pc, #284]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003112:	2300      	movs	r3, #0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00d      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003118:	4b41      	ldr	r3, [pc, #260]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311c:	4a40      	ldr	r2, [pc, #256]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800311e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003122:	6593      	str	r3, [r2, #88]	; 0x58
 8003124:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003130:	2301      	movs	r3, #1
 8003132:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003134:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a3a      	ldr	r2, [pc, #232]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800313a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003140:	f7fd ff2a 	bl	8000f98 <HAL_GetTick>
 8003144:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003146:	e009      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003148:	f7fd ff26 	bl	8000f98 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d902      	bls.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	74fb      	strb	r3, [r7, #19]
        break;
 800315a:	e005      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800315c:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ef      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d15c      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800316e:	4b2c      	ldr	r3, [pc, #176]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003178:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01f      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	429a      	cmp	r2, r3
 800318a:	d019      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800318c:	4b24      	ldr	r3, [pc, #144]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003196:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003198:	4b21      	ldr	r3, [pc, #132]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319e:	4a20      	ldr	r2, [pc, #128]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031a8:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	4a1c      	ldr	r2, [pc, #112]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031b8:	4a19      	ldr	r2, [pc, #100]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d016      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ca:	f7fd fee5 	bl	8000f98 <HAL_GetTick>
 80031ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d0:	e00b      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7fd fee1 	bl	8000f98 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d902      	bls.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	74fb      	strb	r3, [r7, #19]
            break;
 80031e8:	e006      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ec      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10c      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800320e:	4904      	ldr	r1, [pc, #16]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003216:	e009      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	74bb      	strb	r3, [r7, #18]
 800321c:	e006      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000
 8003224:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800322c:	7c7b      	ldrb	r3, [r7, #17]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d105      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003232:	4b9e      	ldr	r3, [pc, #632]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	4a9d      	ldr	r2, [pc, #628]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800324a:	4b98      	ldr	r3, [pc, #608]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	f023 0203 	bic.w	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003258:	4994      	ldr	r1, [pc, #592]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800326c:	4b8f      	ldr	r3, [pc, #572]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	f023 020c 	bic.w	r2, r3, #12
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327a:	498c      	ldr	r1, [pc, #560]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800328e:	4b87      	ldr	r3, [pc, #540]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	4983      	ldr	r1, [pc, #524]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032b0:	4b7e      	ldr	r3, [pc, #504]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	497b      	ldr	r1, [pc, #492]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032d2:	4b76      	ldr	r3, [pc, #472]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e0:	4972      	ldr	r1, [pc, #456]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032f4:	4b6d      	ldr	r3, [pc, #436]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003302:	496a      	ldr	r1, [pc, #424]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003316:	4b65      	ldr	r3, [pc, #404]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	4961      	ldr	r1, [pc, #388]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003338:	4b5c      	ldr	r3, [pc, #368]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003346:	4959      	ldr	r1, [pc, #356]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800335a:	4b54      	ldr	r3, [pc, #336]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003360:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003368:	4950      	ldr	r1, [pc, #320]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800337c:	4b4b      	ldr	r3, [pc, #300]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	4948      	ldr	r1, [pc, #288]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800339e:	4b43      	ldr	r3, [pc, #268]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	493f      	ldr	r1, [pc, #252]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d028      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033c0:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ce:	4937      	ldr	r1, [pc, #220]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033de:	d106      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e0:	4b32      	ldr	r3, [pc, #200]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4a31      	ldr	r2, [pc, #196]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ea:	60d3      	str	r3, [r2, #12]
 80033ec:	e011      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033f6:	d10c      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	2101      	movs	r1, #1
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f8c8 	bl	8003594 <RCCEx_PLLSAI1_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d028      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800341e:	4b23      	ldr	r3, [pc, #140]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	491f      	ldr	r1, [pc, #124]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800343c:	d106      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800343e:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	4a1a      	ldr	r2, [pc, #104]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003448:	60d3      	str	r3, [r2, #12]
 800344a:	e011      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003454:	d10c      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3304      	adds	r3, #4
 800345a:	2101      	movs	r1, #1
 800345c:	4618      	mov	r0, r3
 800345e:	f000 f899 	bl	8003594 <RCCEx_PLLSAI1_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003466:	7cfb      	ldrb	r3, [r7, #19]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d02b      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348a:	4908      	ldr	r1, [pc, #32]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800349a:	d109      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800349c:	4b03      	ldr	r3, [pc, #12]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4a02      	ldr	r2, [pc, #8]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034a6:	60d3      	str	r3, [r2, #12]
 80034a8:	e014      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3304      	adds	r3, #4
 80034be:	2101      	movs	r1, #1
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f867 	bl	8003594 <RCCEx_PLLSAI1_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ca:	7cfb      	ldrb	r3, [r7, #19]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d02f      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034e0:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ee:	4928      	ldr	r1, [pc, #160]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034fe:	d10d      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	2102      	movs	r1, #2
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f844 	bl	8003594 <RCCEx_PLLSAI1_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d014      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	74bb      	strb	r3, [r7, #18]
 800351a:	e011      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003524:	d10c      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3320      	adds	r3, #32
 800352a:	2102      	movs	r1, #2
 800352c:	4618      	mov	r0, r3
 800352e:	f000 f921 	bl	8003774 <RCCEx_PLLSAI2_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003536:	7cfb      	ldrb	r3, [r7, #19]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800355a:	490d      	ldr	r1, [pc, #52]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800357e:	4904      	ldr	r1, [pc, #16]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003586:	7cbb      	ldrb	r3, [r7, #18]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000

08003594 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035a2:	4b73      	ldr	r3, [pc, #460]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d018      	beq.n	80035e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035ae:	4b70      	ldr	r3, [pc, #448]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0203 	and.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d10d      	bne.n	80035da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
       ||
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035c6:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
       ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d044      	beq.n	8003664 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
 80035de:	e041      	b.n	8003664 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d00c      	beq.n	8003602 <RCCEx_PLLSAI1_Config+0x6e>
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d013      	beq.n	8003614 <RCCEx_PLLSAI1_Config+0x80>
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d120      	bne.n	8003632 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035f0:	4b5f      	ldr	r3, [pc, #380]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d11d      	bne.n	8003638 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003600:	e01a      	b.n	8003638 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003602:	4b5b      	ldr	r3, [pc, #364]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360a:	2b00      	cmp	r3, #0
 800360c:	d116      	bne.n	800363c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003612:	e013      	b.n	800363c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003614:	4b56      	ldr	r3, [pc, #344]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10f      	bne.n	8003640 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003620:	4b53      	ldr	r3, [pc, #332]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d109      	bne.n	8003640 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003630:	e006      	b.n	8003640 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
      break;
 8003636:	e004      	b.n	8003642 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003638:	bf00      	nop
 800363a:	e002      	b.n	8003642 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800363c:	bf00      	nop
 800363e:	e000      	b.n	8003642 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003640:	bf00      	nop
    }

    if(status == HAL_OK)
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10d      	bne.n	8003664 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003648:	4b49      	ldr	r3, [pc, #292]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6819      	ldr	r1, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	3b01      	subs	r3, #1
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	430b      	orrs	r3, r1
 800365e:	4944      	ldr	r1, [pc, #272]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003660:	4313      	orrs	r3, r2
 8003662:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d17d      	bne.n	8003766 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800366a:	4b41      	ldr	r3, [pc, #260]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a40      	ldr	r2, [pc, #256]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003670:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003676:	f7fd fc8f 	bl	8000f98 <HAL_GetTick>
 800367a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800367c:	e009      	b.n	8003692 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800367e:	f7fd fc8b 	bl	8000f98 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d902      	bls.n	8003692 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	73fb      	strb	r3, [r7, #15]
        break;
 8003690:	e005      	b.n	800369e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003692:	4b37      	ldr	r3, [pc, #220]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1ef      	bne.n	800367e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d160      	bne.n	8003766 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d111      	bne.n	80036ce <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036aa:	4b31      	ldr	r3, [pc, #196]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6892      	ldr	r2, [r2, #8]
 80036ba:	0211      	lsls	r1, r2, #8
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	68d2      	ldr	r2, [r2, #12]
 80036c0:	0912      	lsrs	r2, r2, #4
 80036c2:	0452      	lsls	r2, r2, #17
 80036c4:	430a      	orrs	r2, r1
 80036c6:	492a      	ldr	r1, [pc, #168]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	610b      	str	r3, [r1, #16]
 80036cc:	e027      	b.n	800371e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d112      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036d4:	4b26      	ldr	r3, [pc, #152]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6892      	ldr	r2, [r2, #8]
 80036e4:	0211      	lsls	r1, r2, #8
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6912      	ldr	r2, [r2, #16]
 80036ea:	0852      	lsrs	r2, r2, #1
 80036ec:	3a01      	subs	r2, #1
 80036ee:	0552      	lsls	r2, r2, #21
 80036f0:	430a      	orrs	r2, r1
 80036f2:	491f      	ldr	r1, [pc, #124]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	610b      	str	r3, [r1, #16]
 80036f8:	e011      	b.n	800371e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036fa:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003702:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6892      	ldr	r2, [r2, #8]
 800370a:	0211      	lsls	r1, r2, #8
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6952      	ldr	r2, [r2, #20]
 8003710:	0852      	lsrs	r2, r2, #1
 8003712:	3a01      	subs	r2, #1
 8003714:	0652      	lsls	r2, r2, #25
 8003716:	430a      	orrs	r2, r1
 8003718:	4915      	ldr	r1, [pc, #84]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 800371a:	4313      	orrs	r3, r2
 800371c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800371e:	4b14      	ldr	r3, [pc, #80]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a13      	ldr	r2, [pc, #76]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003724:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003728:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372a:	f7fd fc35 	bl	8000f98 <HAL_GetTick>
 800372e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003730:	e009      	b.n	8003746 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003732:	f7fd fc31 	bl	8000f98 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d902      	bls.n	8003746 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	73fb      	strb	r3, [r7, #15]
          break;
 8003744:	e005      	b.n	8003752 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003746:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0ef      	beq.n	8003732 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	4903      	ldr	r1, [pc, #12]	; (8003770 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003762:	4313      	orrs	r3, r2
 8003764:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003766:	7bfb      	ldrb	r3, [r7, #15]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000

08003774 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003782:	4b68      	ldr	r3, [pc, #416]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d018      	beq.n	80037c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800378e:	4b65      	ldr	r3, [pc, #404]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f003 0203 	and.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d10d      	bne.n	80037ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
       ||
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037a6:	4b5f      	ldr	r3, [pc, #380]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	091b      	lsrs	r3, r3, #4
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
       ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d044      	beq.n	8003844 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
 80037be:	e041      	b.n	8003844 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d00c      	beq.n	80037e2 <RCCEx_PLLSAI2_Config+0x6e>
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d013      	beq.n	80037f4 <RCCEx_PLLSAI2_Config+0x80>
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d120      	bne.n	8003812 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037d0:	4b54      	ldr	r3, [pc, #336]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d11d      	bne.n	8003818 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e0:	e01a      	b.n	8003818 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037e2:	4b50      	ldr	r3, [pc, #320]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d116      	bne.n	800381c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f2:	e013      	b.n	800381c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037f4:	4b4b      	ldr	r3, [pc, #300]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10f      	bne.n	8003820 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003800:	4b48      	ldr	r3, [pc, #288]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d109      	bne.n	8003820 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003810:	e006      	b.n	8003820 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
      break;
 8003816:	e004      	b.n	8003822 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003818:	bf00      	nop
 800381a:	e002      	b.n	8003822 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800381c:	bf00      	nop
 800381e:	e000      	b.n	8003822 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003820:	bf00      	nop
    }

    if(status == HAL_OK)
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10d      	bne.n	8003844 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003828:	4b3e      	ldr	r3, [pc, #248]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6819      	ldr	r1, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	3b01      	subs	r3, #1
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	430b      	orrs	r3, r1
 800383e:	4939      	ldr	r1, [pc, #228]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003840:	4313      	orrs	r3, r2
 8003842:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d167      	bne.n	800391a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800384a:	4b36      	ldr	r3, [pc, #216]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a35      	ldr	r2, [pc, #212]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003856:	f7fd fb9f 	bl	8000f98 <HAL_GetTick>
 800385a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800385c:	e009      	b.n	8003872 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800385e:	f7fd fb9b 	bl	8000f98 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d902      	bls.n	8003872 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	73fb      	strb	r3, [r7, #15]
        break;
 8003870:	e005      	b.n	800387e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003872:	4b2c      	ldr	r3, [pc, #176]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1ef      	bne.n	800385e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d14a      	bne.n	800391a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d111      	bne.n	80038ae <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800388a:	4b26      	ldr	r3, [pc, #152]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6892      	ldr	r2, [r2, #8]
 800389a:	0211      	lsls	r1, r2, #8
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	68d2      	ldr	r2, [r2, #12]
 80038a0:	0912      	lsrs	r2, r2, #4
 80038a2:	0452      	lsls	r2, r2, #17
 80038a4:	430a      	orrs	r2, r1
 80038a6:	491f      	ldr	r1, [pc, #124]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	614b      	str	r3, [r1, #20]
 80038ac:	e011      	b.n	80038d2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038ae:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6892      	ldr	r2, [r2, #8]
 80038be:	0211      	lsls	r1, r2, #8
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6912      	ldr	r2, [r2, #16]
 80038c4:	0852      	lsrs	r2, r2, #1
 80038c6:	3a01      	subs	r2, #1
 80038c8:	0652      	lsls	r2, r2, #25
 80038ca:	430a      	orrs	r2, r1
 80038cc:	4915      	ldr	r1, [pc, #84]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038d2:	4b14      	ldr	r3, [pc, #80]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a13      	ldr	r2, [pc, #76]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038de:	f7fd fb5b 	bl	8000f98 <HAL_GetTick>
 80038e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038e4:	e009      	b.n	80038fa <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038e6:	f7fd fb57 	bl	8000f98 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d902      	bls.n	80038fa <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	73fb      	strb	r3, [r7, #15]
          break;
 80038f8:	e005      	b.n	8003906 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0ef      	beq.n	80038e6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d106      	bne.n	800391a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800390c:	4b05      	ldr	r3, [pc, #20]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	4903      	ldr	r1, [pc, #12]	; (8003924 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003916:	4313      	orrs	r3, r2
 8003918:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800391a:	7bfb      	ldrb	r3, [r7, #15]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000

08003928 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e040      	b.n	80039bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd f95a 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2224      	movs	r2, #36	; 0x24
 8003954:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fa04 	bl	8003d74 <UART_SetConfig>
 800396c:	4603      	mov	r3, r0
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e022      	b.n	80039bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fc82 	bl	8004288 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fd09 	bl	80043cc <UART_CheckIdleState>
 80039ba:	4603      	mov	r3, r0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d164      	bne.n	8003aa4 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <HAL_UART_Transmit_DMA+0x22>
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e05d      	b.n	8003aa6 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_UART_Transmit_DMA+0x34>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e056      	b.n	8003aa6 <HAL_UART_Transmit_DMA+0xe2>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	88fa      	ldrh	r2, [r7, #6]
 8003a0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	88fa      	ldrh	r2, [r7, #6]
 8003a12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2221      	movs	r2, #33	; 0x21
 8003a20:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d02a      	beq.n	8003a80 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a2e:	4a20      	ldr	r2, [pc, #128]	; (8003ab0 <HAL_UART_Transmit_DMA+0xec>)
 8003a30:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a36:	4a1f      	ldr	r2, [pc, #124]	; (8003ab4 <HAL_UART_Transmit_DMA+0xf0>)
 8003a38:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a3e:	4a1e      	ldr	r2, [pc, #120]	; (8003ab8 <HAL_UART_Transmit_DMA+0xf4>)
 8003a40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a46:	2200      	movs	r2, #0
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a52:	4619      	mov	r1, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3328      	adds	r3, #40	; 0x28
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	f7fe f93d 	bl	8001cdc <HAL_DMA_Start_IT>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00b      	beq.n	8003a80 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2210      	movs	r2, #16
 8003a6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e012      	b.n	8003aa6 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2240      	movs	r2, #64	; 0x40
 8003a86:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a9e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e000      	b.n	8003aa6 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
  }
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	080045b7 	.word	0x080045b7
 8003ab4:	0800460b 	.word	0x0800460b
 8003ab8:	08004627 	.word	0x08004627

08003abc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	f640 030f 	movw	r3, #2063	; 0x80f
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d113      	bne.n	8003b14 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00e      	beq.n	8003b14 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d009      	beq.n	8003b14 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 8114 	beq.w	8003d32 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	4798      	blx	r3
      }
      return;
 8003b12:	e10e      	b.n	8003d32 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 80d6 	beq.w	8003cc8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d105      	bne.n	8003b32 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4b86      	ldr	r3, [pc, #536]	; (8003d44 <HAL_UART_IRQHandler+0x288>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80cb 	beq.w	8003cc8 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00e      	beq.n	8003b5a <HAL_UART_IRQHandler+0x9e>
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b52:	f043 0201 	orr.w	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00e      	beq.n	8003b82 <HAL_UART_IRQHandler+0xc6>
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2202      	movs	r2, #2
 8003b74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b7a:	f043 0204 	orr.w	r2, r3, #4
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00e      	beq.n	8003baa <HAL_UART_IRQHandler+0xee>
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ba2:	f043 0202 	orr.w	r2, r3, #2
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d013      	beq.n	8003bdc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d104      	bne.n	8003bc8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d009      	beq.n	8003bdc <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2208      	movs	r2, #8
 8003bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd4:	f043 0208 	orr.w	r2, r3, #8
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00f      	beq.n	8003c06 <HAL_UART_IRQHandler+0x14a>
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bfe:	f043 0220 	orr.w	r2, r3, #32
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8093 	beq.w	8003d36 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00c      	beq.n	8003c34 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c38:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d004      	beq.n	8003c52 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d031      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fc8f 	bl	8004576 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d123      	bne.n	8003cae <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c74:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d013      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c82:	4a31      	ldr	r2, [pc, #196]	; (8003d48 <HAL_UART_IRQHandler+0x28c>)
 8003c84:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe f886 	bl	8001d9c <HAL_DMA_Abort_IT>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d016      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca4:	e00e      	b.n	8003cc4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f85a 	bl	8003d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	e00a      	b.n	8003cc4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f856 	bl	8003d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	e006      	b.n	8003cc4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f852 	bl	8003d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003cc2:	e038      	b.n	8003d36 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc4:	bf00      	nop
    return;
 8003cc6:	e036      	b.n	8003d36 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00d      	beq.n	8003cee <HAL_UART_IRQHandler+0x232>
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ce4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fd08 	bl	80046fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cec:	e026      	b.n	8003d3c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00d      	beq.n	8003d14 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d017      	beq.n	8003d3a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	4798      	blx	r3
    }
    return;
 8003d12:	e012      	b.n	8003d3a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00e      	beq.n	8003d3c <HAL_UART_IRQHandler+0x280>
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d009      	beq.n	8003d3c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fcce 	bl	80046ca <UART_EndTransmit_IT>
    return;
 8003d2e:	bf00      	nop
 8003d30:	e004      	b.n	8003d3c <HAL_UART_IRQHandler+0x280>
      return;
 8003d32:	bf00      	nop
 8003d34:	e002      	b.n	8003d3c <HAL_UART_IRQHandler+0x280>
    return;
 8003d36:	bf00      	nop
 8003d38:	e000      	b.n	8003d3c <HAL_UART_IRQHandler+0x280>
    return;
 8003d3a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003d3c:	3720      	adds	r7, #32
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	04000120 	.word	0x04000120
 8003d48:	0800469f 	.word	0x0800469f

08003d4c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d74:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003d78:	b088      	sub	sp, #32
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4bac      	ldr	r3, [pc, #688]	; (8004054 <UART_SetConfig+0x2e0>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	69f9      	ldr	r1, [r7, #28]
 8003daa:	430b      	orrs	r3, r1
 8003dac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4aa2      	ldr	r2, [pc, #648]	; (8004058 <UART_SetConfig+0x2e4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a99      	ldr	r2, [pc, #612]	; (800405c <UART_SetConfig+0x2e8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d121      	bne.n	8003e40 <UART_SetConfig+0xcc>
 8003dfc:	4b98      	ldr	r3, [pc, #608]	; (8004060 <UART_SetConfig+0x2ec>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d816      	bhi.n	8003e38 <UART_SetConfig+0xc4>
 8003e0a:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <UART_SetConfig+0x9c>)
 8003e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e10:	08003e21 	.word	0x08003e21
 8003e14:	08003e2d 	.word	0x08003e2d
 8003e18:	08003e27 	.word	0x08003e27
 8003e1c:	08003e33 	.word	0x08003e33
 8003e20:	2301      	movs	r3, #1
 8003e22:	76fb      	strb	r3, [r7, #27]
 8003e24:	e0e8      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003e26:	2302      	movs	r3, #2
 8003e28:	76fb      	strb	r3, [r7, #27]
 8003e2a:	e0e5      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	76fb      	strb	r3, [r7, #27]
 8003e30:	e0e2      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003e32:	2308      	movs	r3, #8
 8003e34:	76fb      	strb	r3, [r7, #27]
 8003e36:	e0df      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003e38:	2310      	movs	r3, #16
 8003e3a:	76fb      	strb	r3, [r7, #27]
 8003e3c:	bf00      	nop
 8003e3e:	e0db      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a87      	ldr	r2, [pc, #540]	; (8004064 <UART_SetConfig+0x2f0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d134      	bne.n	8003eb4 <UART_SetConfig+0x140>
 8003e4a:	4b85      	ldr	r3, [pc, #532]	; (8004060 <UART_SetConfig+0x2ec>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e50:	f003 030c 	and.w	r3, r3, #12
 8003e54:	2b0c      	cmp	r3, #12
 8003e56:	d829      	bhi.n	8003eac <UART_SetConfig+0x138>
 8003e58:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <UART_SetConfig+0xec>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003e95 	.word	0x08003e95
 8003e64:	08003ead 	.word	0x08003ead
 8003e68:	08003ead 	.word	0x08003ead
 8003e6c:	08003ead 	.word	0x08003ead
 8003e70:	08003ea1 	.word	0x08003ea1
 8003e74:	08003ead 	.word	0x08003ead
 8003e78:	08003ead 	.word	0x08003ead
 8003e7c:	08003ead 	.word	0x08003ead
 8003e80:	08003e9b 	.word	0x08003e9b
 8003e84:	08003ead 	.word	0x08003ead
 8003e88:	08003ead 	.word	0x08003ead
 8003e8c:	08003ead 	.word	0x08003ead
 8003e90:	08003ea7 	.word	0x08003ea7
 8003e94:	2300      	movs	r3, #0
 8003e96:	76fb      	strb	r3, [r7, #27]
 8003e98:	e0ae      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	76fb      	strb	r3, [r7, #27]
 8003e9e:	e0ab      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	76fb      	strb	r3, [r7, #27]
 8003ea4:	e0a8      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	76fb      	strb	r3, [r7, #27]
 8003eaa:	e0a5      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003eac:	2310      	movs	r3, #16
 8003eae:	76fb      	strb	r3, [r7, #27]
 8003eb0:	bf00      	nop
 8003eb2:	e0a1      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a6b      	ldr	r2, [pc, #428]	; (8004068 <UART_SetConfig+0x2f4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d120      	bne.n	8003f00 <UART_SetConfig+0x18c>
 8003ebe:	4b68      	ldr	r3, [pc, #416]	; (8004060 <UART_SetConfig+0x2ec>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d00f      	beq.n	8003eec <UART_SetConfig+0x178>
 8003ecc:	2b10      	cmp	r3, #16
 8003ece:	d802      	bhi.n	8003ed6 <UART_SetConfig+0x162>
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <UART_SetConfig+0x16c>
 8003ed4:	e010      	b.n	8003ef8 <UART_SetConfig+0x184>
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	d005      	beq.n	8003ee6 <UART_SetConfig+0x172>
 8003eda:	2b30      	cmp	r3, #48	; 0x30
 8003edc:	d009      	beq.n	8003ef2 <UART_SetConfig+0x17e>
 8003ede:	e00b      	b.n	8003ef8 <UART_SetConfig+0x184>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	76fb      	strb	r3, [r7, #27]
 8003ee4:	e088      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	76fb      	strb	r3, [r7, #27]
 8003eea:	e085      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003eec:	2304      	movs	r3, #4
 8003eee:	76fb      	strb	r3, [r7, #27]
 8003ef0:	e082      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003ef2:	2308      	movs	r3, #8
 8003ef4:	76fb      	strb	r3, [r7, #27]
 8003ef6:	e07f      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003ef8:	2310      	movs	r3, #16
 8003efa:	76fb      	strb	r3, [r7, #27]
 8003efc:	bf00      	nop
 8003efe:	e07b      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a59      	ldr	r2, [pc, #356]	; (800406c <UART_SetConfig+0x2f8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d120      	bne.n	8003f4c <UART_SetConfig+0x1d8>
 8003f0a:	4b55      	ldr	r3, [pc, #340]	; (8004060 <UART_SetConfig+0x2ec>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f14:	2b40      	cmp	r3, #64	; 0x40
 8003f16:	d00f      	beq.n	8003f38 <UART_SetConfig+0x1c4>
 8003f18:	2b40      	cmp	r3, #64	; 0x40
 8003f1a:	d802      	bhi.n	8003f22 <UART_SetConfig+0x1ae>
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <UART_SetConfig+0x1b8>
 8003f20:	e010      	b.n	8003f44 <UART_SetConfig+0x1d0>
 8003f22:	2b80      	cmp	r3, #128	; 0x80
 8003f24:	d005      	beq.n	8003f32 <UART_SetConfig+0x1be>
 8003f26:	2bc0      	cmp	r3, #192	; 0xc0
 8003f28:	d009      	beq.n	8003f3e <UART_SetConfig+0x1ca>
 8003f2a:	e00b      	b.n	8003f44 <UART_SetConfig+0x1d0>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	76fb      	strb	r3, [r7, #27]
 8003f30:	e062      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003f32:	2302      	movs	r3, #2
 8003f34:	76fb      	strb	r3, [r7, #27]
 8003f36:	e05f      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003f38:	2304      	movs	r3, #4
 8003f3a:	76fb      	strb	r3, [r7, #27]
 8003f3c:	e05c      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003f3e:	2308      	movs	r3, #8
 8003f40:	76fb      	strb	r3, [r7, #27]
 8003f42:	e059      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003f44:	2310      	movs	r3, #16
 8003f46:	76fb      	strb	r3, [r7, #27]
 8003f48:	bf00      	nop
 8003f4a:	e055      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a47      	ldr	r2, [pc, #284]	; (8004070 <UART_SetConfig+0x2fc>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d124      	bne.n	8003fa0 <UART_SetConfig+0x22c>
 8003f56:	4b42      	ldr	r3, [pc, #264]	; (8004060 <UART_SetConfig+0x2ec>)
 8003f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f64:	d012      	beq.n	8003f8c <UART_SetConfig+0x218>
 8003f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6a:	d802      	bhi.n	8003f72 <UART_SetConfig+0x1fe>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <UART_SetConfig+0x20c>
 8003f70:	e012      	b.n	8003f98 <UART_SetConfig+0x224>
 8003f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f76:	d006      	beq.n	8003f86 <UART_SetConfig+0x212>
 8003f78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f7c:	d009      	beq.n	8003f92 <UART_SetConfig+0x21e>
 8003f7e:	e00b      	b.n	8003f98 <UART_SetConfig+0x224>
 8003f80:	2300      	movs	r3, #0
 8003f82:	76fb      	strb	r3, [r7, #27]
 8003f84:	e038      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003f86:	2302      	movs	r3, #2
 8003f88:	76fb      	strb	r3, [r7, #27]
 8003f8a:	e035      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	76fb      	strb	r3, [r7, #27]
 8003f90:	e032      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003f92:	2308      	movs	r3, #8
 8003f94:	76fb      	strb	r3, [r7, #27]
 8003f96:	e02f      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003f98:	2310      	movs	r3, #16
 8003f9a:	76fb      	strb	r3, [r7, #27]
 8003f9c:	bf00      	nop
 8003f9e:	e02b      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2c      	ldr	r2, [pc, #176]	; (8004058 <UART_SetConfig+0x2e4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d124      	bne.n	8003ff4 <UART_SetConfig+0x280>
 8003faa:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <UART_SetConfig+0x2ec>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb8:	d012      	beq.n	8003fe0 <UART_SetConfig+0x26c>
 8003fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fbe:	d802      	bhi.n	8003fc6 <UART_SetConfig+0x252>
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <UART_SetConfig+0x260>
 8003fc4:	e012      	b.n	8003fec <UART_SetConfig+0x278>
 8003fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fca:	d006      	beq.n	8003fda <UART_SetConfig+0x266>
 8003fcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fd0:	d009      	beq.n	8003fe6 <UART_SetConfig+0x272>
 8003fd2:	e00b      	b.n	8003fec <UART_SetConfig+0x278>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	76fb      	strb	r3, [r7, #27]
 8003fd8:	e00e      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	76fb      	strb	r3, [r7, #27]
 8003fde:	e00b      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	76fb      	strb	r3, [r7, #27]
 8003fe4:	e008      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003fe6:	2308      	movs	r3, #8
 8003fe8:	76fb      	strb	r3, [r7, #27]
 8003fea:	e005      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003fec:	2310      	movs	r3, #16
 8003fee:	76fb      	strb	r3, [r7, #27]
 8003ff0:	bf00      	nop
 8003ff2:	e001      	b.n	8003ff8 <UART_SetConfig+0x284>
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a16      	ldr	r2, [pc, #88]	; (8004058 <UART_SetConfig+0x2e4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	f040 8087 	bne.w	8004112 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004004:	7efb      	ldrb	r3, [r7, #27]
 8004006:	2b08      	cmp	r3, #8
 8004008:	d836      	bhi.n	8004078 <UART_SetConfig+0x304>
 800400a:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <UART_SetConfig+0x29c>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	08004035 	.word	0x08004035
 8004014:	08004079 	.word	0x08004079
 8004018:	0800403d 	.word	0x0800403d
 800401c:	08004079 	.word	0x08004079
 8004020:	08004043 	.word	0x08004043
 8004024:	08004079 	.word	0x08004079
 8004028:	08004079 	.word	0x08004079
 800402c:	08004079 	.word	0x08004079
 8004030:	0800404b 	.word	0x0800404b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004034:	f7fe ff3c 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8004038:	6178      	str	r0, [r7, #20]
        break;
 800403a:	e022      	b.n	8004082 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800403c:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <UART_SetConfig+0x300>)
 800403e:	617b      	str	r3, [r7, #20]
        break;
 8004040:	e01f      	b.n	8004082 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004042:	f7fe fe9f 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 8004046:	6178      	str	r0, [r7, #20]
        break;
 8004048:	e01b      	b.n	8004082 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800404a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800404e:	617b      	str	r3, [r7, #20]
        break;
 8004050:	e017      	b.n	8004082 <UART_SetConfig+0x30e>
 8004052:	bf00      	nop
 8004054:	efff69f3 	.word	0xefff69f3
 8004058:	40008000 	.word	0x40008000
 800405c:	40013800 	.word	0x40013800
 8004060:	40021000 	.word	0x40021000
 8004064:	40004400 	.word	0x40004400
 8004068:	40004800 	.word	0x40004800
 800406c:	40004c00 	.word	0x40004c00
 8004070:	40005000 	.word	0x40005000
 8004074:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	76bb      	strb	r3, [r7, #26]
        break;
 8004080:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 80f1 	beq.w	800426c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	4413      	add	r3, r2
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	429a      	cmp	r2, r3
 8004098:	d305      	bcc.n	80040a6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d902      	bls.n	80040ac <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	76bb      	strb	r3, [r7, #26]
 80040aa:	e0df      	b.n	800426c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	4619      	mov	r1, r3
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	f04f 0400 	mov.w	r4, #0
 80040bc:	0214      	lsls	r4, r2, #8
 80040be:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80040c2:	020b      	lsls	r3, r1, #8
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6852      	ldr	r2, [r2, #4]
 80040c8:	0852      	lsrs	r2, r2, #1
 80040ca:	4611      	mov	r1, r2
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	eb13 0b01 	adds.w	fp, r3, r1
 80040d4:	eb44 0c02 	adc.w	ip, r4, r2
 80040d8:	4658      	mov	r0, fp
 80040da:	4661      	mov	r1, ip
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f04f 0400 	mov.w	r4, #0
 80040e4:	461a      	mov	r2, r3
 80040e6:	4623      	mov	r3, r4
 80040e8:	f7fc f86e 	bl	80001c8 <__aeabi_uldivmod>
 80040ec:	4603      	mov	r3, r0
 80040ee:	460c      	mov	r4, r1
 80040f0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040f8:	d308      	bcc.n	800410c <UART_SetConfig+0x398>
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004100:	d204      	bcs.n	800410c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	e0af      	b.n	800426c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	76bb      	strb	r3, [r7, #26]
 8004110:	e0ac      	b.n	800426c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800411a:	d15b      	bne.n	80041d4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800411c:	7efb      	ldrb	r3, [r7, #27]
 800411e:	2b08      	cmp	r3, #8
 8004120:	d827      	bhi.n	8004172 <UART_SetConfig+0x3fe>
 8004122:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <UART_SetConfig+0x3b4>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	0800414d 	.word	0x0800414d
 800412c:	08004155 	.word	0x08004155
 8004130:	0800415d 	.word	0x0800415d
 8004134:	08004173 	.word	0x08004173
 8004138:	08004163 	.word	0x08004163
 800413c:	08004173 	.word	0x08004173
 8004140:	08004173 	.word	0x08004173
 8004144:	08004173 	.word	0x08004173
 8004148:	0800416b 	.word	0x0800416b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800414c:	f7fe feb0 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8004150:	6178      	str	r0, [r7, #20]
        break;
 8004152:	e013      	b.n	800417c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004154:	f7fe fec2 	bl	8002edc <HAL_RCC_GetPCLK2Freq>
 8004158:	6178      	str	r0, [r7, #20]
        break;
 800415a:	e00f      	b.n	800417c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800415c:	4b49      	ldr	r3, [pc, #292]	; (8004284 <UART_SetConfig+0x510>)
 800415e:	617b      	str	r3, [r7, #20]
        break;
 8004160:	e00c      	b.n	800417c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004162:	f7fe fe0f 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 8004166:	6178      	str	r0, [r7, #20]
        break;
 8004168:	e008      	b.n	800417c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800416a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800416e:	617b      	str	r3, [r7, #20]
        break;
 8004170:	e004      	b.n	800417c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	76bb      	strb	r3, [r7, #26]
        break;
 800417a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d074      	beq.n	800426c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	005a      	lsls	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	085b      	lsrs	r3, r3, #1
 800418c:	441a      	add	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	fbb2 f3f3 	udiv	r3, r2, r3
 8004196:	b29b      	uxth	r3, r3
 8004198:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b0f      	cmp	r3, #15
 800419e:	d916      	bls.n	80041ce <UART_SetConfig+0x45a>
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a6:	d212      	bcs.n	80041ce <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f023 030f 	bic.w	r3, r3, #15
 80041b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	b29a      	uxth	r2, r3
 80041be:	89fb      	ldrh	r3, [r7, #14]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	89fa      	ldrh	r2, [r7, #14]
 80041ca:	60da      	str	r2, [r3, #12]
 80041cc:	e04e      	b.n	800426c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	76bb      	strb	r3, [r7, #26]
 80041d2:	e04b      	b.n	800426c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041d4:	7efb      	ldrb	r3, [r7, #27]
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d827      	bhi.n	800422a <UART_SetConfig+0x4b6>
 80041da:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <UART_SetConfig+0x46c>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	08004205 	.word	0x08004205
 80041e4:	0800420d 	.word	0x0800420d
 80041e8:	08004215 	.word	0x08004215
 80041ec:	0800422b 	.word	0x0800422b
 80041f0:	0800421b 	.word	0x0800421b
 80041f4:	0800422b 	.word	0x0800422b
 80041f8:	0800422b 	.word	0x0800422b
 80041fc:	0800422b 	.word	0x0800422b
 8004200:	08004223 	.word	0x08004223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004204:	f7fe fe54 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8004208:	6178      	str	r0, [r7, #20]
        break;
 800420a:	e013      	b.n	8004234 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800420c:	f7fe fe66 	bl	8002edc <HAL_RCC_GetPCLK2Freq>
 8004210:	6178      	str	r0, [r7, #20]
        break;
 8004212:	e00f      	b.n	8004234 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004214:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <UART_SetConfig+0x510>)
 8004216:	617b      	str	r3, [r7, #20]
        break;
 8004218:	e00c      	b.n	8004234 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800421a:	f7fe fdb3 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 800421e:	6178      	str	r0, [r7, #20]
        break;
 8004220:	e008      	b.n	8004234 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004226:	617b      	str	r3, [r7, #20]
        break;
 8004228:	e004      	b.n	8004234 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	76bb      	strb	r3, [r7, #26]
        break;
 8004232:	bf00      	nop
    }

    if (pclk != 0U)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d018      	beq.n	800426c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	085a      	lsrs	r2, r3, #1
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	441a      	add	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	fbb2 f3f3 	udiv	r3, r2, r3
 800424c:	b29b      	uxth	r3, r3
 800424e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	2b0f      	cmp	r3, #15
 8004254:	d908      	bls.n	8004268 <UART_SetConfig+0x4f4>
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425c:	d204      	bcs.n	8004268 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	60da      	str	r2, [r3, #12]
 8004266:	e001      	b.n	800426c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004278:	7ebb      	ldrb	r3, [r7, #26]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3720      	adds	r7, #32
 800427e:	46bd      	mov	sp, r7
 8004280:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004284:	00f42400 	.word	0x00f42400

08004288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01a      	beq.n	800439e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004386:	d10a      	bne.n	800439e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	605a      	str	r2, [r3, #4]
  }
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80043da:	f7fc fddd 	bl	8000f98 <HAL_GetTick>
 80043de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d10e      	bne.n	800440c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f82a 	bl	8004456 <UART_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e020      	b.n	800444e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b04      	cmp	r3, #4
 8004418:	d10e      	bne.n	8004438 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800441a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f814 	bl	8004456 <UART_WaitOnFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e00a      	b.n	800444e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	603b      	str	r3, [r7, #0]
 8004462:	4613      	mov	r3, r2
 8004464:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004466:	e05d      	b.n	8004524 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800446e:	d059      	beq.n	8004524 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004470:	f7fc fd92 	bl	8000f98 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	429a      	cmp	r2, r3
 800447e:	d302      	bcc.n	8004486 <UART_WaitOnFlagUntilTimeout+0x30>
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d11b      	bne.n	80044be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004494:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0201 	bic.w	r2, r2, #1
 80044a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e042      	b.n	8004544 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d02b      	beq.n	8004524 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044da:	d123      	bne.n	8004524 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044f4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0201 	bic.w	r2, r2, #1
 8004504:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2220      	movs	r2, #32
 8004516:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e00f      	b.n	8004544 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69da      	ldr	r2, [r3, #28]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	4013      	ands	r3, r2
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	429a      	cmp	r2, r3
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	429a      	cmp	r2, r3
 8004540:	d092      	beq.n	8004468 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004562:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	675a      	str	r2, [r3, #116]	; 0x74
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800458c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	661a      	str	r2, [r3, #96]	; 0x60
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d114      	bne.n	80045fc <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045e8:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045f8:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045fa:	e002      	b.n	8004602 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7fc f9b5 	bl	800096c <HAL_UART_TxCpltCallback>
}
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b084      	sub	sp, #16
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7ff fb97 	bl	8003d4c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b086      	sub	sp, #24
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004638:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800463e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464a:	2b80      	cmp	r3, #128	; 0x80
 800464c:	d109      	bne.n	8004662 <UART_DMAError+0x3c>
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b21      	cmp	r3, #33	; 0x21
 8004652:	d106      	bne.n	8004662 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2200      	movs	r2, #0
 8004658:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800465c:	6978      	ldr	r0, [r7, #20]
 800465e:	f7ff ff75 	bl	800454c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d109      	bne.n	8004684 <UART_DMAError+0x5e>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b22      	cmp	r3, #34	; 0x22
 8004674:	d106      	bne.n	8004684 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2200      	movs	r2, #0
 800467a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800467e:	6978      	ldr	r0, [r7, #20]
 8004680:	f7ff ff79 	bl	8004576 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004688:	f043 0210 	orr.w	r2, r3, #16
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004690:	6978      	ldr	r0, [r7, #20]
 8004692:	f7ff fb65 	bl	8003d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004696:	bf00      	nop
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f7ff fb4f 	bl	8003d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b082      	sub	sp, #8
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fc f93c 	bl	800096c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046f4:	bf00      	nop
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <LL_GPIO_SetPinMode>:
{
 8004710:	b480      	push	{r7}
 8004712:	b08b      	sub	sp, #44	; 0x2c
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	fa93 f3a3 	rbit	r3, r3
 800472a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8004736:	2320      	movs	r3, #32
 8004738:	e003      	b.n	8004742 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	fab3 f383 	clz	r3, r3
 8004740:	b2db      	uxtb	r3, r3
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	2103      	movs	r1, #3
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	43db      	mvns	r3, r3
 800474c:	401a      	ands	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	61fb      	str	r3, [r7, #28]
  return result;
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004764:	2320      	movs	r3, #32
 8004766:	e003      	b.n	8004770 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	fab3 f383 	clz	r3, r3
 800476e:	b2db      	uxtb	r3, r3
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	fa01 f303 	lsl.w	r3, r1, r3
 8004778:	431a      	orrs	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	601a      	str	r2, [r3, #0]
}
 800477e:	bf00      	nop
 8004780:	372c      	adds	r7, #44	; 0x2c
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <LL_GPIO_SetPinOutputType>:
{
 800478a:	b480      	push	{r7}
 800478c:	b085      	sub	sp, #20
 800478e:	af00      	add	r7, sp, #0
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	43db      	mvns	r3, r3
 800479e:	401a      	ands	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	fb01 f303 	mul.w	r3, r1, r3
 80047a8:	431a      	orrs	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	605a      	str	r2, [r3, #4]
}
 80047ae:	bf00      	nop
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <LL_GPIO_SetPinSpeed>:
{
 80047ba:	b480      	push	{r7}
 80047bc:	b08b      	sub	sp, #44	; 0x2c
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	fa93 f3a3 	rbit	r3, r3
 80047d4:	613b      	str	r3, [r7, #16]
  return result;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80047e0:	2320      	movs	r3, #32
 80047e2:	e003      	b.n	80047ec <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	fab3 f383 	clz	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	2103      	movs	r1, #3
 80047f0:	fa01 f303 	lsl.w	r3, r1, r3
 80047f4:	43db      	mvns	r3, r3
 80047f6:	401a      	ands	r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	fa93 f3a3 	rbit	r3, r3
 8004802:	61fb      	str	r3, [r7, #28]
  return result;
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800480e:	2320      	movs	r3, #32
 8004810:	e003      	b.n	800481a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	fab3 f383 	clz	r3, r3
 8004818:	b2db      	uxtb	r3, r3
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	fa01 f303 	lsl.w	r3, r1, r3
 8004822:	431a      	orrs	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	609a      	str	r2, [r3, #8]
}
 8004828:	bf00      	nop
 800482a:	372c      	adds	r7, #44	; 0x2c
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <LL_GPIO_SetPinPull>:
{
 8004834:	b480      	push	{r7}
 8004836:	b08b      	sub	sp, #44	; 0x2c
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	fa93 f3a3 	rbit	r3, r3
 800484e:	613b      	str	r3, [r7, #16]
  return result;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800485a:	2320      	movs	r3, #32
 800485c:	e003      	b.n	8004866 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	fab3 f383 	clz	r3, r3
 8004864:	b2db      	uxtb	r3, r3
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	2103      	movs	r1, #3
 800486a:	fa01 f303 	lsl.w	r3, r1, r3
 800486e:	43db      	mvns	r3, r3
 8004870:	401a      	ands	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	fa93 f3a3 	rbit	r3, r3
 800487c:	61fb      	str	r3, [r7, #28]
  return result;
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004888:	2320      	movs	r3, #32
 800488a:	e003      	b.n	8004894 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	fab3 f383 	clz	r3, r3
 8004892:	b2db      	uxtb	r3, r3
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	fa01 f303 	lsl.w	r3, r1, r3
 800489c:	431a      	orrs	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	60da      	str	r2, [r3, #12]
}
 80048a2:	bf00      	nop
 80048a4:	372c      	adds	r7, #44	; 0x2c
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <LL_GPIO_SetAFPin_0_7>:
{
 80048ae:	b480      	push	{r7}
 80048b0:	b08b      	sub	sp, #44	; 0x2c
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a1a      	ldr	r2, [r3, #32]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	fa93 f3a3 	rbit	r3, r3
 80048c8:	613b      	str	r3, [r7, #16]
  return result;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80048d4:	2320      	movs	r3, #32
 80048d6:	e003      	b.n	80048e0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	fab3 f383 	clz	r3, r3
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	210f      	movs	r1, #15
 80048e4:	fa01 f303 	lsl.w	r3, r1, r3
 80048e8:	43db      	mvns	r3, r3
 80048ea:	401a      	ands	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	fa93 f3a3 	rbit	r3, r3
 80048f6:	61fb      	str	r3, [r7, #28]
  return result;
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004902:	2320      	movs	r3, #32
 8004904:	e003      	b.n	800490e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	fab3 f383 	clz	r3, r3
 800490c:	b2db      	uxtb	r3, r3
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	fa01 f303 	lsl.w	r3, r1, r3
 8004916:	431a      	orrs	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	621a      	str	r2, [r3, #32]
}
 800491c:	bf00      	nop
 800491e:	372c      	adds	r7, #44	; 0x2c
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <LL_GPIO_SetAFPin_8_15>:
{
 8004928:	b480      	push	{r7}
 800492a:	b08b      	sub	sp, #44	; 0x2c
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	0a1b      	lsrs	r3, r3, #8
 800493c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	fa93 f3a3 	rbit	r3, r3
 8004944:	613b      	str	r3, [r7, #16]
  return result;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004950:	2320      	movs	r3, #32
 8004952:	e003      	b.n	800495c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	fab3 f383 	clz	r3, r3
 800495a:	b2db      	uxtb	r3, r3
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	210f      	movs	r1, #15
 8004960:	fa01 f303 	lsl.w	r3, r1, r3
 8004964:	43db      	mvns	r3, r3
 8004966:	401a      	ands	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	0a1b      	lsrs	r3, r3, #8
 800496c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	fa93 f3a3 	rbit	r3, r3
 8004974:	61fb      	str	r3, [r7, #28]
  return result;
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004980:	2320      	movs	r3, #32
 8004982:	e003      	b.n	800498c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	fab3 f383 	clz	r3, r3
 800498a:	b2db      	uxtb	r3, r3
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	fa01 f303 	lsl.w	r3, r1, r3
 8004994:	431a      	orrs	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	625a      	str	r2, [r3, #36]	; 0x24
}
 800499a:	bf00      	nop
 800499c:	372c      	adds	r7, #44	; 0x2c
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b088      	sub	sp, #32
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	fa93 f3a3 	rbit	r3, r3
 80049bc:	60fb      	str	r3, [r7, #12]
  return result;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <LL_GPIO_Init+0x26>
    return 32U;
 80049c8:	2320      	movs	r3, #32
 80049ca:	e003      	b.n	80049d4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	fab3 f383 	clz	r3, r3
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80049d6:	e040      	b.n	8004a5a <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	2101      	movs	r1, #1
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	fa01 f303 	lsl.w	r3, r1, r3
 80049e4:	4013      	ands	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d032      	beq.n	8004a54 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	461a      	mov	r2, r3
 80049f4:	69b9      	ldr	r1, [r7, #24]
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff fe8a 	bl	8004710 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d003      	beq.n	8004a0c <LL_GPIO_Init+0x66>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d106      	bne.n	8004a1a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	461a      	mov	r2, r3
 8004a12:	69b9      	ldr	r1, [r7, #24]
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff fed0 	bl	80047ba <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	69b9      	ldr	r1, [r7, #24]
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff ff06 	bl	8004834 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d111      	bne.n	8004a54 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	2bff      	cmp	r3, #255	; 0xff
 8004a34:	d807      	bhi.n	8004a46 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	69b9      	ldr	r1, [r7, #24]
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff ff35 	bl	80048ae <LL_GPIO_SetAFPin_0_7>
 8004a44:	e006      	b.n	8004a54 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	69b9      	ldr	r1, [r7, #24]
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff ff6a 	bl	8004928 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	3301      	adds	r3, #1
 8004a58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1b7      	bne.n	80049d8 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d003      	beq.n	8004a78 <LL_GPIO_Init+0xd2>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d107      	bne.n	8004a88 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	6819      	ldr	r1, [r3, #0]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	461a      	mov	r2, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff fe81 	bl	800478a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3720      	adds	r7, #32
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <__libc_init_array>:
 8004a94:	b570      	push	{r4, r5, r6, lr}
 8004a96:	4e0d      	ldr	r6, [pc, #52]	; (8004acc <__libc_init_array+0x38>)
 8004a98:	4c0d      	ldr	r4, [pc, #52]	; (8004ad0 <__libc_init_array+0x3c>)
 8004a9a:	1ba4      	subs	r4, r4, r6
 8004a9c:	10a4      	asrs	r4, r4, #2
 8004a9e:	2500      	movs	r5, #0
 8004aa0:	42a5      	cmp	r5, r4
 8004aa2:	d109      	bne.n	8004ab8 <__libc_init_array+0x24>
 8004aa4:	4e0b      	ldr	r6, [pc, #44]	; (8004ad4 <__libc_init_array+0x40>)
 8004aa6:	4c0c      	ldr	r4, [pc, #48]	; (8004ad8 <__libc_init_array+0x44>)
 8004aa8:	f000 f820 	bl	8004aec <_init>
 8004aac:	1ba4      	subs	r4, r4, r6
 8004aae:	10a4      	asrs	r4, r4, #2
 8004ab0:	2500      	movs	r5, #0
 8004ab2:	42a5      	cmp	r5, r4
 8004ab4:	d105      	bne.n	8004ac2 <__libc_init_array+0x2e>
 8004ab6:	bd70      	pop	{r4, r5, r6, pc}
 8004ab8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004abc:	4798      	blx	r3
 8004abe:	3501      	adds	r5, #1
 8004ac0:	e7ee      	b.n	8004aa0 <__libc_init_array+0xc>
 8004ac2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ac6:	4798      	blx	r3
 8004ac8:	3501      	adds	r5, #1
 8004aca:	e7f2      	b.n	8004ab2 <__libc_init_array+0x1e>
 8004acc:	08004b64 	.word	0x08004b64
 8004ad0:	08004b64 	.word	0x08004b64
 8004ad4:	08004b64 	.word	0x08004b64
 8004ad8:	08004b68 	.word	0x08004b68

08004adc <memset>:
 8004adc:	4402      	add	r2, r0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d100      	bne.n	8004ae6 <memset+0xa>
 8004ae4:	4770      	bx	lr
 8004ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aea:	e7f9      	b.n	8004ae0 <memset+0x4>

08004aec <_init>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	bf00      	nop
 8004af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af2:	bc08      	pop	{r3}
 8004af4:	469e      	mov	lr, r3
 8004af6:	4770      	bx	lr

08004af8 <_fini>:
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afa:	bf00      	nop
 8004afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afe:	bc08      	pop	{r3}
 8004b00:	469e      	mov	lr, r3
 8004b02:	4770      	bx	lr
