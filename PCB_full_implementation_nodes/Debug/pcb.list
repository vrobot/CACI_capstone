
pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009018  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080091e8  080091e8  000191e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093e8  080093e8  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  080093e8  080093e8  000193e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093f0  080093f0  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093f0  080093f0  000193f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093f4  080093f4  000193f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080093f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf8  200000b0  080094a8  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004ca8  080094a8  00024ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ff1  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b14  00000000  00000000  000350d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00037be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  00038e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b75  00000000  00000000  00039fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001616b  00000000  00000000  0005db5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d77b6  00000000  00000000  00073cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b47e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b8  00000000  00000000  0014b4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080091d0 	.word	0x080091d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	080091d0 	.word	0x080091d0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <arm_fir_f32>:
void arm_fir_f32(
const arm_fir_instance_f32 * S,
float32_t * pSrc,
float32_t * pDst,
uint32_t blockSize)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b09f      	sub	sp, #124	; 0x7c
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	603b      	str	r3, [r7, #0]
   float32_t *pState = S->pState;                 /* State pointer */
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	677b      	str	r3, [r7, #116]	; 0x74
   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	61fb      	str	r3, [r7, #28]
   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient buffers */
   float32_t acc0, acc1, acc2, acc3, acc4, acc5, acc6, acc7;     /* Accumulators */
   float32_t x0, x1, x2, x3, x4, x5, x6, x7, c0;  /* Temporary variables to hold state and coefficient values */
   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	61bb      	str	r3, [r7, #24]
   uint32_t i, tapCnt, blkCnt;                    /* Loop counters */

   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
   /* pStateCurnt points to the location where the new input data should be written */
   pStateCurnt = &(S->pState[(numTaps - 1u)]);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80005ee:	3b01      	subs	r3, #1
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	673b      	str	r3, [r7, #112]	; 0x70
    *    acc0 =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0]  
    *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-numTaps-2] +...+ b[0] * x[1]  
    *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-numTaps-1] +...+ b[0] * x[2]  
    *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-numTaps]   +...+ b[0] * x[3]  
    */
   blkCnt = blockSize >> 3;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	08db      	lsrs	r3, r3, #3
 80005fa:	623b      	str	r3, [r7, #32]

   /* First part of the processing with loop unrolling.  Compute 8 outputs at a time.  
   ** a second loop below computes the remaining 1 to 7 samples. */
   while(blkCnt > 0u)
 80005fc:	f000 bc8b 	b.w	8000f16 <arm_fir_f32+0x952>
   {
      /* Copy four new input samples into the state buffer */
      *pStateCurnt++ = *pSrc++;
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	1d13      	adds	r3, r2, #4
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000608:	1d19      	adds	r1, r3, #4
 800060a:	6739      	str	r1, [r7, #112]	; 0x70
 800060c:	6812      	ldr	r2, [r2, #0]
 800060e:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	1d13      	adds	r3, r2, #4
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000618:	1d19      	adds	r1, r3, #4
 800061a:	6739      	str	r1, [r7, #112]	; 0x70
 800061c:	6812      	ldr	r2, [r2, #0]
 800061e:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000620:	68ba      	ldr	r2, [r7, #8]
 8000622:	1d13      	adds	r3, r2, #4
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000628:	1d19      	adds	r1, r3, #4
 800062a:	6739      	str	r1, [r7, #112]	; 0x70
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	1d13      	adds	r3, r2, #4
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000638:	1d19      	adds	r1, r3, #4
 800063a:	6739      	str	r1, [r7, #112]	; 0x70
 800063c:	6812      	ldr	r2, [r2, #0]
 800063e:	601a      	str	r2, [r3, #0]

      /* Set all accumulators to zero */
      acc0 = 0.0f;
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	667b      	str	r3, [r7, #100]	; 0x64
      acc1 = 0.0f;
 8000646:	f04f 0300 	mov.w	r3, #0
 800064a:	663b      	str	r3, [r7, #96]	; 0x60
      acc2 = 0.0f;
 800064c:	f04f 0300 	mov.w	r3, #0
 8000650:	65fb      	str	r3, [r7, #92]	; 0x5c
      acc3 = 0.0f;
 8000652:	f04f 0300 	mov.w	r3, #0
 8000656:	65bb      	str	r3, [r7, #88]	; 0x58
      acc4 = 0.0f;
 8000658:	f04f 0300 	mov.w	r3, #0
 800065c:	657b      	str	r3, [r7, #84]	; 0x54
      acc5 = 0.0f;
 800065e:	f04f 0300 	mov.w	r3, #0
 8000662:	653b      	str	r3, [r7, #80]	; 0x50
      acc6 = 0.0f;
 8000664:	f04f 0300 	mov.w	r3, #0
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
      acc7 = 0.0f;		
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48

      /* Initialize state pointer */
      px = pState;
 8000670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000672:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* Initialize coeff pointer */
      pb = (pCoeffs);		
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	66bb      	str	r3, [r7, #104]	; 0x68
   
      /* This is separated from the others to avoid 
       * a call to __aeabi_memmove which would be slower
       */
      *pStateCurnt++ = *pSrc++;
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	1d13      	adds	r3, r2, #4
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000680:	1d19      	adds	r1, r3, #4
 8000682:	6739      	str	r1, [r7, #112]	; 0x70
 8000684:	6812      	ldr	r2, [r2, #0]
 8000686:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	1d13      	adds	r3, r2, #4
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000690:	1d19      	adds	r1, r3, #4
 8000692:	6739      	str	r1, [r7, #112]	; 0x70
 8000694:	6812      	ldr	r2, [r2, #0]
 8000696:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	1d13      	adds	r3, r2, #4
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006a0:	1d19      	adds	r1, r3, #4
 80006a2:	6739      	str	r1, [r7, #112]	; 0x70
 80006a4:	6812      	ldr	r2, [r2, #0]
 80006a6:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	1d13      	adds	r3, r2, #4
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006b0:	1d19      	adds	r1, r3, #4
 80006b2:	6739      	str	r1, [r7, #112]	; 0x70
 80006b4:	6812      	ldr	r2, [r2, #0]
 80006b6:	601a      	str	r2, [r3, #0]

      /* Read the first seven samples from the state buffer:  x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2] */
      x0 = *px++;
 80006b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006ba:	1d1a      	adds	r2, r3, #4
 80006bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	647b      	str	r3, [r7, #68]	; 0x44
      x1 = *px++;
 80006c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006c4:	1d1a      	adds	r2, r3, #4
 80006c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
      x2 = *px++;
 80006cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006ce:	1d1a      	adds	r2, r3, #4
 80006d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	63fb      	str	r3, [r7, #60]	; 0x3c
      x3 = *px++;
 80006d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006d8:	1d1a      	adds	r2, r3, #4
 80006da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
      x4 = *px++;
 80006e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006e2:	1d1a      	adds	r2, r3, #4
 80006e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	637b      	str	r3, [r7, #52]	; 0x34
      x5 = *px++;
 80006ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006ec:	1d1a      	adds	r2, r3, #4
 80006ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
      x6 = *px++;
 80006f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006f6:	1d1a      	adds	r2, r3, #4
 80006f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Loop unrolling.  Process 8 taps at a time. */
      tapCnt = numTaps >> 3u;
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	08db      	lsrs	r3, r3, #3
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Loop over the number of taps.  Unroll by a factor of 8.  
       ** Repeat until we've computed numTaps-8 coefficients. */
      while(tapCnt > 0u)
 8000704:	e352      	b.n	8000dac <arm_fir_f32+0x7e8>
      {
         /* Read the b[numTaps-1] coefficient */
         c0 = *(pb++);
 8000706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000708:	1d1a      	adds	r2, r3, #4
 800070a:	66ba      	str	r2, [r7, #104]	; 0x68
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-3] sample */
         x7 = *(px++);
 8000710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000712:	1d1a      	adds	r2, r3, #4
 8000714:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	613b      	str	r3, [r7, #16]

         /* acc0 +=  b[numTaps-1] * x[n-numTaps] */
         acc0 += x0 * c0;
 800071a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800071e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000726:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800072a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800072e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-1] */
         acc1 += x1 * c0;
 8000732:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000736:	edd7 7a05 	vldr	s15, [r7, #20]
 800073a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000746:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-2] */
         acc2 += x2 * c0;
 800074a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800074e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000756:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800075a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800075e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-3] */
         acc3 += x3 * c0;
 8000762:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000766:	edd7 7a05 	vldr	s15, [r7, #20]
 800076a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800076e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000776:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

         /* acc4 +=  b[numTaps-1] * x[n-numTaps-4] */
         acc4 += x4 * c0;
 800077a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800077e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000786:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800078a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800078e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-5] */
         acc5 += x5 * c0;
 8000792:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000796:	edd7 7a05 	vldr	s15, [r7, #20]
 800079a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800079e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80007a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007a6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-6] */
         acc6 += x6 * c0;
 80007aa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80007ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80007b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007b6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80007ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007be:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-7] */
         acc7 += x7 * c0;
 80007c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80007c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80007ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ce:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80007d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007d6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
         
         /* Read the b[numTaps-2] coefficient */
         c0 = *(pb++);
 80007da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007dc:	1d1a      	adds	r2, r3, #4
 80007de:	66ba      	str	r2, [r7, #104]	; 0x68
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-4] sample */
         x0 = *(px++);
 80007e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007e6:	1d1a      	adds	r2, r3, #4
 80007e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	647b      	str	r3, [r7, #68]	; 0x44

         /* Perform the multiply-accumulate */
         acc0 += x1 * c0;
 80007ee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80007f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80007f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007fa:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80007fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000802:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x2 * c0;   
 8000806:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800080a:	edd7 7a05 	vldr	s15, [r7, #20]
 800080e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000812:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800081a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x3 * c0;   
 800081e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000822:	edd7 7a05 	vldr	s15, [r7, #20]
 8000826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800082a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800082e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000832:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x4 * c0;   
 8000836:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800083a:	edd7 7a05 	vldr	s15, [r7, #20]
 800083e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000842:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800084a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x5 * c0;   
 800084e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000852:	edd7 7a05 	vldr	s15, [r7, #20]
 8000856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800085a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800085e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000862:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x6 * c0;   
 8000866:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800086a:	edd7 7a05 	vldr	s15, [r7, #20]
 800086e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000872:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800087a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x7 * c0;   
 800087e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000882:	edd7 7a05 	vldr	s15, [r7, #20]
 8000886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800088a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800088e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000892:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x0 * c0;   
 8000896:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800089a:	edd7 7a05 	vldr	s15, [r7, #20]
 800089e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008a2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80008a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008aa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
         
         /* Read the b[numTaps-3] coefficient */
         c0 = *(pb++);
 80008ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008b0:	1d1a      	adds	r2, r3, #4
 80008b2:	66ba      	str	r2, [r7, #104]	; 0x68
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-5] sample */
         x1 = *(px++);
 80008b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008ba:	1d1a      	adds	r2, r3, #4
 80008bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	643b      	str	r3, [r7, #64]	; 0x40

         /* Perform the multiply-accumulates */      
         acc0 += x2 * c0;
 80008c2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80008c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80008ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ce:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80008d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008d6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x3 * c0;   
 80008da:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80008de:	edd7 7a05 	vldr	s15, [r7, #20]
 80008e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80008ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ee:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x4 * c0;   
 80008f2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80008f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80008fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008fe:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000906:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x5 * c0;   
 800090a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800090e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000916:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800091a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800091e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x6 * c0;   
 8000922:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000926:	edd7 7a05 	vldr	s15, [r7, #20]
 800092a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800092e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000936:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x7 * c0;   
 800093a:	ed97 7a04 	vldr	s14, [r7, #16]
 800093e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000946:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800094a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800094e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x0 * c0;   
 8000952:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000956:	edd7 7a05 	vldr	s15, [r7, #20]
 800095a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800095e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000966:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x1 * c0;   
 800096a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800096e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000976:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800097a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800097e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000984:	1d1a      	adds	r2, r3, #4
 8000986:	66ba      	str	r2, [r7, #104]	; 0x68
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x2 = *(px++);
 800098c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800098e:	1d1a      	adds	r2, r3, #4
 8000990:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c

         /* Perform the multiply-accumulates */      
         acc0 += x3 * c0;
 8000996:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800099a:	edd7 7a05 	vldr	s15, [r7, #20]
 800099e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009a2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80009a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009aa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x4 * c0;   
 80009ae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80009b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80009b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ba:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80009be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009c2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x5 * c0;   
 80009c6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80009ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80009ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009d2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80009d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009da:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x6 * c0;   
 80009de:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80009e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80009e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ea:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80009ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009f2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x7 * c0;   
 80009f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80009fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80009fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a02:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a0a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x0 * c0;   
 8000a0e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a12:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a1a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a22:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x1 * c0;   
 8000a26:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000a2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a32:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a3a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x2 * c0;   
 8000a3e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000a42:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a4a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a52:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000a56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a58:	1d1a      	adds	r2, r3, #4
 8000a5a:	66ba      	str	r2, [r7, #104]	; 0x68
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x3 = *(px++);
 8000a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a62:	1d1a      	adds	r2, r3, #4
 8000a64:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
         /* Perform the multiply-accumulates */      
         acc0 += x4 * c0;
 8000a6a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000a6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a76:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a7e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x5 * c0;   
 8000a82:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000a86:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a8e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a96:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x6 * c0;   
 8000a9a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000a9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aae:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x7 * c0;   
 8000ab2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ab6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000abe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ac6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x0 * c0;   
 8000aca:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000ace:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ade:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x1 * c0;   
 8000ae2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000ae6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aee:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000af6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x2 * c0;   
 8000afa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000afe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b06:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b0e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x3 * c0;   
 8000b12:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000b16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b1e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b26:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b2c:	1d1a      	adds	r2, r3, #4
 8000b2e:	66ba      	str	r2, [r7, #104]	; 0x68
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x4 = *(px++);
 8000b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b36:	1d1a      	adds	r2, r3, #4
 8000b38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	637b      	str	r3, [r7, #52]	; 0x34

         /* Perform the multiply-accumulates */      
         acc0 += x5 * c0;
 8000b3e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000b42:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b4a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b52:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x6 * c0;   
 8000b56:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000b5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b62:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b6a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x7 * c0;   
 8000b6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b72:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b7a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b82:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x0 * c0;   
 8000b86:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000b8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b92:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b9a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x1 * c0;   
 8000b9e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000ba2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000baa:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x2 * c0;   
 8000bb6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000bba:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bc2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bca:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x3 * c0;   
 8000bce:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000bd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bda:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x4 * c0;   
 8000be6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000bea:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bf2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bfa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c00:	1d1a      	adds	r2, r3, #4
 8000c02:	66ba      	str	r2, [r7, #104]	; 0x68
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x5 = *(px++);
 8000c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c0a:	1d1a      	adds	r2, r3, #4
 8000c0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30

         /* Perform the multiply-accumulates */      
         acc0 += x6 * c0;
 8000c12:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000c16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c1e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c26:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x7 * c0;   
 8000c2a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c36:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c3e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x0 * c0;   
 8000c42:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000c46:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c4e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c56:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x1 * c0;   
 8000c5a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000c5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c66:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c6e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x2 * c0;   
 8000c72:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c76:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c7e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c86:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x3 * c0;   
 8000c8a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000c8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c96:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c9e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x4 * c0;   
 8000ca2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000ca6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x5 * c0;   
 8000cba:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000cbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cce:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000cd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000cd4:	1d1a      	adds	r2, r3, #4
 8000cd6:	66ba      	str	r2, [r7, #104]	; 0x68
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x6 = *(px++);
 8000cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cde:	1d1a      	adds	r2, r3, #4
 8000ce0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c

         /* Perform the multiply-accumulates */      
         acc0 += x7 * c0;
 8000ce6:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cea:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cf2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x0 * c0;   
 8000cfe:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000d02:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d0a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d12:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x1 * c0;   
 8000d16:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000d1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d22:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d2a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x2 * c0;   
 8000d2e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000d32:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d3a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d42:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x3 * c0;   
 8000d46:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000d4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d52:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d5a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x4 * c0;   
 8000d5e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000d62:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d6a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d72:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x5 * c0;   
 8000d76:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000d7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d82:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d8a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x6 * c0;   
 8000d8e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000d92:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d9a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         tapCnt--;
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	3b01      	subs	r3, #1
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
      while(tapCnt > 0u)
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f47f aca9 	bne.w	8000706 <arm_fir_f32+0x142>
      }

      /* If the filter length is not a multiple of 8, compute the remaining filter taps */
      tapCnt = numTaps % 0x8u;
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24

      while(tapCnt > 0u)
 8000dbc:	e07a      	b.n	8000eb4 <arm_fir_f32+0x8f0>
      {
         /* Read coefficients */
         c0 = *(pb++);
 8000dbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000dc0:	1d1a      	adds	r2, r3, #4
 8000dc2:	66ba      	str	r2, [r7, #104]	; 0x68
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	617b      	str	r3, [r7, #20]

         /* Fetch 1 state variable */
         x7 = *(px++);
 8000dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dca:	1d1a      	adds	r2, r3, #4
 8000dcc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	613b      	str	r3, [r7, #16]

         /* Perform the multiply-accumulates */      
         acc0 += x0 * c0;
 8000dd2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000dd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dde:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x1 * c0;   
 8000dea:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000dee:	edd7 7a05 	vldr	s15, [r7, #20]
 8000df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dfe:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x2 * c0;   
 8000e02:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e0e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e16:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x3 * c0;   
 8000e1a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000e1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e26:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x4 * c0;   
 8000e32:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000e36:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e3e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e46:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x5 * c0;   
 8000e4a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000e4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e56:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e5e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x6 * c0;   
 8000e62:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000e66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e6e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e76:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x7 * c0;   
 8000e7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e86:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Reuse the present sample states for next sample */
         x0 = x1;
 8000e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e94:	647b      	str	r3, [r7, #68]	; 0x44
         x1 = x2;
 8000e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e98:	643b      	str	r3, [r7, #64]	; 0x40
         x2 = x3;
 8000e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         x3 = x4;
 8000e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
         x4 = x5;
 8000ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
         x5 = x6;
 8000ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
         x6 = x7;
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c

         /* Decrement the loop counter */
         tapCnt--;
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
      while(tapCnt > 0u)
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d181      	bne.n	8000dbe <arm_fir_f32+0x7fa>
      }

      /* Advance the state pointer by 8 to process the next group of 8 samples */
      pState = pState + 8;
 8000eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ebc:	3320      	adds	r3, #32
 8000ebe:	677b      	str	r3, [r7, #116]	; 0x74

      /* The results in the 8 accumulators, store in the destination buffer. */
      *pDst++ = acc0;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1d1a      	adds	r2, r3, #4
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ec8:	601a      	str	r2, [r3, #0]
      *pDst++ = acc1;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	1d1a      	adds	r2, r3, #4
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ed2:	601a      	str	r2, [r3, #0]
      *pDst++ = acc2;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	1d1a      	adds	r2, r3, #4
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000edc:	601a      	str	r2, [r3, #0]
      *pDst++ = acc3;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	1d1a      	adds	r2, r3, #4
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000ee6:	601a      	str	r2, [r3, #0]
      *pDst++ = acc4;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	1d1a      	adds	r2, r3, #4
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ef0:	601a      	str	r2, [r3, #0]
      *pDst++ = acc5;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	1d1a      	adds	r2, r3, #4
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000efa:	601a      	str	r2, [r3, #0]
      *pDst++ = acc6;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	1d1a      	adds	r2, r3, #4
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f04:	601a      	str	r2, [r3, #0]
      *pDst++ = acc7;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	1d1a      	adds	r2, r3, #4
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f0e:	601a      	str	r2, [r3, #0]

      blkCnt--;
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	623b      	str	r3, [r7, #32]
   while(blkCnt > 0u)
 8000f16:	6a3b      	ldr	r3, [r7, #32]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f47f ab71 	bne.w	8000600 <arm_fir_f32+0x3c>
   }

   /* If the blockSize is not a multiple of 8, compute any remaining output samples here.  
   ** No loop unrolling is used. */
   blkCnt = blockSize % 0x8u;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	623b      	str	r3, [r7, #32]

   while(blkCnt > 0u)
 8000f26:	e033      	b.n	8000f90 <arm_fir_f32+0x9cc>
   {
      /* Copy one sample at a time into state buffer */
      *pStateCurnt++ = *pSrc++;
 8000f28:	68ba      	ldr	r2, [r7, #8]
 8000f2a:	1d13      	adds	r3, r2, #4
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f30:	1d19      	adds	r1, r3, #4
 8000f32:	6739      	str	r1, [r7, #112]	; 0x70
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	601a      	str	r2, [r3, #0]

      /* Set the accumulator to zero */
      acc0 = 0.0f;
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	667b      	str	r3, [r7, #100]	; 0x64

      /* Initialize state pointer */
      px = pState;
 8000f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f40:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* Initialize Coefficient pointer */
      pb = (pCoeffs);
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	66bb      	str	r3, [r7, #104]	; 0x68

      i = numTaps;
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Perform the multiply-accumulates */
      do
      {
         acc0 += *px++ * *pb++;
 8000f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f4c:	1d1a      	adds	r2, r3, #4
 8000f4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f50:	ed93 7a00 	vldr	s14, [r3]
 8000f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f56:	1d1a      	adds	r2, r3, #4
 8000f58:	66ba      	str	r2, [r7, #104]	; 0x68
 8000f5a:	edd3 7a00 	vldr	s15, [r3]
 8000f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f62:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         i--;
 8000f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f70:	3b01      	subs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28

      } while(i > 0u);
 8000f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1e7      	bne.n	8000f4a <arm_fir_f32+0x986>

      /* The result is store in the destination buffer. */
      *pDst++ = acc0;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	1d1a      	adds	r2, r3, #4
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000f82:	601a      	str	r2, [r3, #0]

      /* Advance state pointer by 1 for the next sample */
      pState = pState + 1;
 8000f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f86:	3304      	adds	r3, #4
 8000f88:	677b      	str	r3, [r7, #116]	; 0x74

      blkCnt--;
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
   while(blkCnt > 0u)
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1c8      	bne.n	8000f28 <arm_fir_f32+0x964>
   /* Processing is complete.  
   ** Now copy the last numTaps - 1 samples to the start of the state buffer.  
   ** This prepares the state buffer for the next function call. */

   /* Points to the start of the state buffer */
   pStateCurnt = S->pState;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	673b      	str	r3, [r7, #112]	; 0x70

   tapCnt = (numTaps - 1u) >> 2u;
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24

   /* copy data */
   while(tapCnt > 0u)
 8000fa4:	e022      	b.n	8000fec <arm_fir_f32+0xa28>
   {
      *pStateCurnt++ = *pState++;
 8000fa6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fa8:	1d13      	adds	r3, r2, #4
 8000faa:	677b      	str	r3, [r7, #116]	; 0x74
 8000fac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fae:	1d19      	adds	r1, r3, #4
 8000fb0:	6739      	str	r1, [r7, #112]	; 0x70
 8000fb2:	6812      	ldr	r2, [r2, #0]
 8000fb4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8000fb6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fb8:	1d13      	adds	r3, r2, #4
 8000fba:	677b      	str	r3, [r7, #116]	; 0x74
 8000fbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fbe:	1d19      	adds	r1, r3, #4
 8000fc0:	6739      	str	r1, [r7, #112]	; 0x70
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8000fc6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fc8:	1d13      	adds	r3, r2, #4
 8000fca:	677b      	str	r3, [r7, #116]	; 0x74
 8000fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fce:	1d19      	adds	r1, r3, #4
 8000fd0:	6739      	str	r1, [r7, #112]	; 0x70
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8000fd6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fd8:	1d13      	adds	r3, r2, #4
 8000fda:	677b      	str	r3, [r7, #116]	; 0x74
 8000fdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fde:	1d19      	adds	r1, r3, #4
 8000fe0:	6739      	str	r1, [r7, #112]	; 0x70
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
   while(tapCnt > 0u)
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1d9      	bne.n	8000fa6 <arm_fir_f32+0x9e2>
   }

   /* Calculate remaining number of copies */
   tapCnt = (numTaps - 1u) % 0x4u;
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24

   /* Copy the remaining q31_t data */
   while(tapCnt > 0u)
 8000ffc:	e00a      	b.n	8001014 <arm_fir_f32+0xa50>
   {
      *pStateCurnt++ = *pState++;
 8000ffe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001000:	1d13      	adds	r3, r2, #4
 8001002:	677b      	str	r3, [r7, #116]	; 0x74
 8001004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001006:	1d19      	adds	r1, r3, #4
 8001008:	6739      	str	r1, [r7, #112]	; 0x70
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	3b01      	subs	r3, #1
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
   while(tapCnt > 0u)
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f1      	bne.n	8000ffe <arm_fir_f32+0xa3a>
   }
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	377c      	adds	r7, #124	; 0x7c
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <arm_fir_init_f32>:
  arm_fir_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	460b      	mov	r3, r1
 8001036:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	897a      	ldrh	r2, [r7, #10]
 800103c:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and the size of state buffer is (blockSize + numTaps - 1) */
  memset(pState, 0, (numTaps + (blockSize - 1u)) * sizeof(float32_t));
 8001044:	897a      	ldrh	r2, [r7, #10]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4413      	add	r3, r2
 800104a:	3b01      	subs	r3, #1
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	461a      	mov	r2, r3
 8001050:	2100      	movs	r1, #0
 8001052:	6838      	ldr	r0, [r7, #0]
 8001054:	f007 fbe6 	bl	8008824 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	605a      	str	r2, [r3, #4]

}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800107c:	b2db      	uxtb	r3, r3
 800107e:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6858      	ldr	r0, [r3, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	8adb      	ldrh	r3, [r3, #22]
 8001088:	2200      	movs	r2, #0
 800108a:	4619      	mov	r1, r3
 800108c:	f002 fd12 	bl	8003ab4 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	1cf9      	adds	r1, r7, #3
 800109a:	2201      	movs	r2, #1
 800109c:	f004 fd53 	bl	8005b46 <HAL_SPI_Transmit>
 80010a0:	4603      	mov	r3, r0
 80010a2:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f107 010f 	add.w	r1, r7, #15
 80010b0:	2201      	movs	r2, #1
 80010b2:	f004 fe84 	bl	8005dbe <HAL_SPI_Receive>
 80010b6:	4603      	mov	r3, r0
 80010b8:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6858      	ldr	r0, [r3, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	8adb      	ldrh	r3, [r3, #22]
 80010c2:	2201      	movs	r2, #1
 80010c4:	4619      	mov	r1, r3
 80010c6:	f002 fcf5 	bl	8003ab4 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
 80010e0:	4613      	mov	r3, r2
 80010e2:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ea:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 80010ec:	78bb      	ldrb	r3, [r7, #2]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6858      	ldr	r0, [r3, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	8adb      	ldrh	r3, [r3, #22]
 8001106:	2200      	movs	r2, #0
 8001108:	4619      	mov	r1, r3
 800110a:	f002 fcd3 	bl	8003ab4 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f107 010a 	add.w	r1, r7, #10
 800111a:	2202      	movs	r2, #2
 800111c:	f004 fd13 	bl	8005b46 <HAL_SPI_Transmit>
 8001120:	4603      	mov	r3, r0
 8001122:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6858      	ldr	r0, [r3, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	8adb      	ldrh	r3, [r3, #22]
 800112c:	2201      	movs	r2, #1
 800112e:	4619      	mov	r1, r3
 8001130:	f002 fcc0 	bl	8003ab4 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	4611      	mov	r1, r2
 8001148:	461a      	mov	r2, r3
 800114a:	460b      	mov	r3, r1
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	4613      	mov	r3, r2
 8001150:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6858      	ldr	r0, [r3, #4]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	8adb      	ldrh	r3, [r3, #22]
 800115e:	2200      	movs	r2, #0
 8001160:	4619      	mov	r1, r3
 8001162:	f002 fca7 	bl	8003ab4 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f107 0117 	add.w	r1, r7, #23
 8001172:	2201      	movs	r2, #1
 8001174:	f004 fce7 	bl	8005b46 <HAL_SPI_Transmit>
 8001178:	4603      	mov	r3, r0
 800117a:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 800117c:	79bb      	ldrb	r3, [r7, #6]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d108      	bne.n	8001194 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	79fa      	ldrb	r2, [r7, #7]
 8001188:	b292      	uxth	r2, r2
 800118a:	68b9      	ldr	r1, [r7, #8]
 800118c:	4618      	mov	r0, r3
 800118e:	f005 f8c9 	bl	8006324 <HAL_SPI_Transmit_DMA>
 8001192:	e012      	b.n	80011ba <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	b29a      	uxth	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	f004 fcd0 	bl	8005b46 <HAL_SPI_Transmit>
 80011a6:	4603      	mov	r3, r0
 80011a8:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6858      	ldr	r0, [r3, #4]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	8adb      	ldrh	r3, [r3, #22]
 80011b2:	2201      	movs	r2, #1
 80011b4:	4619      	mov	r1, r3
 80011b6:	f002 fc7d 	bl	8003ab4 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	2101      	movs	r1, #1
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff7b 	bl	80010d4 <write_register>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	2b2c      	cmp	r3, #44	; 0x2c
 80011f8:	d801      	bhi.n	80011fe <set_OCP+0x16>
    imax = 45;
 80011fa:	232d      	movs	r3, #45	; 0x2d
 80011fc:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	2bf0      	cmp	r3, #240	; 0xf0
 8001202:	d901      	bls.n	8001208 <set_OCP+0x20>
    imax = 240;
 8001204:	23f0      	movs	r3, #240	; 0xf0
 8001206:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	2b81      	cmp	r3, #129	; 0x81
 800120c:	d809      	bhi.n	8001222 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 800120e:	78fb      	ldrb	r3, [r7, #3]
 8001210:	3b2d      	subs	r3, #45	; 0x2d
 8001212:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <set_OCP+0x68>)
 8001214:	fb82 1203 	smull	r1, r2, r2, r3
 8001218:	1052      	asrs	r2, r2, #1
 800121a:	17db      	asrs	r3, r3, #31
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e008      	b.n	8001234 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	331e      	adds	r3, #30
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <set_OCP+0x68>)
 8001228:	fb82 1203 	smull	r1, r2, r2, r3
 800122c:	1092      	asrs	r2, r2, #2
 800122e:	17db      	asrs	r3, r3, #31
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	210b      	movs	r1, #11
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff47 	bl	80010d4 <write_register>
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	66666667 	.word	0x66666667

08001254 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 800125c:	211d      	movs	r1, #29
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ff01 	bl	8001066 <read_register>
 8001264:	4603      	mov	r3, r0
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	b2db      	uxtb	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2200      	movs	r2, #0
 800126e:	461c      	mov	r4, r3
 8001270:	4615      	mov	r5, r2
 8001272:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8001276:	211e      	movs	r1, #30
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fef4 	bl	8001066 <read_register>
 800127e:	4603      	mov	r3, r0
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001284:	2304      	movs	r3, #4
 8001286:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2b0a      	cmp	r3, #10
 800128c:	d908      	bls.n	80012a0 <set_low_data_rate_optimization+0x4c>
 800128e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001292:	1fd1      	subs	r1, r2, #7
 8001294:	430b      	orrs	r3, r1
 8001296:	d103      	bne.n	80012a0 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001298:	7ffb      	ldrb	r3, [r7, #31]
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 80012a0:	7ffb      	ldrb	r3, [r7, #31]
 80012a2:	461a      	mov	r2, r3
 80012a4:	2126      	movs	r1, #38	; 0x26
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ff14 	bl	80010d4 <write_register>
}
 80012ac:	bf00      	nop
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bdb0      	pop	{r4, r5, r7, pc}

080012b4 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 80012bc:	2100      	movs	r1, #0
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ff7e 	bl	80011c0 <set_mode>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 80012d4:	2101      	movs	r1, #1
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff72 	bl	80011c0 <set_mode>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80012ec:	211d      	movs	r1, #29
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff feb9 	bl	8001066 <read_register>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	f023 0301 	bic.w	r3, r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	461a      	mov	r2, r3
 8001304:	211d      	movs	r1, #29
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fee4 	bl	80010d4 <write_register>
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10e      	bne.n	8001346 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	2b0f      	cmp	r3, #15
 800132c:	d901      	bls.n	8001332 <lora_set_tx_power+0x1e>
      level = 15;
 800132e:	230f      	movs	r3, #15
 8001330:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001338:	b2db      	uxtb	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	2109      	movs	r1, #9
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fec8 	bl	80010d4 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8001344:	e02e      	b.n	80013a4 <lora_set_tx_power+0x90>
    if (level > 20) {
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	2b14      	cmp	r3, #20
 800134a:	d901      	bls.n	8001350 <lora_set_tx_power+0x3c>
      level = 20;
 800134c:	2314      	movs	r3, #20
 800134e:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d801      	bhi.n	800135a <lora_set_tx_power+0x46>
      level = 2;
 8001356:	2302      	movs	r3, #2
 8001358:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	2b11      	cmp	r3, #17
 800135e:	d90c      	bls.n	800137a <lora_set_tx_power+0x66>
      level -= 3;
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	3b03      	subs	r3, #3
 8001364:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8001366:	2287      	movs	r2, #135	; 0x87
 8001368:	214d      	movs	r1, #77	; 0x4d
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff feb2 	bl	80010d4 <write_register>
      set_OCP(lora, 140);
 8001370:	218c      	movs	r1, #140	; 0x8c
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ff38 	bl	80011e8 <set_OCP>
 8001378:	e008      	b.n	800138c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800137a:	2284      	movs	r2, #132	; 0x84
 800137c:	214d      	movs	r1, #77	; 0x4d
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fea8 	bl	80010d4 <write_register>
      set_OCP(lora, 97);
 8001384:	2161      	movs	r1, #97	; 0x61
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff2e 	bl	80011e8 <set_OCP>
    level -= 2;
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	3b02      	subs	r3, #2
 8001390:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001398:	b2db      	uxtb	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	2109      	movs	r1, #9
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff fe98 	bl	80010d4 <write_register>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 80013b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013bc:	f04f 0000 	mov.w	r0, #0
 80013c0:	f04f 0100 	mov.w	r1, #0
 80013c4:	04d9      	lsls	r1, r3, #19
 80013c6:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80013ca:	04d0      	lsls	r0, r2, #19
 80013cc:	4a19      	ldr	r2, [pc, #100]	; (8001434 <lora_set_frequency+0x88>)
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	f7fe ff75 	bl	80002c0 <__aeabi_uldivmod>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80013de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	0c02      	lsrs	r2, r0, #16
 80013ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80013f0:	0c0b      	lsrs	r3, r1, #16
 80013f2:	b2d3      	uxtb	r3, r2
 80013f4:	461a      	mov	r2, r3
 80013f6:	2106      	movs	r1, #6
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f7ff fe6b 	bl	80010d4 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80013fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	0a02      	lsrs	r2, r0, #8
 800140c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001410:	0a0b      	lsrs	r3, r1, #8
 8001412:	b2d3      	uxtb	r3, r2
 8001414:	461a      	mov	r2, r3
 8001416:	2107      	movs	r1, #7
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f7ff fe5b 	bl	80010d4 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 800141e:	7c3b      	ldrb	r3, [r7, #16]
 8001420:	461a      	mov	r2, r3
 8001422:	2108      	movs	r1, #8
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f7ff fe55 	bl	80010d4 <write_register>
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	01e84800 	.word	0x01e84800

08001438 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	2b05      	cmp	r3, #5
 8001448:	d802      	bhi.n	8001450 <lora_set_spreading_factor+0x18>
    sf = 6;
 800144a:	2306      	movs	r3, #6
 800144c:	70fb      	strb	r3, [r7, #3]
 800144e:	e004      	b.n	800145a <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	2b0c      	cmp	r3, #12
 8001454:	d901      	bls.n	800145a <lora_set_spreading_factor+0x22>
    sf = 12;
 8001456:	230c      	movs	r3, #12
 8001458:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	2b06      	cmp	r3, #6
 800145e:	d10a      	bne.n	8001476 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8001460:	22c5      	movs	r2, #197	; 0xc5
 8001462:	2131      	movs	r1, #49	; 0x31
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fe35 	bl	80010d4 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 800146a:	220c      	movs	r2, #12
 800146c:	2137      	movs	r1, #55	; 0x37
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fe30 	bl	80010d4 <write_register>
 8001474:	e009      	b.n	800148a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8001476:	22c3      	movs	r2, #195	; 0xc3
 8001478:	2131      	movs	r1, #49	; 0x31
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fe2a 	bl	80010d4 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8001480:	220a      	movs	r2, #10
 8001482:	2137      	movs	r1, #55	; 0x37
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fe25 	bl	80010d4 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800148a:	211e      	movs	r1, #30
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fdea 	bl	8001066 <read_register>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]
  mc2 |= sf << 4;
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	b25a      	sxtb	r2, r3
 800149c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	461a      	mov	r2, r3
 80014aa:	211e      	movs	r1, #30
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fe11 	bl	80010d4 <write_register>

  set_low_data_rate_optimization(lora);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fece 	bl	8001254 <set_low_data_rate_optimization>
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	2120      	movs	r1, #32
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fdfb 	bl	80010d4 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	2121      	movs	r1, #33	; 0x21
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fdf1 	bl	80010d4 <write_register>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <lora_is_transmitting>:

  return read_register(lora, REG_VERSION);
}

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8001502:	2101      	movs	r1, #1
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fdae 	bl	8001066 <read_register>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b03      	cmp	r3, #3
 8001516:	d101      	bne.n	800151c <lora_is_transmitting+0x22>
 8001518:	2305      	movs	r3, #5
 800151a:	e000      	b.n	800151e <lora_is_transmitting+0x24>
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	4611      	mov	r1, r2
 8001532:	461a      	mov	r2, r3
 8001534:	460b      	mov	r3, r1
 8001536:	71fb      	strb	r3, [r7, #7]
 8001538:	4613      	mov	r3, r2
 800153a:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f7ff ffdc 	bl	80014fa <lora_is_transmitting>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8001548:	2305      	movs	r3, #5
 800154a:	e02a      	b.n	80015a2 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 800154c:	2101      	movs	r1, #1
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f7ff fe36 	bl	80011c0 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 f83a 	bl	80015ce <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	7d1b      	ldrb	r3, [r3, #20]
 800155e:	461a      	mov	r2, r3
 8001560:	210d      	movs	r1, #13
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff fdb6 	bl	80010d4 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	7d1b      	ldrb	r3, [r3, #20]
 800156c:	461a      	mov	r2, r3
 800156e:	210e      	movs	r1, #14
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f7ff fdaf 	bl	80010d4 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	461a      	mov	r2, r3
 800157a:	2122      	movs	r1, #34	; 0x22
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f7ff fda9 	bl	80010d4 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8001582:	79bb      	ldrb	r3, [r7, #6]
 8001584:	79fa      	ldrb	r2, [r7, #7]
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7ff fdd7 	bl	800113c <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <lora_send_packet_base+0x72>
    return LORA_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	e004      	b.n	80015a2 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8001598:	2103      	movs	r1, #3
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f7ff fe10 	bl	80011c0 <set_mode>
  return LORA_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	4613      	mov	r3, r2
 80015b6:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 80015b8:	79fa      	ldrb	r2, [r7, #7]
 80015ba:	2302      	movs	r3, #2
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f7ff ffb1 	bl	8001526 <lora_send_packet_base>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 80015d6:	2208      	movs	r2, #8
 80015d8:	2112      	movs	r1, #18
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fd7a 	bl	80010d4 <write_register>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	807b      	strh	r3, [r7, #2]

  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	887a      	ldrh	r2, [r7, #2]
 8001606:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8001608:	6a3a      	ldr	r2, [r7, #32]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2201      	movs	r2, #1
 8001612:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001626:	609a      	str	r2, [r3, #8]
    return LORA_ERROR;
  }
#endif

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fe43 	bl	80012b4 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f7ff fe40 	bl	80012b4 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8001634:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f7ff feb7 	bl	80013ac <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 800163e:	2107      	movs	r1, #7
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7ff fef9 	bl	8001438 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8001646:	210a      	movs	r1, #10
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff ff39 	bl	80014c0 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f7ff fe48 	bl	80012e4 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8001654:	210c      	movs	r1, #12
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f7ff fd05 	bl	8001066 <read_register>
 800165c:	4603      	mov	r3, r0
 800165e:	75fb      	strb	r3, [r7, #23]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	f043 0303 	orr.w	r3, r3, #3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	210c      	movs	r1, #12
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f7ff fd31 	bl	80010d4 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8001672:	2204      	movs	r2, #4
 8001674:	2126      	movs	r1, #38	; 0x26
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f7ff fd2c 	bl	80010d4 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 800167c:	2111      	movs	r1, #17
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7ff fe48 	bl	8001314 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff fe21 	bl	80012cc <lora_mode_standby>

  return LORA_OK;
 800168a:	2300      	movs	r3, #0

}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t timerVal;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	// uint32_t test = TIM2->CNT;
	// HAL_UART_Transmit(&huart1, (uint8_t*)&test, 4, 70);
	__HAL_TIM_SET_COUNTER(htim,0);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a33      	ldr	r2, [pc, #204]	; (8001788 <HAL_UART_RxCpltCallback+0xd8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d15e      	bne.n	800177e <HAL_UART_RxCpltCallback+0xce>
		char *string;
		memset(buffStr, 0, 2048);
 80016c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016c4:	2100      	movs	r1, #0
 80016c6:	4831      	ldr	r0, [pc, #196]	; (800178c <HAL_UART_RxCpltCallback+0xdc>)
 80016c8:	f007 f8ac 	bl	8008824 <memset>
		sprintf(buffStr, "%s", GPS_buffer);
 80016cc:	4a30      	ldr	r2, [pc, #192]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 80016ce:	4931      	ldr	r1, [pc, #196]	; (8001794 <HAL_UART_RxCpltCallback+0xe4>)
 80016d0:	482e      	ldr	r0, [pc, #184]	; (800178c <HAL_UART_RxCpltCallback+0xdc>)
 80016d2:	f007 f8af 	bl	8008834 <siprintf>
		string = strdup(buffStr);
 80016d6:	482d      	ldr	r0, [pc, #180]	; (800178c <HAL_UART_RxCpltCallback+0xdc>)
 80016d8:	f007 f8da 	bl	8008890 <strdup>
 80016dc:	4603      	mov	r3, r0
 80016de:	60fb      	str	r3, [r7, #12]

		char* token;
		while ((token = strsep(&string, "\n")) != NULL) {
 80016e0:	e03d      	b.n	800175e <HAL_UART_RxCpltCallback+0xae>
			memset(nmeaSnt, 0, 80);
 80016e2:	2250      	movs	r2, #80	; 0x50
 80016e4:	2100      	movs	r1, #0
 80016e6:	482c      	ldr	r0, [pc, #176]	; (8001798 <HAL_UART_RxCpltCallback+0xe8>)
 80016e8:	f007 f89c 	bl	8008824 <memset>
			sprintf(nmeaSnt, "%s\n\r", token);
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	492b      	ldr	r1, [pc, #172]	; (800179c <HAL_UART_RxCpltCallback+0xec>)
 80016f0:	4829      	ldr	r0, [pc, #164]	; (8001798 <HAL_UART_RxCpltCallback+0xe8>)
 80016f2:	f007 f89f 	bl	8008834 <siprintf>
			if ((strstr(nmeaSnt, "$GPGLL") != 0) && strlen(nmeaSnt) > 48 && strlen(nmeaSnt) < 65) {
 80016f6:	492a      	ldr	r1, [pc, #168]	; (80017a0 <HAL_UART_RxCpltCallback+0xf0>)
 80016f8:	4827      	ldr	r0, [pc, #156]	; (8001798 <HAL_UART_RxCpltCallback+0xe8>)
 80016fa:	f007 f8eb 	bl	80088d4 <strstr>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d02c      	beq.n	800175e <HAL_UART_RxCpltCallback+0xae>
 8001704:	4824      	ldr	r0, [pc, #144]	; (8001798 <HAL_UART_RxCpltCallback+0xe8>)
 8001706:	f7fe fd83 	bl	8000210 <strlen>
 800170a:	4603      	mov	r3, r0
 800170c:	2b30      	cmp	r3, #48	; 0x30
 800170e:	d926      	bls.n	800175e <HAL_UART_RxCpltCallback+0xae>
 8001710:	4821      	ldr	r0, [pc, #132]	; (8001798 <HAL_UART_RxCpltCallback+0xe8>)
 8001712:	f7fe fd7d 	bl	8000210 <strlen>
 8001716:	4603      	mov	r3, r0
 8001718:	2b40      	cmp	r3, #64	; 0x40
 800171a:	d820      	bhi.n	800175e <HAL_UART_RxCpltCallback+0xae>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	2110      	movs	r1, #16
 8001720:	4820      	ldr	r0, [pc, #128]	; (80017a4 <HAL_UART_RxCpltCallback+0xf4>)
 8001722:	f002 f9c7 	bl	8003ab4 <HAL_GPIO_WritePin>
				//Raw Data
				char* GPSidx = strchr(nmeaSnt, '\n');
 8001726:	210a      	movs	r1, #10
 8001728:	481b      	ldr	r0, [pc, #108]	; (8001798 <HAL_UART_RxCpltCallback+0xe8>)
 800172a:	f007 f8a3 	bl	8008874 <strchr>
 800172e:	6138      	str	r0, [r7, #16]
				if (GPSidx){
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d004      	beq.n	8001740 <HAL_UART_RxCpltCallback+0x90>
					GPSidxint = GPSidx-nmeaSnt;
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <HAL_UART_RxCpltCallback+0xe8>)
 800173a:	1a9b      	subs	r3, r3, r2
 800173c:	4a1a      	ldr	r2, [pc, #104]	; (80017a8 <HAL_UART_RxCpltCallback+0xf8>)
 800173e:	6013      	str	r3, [r2, #0]
				}
				memset(GPS_latest_data, 0, 65);
 8001740:	2241      	movs	r2, #65	; 0x41
 8001742:	2100      	movs	r1, #0
 8001744:	4819      	ldr	r0, [pc, #100]	; (80017ac <HAL_UART_RxCpltCallback+0xfc>)
 8001746:	f007 f86d 	bl	8008824 <memset>
				if(GPSidx)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <HAL_UART_RxCpltCallback+0xae>
				memcpy(GPS_latest_data, nmeaSnt, GPSidxint);
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_UART_RxCpltCallback+0xf8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4910      	ldr	r1, [pc, #64]	; (8001798 <HAL_UART_RxCpltCallback+0xe8>)
 8001758:	4814      	ldr	r0, [pc, #80]	; (80017ac <HAL_UART_RxCpltCallback+0xfc>)
 800175a:	f007 f855 	bl	8008808 <memcpy>
		while ((token = strsep(&string, "\n")) != NULL) {
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	4913      	ldr	r1, [pc, #76]	; (80017b0 <HAL_UART_RxCpltCallback+0x100>)
 8001764:	4618      	mov	r0, r3
 8001766:	f007 f8b0 	bl	80088ca <strsep>
 800176a:	6178      	str	r0, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1b7      	bne.n	80016e2 <HAL_UART_RxCpltCallback+0x32>
				// HAL_UART_Transmit(&huart1, (uint8_t*)GPS_latest_data, strlen(GPS_latest_data), 70);
			}
		}
		HAL_UART_Receive_DMA(&huart2, GPS_buffer, 2048);
 8001772:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001776:	4906      	ldr	r1, [pc, #24]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 8001778:	4803      	ldr	r0, [pc, #12]	; (8001788 <HAL_UART_RxCpltCallback+0xd8>)
 800177a:	f005 fefc 	bl	8007576 <HAL_UART_Receive_DMA>
	}
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000298 	.word	0x20000298
 800178c:	20003b74 	.word	0x20003b74
 8001790:	20003374 	.word	0x20003374
 8001794:	080091e8 	.word	0x080091e8
 8001798:	20004374 	.word	0x20004374
 800179c:	080091ec 	.word	0x080091ec
 80017a0:	080091f4 	.word	0x080091f4
 80017a4:	40021400 	.word	0x40021400
 80017a8:	20004c84 	.word	0x20004c84
 80017ac:	200043c4 	.word	0x200043c4
 80017b0:	080091fc 	.word	0x080091fc
 80017b4:	00000000 	.word	0x00000000

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  _running = false;
 80017be:	4b56      	ldr	r3, [pc, #344]	; (8001918 <main+0x160>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
  head_mov = 0;
 80017c4:	4b55      	ldr	r3, [pc, #340]	; (800191c <main+0x164>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
  tail_mov = 1;
 80017ca:	4b55      	ldr	r3, [pc, #340]	; (8001920 <main+0x168>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
  head_full = 0;
 80017d0:	4b54      	ldr	r3, [pc, #336]	; (8001924 <main+0x16c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
  tail_full = 1;
 80017d6:	4b54      	ldr	r3, [pc, #336]	; (8001928 <main+0x170>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]
  moving_sum = 0;
 80017dc:	4b53      	ldr	r3, [pc, #332]	; (800192c <main+0x174>)
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
  moving_avg = 0;
 80017e4:	4b52      	ldr	r3, [pc, #328]	; (8001930 <main+0x178>)
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
  moving_sum_left = 0;
 80017ec:	4951      	ldr	r1, [pc, #324]	; (8001934 <main+0x17c>)
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9c1 2300 	strd	r2, r3, [r1]
  moving_avg_left = 0;
 80017fa:	4b4f      	ldr	r3, [pc, #316]	; (8001938 <main+0x180>)
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
  moving_sum_right = 0;
 8001802:	494e      	ldr	r1, [pc, #312]	; (800193c <main+0x184>)
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9c1 2300 	strd	r2, r3, [r1]
  moving_avg_right = 0;
 8001810:	4b4b      	ldr	r3, [pc, #300]	; (8001940 <main+0x188>)
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
  counter = 0;
 8001818:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <main+0x18c>)
 800181a:	2200      	movs	r2, #0
 800181c:	801a      	strh	r2, [r3, #0]
  done = 0;
 800181e:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <main+0x190>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
  memset(circular_buf_mov, 0, MOVING_AVG_LEN*sizeof(int16_t));
 8001824:	220a      	movs	r2, #10
 8001826:	2100      	movs	r1, #0
 8001828:	4848      	ldr	r0, [pc, #288]	; (800194c <main+0x194>)
 800182a:	f006 fffb 	bl	8008824 <memset>
  memset(circular_buf_mov_right, 0, MOVING_AVG_LEN*sizeof(int16_t));
 800182e:	220a      	movs	r2, #10
 8001830:	2100      	movs	r1, #0
 8001832:	4847      	ldr	r0, [pc, #284]	; (8001950 <main+0x198>)
 8001834:	f006 fff6 	bl	8008824 <memset>
  memset(circular_buf_full, 0, SEND_LEN*sizeof(int16_t));
 8001838:	f241 32ec 	movw	r2, #5100	; 0x13ec
 800183c:	2100      	movs	r1, #0
 800183e:	4845      	ldr	r0, [pc, #276]	; (8001954 <main+0x19c>)
 8001840:	f006 fff0 	bl	8008824 <memset>
  memset(_sampleBuffer, 0, MIC_SAMPLES_PER_PACKET*2*sizeof(int32_t));
 8001844:	f44f 52dc 	mov.w	r2, #7040	; 0x1b80
 8001848:	2100      	movs	r1, #0
 800184a:	4843      	ldr	r0, [pc, #268]	; (8001958 <main+0x1a0>)
 800184c:	f006 ffea 	bl	8008824 <memset>
  arm_fir_init_f32(&S, FILTER_LEN, (float *) coeffs, buffer, blockSize);
 8001850:	4b42      	ldr	r3, [pc, #264]	; (800195c <main+0x1a4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	4b42      	ldr	r3, [pc, #264]	; (8001960 <main+0x1a8>)
 8001858:	4a42      	ldr	r2, [pc, #264]	; (8001964 <main+0x1ac>)
 800185a:	2165      	movs	r1, #101	; 0x65
 800185c:	4842      	ldr	r0, [pc, #264]	; (8001968 <main+0x1b0>)
 800185e:	f7ff fbe3 	bl	8001028 <arm_fir_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001862:	f001 f9e9 	bl	8002c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001866:	f000 f897 	bl	8001998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186a:	f000 fa6d 	bl	8001d48 <MX_GPIO_Init>
  MX_SPI1_Init();
 800186e:	f000 f951 	bl	8001b14 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001872:	f000 f985 	bl	8001b80 <MX_TIM2_Init>
  MX_DMA_Init();
 8001876:	f000 fa29 	bl	8001ccc <MX_DMA_Init>
  MX_SAI1_Init();
 800187a:	f000 f901 	bl	8001a80 <MX_SAI1_Init>
  MX_USART2_UART_Init();
 800187e:	f000 f9fb 	bl	8001c78 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001882:	f000 f9cf 	bl	8001c24 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001886:	2108      	movs	r1, #8
 8001888:	4838      	ldr	r0, [pc, #224]	; (800196c <main+0x1b4>)
 800188a:	f005 f821 	bl	80068d0 <HAL_TIM_IC_Start_IT>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 800188e:	2201      	movs	r2, #1
 8001890:	2110      	movs	r1, #16
 8001892:	4837      	ldr	r0, [pc, #220]	; (8001970 <main+0x1b8>)
 8001894:	f002 f90e 	bl	8003ab4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 8001898:	2201      	movs	r2, #1
 800189a:	2108      	movs	r1, #8
 800189c:	4834      	ldr	r0, [pc, #208]	; (8001970 <main+0x1b8>)
 800189e:	f002 f909 	bl	8003ab4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2120      	movs	r1, #32
 80018a6:	4832      	ldr	r0, [pc, #200]	; (8001970 <main+0x1b8>)
 80018a8:	f002 f904 	bl	8003ab4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	2120      	movs	r1, #32
 80018b0:	4830      	ldr	r0, [pc, #192]	; (8001974 <main+0x1bc>)
 80018b2:	f002 f8ff 	bl	8003ab4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018bc:	482e      	ldr	r0, [pc, #184]	; (8001978 <main+0x1c0>)
 80018be:	f002 f8f9 	bl	8003ab4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80018c2:	2064      	movs	r0, #100	; 0x64
 80018c4:	f001 fa2a 	bl	8002d1c <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ce:	482a      	ldr	r0, [pc, #168]	; (8001978 <main+0x1c0>)
 80018d0:	f002 f8f0 	bl	8003ab4 <HAL_GPIO_WritePin>
  HAL_UART_Receive_DMA(&huart2, GPS_buffer, 2048);
 80018d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018d8:	4928      	ldr	r1, [pc, #160]	; (800197c <main+0x1c4>)
 80018da:	4829      	ldr	r0, [pc, #164]	; (8001980 <main+0x1c8>)
 80018dc:	f005 fe4b 	bl	8007576 <HAL_UART_Receive_DMA>

#if LORA_TRANSMIT
  uint8_t res = lora_init(&lora, &hspi1, NSS_GPIO_Port, NSS_Pin, LORA_BASE_FREQUENCY_US);
 80018e0:	a30b      	add	r3, pc, #44	; (adr r3, 8001910 <main+0x158>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	e9cd 2300 	strd	r2, r3, [sp]
 80018ea:	2310      	movs	r3, #16
 80018ec:	4a25      	ldr	r2, [pc, #148]	; (8001984 <main+0x1cc>)
 80018ee:	4926      	ldr	r1, [pc, #152]	; (8001988 <main+0x1d0>)
 80018f0:	4826      	ldr	r0, [pc, #152]	; (800198c <main+0x1d4>)
 80018f2:	f7ff fe79 	bl	80015e8 <lora_init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  if (res != LORA_OK) {
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <main+0x156>
	  HAL_UART_Transmit(&huart1, iterfacing_failed, sizeof(iterfacing_failed), 1000);
 8001900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001904:	2213      	movs	r2, #19
 8001906:	4922      	ldr	r1, [pc, #136]	; (8001990 <main+0x1d8>)
 8001908:	4822      	ldr	r0, [pc, #136]	; (8001994 <main+0x1dc>)
 800190a:	f005 fda2 	bl	8007452 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800190e:	e7fe      	b.n	800190e <main+0x156>
 8001910:	3689cac0 	.word	0x3689cac0
 8001914:	00000000 	.word	0x00000000
 8001918:	20003354 	.word	0x20003354
 800191c:	20001f34 	.word	0x20001f34
 8001920:	20001f38 	.word	0x20001f38
 8001924:	20003328 	.word	0x20003328
 8001928:	2000332c 	.word	0x2000332c
 800192c:	20003330 	.word	0x20003330
 8001930:	20003334 	.word	0x20003334
 8001934:	20003338 	.word	0x20003338
 8001938:	20003340 	.word	0x20003340
 800193c:	20003348 	.word	0x20003348
 8001940:	20003350 	.word	0x20003350
 8001944:	20003356 	.word	0x20003356
 8001948:	20003358 	.word	0x20003358
 800194c:	20001f1c 	.word	0x20001f1c
 8001950:	20001f28 	.word	0x20001f28
 8001954:	20001f3c 	.word	0x20001f3c
 8001958:	2000039c 	.word	0x2000039c
 800195c:	2000003c 	.word	0x2000003c
 8001960:	20004414 	.word	0x20004414
 8001964:	08009200 	.word	0x08009200
 8001968:	20004408 	.word	0x20004408
 800196c:	2000020c 	.word	0x2000020c
 8001970:	40021400 	.word	0x40021400
 8001974:	40021800 	.word	0x40021800
 8001978:	40020c00 	.word	0x40020c00
 800197c:	20003374 	.word	0x20003374
 8001980:	20000298 	.word	0x20000298
 8001984:	40020000 	.word	0x40020000
 8001988:	200001b4 	.word	0x200001b4
 800198c:	2000335c 	.word	0x2000335c
 8001990:	20000010 	.word	0x20000010
 8001994:	20000254 	.word	0x20000254

08001998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b094      	sub	sp, #80	; 0x50
 800199c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	2234      	movs	r2, #52	; 0x34
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f006 ff3c 	bl	8008824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <SystemClock_Config+0xe0>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	4a2c      	ldr	r2, [pc, #176]	; (8001a78 <SystemClock_Config+0xe0>)
 80019c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ca:	6413      	str	r3, [r2, #64]	; 0x40
 80019cc:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <SystemClock_Config+0xe0>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d8:	2300      	movs	r3, #0
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	4b27      	ldr	r3, [pc, #156]	; (8001a7c <SystemClock_Config+0xe4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <SystemClock_Config+0xe4>)
 80019e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <SystemClock_Config+0xe4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019f4:	2302      	movs	r3, #2
 80019f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019f8:	2301      	movs	r3, #1
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019fc:	2310      	movs	r3, #16
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a00:	2302      	movs	r3, #2
 8001a02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a04:	2300      	movs	r3, #0
 8001a06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a08:	2310      	movs	r3, #16
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001a0c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001a10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a12:	2304      	movs	r3, #4
 8001a14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a16:	2302      	movs	r3, #2
 8001a18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	4618      	mov	r0, r3
 8001a24:	f003 f900 	bl	8004c28 <HAL_RCC_OscConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a2e:	f000 fdb3 	bl	8002598 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a32:	f002 f873 	bl	8003b1c <HAL_PWREx_EnableOverDrive>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001a3c:	f000 fdac 	bl	8002598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a40:	230f      	movs	r3, #15
 8001a42:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8001a44:	2303      	movs	r3, #3
 8001a46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a56:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a58:	f107 0308 	add.w	r3, r7, #8
 8001a5c:	2105      	movs	r1, #5
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f002 f8ac 	bl	8003bbc <HAL_RCC_ClockConfig>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001a6a:	f000 fd95 	bl	8002598 <Error_Handler>
  }
}
 8001a6e:	bf00      	nop
 8001a70:	3750      	adds	r7, #80	; 0x50
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40007000 	.word	0x40007000

08001a80 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001a84:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <MX_SAI1_Init+0x84>)
 8001a86:	4a20      	ldr	r2, [pc, #128]	; (8001b08 <MX_SAI1_Init+0x88>)
 8001a88:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <MX_SAI1_Init+0x84>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001a90:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <MX_SAI1_Init+0x84>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_SAI1_Init+0x84>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <MX_SAI1_Init+0x84>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001aa2:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <MX_SAI1_Init+0x84>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <MX_SAI1_Init+0x84>)
 8001aaa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001aae:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <MX_SAI1_Init+0x84>)
 8001ab2:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001ab6:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MX_SAI1_Init+0x84>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <MX_SAI1_Init+0x84>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_SAI1_Init+0x84>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001aca:	2302      	movs	r3, #2
 8001acc:	2202      	movs	r2, #2
 8001ace:	2100      	movs	r1, #0
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <MX_SAI1_Init+0x84>)
 8001ad2:	f003 fb47 	bl	8005164 <HAL_SAI_InitProtocol>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8001adc:	f000 fd5c 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  if ((HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*) _sampleBuffer, MIC_SAMPLES_PER_PACKET * 2)) == HAL_OK) {
 8001ae0:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001ae4:	4909      	ldr	r1, [pc, #36]	; (8001b0c <MX_SAI1_Init+0x8c>)
 8001ae6:	4807      	ldr	r0, [pc, #28]	; (8001b04 <MX_SAI1_Init+0x84>)
 8001ae8:	f003 fc98 	bl	800541c <HAL_SAI_Receive_DMA>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <MX_SAI1_Init+0x80>
	  HAL_Delay(1000);
 8001af2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001af6:	f001 f911 	bl	8002d1c <HAL_Delay>
	  _running = true;
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <MX_SAI1_Init+0x90>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END SAI1_Init 2 */

}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	200000cc 	.word	0x200000cc
 8001b08:	40015824 	.word	0x40015824
 8001b0c:	2000039c 	.word	0x2000039c
 8001b10:	20003354 	.word	0x20003354

08001b14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b1a:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <MX_SPI1_Init+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b48:	2238      	movs	r2, #56	; 0x38
 8001b4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b60:	220a      	movs	r2, #10
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b66:	f003 ff65 	bl	8005a34 <HAL_SPI_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b70:	f000 fd12 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200001b4 	.word	0x200001b4
 8001b7c:	40013000 	.word	0x40013000

08001b80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b86:	f107 0310 	add.w	r3, r7, #16
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b90:	463b      	mov	r3, r7
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <MX_TIM2_Init+0xa0>)
 8001b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ba2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <MX_TIM2_Init+0xa0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001baa:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <MX_TIM2_Init+0xa0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <MX_TIM2_Init+0xa0>)
 8001bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb8:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <MX_TIM2_Init+0xa0>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <MX_TIM2_Init+0xa0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001bc4:	4816      	ldr	r0, [pc, #88]	; (8001c20 <MX_TIM2_Init+0xa0>)
 8001bc6:	f004 fe33 	bl	8006830 <HAL_TIM_IC_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bd0:	f000 fce2 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	4619      	mov	r1, r3
 8001be2:	480f      	ldr	r0, [pc, #60]	; (8001c20 <MX_TIM2_Init+0xa0>)
 8001be4:	f005 fb58 	bl	8007298 <HAL_TIMEx_MasterConfigSynchronization>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bee:	f000 fcd3 	bl	8002598 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001c02:	463b      	mov	r3, r7
 8001c04:	2208      	movs	r2, #8
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_TIM2_Init+0xa0>)
 8001c0a:	f005 f891 	bl	8006d30 <HAL_TIM_IC_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001c14:	f000 fcc0 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	2000020c 	.word	0x2000020c

08001c24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <MX_USART1_UART_Init+0x50>)
 8001c2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c5a:	4805      	ldr	r0, [pc, #20]	; (8001c70 <MX_USART1_UART_Init+0x4c>)
 8001c5c:	f005 fbac 	bl	80073b8 <HAL_UART_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c66:	f000 fc97 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000254 	.word	0x20000254
 8001c74:	40011000 	.word	0x40011000

08001c78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <MX_USART2_UART_Init+0x50>)
 8001c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001cb0:	f005 fb82 	bl	80073b8 <HAL_UART_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cba:	f000 fc6d 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000298 	.word	0x20000298
 8001cc8:	40004400 	.word	0x40004400

08001ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <MX_DMA_Init+0x78>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a1a      	ldr	r2, [pc, #104]	; (8001d44 <MX_DMA_Init+0x78>)
 8001cdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <MX_DMA_Init+0x78>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <MX_DMA_Init+0x78>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <MX_DMA_Init+0x78>)
 8001cf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_DMA_Init+0x78>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2010      	movs	r0, #16
 8001d10:	f001 f903 	bl	8002f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d14:	2010      	movs	r0, #16
 8001d16:	f001 f91c 	bl	8002f52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	203c      	movs	r0, #60	; 0x3c
 8001d20:	f001 f8fb 	bl	8002f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001d24:	203c      	movs	r0, #60	; 0x3c
 8001d26:	f001 f914 	bl	8002f52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2046      	movs	r0, #70	; 0x46
 8001d30:	f001 f8f3 	bl	8002f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001d34:	2046      	movs	r0, #70	; 0x46
 8001d36:	f001 f90c 	bl	8002f52 <HAL_NVIC_EnableIRQ>

}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800

08001d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08c      	sub	sp, #48	; 0x30
 8001d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4e:	f107 031c 	add.w	r3, r7, #28
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	4b59      	ldr	r3, [pc, #356]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a58      	ldr	r2, [pc, #352]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001d68:	f043 0310 	orr.w	r3, r3, #16
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b56      	ldr	r3, [pc, #344]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	4b52      	ldr	r3, [pc, #328]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a51      	ldr	r2, [pc, #324]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b4f      	ldr	r3, [pc, #316]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	4b4b      	ldr	r3, [pc, #300]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a4a      	ldr	r2, [pc, #296]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001da0:	f043 0320 	orr.w	r3, r3, #32
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b48      	ldr	r3, [pc, #288]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a43      	ldr	r2, [pc, #268]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a3c      	ldr	r2, [pc, #240]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b3a      	ldr	r3, [pc, #232]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a35      	ldr	r2, [pc, #212]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001df4:	f043 0308 	orr.w	r3, r3, #8
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a2e      	ldr	r2, [pc, #184]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b2c      	ldr	r3, [pc, #176]	; (8001ec8 <MX_GPIO_Init+0x180>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2138      	movs	r1, #56	; 0x38
 8001e26:	4829      	ldr	r0, [pc, #164]	; (8001ecc <MX_GPIO_Init+0x184>)
 8001e28:	f001 fe44 	bl	8003ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2110      	movs	r1, #16
 8001e30:	4827      	ldr	r0, [pc, #156]	; (8001ed0 <MX_GPIO_Init+0x188>)
 8001e32:	f001 fe3f 	bl	8003ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e3c:	4825      	ldr	r0, [pc, #148]	; (8001ed4 <MX_GPIO_Init+0x18c>)
 8001e3e:	f001 fe39 	bl	8003ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2120      	movs	r1, #32
 8001e46:	4824      	ldr	r0, [pc, #144]	; (8001ed8 <MX_GPIO_Init+0x190>)
 8001e48:	f001 fe34 	bl	8003ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF3 PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e4c:	2338      	movs	r3, #56	; 0x38
 8001e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e50:	2301      	movs	r3, #1
 8001e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	481a      	ldr	r0, [pc, #104]	; (8001ecc <MX_GPIO_Init+0x184>)
 8001e64:	f001 fc92 	bl	800378c <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8001e68:	2310      	movs	r3, #16
 8001e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001e78:	f107 031c 	add.w	r3, r7, #28
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4814      	ldr	r0, [pc, #80]	; (8001ed0 <MX_GPIO_Init+0x188>)
 8001e80:	f001 fc84 	bl	800378c <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001e96:	f107 031c 	add.w	r3, r7, #28
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <MX_GPIO_Init+0x18c>)
 8001e9e:	f001 fc75 	bl	800378c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4807      	ldr	r0, [pc, #28]	; (8001ed8 <MX_GPIO_Init+0x190>)
 8001eba:	f001 fc67 	bl	800378c <HAL_GPIO_Init>

}
 8001ebe:	bf00      	nop
 8001ec0:	3730      	adds	r7, #48	; 0x30
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40021400 	.word	0x40021400
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40020c00 	.word	0x40020c00
 8001ed8:	40021800 	.word	0x40021800

08001edc <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	sendData(_sampleBuffer);
 8001ee4:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <HAL_SAI_RxHalfCpltCallback+0x18>)
 8001ee6:	f000 f815 	bl	8001f14 <sendData>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000039c 	.word	0x2000039c

08001ef8 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	sendData(&_sampleBuffer[MIC_SAMPLES_PER_PACKET]);
 8001f00:	4803      	ldr	r0, [pc, #12]	; (8001f10 <HAL_SAI_RxCpltCallback+0x18>)
 8001f02:	f000 f807 	bl	8001f14 <sendData>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000115c 	.word	0x2000115c

08001f14 <sendData>:

void sendData(volatile int32_t *data_in) {
 8001f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f18:	f5ad 5d07 	sub.w	sp, sp, #8640	; 0x21c0
 8001f1c:	b087      	sub	sp, #28
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f24:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f28:	6018      	str	r0, [r3, #0]

	float data_in_float[MIC_SAMPLES_PER_PACKET / 2];
	float filt[MIC_SAMPLES_PER_PACKET / 2];
	volatile int32_t *data_in_tmp = data_in;
 8001f2a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f2e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001f38:	f102 020c 	add.w	r2, r2, #12
 8001f3c:	6013      	str	r3, [r2, #0]
	for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001f44:	f102 0210 	add.w	r2, r2, #16
 8001f48:	8013      	strh	r3, [r2, #0]
 8001f4a:	e03a      	b.n	8001fc2 <sendData+0xae>
		int16_t tmp = (int16_t) ((data_in_tmp[0]>>8) & 0xffff);
 8001f4c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001f50:	f103 030c 	add.w	r3, r3, #12
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	121b      	asrs	r3, r3, #8
 8001f5a:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001f5e:	f102 023a 	add.w	r2, r2, #58	; 0x3a
 8001f62:	8013      	strh	r3, [r2, #0]
		data_in_float[i] = (float) tmp;
 8001f64:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001f68:	f103 0310 	add.w	r3, r3, #16
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001f72:	f102 023a 	add.w	r2, r2, #58	; 0x3a
 8001f76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f7a:	ee07 2a90 	vmov	s15, r2
 8001f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f82:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001f86:	f102 0218 	add.w	r2, r2, #24
 8001f8a:	f5a2 62e0 	sub.w	r2, r2, #1792	; 0x700
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	edc3 7a00 	vstr	s15, [r3]
		data_in_tmp += 2;
 8001f96:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001f9a:	f103 030c 	add.w	r3, r3, #12
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	3308      	adds	r3, #8
 8001fa2:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001fa6:	f102 020c 	add.w	r2, r2, #12
 8001faa:	6013      	str	r3, [r2, #0]
	for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8001fac:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001fb0:	f103 0310 	add.w	r3, r3, #16
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001fbc:	f102 0210 	add.w	r2, r2, #16
 8001fc0:	8013      	strh	r3, [r2, #0]
 8001fc2:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001fc6:	f103 0310 	add.w	r3, r3, #16
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8001fd0:	d3bc      	bcc.n	8001f4c <sendData+0x38>
	}
	arm_fir_f32(&S, data_in_float, filt, blockSize);
 8001fd2:	4bca      	ldr	r3, [pc, #808]	; (80022fc <sendData+0x3e8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8001fda:	f102 0218 	add.w	r2, r2, #24
 8001fde:	f507 51d6 	add.w	r1, r7, #6848	; 0x1ac0
 8001fe2:	f101 0118 	add.w	r1, r1, #24
 8001fe6:	48c6      	ldr	r0, [pc, #792]	; (8002300 <sendData+0x3ec>)
 8001fe8:	f7fe faec 	bl	80005c4 <arm_fir_f32>


	if (_running) {
 8001fec:	4bc5      	ldr	r3, [pc, #788]	; (8002304 <sendData+0x3f0>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 82aa 	beq.w	800254a <sendData+0x636>
		for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001ffc:	f102 0212 	add.w	r2, r2, #18
 8002000:	8013      	strh	r3, [r2, #0]
 8002002:	e299      	b.n	8002538 <sendData+0x624>

			moving_sum += (int16_t) fabsf(filt[i]); // * abs(sample_right);
 8002004:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002008:	f103 0312 	add.w	r3, r3, #18
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002012:	f102 0218 	add.w	r2, r2, #24
 8002016:	f5a2 625e 	sub.w	r2, r2, #3552	; 0xde0
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	edd3 7a00 	vldr	s15, [r3]
 8002022:	eef0 7ae7 	vabs.f32	s15, s15
 8002026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800202a:	ee17 3a90 	vmov	r3, s15
 800202e:	b21b      	sxth	r3, r3
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002038:	4bb3      	ldr	r3, [pc, #716]	; (8002308 <sendData+0x3f4>)
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002042:	4bb1      	ldr	r3, [pc, #708]	; (8002308 <sendData+0x3f4>)
 8002044:	edc3 7a00 	vstr	s15, [r3]
			moving_sum -= (int16_t) abs(circular_buf_mov[tail_mov]); // * abs(circular_buf_mov_right[tail_mov]);
 8002048:	4baf      	ldr	r3, [pc, #700]	; (8002308 <sendData+0x3f4>)
 800204a:	ed93 7a00 	vldr	s14, [r3]
 800204e:	4baf      	ldr	r3, [pc, #700]	; (800230c <sendData+0x3f8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4aaf      	ldr	r2, [pc, #700]	; (8002310 <sendData+0x3fc>)
 8002054:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002058:	2b00      	cmp	r3, #0
 800205a:	bfb8      	it	lt
 800205c:	425b      	neglt	r3, r3
 800205e:	b29b      	uxth	r3, r3
 8002060:	b21b      	sxth	r3, r3
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800206a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800206e:	4ba6      	ldr	r3, [pc, #664]	; (8002308 <sendData+0x3f4>)
 8002070:	edc3 7a00 	vstr	s15, [r3]
			circular_buf_mov[tail_mov] = (int16_t) filt[i];
 8002074:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002078:	f103 0312 	add.w	r3, r3, #18
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002082:	f102 0218 	add.w	r2, r2, #24
 8002086:	f5a2 625e 	sub.w	r2, r2, #3552	; 0xde0
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	edd3 7a00 	vldr	s15, [r3]
 8002092:	4b9e      	ldr	r3, [pc, #632]	; (800230c <sendData+0x3f8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800209a:	ee17 2a90 	vmov	r2, s15
 800209e:	b211      	sxth	r1, r2
 80020a0:	4a9b      	ldr	r2, [pc, #620]	; (8002310 <sendData+0x3fc>)
 80020a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			circular_buf_full[tail_full] = (int16_t) filt[i];
 80020a6:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80020aa:	f103 0312 	add.w	r3, r3, #18
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 80020b4:	f102 0218 	add.w	r2, r2, #24
 80020b8:	f5a2 625e 	sub.w	r2, r2, #3552	; 0xde0
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	4b93      	ldr	r3, [pc, #588]	; (8002314 <sendData+0x400>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020cc:	ee17 2a90 	vmov	r2, s15
 80020d0:	b211      	sxth	r1, r2
 80020d2:	4a91      	ldr	r2, [pc, #580]	; (8002318 <sendData+0x404>)
 80020d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			moving_avg = moving_sum / MOVING_AVG_LEN;
 80020d8:	4b8b      	ldr	r3, [pc, #556]	; (8002308 <sendData+0x3f4>)
 80020da:	ed93 7a00 	vldr	s14, [r3]
 80020de:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80020e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020e6:	4b8d      	ldr	r3, [pc, #564]	; (800231c <sendData+0x408>)
 80020e8:	edc3 7a00 	vstr	s15, [r3]

			if ((counter > 0) && (!done)){
 80020ec:	4b8c      	ldr	r3, [pc, #560]	; (8002320 <sendData+0x40c>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 81b2 	beq.w	800245a <sendData+0x546>
 80020f6:	4b8b      	ldr	r3, [pc, #556]	; (8002324 <sendData+0x410>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 81ad 	bne.w	800245a <sendData+0x546>
				counter++;
 8002100:	4b87      	ldr	r3, [pc, #540]	; (8002320 <sendData+0x40c>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	4b85      	ldr	r3, [pc, #532]	; (8002320 <sendData+0x40c>)
 800210a:	801a      	strh	r2, [r3, #0]
				if (counter == (SEND_LEN/2)){ // TODO: need to change this to SEND_LEN-100;
 800210c:	4b84      	ldr	r3, [pc, #528]	; (8002320 <sendData+0x40c>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	f240 42fb 	movw	r2, #1275	; 0x4fb
 8002114:	4293      	cmp	r3, r2
 8002116:	f040 81a0 	bne.w	800245a <sendData+0x546>

					for(int delay = 0; delay < NODE_DELAY; delay++); // non-blocking delay used to offset the transmissions of each node to prevent garbled transmissions
 800211a:	2300      	movs	r3, #0
 800211c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002120:	f102 0214 	add.w	r2, r2, #20
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e00a      	b.n	800213e <sendData+0x22a>
 8002128:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800212c:	f103 0314 	add.w	r3, r3, #20
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3301      	adds	r3, #1
 8002134:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002138:	f102 0214 	add.w	r2, r2, #20
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002142:	f103 0314 	add.w	r3, r3, #20
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a77      	ldr	r2, [pc, #476]	; (8002328 <sendData+0x414>)
 800214a:	4293      	cmp	r3, r2
 800214c:	ddec      	ble.n	8002128 <sendData+0x214>

					uint8_t GPS_data_len = (uint8_t) GPSidxint; //strlen((char *) GPS_latest_data);
 800214e:	4b77      	ldr	r3, [pc, #476]	; (800232c <sendData+0x418>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002156:	f102 0207 	add.w	r2, r2, #7
 800215a:	7013      	strb	r3, [r2, #0]
					uint8_t metaData[16+GPS_data_len];
 800215c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002160:	f103 0307 	add.w	r3, r3, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	f103 0110 	add.w	r1, r3, #16
 800216a:	466b      	mov	r3, sp
 800216c:	461e      	mov	r6, r3
 800216e:	1e4b      	subs	r3, r1, #1
 8002170:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	460a      	mov	r2, r1
 8002178:	2300      	movs	r3, #0
 800217a:	4614      	mov	r4, r2
 800217c:	461d      	mov	r5, r3
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	f04f 0300 	mov.w	r3, #0
 8002186:	00eb      	lsls	r3, r5, #3
 8002188:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800218c:	00e2      	lsls	r2, r4, #3
 800218e:	460a      	mov	r2, r1
 8002190:	2300      	movs	r3, #0
 8002192:	4690      	mov	r8, r2
 8002194:	4699      	mov	r9, r3
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021aa:	460b      	mov	r3, r1
 80021ac:	3307      	adds	r3, #7
 80021ae:	08db      	lsrs	r3, r3, #3
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	ebad 0d03 	sub.w	sp, sp, r3
 80021b6:	466b      	mov	r3, sp
 80021b8:	3300      	adds	r3, #0
 80021ba:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 80021be:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	4b5a      	ldr	r3, [pc, #360]	; (8002330 <sendData+0x41c>)
 80021c6:	681a      	ldr	r2, [r3, #0]
					memcpy(metaData, &startPadding, 4);
 80021c8:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80021cc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	601a      	str	r2, [r3, #0]
					memcpy(metaData+4, &timerVal, 4);
 80021d4:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80021d8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3304      	adds	r3, #4
 80021e0:	4a54      	ldr	r2, [pc, #336]	; (8002334 <sendData+0x420>)
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	601a      	str	r2, [r3, #0]
					memcpy(metaData+8, &devID, 4);
 80021e6:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80021ea:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3308      	adds	r3, #8
 80021f2:	4a51      	ldr	r2, [pc, #324]	; (8002338 <sendData+0x424>)
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	601a      	str	r2, [r3, #0]
					memcpy(metaData+12, GPS_latest_data, GPS_data_len);
 80021f8:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80021fc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	330c      	adds	r3, #12
 8002204:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002208:	f102 0207 	add.w	r2, r2, #7
 800220c:	7812      	ldrb	r2, [r2, #0]
 800220e:	494b      	ldr	r1, [pc, #300]	; (800233c <sendData+0x428>)
 8002210:	4618      	mov	r0, r3
 8002212:	f006 faf9 	bl	8008808 <memcpy>
					memcpy(metaData+12+GPS_data_len, &endMetaPadding, 4);
 8002216:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800221a:	f103 0307 	add.w	r3, r3, #7
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	330c      	adds	r3, #12
 8002222:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8002226:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	4413      	add	r3, r2
 800222e:	4a44      	ldr	r2, [pc, #272]	; (8002340 <sendData+0x42c>)
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	601a      	str	r2, [r3, #0]

					uint8_t sendBuf[SEND_LEN*2];
					memcpy(sendBuf, &circular_buf_full[tail_full], ((SEND_LEN)-tail_full)*2);
 8002234:	4b37      	ldr	r3, [pc, #220]	; (8002314 <sendData+0x400>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4a37      	ldr	r2, [pc, #220]	; (8002318 <sendData+0x404>)
 800223c:	1899      	adds	r1, r3, r2
 800223e:	4b35      	ldr	r3, [pc, #212]	; (8002314 <sendData+0x400>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f5c3 631f 	rsb	r3, r3, #2544	; 0x9f0
 8002246:	3306      	adds	r3, #6
 8002248:	005a      	lsls	r2, r3, #1
 800224a:	f107 0318 	add.w	r3, r7, #24
 800224e:	3b10      	subs	r3, #16
 8002250:	4618      	mov	r0, r3
 8002252:	f006 fad9 	bl	8008808 <memcpy>
					memcpy(&sendBuf[(SEND_LEN-tail_full)*2], circular_buf_full, tail_full*2);
 8002256:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <sendData+0x400>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f5c3 631f 	rsb	r3, r3, #2544	; 0x9f0
 800225e:	3306      	adds	r3, #6
 8002260:	005a      	lsls	r2, r3, #1
 8002262:	f107 0318 	add.w	r3, r7, #24
 8002266:	3b10      	subs	r3, #16
 8002268:	1898      	adds	r0, r3, r2
 800226a:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <sendData+0x400>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	461a      	mov	r2, r3
 8002272:	4929      	ldr	r1, [pc, #164]	; (8002318 <sendData+0x404>)
 8002274:	f006 fac8 	bl	8008808 <memcpy>

#if LORA_TRANSMIT
					uint8_t packet_res = lora_send_packet(&lora, metaData, 16+GPS_data_len);
 8002278:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800227c:	f103 0307 	add.w	r3, r3, #7
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	3310      	adds	r3, #16
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 800228c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002290:	6819      	ldr	r1, [r3, #0]
 8002292:	482c      	ldr	r0, [pc, #176]	; (8002344 <sendData+0x430>)
 8002294:	f7ff f989 	bl	80015aa <lora_send_packet>
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
 800229c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80022a0:	f103 0318 	add.w	r3, r3, #24
 80022a4:	f6a3 53e1 	subw	r3, r3, #3553	; 0xde1
 80022a8:	701a      	strb	r2, [r3, #0]

					if (packet_res != LORA_OK) {
 80022aa:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80022ae:	f103 0318 	add.w	r3, r3, #24
 80022b2:	f6a3 53e1 	subw	r3, r3, #3553	; 0xde1
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <sendData+0x3be>
						HAL_UART_Transmit(&huart1, &packet_res, sizeof(packet_res), 1000);
 80022bc:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80022c0:	f101 0117 	add.w	r1, r1, #23
 80022c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c8:	2201      	movs	r2, #1
 80022ca:	481f      	ldr	r0, [pc, #124]	; (8002348 <sendData+0x434>)
 80022cc:	f005 f8c1 	bl	8007452 <HAL_UART_Transmit>
 80022d0:	e006      	b.n	80022e0 <sendData+0x3cc>
					}
					else {
						HAL_UART_Transmit(&huart1, transmission_success, sizeof(transmission_success), 1000);
 80022d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d6:	2215      	movs	r2, #21
 80022d8:	491c      	ldr	r1, [pc, #112]	; (800234c <sendData+0x438>)
 80022da:	481b      	ldr	r0, [pc, #108]	; (8002348 <sendData+0x434>)
 80022dc:	f005 f8b9 	bl	8007452 <HAL_UART_Transmit>
					}

					while(lora_is_transmitting(&lora)); // non-blocking delay
 80022e0:	bf00      	nop
 80022e2:	4818      	ldr	r0, [pc, #96]	; (8002344 <sendData+0x430>)
 80022e4:	f7ff f909 	bl	80014fa <lora_is_transmitting>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f9      	bne.n	80022e2 <sendData+0x3ce>
					HAL_UART_Transmit(&huart1, (uint8_t*) sendBuf, SEND_LEN*2, 1000);
#endif

#if LORA_TRANSMIT

					for(int send_loop_cnt = 0; send_loop_cnt < ((SEND_LEN*2)/255 + ((SEND_LEN*2) % 255 != 0)); send_loop_cnt++){
 80022ee:	2300      	movs	r3, #0
 80022f0:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 80022f4:	f102 0208 	add.w	r2, r2, #8
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e075      	b.n	80023e8 <sendData+0x4d4>
 80022fc:	2000003c 	.word	0x2000003c
 8002300:	20004408 	.word	0x20004408
 8002304:	20003354 	.word	0x20003354
 8002308:	20003330 	.word	0x20003330
 800230c:	20001f38 	.word	0x20001f38
 8002310:	20001f1c 	.word	0x20001f1c
 8002314:	2000332c 	.word	0x2000332c
 8002318:	20001f3c 	.word	0x20001f3c
 800231c:	20003334 	.word	0x20003334
 8002320:	20003356 	.word	0x20003356
 8002324:	20003358 	.word	0x20003358
 8002328:	0bebc1ff 	.word	0x0bebc1ff
 800232c:	20004c84 	.word	0x20004c84
 8002330:	20000004 	.word	0x20000004
 8002334:	20004c88 	.word	0x20004c88
 8002338:	20000000 	.word	0x20000000
 800233c:	200043c4 	.word	0x200043c4
 8002340:	20000008 	.word	0x20000008
 8002344:	2000335c 	.word	0x2000335c
 8002348:	20000254 	.word	0x20000254
 800234c:	20000024 	.word	0x20000024
						packet_res = lora_send_packet(&lora, sendBuf+(255*send_loop_cnt), 255);
 8002350:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002354:	f103 0308 	add.w	r3, r3, #8
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4613      	mov	r3, r2
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	461a      	mov	r2, r3
 8002362:	f107 0318 	add.w	r3, r7, #24
 8002366:	3b10      	subs	r3, #16
 8002368:	4413      	add	r3, r2
 800236a:	22ff      	movs	r2, #255	; 0xff
 800236c:	4619      	mov	r1, r3
 800236e:	487a      	ldr	r0, [pc, #488]	; (8002558 <sendData+0x644>)
 8002370:	f7ff f91b 	bl	80015aa <lora_send_packet>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800237c:	f103 0318 	add.w	r3, r3, #24
 8002380:	f6a3 53e1 	subw	r3, r3, #3553	; 0xde1
 8002384:	701a      	strb	r2, [r3, #0]
						if (packet_res != LORA_OK) {
 8002386:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800238a:	f103 0318 	add.w	r3, r3, #24
 800238e:	f6a3 53e1 	subw	r3, r3, #3553	; 0xde1
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <sendData+0x49a>
							HAL_UART_Transmit(&huart1, &packet_res, sizeof(packet_res), 1000);
 8002398:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800239c:	f101 0117 	add.w	r1, r1, #23
 80023a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a4:	2201      	movs	r2, #1
 80023a6:	486d      	ldr	r0, [pc, #436]	; (800255c <sendData+0x648>)
 80023a8:	f005 f853 	bl	8007452 <HAL_UART_Transmit>
 80023ac:	e006      	b.n	80023bc <sendData+0x4a8>
						}
						else {
							HAL_UART_Transmit(&huart1, transmission_success, sizeof(transmission_success), 1000);
 80023ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b2:	2215      	movs	r2, #21
 80023b4:	496a      	ldr	r1, [pc, #424]	; (8002560 <sendData+0x64c>)
 80023b6:	4869      	ldr	r0, [pc, #420]	; (800255c <sendData+0x648>)
 80023b8:	f005 f84b 	bl	8007452 <HAL_UART_Transmit>
						}
						HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_3);
 80023bc:	2108      	movs	r1, #8
 80023be:	4869      	ldr	r0, [pc, #420]	; (8002564 <sendData+0x650>)
 80023c0:	f001 fb91 	bl	8003ae6 <HAL_GPIO_TogglePin>
						while(lora_is_transmitting(&lora)); // non-blocking delay
 80023c4:	bf00      	nop
 80023c6:	4864      	ldr	r0, [pc, #400]	; (8002558 <sendData+0x644>)
 80023c8:	f7ff f897 	bl	80014fa <lora_is_transmitting>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f9      	bne.n	80023c6 <sendData+0x4b2>
					for(int send_loop_cnt = 0; send_loop_cnt < ((SEND_LEN*2)/255 + ((SEND_LEN*2) % 255 != 0)); send_loop_cnt++){
 80023d2:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80023d6:	f103 0308 	add.w	r3, r3, #8
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3301      	adds	r3, #1
 80023de:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 80023e2:	f102 0208 	add.w	r2, r2, #8
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80023ec:	f103 0308 	add.w	r3, r3, #8
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b13      	cmp	r3, #19
 80023f4:	ddac      	ble.n	8002350 <sendData+0x43c>
					}

					packet_res = lora_send_packet(&lora, (uint8_t *) &endPadding, 4);
 80023f6:	2204      	movs	r2, #4
 80023f8:	495b      	ldr	r1, [pc, #364]	; (8002568 <sendData+0x654>)
 80023fa:	4857      	ldr	r0, [pc, #348]	; (8002558 <sendData+0x644>)
 80023fc:	f7ff f8d5 	bl	80015aa <lora_send_packet>
 8002400:	4603      	mov	r3, r0
 8002402:	461a      	mov	r2, r3
 8002404:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002408:	f103 0318 	add.w	r3, r3, #24
 800240c:	f6a3 53e1 	subw	r3, r3, #3553	; 0xde1
 8002410:	701a      	strb	r2, [r3, #0]
					if (packet_res != LORA_OK) {
 8002412:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002416:	f103 0318 	add.w	r3, r3, #24
 800241a:	f6a3 53e1 	subw	r3, r3, #3553	; 0xde1
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <sendData+0x526>
						HAL_UART_Transmit(&huart1, &packet_res, sizeof(packet_res), 1000);
 8002424:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8002428:	f101 0117 	add.w	r1, r1, #23
 800242c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002430:	2201      	movs	r2, #1
 8002432:	484a      	ldr	r0, [pc, #296]	; (800255c <sendData+0x648>)
 8002434:	f005 f80d 	bl	8007452 <HAL_UART_Transmit>
 8002438:	e006      	b.n	8002448 <sendData+0x534>
					}
					else {
						HAL_UART_Transmit(&huart1, transmission_success, sizeof(transmission_success), 1000);
 800243a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800243e:	2215      	movs	r2, #21
 8002440:	4947      	ldr	r1, [pc, #284]	; (8002560 <sendData+0x64c>)
 8002442:	4846      	ldr	r0, [pc, #280]	; (800255c <sendData+0x648>)
 8002444:	f005 f805 	bl	8007452 <HAL_UART_Transmit>
					}
#endif

					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8002448:	2200      	movs	r2, #0
 800244a:	2108      	movs	r1, #8
 800244c:	4845      	ldr	r0, [pc, #276]	; (8002564 <sendData+0x650>)
 800244e:	f001 fb31 	bl	8003ab4 <HAL_GPIO_WritePin>
					done = 1;
 8002452:	4b46      	ldr	r3, [pc, #280]	; (800256c <sendData+0x658>)
 8002454:	2201      	movs	r2, #1
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	46b5      	mov	sp, r6
				}
			}

			if ((moving_avg >= MOVING_AVG_THRESHOLD) && (counter == 0)){
 800245a:	4b45      	ldr	r3, [pc, #276]	; (8002570 <sendData+0x65c>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002574 <sendData+0x660>
 8002464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246c:	db16      	blt.n	800249c <sendData+0x588>
 800246e:	4b42      	ldr	r3, [pc, #264]	; (8002578 <sendData+0x664>)
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d112      	bne.n	800249c <sendData+0x588>
				timerVal = TIM2->CNT;
 8002476:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	4a3f      	ldr	r2, [pc, #252]	; (800257c <sendData+0x668>)
 800247e:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8002480:	2200      	movs	r2, #0
 8002482:	2108      	movs	r1, #8
 8002484:	4837      	ldr	r0, [pc, #220]	; (8002564 <sendData+0x650>)
 8002486:	f001 fb15 	bl	8003ab4 <HAL_GPIO_WritePin>
				counter += 1;
 800248a:	4b3b      	ldr	r3, [pc, #236]	; (8002578 <sendData+0x664>)
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	3301      	adds	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	4b39      	ldr	r3, [pc, #228]	; (8002578 <sendData+0x664>)
 8002494:	801a      	strh	r2, [r3, #0]
				done = 0;
 8002496:	4b35      	ldr	r3, [pc, #212]	; (800256c <sendData+0x658>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
			}

			tail_mov = (tail_mov + 1) % (MOVING_AVG_LEN);
 800249c:	4b38      	ldr	r3, [pc, #224]	; (8002580 <sendData+0x66c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	1c59      	adds	r1, r3, #1
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <sendData+0x670>)
 80024a4:	fba3 2301 	umull	r2, r3, r3, r1
 80024a8:	089a      	lsrs	r2, r3, #2
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	1aca      	subs	r2, r1, r3
 80024b2:	4b33      	ldr	r3, [pc, #204]	; (8002580 <sendData+0x66c>)
 80024b4:	601a      	str	r2, [r3, #0]
			head_mov = (head_mov + 1) % (MOVING_AVG_LEN);
 80024b6:	4b34      	ldr	r3, [pc, #208]	; (8002588 <sendData+0x674>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	1c59      	adds	r1, r3, #1
 80024bc:	4b31      	ldr	r3, [pc, #196]	; (8002584 <sendData+0x670>)
 80024be:	fba3 2301 	umull	r2, r3, r3, r1
 80024c2:	089a      	lsrs	r2, r3, #2
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	1aca      	subs	r2, r1, r3
 80024cc:	4b2e      	ldr	r3, [pc, #184]	; (8002588 <sendData+0x674>)
 80024ce:	601a      	str	r2, [r3, #0]

			tail_full = (tail_full + 1) % (SEND_LEN);
 80024d0:	4b2e      	ldr	r3, [pc, #184]	; (800258c <sendData+0x678>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	0853      	lsrs	r3, r2, #1
 80024d8:	492d      	ldr	r1, [pc, #180]	; (8002590 <sendData+0x67c>)
 80024da:	fba1 1303 	umull	r1, r3, r1, r3
 80024de:	0a9b      	lsrs	r3, r3, #10
 80024e0:	f640 11f6 	movw	r1, #2550	; 0x9f6
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	4a28      	ldr	r2, [pc, #160]	; (800258c <sendData+0x678>)
 80024ec:	6013      	str	r3, [r2, #0]
			head_full = (head_full + 1) % (SEND_LEN);
 80024ee:	4b29      	ldr	r3, [pc, #164]	; (8002594 <sendData+0x680>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	0853      	lsrs	r3, r2, #1
 80024f6:	4926      	ldr	r1, [pc, #152]	; (8002590 <sendData+0x67c>)
 80024f8:	fba1 1303 	umull	r1, r3, r1, r3
 80024fc:	0a9b      	lsrs	r3, r3, #10
 80024fe:	f640 11f6 	movw	r1, #2550	; 0x9f6
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	4a22      	ldr	r2, [pc, #136]	; (8002594 <sendData+0x680>)
 800250a:	6013      	str	r3, [r2, #0]

			data_in += 2;
 800250c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002510:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002514:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8002518:	f5a2 72ea 	sub.w	r2, r2, #468	; 0x1d4
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	3208      	adds	r2, #8
 8002520:	601a      	str	r2, [r3, #0]
		for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8002522:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002526:	f103 0312 	add.w	r3, r3, #18
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	3301      	adds	r3, #1
 800252e:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002532:	f102 0212 	add.w	r2, r2, #18
 8002536:	8013      	strh	r3, [r2, #0]
 8002538:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800253c:	f103 0312 	add.w	r3, r3, #18
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8002546:	f4ff ad5d 	bcc.w	8002004 <sendData+0xf0>
		}


	}
}
 800254a:	bf00      	nop
 800254c:	f507 5707 	add.w	r7, r7, #8640	; 0x21c0
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002558:	2000335c 	.word	0x2000335c
 800255c:	20000254 	.word	0x20000254
 8002560:	20000024 	.word	0x20000024
 8002564:	40021400 	.word	0x40021400
 8002568:	2000000c 	.word	0x2000000c
 800256c:	20003358 	.word	0x20003358
 8002570:	20003334 	.word	0x20003334
 8002574:	42c80000 	.word	0x42c80000
 8002578:	20003356 	.word	0x20003356
 800257c:	20004c88 	.word	0x20004c88
 8002580:	20001f38 	.word	0x20001f38
 8002584:	cccccccd 	.word	0xcccccccd
 8002588:	20001f34 	.word	0x20001f34
 800258c:	2000332c 	.word	0x2000332c
 8002590:	cd9a6735 	.word	0xcd9a6735
 8002594:	20003328 	.word	0x20003328

08002598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800259c:	b672      	cpsid	i
}
 800259e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <Error_Handler+0x8>
	...

080025a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_MspInit+0x4c>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	4a0f      	ldr	r2, [pc, #60]	; (80025f0 <HAL_MspInit+0x4c>)
 80025b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ba:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <HAL_MspInit+0x4c>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c2:	607b      	str	r3, [r7, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_MspInit+0x4c>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a08      	ldr	r2, [pc, #32]	; (80025f0 <HAL_MspInit+0x4c>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_MspInit+0x4c>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800

080025f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	; 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a19      	ldr	r2, [pc, #100]	; (8002678 <HAL_SPI_MspInit+0x84>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d12b      	bne.n	800266e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	4b18      	ldr	r3, [pc, #96]	; (800267c <HAL_SPI_MspInit+0x88>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	4a17      	ldr	r2, [pc, #92]	; (800267c <HAL_SPI_MspInit+0x88>)
 8002620:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002624:	6453      	str	r3, [r2, #68]	; 0x44
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_SPI_MspInit+0x88>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b11      	ldr	r3, [pc, #68]	; (800267c <HAL_SPI_MspInit+0x88>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a10      	ldr	r2, [pc, #64]	; (800267c <HAL_SPI_MspInit+0x88>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b0e      	ldr	r3, [pc, #56]	; (800267c <HAL_SPI_MspInit+0x88>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800264e:	23e0      	movs	r3, #224	; 0xe0
 8002650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265a:	2303      	movs	r3, #3
 800265c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800265e:	2305      	movs	r3, #5
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002662:	f107 0314 	add.w	r3, r7, #20
 8002666:	4619      	mov	r1, r3
 8002668:	4805      	ldr	r0, [pc, #20]	; (8002680 <HAL_SPI_MspInit+0x8c>)
 800266a:	f001 f88f 	bl	800378c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800266e:	bf00      	nop
 8002670:	3728      	adds	r7, #40	; 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40013000 	.word	0x40013000
 800267c:	40023800 	.word	0x40023800
 8002680:	40020000 	.word	0x40020000

08002684 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a4:	d133      	bne.n	800270e <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <HAL_TIM_IC_MspInit+0x94>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a1a      	ldr	r2, [pc, #104]	; (8002718 <HAL_TIM_IC_MspInit+0x94>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
 80026b6:	4b18      	ldr	r3, [pc, #96]	; (8002718 <HAL_TIM_IC_MspInit+0x94>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <HAL_TIM_IC_MspInit+0x94>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a13      	ldr	r2, [pc, #76]	; (8002718 <HAL_TIM_IC_MspInit+0x94>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <HAL_TIM_IC_MspInit+0x94>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026de:	2304      	movs	r3, #4
 80026e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026ee:	2301      	movs	r3, #1
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f2:	f107 0314 	add.w	r3, r7, #20
 80026f6:	4619      	mov	r1, r3
 80026f8:	4808      	ldr	r0, [pc, #32]	; (800271c <HAL_TIM_IC_MspInit+0x98>)
 80026fa:	f001 f847 	bl	800378c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	2100      	movs	r1, #0
 8002702:	201c      	movs	r0, #28
 8002704:	f000 fc09 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002708:	201c      	movs	r0, #28
 800270a:	f000 fc22 	bl	8002f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800270e:	bf00      	nop
 8002710:	3728      	adds	r7, #40	; 0x28
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800
 800271c:	40020000 	.word	0x40020000

08002720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08c      	sub	sp, #48	; 0x30
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 031c 	add.w	r3, r7, #28
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a74      	ldr	r2, [pc, #464]	; (8002910 <HAL_UART_MspInit+0x1f0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d15b      	bne.n	80027fa <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	61bb      	str	r3, [r7, #24]
 8002746:	4b73      	ldr	r3, [pc, #460]	; (8002914 <HAL_UART_MspInit+0x1f4>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	4a72      	ldr	r2, [pc, #456]	; (8002914 <HAL_UART_MspInit+0x1f4>)
 800274c:	f043 0310 	orr.w	r3, r3, #16
 8002750:	6453      	str	r3, [r2, #68]	; 0x44
 8002752:	4b70      	ldr	r3, [pc, #448]	; (8002914 <HAL_UART_MspInit+0x1f4>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	4b6c      	ldr	r3, [pc, #432]	; (8002914 <HAL_UART_MspInit+0x1f4>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4a6b      	ldr	r2, [pc, #428]	; (8002914 <HAL_UART_MspInit+0x1f4>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b69      	ldr	r3, [pc, #420]	; (8002914 <HAL_UART_MspInit+0x1f4>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800277a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800277e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800278c:	2307      	movs	r3, #7
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002790:	f107 031c 	add.w	r3, r7, #28
 8002794:	4619      	mov	r1, r3
 8002796:	4860      	ldr	r0, [pc, #384]	; (8002918 <HAL_UART_MspInit+0x1f8>)
 8002798:	f000 fff8 	bl	800378c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800279c:	4b5f      	ldr	r3, [pc, #380]	; (800291c <HAL_UART_MspInit+0x1fc>)
 800279e:	4a60      	ldr	r2, [pc, #384]	; (8002920 <HAL_UART_MspInit+0x200>)
 80027a0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80027a2:	4b5e      	ldr	r3, [pc, #376]	; (800291c <HAL_UART_MspInit+0x1fc>)
 80027a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027a8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027aa:	4b5c      	ldr	r3, [pc, #368]	; (800291c <HAL_UART_MspInit+0x1fc>)
 80027ac:	2240      	movs	r2, #64	; 0x40
 80027ae:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b0:	4b5a      	ldr	r3, [pc, #360]	; (800291c <HAL_UART_MspInit+0x1fc>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027b6:	4b59      	ldr	r3, [pc, #356]	; (800291c <HAL_UART_MspInit+0x1fc>)
 80027b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027bc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027be:	4b57      	ldr	r3, [pc, #348]	; (800291c <HAL_UART_MspInit+0x1fc>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027c4:	4b55      	ldr	r3, [pc, #340]	; (800291c <HAL_UART_MspInit+0x1fc>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80027ca:	4b54      	ldr	r3, [pc, #336]	; (800291c <HAL_UART_MspInit+0x1fc>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027d0:	4b52      	ldr	r3, [pc, #328]	; (800291c <HAL_UART_MspInit+0x1fc>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027d6:	4b51      	ldr	r3, [pc, #324]	; (800291c <HAL_UART_MspInit+0x1fc>)
 80027d8:	2200      	movs	r2, #0
 80027da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80027dc:	484f      	ldr	r0, [pc, #316]	; (800291c <HAL_UART_MspInit+0x1fc>)
 80027de:	f000 fbd3 	bl	8002f88 <HAL_DMA_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80027e8:	f7ff fed6 	bl	8002598 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a4b      	ldr	r2, [pc, #300]	; (800291c <HAL_UART_MspInit+0x1fc>)
 80027f0:	635a      	str	r2, [r3, #52]	; 0x34
 80027f2:	4a4a      	ldr	r2, [pc, #296]	; (800291c <HAL_UART_MspInit+0x1fc>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027f8:	e086      	b.n	8002908 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a49      	ldr	r2, [pc, #292]	; (8002924 <HAL_UART_MspInit+0x204>)
 8002800:	4293      	cmp	r3, r2
 8002802:	f040 8081 	bne.w	8002908 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	4b42      	ldr	r3, [pc, #264]	; (8002914 <HAL_UART_MspInit+0x1f4>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a41      	ldr	r2, [pc, #260]	; (8002914 <HAL_UART_MspInit+0x1f4>)
 8002810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
 8002816:	4b3f      	ldr	r3, [pc, #252]	; (8002914 <HAL_UART_MspInit+0x1f4>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <HAL_UART_MspInit+0x1f4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a3a      	ldr	r2, [pc, #232]	; (8002914 <HAL_UART_MspInit+0x1f4>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b38      	ldr	r3, [pc, #224]	; (8002914 <HAL_UART_MspInit+0x1f4>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	4b34      	ldr	r3, [pc, #208]	; (8002914 <HAL_UART_MspInit+0x1f4>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a33      	ldr	r2, [pc, #204]	; (8002914 <HAL_UART_MspInit+0x1f4>)
 8002848:	f043 0308 	orr.w	r3, r3, #8
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b31      	ldr	r3, [pc, #196]	; (8002914 <HAL_UART_MspInit+0x1f4>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800285a:	2308      	movs	r3, #8
 800285c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285e:	2302      	movs	r3, #2
 8002860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002866:	2303      	movs	r3, #3
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800286a:	2307      	movs	r3, #7
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286e:	f107 031c 	add.w	r3, r7, #28
 8002872:	4619      	mov	r1, r3
 8002874:	4828      	ldr	r0, [pc, #160]	; (8002918 <HAL_UART_MspInit+0x1f8>)
 8002876:	f000 ff89 	bl	800378c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800287a:	2320      	movs	r3, #32
 800287c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800288a:	2307      	movs	r3, #7
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800288e:	f107 031c 	add.w	r3, r7, #28
 8002892:	4619      	mov	r1, r3
 8002894:	4824      	ldr	r0, [pc, #144]	; (8002928 <HAL_UART_MspInit+0x208>)
 8002896:	f000 ff79 	bl	800378c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800289a:	4b24      	ldr	r3, [pc, #144]	; (800292c <HAL_UART_MspInit+0x20c>)
 800289c:	4a24      	ldr	r2, [pc, #144]	; (8002930 <HAL_UART_MspInit+0x210>)
 800289e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80028a0:	4b22      	ldr	r3, [pc, #136]	; (800292c <HAL_UART_MspInit+0x20c>)
 80028a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028a8:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_UART_MspInit+0x20c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ae:	4b1f      	ldr	r3, [pc, #124]	; (800292c <HAL_UART_MspInit+0x20c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028b4:	4b1d      	ldr	r3, [pc, #116]	; (800292c <HAL_UART_MspInit+0x20c>)
 80028b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ba:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028bc:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_UART_MspInit+0x20c>)
 80028be:	2200      	movs	r2, #0
 80028c0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028c2:	4b1a      	ldr	r3, [pc, #104]	; (800292c <HAL_UART_MspInit+0x20c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80028c8:	4b18      	ldr	r3, [pc, #96]	; (800292c <HAL_UART_MspInit+0x20c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80028ce:	4b17      	ldr	r3, [pc, #92]	; (800292c <HAL_UART_MspInit+0x20c>)
 80028d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028d4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_UART_MspInit+0x20c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80028dc:	4813      	ldr	r0, [pc, #76]	; (800292c <HAL_UART_MspInit+0x20c>)
 80028de:	f000 fb53 	bl	8002f88 <HAL_DMA_Init>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 80028e8:	f7ff fe56 	bl	8002598 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a0f      	ldr	r2, [pc, #60]	; (800292c <HAL_UART_MspInit+0x20c>)
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38
 80028f2:	4a0e      	ldr	r2, [pc, #56]	; (800292c <HAL_UART_MspInit+0x20c>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80028f8:	2200      	movs	r2, #0
 80028fa:	2100      	movs	r1, #0
 80028fc:	2026      	movs	r0, #38	; 0x26
 80028fe:	f000 fb0c 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002902:	2026      	movs	r0, #38	; 0x26
 8002904:	f000 fb25 	bl	8002f52 <HAL_NVIC_EnableIRQ>
}
 8002908:	bf00      	nop
 800290a:	3730      	adds	r7, #48	; 0x30
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40011000 	.word	0x40011000
 8002914:	40023800 	.word	0x40023800
 8002918:	40020000 	.word	0x40020000
 800291c:	200002dc 	.word	0x200002dc
 8002920:	400264b8 	.word	0x400264b8
 8002924:	40004400 	.word	0x40004400
 8002928:	40020c00 	.word	0x40020c00
 800292c:	2000033c 	.word	0x2000033c
 8002930:	40026088 	.word	0x40026088

08002934 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b0a0      	sub	sp, #128	; 0x80
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800293c:	f107 0310 	add.w	r3, r7, #16
 8002940:	225c      	movs	r2, #92	; 0x5c
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f005 ff6d 	bl	8008824 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a4c      	ldr	r2, [pc, #304]	; (8002a80 <HAL_SAI_MspInit+0x14c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	f040 8090 	bne.w	8002a76 <HAL_SAI_MspInit+0x142>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002956:	2304      	movs	r3, #4
 8002958:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 16;
 800295a:	2310      	movs	r3, #16
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800295e:	23c0      	movs	r3, #192	; 0xc0
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002962:	2302      	movs	r3, #2
 8002964:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8002966:	2302      	movs	r3, #2
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800296a:	2301      	movs	r3, #1
 800296c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800296e:	2300      	movs	r3, #0
 8002970:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002972:	f107 0310 	add.w	r3, r7, #16
 8002976:	4618      	mov	r0, r3
 8002978:	f001 fa3a 	bl	8003df0 <HAL_RCCEx_PeriphCLKConfig>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_SAI_MspInit+0x52>
    {
      Error_Handler();
 8002982:	f7ff fe09 	bl	8002598 <Error_Handler>
    }

      if (SAI1_client == 0)
 8002986:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <HAL_SAI_MspInit+0x150>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10d      	bne.n	80029aa <HAL_SAI_MspInit+0x76>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_SAI_MspInit+0x154>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	4a3c      	ldr	r2, [pc, #240]	; (8002a88 <HAL_SAI_MspInit+0x154>)
 8002998:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800299c:	6453      	str	r3, [r2, #68]	; 0x44
 800299e:	4b3a      	ldr	r3, [pc, #232]	; (8002a88 <HAL_SAI_MspInit+0x154>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80029aa:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <HAL_SAI_MspInit+0x150>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3301      	adds	r3, #1
 80029b0:	4a34      	ldr	r2, [pc, #208]	; (8002a84 <HAL_SAI_MspInit+0x150>)
 80029b2:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029b4:	2308      	movs	r3, #8
 80029b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c0:	2300      	movs	r3, #0
 80029c2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80029c4:	2306      	movs	r3, #6
 80029c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029cc:	4619      	mov	r1, r3
 80029ce:	482f      	ldr	r0, [pc, #188]	; (8002a8c <HAL_SAI_MspInit+0x158>)
 80029d0:	f000 fedc 	bl	800378c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2300      	movs	r3, #0
 80029e4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80029e6:	2306      	movs	r3, #6
 80029e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029ea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029ee:	4619      	mov	r1, r3
 80029f0:	4827      	ldr	r0, [pc, #156]	; (8002a90 <HAL_SAI_MspInit+0x15c>)
 80029f2:	f000 fecb 	bl	800378c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 80029f6:	4b27      	ldr	r3, [pc, #156]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 80029f8:	4a27      	ldr	r2, [pc, #156]	; (8002a98 <HAL_SAI_MspInit+0x164>)
 80029fa:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 80029fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a02:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a04:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a0a:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8002a10:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 8002a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a16:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a18:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 8002a1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a1e:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a20:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 8002a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a26:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002a28:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 8002a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a2e:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8002a30:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a36:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 8002a38:	2204      	movs	r2, #4
 8002a3a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a3c:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 8002a3e:	2203      	movs	r2, #3
 8002a40:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8002a42:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002a48:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002a4e:	4811      	ldr	r0, [pc, #68]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 8002a50:	f000 fa9a 	bl	8002f88 <HAL_DMA_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_SAI_MspInit+0x12a>
    {
      Error_Handler();
 8002a5a:	f7ff fd9d 	bl	8002598 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a0c      	ldr	r2, [pc, #48]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 8002a62:	675a      	str	r2, [r3, #116]	; 0x74
 8002a64:	4a0b      	ldr	r2, [pc, #44]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 8002a6e:	671a      	str	r2, [r3, #112]	; 0x70
 8002a70:	4a08      	ldr	r2, [pc, #32]	; (8002a94 <HAL_SAI_MspInit+0x160>)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8002a76:	bf00      	nop
 8002a78:	3780      	adds	r7, #128	; 0x80
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40015824 	.word	0x40015824
 8002a84:	20004c8c 	.word	0x20004c8c
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40021400 	.word	0x40021400
 8002a94:	20000154 	.word	0x20000154
 8002a98:	40026470 	.word	0x40026470

08002a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <NMI_Handler+0x4>

08002aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa6:	e7fe      	b.n	8002aa6 <HardFault_Handler+0x4>

08002aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <MemManage_Handler+0x4>

08002aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab2:	e7fe      	b.n	8002ab2 <BusFault_Handler+0x4>

08002ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <UsageFault_Handler+0x4>

08002aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae8:	f000 f8f8 	bl	8002cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002af4:	4802      	ldr	r0, [pc, #8]	; (8002b00 <DMA1_Stream5_IRQHandler+0x10>)
 8002af6:	f000 fbdf 	bl	80032b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	2000033c 	.word	0x2000033c

08002b04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b08:	4802      	ldr	r0, [pc, #8]	; (8002b14 <TIM2_IRQHandler+0x10>)
 8002b0a:	f004 f809 	bl	8006b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	2000020c 	.word	0x2000020c

08002b18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b1c:	4802      	ldr	r0, [pc, #8]	; (8002b28 <USART2_IRQHandler+0x10>)
 8002b1e:	f004 fd5b 	bl	80075d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000298 	.word	0x20000298

08002b2c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8002b30:	4802      	ldr	r0, [pc, #8]	; (8002b3c <DMA2_Stream4_IRQHandler+0x10>)
 8002b32:	f000 fbc1 	bl	80032b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000154 	.word	0x20000154

08002b40 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002b44:	4802      	ldr	r0, [pc, #8]	; (8002b50 <DMA2_Stream7_IRQHandler+0x10>)
 8002b46:	f000 fbb7 	bl	80032b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	200002dc 	.word	0x200002dc

08002b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b5c:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <_sbrk+0x5c>)
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <_sbrk+0x60>)
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b68:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <_sbrk+0x64>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d102      	bne.n	8002b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <_sbrk+0x64>)
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <_sbrk+0x68>)
 8002b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <_sbrk+0x64>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d207      	bcs.n	8002b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b84:	f005 fe16 	bl	80087b4 <__errno>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b92:	e009      	b.n	8002ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b94:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <_sbrk+0x64>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <_sbrk+0x64>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4a05      	ldr	r2, [pc, #20]	; (8002bb8 <_sbrk+0x64>)
 8002ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20020000 	.word	0x20020000
 8002bb4:	00000400 	.word	0x00000400
 8002bb8:	20004c90 	.word	0x20004c90
 8002bbc:	20004ca8 	.word	0x20004ca8

08002bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <SystemInit+0x20>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bca:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <SystemInit+0x20>)
 8002bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002be8:	480d      	ldr	r0, [pc, #52]	; (8002c20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bea:	490e      	ldr	r1, [pc, #56]	; (8002c24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bec:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf0:	e002      	b.n	8002bf8 <LoopCopyDataInit>

08002bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bf6:	3304      	adds	r3, #4

08002bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bfc:	d3f9      	bcc.n	8002bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bfe:	4a0b      	ldr	r2, [pc, #44]	; (8002c2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c00:	4c0b      	ldr	r4, [pc, #44]	; (8002c30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c04:	e001      	b.n	8002c0a <LoopFillZerobss>

08002c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c08:	3204      	adds	r2, #4

08002c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c0c:	d3fb      	bcc.n	8002c06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c0e:	f7ff ffd7 	bl	8002bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c12:	f005 fdd5 	bl	80087c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c16:	f7fe fdcf 	bl	80017b8 <main>
  bx  lr    
 8002c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c24:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002c28:	080093f8 	.word	0x080093f8
  ldr r2, =_sbss
 8002c2c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002c30:	20004ca8 	.word	0x20004ca8

08002c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c34:	e7fe      	b.n	8002c34 <ADC_IRQHandler>
	...

08002c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <HAL_Init+0x40>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0d      	ldr	r2, [pc, #52]	; (8002c78 <HAL_Init+0x40>)
 8002c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_Init+0x40>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <HAL_Init+0x40>)
 8002c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <HAL_Init+0x40>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a07      	ldr	r2, [pc, #28]	; (8002c78 <HAL_Init+0x40>)
 8002c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c60:	2003      	movs	r0, #3
 8002c62:	f000 f94f 	bl	8002f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c66:	200f      	movs	r0, #15
 8002c68:	f000 f808 	bl	8002c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c6c:	f7ff fc9a 	bl	80025a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023c00 	.word	0x40023c00

08002c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c84:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <HAL_InitTick+0x54>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_InitTick+0x58>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f967 	bl	8002f6e <HAL_SYSTICK_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e00e      	b.n	8002cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b0f      	cmp	r3, #15
 8002cae:	d80a      	bhi.n	8002cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cb8:	f000 f92f 	bl	8002f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cbc:	4a06      	ldr	r2, [pc, #24]	; (8002cd8 <HAL_InitTick+0x5c>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000040 	.word	0x20000040
 8002cd4:	20000048 	.word	0x20000048
 8002cd8:	20000044 	.word	0x20000044

08002cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_IncTick+0x20>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_IncTick+0x24>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <HAL_IncTick+0x24>)
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000048 	.word	0x20000048
 8002d00:	20004c94 	.word	0x20004c94

08002d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return uwTick;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_GetTick+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20004c94 	.word	0x20004c94

08002d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff ffee 	bl	8002d04 <HAL_GetTick>
 8002d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d34:	d005      	beq.n	8002d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_Delay+0x44>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4413      	add	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d42:	bf00      	nop
 8002d44:	f7ff ffde 	bl	8002d04 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d8f7      	bhi.n	8002d44 <HAL_Delay+0x28>
  {
  }
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000048 	.word	0x20000048

08002d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d74:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d80:	4013      	ands	r3, r2
 8002d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d96:	4a04      	ldr	r2, [pc, #16]	; (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	60d3      	str	r3, [r2, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	f003 0307 	and.w	r3, r3, #7
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	db0b      	blt.n	8002df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	4907      	ldr	r1, [pc, #28]	; (8002e00 <__NVIC_EnableIRQ+0x38>)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	2001      	movs	r0, #1
 8002dea:	fa00 f202 	lsl.w	r2, r0, r2
 8002dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000e100 	.word	0xe000e100

08002e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	6039      	str	r1, [r7, #0]
 8002e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	db0a      	blt.n	8002e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	490c      	ldr	r1, [pc, #48]	; (8002e50 <__NVIC_SetPriority+0x4c>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	0112      	lsls	r2, r2, #4
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	440b      	add	r3, r1
 8002e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e2c:	e00a      	b.n	8002e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4908      	ldr	r1, [pc, #32]	; (8002e54 <__NVIC_SetPriority+0x50>)
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	3b04      	subs	r3, #4
 8002e3c:	0112      	lsls	r2, r2, #4
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	440b      	add	r3, r1
 8002e42:	761a      	strb	r2, [r3, #24]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000e100 	.word	0xe000e100
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	; 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f1c3 0307 	rsb	r3, r3, #7
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	bf28      	it	cs
 8002e76:	2304      	movcs	r3, #4
 8002e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	2b06      	cmp	r3, #6
 8002e80:	d902      	bls.n	8002e88 <NVIC_EncodePriority+0x30>
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3b03      	subs	r3, #3
 8002e86:	e000      	b.n	8002e8a <NVIC_EncodePriority+0x32>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43da      	mvns	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	43d9      	mvns	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb0:	4313      	orrs	r3, r2
         );
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3724      	adds	r7, #36	; 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ed0:	d301      	bcc.n	8002ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e00f      	b.n	8002ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed6:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <SysTick_Config+0x40>)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ede:	210f      	movs	r1, #15
 8002ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ee4:	f7ff ff8e 	bl	8002e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <SysTick_Config+0x40>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eee:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <SysTick_Config+0x40>)
 8002ef0:	2207      	movs	r2, #7
 8002ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	e000e010 	.word	0xe000e010

08002f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff ff29 	bl	8002d64 <__NVIC_SetPriorityGrouping>
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b086      	sub	sp, #24
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f2c:	f7ff ff3e 	bl	8002dac <__NVIC_GetPriorityGrouping>
 8002f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	6978      	ldr	r0, [r7, #20]
 8002f38:	f7ff ff8e 	bl	8002e58 <NVIC_EncodePriority>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff5d 	bl	8002e04 <__NVIC_SetPriority>
}
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff31 	bl	8002dc8 <__NVIC_EnableIRQ>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff ffa2 	bl	8002ec0 <SysTick_Config>
 8002f7c:	4603      	mov	r3, r0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f94:	f7ff feb6 	bl	8002d04 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e099      	b.n	80030d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fc4:	e00f      	b.n	8002fe6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fc6:	f7ff fe9d 	bl	8002d04 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b05      	cmp	r3, #5
 8002fd2:	d908      	bls.n	8002fe6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2203      	movs	r2, #3
 8002fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e078      	b.n	80030d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1e8      	bne.n	8002fc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4b38      	ldr	r3, [pc, #224]	; (80030e0 <HAL_DMA_Init+0x158>)
 8003000:	4013      	ands	r3, r2
 8003002:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003012:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800301e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800302a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	2b04      	cmp	r3, #4
 800303e:	d107      	bne.n	8003050 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	4313      	orrs	r3, r2
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f023 0307 	bic.w	r3, r3, #7
 8003066:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	2b04      	cmp	r3, #4
 8003078:	d117      	bne.n	80030aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00e      	beq.n	80030aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fb01 	bl	8003694 <DMA_CheckFifoParam>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2240      	movs	r2, #64	; 0x40
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030a6:	2301      	movs	r3, #1
 80030a8:	e016      	b.n	80030d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fab8 	bl	8003628 <DMA_CalcBaseAndBitshift>
 80030b8:	4603      	mov	r3, r0
 80030ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	223f      	movs	r2, #63	; 0x3f
 80030c2:	409a      	lsls	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	f010803f 	.word	0xf010803f

080030e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_DMA_Start_IT+0x26>
 8003106:	2302      	movs	r3, #2
 8003108:	e040      	b.n	800318c <HAL_DMA_Start_IT+0xa8>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b01      	cmp	r3, #1
 800311c:	d12f      	bne.n	800317e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2202      	movs	r2, #2
 8003122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 fa4a 	bl	80035cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	223f      	movs	r2, #63	; 0x3f
 800313e:	409a      	lsls	r2, r3
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0216 	orr.w	r2, r2, #22
 8003152:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	d007      	beq.n	800316c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0208 	orr.w	r2, r2, #8
 800316a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	e005      	b.n	800318a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003186:	2302      	movs	r3, #2
 8003188:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800318a:	7dfb      	ldrb	r3, [r7, #23]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031a2:	f7ff fdaf 	bl	8002d04 <HAL_GetTick>
 80031a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d008      	beq.n	80031c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e052      	b.n	800326c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0216 	bic.w	r2, r2, #22
 80031d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695a      	ldr	r2, [r3, #20]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <HAL_DMA_Abort+0x62>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0208 	bic.w	r2, r2, #8
 8003204:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0201 	bic.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003216:	e013      	b.n	8003240 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003218:	f7ff fd74 	bl	8002d04 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b05      	cmp	r3, #5
 8003224:	d90c      	bls.n	8003240 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2203      	movs	r2, #3
 8003230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e015      	b.n	800326c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1e4      	bne.n	8003218 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003252:	223f      	movs	r2, #63	; 0x3f
 8003254:	409a      	lsls	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d004      	beq.n	8003292 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2280      	movs	r2, #128	; 0x80
 800328c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e00c      	b.n	80032ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2205      	movs	r2, #5
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0201 	bic.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032c4:	4b8e      	ldr	r3, [pc, #568]	; (8003500 <HAL_DMA_IRQHandler+0x248>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a8e      	ldr	r2, [pc, #568]	; (8003504 <HAL_DMA_IRQHandler+0x24c>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	0a9b      	lsrs	r3, r3, #10
 80032d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	2208      	movs	r2, #8
 80032e4:	409a      	lsls	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01a      	beq.n	8003324 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d013      	beq.n	8003324 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0204 	bic.w	r2, r2, #4
 800330a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003310:	2208      	movs	r2, #8
 8003312:	409a      	lsls	r2, r3
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331c:	f043 0201 	orr.w	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003328:	2201      	movs	r2, #1
 800332a:	409a      	lsls	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d012      	beq.n	800335a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00b      	beq.n	800335a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	2201      	movs	r2, #1
 8003348:	409a      	lsls	r2, r3
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	f043 0202 	orr.w	r2, r3, #2
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335e:	2204      	movs	r2, #4
 8003360:	409a      	lsls	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d012      	beq.n	8003390 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00b      	beq.n	8003390 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	2204      	movs	r2, #4
 800337e:	409a      	lsls	r2, r3
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003388:	f043 0204 	orr.w	r2, r3, #4
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003394:	2210      	movs	r2, #16
 8003396:	409a      	lsls	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d043      	beq.n	8003428 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d03c      	beq.n	8003428 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b2:	2210      	movs	r2, #16
 80033b4:	409a      	lsls	r2, r3
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d018      	beq.n	80033fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d108      	bne.n	80033e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d024      	beq.n	8003428 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	4798      	blx	r3
 80033e6:	e01f      	b.n	8003428 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01b      	beq.n	8003428 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
 80033f8:	e016      	b.n	8003428 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d107      	bne.n	8003418 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0208 	bic.w	r2, r2, #8
 8003416:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	2220      	movs	r2, #32
 800342e:	409a      	lsls	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 808f 	beq.w	8003558 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8087 	beq.w	8003558 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	2220      	movs	r2, #32
 8003450:	409a      	lsls	r2, r3
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b05      	cmp	r3, #5
 8003460:	d136      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0216 	bic.w	r2, r2, #22
 8003470:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003480:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d103      	bne.n	8003492 <HAL_DMA_IRQHandler+0x1da>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348e:	2b00      	cmp	r3, #0
 8003490:	d007      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0208 	bic.w	r2, r2, #8
 80034a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a6:	223f      	movs	r2, #63	; 0x3f
 80034a8:	409a      	lsls	r2, r3
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d07e      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	4798      	blx	r3
        }
        return;
 80034ce:	e079      	b.n	80035c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01d      	beq.n	800351a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10d      	bne.n	8003508 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d031      	beq.n	8003558 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
 80034fc:	e02c      	b.n	8003558 <HAL_DMA_IRQHandler+0x2a0>
 80034fe:	bf00      	nop
 8003500:	20000040 	.word	0x20000040
 8003504:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d023      	beq.n	8003558 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	4798      	blx	r3
 8003518:	e01e      	b.n	8003558 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10f      	bne.n	8003548 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0210 	bic.w	r2, r2, #16
 8003536:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355c:	2b00      	cmp	r3, #0
 800355e:	d032      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d022      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2205      	movs	r2, #5
 8003570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	3301      	adds	r3, #1
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	429a      	cmp	r2, r3
 800358e:	d307      	bcc.n	80035a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f2      	bne.n	8003584 <HAL_DMA_IRQHandler+0x2cc>
 800359e:	e000      	b.n	80035a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
 80035c2:	e000      	b.n	80035c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80035c4:	bf00      	nop
    }
  }
}
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b40      	cmp	r3, #64	; 0x40
 80035f8:	d108      	bne.n	800360c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800360a:	e007      	b.n	800361c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	60da      	str	r2, [r3, #12]
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	3b10      	subs	r3, #16
 8003638:	4a14      	ldr	r2, [pc, #80]	; (800368c <DMA_CalcBaseAndBitshift+0x64>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	091b      	lsrs	r3, r3, #4
 8003640:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003642:	4a13      	ldr	r2, [pc, #76]	; (8003690 <DMA_CalcBaseAndBitshift+0x68>)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4413      	add	r3, r2
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b03      	cmp	r3, #3
 8003654:	d909      	bls.n	800366a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800365e:	f023 0303 	bic.w	r3, r3, #3
 8003662:	1d1a      	adds	r2, r3, #4
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	659a      	str	r2, [r3, #88]	; 0x58
 8003668:	e007      	b.n	800367a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003672:	f023 0303 	bic.w	r3, r3, #3
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	aaaaaaab 	.word	0xaaaaaaab
 8003690:	080093ac 	.word	0x080093ac

08003694 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d11f      	bne.n	80036ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d856      	bhi.n	8003762 <DMA_CheckFifoParam+0xce>
 80036b4:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <DMA_CheckFifoParam+0x28>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	080036cd 	.word	0x080036cd
 80036c0:	080036df 	.word	0x080036df
 80036c4:	080036cd 	.word	0x080036cd
 80036c8:	08003763 	.word	0x08003763
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d046      	beq.n	8003766 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036dc:	e043      	b.n	8003766 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036e6:	d140      	bne.n	800376a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ec:	e03d      	b.n	800376a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f6:	d121      	bne.n	800373c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d837      	bhi.n	800376e <DMA_CheckFifoParam+0xda>
 80036fe:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <DMA_CheckFifoParam+0x70>)
 8003700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003704:	08003715 	.word	0x08003715
 8003708:	0800371b 	.word	0x0800371b
 800370c:	08003715 	.word	0x08003715
 8003710:	0800372d 	.word	0x0800372d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      break;
 8003718:	e030      	b.n	800377c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d025      	beq.n	8003772 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372a:	e022      	b.n	8003772 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003734:	d11f      	bne.n	8003776 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800373a:	e01c      	b.n	8003776 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d903      	bls.n	800374a <DMA_CheckFifoParam+0xb6>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d003      	beq.n	8003750 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003748:	e018      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
      break;
 800374e:	e015      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00e      	beq.n	800377a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      break;
 8003760:	e00b      	b.n	800377a <DMA_CheckFifoParam+0xe6>
      break;
 8003762:	bf00      	nop
 8003764:	e00a      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;
 8003766:	bf00      	nop
 8003768:	e008      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;
 800376a:	bf00      	nop
 800376c:	e006      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;
 800376e:	bf00      	nop
 8003770:	e004      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;
 8003772:	bf00      	nop
 8003774:	e002      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;   
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;
 800377a:	bf00      	nop
    }
  } 
  
  return status; 
 800377c:	7bfb      	ldrb	r3, [r7, #15]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop

0800378c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800378c:	b480      	push	{r7}
 800378e:	b089      	sub	sp, #36	; 0x24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800379e:	2300      	movs	r3, #0
 80037a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	e165      	b.n	8003a74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037a8:	2201      	movs	r2, #1
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	f040 8154 	bne.w	8003a6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d005      	beq.n	80037de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d130      	bne.n	8003840 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	2203      	movs	r2, #3
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4013      	ands	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4313      	orrs	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003814:	2201      	movs	r2, #1
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 0201 	and.w	r2, r3, #1
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	2b03      	cmp	r3, #3
 800384a:	d017      	beq.n	800387c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	2203      	movs	r2, #3
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 0303 	and.w	r3, r3, #3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d123      	bne.n	80038d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	08da      	lsrs	r2, r3, #3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3208      	adds	r2, #8
 8003890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003894:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	220f      	movs	r2, #15
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	08da      	lsrs	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3208      	adds	r2, #8
 80038ca:	69b9      	ldr	r1, [r7, #24]
 80038cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	2203      	movs	r2, #3
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43db      	mvns	r3, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4013      	ands	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 0203 	and.w	r2, r3, #3
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80ae 	beq.w	8003a6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	4b5d      	ldr	r3, [pc, #372]	; (8003a8c <HAL_GPIO_Init+0x300>)
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	4a5c      	ldr	r2, [pc, #368]	; (8003a8c <HAL_GPIO_Init+0x300>)
 800391c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003920:	6453      	str	r3, [r2, #68]	; 0x44
 8003922:	4b5a      	ldr	r3, [pc, #360]	; (8003a8c <HAL_GPIO_Init+0x300>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800392e:	4a58      	ldr	r2, [pc, #352]	; (8003a90 <HAL_GPIO_Init+0x304>)
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	089b      	lsrs	r3, r3, #2
 8003934:	3302      	adds	r3, #2
 8003936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	220f      	movs	r2, #15
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4013      	ands	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a4f      	ldr	r2, [pc, #316]	; (8003a94 <HAL_GPIO_Init+0x308>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d025      	beq.n	80039a6 <HAL_GPIO_Init+0x21a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a4e      	ldr	r2, [pc, #312]	; (8003a98 <HAL_GPIO_Init+0x30c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d01f      	beq.n	80039a2 <HAL_GPIO_Init+0x216>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a4d      	ldr	r2, [pc, #308]	; (8003a9c <HAL_GPIO_Init+0x310>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d019      	beq.n	800399e <HAL_GPIO_Init+0x212>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a4c      	ldr	r2, [pc, #304]	; (8003aa0 <HAL_GPIO_Init+0x314>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <HAL_GPIO_Init+0x20e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a4b      	ldr	r2, [pc, #300]	; (8003aa4 <HAL_GPIO_Init+0x318>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00d      	beq.n	8003996 <HAL_GPIO_Init+0x20a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a4a      	ldr	r2, [pc, #296]	; (8003aa8 <HAL_GPIO_Init+0x31c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d007      	beq.n	8003992 <HAL_GPIO_Init+0x206>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a49      	ldr	r2, [pc, #292]	; (8003aac <HAL_GPIO_Init+0x320>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d101      	bne.n	800398e <HAL_GPIO_Init+0x202>
 800398a:	2306      	movs	r3, #6
 800398c:	e00c      	b.n	80039a8 <HAL_GPIO_Init+0x21c>
 800398e:	2307      	movs	r3, #7
 8003990:	e00a      	b.n	80039a8 <HAL_GPIO_Init+0x21c>
 8003992:	2305      	movs	r3, #5
 8003994:	e008      	b.n	80039a8 <HAL_GPIO_Init+0x21c>
 8003996:	2304      	movs	r3, #4
 8003998:	e006      	b.n	80039a8 <HAL_GPIO_Init+0x21c>
 800399a:	2303      	movs	r3, #3
 800399c:	e004      	b.n	80039a8 <HAL_GPIO_Init+0x21c>
 800399e:	2302      	movs	r3, #2
 80039a0:	e002      	b.n	80039a8 <HAL_GPIO_Init+0x21c>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <HAL_GPIO_Init+0x21c>
 80039a6:	2300      	movs	r3, #0
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	f002 0203 	and.w	r2, r2, #3
 80039ae:	0092      	lsls	r2, r2, #2
 80039b0:	4093      	lsls	r3, r2
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039b8:	4935      	ldr	r1, [pc, #212]	; (8003a90 <HAL_GPIO_Init+0x304>)
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	089b      	lsrs	r3, r3, #2
 80039be:	3302      	adds	r3, #2
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039c6:	4b3a      	ldr	r3, [pc, #232]	; (8003ab0 <HAL_GPIO_Init+0x324>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4013      	ands	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039ea:	4a31      	ldr	r2, [pc, #196]	; (8003ab0 <HAL_GPIO_Init+0x324>)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039f0:	4b2f      	ldr	r3, [pc, #188]	; (8003ab0 <HAL_GPIO_Init+0x324>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4013      	ands	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a14:	4a26      	ldr	r2, [pc, #152]	; (8003ab0 <HAL_GPIO_Init+0x324>)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a1a:	4b25      	ldr	r3, [pc, #148]	; (8003ab0 <HAL_GPIO_Init+0x324>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	43db      	mvns	r3, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4013      	ands	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a3e:	4a1c      	ldr	r2, [pc, #112]	; (8003ab0 <HAL_GPIO_Init+0x324>)
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a44:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <HAL_GPIO_Init+0x324>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a68:	4a11      	ldr	r2, [pc, #68]	; (8003ab0 <HAL_GPIO_Init+0x324>)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3301      	adds	r3, #1
 8003a72:	61fb      	str	r3, [r7, #28]
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2b0f      	cmp	r3, #15
 8003a78:	f67f ae96 	bls.w	80037a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	3724      	adds	r7, #36	; 0x24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40013800 	.word	0x40013800
 8003a94:	40020000 	.word	0x40020000
 8003a98:	40020400 	.word	0x40020400
 8003a9c:	40020800 	.word	0x40020800
 8003aa0:	40020c00 	.word	0x40020c00
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40021400 	.word	0x40021400
 8003aac:	40021800 	.word	0x40021800
 8003ab0:	40013c00 	.word	0x40013c00

08003ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	807b      	strh	r3, [r7, #2]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ac4:	787b      	ldrb	r3, [r7, #1]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aca:	887a      	ldrh	r2, [r7, #2]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ad0:	e003      	b.n	8003ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ad2:	887b      	ldrh	r3, [r7, #2]
 8003ad4:	041a      	lsls	r2, r3, #16
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	619a      	str	r2, [r3, #24]
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b085      	sub	sp, #20
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	460b      	mov	r3, r1
 8003af0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003af8:	887a      	ldrh	r2, [r7, #2]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4013      	ands	r3, r2
 8003afe:	041a      	lsls	r2, r3, #16
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	43d9      	mvns	r1, r3
 8003b04:	887b      	ldrh	r3, [r7, #2]
 8003b06:	400b      	ands	r3, r1
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	619a      	str	r2, [r3, #24]
}
 8003b0e:	bf00      	nop
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	603b      	str	r3, [r7, #0]
 8003b2a:	4b20      	ldr	r3, [pc, #128]	; (8003bac <HAL_PWREx_EnableOverDrive+0x90>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	4a1f      	ldr	r2, [pc, #124]	; (8003bac <HAL_PWREx_EnableOverDrive+0x90>)
 8003b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b34:	6413      	str	r3, [r2, #64]	; 0x40
 8003b36:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <HAL_PWREx_EnableOverDrive+0x90>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b42:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b48:	f7ff f8dc 	bl	8002d04 <HAL_GetTick>
 8003b4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b4e:	e009      	b.n	8003b64 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b50:	f7ff f8d8 	bl	8002d04 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b5e:	d901      	bls.n	8003b64 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e01f      	b.n	8003ba4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b64:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b70:	d1ee      	bne.n	8003b50 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b72:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b78:	f7ff f8c4 	bl	8002d04 <HAL_GetTick>
 8003b7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b7e:	e009      	b.n	8003b94 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b80:	f7ff f8c0 	bl	8002d04 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b8e:	d901      	bls.n	8003b94 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e007      	b.n	8003ba4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b94:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ba0:	d1ee      	bne.n	8003b80 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	420e0040 	.word	0x420e0040
 8003bb4:	40007000 	.word	0x40007000
 8003bb8:	420e0044 	.word	0x420e0044

08003bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0cc      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd0:	4b68      	ldr	r3, [pc, #416]	; (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 030f 	and.w	r3, r3, #15
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d90c      	bls.n	8003bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bde:	4b65      	ldr	r3, [pc, #404]	; (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b63      	ldr	r3, [pc, #396]	; (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0b8      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d020      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c10:	4b59      	ldr	r3, [pc, #356]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	4a58      	ldr	r2, [pc, #352]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c28:	4b53      	ldr	r3, [pc, #332]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4a52      	ldr	r2, [pc, #328]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c34:	4b50      	ldr	r3, [pc, #320]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	494d      	ldr	r1, [pc, #308]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d044      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d107      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5a:	4b47      	ldr	r3, [pc, #284]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d119      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e07f      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d003      	beq.n	8003c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d107      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7a:	4b3f      	ldr	r3, [pc, #252]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e06f      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8a:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e067      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c9a:	4b37      	ldr	r3, [pc, #220]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f023 0203 	bic.w	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4934      	ldr	r1, [pc, #208]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cac:	f7ff f82a 	bl	8002d04 <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb4:	f7ff f826 	bl	8002d04 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e04f      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cca:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 020c 	and.w	r2, r3, #12
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d1eb      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d20c      	bcs.n	8003d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b22      	ldr	r3, [pc, #136]	; (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf2:	4b20      	ldr	r3, [pc, #128]	; (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e032      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d10:	4b19      	ldr	r3, [pc, #100]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4916      	ldr	r1, [pc, #88]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d009      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d2e:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	490e      	ldr	r1, [pc, #56]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d42:	f000 fdc7 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8003d46:	4602      	mov	r2, r0
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	490a      	ldr	r1, [pc, #40]	; (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003d54:	5ccb      	ldrb	r3, [r1, r3]
 8003d56:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5a:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d5e:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <HAL_RCC_ClockConfig+0x1c8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fe ff8a 	bl	8002c7c <HAL_InitTick>

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40023c00 	.word	0x40023c00
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	08009394 	.word	0x08009394
 8003d80:	20000040 	.word	0x20000040
 8003d84:	20000044 	.word	0x20000044

08003d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d8c:	4b03      	ldr	r3, [pc, #12]	; (8003d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000040 	.word	0x20000040

08003da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003da4:	f7ff fff0 	bl	8003d88 <HAL_RCC_GetHCLKFreq>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	0a9b      	lsrs	r3, r3, #10
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	4903      	ldr	r1, [pc, #12]	; (8003dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003db6:	5ccb      	ldrb	r3, [r1, r3]
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	080093a4 	.word	0x080093a4

08003dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dcc:	f7ff ffdc 	bl	8003d88 <HAL_RCC_GetHCLKFreq>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	0b5b      	lsrs	r3, r3, #13
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	4903      	ldr	r1, [pc, #12]	; (8003dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dde:	5ccb      	ldrb	r3, [r1, r3]
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40023800 	.word	0x40023800
 8003dec:	080093a4 	.word	0x080093a4

08003df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08c      	sub	sp, #48	; 0x30
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d010      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003e28:	4b6f      	ldr	r3, [pc, #444]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e2e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	496c      	ldr	r1, [pc, #432]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003e46:	2301      	movs	r3, #1
 8003e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d010      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003e56:	4b64      	ldr	r3, [pc, #400]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e5c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e64:	4960      	ldr	r1, [pc, #384]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003e74:	2301      	movs	r3, #1
 8003e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d017      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e84:	4b58      	ldr	r3, [pc, #352]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	4955      	ldr	r1, [pc, #340]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d017      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ec0:	4b49      	ldr	r3, [pc, #292]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ece:	4946      	ldr	r1, [pc, #280]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003eec:	2301      	movs	r3, #1
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 808a 	beq.w	8004012 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	4b39      	ldr	r3, [pc, #228]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	4a38      	ldr	r2, [pc, #224]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0e:	4b36      	ldr	r3, [pc, #216]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f1a:	4b34      	ldr	r3, [pc, #208]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a33      	ldr	r2, [pc, #204]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f26:	f7fe feed 	bl	8002d04 <HAL_GetTick>
 8003f2a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f2e:	f7fe fee9 	bl	8002d04 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e278      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f40:	4b2a      	ldr	r3, [pc, #168]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f4c:	4b26      	ldr	r3, [pc, #152]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f54:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d02f      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f64:	6a3a      	ldr	r2, [r7, #32]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d028      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f6a:	4b1f      	ldr	r3, [pc, #124]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f72:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f74:	4b1e      	ldr	r3, [pc, #120]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f7a:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f80:	4a19      	ldr	r2, [pc, #100]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f86:	4b18      	ldr	r3, [pc, #96]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d114      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f92:	f7fe feb7 	bl	8002d04 <HAL_GetTick>
 8003f96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f98:	e00a      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f9a:	f7fe feb3 	bl	8002d04 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e240      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb0:	4b0d      	ldr	r3, [pc, #52]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0ee      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fc8:	d114      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003fca:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fde:	4902      	ldr	r1, [pc, #8]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	608b      	str	r3, [r1, #8]
 8003fe4:	e00c      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40007000 	.word	0x40007000
 8003ff0:	42470e40 	.word	0x42470e40
 8003ff4:	4b4a      	ldr	r3, [pc, #296]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4a49      	ldr	r2, [pc, #292]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ffa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ffe:	6093      	str	r3, [r2, #8]
 8004000:	4b47      	ldr	r3, [pc, #284]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004002:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400c:	4944      	ldr	r1, [pc, #272]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800400e:	4313      	orrs	r3, r2
 8004010:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004024:	4b3f      	ldr	r3, [pc, #252]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004026:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004034:	4b3a      	ldr	r3, [pc, #232]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800403a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004042:	4937      	ldr	r1, [pc, #220]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004056:	4b32      	ldr	r3, [pc, #200]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800405c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004064:	492e      	ldr	r1, [pc, #184]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d011      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004078:	4b29      	ldr	r3, [pc, #164]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800407a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800407e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	4926      	ldr	r1, [pc, #152]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004092:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004096:	d101      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004098:	2301      	movs	r3, #1
 800409a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80040a8:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	491a      	ldr	r1, [pc, #104]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d011      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80040ca:	4b15      	ldr	r3, [pc, #84]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d8:	4911      	ldr	r1, [pc, #68]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e8:	d101      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80040ea:	2301      	movs	r3, #1
 80040ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80040ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d005      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040fc:	f040 80ff 	bne.w	80042fe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004100:	4b09      	ldr	r3, [pc, #36]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004106:	f7fe fdfd 	bl	8002d04 <HAL_GetTick>
 800410a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800410c:	e00e      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800410e:	f7fe fdf9 	bl	8002d04 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d907      	bls.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e188      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004120:	40023800 	.word	0x40023800
 8004124:	424711e0 	.word	0x424711e0
 8004128:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800412c:	4b7e      	ldr	r3, [pc, #504]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1ea      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	2b00      	cmp	r3, #0
 800414a:	d009      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004154:	2b00      	cmp	r3, #0
 8004156:	d028      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d124      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004160:	4b71      	ldr	r3, [pc, #452]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004166:	0c1b      	lsrs	r3, r3, #16
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	3301      	adds	r3, #1
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004172:	4b6d      	ldr	r3, [pc, #436]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004178:	0e1b      	lsrs	r3, r3, #24
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	019b      	lsls	r3, r3, #6
 800418a:	431a      	orrs	r2, r3
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	085b      	lsrs	r3, r3, #1
 8004190:	3b01      	subs	r3, #1
 8004192:	041b      	lsls	r3, r3, #16
 8004194:	431a      	orrs	r2, r3
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	061b      	lsls	r3, r3, #24
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	071b      	lsls	r3, r3, #28
 80041a2:	4961      	ldr	r1, [pc, #388]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d004      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d035      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d4:	d130      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80041d6:	4b54      	ldr	r3, [pc, #336]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80041d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041dc:	0c1b      	lsrs	r3, r3, #16
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	3301      	adds	r3, #1
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041e8:	4b4f      	ldr	r3, [pc, #316]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80041ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ee:	0f1b      	lsrs	r3, r3, #28
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	019b      	lsls	r3, r3, #6
 8004200:	431a      	orrs	r2, r3
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	085b      	lsrs	r3, r3, #1
 8004206:	3b01      	subs	r3, #1
 8004208:	041b      	lsls	r3, r3, #16
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	061b      	lsls	r3, r3, #24
 8004212:	431a      	orrs	r2, r3
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	071b      	lsls	r3, r3, #28
 8004218:	4943      	ldr	r1, [pc, #268]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004220:	4b41      	ldr	r3, [pc, #260]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004226:	f023 021f 	bic.w	r2, r3, #31
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422e:	3b01      	subs	r3, #1
 8004230:	493d      	ldr	r1, [pc, #244]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004240:	2b00      	cmp	r3, #0
 8004242:	d029      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800424c:	d124      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800424e:	4b36      	ldr	r3, [pc, #216]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004254:	0c1b      	lsrs	r3, r3, #16
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	3301      	adds	r3, #1
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004260:	4b31      	ldr	r3, [pc, #196]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004266:	0f1b      	lsrs	r3, r3, #28
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	019b      	lsls	r3, r3, #6
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	3b01      	subs	r3, #1
 8004282:	041b      	lsls	r3, r3, #16
 8004284:	431a      	orrs	r2, r3
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	061b      	lsls	r3, r3, #24
 800428a:	431a      	orrs	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	071b      	lsls	r3, r3, #28
 8004290:	4925      	ldr	r1, [pc, #148]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d016      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	019b      	lsls	r3, r3, #6
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	3b01      	subs	r3, #1
 80042b8:	041b      	lsls	r3, r3, #16
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	061b      	lsls	r3, r3, #24
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	071b      	lsls	r3, r3, #28
 80042ca:	4917      	ldr	r1, [pc, #92]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042d2:	4b16      	ldr	r3, [pc, #88]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042d8:	f7fe fd14 	bl	8002d04 <HAL_GetTick>
 80042dc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042e0:	f7fe fd10 	bl	8002d04 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e09f      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042f2:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	2b01      	cmp	r3, #1
 8004302:	f040 8095 	bne.w	8004430 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800430c:	f7fe fcfa 	bl	8002d04 <HAL_GetTick>
 8004310:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004312:	e00f      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004314:	f7fe fcf6 	bl	8002d04 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d908      	bls.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e085      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004326:	bf00      	nop
 8004328:	40023800 	.word	0x40023800
 800432c:	42470068 	.word	0x42470068
 8004330:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004334:	4b41      	ldr	r3, [pc, #260]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800433c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004340:	d0e8      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800435e:	2b00      	cmp	r3, #0
 8004360:	d02b      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004366:	2b00      	cmp	r3, #0
 8004368:	d127      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800436a:	4b34      	ldr	r3, [pc, #208]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	0c1b      	lsrs	r3, r3, #16
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	3301      	adds	r3, #1
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699a      	ldr	r2, [r3, #24]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	019b      	lsls	r3, r3, #6
 8004386:	431a      	orrs	r2, r3
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	3b01      	subs	r3, #1
 800438e:	041b      	lsls	r3, r3, #16
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	061b      	lsls	r3, r3, #24
 8004398:	4928      	ldr	r1, [pc, #160]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043a0:	4b26      	ldr	r3, [pc, #152]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043a6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	3b01      	subs	r3, #1
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	4922      	ldr	r1, [pc, #136]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01d      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043ce:	d118      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043d0:	4b1a      	ldr	r3, [pc, #104]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	0e1b      	lsrs	r3, r3, #24
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	019b      	lsls	r3, r3, #6
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	085b      	lsrs	r3, r3, #1
 80043f0:	3b01      	subs	r3, #1
 80043f2:	041b      	lsls	r3, r3, #16
 80043f4:	431a      	orrs	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	061b      	lsls	r3, r3, #24
 80043fa:	4910      	ldr	r1, [pc, #64]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004402:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004404:	2201      	movs	r2, #1
 8004406:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004408:	f7fe fc7c 	bl	8002d04 <HAL_GetTick>
 800440c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004410:	f7fe fc78 	bl	8002d04 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e007      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004422:	4b06      	ldr	r3, [pc, #24]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800442a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800442e:	d1ef      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3730      	adds	r7, #48	; 0x30
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800
 8004440:	42470070 	.word	0x42470070

08004444 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004444:	b480      	push	{r7}
 8004446:	b089      	sub	sp, #36	; 0x24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3b01      	subs	r3, #1
 8004468:	2b07      	cmp	r3, #7
 800446a:	f200 8224 	bhi.w	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	08004677 	.word	0x08004677
 8004478:	080047a1 	.word	0x080047a1
 800447c:	080048b7 	.word	0x080048b7
 8004480:	08004495 	.word	0x08004495
 8004484:	080048b7 	.word	0x080048b7
 8004488:	080048b7 	.word	0x080048b7
 800448c:	080048b7 	.word	0x080048b7
 8004490:	08004495 	.word	0x08004495
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8004494:	4ba8      	ldr	r3, [pc, #672]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800449a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044aa:	f000 80d6 	beq.w	800465a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044b4:	f200 80dd 	bhi.w	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044be:	f000 809f 	beq.w	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044c8:	f200 80d3 	bhi.w	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044d2:	d05b      	beq.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044da:	f200 80ca 	bhi.w	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044e4:	f000 80b6 	beq.w	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044ee:	f200 80c0 	bhi.w	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044f8:	f000 8082 	beq.w	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004502:	f200 80b6 	bhi.w	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d004      	beq.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004512:	d03b      	beq.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8004514:	e0ad      	b.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004516:	4b88      	ldr	r3, [pc, #544]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8004522:	4b85      	ldr	r3, [pc, #532]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800452c:	4a83      	ldr	r2, [pc, #524]	; (800473c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800452e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	e008      	b.n	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8004536:	4b80      	ldr	r3, [pc, #512]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004540:	4a7f      	ldr	r2, [pc, #508]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004542:	fbb2 f3f3 	udiv	r3, r2, r3
 8004546:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8004548:	4b7b      	ldr	r3, [pc, #492]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454e:	0e1b      	lsrs	r3, r3, #24
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8004556:	4b78      	ldr	r3, [pc, #480]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	099b      	lsrs	r3, r3, #6
 800455e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	fb03 f202 	mul.w	r2, r3, r2
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	fbb2 f3f3 	udiv	r3, r2, r3
 800456e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8004570:	4b71      	ldr	r3, [pc, #452]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004576:	0a1b      	lsrs	r3, r3, #8
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	3301      	adds	r3, #1
 800457e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	fbb2 f3f3 	udiv	r3, r2, r3
 8004588:	61fb      	str	r3, [r7, #28]
          break;
 800458a:	e073      	b.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800458c:	4b6a      	ldr	r3, [pc, #424]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d109      	bne.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004598:	4b67      	ldr	r3, [pc, #412]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800459a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800459e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045a2:	4a66      	ldr	r2, [pc, #408]	; (800473c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80045a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	e008      	b.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80045ac:	4b62      	ldr	r3, [pc, #392]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80045ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045b6:	4a62      	ldr	r2, [pc, #392]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80045be:	4b5e      	ldr	r3, [pc, #376]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80045c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c4:	0e1b      	lsrs	r3, r3, #24
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80045cc:	4b5a      	ldr	r3, [pc, #360]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80045ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d2:	099b      	lsrs	r3, r3, #6
 80045d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	fb03 f202 	mul.w	r2, r3, r2
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80045e6:	4b54      	ldr	r3, [pc, #336]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80045e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	3301      	adds	r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80045f4:	69fa      	ldr	r2, [r7, #28]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	61fb      	str	r3, [r7, #28]
          break;
 80045fe:	e039      	b.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004600:	4b4d      	ldr	r3, [pc, #308]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d108      	bne.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800460c:	4b4a      	ldr	r3, [pc, #296]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004614:	4a49      	ldr	r2, [pc, #292]	; (800473c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004616:	fbb2 f3f3 	udiv	r3, r2, r3
 800461a:	61bb      	str	r3, [r7, #24]
 800461c:	e007      	b.n	800462e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800461e:	4b46      	ldr	r3, [pc, #280]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004626:	4a46      	ldr	r2, [pc, #280]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004628:	fbb2 f3f3 	udiv	r3, r2, r3
 800462c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800462e:	4b42      	ldr	r3, [pc, #264]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	0f1b      	lsrs	r3, r3, #28
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800463a:	4b3f      	ldr	r3, [pc, #252]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	099b      	lsrs	r3, r3, #6
 8004640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	fb03 f202 	mul.w	r2, r3, r2
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004650:	61fb      	str	r3, [r7, #28]
          break;
 8004652:	e00f      	b.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004654:	4b3b      	ldr	r3, [pc, #236]	; (8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004656:	61fb      	str	r3, [r7, #28]
          break;
 8004658:	e00c      	b.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800465a:	4b37      	ldr	r3, [pc, #220]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8004666:	4b35      	ldr	r3, [pc, #212]	; (800473c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004668:	61fb      	str	r3, [r7, #28]
          break;
 800466a:	e003      	b.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 800466c:	4b34      	ldr	r3, [pc, #208]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800466e:	61fb      	str	r3, [r7, #28]
          break;
 8004670:	e000      	b.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8004672:	bf00      	nop
        }
      }
      break;
 8004674:	e11f      	b.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8004676:	4b30      	ldr	r3, [pc, #192]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800467c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004688:	d079      	beq.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004690:	f200 8082 	bhi.w	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800469a:	d03c      	beq.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046a2:	d879      	bhi.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d006      	beq.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046b0:	d172      	bne.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80046b2:	4b24      	ldr	r3, [pc, #144]	; (8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80046b4:	61fb      	str	r3, [r7, #28]
          break;
 80046b6:	e072      	b.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046b8:	4b1f      	ldr	r3, [pc, #124]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046c4:	d109      	bne.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80046c6:	4b1c      	ldr	r3, [pc, #112]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d0:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80046d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d6:	61bb      	str	r3, [r7, #24]
 80046d8:	e008      	b.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80046da:	4b17      	ldr	r3, [pc, #92]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046e4:	4a15      	ldr	r2, [pc, #84]	; (800473c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ea:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80046ec:	4b12      	ldr	r3, [pc, #72]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f2:	099b      	lsrs	r3, r3, #6
 80046f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	fb02 f303 	mul.w	r3, r2, r3
 80046fe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004700:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004706:	0f1b      	lsrs	r3, r3, #28
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004712:	61fb      	str	r3, [r7, #28]
          break;
 8004714:	e043      	b.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004716:	4b08      	ldr	r3, [pc, #32]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004722:	d111      	bne.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004724:	4b04      	ldr	r3, [pc, #16]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800472c:	4a04      	ldr	r2, [pc, #16]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800472e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	e010      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004736:	bf00      	nop
 8004738:	40023800 	.word	0x40023800
 800473c:	00f42400 	.word	0x00f42400
 8004740:	017d7840 	.word	0x017d7840
 8004744:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004748:	4b5e      	ldr	r3, [pc, #376]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004750:	4a5d      	ldr	r2, [pc, #372]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004752:	fbb2 f3f3 	udiv	r3, r2, r3
 8004756:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004758:	4b5a      	ldr	r3, [pc, #360]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	099b      	lsrs	r3, r3, #6
 800475e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	fb02 f303 	mul.w	r3, r2, r3
 8004768:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800476a:	4b56      	ldr	r3, [pc, #344]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	0f1b      	lsrs	r3, r3, #28
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	fbb2 f3f3 	udiv	r3, r2, r3
 800477a:	61fb      	str	r3, [r7, #28]
          break;
 800477c:	e00f      	b.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800477e:	4b51      	ldr	r3, [pc, #324]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800478a:	d102      	bne.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 800478c:	4b4f      	ldr	r3, [pc, #316]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800478e:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004790:	e005      	b.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8004792:	4b4d      	ldr	r3, [pc, #308]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004794:	61fb      	str	r3, [r7, #28]
          break;
 8004796:	e002      	b.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	61fb      	str	r3, [r7, #28]
          break;
 800479c:	bf00      	nop
        }
      }
      break;
 800479e:	e08a      	b.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80047a0:	4b48      	ldr	r3, [pc, #288]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80047a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a6:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80047b2:	d06f      	beq.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80047ba:	d878      	bhi.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047c2:	d03c      	beq.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ca:	d870      	bhi.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d006      	beq.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047d8:	d169      	bne.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047da:	4b3d      	ldr	r3, [pc, #244]	; (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80047dc:	61fb      	str	r3, [r7, #28]
          break;
 80047de:	e069      	b.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047e0:	4b38      	ldr	r3, [pc, #224]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ec:	d109      	bne.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80047ee:	4b35      	ldr	r3, [pc, #212]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80047f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f8:	4a34      	ldr	r2, [pc, #208]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80047fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fe:	61bb      	str	r3, [r7, #24]
 8004800:	e008      	b.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004802:	4b30      	ldr	r3, [pc, #192]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800480c:	4a2e      	ldr	r2, [pc, #184]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800480e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004812:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004814:	4b2b      	ldr	r3, [pc, #172]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800481a:	099b      	lsrs	r3, r3, #6
 800481c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004828:	4b26      	ldr	r3, [pc, #152]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800482a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482e:	0f1b      	lsrs	r3, r3, #28
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	fbb2 f3f3 	udiv	r3, r2, r3
 800483a:	61fb      	str	r3, [r7, #28]
          break;
 800483c:	e03a      	b.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800483e:	4b21      	ldr	r3, [pc, #132]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800484a:	d108      	bne.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800484c:	4b1d      	ldr	r3, [pc, #116]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004854:	4a1d      	ldr	r2, [pc, #116]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004856:	fbb2 f3f3 	udiv	r3, r2, r3
 800485a:	61bb      	str	r3, [r7, #24]
 800485c:	e007      	b.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800485e:	4b19      	ldr	r3, [pc, #100]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004866:	4a18      	ldr	r2, [pc, #96]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800486e:	4b15      	ldr	r3, [pc, #84]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	099b      	lsrs	r3, r3, #6
 8004874:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	fb02 f303 	mul.w	r3, r2, r3
 800487e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004880:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	0f1b      	lsrs	r3, r3, #28
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	61fb      	str	r3, [r7, #28]
          break;
 8004892:	e00f      	b.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a0:	d102      	bne.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 80048a2:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80048a4:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80048a6:	e005      	b.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80048a8:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80048aa:	61fb      	str	r3, [r7, #28]
          break;
 80048ac:	e002      	b.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
          break;
 80048b2:	bf00      	nop
        }
      }
      break;
 80048b4:	bf00      	nop
    }
  }
  return frequency;
 80048b6:	69fb      	ldr	r3, [r7, #28]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3724      	adds	r7, #36	; 0x24
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	40023800 	.word	0x40023800
 80048c8:	00f42400 	.word	0x00f42400
 80048cc:	017d7840 	.word	0x017d7840
 80048d0:	00bb8000 	.word	0x00bb8000

080048d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d8:	b0a6      	sub	sp, #152	; 0x98
 80048da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048fa:	4bc8      	ldr	r3, [pc, #800]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x348>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	2b0c      	cmp	r3, #12
 8004904:	f200 817e 	bhi.w	8004c04 <HAL_RCC_GetSysClockFreq+0x330>
 8004908:	a201      	add	r2, pc, #4	; (adr r2, 8004910 <HAL_RCC_GetSysClockFreq+0x3c>)
 800490a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490e:	bf00      	nop
 8004910:	08004945 	.word	0x08004945
 8004914:	08004c05 	.word	0x08004c05
 8004918:	08004c05 	.word	0x08004c05
 800491c:	08004c05 	.word	0x08004c05
 8004920:	0800494d 	.word	0x0800494d
 8004924:	08004c05 	.word	0x08004c05
 8004928:	08004c05 	.word	0x08004c05
 800492c:	08004c05 	.word	0x08004c05
 8004930:	08004955 	.word	0x08004955
 8004934:	08004c05 	.word	0x08004c05
 8004938:	08004c05 	.word	0x08004c05
 800493c:	08004c05 	.word	0x08004c05
 8004940:	08004abf 	.word	0x08004abf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004944:	4bb6      	ldr	r3, [pc, #728]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004946:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800494a:	e15f      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800494c:	4bb5      	ldr	r3, [pc, #724]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x350>)
 800494e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004952:	e15b      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004954:	4bb1      	ldr	r3, [pc, #708]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x348>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800495c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004960:	4bae      	ldr	r3, [pc, #696]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x348>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d031      	beq.n	80049d0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800496c:	4bab      	ldr	r3, [pc, #684]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x348>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	099b      	lsrs	r3, r3, #6
 8004972:	2200      	movs	r2, #0
 8004974:	66bb      	str	r3, [r7, #104]	; 0x68
 8004976:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800497a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497e:	663b      	str	r3, [r7, #96]	; 0x60
 8004980:	2300      	movs	r3, #0
 8004982:	667b      	str	r3, [r7, #100]	; 0x64
 8004984:	4ba7      	ldr	r3, [pc, #668]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x350>)
 8004986:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800498a:	462a      	mov	r2, r5
 800498c:	fb03 f202 	mul.w	r2, r3, r2
 8004990:	2300      	movs	r3, #0
 8004992:	4621      	mov	r1, r4
 8004994:	fb01 f303 	mul.w	r3, r1, r3
 8004998:	4413      	add	r3, r2
 800499a:	4aa2      	ldr	r2, [pc, #648]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x350>)
 800499c:	4621      	mov	r1, r4
 800499e:	fba1 1202 	umull	r1, r2, r1, r2
 80049a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049a4:	460a      	mov	r2, r1
 80049a6:	67ba      	str	r2, [r7, #120]	; 0x78
 80049a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80049aa:	4413      	add	r3, r2
 80049ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80049ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049b2:	2200      	movs	r2, #0
 80049b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80049b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80049b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049bc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80049c0:	f7fb fc7e 	bl	80002c0 <__aeabi_uldivmod>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4613      	mov	r3, r2
 80049ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049ce:	e064      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d0:	4b92      	ldr	r3, [pc, #584]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x348>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	099b      	lsrs	r3, r3, #6
 80049d6:	2200      	movs	r2, #0
 80049d8:	653b      	str	r3, [r7, #80]	; 0x50
 80049da:	657a      	str	r2, [r7, #84]	; 0x54
 80049dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049e4:	2300      	movs	r3, #0
 80049e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049e8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80049ec:	4622      	mov	r2, r4
 80049ee:	462b      	mov	r3, r5
 80049f0:	f04f 0000 	mov.w	r0, #0
 80049f4:	f04f 0100 	mov.w	r1, #0
 80049f8:	0159      	lsls	r1, r3, #5
 80049fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049fe:	0150      	lsls	r0, r2, #5
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4621      	mov	r1, r4
 8004a06:	1a51      	subs	r1, r2, r1
 8004a08:	6139      	str	r1, [r7, #16]
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	eb63 0301 	sbc.w	r3, r3, r1
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a1e:	4659      	mov	r1, fp
 8004a20:	018b      	lsls	r3, r1, #6
 8004a22:	4651      	mov	r1, sl
 8004a24:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a28:	4651      	mov	r1, sl
 8004a2a:	018a      	lsls	r2, r1, #6
 8004a2c:	4651      	mov	r1, sl
 8004a2e:	ebb2 0801 	subs.w	r8, r2, r1
 8004a32:	4659      	mov	r1, fp
 8004a34:	eb63 0901 	sbc.w	r9, r3, r1
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a4c:	4690      	mov	r8, r2
 8004a4e:	4699      	mov	r9, r3
 8004a50:	4623      	mov	r3, r4
 8004a52:	eb18 0303 	adds.w	r3, r8, r3
 8004a56:	60bb      	str	r3, [r7, #8]
 8004a58:	462b      	mov	r3, r5
 8004a5a:	eb49 0303 	adc.w	r3, r9, r3
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	028b      	lsls	r3, r1, #10
 8004a70:	4621      	mov	r1, r4
 8004a72:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a76:	4621      	mov	r1, r4
 8004a78:	028a      	lsls	r2, r1, #10
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a82:	2200      	movs	r2, #0
 8004a84:	643b      	str	r3, [r7, #64]	; 0x40
 8004a86:	647a      	str	r2, [r7, #68]	; 0x44
 8004a88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a8c:	f7fb fc18 	bl	80002c0 <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4613      	mov	r3, r2
 8004a96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a9a:	4b60      	ldr	r3, [pc, #384]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x348>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	0c1b      	lsrs	r3, r3, #16
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004aac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004abc:	e0a6      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004abe:	4b57      	ldr	r3, [pc, #348]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x348>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ac6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aca:	4b54      	ldr	r3, [pc, #336]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x348>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d02a      	beq.n	8004b2c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad6:	4b51      	ldr	r3, [pc, #324]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x348>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	099b      	lsrs	r3, r3, #6
 8004adc:	2200      	movs	r2, #0
 8004ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ae0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ae8:	2100      	movs	r1, #0
 8004aea:	4b4e      	ldr	r3, [pc, #312]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x350>)
 8004aec:	fb03 f201 	mul.w	r2, r3, r1
 8004af0:	2300      	movs	r3, #0
 8004af2:	fb00 f303 	mul.w	r3, r0, r3
 8004af6:	4413      	add	r3, r2
 8004af8:	4a4a      	ldr	r2, [pc, #296]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x350>)
 8004afa:	fba0 1202 	umull	r1, r2, r0, r2
 8004afe:	677a      	str	r2, [r7, #116]	; 0x74
 8004b00:	460a      	mov	r2, r1
 8004b02:	673a      	str	r2, [r7, #112]	; 0x70
 8004b04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004b06:	4413      	add	r3, r2
 8004b08:	677b      	str	r3, [r7, #116]	; 0x74
 8004b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b0e:	2200      	movs	r2, #0
 8004b10:	633b      	str	r3, [r7, #48]	; 0x30
 8004b12:	637a      	str	r2, [r7, #52]	; 0x34
 8004b14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b18:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004b1c:	f7fb fbd0 	bl	80002c0 <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4613      	mov	r3, r2
 8004b26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b2a:	e05b      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2c:	4b3b      	ldr	r3, [pc, #236]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x348>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	099b      	lsrs	r3, r3, #6
 8004b32:	2200      	movs	r2, #0
 8004b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3e:	623b      	str	r3, [r7, #32]
 8004b40:	2300      	movs	r3, #0
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
 8004b44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b48:	4642      	mov	r2, r8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	f04f 0000 	mov.w	r0, #0
 8004b50:	f04f 0100 	mov.w	r1, #0
 8004b54:	0159      	lsls	r1, r3, #5
 8004b56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b5a:	0150      	lsls	r0, r2, #5
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4641      	mov	r1, r8
 8004b62:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b66:	4649      	mov	r1, r9
 8004b68:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b80:	ebb2 040a 	subs.w	r4, r2, sl
 8004b84:	eb63 050b 	sbc.w	r5, r3, fp
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	00eb      	lsls	r3, r5, #3
 8004b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b96:	00e2      	lsls	r2, r4, #3
 8004b98:	4614      	mov	r4, r2
 8004b9a:	461d      	mov	r5, r3
 8004b9c:	4643      	mov	r3, r8
 8004b9e:	18e3      	adds	r3, r4, r3
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	eb45 0303 	adc.w	r3, r5, r3
 8004ba8:	607b      	str	r3, [r7, #4]
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	028b      	lsls	r3, r1, #10
 8004bba:	4621      	mov	r1, r4
 8004bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	028a      	lsls	r2, r1, #10
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bcc:	2200      	movs	r2, #0
 8004bce:	61bb      	str	r3, [r7, #24]
 8004bd0:	61fa      	str	r2, [r7, #28]
 8004bd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bd6:	f7fb fb73 	bl	80002c0 <__aeabi_uldivmod>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4613      	mov	r3, r2
 8004be0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004be4:	4b0d      	ldr	r3, [pc, #52]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x348>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	0f1b      	lsrs	r3, r3, #28
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004bf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004c02:	e003      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c04:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004c0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3798      	adds	r7, #152	; 0x98
 8004c14:	46bd      	mov	sp, r7
 8004c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	00f42400 	.word	0x00f42400
 8004c24:	017d7840 	.word	0x017d7840

08004c28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e28d      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 8083 	beq.w	8004d4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c48:	4b94      	ldr	r3, [pc, #592]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 030c 	and.w	r3, r3, #12
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d019      	beq.n	8004c88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c54:	4b91      	ldr	r3, [pc, #580]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d106      	bne.n	8004c6e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c60:	4b8e      	ldr	r3, [pc, #568]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c6c:	d00c      	beq.n	8004c88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c6e:	4b8b      	ldr	r3, [pc, #556]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c76:	2b0c      	cmp	r3, #12
 8004c78:	d112      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c7a:	4b88      	ldr	r3, [pc, #544]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c86:	d10b      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c88:	4b84      	ldr	r3, [pc, #528]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d05b      	beq.n	8004d4c <HAL_RCC_OscConfig+0x124>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d157      	bne.n	8004d4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e25a      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca8:	d106      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x90>
 8004caa:	4b7c      	ldr	r3, [pc, #496]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a7b      	ldr	r2, [pc, #492]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	e01d      	b.n	8004cf4 <HAL_RCC_OscConfig+0xcc>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cc0:	d10c      	bne.n	8004cdc <HAL_RCC_OscConfig+0xb4>
 8004cc2:	4b76      	ldr	r3, [pc, #472]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a75      	ldr	r2, [pc, #468]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	4b73      	ldr	r3, [pc, #460]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a72      	ldr	r2, [pc, #456]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	e00b      	b.n	8004cf4 <HAL_RCC_OscConfig+0xcc>
 8004cdc:	4b6f      	ldr	r3, [pc, #444]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a6e      	ldr	r2, [pc, #440]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	4b6c      	ldr	r3, [pc, #432]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a6b      	ldr	r2, [pc, #428]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d013      	beq.n	8004d24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fe f802 	bl	8002d04 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d04:	f7fd fffe 	bl	8002d04 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	; 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e21f      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d16:	4b61      	ldr	r3, [pc, #388]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0xdc>
 8004d22:	e014      	b.n	8004d4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fd ffee 	bl	8002d04 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d2c:	f7fd ffea 	bl	8002d04 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	; 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e20b      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d3e:	4b57      	ldr	r3, [pc, #348]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x104>
 8004d4a:	e000      	b.n	8004d4e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d06f      	beq.n	8004e3a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d5a:	4b50      	ldr	r3, [pc, #320]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d017      	beq.n	8004d96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d66:	4b4d      	ldr	r3, [pc, #308]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d105      	bne.n	8004d7e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d72:	4b4a      	ldr	r3, [pc, #296]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00b      	beq.n	8004d96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d7e:	4b47      	ldr	r3, [pc, #284]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d11c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d8a:	4b44      	ldr	r3, [pc, #272]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d116      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d96:	4b41      	ldr	r3, [pc, #260]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <HAL_RCC_OscConfig+0x186>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d001      	beq.n	8004dae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e1d3      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dae:	4b3b      	ldr	r3, [pc, #236]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4937      	ldr	r1, [pc, #220]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc2:	e03a      	b.n	8004e3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d020      	beq.n	8004e0e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dcc:	4b34      	ldr	r3, [pc, #208]	; (8004ea0 <HAL_RCC_OscConfig+0x278>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd2:	f7fd ff97 	bl	8002d04 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dda:	f7fd ff93 	bl	8002d04 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e1b4      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dec:	4b2b      	ldr	r3, [pc, #172]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0f0      	beq.n	8004dda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df8:	4b28      	ldr	r3, [pc, #160]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4925      	ldr	r1, [pc, #148]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	600b      	str	r3, [r1, #0]
 8004e0c:	e015      	b.n	8004e3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e0e:	4b24      	ldr	r3, [pc, #144]	; (8004ea0 <HAL_RCC_OscConfig+0x278>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fd ff76 	bl	8002d04 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e1c:	f7fd ff72 	bl	8002d04 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e193      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e2e:	4b1b      	ldr	r3, [pc, #108]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d036      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d016      	beq.n	8004e7c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e4e:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e54:	f7fd ff56 	bl	8002d04 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e5c:	f7fd ff52 	bl	8002d04 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e173      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x234>
 8004e7a:	e01b      	b.n	8004eb4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e82:	f7fd ff3f 	bl	8002d04 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e88:	e00e      	b.n	8004ea8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e8a:	f7fd ff3b 	bl	8002d04 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d907      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e15c      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	42470000 	.word	0x42470000
 8004ea4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea8:	4b8a      	ldr	r3, [pc, #552]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1ea      	bne.n	8004e8a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 8097 	beq.w	8004ff0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ec6:	4b83      	ldr	r3, [pc, #524]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10f      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	4b7f      	ldr	r3, [pc, #508]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	4a7e      	ldr	r2, [pc, #504]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee2:	4b7c      	ldr	r3, [pc, #496]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef2:	4b79      	ldr	r3, [pc, #484]	; (80050d8 <HAL_RCC_OscConfig+0x4b0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d118      	bne.n	8004f30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004efe:	4b76      	ldr	r3, [pc, #472]	; (80050d8 <HAL_RCC_OscConfig+0x4b0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a75      	ldr	r2, [pc, #468]	; (80050d8 <HAL_RCC_OscConfig+0x4b0>)
 8004f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f0a:	f7fd fefb 	bl	8002d04 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f12:	f7fd fef7 	bl	8002d04 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e118      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f24:	4b6c      	ldr	r3, [pc, #432]	; (80050d8 <HAL_RCC_OscConfig+0x4b0>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0x31e>
 8004f38:	4b66      	ldr	r3, [pc, #408]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3c:	4a65      	ldr	r2, [pc, #404]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	6713      	str	r3, [r2, #112]	; 0x70
 8004f44:	e01c      	b.n	8004f80 <HAL_RCC_OscConfig+0x358>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b05      	cmp	r3, #5
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCC_OscConfig+0x340>
 8004f4e:	4b61      	ldr	r3, [pc, #388]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	4a60      	ldr	r2, [pc, #384]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f54:	f043 0304 	orr.w	r3, r3, #4
 8004f58:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5a:	4b5e      	ldr	r3, [pc, #376]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	4a5d      	ldr	r2, [pc, #372]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	6713      	str	r3, [r2, #112]	; 0x70
 8004f66:	e00b      	b.n	8004f80 <HAL_RCC_OscConfig+0x358>
 8004f68:	4b5a      	ldr	r3, [pc, #360]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6c:	4a59      	ldr	r2, [pc, #356]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	6713      	str	r3, [r2, #112]	; 0x70
 8004f74:	4b57      	ldr	r3, [pc, #348]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f78:	4a56      	ldr	r2, [pc, #344]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f7a:	f023 0304 	bic.w	r3, r3, #4
 8004f7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d015      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fd febc 	bl	8002d04 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f90:	f7fd feb8 	bl	8002d04 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e0d7      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa6:	4b4b      	ldr	r3, [pc, #300]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0ee      	beq.n	8004f90 <HAL_RCC_OscConfig+0x368>
 8004fb2:	e014      	b.n	8004fde <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb4:	f7fd fea6 	bl	8002d04 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fba:	e00a      	b.n	8004fd2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fbc:	f7fd fea2 	bl	8002d04 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e0c1      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd2:	4b40      	ldr	r3, [pc, #256]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1ee      	bne.n	8004fbc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d105      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe4:	4b3b      	ldr	r3, [pc, #236]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	4a3a      	ldr	r2, [pc, #232]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80ad 	beq.w	8005154 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ffa:	4b36      	ldr	r3, [pc, #216]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 030c 	and.w	r3, r3, #12
 8005002:	2b08      	cmp	r3, #8
 8005004:	d060      	beq.n	80050c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d145      	bne.n	800509a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500e:	4b33      	ldr	r3, [pc, #204]	; (80050dc <HAL_RCC_OscConfig+0x4b4>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fd fe76 	bl	8002d04 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800501c:	f7fd fe72 	bl	8002d04 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e093      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502e:	4b29      	ldr	r3, [pc, #164]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	019b      	lsls	r3, r3, #6
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	085b      	lsrs	r3, r3, #1
 8005052:	3b01      	subs	r3, #1
 8005054:	041b      	lsls	r3, r3, #16
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	061b      	lsls	r3, r3, #24
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005064:	071b      	lsls	r3, r3, #28
 8005066:	491b      	ldr	r1, [pc, #108]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8005068:	4313      	orrs	r3, r2
 800506a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800506c:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <HAL_RCC_OscConfig+0x4b4>)
 800506e:	2201      	movs	r2, #1
 8005070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005072:	f7fd fe47 	bl	8002d04 <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800507a:	f7fd fe43 	bl	8002d04 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e064      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508c:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0f0      	beq.n	800507a <HAL_RCC_OscConfig+0x452>
 8005098:	e05c      	b.n	8005154 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800509a:	4b10      	ldr	r3, [pc, #64]	; (80050dc <HAL_RCC_OscConfig+0x4b4>)
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7fd fe30 	bl	8002d04 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fd fe2c 	bl	8002d04 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e04d      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ba:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f0      	bne.n	80050a8 <HAL_RCC_OscConfig+0x480>
 80050c6:	e045      	b.n	8005154 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d107      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e040      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
 80050d4:	40023800 	.word	0x40023800
 80050d8:	40007000 	.word	0x40007000
 80050dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050e0:	4b1f      	ldr	r3, [pc, #124]	; (8005160 <HAL_RCC_OscConfig+0x538>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d030      	beq.n	8005150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d129      	bne.n	8005150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005106:	429a      	cmp	r2, r3
 8005108:	d122      	bne.n	8005150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005110:	4013      	ands	r3, r2
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005116:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005118:	4293      	cmp	r3, r2
 800511a:	d119      	bne.n	8005150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	3b01      	subs	r3, #1
 800512a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800512c:	429a      	cmp	r2, r3
 800512e:	d10f      	bne.n	8005150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800513c:	429a      	cmp	r2, r3
 800513e:	d107      	bne.n	8005150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40023800 	.word	0x40023800

08005164 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b02      	cmp	r3, #2
 800517a:	d904      	bls.n	8005186 <HAL_SAI_InitProtocol+0x22>
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	3b03      	subs	r3, #3
 8005180:	2b01      	cmp	r3, #1
 8005182:	d812      	bhi.n	80051aa <HAL_SAI_InitProtocol+0x46>
 8005184:	e008      	b.n	8005198 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f9dd 	bl	800554c <SAI_InitI2S>
 8005192:	4603      	mov	r3, r0
 8005194:	75fb      	strb	r3, [r7, #23]
      break;
 8005196:	e00b      	b.n	80051b0 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	68b9      	ldr	r1, [r7, #8]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 fa82 	bl	80056a8 <SAI_InitPCM>
 80051a4:	4603      	mov	r3, r0
 80051a6:	75fb      	strb	r3, [r7, #23]
      break;
 80051a8:	e002      	b.n	80051b0 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	75fb      	strb	r3, [r7, #23]
      break;
 80051ae:	bf00      	nop
  }

  if (status == HAL_OK)
 80051b0:	7dfb      	ldrb	r3, [r7, #23]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d104      	bne.n	80051c0 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f808 	bl	80051cc <HAL_SAI_Init>
 80051bc:	4603      	mov	r3, r0
 80051be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80051c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
	...

080051cc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e10c      	b.n	8005408 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fd fb96 	bl	8002934 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 faff 	bl	8005814 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fba6 	bl	8005968 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d030      	beq.n	8005286 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fbe3 	bl	80059f0 <SAI_GetInputClock>
 800522a:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	461a      	mov	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	025b      	lsls	r3, r3, #9
 800523e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005242:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4a72      	ldr	r2, [pc, #456]	; (8005410 <HAL_SAI_Init+0x244>)
 8005248:	fba2 2303 	umull	r2, r3, r2, r3
 800524c:	08da      	lsrs	r2, r3, #3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8005252:	68f9      	ldr	r1, [r7, #12]
 8005254:	4b6e      	ldr	r3, [pc, #440]	; (8005410 <HAL_SAI_Init+0x244>)
 8005256:	fba3 2301 	umull	r2, r3, r3, r1
 800525a:	08da      	lsrs	r2, r3, #3
 800525c:	4613      	mov	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	1aca      	subs	r2, r1, r3
 8005266:	2a08      	cmp	r2, #8
 8005268:	d904      	bls.n	8005274 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005278:	2b04      	cmp	r3, #4
 800527a:	d104      	bne.n	8005286 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	085a      	lsrs	r2, r3, #1
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_SAI_Init+0xca>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b02      	cmp	r3, #2
 8005294:	d109      	bne.n	80052aa <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_SAI_Init+0xd6>
 800529e:	2300      	movs	r3, #0
 80052a0:	e001      	b.n	80052a6 <HAL_SAI_Init+0xda>
 80052a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	e008      	b.n	80052bc <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d102      	bne.n	80052b8 <HAL_SAI_Init+0xec>
 80052b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052b6:	e000      	b.n	80052ba <HAL_SAI_Init+0xee>
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b03      	cmp	r3, #3
 80052c2:	d811      	bhi.n	80052e8 <HAL_SAI_Init+0x11c>
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d20b      	bcs.n	80052e0 <HAL_SAI_Init+0x114>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <HAL_SAI_Init+0x106>
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d003      	beq.n	80052d8 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 80052d0:	e00a      	b.n	80052e8 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	613b      	str	r3, [r7, #16]
    break;
 80052d6:	e008      	b.n	80052ea <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80052d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052dc:	613b      	str	r3, [r7, #16]
    break;
 80052de:	e004      	b.n	80052ea <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80052e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052e4:	613b      	str	r3, [r7, #16]
    break;
 80052e6:	e000      	b.n	80052ea <HAL_SAI_Init+0x11e>
      break;
 80052e8:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6819      	ldr	r1, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4b47      	ldr	r3, [pc, #284]	; (8005414 <HAL_SAI_Init+0x248>)
 80052f6:	400b      	ands	r3, r1
 80052f8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6819      	ldr	r1, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005308:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800530e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005314:	431a      	orrs	r2, r3
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8005322:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800532e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	051b      	lsls	r3, r3, #20
 8005336:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6812      	ldr	r2, [r2, #0]
 800534a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800534e:	f023 030f 	bic.w	r3, r3, #15
 8005352:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6859      	ldr	r1, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699a      	ldr	r2, [r3, #24]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6899      	ldr	r1, [r3, #8]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4b26      	ldr	r3, [pc, #152]	; (8005418 <HAL_SAI_Init+0x24c>)
 800537e:	400b      	ands	r3, r1
 8005380:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6899      	ldr	r1, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005392:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 8005398:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 800539e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a4:	3b01      	subs	r3, #1
 80053a6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80053a8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68d9      	ldr	r1, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	f24f 0320 	movw	r3, #61472	; 0xf020
 80053c0:	400b      	ands	r3, r1
 80053c2:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68d9      	ldr	r1, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d2:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053d8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80053da:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e0:	3b01      	subs	r3, #1
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	cccccccd 	.word	0xcccccccd
 8005414:	ff05c010 	.word	0xff05c010
 8005418:	fff88000 	.word	0xfff88000

0800541c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	4613      	mov	r3, r2
 8005428:	80fb      	strh	r3, [r7, #6]
  if ((pData == NULL) || (Size == 0))
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <HAL_SAI_Receive_DMA+0x1a>
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e074      	b.n	8005524 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b01      	cmp	r3, #1
 8005444:	d16d      	bne.n	8005522 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_SAI_Receive_DMA+0x38>
 8005450:	2302      	movs	r3, #2
 8005452:	e067      	b.n	8005524 <HAL_SAI_Receive_DMA+0x108>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hsai->pBuffPtr = pData;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	669a      	str	r2, [r3, #104]	; 0x68
    hsai->XferSize = Size;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	88fa      	ldrh	r2, [r7, #6]
 8005466:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    hsai->XferCount = Size;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	88fa      	ldrh	r2, [r7, #6]
 800546e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2222      	movs	r2, #34	; 0x22
 800547e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005486:	4a29      	ldr	r2, [pc, #164]	; (800552c <HAL_SAI_Receive_DMA+0x110>)
 8005488:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800548e:	4a28      	ldr	r2, [pc, #160]	; (8005530 <HAL_SAI_Receive_DMA+0x114>)
 8005490:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005496:	4a27      	ldr	r2, [pc, #156]	; (8005534 <HAL_SAI_Receive_DMA+0x118>)
 8005498:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800549e:	2200      	movs	r2, #0
 80054a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	331c      	adds	r3, #28
 80054ac:	4619      	mov	r1, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054b2:	461a      	mov	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80054ba:	f7fd fe13 	bl	80030e4 <HAL_DMA_Start_IT>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return  HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e029      	b.n	8005524 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80054d0:	2100      	movs	r1, #0
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f968 	bl	80057a8 <SAI_InterruptFlag>
 80054d8:	4601      	mov	r1, r0
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691a      	ldr	r2, [r3, #16]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80054f6:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d107      	bne.n	8005516 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005514:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	e000      	b.n	8005524 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8005522:	2302      	movs	r3, #2
  }
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	080058e5 	.word	0x080058e5
 8005530:	08005885 	.word	0x08005885
 8005534:	08005901 	.word	0x08005901

08005538 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <SAI_InitI2S+0x2a>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d103      	bne.n	800557e <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	641a      	str	r2, [r3, #64]	; 0x40
 800557c:	e002      	b.n	8005584 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800558a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005592:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	661a      	str	r2, [r3, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e076      	b.n	800569c <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d107      	bne.n	80055c4 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
 80055c2:	e006      	b.n	80055d2 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055ca:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Frame definition */
  switch (datasize)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d84f      	bhi.n	8005678 <SAI_InitI2S+0x12c>
 80055d8:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <SAI_InitI2S+0x94>)
 80055da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055de:	bf00      	nop
 80055e0:	080055f1 	.word	0x080055f1
 80055e4:	08005613 	.word	0x08005613
 80055e8:	08005635 	.word	0x08005635
 80055ec:	08005657 	.word	0x08005657
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	085b      	lsrs	r3, r3, #1
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	085b      	lsrs	r3, r3, #1
 8005604:	011a      	lsls	r2, r3, #4
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2240      	movs	r2, #64	; 0x40
 800560e:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005610:	e034      	b.n	800567c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2280      	movs	r2, #128	; 0x80
 8005616:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	085b      	lsrs	r3, r3, #1
 800561c:	019a      	lsls	r2, r3, #6
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	085b      	lsrs	r3, r3, #1
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2280      	movs	r2, #128	; 0x80
 8005630:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005632:	e023      	b.n	800567c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	22c0      	movs	r2, #192	; 0xc0
 8005638:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	019a      	lsls	r2, r3, #6
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	085b      	lsrs	r3, r3, #1
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2280      	movs	r2, #128	; 0x80
 8005652:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005654:	e012      	b.n	800567c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	22e0      	movs	r2, #224	; 0xe0
 800565a:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	019a      	lsls	r2, r3, #6
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	085b      	lsrs	r3, r3, #1
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2280      	movs	r2, #128	; 0x80
 8005674:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005676:	e001      	b.n	800567c <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e00f      	b.n	800569c <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d10b      	bne.n	800569a <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d102      	bne.n	800568e <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2210      	movs	r2, #16
 800568c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d102      	bne.n	800569a <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2208      	movs	r2, #8
 8005698:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <SAI_InitPCM+0x2a>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d103      	bne.n	80056da <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	641a      	str	r2, [r3, #64]	; 0x40
 80056d8:	e002      	b.n	80056e0 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056ec:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005708:	665a      	str	r2, [r3, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b04      	cmp	r3, #4
 800570e:	d103      	bne.n	8005718 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	649a      	str	r2, [r3, #72]	; 0x48
 8005716:	e002      	b.n	800571e <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	220d      	movs	r2, #13
 800571c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  switch (datasize)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b03      	cmp	r3, #3
 8005722:	d837      	bhi.n	8005794 <SAI_InitPCM+0xec>
 8005724:	a201      	add	r2, pc, #4	; (adr r2, 800572c <SAI_InitPCM+0x84>)
 8005726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572a:	bf00      	nop
 800572c:	0800573d 	.word	0x0800573d
 8005730:	08005753 	.word	0x08005753
 8005734:	08005769 	.word	0x08005769
 8005738:	0800577f 	.word	0x0800577f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2280      	movs	r2, #128	; 0x80
 8005740:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	011a      	lsls	r2, r3, #4
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2240      	movs	r2, #64	; 0x40
 800574e:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005750:	e022      	b.n	8005798 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2280      	movs	r2, #128	; 0x80
 8005756:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2280      	movs	r2, #128	; 0x80
 8005764:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005766:	e017      	b.n	8005798 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	22c0      	movs	r2, #192	; 0xc0
 800576c:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2280      	movs	r2, #128	; 0x80
 800577a:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800577c:	e00c      	b.n	8005798 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	22e0      	movs	r2, #224	; 0xe0
 8005782:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2280      	movs	r2, #128	; 0x80
 8005790:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005792:	e001      	b.n	8005798 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e000      	b.n	800579a <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop

080057a8 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d103      	bne.n	80057c4 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f043 0308 	orr.w	r3, r3, #8
 80057c2:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d10b      	bne.n	80057e4 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d003      	beq.n	80057dc <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d103      	bne.n	80057e4 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f043 0310 	orr.w	r3, r3, #16
 80057e2:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d003      	beq.n	80057f4 <SAI_InterruptFlag+0x4c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d104      	bne.n	80057fe <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	e003      	b.n	8005806 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f043 0304 	orr.w	r3, r3, #4
 8005804:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005806:	68fb      	ldr	r3, [r7, #12]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800581c:	4b17      	ldr	r3, [pc, #92]	; (800587c <SAI_Disable+0x68>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a17      	ldr	r2, [pc, #92]	; (8005880 <SAI_Disable+0x6c>)
 8005822:	fba2 2303 	umull	r2, r3, r2, r3
 8005826:	0b1b      	lsrs	r3, r3, #12
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800583e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	1e5a      	subs	r2, r3, #1
 8005844:	60fa      	str	r2, [r7, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005850:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	72fb      	strb	r3, [r7, #11]
      break;
 800585e:	e006      	b.n	800586e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e8      	bne.n	8005840 <SAI_Disable+0x2c>

  return status;
 800586e:	7afb      	ldrb	r3, [r7, #11]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	20000040 	.word	0x20000040
 8005880:	95cbec1b 	.word	0x95cbec1b

08005884 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800589a:	d01c      	beq.n	80058d6 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80058aa:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80058b4:	2100      	movs	r1, #0
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f7ff ff76 	bl	80057a8 <SAI_InterruptFlag>
 80058bc:	4603      	mov	r3, r0
 80058be:	43d9      	mvns	r1, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	400a      	ands	r2, r1
 80058cc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f7fc fb0e 	bl	8001ef8 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80058dc:	bf00      	nop
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f7fc faf2 	bl	8001edc <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80058f8:	bf00      	nop
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005914:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005924:	2b01      	cmp	r3, #1
 8005926:	d004      	beq.n	8005932 <SAI_DMAError+0x32>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800592c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592e:	2b01      	cmp	r3, #1
 8005930:	d112      	bne.n	8005958 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005940:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f7ff ff66 	bl	8005814 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f7ff fded 	bl	8005538 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d00c      	beq.n	8005992 <SAI_BlockSynchroConfig+0x2a>
 8005978:	2b02      	cmp	r3, #2
 800597a:	d80d      	bhi.n	8005998 <SAI_BlockSynchroConfig+0x30>
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <SAI_BlockSynchroConfig+0x1e>
 8005980:	2b01      	cmp	r3, #1
 8005982:	d003      	beq.n	800598c <SAI_BlockSynchroConfig+0x24>
 8005984:	e008      	b.n	8005998 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
      break;
 800598a:	e008      	b.n	800599e <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800598c:	2310      	movs	r3, #16
 800598e:	60fb      	str	r3, [r7, #12]
      break;
 8005990:	e005      	b.n	800599e <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005992:	2320      	movs	r3, #32
 8005994:	60fb      	str	r3, [r7, #12]
      break;
 8005996:	e002      	b.n	800599e <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	60fb      	str	r3, [r7, #12]
      break;
 800599c:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d103      	bne.n	80059ae <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f043 0301 	orr.w	r3, r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a0b      	ldr	r2, [pc, #44]	; (80059e0 <SAI_BlockSynchroConfig+0x78>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <SAI_BlockSynchroConfig+0x5a>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <SAI_BlockSynchroConfig+0x7c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d103      	bne.n	80059ca <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 80059c2:	4a09      	ldr	r2, [pc, #36]	; (80059e8 <SAI_BlockSynchroConfig+0x80>)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	e003      	b.n	80059d2 <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80059ca:	4a08      	ldr	r2, [pc, #32]	; (80059ec <SAI_BlockSynchroConfig+0x84>)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 80059d0:	bf00      	nop
 80059d2:	bf00      	nop
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40015804 	.word	0x40015804
 80059e4:	40015824 	.word	0x40015824
 80059e8:	40015800 	.word	0x40015800
 80059ec:	40015c00 	.word	0x40015c00

080059f0 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a0a      	ldr	r2, [pc, #40]	; (8005a2c <SAI_GetInputClock+0x3c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <SAI_GetInputClock+0x20>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <SAI_GetInputClock+0x40>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d104      	bne.n	8005a1a <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005a10:	2004      	movs	r0, #4
 8005a12:	f7fe fd17 	bl	8004444 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	e003      	b.n	8005a22 <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005a1a:	2008      	movs	r0, #8
 8005a1c:	f7fe fd12 	bl	8004444 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a20:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8005a22:	68fb      	ldr	r3, [r7, #12]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40015804 	.word	0x40015804
 8005a30:	40015824 	.word	0x40015824

08005a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e07b      	b.n	8005b3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d108      	bne.n	8005a60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a56:	d009      	beq.n	8005a6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	61da      	str	r2, [r3, #28]
 8005a5e:	e005      	b.n	8005a6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fc fdb4 	bl	80025f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005adc:	431a      	orrs	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af0:	ea42 0103 	orr.w	r1, r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	0c1b      	lsrs	r3, r3, #16
 8005b0a:	f003 0104 	and.w	r1, r3, #4
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	f003 0210 	and.w	r2, r3, #16
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b088      	sub	sp, #32
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	603b      	str	r3, [r7, #0]
 8005b52:	4613      	mov	r3, r2
 8005b54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_SPI_Transmit+0x22>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e126      	b.n	8005db6 <HAL_SPI_Transmit+0x270>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b70:	f7fd f8c8 	bl	8002d04 <HAL_GetTick>
 8005b74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d002      	beq.n	8005b8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b86:	2302      	movs	r3, #2
 8005b88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b8a:	e10b      	b.n	8005da4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <HAL_SPI_Transmit+0x52>
 8005b92:	88fb      	ldrh	r3, [r7, #6]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d102      	bne.n	8005b9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b9c:	e102      	b.n	8005da4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2203      	movs	r2, #3
 8005ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	88fa      	ldrh	r2, [r7, #6]
 8005bb6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	88fa      	ldrh	r2, [r7, #6]
 8005bbc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005be4:	d10f      	bne.n	8005c06 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d007      	beq.n	8005c24 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c2c:	d14b      	bne.n	8005cc6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <HAL_SPI_Transmit+0xf6>
 8005c36:	8afb      	ldrh	r3, [r7, #22]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d13e      	bne.n	8005cba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	881a      	ldrh	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4c:	1c9a      	adds	r2, r3, #2
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c60:	e02b      	b.n	8005cba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d112      	bne.n	8005c96 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c74:	881a      	ldrh	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	1c9a      	adds	r2, r3, #2
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c94:	e011      	b.n	8005cba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c96:	f7fd f835 	bl	8002d04 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d803      	bhi.n	8005cae <HAL_SPI_Transmit+0x168>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cac:	d102      	bne.n	8005cb4 <HAL_SPI_Transmit+0x16e>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d102      	bne.n	8005cba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cb8:	e074      	b.n	8005da4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1ce      	bne.n	8005c62 <HAL_SPI_Transmit+0x11c>
 8005cc4:	e04c      	b.n	8005d60 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <HAL_SPI_Transmit+0x18e>
 8005cce:	8afb      	ldrh	r3, [r7, #22]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d140      	bne.n	8005d56 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	330c      	adds	r3, #12
 8005cde:	7812      	ldrb	r2, [r2, #0]
 8005ce0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005cfa:	e02c      	b.n	8005d56 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d113      	bne.n	8005d32 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	330c      	adds	r3, #12
 8005d14:	7812      	ldrb	r2, [r2, #0]
 8005d16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d30:	e011      	b.n	8005d56 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d32:	f7fc ffe7 	bl	8002d04 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d803      	bhi.n	8005d4a <HAL_SPI_Transmit+0x204>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d48:	d102      	bne.n	8005d50 <HAL_SPI_Transmit+0x20a>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d102      	bne.n	8005d56 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d54:	e026      	b.n	8005da4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1cd      	bne.n	8005cfc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	6839      	ldr	r1, [r7, #0]
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 fd21 	bl	80067ac <SPI_EndRxTxTransaction>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2220      	movs	r2, #32
 8005d74:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10a      	bne.n	8005d94 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d7e:	2300      	movs	r3, #0
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	613b      	str	r3, [r7, #16]
 8005d92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e000      	b.n	8005da4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005da2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005db4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3720      	adds	r7, #32
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b088      	sub	sp, #32
 8005dc2:	af02      	add	r7, sp, #8
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	603b      	str	r3, [r7, #0]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dda:	d112      	bne.n	8005e02 <HAL_SPI_Receive+0x44>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10e      	bne.n	8005e02 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2204      	movs	r2, #4
 8005de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005dec:	88fa      	ldrh	r2, [r7, #6]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	4613      	mov	r3, r2
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f8f1 	bl	8005fe0 <HAL_SPI_TransmitReceive>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	e0ea      	b.n	8005fd8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_SPI_Receive+0x52>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e0e3      	b.n	8005fd8 <HAL_SPI_Receive+0x21a>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e18:	f7fc ff74 	bl	8002d04 <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d002      	beq.n	8005e30 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e2e:	e0ca      	b.n	8005fc6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <HAL_SPI_Receive+0x7e>
 8005e36:	88fb      	ldrh	r3, [r7, #6]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d102      	bne.n	8005e42 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e40:	e0c1      	b.n	8005fc6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2204      	movs	r2, #4
 8005e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	88fa      	ldrh	r2, [r7, #6]
 8005e5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	88fa      	ldrh	r2, [r7, #6]
 8005e60:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e88:	d10f      	bne.n	8005eaa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ea8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb4:	2b40      	cmp	r3, #64	; 0x40
 8005eb6:	d007      	beq.n	8005ec8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ec6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d162      	bne.n	8005f96 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005ed0:	e02e      	b.n	8005f30 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d115      	bne.n	8005f0c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f103 020c 	add.w	r2, r3, #12
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	7812      	ldrb	r2, [r2, #0]
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f0a:	e011      	b.n	8005f30 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f0c:	f7fc fefa 	bl	8002d04 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d803      	bhi.n	8005f24 <HAL_SPI_Receive+0x166>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f22:	d102      	bne.n	8005f2a <HAL_SPI_Receive+0x16c>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d102      	bne.n	8005f30 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f2e:	e04a      	b.n	8005fc6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1cb      	bne.n	8005ed2 <HAL_SPI_Receive+0x114>
 8005f3a:	e031      	b.n	8005fa0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d113      	bne.n	8005f72 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	b292      	uxth	r2, r2
 8005f56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	1c9a      	adds	r2, r3, #2
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f70:	e011      	b.n	8005f96 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f72:	f7fc fec7 	bl	8002d04 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d803      	bhi.n	8005f8a <HAL_SPI_Receive+0x1cc>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f88:	d102      	bne.n	8005f90 <HAL_SPI_Receive+0x1d2>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f94:	e017      	b.n	8005fc6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1cd      	bne.n	8005f3c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	6839      	ldr	r1, [r7, #0]
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 fb9b 	bl	80066e0 <SPI_EndRxTransaction>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	75fb      	strb	r3, [r7, #23]
 8005fc2:	e000      	b.n	8005fc6 <HAL_SPI_Receive+0x208>
  }

error :
 8005fc4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08c      	sub	sp, #48	; 0x30
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d101      	bne.n	8006006 <HAL_SPI_TransmitReceive+0x26>
 8006002:	2302      	movs	r3, #2
 8006004:	e18a      	b.n	800631c <HAL_SPI_TransmitReceive+0x33c>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800600e:	f7fc fe79 	bl	8002d04 <HAL_GetTick>
 8006012:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800601a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006024:	887b      	ldrh	r3, [r7, #2]
 8006026:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006028:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800602c:	2b01      	cmp	r3, #1
 800602e:	d00f      	beq.n	8006050 <HAL_SPI_TransmitReceive+0x70>
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006036:	d107      	bne.n	8006048 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d103      	bne.n	8006048 <HAL_SPI_TransmitReceive+0x68>
 8006040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006044:	2b04      	cmp	r3, #4
 8006046:	d003      	beq.n	8006050 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006048:	2302      	movs	r3, #2
 800604a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800604e:	e15b      	b.n	8006308 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d005      	beq.n	8006062 <HAL_SPI_TransmitReceive+0x82>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <HAL_SPI_TransmitReceive+0x82>
 800605c:	887b      	ldrh	r3, [r7, #2]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d103      	bne.n	800606a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006068:	e14e      	b.n	8006308 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b04      	cmp	r3, #4
 8006074:	d003      	beq.n	800607e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2205      	movs	r2, #5
 800607a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	887a      	ldrh	r2, [r7, #2]
 800608e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	887a      	ldrh	r2, [r7, #2]
 8006094:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	887a      	ldrh	r2, [r7, #2]
 80060a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	887a      	ldrh	r2, [r7, #2]
 80060a6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060be:	2b40      	cmp	r3, #64	; 0x40
 80060c0:	d007      	beq.n	80060d2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060da:	d178      	bne.n	80061ce <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <HAL_SPI_TransmitReceive+0x10a>
 80060e4:	8b7b      	ldrh	r3, [r7, #26]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d166      	bne.n	80061b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ee:	881a      	ldrh	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fa:	1c9a      	adds	r2, r3, #2
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006104:	b29b      	uxth	r3, r3
 8006106:	3b01      	subs	r3, #1
 8006108:	b29a      	uxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800610e:	e053      	b.n	80061b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b02      	cmp	r3, #2
 800611c:	d11b      	bne.n	8006156 <HAL_SPI_TransmitReceive+0x176>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d016      	beq.n	8006156 <HAL_SPI_TransmitReceive+0x176>
 8006128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612a:	2b01      	cmp	r3, #1
 800612c:	d113      	bne.n	8006156 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006132:	881a      	ldrh	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613e:	1c9a      	adds	r2, r3, #2
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b01      	cmp	r3, #1
 8006162:	d119      	bne.n	8006198 <HAL_SPI_TransmitReceive+0x1b8>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006168:	b29b      	uxth	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d014      	beq.n	8006198 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68da      	ldr	r2, [r3, #12]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006178:	b292      	uxth	r2, r2
 800617a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	1c9a      	adds	r2, r3, #2
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800618a:	b29b      	uxth	r3, r3
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006194:	2301      	movs	r3, #1
 8006196:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006198:	f7fc fdb4 	bl	8002d04 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d807      	bhi.n	80061b8 <HAL_SPI_TransmitReceive+0x1d8>
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061ae:	d003      	beq.n	80061b8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80061b6:	e0a7      	b.n	8006308 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1a6      	bne.n	8006110 <HAL_SPI_TransmitReceive+0x130>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1a1      	bne.n	8006110 <HAL_SPI_TransmitReceive+0x130>
 80061cc:	e07c      	b.n	80062c8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_SPI_TransmitReceive+0x1fc>
 80061d6:	8b7b      	ldrh	r3, [r7, #26]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d16b      	bne.n	80062b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	330c      	adds	r3, #12
 80061e6:	7812      	ldrb	r2, [r2, #0]
 80061e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006202:	e057      	b.n	80062b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b02      	cmp	r3, #2
 8006210:	d11c      	bne.n	800624c <HAL_SPI_TransmitReceive+0x26c>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d017      	beq.n	800624c <HAL_SPI_TransmitReceive+0x26c>
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	2b01      	cmp	r3, #1
 8006220:	d114      	bne.n	800624c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	330c      	adds	r3, #12
 800622c:	7812      	ldrb	r2, [r2, #0]
 800622e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800623e:	b29b      	uxth	r3, r3
 8006240:	3b01      	subs	r3, #1
 8006242:	b29a      	uxth	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b01      	cmp	r3, #1
 8006258:	d119      	bne.n	800628e <HAL_SPI_TransmitReceive+0x2ae>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d014      	beq.n	800628e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006280:	b29b      	uxth	r3, r3
 8006282:	3b01      	subs	r3, #1
 8006284:	b29a      	uxth	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800628a:	2301      	movs	r3, #1
 800628c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800628e:	f7fc fd39 	bl	8002d04 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800629a:	429a      	cmp	r2, r3
 800629c:	d803      	bhi.n	80062a6 <HAL_SPI_TransmitReceive+0x2c6>
 800629e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062a4:	d102      	bne.n	80062ac <HAL_SPI_TransmitReceive+0x2cc>
 80062a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d103      	bne.n	80062b4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80062b2:	e029      	b.n	8006308 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1a2      	bne.n	8006204 <HAL_SPI_TransmitReceive+0x224>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d19d      	bne.n	8006204 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 fa6d 	bl	80067ac <SPI_EndRxTxTransaction>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d006      	beq.n	80062e6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2220      	movs	r2, #32
 80062e2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80062e4:	e010      	b.n	8006308 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10b      	bne.n	8006306 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062ee:	2300      	movs	r3, #0
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	617b      	str	r3, [r7, #20]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	617b      	str	r3, [r7, #20]
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	e000      	b.n	8006308 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006306:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006318:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800631c:	4618      	mov	r0, r3
 800631e:	3730      	adds	r7, #48	; 0x30
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	4613      	mov	r3, r2
 8006330:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <HAL_SPI_Transmit_DMA+0x20>
 8006340:	2302      	movs	r3, #2
 8006342:	e09b      	b.n	800647c <HAL_SPI_Transmit_DMA+0x158>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b01      	cmp	r3, #1
 8006356:	d002      	beq.n	800635e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006358:	2302      	movs	r3, #2
 800635a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800635c:	e089      	b.n	8006472 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <HAL_SPI_Transmit_DMA+0x46>
 8006364:	88fb      	ldrh	r3, [r7, #6]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d102      	bne.n	8006370 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800636e:	e080      	b.n	8006472 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2203      	movs	r2, #3
 8006374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	88fa      	ldrh	r2, [r7, #6]
 8006388:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	88fa      	ldrh	r2, [r7, #6]
 800638e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063b6:	d10f      	bne.n	80063d8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063dc:	4a29      	ldr	r2, [pc, #164]	; (8006484 <HAL_SPI_Transmit_DMA+0x160>)
 80063de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e4:	4a28      	ldr	r2, [pc, #160]	; (8006488 <HAL_SPI_Transmit_DMA+0x164>)
 80063e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ec:	4a27      	ldr	r2, [pc, #156]	; (800648c <HAL_SPI_Transmit_DMA+0x168>)
 80063ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f4:	2200      	movs	r2, #0
 80063f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006400:	4619      	mov	r1, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	330c      	adds	r3, #12
 8006408:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006410:	f7fc fe68 	bl	80030e4 <HAL_DMA_Start_IT>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00c      	beq.n	8006434 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641e:	f043 0210 	orr.w	r2, r3, #16
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006432:	e01e      	b.n	8006472 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643e:	2b40      	cmp	r3, #64	; 0x40
 8006440:	d007      	beq.n	8006452 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006450:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f042 0220 	orr.w	r2, r2, #32
 8006460:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0202 	orr.w	r2, r2, #2
 8006470:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800647a:	7dfb      	ldrb	r3, [r7, #23]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	08006575 	.word	0x08006575
 8006488:	080064cd 	.word	0x080064cd
 800648c:	08006591 	.word	0x08006591

08006490 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064da:	f7fc fc13 	bl	8002d04 <HAL_GetTick>
 80064de:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ee:	d03b      	beq.n	8006568 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 0220 	bic.w	r2, r2, #32
 80064fe:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0202 	bic.w	r2, r2, #2
 800650e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	2164      	movs	r1, #100	; 0x64
 8006514:	6978      	ldr	r0, [r7, #20]
 8006516:	f000 f949 	bl	80067ac <SPI_EndRxTxTransaction>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006524:	f043 0220 	orr.w	r2, r3, #32
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2200      	movs	r2, #0
 800654e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006560:	6978      	ldr	r0, [r7, #20]
 8006562:	f7ff ffa9 	bl	80064b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006566:	e002      	b.n	800656e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006568:	6978      	ldr	r0, [r7, #20]
 800656a:	f7ff ff91 	bl	8006490 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f7ff ff8e 	bl	80064a4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0203 	bic.w	r2, r2, #3
 80065ac:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b2:	f043 0210 	orr.w	r2, r3, #16
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f7ff ff78 	bl	80064b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80065c8:	bf00      	nop
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	4613      	mov	r3, r2
 80065de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065e0:	f7fc fb90 	bl	8002d04 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	1a9b      	subs	r3, r3, r2
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	4413      	add	r3, r2
 80065ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065f0:	f7fc fb88 	bl	8002d04 <HAL_GetTick>
 80065f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065f6:	4b39      	ldr	r3, [pc, #228]	; (80066dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	015b      	lsls	r3, r3, #5
 80065fc:	0d1b      	lsrs	r3, r3, #20
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	fb02 f303 	mul.w	r3, r2, r3
 8006604:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006606:	e054      	b.n	80066b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800660e:	d050      	beq.n	80066b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006610:	f7fc fb78 	bl	8002d04 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	69fa      	ldr	r2, [r7, #28]
 800661c:	429a      	cmp	r2, r3
 800661e:	d902      	bls.n	8006626 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d13d      	bne.n	80066a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006634:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800663e:	d111      	bne.n	8006664 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006648:	d004      	beq.n	8006654 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006652:	d107      	bne.n	8006664 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006662:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800666c:	d10f      	bne.n	800668e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800668c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e017      	b.n	80066d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	4013      	ands	r3, r2
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	429a      	cmp	r2, r3
 80066c0:	bf0c      	ite	eq
 80066c2:	2301      	moveq	r3, #1
 80066c4:	2300      	movne	r3, #0
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	461a      	mov	r2, r3
 80066ca:	79fb      	ldrb	r3, [r7, #7]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d19b      	bne.n	8006608 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20000040 	.word	0x20000040

080066e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af02      	add	r7, sp, #8
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066f4:	d111      	bne.n	800671a <SPI_EndRxTransaction+0x3a>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066fe:	d004      	beq.n	800670a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006708:	d107      	bne.n	800671a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006718:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006722:	d12a      	bne.n	800677a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800672c:	d012      	beq.n	8006754 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2200      	movs	r2, #0
 8006736:	2180      	movs	r1, #128	; 0x80
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7ff ff49 	bl	80065d0 <SPI_WaitFlagStateUntilTimeout>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d02d      	beq.n	80067a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006748:	f043 0220 	orr.w	r2, r3, #32
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e026      	b.n	80067a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2200      	movs	r2, #0
 800675c:	2101      	movs	r1, #1
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f7ff ff36 	bl	80065d0 <SPI_WaitFlagStateUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d01a      	beq.n	80067a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676e:	f043 0220 	orr.w	r2, r3, #32
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e013      	b.n	80067a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2200      	movs	r2, #0
 8006782:	2101      	movs	r1, #1
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7ff ff23 	bl	80065d0 <SPI_WaitFlagStateUntilTimeout>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d007      	beq.n	80067a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006794:	f043 0220 	orr.w	r2, r3, #32
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e000      	b.n	80067a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067b8:	4b1b      	ldr	r3, [pc, #108]	; (8006828 <SPI_EndRxTxTransaction+0x7c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1b      	ldr	r2, [pc, #108]	; (800682c <SPI_EndRxTxTransaction+0x80>)
 80067be:	fba2 2303 	umull	r2, r3, r2, r3
 80067c2:	0d5b      	lsrs	r3, r3, #21
 80067c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067c8:	fb02 f303 	mul.w	r3, r2, r3
 80067cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067d6:	d112      	bne.n	80067fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2200      	movs	r2, #0
 80067e0:	2180      	movs	r1, #128	; 0x80
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f7ff fef4 	bl	80065d0 <SPI_WaitFlagStateUntilTimeout>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d016      	beq.n	800681c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f2:	f043 0220 	orr.w	r2, r3, #32
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e00f      	b.n	800681e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00a      	beq.n	800681a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	3b01      	subs	r3, #1
 8006808:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006814:	2b80      	cmp	r3, #128	; 0x80
 8006816:	d0f2      	beq.n	80067fe <SPI_EndRxTxTransaction+0x52>
 8006818:	e000      	b.n	800681c <SPI_EndRxTxTransaction+0x70>
        break;
 800681a:	bf00      	nop
  }

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000040 	.word	0x20000040
 800682c:	165e9f81 	.word	0x165e9f81

08006830 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e041      	b.n	80068c6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d106      	bne.n	800685c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fb ff14 	bl	8002684 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3304      	adds	r3, #4
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f000 fb22 	bl	8006eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d104      	bne.n	80068ee <HAL_TIM_IC_Start_IT+0x1e>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	e013      	b.n	8006916 <HAL_TIM_IC_Start_IT+0x46>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b04      	cmp	r3, #4
 80068f2:	d104      	bne.n	80068fe <HAL_TIM_IC_Start_IT+0x2e>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	e00b      	b.n	8006916 <HAL_TIM_IC_Start_IT+0x46>
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b08      	cmp	r3, #8
 8006902:	d104      	bne.n	800690e <HAL_TIM_IC_Start_IT+0x3e>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800690a:	b2db      	uxtb	r3, r3
 800690c:	e003      	b.n	8006916 <HAL_TIM_IC_Start_IT+0x46>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006914:	b2db      	uxtb	r3, r3
 8006916:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d104      	bne.n	8006928 <HAL_TIM_IC_Start_IT+0x58>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006924:	b2db      	uxtb	r3, r3
 8006926:	e013      	b.n	8006950 <HAL_TIM_IC_Start_IT+0x80>
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	2b04      	cmp	r3, #4
 800692c:	d104      	bne.n	8006938 <HAL_TIM_IC_Start_IT+0x68>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006934:	b2db      	uxtb	r3, r3
 8006936:	e00b      	b.n	8006950 <HAL_TIM_IC_Start_IT+0x80>
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b08      	cmp	r3, #8
 800693c:	d104      	bne.n	8006948 <HAL_TIM_IC_Start_IT+0x78>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006944:	b2db      	uxtb	r3, r3
 8006946:	e003      	b.n	8006950 <HAL_TIM_IC_Start_IT+0x80>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800694e:	b2db      	uxtb	r3, r3
 8006950:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006952:	7bbb      	ldrb	r3, [r7, #14]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d102      	bne.n	800695e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006958:	7b7b      	ldrb	r3, [r7, #13]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d001      	beq.n	8006962 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e0cc      	b.n	8006afc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d104      	bne.n	8006972 <HAL_TIM_IC_Start_IT+0xa2>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006970:	e013      	b.n	800699a <HAL_TIM_IC_Start_IT+0xca>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b04      	cmp	r3, #4
 8006976:	d104      	bne.n	8006982 <HAL_TIM_IC_Start_IT+0xb2>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006980:	e00b      	b.n	800699a <HAL_TIM_IC_Start_IT+0xca>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b08      	cmp	r3, #8
 8006986:	d104      	bne.n	8006992 <HAL_TIM_IC_Start_IT+0xc2>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006990:	e003      	b.n	800699a <HAL_TIM_IC_Start_IT+0xca>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2202      	movs	r2, #2
 8006996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d104      	bne.n	80069aa <HAL_TIM_IC_Start_IT+0xda>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069a8:	e013      	b.n	80069d2 <HAL_TIM_IC_Start_IT+0x102>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d104      	bne.n	80069ba <HAL_TIM_IC_Start_IT+0xea>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069b8:	e00b      	b.n	80069d2 <HAL_TIM_IC_Start_IT+0x102>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d104      	bne.n	80069ca <HAL_TIM_IC_Start_IT+0xfa>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069c8:	e003      	b.n	80069d2 <HAL_TIM_IC_Start_IT+0x102>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2202      	movs	r2, #2
 80069ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b0c      	cmp	r3, #12
 80069d6:	d841      	bhi.n	8006a5c <HAL_TIM_IC_Start_IT+0x18c>
 80069d8:	a201      	add	r2, pc, #4	; (adr r2, 80069e0 <HAL_TIM_IC_Start_IT+0x110>)
 80069da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069de:	bf00      	nop
 80069e0:	08006a15 	.word	0x08006a15
 80069e4:	08006a5d 	.word	0x08006a5d
 80069e8:	08006a5d 	.word	0x08006a5d
 80069ec:	08006a5d 	.word	0x08006a5d
 80069f0:	08006a27 	.word	0x08006a27
 80069f4:	08006a5d 	.word	0x08006a5d
 80069f8:	08006a5d 	.word	0x08006a5d
 80069fc:	08006a5d 	.word	0x08006a5d
 8006a00:	08006a39 	.word	0x08006a39
 8006a04:	08006a5d 	.word	0x08006a5d
 8006a08:	08006a5d 	.word	0x08006a5d
 8006a0c:	08006a5d 	.word	0x08006a5d
 8006a10:	08006a4b 	.word	0x08006a4b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0202 	orr.w	r2, r2, #2
 8006a22:	60da      	str	r2, [r3, #12]
      break;
 8006a24:	e01d      	b.n	8006a62 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68da      	ldr	r2, [r3, #12]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0204 	orr.w	r2, r2, #4
 8006a34:	60da      	str	r2, [r3, #12]
      break;
 8006a36:	e014      	b.n	8006a62 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0208 	orr.w	r2, r2, #8
 8006a46:	60da      	str	r2, [r3, #12]
      break;
 8006a48:	e00b      	b.n	8006a62 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f042 0210 	orr.w	r2, r2, #16
 8006a58:	60da      	str	r2, [r3, #12]
      break;
 8006a5a:	e002      	b.n	8006a62 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a60:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d148      	bne.n	8006afa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 fbeb 	bl	800724c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a22      	ldr	r2, [pc, #136]	; (8006b04 <HAL_TIM_IC_Start_IT+0x234>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d022      	beq.n	8006ac6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a88:	d01d      	beq.n	8006ac6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a1e      	ldr	r2, [pc, #120]	; (8006b08 <HAL_TIM_IC_Start_IT+0x238>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d018      	beq.n	8006ac6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a1c      	ldr	r2, [pc, #112]	; (8006b0c <HAL_TIM_IC_Start_IT+0x23c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d013      	beq.n	8006ac6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a1b      	ldr	r2, [pc, #108]	; (8006b10 <HAL_TIM_IC_Start_IT+0x240>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00e      	beq.n	8006ac6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a19      	ldr	r2, [pc, #100]	; (8006b14 <HAL_TIM_IC_Start_IT+0x244>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d009      	beq.n	8006ac6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a18      	ldr	r2, [pc, #96]	; (8006b18 <HAL_TIM_IC_Start_IT+0x248>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d004      	beq.n	8006ac6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a16      	ldr	r2, [pc, #88]	; (8006b1c <HAL_TIM_IC_Start_IT+0x24c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d111      	bne.n	8006aea <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b06      	cmp	r3, #6
 8006ad6:	d010      	beq.n	8006afa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae8:	e007      	b.n	8006afa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f042 0201 	orr.w	r2, r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	40010000 	.word	0x40010000
 8006b08:	40000400 	.word	0x40000400
 8006b0c:	40000800 	.word	0x40000800
 8006b10:	40000c00 	.word	0x40000c00
 8006b14:	40010400 	.word	0x40010400
 8006b18:	40014000 	.word	0x40014000
 8006b1c:	40001800 	.word	0x40001800

08006b20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d122      	bne.n	8006b7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d11b      	bne.n	8006b7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f06f 0202 	mvn.w	r2, #2
 8006b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fa fd96 	bl	8001694 <HAL_TIM_IC_CaptureCallback>
 8006b68:	e005      	b.n	8006b76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f986 	bl	8006e7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f98d 	bl	8006e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	f003 0304 	and.w	r3, r3, #4
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d122      	bne.n	8006bd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	d11b      	bne.n	8006bd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f06f 0204 	mvn.w	r2, #4
 8006ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7fa fd6c 	bl	8001694 <HAL_TIM_IC_CaptureCallback>
 8006bbc:	e005      	b.n	8006bca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f95c 	bl	8006e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f963 	bl	8006e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f003 0308 	and.w	r3, r3, #8
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d122      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	f003 0308 	and.w	r3, r3, #8
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d11b      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f06f 0208 	mvn.w	r2, #8
 8006bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2204      	movs	r2, #4
 8006bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7fa fd42 	bl	8001694 <HAL_TIM_IC_CaptureCallback>
 8006c10:	e005      	b.n	8006c1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f932 	bl	8006e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f939 	bl	8006e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f003 0310 	and.w	r3, r3, #16
 8006c2e:	2b10      	cmp	r3, #16
 8006c30:	d122      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f003 0310 	and.w	r3, r3, #16
 8006c3c:	2b10      	cmp	r3, #16
 8006c3e:	d11b      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f06f 0210 	mvn.w	r2, #16
 8006c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2208      	movs	r2, #8
 8006c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fa fd18 	bl	8001694 <HAL_TIM_IC_CaptureCallback>
 8006c64:	e005      	b.n	8006c72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f908 	bl	8006e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f90f 	bl	8006e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d10e      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d107      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0201 	mvn.w	r2, #1
 8006c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f8e2 	bl	8006e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cae:	2b80      	cmp	r3, #128	; 0x80
 8006cb0:	d10e      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cbc:	2b80      	cmp	r3, #128	; 0x80
 8006cbe:	d107      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fb6a 	bl	80073a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cda:	2b40      	cmp	r3, #64	; 0x40
 8006cdc:	d10e      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce8:	2b40      	cmp	r3, #64	; 0x40
 8006cea:	d107      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f8d4 	bl	8006ea4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f003 0320 	and.w	r3, r3, #32
 8006d06:	2b20      	cmp	r3, #32
 8006d08:	d10e      	bne.n	8006d28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f003 0320 	and.w	r3, r3, #32
 8006d14:	2b20      	cmp	r3, #32
 8006d16:	d107      	bne.n	8006d28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f06f 0220 	mvn.w	r2, #32
 8006d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fb34 	bl	8007390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d28:	bf00      	nop
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d101      	bne.n	8006d4e <HAL_TIM_IC_ConfigChannel+0x1e>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	e088      	b.n	8006e60 <HAL_TIM_IC_ConfigChannel+0x130>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d11b      	bne.n	8006d94 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6818      	ldr	r0, [r3, #0]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	6819      	ldr	r1, [r3, #0]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f000 f944 	bl	8006ff8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	699a      	ldr	r2, [r3, #24]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 020c 	bic.w	r2, r2, #12
 8006d7e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6999      	ldr	r1, [r3, #24]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	619a      	str	r2, [r3, #24]
 8006d92:	e060      	b.n	8006e56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d11c      	bne.n	8006dd4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	6819      	ldr	r1, [r3, #0]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f000 f999 	bl	80070e0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	699a      	ldr	r2, [r3, #24]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006dbc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6999      	ldr	r1, [r3, #24]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	021a      	lsls	r2, r3, #8
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	619a      	str	r2, [r3, #24]
 8006dd2:	e040      	b.n	8006e56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b08      	cmp	r3, #8
 8006dd8:	d11b      	bne.n	8006e12 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6818      	ldr	r0, [r3, #0]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	6819      	ldr	r1, [r3, #0]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	f000 f9b6 	bl	800715a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	69da      	ldr	r2, [r3, #28]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 020c 	bic.w	r2, r2, #12
 8006dfc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69d9      	ldr	r1, [r3, #28]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	61da      	str	r2, [r3, #28]
 8006e10:	e021      	b.n	8006e56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b0c      	cmp	r3, #12
 8006e16:	d11c      	bne.n	8006e52 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6818      	ldr	r0, [r3, #0]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	6819      	ldr	r1, [r3, #0]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f000 f9d3 	bl	80071d2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69da      	ldr	r2, [r3, #28]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006e3a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	69d9      	ldr	r1, [r3, #28]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	021a      	lsls	r2, r3, #8
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	61da      	str	r2, [r3, #28]
 8006e50:	e001      	b.n	8006e56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a40      	ldr	r2, [pc, #256]	; (8006fcc <TIM_Base_SetConfig+0x114>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d013      	beq.n	8006ef8 <TIM_Base_SetConfig+0x40>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed6:	d00f      	beq.n	8006ef8 <TIM_Base_SetConfig+0x40>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a3d      	ldr	r2, [pc, #244]	; (8006fd0 <TIM_Base_SetConfig+0x118>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00b      	beq.n	8006ef8 <TIM_Base_SetConfig+0x40>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a3c      	ldr	r2, [pc, #240]	; (8006fd4 <TIM_Base_SetConfig+0x11c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d007      	beq.n	8006ef8 <TIM_Base_SetConfig+0x40>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a3b      	ldr	r2, [pc, #236]	; (8006fd8 <TIM_Base_SetConfig+0x120>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d003      	beq.n	8006ef8 <TIM_Base_SetConfig+0x40>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a3a      	ldr	r2, [pc, #232]	; (8006fdc <TIM_Base_SetConfig+0x124>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d108      	bne.n	8006f0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a2f      	ldr	r2, [pc, #188]	; (8006fcc <TIM_Base_SetConfig+0x114>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d02b      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f18:	d027      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a2c      	ldr	r2, [pc, #176]	; (8006fd0 <TIM_Base_SetConfig+0x118>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d023      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a2b      	ldr	r2, [pc, #172]	; (8006fd4 <TIM_Base_SetConfig+0x11c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d01f      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a2a      	ldr	r2, [pc, #168]	; (8006fd8 <TIM_Base_SetConfig+0x120>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d01b      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a29      	ldr	r2, [pc, #164]	; (8006fdc <TIM_Base_SetConfig+0x124>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d017      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a28      	ldr	r2, [pc, #160]	; (8006fe0 <TIM_Base_SetConfig+0x128>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d013      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a27      	ldr	r2, [pc, #156]	; (8006fe4 <TIM_Base_SetConfig+0x12c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00f      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a26      	ldr	r2, [pc, #152]	; (8006fe8 <TIM_Base_SetConfig+0x130>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00b      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a25      	ldr	r2, [pc, #148]	; (8006fec <TIM_Base_SetConfig+0x134>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d007      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a24      	ldr	r2, [pc, #144]	; (8006ff0 <TIM_Base_SetConfig+0x138>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d003      	beq.n	8006f6a <TIM_Base_SetConfig+0xb2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a23      	ldr	r2, [pc, #140]	; (8006ff4 <TIM_Base_SetConfig+0x13c>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d108      	bne.n	8006f7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	689a      	ldr	r2, [r3, #8]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a0a      	ldr	r2, [pc, #40]	; (8006fcc <TIM_Base_SetConfig+0x114>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d003      	beq.n	8006fb0 <TIM_Base_SetConfig+0xf8>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a0c      	ldr	r2, [pc, #48]	; (8006fdc <TIM_Base_SetConfig+0x124>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d103      	bne.n	8006fb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	691a      	ldr	r2, [r3, #16]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	615a      	str	r2, [r3, #20]
}
 8006fbe:	bf00      	nop
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40000400 	.word	0x40000400
 8006fd4:	40000800 	.word	0x40000800
 8006fd8:	40000c00 	.word	0x40000c00
 8006fdc:	40010400 	.word	0x40010400
 8006fe0:	40014000 	.word	0x40014000
 8006fe4:	40014400 	.word	0x40014400
 8006fe8:	40014800 	.word	0x40014800
 8006fec:	40001800 	.word	0x40001800
 8006ff0:	40001c00 	.word	0x40001c00
 8006ff4:	40002000 	.word	0x40002000

08006ff8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
 8007004:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	f023 0201 	bic.w	r2, r3, #1
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	4a28      	ldr	r2, [pc, #160]	; (80070c4 <TIM_TI1_SetConfig+0xcc>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d01b      	beq.n	800705e <TIM_TI1_SetConfig+0x66>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800702c:	d017      	beq.n	800705e <TIM_TI1_SetConfig+0x66>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4a25      	ldr	r2, [pc, #148]	; (80070c8 <TIM_TI1_SetConfig+0xd0>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d013      	beq.n	800705e <TIM_TI1_SetConfig+0x66>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4a24      	ldr	r2, [pc, #144]	; (80070cc <TIM_TI1_SetConfig+0xd4>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d00f      	beq.n	800705e <TIM_TI1_SetConfig+0x66>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4a23      	ldr	r2, [pc, #140]	; (80070d0 <TIM_TI1_SetConfig+0xd8>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d00b      	beq.n	800705e <TIM_TI1_SetConfig+0x66>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	4a22      	ldr	r2, [pc, #136]	; (80070d4 <TIM_TI1_SetConfig+0xdc>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d007      	beq.n	800705e <TIM_TI1_SetConfig+0x66>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4a21      	ldr	r2, [pc, #132]	; (80070d8 <TIM_TI1_SetConfig+0xe0>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d003      	beq.n	800705e <TIM_TI1_SetConfig+0x66>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4a20      	ldr	r2, [pc, #128]	; (80070dc <TIM_TI1_SetConfig+0xe4>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d101      	bne.n	8007062 <TIM_TI1_SetConfig+0x6a>
 800705e:	2301      	movs	r3, #1
 8007060:	e000      	b.n	8007064 <TIM_TI1_SetConfig+0x6c>
 8007062:	2300      	movs	r3, #0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d008      	beq.n	800707a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f023 0303 	bic.w	r3, r3, #3
 800706e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]
 8007078:	e003      	b.n	8007082 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f043 0301 	orr.w	r3, r3, #1
 8007080:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007088:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	011b      	lsls	r3, r3, #4
 800708e:	b2db      	uxtb	r3, r3
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f023 030a 	bic.w	r3, r3, #10
 800709c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f003 030a 	and.w	r3, r3, #10
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	621a      	str	r2, [r3, #32]
}
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	40010000 	.word	0x40010000
 80070c8:	40000400 	.word	0x40000400
 80070cc:	40000800 	.word	0x40000800
 80070d0:	40000c00 	.word	0x40000c00
 80070d4:	40010400 	.word	0x40010400
 80070d8:	40014000 	.word	0x40014000
 80070dc:	40001800 	.word	0x40001800

080070e0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
 80070ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	f023 0210 	bic.w	r2, r3, #16
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800710c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	4313      	orrs	r3, r2
 8007116:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800711e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	031b      	lsls	r3, r3, #12
 8007124:	b29b      	uxth	r3, r3
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	4313      	orrs	r3, r2
 800712a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007132:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	011b      	lsls	r3, r3, #4
 8007138:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	621a      	str	r2, [r3, #32]
}
 800714e:	bf00      	nop
 8007150:	371c      	adds	r7, #28
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800715a:	b480      	push	{r7}
 800715c:	b087      	sub	sp, #28
 800715e:	af00      	add	r7, sp, #0
 8007160:	60f8      	str	r0, [r7, #12]
 8007162:	60b9      	str	r1, [r7, #8]
 8007164:	607a      	str	r2, [r7, #4]
 8007166:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6a1b      	ldr	r3, [r3, #32]
 800716c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f023 0303 	bic.w	r3, r3, #3
 8007186:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4313      	orrs	r3, r2
 800718e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007196:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	011b      	lsls	r3, r3, #4
 800719c:	b2db      	uxtb	r3, r3
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80071aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	021b      	lsls	r3, r3, #8
 80071b0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	621a      	str	r2, [r3, #32]
}
 80071c6:	bf00      	nop
 80071c8:	371c      	adds	r7, #28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b087      	sub	sp, #28
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	60f8      	str	r0, [r7, #12]
 80071da:	60b9      	str	r1, [r7, #8]
 80071dc:	607a      	str	r2, [r7, #4]
 80071de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	021b      	lsls	r3, r3, #8
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	4313      	orrs	r3, r2
 8007208:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007210:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	031b      	lsls	r3, r3, #12
 8007216:	b29b      	uxth	r3, r3
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007224:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	031b      	lsls	r3, r3, #12
 800722a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	4313      	orrs	r3, r2
 8007232:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	621a      	str	r2, [r3, #32]
}
 8007240:	bf00      	nop
 8007242:	371c      	adds	r7, #28
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f003 031f 	and.w	r3, r3, #31
 800725e:	2201      	movs	r2, #1
 8007260:	fa02 f303 	lsl.w	r3, r2, r3
 8007264:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6a1a      	ldr	r2, [r3, #32]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	43db      	mvns	r3, r3
 800726e:	401a      	ands	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a1a      	ldr	r2, [r3, #32]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f003 031f 	and.w	r3, r3, #31
 800727e:	6879      	ldr	r1, [r7, #4]
 8007280:	fa01 f303 	lsl.w	r3, r1, r3
 8007284:	431a      	orrs	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	621a      	str	r2, [r3, #32]
}
 800728a:	bf00      	nop
 800728c:	371c      	adds	r7, #28
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
	...

08007298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d101      	bne.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072ac:	2302      	movs	r3, #2
 80072ae:	e05a      	b.n	8007366 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	4313      	orrs	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a21      	ldr	r2, [pc, #132]	; (8007374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d022      	beq.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072fc:	d01d      	beq.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a1d      	ldr	r2, [pc, #116]	; (8007378 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d018      	beq.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a1b      	ldr	r2, [pc, #108]	; (800737c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d013      	beq.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a1a      	ldr	r2, [pc, #104]	; (8007380 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00e      	beq.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a18      	ldr	r2, [pc, #96]	; (8007384 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d009      	beq.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a17      	ldr	r2, [pc, #92]	; (8007388 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d004      	beq.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a15      	ldr	r2, [pc, #84]	; (800738c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d10c      	bne.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	4313      	orrs	r3, r2
 800734a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	40010000 	.word	0x40010000
 8007378:	40000400 	.word	0x40000400
 800737c:	40000800 	.word	0x40000800
 8007380:	40000c00 	.word	0x40000c00
 8007384:	40010400 	.word	0x40010400
 8007388:	40014000 	.word	0x40014000
 800738c:	40001800 	.word	0x40001800

08007390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e03f      	b.n	800744a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d106      	bne.n	80073e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7fb f99e 	bl	8002720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2224      	movs	r2, #36	; 0x24
 80073e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 ff65 	bl	80082cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	691a      	ldr	r2, [r3, #16]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007410:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	695a      	ldr	r2, [r3, #20]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007420:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007430:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2220      	movs	r2, #32
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2220      	movs	r2, #32
 8007444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b08a      	sub	sp, #40	; 0x28
 8007456:	af02      	add	r7, sp, #8
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	603b      	str	r3, [r7, #0]
 800745e:	4613      	mov	r3, r2
 8007460:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b20      	cmp	r3, #32
 8007470:	d17c      	bne.n	800756c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <HAL_UART_Transmit+0x2c>
 8007478:	88fb      	ldrh	r3, [r7, #6]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e075      	b.n	800756e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_UART_Transmit+0x3e>
 800748c:	2302      	movs	r3, #2
 800748e:	e06e      	b.n	800756e <HAL_UART_Transmit+0x11c>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2221      	movs	r2, #33	; 0x21
 80074a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074a6:	f7fb fc2d 	bl	8002d04 <HAL_GetTick>
 80074aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	88fa      	ldrh	r2, [r7, #6]
 80074b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	88fa      	ldrh	r2, [r7, #6]
 80074b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074c0:	d108      	bne.n	80074d4 <HAL_UART_Transmit+0x82>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d104      	bne.n	80074d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80074ca:	2300      	movs	r3, #0
 80074cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	61bb      	str	r3, [r7, #24]
 80074d2:	e003      	b.n	80074dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074d8:	2300      	movs	r3, #0
 80074da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80074e4:	e02a      	b.n	800753c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2200      	movs	r2, #0
 80074ee:	2180      	movs	r1, #128	; 0x80
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f000 fc21 	bl	8007d38 <UART_WaitOnFlagUntilTimeout>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e036      	b.n	800756e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10b      	bne.n	800751e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007514:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	3302      	adds	r3, #2
 800751a:	61bb      	str	r3, [r7, #24]
 800751c:	e007      	b.n	800752e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	781a      	ldrb	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	3301      	adds	r3, #1
 800752c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007532:	b29b      	uxth	r3, r3
 8007534:	3b01      	subs	r3, #1
 8007536:	b29a      	uxth	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007540:	b29b      	uxth	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1cf      	bne.n	80074e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2200      	movs	r2, #0
 800754e:	2140      	movs	r1, #64	; 0x40
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 fbf1 	bl	8007d38 <UART_WaitOnFlagUntilTimeout>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e006      	b.n	800756e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2220      	movs	r2, #32
 8007564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	e000      	b.n	800756e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800756c:	2302      	movs	r3, #2
  }
}
 800756e:	4618      	mov	r0, r3
 8007570:	3720      	adds	r7, #32
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	60f8      	str	r0, [r7, #12]
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	4613      	mov	r3, r2
 8007582:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b20      	cmp	r3, #32
 800758e:	d11d      	bne.n	80075cc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <HAL_UART_Receive_DMA+0x26>
 8007596:	88fb      	ldrh	r3, [r7, #6]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e016      	b.n	80075ce <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d101      	bne.n	80075ae <HAL_UART_Receive_DMA+0x38>
 80075aa:	2302      	movs	r3, #2
 80075ac:	e00f      	b.n	80075ce <HAL_UART_Receive_DMA+0x58>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80075bc:	88fb      	ldrh	r3, [r7, #6]
 80075be:	461a      	mov	r2, r3
 80075c0:	68b9      	ldr	r1, [r7, #8]
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 fc26 	bl	8007e14 <UART_Start_Receive_DMA>
 80075c8:	4603      	mov	r3, r0
 80075ca:	e000      	b.n	80075ce <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80075cc:	2302      	movs	r3, #2
  }
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b0ba      	sub	sp, #232	; 0xe8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80075fe:	2300      	movs	r3, #0
 8007600:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007604:	2300      	movs	r3, #0
 8007606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800760a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800760e:	f003 030f 	and.w	r3, r3, #15
 8007612:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10f      	bne.n	800763e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800761e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007622:	f003 0320 	and.w	r3, r3, #32
 8007626:	2b00      	cmp	r3, #0
 8007628:	d009      	beq.n	800763e <HAL_UART_IRQHandler+0x66>
 800762a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fd8d 	bl	8008156 <UART_Receive_IT>
      return;
 800763c:	e256      	b.n	8007aec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800763e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 80de 	beq.w	8007804 <HAL_UART_IRQHandler+0x22c>
 8007648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d106      	bne.n	8007662 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007658:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 80d1 	beq.w	8007804 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00b      	beq.n	8007686 <HAL_UART_IRQHandler+0xae>
 800766e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	f043 0201 	orr.w	r2, r3, #1
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00b      	beq.n	80076aa <HAL_UART_IRQHandler+0xd2>
 8007692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	f043 0202 	orr.w	r2, r3, #2
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00b      	beq.n	80076ce <HAL_UART_IRQHandler+0xf6>
 80076b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	f043 0204 	orr.w	r2, r3, #4
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80076ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d2:	f003 0308 	and.w	r3, r3, #8
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d011      	beq.n	80076fe <HAL_UART_IRQHandler+0x126>
 80076da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d105      	bne.n	80076f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80076e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	f043 0208 	orr.w	r2, r3, #8
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 81ed 	beq.w	8007ae2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d008      	beq.n	8007726 <HAL_UART_IRQHandler+0x14e>
 8007714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007718:	f003 0320 	and.w	r3, r3, #32
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fd18 	bl	8008156 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007730:	2b40      	cmp	r3, #64	; 0x40
 8007732:	bf0c      	ite	eq
 8007734:	2301      	moveq	r3, #1
 8007736:	2300      	movne	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	f003 0308 	and.w	r3, r3, #8
 8007746:	2b00      	cmp	r3, #0
 8007748:	d103      	bne.n	8007752 <HAL_UART_IRQHandler+0x17a>
 800774a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800774e:	2b00      	cmp	r3, #0
 8007750:	d04f      	beq.n	80077f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fc20 	bl	8007f98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007762:	2b40      	cmp	r3, #64	; 0x40
 8007764:	d141      	bne.n	80077ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3314      	adds	r3, #20
 800776c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800777c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3314      	adds	r3, #20
 800778e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007792:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007796:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800779e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077a2:	e841 2300 	strex	r3, r2, [r1]
 80077a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1d9      	bne.n	8007766 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d013      	beq.n	80077e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	4a7d      	ldr	r2, [pc, #500]	; (80079b4 <HAL_UART_IRQHandler+0x3dc>)
 80077c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fb fd54 	bl	8003274 <HAL_DMA_Abort_IT>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d016      	beq.n	8007800 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e0:	e00e      	b.n	8007800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f99a 	bl	8007b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e8:	e00a      	b.n	8007800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f996 	bl	8007b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f0:	e006      	b.n	8007800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f992 	bl	8007b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80077fe:	e170      	b.n	8007ae2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007800:	bf00      	nop
    return;
 8007802:	e16e      	b.n	8007ae2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007808:	2b01      	cmp	r3, #1
 800780a:	f040 814a 	bne.w	8007aa2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800780e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007812:	f003 0310 	and.w	r3, r3, #16
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 8143 	beq.w	8007aa2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800781c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007820:	f003 0310 	and.w	r3, r3, #16
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 813c 	beq.w	8007aa2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800782a:	2300      	movs	r3, #0
 800782c:	60bb      	str	r3, [r7, #8]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	60bb      	str	r3, [r7, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	60bb      	str	r3, [r7, #8]
 800783e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784a:	2b40      	cmp	r3, #64	; 0x40
 800784c:	f040 80b4 	bne.w	80079b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800785c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 8140 	beq.w	8007ae6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800786a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800786e:	429a      	cmp	r2, r3
 8007870:	f080 8139 	bcs.w	8007ae6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800787a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007886:	f000 8088 	beq.w	800799a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	330c      	adds	r3, #12
 8007890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	330c      	adds	r3, #12
 80078b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80078b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1d9      	bne.n	800788a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3314      	adds	r3, #20
 80078dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078e8:	f023 0301 	bic.w	r3, r3, #1
 80078ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3314      	adds	r3, #20
 80078f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007900:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007902:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800790c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e1      	bne.n	80078d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3314      	adds	r3, #20
 8007918:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3314      	adds	r3, #20
 8007932:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007936:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007938:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800793c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e3      	bne.n	8007912 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	330c      	adds	r3, #12
 800795e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800796a:	f023 0310 	bic.w	r3, r3, #16
 800796e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	330c      	adds	r3, #12
 8007978:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800797c:	65ba      	str	r2, [r7, #88]	; 0x58
 800797e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007980:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007982:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007984:	e841 2300 	strex	r3, r2, [r1]
 8007988:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800798a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1e3      	bne.n	8007958 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007994:	4618      	mov	r0, r3
 8007996:	f7fb fbfd 	bl	8003194 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f8c0 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079b0:	e099      	b.n	8007ae6 <HAL_UART_IRQHandler+0x50e>
 80079b2:	bf00      	nop
 80079b4:	0800805f 	.word	0x0800805f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 808b 	beq.w	8007aea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80079d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 8086 	beq.w	8007aea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	330c      	adds	r3, #12
 80079e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	330c      	adds	r3, #12
 80079fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a02:	647a      	str	r2, [r7, #68]	; 0x44
 8007a04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e3      	bne.n	80079de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3314      	adds	r3, #20
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	623b      	str	r3, [r7, #32]
   return(result);
 8007a26:	6a3b      	ldr	r3, [r7, #32]
 8007a28:	f023 0301 	bic.w	r3, r3, #1
 8007a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	3314      	adds	r3, #20
 8007a36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a3a:	633a      	str	r2, [r7, #48]	; 0x30
 8007a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e3      	bne.n	8007a16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	330c      	adds	r3, #12
 8007a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f023 0310 	bic.w	r3, r3, #16
 8007a72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	330c      	adds	r3, #12
 8007a7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a80:	61fa      	str	r2, [r7, #28]
 8007a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	69b9      	ldr	r1, [r7, #24]
 8007a86:	69fa      	ldr	r2, [r7, #28]
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e3      	bne.n	8007a5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f848 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007aa0:	e023      	b.n	8007aea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d009      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x4ea>
 8007aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fae3 	bl	8008086 <UART_Transmit_IT>
    return;
 8007ac0:	e014      	b.n	8007aec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00e      	beq.n	8007aec <HAL_UART_IRQHandler+0x514>
 8007ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d008      	beq.n	8007aec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fb23 	bl	8008126 <UART_EndTransmit_IT>
    return;
 8007ae0:	e004      	b.n	8007aec <HAL_UART_IRQHandler+0x514>
    return;
 8007ae2:	bf00      	nop
 8007ae4:	e002      	b.n	8007aec <HAL_UART_IRQHandler+0x514>
      return;
 8007ae6:	bf00      	nop
 8007ae8:	e000      	b.n	8007aec <HAL_UART_IRQHandler+0x514>
      return;
 8007aea:	bf00      	nop
  }
}
 8007aec:	37e8      	adds	r7, #232	; 0xe8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop

08007af4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b09c      	sub	sp, #112	; 0x70
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b54:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d172      	bne.n	8007c4a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b66:	2200      	movs	r2, #0
 8007b68:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	330c      	adds	r3, #12
 8007b70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b80:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	330c      	adds	r3, #12
 8007b88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b8c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b92:	e841 2300 	strex	r3, r2, [r1]
 8007b96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1e5      	bne.n	8007b6a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3314      	adds	r3, #20
 8007ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb0:	f023 0301 	bic.w	r3, r3, #1
 8007bb4:	667b      	str	r3, [r7, #100]	; 0x64
 8007bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3314      	adds	r3, #20
 8007bbc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007bbe:	647a      	str	r2, [r7, #68]	; 0x44
 8007bc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e5      	bne.n	8007b9e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3314      	adds	r3, #20
 8007bd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	623b      	str	r3, [r7, #32]
   return(result);
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be8:	663b      	str	r3, [r7, #96]	; 0x60
 8007bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3314      	adds	r3, #20
 8007bf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bf2:	633a      	str	r2, [r7, #48]	; 0x30
 8007bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e5      	bne.n	8007bd2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c08:	2220      	movs	r2, #32
 8007c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d119      	bne.n	8007c4a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	330c      	adds	r3, #12
 8007c1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f023 0310 	bic.w	r3, r3, #16
 8007c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	330c      	adds	r3, #12
 8007c34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c36:	61fa      	str	r2, [r7, #28]
 8007c38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	69b9      	ldr	r1, [r7, #24]
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	617b      	str	r3, [r7, #20]
   return(result);
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1e5      	bne.n	8007c16 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d106      	bne.n	8007c60 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c56:	4619      	mov	r1, r3
 8007c58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c5a:	f7ff ff69 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c5e:	e002      	b.n	8007c66 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007c60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c62:	f7f9 fd25 	bl	80016b0 <HAL_UART_RxCpltCallback>
}
 8007c66:	bf00      	nop
 8007c68:	3770      	adds	r7, #112	; 0x70
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d108      	bne.n	8007c96 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c88:	085b      	lsrs	r3, r3, #1
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f7ff ff4e 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c94:	e002      	b.n	8007c9c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f7ff ff36 	bl	8007b08 <HAL_UART_RxHalfCpltCallback>
}
 8007c9c:	bf00      	nop
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc0:	2b80      	cmp	r3, #128	; 0x80
 8007cc2:	bf0c      	ite	eq
 8007cc4:	2301      	moveq	r3, #1
 8007cc6:	2300      	movne	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b21      	cmp	r3, #33	; 0x21
 8007cd6:	d108      	bne.n	8007cea <UART_DMAError+0x46>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d005      	beq.n	8007cea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007ce4:	68b8      	ldr	r0, [r7, #8]
 8007ce6:	f000 f92f 	bl	8007f48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf4:	2b40      	cmp	r3, #64	; 0x40
 8007cf6:	bf0c      	ite	eq
 8007cf8:	2301      	moveq	r3, #1
 8007cfa:	2300      	movne	r3, #0
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b22      	cmp	r3, #34	; 0x22
 8007d0a:	d108      	bne.n	8007d1e <UART_DMAError+0x7a>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d005      	beq.n	8007d1e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2200      	movs	r2, #0
 8007d16:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007d18:	68b8      	ldr	r0, [r7, #8]
 8007d1a:	f000 f93d 	bl	8007f98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	f043 0210 	orr.w	r2, r3, #16
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d2a:	68b8      	ldr	r0, [r7, #8]
 8007d2c:	f7ff fef6 	bl	8007b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d30:	bf00      	nop
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b090      	sub	sp, #64	; 0x40
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	4613      	mov	r3, r2
 8007d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d48:	e050      	b.n	8007dec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d50:	d04c      	beq.n	8007dec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d007      	beq.n	8007d68 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d58:	f7fa ffd4 	bl	8002d04 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d241      	bcs.n	8007dec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	330c      	adds	r3, #12
 8007d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d72:	e853 3f00 	ldrex	r3, [r3]
 8007d76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	330c      	adds	r3, #12
 8007d86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d88:	637a      	str	r2, [r7, #52]	; 0x34
 8007d8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d90:	e841 2300 	strex	r3, r2, [r1]
 8007d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1e5      	bne.n	8007d68 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3314      	adds	r3, #20
 8007da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	e853 3f00 	ldrex	r3, [r3]
 8007daa:	613b      	str	r3, [r7, #16]
   return(result);
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	f023 0301 	bic.w	r3, r3, #1
 8007db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3314      	adds	r3, #20
 8007dba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dbc:	623a      	str	r2, [r7, #32]
 8007dbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc0:	69f9      	ldr	r1, [r7, #28]
 8007dc2:	6a3a      	ldr	r2, [r7, #32]
 8007dc4:	e841 2300 	strex	r3, r2, [r1]
 8007dc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1e5      	bne.n	8007d9c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e00f      	b.n	8007e0c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	4013      	ands	r3, r2
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	bf0c      	ite	eq
 8007dfc:	2301      	moveq	r3, #1
 8007dfe:	2300      	movne	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	461a      	mov	r2, r3
 8007e04:	79fb      	ldrb	r3, [r7, #7]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d09f      	beq.n	8007d4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3740      	adds	r7, #64	; 0x40
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b098      	sub	sp, #96	; 0x60
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	88fa      	ldrh	r2, [r7, #6]
 8007e2c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2222      	movs	r2, #34	; 0x22
 8007e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e40:	4a3e      	ldr	r2, [pc, #248]	; (8007f3c <UART_Start_Receive_DMA+0x128>)
 8007e42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	4a3d      	ldr	r2, [pc, #244]	; (8007f40 <UART_Start_Receive_DMA+0x12c>)
 8007e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e50:	4a3c      	ldr	r2, [pc, #240]	; (8007f44 <UART_Start_Receive_DMA+0x130>)
 8007e52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e58:	2200      	movs	r2, #0
 8007e5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007e5c:	f107 0308 	add.w	r3, r7, #8
 8007e60:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	88fb      	ldrh	r3, [r7, #6]
 8007e74:	f7fb f936 	bl	80030e4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007e78:	2300      	movs	r3, #0
 8007e7a:	613b      	str	r3, [r7, #16]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	613b      	str	r3, [r7, #16]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	613b      	str	r3, [r7, #16]
 8007e8c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	330c      	adds	r3, #12
 8007e9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eac:	65bb      	str	r3, [r7, #88]	; 0x58
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	330c      	adds	r3, #12
 8007eb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007eb6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007eb8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007ebc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ebe:	e841 2300 	strex	r3, r2, [r1]
 8007ec2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1e5      	bne.n	8007e96 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	3314      	adds	r3, #20
 8007ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed4:	e853 3f00 	ldrex	r3, [r3]
 8007ed8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007edc:	f043 0301 	orr.w	r3, r3, #1
 8007ee0:	657b      	str	r3, [r7, #84]	; 0x54
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3314      	adds	r3, #20
 8007ee8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007eea:	63ba      	str	r2, [r7, #56]	; 0x38
 8007eec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e5      	bne.n	8007eca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3314      	adds	r3, #20
 8007f04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	e853 3f00 	ldrex	r3, [r3]
 8007f0c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f14:	653b      	str	r3, [r7, #80]	; 0x50
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3314      	adds	r3, #20
 8007f1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f1e:	627a      	str	r2, [r7, #36]	; 0x24
 8007f20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f22:	6a39      	ldr	r1, [r7, #32]
 8007f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f26:	e841 2300 	strex	r3, r2, [r1]
 8007f2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1e5      	bne.n	8007efe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3760      	adds	r7, #96	; 0x60
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	08007b49 	.word	0x08007b49
 8007f40:	08007c6f 	.word	0x08007c6f
 8007f44:	08007ca5 	.word	0x08007ca5

08007f48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b089      	sub	sp, #36	; 0x24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	330c      	adds	r3, #12
 8007f56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	e853 3f00 	ldrex	r3, [r3]
 8007f5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f66:	61fb      	str	r3, [r7, #28]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	330c      	adds	r3, #12
 8007f6e:	69fa      	ldr	r2, [r7, #28]
 8007f70:	61ba      	str	r2, [r7, #24]
 8007f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f74:	6979      	ldr	r1, [r7, #20]
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	e841 2300 	strex	r3, r2, [r1]
 8007f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d1e5      	bne.n	8007f50 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2220      	movs	r2, #32
 8007f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007f8c:	bf00      	nop
 8007f8e:	3724      	adds	r7, #36	; 0x24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b095      	sub	sp, #84	; 0x54
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	330c      	adds	r3, #12
 8007fa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007faa:	e853 3f00 	ldrex	r3, [r3]
 8007fae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	330c      	adds	r3, #12
 8007fbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fc0:	643a      	str	r2, [r7, #64]	; 0x40
 8007fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fc8:	e841 2300 	strex	r3, r2, [r1]
 8007fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e5      	bne.n	8007fa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3314      	adds	r3, #20
 8007fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	e853 3f00 	ldrex	r3, [r3]
 8007fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	f023 0301 	bic.w	r3, r3, #1
 8007fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	3314      	adds	r3, #20
 8007ff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ff4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ffc:	e841 2300 	strex	r3, r2, [r1]
 8008000:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e5      	bne.n	8007fd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800c:	2b01      	cmp	r3, #1
 800800e:	d119      	bne.n	8008044 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	330c      	adds	r3, #12
 8008016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	e853 3f00 	ldrex	r3, [r3]
 800801e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	f023 0310 	bic.w	r3, r3, #16
 8008026:	647b      	str	r3, [r7, #68]	; 0x44
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	330c      	adds	r3, #12
 800802e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008030:	61ba      	str	r2, [r7, #24]
 8008032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008034:	6979      	ldr	r1, [r7, #20]
 8008036:	69ba      	ldr	r2, [r7, #24]
 8008038:	e841 2300 	strex	r3, r2, [r1]
 800803c:	613b      	str	r3, [r7, #16]
   return(result);
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1e5      	bne.n	8008010 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2220      	movs	r2, #32
 8008048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008052:	bf00      	nop
 8008054:	3754      	adds	r7, #84	; 0x54
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b084      	sub	sp, #16
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f7ff fd4f 	bl	8007b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800807e:	bf00      	nop
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008086:	b480      	push	{r7}
 8008088:	b085      	sub	sp, #20
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b21      	cmp	r3, #33	; 0x21
 8008098:	d13e      	bne.n	8008118 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a2:	d114      	bne.n	80080ce <UART_Transmit_IT+0x48>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d110      	bne.n	80080ce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a1b      	ldr	r3, [r3, #32]
 80080b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	1c9a      	adds	r2, r3, #2
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	621a      	str	r2, [r3, #32]
 80080cc:	e008      	b.n	80080e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	1c59      	adds	r1, r3, #1
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	6211      	str	r1, [r2, #32]
 80080d8:	781a      	ldrb	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	3b01      	subs	r3, #1
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	4619      	mov	r1, r3
 80080ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10f      	bne.n	8008114 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008102:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68da      	ldr	r2, [r3, #12]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008112:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	e000      	b.n	800811a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008118:	2302      	movs	r3, #2
  }
}
 800811a:	4618      	mov	r0, r3
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68da      	ldr	r2, [r3, #12]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800813c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2220      	movs	r2, #32
 8008142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7ff fcd4 	bl	8007af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b08c      	sub	sp, #48	; 0x30
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b22      	cmp	r3, #34	; 0x22
 8008168:	f040 80ab 	bne.w	80082c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008174:	d117      	bne.n	80081a6 <UART_Receive_IT+0x50>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d113      	bne.n	80081a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800817e:	2300      	movs	r3, #0
 8008180:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008186:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	b29b      	uxth	r3, r3
 8008190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008194:	b29a      	uxth	r2, r3
 8008196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008198:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819e:	1c9a      	adds	r2, r3, #2
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	629a      	str	r2, [r3, #40]	; 0x28
 80081a4:	e026      	b.n	80081f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80081ac:	2300      	movs	r3, #0
 80081ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b8:	d007      	beq.n	80081ca <UART_Receive_IT+0x74>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10a      	bne.n	80081d8 <UART_Receive_IT+0x82>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d106      	bne.n	80081d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d4:	701a      	strb	r2, [r3, #0]
 80081d6:	e008      	b.n	80081ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081e4:	b2da      	uxtb	r2, r3
 80081e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ee:	1c5a      	adds	r2, r3, #1
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	3b01      	subs	r3, #1
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	4619      	mov	r1, r3
 8008202:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008204:	2b00      	cmp	r3, #0
 8008206:	d15a      	bne.n	80082be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68da      	ldr	r2, [r3, #12]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 0220 	bic.w	r2, r2, #32
 8008216:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68da      	ldr	r2, [r3, #12]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008226:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	695a      	ldr	r2, [r3, #20]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0201 	bic.w	r2, r2, #1
 8008236:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2220      	movs	r2, #32
 800823c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008244:	2b01      	cmp	r3, #1
 8008246:	d135      	bne.n	80082b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	330c      	adds	r3, #12
 8008254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	e853 3f00 	ldrex	r3, [r3]
 800825c:	613b      	str	r3, [r7, #16]
   return(result);
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f023 0310 	bic.w	r3, r3, #16
 8008264:	627b      	str	r3, [r7, #36]	; 0x24
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	330c      	adds	r3, #12
 800826c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800826e:	623a      	str	r2, [r7, #32]
 8008270:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008272:	69f9      	ldr	r1, [r7, #28]
 8008274:	6a3a      	ldr	r2, [r7, #32]
 8008276:	e841 2300 	strex	r3, r2, [r1]
 800827a:	61bb      	str	r3, [r7, #24]
   return(result);
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1e5      	bne.n	800824e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	2b10      	cmp	r3, #16
 800828e:	d10a      	bne.n	80082a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082aa:	4619      	mov	r1, r3
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7ff fc3f 	bl	8007b30 <HAL_UARTEx_RxEventCallback>
 80082b2:	e002      	b.n	80082ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f7f9 f9fb 	bl	80016b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	e002      	b.n	80082c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	e000      	b.n	80082c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80082c2:	2302      	movs	r3, #2
  }
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3730      	adds	r7, #48	; 0x30
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082d0:	b0c0      	sub	sp, #256	; 0x100
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e8:	68d9      	ldr	r1, [r3, #12]
 80082ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	ea40 0301 	orr.w	r3, r0, r1
 80082f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082fa:	689a      	ldr	r2, [r3, #8]
 80082fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	431a      	orrs	r2, r3
 8008304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	431a      	orrs	r2, r3
 800830c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	4313      	orrs	r3, r2
 8008314:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008324:	f021 010c 	bic.w	r1, r1, #12
 8008328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008332:	430b      	orrs	r3, r1
 8008334:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008346:	6999      	ldr	r1, [r3, #24]
 8008348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	ea40 0301 	orr.w	r3, r0, r1
 8008352:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	4b8f      	ldr	r3, [pc, #572]	; (8008598 <UART_SetConfig+0x2cc>)
 800835c:	429a      	cmp	r2, r3
 800835e:	d005      	beq.n	800836c <UART_SetConfig+0xa0>
 8008360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	4b8d      	ldr	r3, [pc, #564]	; (800859c <UART_SetConfig+0x2d0>)
 8008368:	429a      	cmp	r2, r3
 800836a:	d104      	bne.n	8008376 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800836c:	f7fb fd2c 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 8008370:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008374:	e003      	b.n	800837e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008376:	f7fb fd13 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 800837a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800837e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008382:	69db      	ldr	r3, [r3, #28]
 8008384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008388:	f040 810c 	bne.w	80085a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800838c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008390:	2200      	movs	r2, #0
 8008392:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008396:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800839a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800839e:	4622      	mov	r2, r4
 80083a0:	462b      	mov	r3, r5
 80083a2:	1891      	adds	r1, r2, r2
 80083a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80083a6:	415b      	adcs	r3, r3
 80083a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80083ae:	4621      	mov	r1, r4
 80083b0:	eb12 0801 	adds.w	r8, r2, r1
 80083b4:	4629      	mov	r1, r5
 80083b6:	eb43 0901 	adc.w	r9, r3, r1
 80083ba:	f04f 0200 	mov.w	r2, #0
 80083be:	f04f 0300 	mov.w	r3, #0
 80083c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083ce:	4690      	mov	r8, r2
 80083d0:	4699      	mov	r9, r3
 80083d2:	4623      	mov	r3, r4
 80083d4:	eb18 0303 	adds.w	r3, r8, r3
 80083d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083dc:	462b      	mov	r3, r5
 80083de:	eb49 0303 	adc.w	r3, r9, r3
 80083e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80083f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80083fa:	460b      	mov	r3, r1
 80083fc:	18db      	adds	r3, r3, r3
 80083fe:	653b      	str	r3, [r7, #80]	; 0x50
 8008400:	4613      	mov	r3, r2
 8008402:	eb42 0303 	adc.w	r3, r2, r3
 8008406:	657b      	str	r3, [r7, #84]	; 0x54
 8008408:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800840c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008410:	f7f7 ff56 	bl	80002c0 <__aeabi_uldivmod>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	4b61      	ldr	r3, [pc, #388]	; (80085a0 <UART_SetConfig+0x2d4>)
 800841a:	fba3 2302 	umull	r2, r3, r3, r2
 800841e:	095b      	lsrs	r3, r3, #5
 8008420:	011c      	lsls	r4, r3, #4
 8008422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008426:	2200      	movs	r2, #0
 8008428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800842c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008430:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008434:	4642      	mov	r2, r8
 8008436:	464b      	mov	r3, r9
 8008438:	1891      	adds	r1, r2, r2
 800843a:	64b9      	str	r1, [r7, #72]	; 0x48
 800843c:	415b      	adcs	r3, r3
 800843e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008440:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008444:	4641      	mov	r1, r8
 8008446:	eb12 0a01 	adds.w	sl, r2, r1
 800844a:	4649      	mov	r1, r9
 800844c:	eb43 0b01 	adc.w	fp, r3, r1
 8008450:	f04f 0200 	mov.w	r2, #0
 8008454:	f04f 0300 	mov.w	r3, #0
 8008458:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800845c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008460:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008464:	4692      	mov	sl, r2
 8008466:	469b      	mov	fp, r3
 8008468:	4643      	mov	r3, r8
 800846a:	eb1a 0303 	adds.w	r3, sl, r3
 800846e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008472:	464b      	mov	r3, r9
 8008474:	eb4b 0303 	adc.w	r3, fp, r3
 8008478:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800847c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008488:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800848c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008490:	460b      	mov	r3, r1
 8008492:	18db      	adds	r3, r3, r3
 8008494:	643b      	str	r3, [r7, #64]	; 0x40
 8008496:	4613      	mov	r3, r2
 8008498:	eb42 0303 	adc.w	r3, r2, r3
 800849c:	647b      	str	r3, [r7, #68]	; 0x44
 800849e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80084a6:	f7f7 ff0b 	bl	80002c0 <__aeabi_uldivmod>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	4611      	mov	r1, r2
 80084b0:	4b3b      	ldr	r3, [pc, #236]	; (80085a0 <UART_SetConfig+0x2d4>)
 80084b2:	fba3 2301 	umull	r2, r3, r3, r1
 80084b6:	095b      	lsrs	r3, r3, #5
 80084b8:	2264      	movs	r2, #100	; 0x64
 80084ba:	fb02 f303 	mul.w	r3, r2, r3
 80084be:	1acb      	subs	r3, r1, r3
 80084c0:	00db      	lsls	r3, r3, #3
 80084c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80084c6:	4b36      	ldr	r3, [pc, #216]	; (80085a0 <UART_SetConfig+0x2d4>)
 80084c8:	fba3 2302 	umull	r2, r3, r3, r2
 80084cc:	095b      	lsrs	r3, r3, #5
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084d4:	441c      	add	r4, r3
 80084d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084da:	2200      	movs	r2, #0
 80084dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80084e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80084e8:	4642      	mov	r2, r8
 80084ea:	464b      	mov	r3, r9
 80084ec:	1891      	adds	r1, r2, r2
 80084ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80084f0:	415b      	adcs	r3, r3
 80084f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80084f8:	4641      	mov	r1, r8
 80084fa:	1851      	adds	r1, r2, r1
 80084fc:	6339      	str	r1, [r7, #48]	; 0x30
 80084fe:	4649      	mov	r1, r9
 8008500:	414b      	adcs	r3, r1
 8008502:	637b      	str	r3, [r7, #52]	; 0x34
 8008504:	f04f 0200 	mov.w	r2, #0
 8008508:	f04f 0300 	mov.w	r3, #0
 800850c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008510:	4659      	mov	r1, fp
 8008512:	00cb      	lsls	r3, r1, #3
 8008514:	4651      	mov	r1, sl
 8008516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800851a:	4651      	mov	r1, sl
 800851c:	00ca      	lsls	r2, r1, #3
 800851e:	4610      	mov	r0, r2
 8008520:	4619      	mov	r1, r3
 8008522:	4603      	mov	r3, r0
 8008524:	4642      	mov	r2, r8
 8008526:	189b      	adds	r3, r3, r2
 8008528:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800852c:	464b      	mov	r3, r9
 800852e:	460a      	mov	r2, r1
 8008530:	eb42 0303 	adc.w	r3, r2, r3
 8008534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008544:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008548:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800854c:	460b      	mov	r3, r1
 800854e:	18db      	adds	r3, r3, r3
 8008550:	62bb      	str	r3, [r7, #40]	; 0x28
 8008552:	4613      	mov	r3, r2
 8008554:	eb42 0303 	adc.w	r3, r2, r3
 8008558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800855a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800855e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008562:	f7f7 fead 	bl	80002c0 <__aeabi_uldivmod>
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	4b0d      	ldr	r3, [pc, #52]	; (80085a0 <UART_SetConfig+0x2d4>)
 800856c:	fba3 1302 	umull	r1, r3, r3, r2
 8008570:	095b      	lsrs	r3, r3, #5
 8008572:	2164      	movs	r1, #100	; 0x64
 8008574:	fb01 f303 	mul.w	r3, r1, r3
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	00db      	lsls	r3, r3, #3
 800857c:	3332      	adds	r3, #50	; 0x32
 800857e:	4a08      	ldr	r2, [pc, #32]	; (80085a0 <UART_SetConfig+0x2d4>)
 8008580:	fba2 2303 	umull	r2, r3, r2, r3
 8008584:	095b      	lsrs	r3, r3, #5
 8008586:	f003 0207 	and.w	r2, r3, #7
 800858a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4422      	add	r2, r4
 8008592:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008594:	e105      	b.n	80087a2 <UART_SetConfig+0x4d6>
 8008596:	bf00      	nop
 8008598:	40011000 	.word	0x40011000
 800859c:	40011400 	.word	0x40011400
 80085a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085a8:	2200      	movs	r2, #0
 80085aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80085ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80085b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80085b6:	4642      	mov	r2, r8
 80085b8:	464b      	mov	r3, r9
 80085ba:	1891      	adds	r1, r2, r2
 80085bc:	6239      	str	r1, [r7, #32]
 80085be:	415b      	adcs	r3, r3
 80085c0:	627b      	str	r3, [r7, #36]	; 0x24
 80085c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085c6:	4641      	mov	r1, r8
 80085c8:	1854      	adds	r4, r2, r1
 80085ca:	4649      	mov	r1, r9
 80085cc:	eb43 0501 	adc.w	r5, r3, r1
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	00eb      	lsls	r3, r5, #3
 80085da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085de:	00e2      	lsls	r2, r4, #3
 80085e0:	4614      	mov	r4, r2
 80085e2:	461d      	mov	r5, r3
 80085e4:	4643      	mov	r3, r8
 80085e6:	18e3      	adds	r3, r4, r3
 80085e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80085ec:	464b      	mov	r3, r9
 80085ee:	eb45 0303 	adc.w	r3, r5, r3
 80085f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80085f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008602:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008606:	f04f 0200 	mov.w	r2, #0
 800860a:	f04f 0300 	mov.w	r3, #0
 800860e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008612:	4629      	mov	r1, r5
 8008614:	008b      	lsls	r3, r1, #2
 8008616:	4621      	mov	r1, r4
 8008618:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800861c:	4621      	mov	r1, r4
 800861e:	008a      	lsls	r2, r1, #2
 8008620:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008624:	f7f7 fe4c 	bl	80002c0 <__aeabi_uldivmod>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	4b60      	ldr	r3, [pc, #384]	; (80087b0 <UART_SetConfig+0x4e4>)
 800862e:	fba3 2302 	umull	r2, r3, r3, r2
 8008632:	095b      	lsrs	r3, r3, #5
 8008634:	011c      	lsls	r4, r3, #4
 8008636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800863a:	2200      	movs	r2, #0
 800863c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008640:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008644:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008648:	4642      	mov	r2, r8
 800864a:	464b      	mov	r3, r9
 800864c:	1891      	adds	r1, r2, r2
 800864e:	61b9      	str	r1, [r7, #24]
 8008650:	415b      	adcs	r3, r3
 8008652:	61fb      	str	r3, [r7, #28]
 8008654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008658:	4641      	mov	r1, r8
 800865a:	1851      	adds	r1, r2, r1
 800865c:	6139      	str	r1, [r7, #16]
 800865e:	4649      	mov	r1, r9
 8008660:	414b      	adcs	r3, r1
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	f04f 0200 	mov.w	r2, #0
 8008668:	f04f 0300 	mov.w	r3, #0
 800866c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008670:	4659      	mov	r1, fp
 8008672:	00cb      	lsls	r3, r1, #3
 8008674:	4651      	mov	r1, sl
 8008676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800867a:	4651      	mov	r1, sl
 800867c:	00ca      	lsls	r2, r1, #3
 800867e:	4610      	mov	r0, r2
 8008680:	4619      	mov	r1, r3
 8008682:	4603      	mov	r3, r0
 8008684:	4642      	mov	r2, r8
 8008686:	189b      	adds	r3, r3, r2
 8008688:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800868c:	464b      	mov	r3, r9
 800868e:	460a      	mov	r2, r1
 8008690:	eb42 0303 	adc.w	r3, r2, r3
 8008694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80086a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80086a4:	f04f 0200 	mov.w	r2, #0
 80086a8:	f04f 0300 	mov.w	r3, #0
 80086ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80086b0:	4649      	mov	r1, r9
 80086b2:	008b      	lsls	r3, r1, #2
 80086b4:	4641      	mov	r1, r8
 80086b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086ba:	4641      	mov	r1, r8
 80086bc:	008a      	lsls	r2, r1, #2
 80086be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80086c2:	f7f7 fdfd 	bl	80002c0 <__aeabi_uldivmod>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	4b39      	ldr	r3, [pc, #228]	; (80087b0 <UART_SetConfig+0x4e4>)
 80086cc:	fba3 1302 	umull	r1, r3, r3, r2
 80086d0:	095b      	lsrs	r3, r3, #5
 80086d2:	2164      	movs	r1, #100	; 0x64
 80086d4:	fb01 f303 	mul.w	r3, r1, r3
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	011b      	lsls	r3, r3, #4
 80086dc:	3332      	adds	r3, #50	; 0x32
 80086de:	4a34      	ldr	r2, [pc, #208]	; (80087b0 <UART_SetConfig+0x4e4>)
 80086e0:	fba2 2303 	umull	r2, r3, r2, r3
 80086e4:	095b      	lsrs	r3, r3, #5
 80086e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086ea:	441c      	add	r4, r3
 80086ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086f0:	2200      	movs	r2, #0
 80086f2:	673b      	str	r3, [r7, #112]	; 0x70
 80086f4:	677a      	str	r2, [r7, #116]	; 0x74
 80086f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80086fa:	4642      	mov	r2, r8
 80086fc:	464b      	mov	r3, r9
 80086fe:	1891      	adds	r1, r2, r2
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	415b      	adcs	r3, r3
 8008704:	60fb      	str	r3, [r7, #12]
 8008706:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800870a:	4641      	mov	r1, r8
 800870c:	1851      	adds	r1, r2, r1
 800870e:	6039      	str	r1, [r7, #0]
 8008710:	4649      	mov	r1, r9
 8008712:	414b      	adcs	r3, r1
 8008714:	607b      	str	r3, [r7, #4]
 8008716:	f04f 0200 	mov.w	r2, #0
 800871a:	f04f 0300 	mov.w	r3, #0
 800871e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008722:	4659      	mov	r1, fp
 8008724:	00cb      	lsls	r3, r1, #3
 8008726:	4651      	mov	r1, sl
 8008728:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800872c:	4651      	mov	r1, sl
 800872e:	00ca      	lsls	r2, r1, #3
 8008730:	4610      	mov	r0, r2
 8008732:	4619      	mov	r1, r3
 8008734:	4603      	mov	r3, r0
 8008736:	4642      	mov	r2, r8
 8008738:	189b      	adds	r3, r3, r2
 800873a:	66bb      	str	r3, [r7, #104]	; 0x68
 800873c:	464b      	mov	r3, r9
 800873e:	460a      	mov	r2, r1
 8008740:	eb42 0303 	adc.w	r3, r2, r3
 8008744:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	663b      	str	r3, [r7, #96]	; 0x60
 8008750:	667a      	str	r2, [r7, #100]	; 0x64
 8008752:	f04f 0200 	mov.w	r2, #0
 8008756:	f04f 0300 	mov.w	r3, #0
 800875a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800875e:	4649      	mov	r1, r9
 8008760:	008b      	lsls	r3, r1, #2
 8008762:	4641      	mov	r1, r8
 8008764:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008768:	4641      	mov	r1, r8
 800876a:	008a      	lsls	r2, r1, #2
 800876c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008770:	f7f7 fda6 	bl	80002c0 <__aeabi_uldivmod>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4b0d      	ldr	r3, [pc, #52]	; (80087b0 <UART_SetConfig+0x4e4>)
 800877a:	fba3 1302 	umull	r1, r3, r3, r2
 800877e:	095b      	lsrs	r3, r3, #5
 8008780:	2164      	movs	r1, #100	; 0x64
 8008782:	fb01 f303 	mul.w	r3, r1, r3
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	011b      	lsls	r3, r3, #4
 800878a:	3332      	adds	r3, #50	; 0x32
 800878c:	4a08      	ldr	r2, [pc, #32]	; (80087b0 <UART_SetConfig+0x4e4>)
 800878e:	fba2 2303 	umull	r2, r3, r2, r3
 8008792:	095b      	lsrs	r3, r3, #5
 8008794:	f003 020f 	and.w	r2, r3, #15
 8008798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4422      	add	r2, r4
 80087a0:	609a      	str	r2, [r3, #8]
}
 80087a2:	bf00      	nop
 80087a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80087a8:	46bd      	mov	sp, r7
 80087aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087ae:	bf00      	nop
 80087b0:	51eb851f 	.word	0x51eb851f

080087b4 <__errno>:
 80087b4:	4b01      	ldr	r3, [pc, #4]	; (80087bc <__errno+0x8>)
 80087b6:	6818      	ldr	r0, [r3, #0]
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	2000004c 	.word	0x2000004c

080087c0 <__libc_init_array>:
 80087c0:	b570      	push	{r4, r5, r6, lr}
 80087c2:	4d0d      	ldr	r5, [pc, #52]	; (80087f8 <__libc_init_array+0x38>)
 80087c4:	4c0d      	ldr	r4, [pc, #52]	; (80087fc <__libc_init_array+0x3c>)
 80087c6:	1b64      	subs	r4, r4, r5
 80087c8:	10a4      	asrs	r4, r4, #2
 80087ca:	2600      	movs	r6, #0
 80087cc:	42a6      	cmp	r6, r4
 80087ce:	d109      	bne.n	80087e4 <__libc_init_array+0x24>
 80087d0:	4d0b      	ldr	r5, [pc, #44]	; (8008800 <__libc_init_array+0x40>)
 80087d2:	4c0c      	ldr	r4, [pc, #48]	; (8008804 <__libc_init_array+0x44>)
 80087d4:	f000 fcfc 	bl	80091d0 <_init>
 80087d8:	1b64      	subs	r4, r4, r5
 80087da:	10a4      	asrs	r4, r4, #2
 80087dc:	2600      	movs	r6, #0
 80087de:	42a6      	cmp	r6, r4
 80087e0:	d105      	bne.n	80087ee <__libc_init_array+0x2e>
 80087e2:	bd70      	pop	{r4, r5, r6, pc}
 80087e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e8:	4798      	blx	r3
 80087ea:	3601      	adds	r6, #1
 80087ec:	e7ee      	b.n	80087cc <__libc_init_array+0xc>
 80087ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80087f2:	4798      	blx	r3
 80087f4:	3601      	adds	r6, #1
 80087f6:	e7f2      	b.n	80087de <__libc_init_array+0x1e>
 80087f8:	080093f0 	.word	0x080093f0
 80087fc:	080093f0 	.word	0x080093f0
 8008800:	080093f0 	.word	0x080093f0
 8008804:	080093f4 	.word	0x080093f4

08008808 <memcpy>:
 8008808:	440a      	add	r2, r1
 800880a:	4291      	cmp	r1, r2
 800880c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008810:	d100      	bne.n	8008814 <memcpy+0xc>
 8008812:	4770      	bx	lr
 8008814:	b510      	push	{r4, lr}
 8008816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800881a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800881e:	4291      	cmp	r1, r2
 8008820:	d1f9      	bne.n	8008816 <memcpy+0xe>
 8008822:	bd10      	pop	{r4, pc}

08008824 <memset>:
 8008824:	4402      	add	r2, r0
 8008826:	4603      	mov	r3, r0
 8008828:	4293      	cmp	r3, r2
 800882a:	d100      	bne.n	800882e <memset+0xa>
 800882c:	4770      	bx	lr
 800882e:	f803 1b01 	strb.w	r1, [r3], #1
 8008832:	e7f9      	b.n	8008828 <memset+0x4>

08008834 <siprintf>:
 8008834:	b40e      	push	{r1, r2, r3}
 8008836:	b500      	push	{lr}
 8008838:	b09c      	sub	sp, #112	; 0x70
 800883a:	ab1d      	add	r3, sp, #116	; 0x74
 800883c:	9002      	str	r0, [sp, #8]
 800883e:	9006      	str	r0, [sp, #24]
 8008840:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008844:	4809      	ldr	r0, [pc, #36]	; (800886c <siprintf+0x38>)
 8008846:	9107      	str	r1, [sp, #28]
 8008848:	9104      	str	r1, [sp, #16]
 800884a:	4909      	ldr	r1, [pc, #36]	; (8008870 <siprintf+0x3c>)
 800884c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008850:	9105      	str	r1, [sp, #20]
 8008852:	6800      	ldr	r0, [r0, #0]
 8008854:	9301      	str	r3, [sp, #4]
 8008856:	a902      	add	r1, sp, #8
 8008858:	f000 f96a 	bl	8008b30 <_svfiprintf_r>
 800885c:	9b02      	ldr	r3, [sp, #8]
 800885e:	2200      	movs	r2, #0
 8008860:	701a      	strb	r2, [r3, #0]
 8008862:	b01c      	add	sp, #112	; 0x70
 8008864:	f85d eb04 	ldr.w	lr, [sp], #4
 8008868:	b003      	add	sp, #12
 800886a:	4770      	bx	lr
 800886c:	2000004c 	.word	0x2000004c
 8008870:	ffff0208 	.word	0xffff0208

08008874 <strchr>:
 8008874:	b2c9      	uxtb	r1, r1
 8008876:	4603      	mov	r3, r0
 8008878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800887c:	b11a      	cbz	r2, 8008886 <strchr+0x12>
 800887e:	428a      	cmp	r2, r1
 8008880:	d1f9      	bne.n	8008876 <strchr+0x2>
 8008882:	4618      	mov	r0, r3
 8008884:	4770      	bx	lr
 8008886:	2900      	cmp	r1, #0
 8008888:	bf18      	it	ne
 800888a:	2300      	movne	r3, #0
 800888c:	e7f9      	b.n	8008882 <strchr+0xe>
	...

08008890 <strdup>:
 8008890:	4b02      	ldr	r3, [pc, #8]	; (800889c <strdup+0xc>)
 8008892:	4601      	mov	r1, r0
 8008894:	6818      	ldr	r0, [r3, #0]
 8008896:	f000 b803 	b.w	80088a0 <_strdup_r>
 800889a:	bf00      	nop
 800889c:	2000004c 	.word	0x2000004c

080088a0 <_strdup_r>:
 80088a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088a2:	4604      	mov	r4, r0
 80088a4:	4608      	mov	r0, r1
 80088a6:	460d      	mov	r5, r1
 80088a8:	f7f7 fcb2 	bl	8000210 <strlen>
 80088ac:	1c42      	adds	r2, r0, #1
 80088ae:	4611      	mov	r1, r2
 80088b0:	4620      	mov	r0, r4
 80088b2:	9201      	str	r2, [sp, #4]
 80088b4:	f000 f86c 	bl	8008990 <_malloc_r>
 80088b8:	4604      	mov	r4, r0
 80088ba:	b118      	cbz	r0, 80088c4 <_strdup_r+0x24>
 80088bc:	9a01      	ldr	r2, [sp, #4]
 80088be:	4629      	mov	r1, r5
 80088c0:	f7ff ffa2 	bl	8008808 <memcpy>
 80088c4:	4620      	mov	r0, r4
 80088c6:	b003      	add	sp, #12
 80088c8:	bd30      	pop	{r4, r5, pc}

080088ca <strsep>:
 80088ca:	4602      	mov	r2, r0
 80088cc:	2300      	movs	r3, #0
 80088ce:	6800      	ldr	r0, [r0, #0]
 80088d0:	f000 b816 	b.w	8008900 <__strtok_r>

080088d4 <strstr>:
 80088d4:	780a      	ldrb	r2, [r1, #0]
 80088d6:	b570      	push	{r4, r5, r6, lr}
 80088d8:	b96a      	cbnz	r2, 80088f6 <strstr+0x22>
 80088da:	bd70      	pop	{r4, r5, r6, pc}
 80088dc:	429a      	cmp	r2, r3
 80088de:	d109      	bne.n	80088f4 <strstr+0x20>
 80088e0:	460c      	mov	r4, r1
 80088e2:	4605      	mov	r5, r0
 80088e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d0f6      	beq.n	80088da <strstr+0x6>
 80088ec:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80088f0:	429e      	cmp	r6, r3
 80088f2:	d0f7      	beq.n	80088e4 <strstr+0x10>
 80088f4:	3001      	adds	r0, #1
 80088f6:	7803      	ldrb	r3, [r0, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1ef      	bne.n	80088dc <strstr+0x8>
 80088fc:	4618      	mov	r0, r3
 80088fe:	e7ec      	b.n	80088da <strstr+0x6>

08008900 <__strtok_r>:
 8008900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008902:	b908      	cbnz	r0, 8008908 <__strtok_r+0x8>
 8008904:	6810      	ldr	r0, [r2, #0]
 8008906:	b188      	cbz	r0, 800892c <__strtok_r+0x2c>
 8008908:	4604      	mov	r4, r0
 800890a:	4620      	mov	r0, r4
 800890c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008910:	460f      	mov	r7, r1
 8008912:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008916:	b91e      	cbnz	r6, 8008920 <__strtok_r+0x20>
 8008918:	b965      	cbnz	r5, 8008934 <__strtok_r+0x34>
 800891a:	6015      	str	r5, [r2, #0]
 800891c:	4628      	mov	r0, r5
 800891e:	e005      	b.n	800892c <__strtok_r+0x2c>
 8008920:	42b5      	cmp	r5, r6
 8008922:	d1f6      	bne.n	8008912 <__strtok_r+0x12>
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1f0      	bne.n	800890a <__strtok_r+0xa>
 8008928:	6014      	str	r4, [r2, #0]
 800892a:	7003      	strb	r3, [r0, #0]
 800892c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800892e:	461c      	mov	r4, r3
 8008930:	e00c      	b.n	800894c <__strtok_r+0x4c>
 8008932:	b915      	cbnz	r5, 800893a <__strtok_r+0x3a>
 8008934:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008938:	460e      	mov	r6, r1
 800893a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800893e:	42ab      	cmp	r3, r5
 8008940:	d1f7      	bne.n	8008932 <__strtok_r+0x32>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0f3      	beq.n	800892e <__strtok_r+0x2e>
 8008946:	2300      	movs	r3, #0
 8008948:	f804 3c01 	strb.w	r3, [r4, #-1]
 800894c:	6014      	str	r4, [r2, #0]
 800894e:	e7ed      	b.n	800892c <__strtok_r+0x2c>

08008950 <sbrk_aligned>:
 8008950:	b570      	push	{r4, r5, r6, lr}
 8008952:	4e0e      	ldr	r6, [pc, #56]	; (800898c <sbrk_aligned+0x3c>)
 8008954:	460c      	mov	r4, r1
 8008956:	6831      	ldr	r1, [r6, #0]
 8008958:	4605      	mov	r5, r0
 800895a:	b911      	cbnz	r1, 8008962 <sbrk_aligned+0x12>
 800895c:	f000 fb7c 	bl	8009058 <_sbrk_r>
 8008960:	6030      	str	r0, [r6, #0]
 8008962:	4621      	mov	r1, r4
 8008964:	4628      	mov	r0, r5
 8008966:	f000 fb77 	bl	8009058 <_sbrk_r>
 800896a:	1c43      	adds	r3, r0, #1
 800896c:	d00a      	beq.n	8008984 <sbrk_aligned+0x34>
 800896e:	1cc4      	adds	r4, r0, #3
 8008970:	f024 0403 	bic.w	r4, r4, #3
 8008974:	42a0      	cmp	r0, r4
 8008976:	d007      	beq.n	8008988 <sbrk_aligned+0x38>
 8008978:	1a21      	subs	r1, r4, r0
 800897a:	4628      	mov	r0, r5
 800897c:	f000 fb6c 	bl	8009058 <_sbrk_r>
 8008980:	3001      	adds	r0, #1
 8008982:	d101      	bne.n	8008988 <sbrk_aligned+0x38>
 8008984:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008988:	4620      	mov	r0, r4
 800898a:	bd70      	pop	{r4, r5, r6, pc}
 800898c:	20004c9c 	.word	0x20004c9c

08008990 <_malloc_r>:
 8008990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008994:	1ccd      	adds	r5, r1, #3
 8008996:	f025 0503 	bic.w	r5, r5, #3
 800899a:	3508      	adds	r5, #8
 800899c:	2d0c      	cmp	r5, #12
 800899e:	bf38      	it	cc
 80089a0:	250c      	movcc	r5, #12
 80089a2:	2d00      	cmp	r5, #0
 80089a4:	4607      	mov	r7, r0
 80089a6:	db01      	blt.n	80089ac <_malloc_r+0x1c>
 80089a8:	42a9      	cmp	r1, r5
 80089aa:	d905      	bls.n	80089b8 <_malloc_r+0x28>
 80089ac:	230c      	movs	r3, #12
 80089ae:	603b      	str	r3, [r7, #0]
 80089b0:	2600      	movs	r6, #0
 80089b2:	4630      	mov	r0, r6
 80089b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b8:	4e2e      	ldr	r6, [pc, #184]	; (8008a74 <_malloc_r+0xe4>)
 80089ba:	f000 fb77 	bl	80090ac <__malloc_lock>
 80089be:	6833      	ldr	r3, [r6, #0]
 80089c0:	461c      	mov	r4, r3
 80089c2:	bb34      	cbnz	r4, 8008a12 <_malloc_r+0x82>
 80089c4:	4629      	mov	r1, r5
 80089c6:	4638      	mov	r0, r7
 80089c8:	f7ff ffc2 	bl	8008950 <sbrk_aligned>
 80089cc:	1c43      	adds	r3, r0, #1
 80089ce:	4604      	mov	r4, r0
 80089d0:	d14d      	bne.n	8008a6e <_malloc_r+0xde>
 80089d2:	6834      	ldr	r4, [r6, #0]
 80089d4:	4626      	mov	r6, r4
 80089d6:	2e00      	cmp	r6, #0
 80089d8:	d140      	bne.n	8008a5c <_malloc_r+0xcc>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	4631      	mov	r1, r6
 80089de:	4638      	mov	r0, r7
 80089e0:	eb04 0803 	add.w	r8, r4, r3
 80089e4:	f000 fb38 	bl	8009058 <_sbrk_r>
 80089e8:	4580      	cmp	r8, r0
 80089ea:	d13a      	bne.n	8008a62 <_malloc_r+0xd2>
 80089ec:	6821      	ldr	r1, [r4, #0]
 80089ee:	3503      	adds	r5, #3
 80089f0:	1a6d      	subs	r5, r5, r1
 80089f2:	f025 0503 	bic.w	r5, r5, #3
 80089f6:	3508      	adds	r5, #8
 80089f8:	2d0c      	cmp	r5, #12
 80089fa:	bf38      	it	cc
 80089fc:	250c      	movcc	r5, #12
 80089fe:	4629      	mov	r1, r5
 8008a00:	4638      	mov	r0, r7
 8008a02:	f7ff ffa5 	bl	8008950 <sbrk_aligned>
 8008a06:	3001      	adds	r0, #1
 8008a08:	d02b      	beq.n	8008a62 <_malloc_r+0xd2>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	442b      	add	r3, r5
 8008a0e:	6023      	str	r3, [r4, #0]
 8008a10:	e00e      	b.n	8008a30 <_malloc_r+0xa0>
 8008a12:	6822      	ldr	r2, [r4, #0]
 8008a14:	1b52      	subs	r2, r2, r5
 8008a16:	d41e      	bmi.n	8008a56 <_malloc_r+0xc6>
 8008a18:	2a0b      	cmp	r2, #11
 8008a1a:	d916      	bls.n	8008a4a <_malloc_r+0xba>
 8008a1c:	1961      	adds	r1, r4, r5
 8008a1e:	42a3      	cmp	r3, r4
 8008a20:	6025      	str	r5, [r4, #0]
 8008a22:	bf18      	it	ne
 8008a24:	6059      	strne	r1, [r3, #4]
 8008a26:	6863      	ldr	r3, [r4, #4]
 8008a28:	bf08      	it	eq
 8008a2a:	6031      	streq	r1, [r6, #0]
 8008a2c:	5162      	str	r2, [r4, r5]
 8008a2e:	604b      	str	r3, [r1, #4]
 8008a30:	4638      	mov	r0, r7
 8008a32:	f104 060b 	add.w	r6, r4, #11
 8008a36:	f000 fb3f 	bl	80090b8 <__malloc_unlock>
 8008a3a:	f026 0607 	bic.w	r6, r6, #7
 8008a3e:	1d23      	adds	r3, r4, #4
 8008a40:	1af2      	subs	r2, r6, r3
 8008a42:	d0b6      	beq.n	80089b2 <_malloc_r+0x22>
 8008a44:	1b9b      	subs	r3, r3, r6
 8008a46:	50a3      	str	r3, [r4, r2]
 8008a48:	e7b3      	b.n	80089b2 <_malloc_r+0x22>
 8008a4a:	6862      	ldr	r2, [r4, #4]
 8008a4c:	42a3      	cmp	r3, r4
 8008a4e:	bf0c      	ite	eq
 8008a50:	6032      	streq	r2, [r6, #0]
 8008a52:	605a      	strne	r2, [r3, #4]
 8008a54:	e7ec      	b.n	8008a30 <_malloc_r+0xa0>
 8008a56:	4623      	mov	r3, r4
 8008a58:	6864      	ldr	r4, [r4, #4]
 8008a5a:	e7b2      	b.n	80089c2 <_malloc_r+0x32>
 8008a5c:	4634      	mov	r4, r6
 8008a5e:	6876      	ldr	r6, [r6, #4]
 8008a60:	e7b9      	b.n	80089d6 <_malloc_r+0x46>
 8008a62:	230c      	movs	r3, #12
 8008a64:	603b      	str	r3, [r7, #0]
 8008a66:	4638      	mov	r0, r7
 8008a68:	f000 fb26 	bl	80090b8 <__malloc_unlock>
 8008a6c:	e7a1      	b.n	80089b2 <_malloc_r+0x22>
 8008a6e:	6025      	str	r5, [r4, #0]
 8008a70:	e7de      	b.n	8008a30 <_malloc_r+0xa0>
 8008a72:	bf00      	nop
 8008a74:	20004c98 	.word	0x20004c98

08008a78 <__ssputs_r>:
 8008a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a7c:	688e      	ldr	r6, [r1, #8]
 8008a7e:	429e      	cmp	r6, r3
 8008a80:	4682      	mov	sl, r0
 8008a82:	460c      	mov	r4, r1
 8008a84:	4690      	mov	r8, r2
 8008a86:	461f      	mov	r7, r3
 8008a88:	d838      	bhi.n	8008afc <__ssputs_r+0x84>
 8008a8a:	898a      	ldrh	r2, [r1, #12]
 8008a8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a90:	d032      	beq.n	8008af8 <__ssputs_r+0x80>
 8008a92:	6825      	ldr	r5, [r4, #0]
 8008a94:	6909      	ldr	r1, [r1, #16]
 8008a96:	eba5 0901 	sub.w	r9, r5, r1
 8008a9a:	6965      	ldr	r5, [r4, #20]
 8008a9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008aa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	444b      	add	r3, r9
 8008aa8:	106d      	asrs	r5, r5, #1
 8008aaa:	429d      	cmp	r5, r3
 8008aac:	bf38      	it	cc
 8008aae:	461d      	movcc	r5, r3
 8008ab0:	0553      	lsls	r3, r2, #21
 8008ab2:	d531      	bpl.n	8008b18 <__ssputs_r+0xa0>
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	f7ff ff6b 	bl	8008990 <_malloc_r>
 8008aba:	4606      	mov	r6, r0
 8008abc:	b950      	cbnz	r0, 8008ad4 <__ssputs_r+0x5c>
 8008abe:	230c      	movs	r3, #12
 8008ac0:	f8ca 3000 	str.w	r3, [sl]
 8008ac4:	89a3      	ldrh	r3, [r4, #12]
 8008ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aca:	81a3      	strh	r3, [r4, #12]
 8008acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ad4:	6921      	ldr	r1, [r4, #16]
 8008ad6:	464a      	mov	r2, r9
 8008ad8:	f7ff fe96 	bl	8008808 <memcpy>
 8008adc:	89a3      	ldrh	r3, [r4, #12]
 8008ade:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae6:	81a3      	strh	r3, [r4, #12]
 8008ae8:	6126      	str	r6, [r4, #16]
 8008aea:	6165      	str	r5, [r4, #20]
 8008aec:	444e      	add	r6, r9
 8008aee:	eba5 0509 	sub.w	r5, r5, r9
 8008af2:	6026      	str	r6, [r4, #0]
 8008af4:	60a5      	str	r5, [r4, #8]
 8008af6:	463e      	mov	r6, r7
 8008af8:	42be      	cmp	r6, r7
 8008afa:	d900      	bls.n	8008afe <__ssputs_r+0x86>
 8008afc:	463e      	mov	r6, r7
 8008afe:	6820      	ldr	r0, [r4, #0]
 8008b00:	4632      	mov	r2, r6
 8008b02:	4641      	mov	r1, r8
 8008b04:	f000 fab8 	bl	8009078 <memmove>
 8008b08:	68a3      	ldr	r3, [r4, #8]
 8008b0a:	1b9b      	subs	r3, r3, r6
 8008b0c:	60a3      	str	r3, [r4, #8]
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	4433      	add	r3, r6
 8008b12:	6023      	str	r3, [r4, #0]
 8008b14:	2000      	movs	r0, #0
 8008b16:	e7db      	b.n	8008ad0 <__ssputs_r+0x58>
 8008b18:	462a      	mov	r2, r5
 8008b1a:	f000 fb1f 	bl	800915c <_realloc_r>
 8008b1e:	4606      	mov	r6, r0
 8008b20:	2800      	cmp	r0, #0
 8008b22:	d1e1      	bne.n	8008ae8 <__ssputs_r+0x70>
 8008b24:	6921      	ldr	r1, [r4, #16]
 8008b26:	4650      	mov	r0, sl
 8008b28:	f000 facc 	bl	80090c4 <_free_r>
 8008b2c:	e7c7      	b.n	8008abe <__ssputs_r+0x46>
	...

08008b30 <_svfiprintf_r>:
 8008b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b34:	4698      	mov	r8, r3
 8008b36:	898b      	ldrh	r3, [r1, #12]
 8008b38:	061b      	lsls	r3, r3, #24
 8008b3a:	b09d      	sub	sp, #116	; 0x74
 8008b3c:	4607      	mov	r7, r0
 8008b3e:	460d      	mov	r5, r1
 8008b40:	4614      	mov	r4, r2
 8008b42:	d50e      	bpl.n	8008b62 <_svfiprintf_r+0x32>
 8008b44:	690b      	ldr	r3, [r1, #16]
 8008b46:	b963      	cbnz	r3, 8008b62 <_svfiprintf_r+0x32>
 8008b48:	2140      	movs	r1, #64	; 0x40
 8008b4a:	f7ff ff21 	bl	8008990 <_malloc_r>
 8008b4e:	6028      	str	r0, [r5, #0]
 8008b50:	6128      	str	r0, [r5, #16]
 8008b52:	b920      	cbnz	r0, 8008b5e <_svfiprintf_r+0x2e>
 8008b54:	230c      	movs	r3, #12
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b5c:	e0d1      	b.n	8008d02 <_svfiprintf_r+0x1d2>
 8008b5e:	2340      	movs	r3, #64	; 0x40
 8008b60:	616b      	str	r3, [r5, #20]
 8008b62:	2300      	movs	r3, #0
 8008b64:	9309      	str	r3, [sp, #36]	; 0x24
 8008b66:	2320      	movs	r3, #32
 8008b68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b70:	2330      	movs	r3, #48	; 0x30
 8008b72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d1c <_svfiprintf_r+0x1ec>
 8008b76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b7a:	f04f 0901 	mov.w	r9, #1
 8008b7e:	4623      	mov	r3, r4
 8008b80:	469a      	mov	sl, r3
 8008b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b86:	b10a      	cbz	r2, 8008b8c <_svfiprintf_r+0x5c>
 8008b88:	2a25      	cmp	r2, #37	; 0x25
 8008b8a:	d1f9      	bne.n	8008b80 <_svfiprintf_r+0x50>
 8008b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8008b90:	d00b      	beq.n	8008baa <_svfiprintf_r+0x7a>
 8008b92:	465b      	mov	r3, fp
 8008b94:	4622      	mov	r2, r4
 8008b96:	4629      	mov	r1, r5
 8008b98:	4638      	mov	r0, r7
 8008b9a:	f7ff ff6d 	bl	8008a78 <__ssputs_r>
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	f000 80aa 	beq.w	8008cf8 <_svfiprintf_r+0x1c8>
 8008ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ba6:	445a      	add	r2, fp
 8008ba8:	9209      	str	r2, [sp, #36]	; 0x24
 8008baa:	f89a 3000 	ldrb.w	r3, [sl]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 80a2 	beq.w	8008cf8 <_svfiprintf_r+0x1c8>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bbe:	f10a 0a01 	add.w	sl, sl, #1
 8008bc2:	9304      	str	r3, [sp, #16]
 8008bc4:	9307      	str	r3, [sp, #28]
 8008bc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bca:	931a      	str	r3, [sp, #104]	; 0x68
 8008bcc:	4654      	mov	r4, sl
 8008bce:	2205      	movs	r2, #5
 8008bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd4:	4851      	ldr	r0, [pc, #324]	; (8008d1c <_svfiprintf_r+0x1ec>)
 8008bd6:	f7f7 fb23 	bl	8000220 <memchr>
 8008bda:	9a04      	ldr	r2, [sp, #16]
 8008bdc:	b9d8      	cbnz	r0, 8008c16 <_svfiprintf_r+0xe6>
 8008bde:	06d0      	lsls	r0, r2, #27
 8008be0:	bf44      	itt	mi
 8008be2:	2320      	movmi	r3, #32
 8008be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008be8:	0711      	lsls	r1, r2, #28
 8008bea:	bf44      	itt	mi
 8008bec:	232b      	movmi	r3, #43	; 0x2b
 8008bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8008bf8:	d015      	beq.n	8008c26 <_svfiprintf_r+0xf6>
 8008bfa:	9a07      	ldr	r2, [sp, #28]
 8008bfc:	4654      	mov	r4, sl
 8008bfe:	2000      	movs	r0, #0
 8008c00:	f04f 0c0a 	mov.w	ip, #10
 8008c04:	4621      	mov	r1, r4
 8008c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c0a:	3b30      	subs	r3, #48	; 0x30
 8008c0c:	2b09      	cmp	r3, #9
 8008c0e:	d94e      	bls.n	8008cae <_svfiprintf_r+0x17e>
 8008c10:	b1b0      	cbz	r0, 8008c40 <_svfiprintf_r+0x110>
 8008c12:	9207      	str	r2, [sp, #28]
 8008c14:	e014      	b.n	8008c40 <_svfiprintf_r+0x110>
 8008c16:	eba0 0308 	sub.w	r3, r0, r8
 8008c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	9304      	str	r3, [sp, #16]
 8008c22:	46a2      	mov	sl, r4
 8008c24:	e7d2      	b.n	8008bcc <_svfiprintf_r+0x9c>
 8008c26:	9b03      	ldr	r3, [sp, #12]
 8008c28:	1d19      	adds	r1, r3, #4
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	9103      	str	r1, [sp, #12]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	bfbb      	ittet	lt
 8008c32:	425b      	neglt	r3, r3
 8008c34:	f042 0202 	orrlt.w	r2, r2, #2
 8008c38:	9307      	strge	r3, [sp, #28]
 8008c3a:	9307      	strlt	r3, [sp, #28]
 8008c3c:	bfb8      	it	lt
 8008c3e:	9204      	strlt	r2, [sp, #16]
 8008c40:	7823      	ldrb	r3, [r4, #0]
 8008c42:	2b2e      	cmp	r3, #46	; 0x2e
 8008c44:	d10c      	bne.n	8008c60 <_svfiprintf_r+0x130>
 8008c46:	7863      	ldrb	r3, [r4, #1]
 8008c48:	2b2a      	cmp	r3, #42	; 0x2a
 8008c4a:	d135      	bne.n	8008cb8 <_svfiprintf_r+0x188>
 8008c4c:	9b03      	ldr	r3, [sp, #12]
 8008c4e:	1d1a      	adds	r2, r3, #4
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	9203      	str	r2, [sp, #12]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	bfb8      	it	lt
 8008c58:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008c5c:	3402      	adds	r4, #2
 8008c5e:	9305      	str	r3, [sp, #20]
 8008c60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d2c <_svfiprintf_r+0x1fc>
 8008c64:	7821      	ldrb	r1, [r4, #0]
 8008c66:	2203      	movs	r2, #3
 8008c68:	4650      	mov	r0, sl
 8008c6a:	f7f7 fad9 	bl	8000220 <memchr>
 8008c6e:	b140      	cbz	r0, 8008c82 <_svfiprintf_r+0x152>
 8008c70:	2340      	movs	r3, #64	; 0x40
 8008c72:	eba0 000a 	sub.w	r0, r0, sl
 8008c76:	fa03 f000 	lsl.w	r0, r3, r0
 8008c7a:	9b04      	ldr	r3, [sp, #16]
 8008c7c:	4303      	orrs	r3, r0
 8008c7e:	3401      	adds	r4, #1
 8008c80:	9304      	str	r3, [sp, #16]
 8008c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c86:	4826      	ldr	r0, [pc, #152]	; (8008d20 <_svfiprintf_r+0x1f0>)
 8008c88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c8c:	2206      	movs	r2, #6
 8008c8e:	f7f7 fac7 	bl	8000220 <memchr>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d038      	beq.n	8008d08 <_svfiprintf_r+0x1d8>
 8008c96:	4b23      	ldr	r3, [pc, #140]	; (8008d24 <_svfiprintf_r+0x1f4>)
 8008c98:	bb1b      	cbnz	r3, 8008ce2 <_svfiprintf_r+0x1b2>
 8008c9a:	9b03      	ldr	r3, [sp, #12]
 8008c9c:	3307      	adds	r3, #7
 8008c9e:	f023 0307 	bic.w	r3, r3, #7
 8008ca2:	3308      	adds	r3, #8
 8008ca4:	9303      	str	r3, [sp, #12]
 8008ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ca8:	4433      	add	r3, r6
 8008caa:	9309      	str	r3, [sp, #36]	; 0x24
 8008cac:	e767      	b.n	8008b7e <_svfiprintf_r+0x4e>
 8008cae:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cb2:	460c      	mov	r4, r1
 8008cb4:	2001      	movs	r0, #1
 8008cb6:	e7a5      	b.n	8008c04 <_svfiprintf_r+0xd4>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	3401      	adds	r4, #1
 8008cbc:	9305      	str	r3, [sp, #20]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	f04f 0c0a 	mov.w	ip, #10
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cca:	3a30      	subs	r2, #48	; 0x30
 8008ccc:	2a09      	cmp	r2, #9
 8008cce:	d903      	bls.n	8008cd8 <_svfiprintf_r+0x1a8>
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0c5      	beq.n	8008c60 <_svfiprintf_r+0x130>
 8008cd4:	9105      	str	r1, [sp, #20]
 8008cd6:	e7c3      	b.n	8008c60 <_svfiprintf_r+0x130>
 8008cd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cdc:	4604      	mov	r4, r0
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e7f0      	b.n	8008cc4 <_svfiprintf_r+0x194>
 8008ce2:	ab03      	add	r3, sp, #12
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	462a      	mov	r2, r5
 8008ce8:	4b0f      	ldr	r3, [pc, #60]	; (8008d28 <_svfiprintf_r+0x1f8>)
 8008cea:	a904      	add	r1, sp, #16
 8008cec:	4638      	mov	r0, r7
 8008cee:	f3af 8000 	nop.w
 8008cf2:	1c42      	adds	r2, r0, #1
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	d1d6      	bne.n	8008ca6 <_svfiprintf_r+0x176>
 8008cf8:	89ab      	ldrh	r3, [r5, #12]
 8008cfa:	065b      	lsls	r3, r3, #25
 8008cfc:	f53f af2c 	bmi.w	8008b58 <_svfiprintf_r+0x28>
 8008d00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d02:	b01d      	add	sp, #116	; 0x74
 8008d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d08:	ab03      	add	r3, sp, #12
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	462a      	mov	r2, r5
 8008d0e:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <_svfiprintf_r+0x1f8>)
 8008d10:	a904      	add	r1, sp, #16
 8008d12:	4638      	mov	r0, r7
 8008d14:	f000 f87a 	bl	8008e0c <_printf_i>
 8008d18:	e7eb      	b.n	8008cf2 <_svfiprintf_r+0x1c2>
 8008d1a:	bf00      	nop
 8008d1c:	080093b4 	.word	0x080093b4
 8008d20:	080093be 	.word	0x080093be
 8008d24:	00000000 	.word	0x00000000
 8008d28:	08008a79 	.word	0x08008a79
 8008d2c:	080093ba 	.word	0x080093ba

08008d30 <_printf_common>:
 8008d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d34:	4616      	mov	r6, r2
 8008d36:	4699      	mov	r9, r3
 8008d38:	688a      	ldr	r2, [r1, #8]
 8008d3a:	690b      	ldr	r3, [r1, #16]
 8008d3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d40:	4293      	cmp	r3, r2
 8008d42:	bfb8      	it	lt
 8008d44:	4613      	movlt	r3, r2
 8008d46:	6033      	str	r3, [r6, #0]
 8008d48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	460c      	mov	r4, r1
 8008d50:	b10a      	cbz	r2, 8008d56 <_printf_common+0x26>
 8008d52:	3301      	adds	r3, #1
 8008d54:	6033      	str	r3, [r6, #0]
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	0699      	lsls	r1, r3, #26
 8008d5a:	bf42      	ittt	mi
 8008d5c:	6833      	ldrmi	r3, [r6, #0]
 8008d5e:	3302      	addmi	r3, #2
 8008d60:	6033      	strmi	r3, [r6, #0]
 8008d62:	6825      	ldr	r5, [r4, #0]
 8008d64:	f015 0506 	ands.w	r5, r5, #6
 8008d68:	d106      	bne.n	8008d78 <_printf_common+0x48>
 8008d6a:	f104 0a19 	add.w	sl, r4, #25
 8008d6e:	68e3      	ldr	r3, [r4, #12]
 8008d70:	6832      	ldr	r2, [r6, #0]
 8008d72:	1a9b      	subs	r3, r3, r2
 8008d74:	42ab      	cmp	r3, r5
 8008d76:	dc26      	bgt.n	8008dc6 <_printf_common+0x96>
 8008d78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d7c:	1e13      	subs	r3, r2, #0
 8008d7e:	6822      	ldr	r2, [r4, #0]
 8008d80:	bf18      	it	ne
 8008d82:	2301      	movne	r3, #1
 8008d84:	0692      	lsls	r2, r2, #26
 8008d86:	d42b      	bmi.n	8008de0 <_printf_common+0xb0>
 8008d88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	4638      	mov	r0, r7
 8008d90:	47c0      	blx	r8
 8008d92:	3001      	adds	r0, #1
 8008d94:	d01e      	beq.n	8008dd4 <_printf_common+0xa4>
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	68e5      	ldr	r5, [r4, #12]
 8008d9a:	6832      	ldr	r2, [r6, #0]
 8008d9c:	f003 0306 	and.w	r3, r3, #6
 8008da0:	2b04      	cmp	r3, #4
 8008da2:	bf08      	it	eq
 8008da4:	1aad      	subeq	r5, r5, r2
 8008da6:	68a3      	ldr	r3, [r4, #8]
 8008da8:	6922      	ldr	r2, [r4, #16]
 8008daa:	bf0c      	ite	eq
 8008dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008db0:	2500      	movne	r5, #0
 8008db2:	4293      	cmp	r3, r2
 8008db4:	bfc4      	itt	gt
 8008db6:	1a9b      	subgt	r3, r3, r2
 8008db8:	18ed      	addgt	r5, r5, r3
 8008dba:	2600      	movs	r6, #0
 8008dbc:	341a      	adds	r4, #26
 8008dbe:	42b5      	cmp	r5, r6
 8008dc0:	d11a      	bne.n	8008df8 <_printf_common+0xc8>
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	e008      	b.n	8008dd8 <_printf_common+0xa8>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	4652      	mov	r2, sl
 8008dca:	4649      	mov	r1, r9
 8008dcc:	4638      	mov	r0, r7
 8008dce:	47c0      	blx	r8
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d103      	bne.n	8008ddc <_printf_common+0xac>
 8008dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ddc:	3501      	adds	r5, #1
 8008dde:	e7c6      	b.n	8008d6e <_printf_common+0x3e>
 8008de0:	18e1      	adds	r1, r4, r3
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	2030      	movs	r0, #48	; 0x30
 8008de6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dea:	4422      	add	r2, r4
 8008dec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008df0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008df4:	3302      	adds	r3, #2
 8008df6:	e7c7      	b.n	8008d88 <_printf_common+0x58>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	4622      	mov	r2, r4
 8008dfc:	4649      	mov	r1, r9
 8008dfe:	4638      	mov	r0, r7
 8008e00:	47c0      	blx	r8
 8008e02:	3001      	adds	r0, #1
 8008e04:	d0e6      	beq.n	8008dd4 <_printf_common+0xa4>
 8008e06:	3601      	adds	r6, #1
 8008e08:	e7d9      	b.n	8008dbe <_printf_common+0x8e>
	...

08008e0c <_printf_i>:
 8008e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e10:	7e0f      	ldrb	r7, [r1, #24]
 8008e12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e14:	2f78      	cmp	r7, #120	; 0x78
 8008e16:	4691      	mov	r9, r2
 8008e18:	4680      	mov	r8, r0
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	469a      	mov	sl, r3
 8008e1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e22:	d807      	bhi.n	8008e34 <_printf_i+0x28>
 8008e24:	2f62      	cmp	r7, #98	; 0x62
 8008e26:	d80a      	bhi.n	8008e3e <_printf_i+0x32>
 8008e28:	2f00      	cmp	r7, #0
 8008e2a:	f000 80d8 	beq.w	8008fde <_printf_i+0x1d2>
 8008e2e:	2f58      	cmp	r7, #88	; 0x58
 8008e30:	f000 80a3 	beq.w	8008f7a <_printf_i+0x16e>
 8008e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e3c:	e03a      	b.n	8008eb4 <_printf_i+0xa8>
 8008e3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e42:	2b15      	cmp	r3, #21
 8008e44:	d8f6      	bhi.n	8008e34 <_printf_i+0x28>
 8008e46:	a101      	add	r1, pc, #4	; (adr r1, 8008e4c <_printf_i+0x40>)
 8008e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e4c:	08008ea5 	.word	0x08008ea5
 8008e50:	08008eb9 	.word	0x08008eb9
 8008e54:	08008e35 	.word	0x08008e35
 8008e58:	08008e35 	.word	0x08008e35
 8008e5c:	08008e35 	.word	0x08008e35
 8008e60:	08008e35 	.word	0x08008e35
 8008e64:	08008eb9 	.word	0x08008eb9
 8008e68:	08008e35 	.word	0x08008e35
 8008e6c:	08008e35 	.word	0x08008e35
 8008e70:	08008e35 	.word	0x08008e35
 8008e74:	08008e35 	.word	0x08008e35
 8008e78:	08008fc5 	.word	0x08008fc5
 8008e7c:	08008ee9 	.word	0x08008ee9
 8008e80:	08008fa7 	.word	0x08008fa7
 8008e84:	08008e35 	.word	0x08008e35
 8008e88:	08008e35 	.word	0x08008e35
 8008e8c:	08008fe7 	.word	0x08008fe7
 8008e90:	08008e35 	.word	0x08008e35
 8008e94:	08008ee9 	.word	0x08008ee9
 8008e98:	08008e35 	.word	0x08008e35
 8008e9c:	08008e35 	.word	0x08008e35
 8008ea0:	08008faf 	.word	0x08008faf
 8008ea4:	682b      	ldr	r3, [r5, #0]
 8008ea6:	1d1a      	adds	r2, r3, #4
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	602a      	str	r2, [r5, #0]
 8008eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e0a3      	b.n	8009000 <_printf_i+0x1f4>
 8008eb8:	6820      	ldr	r0, [r4, #0]
 8008eba:	6829      	ldr	r1, [r5, #0]
 8008ebc:	0606      	lsls	r6, r0, #24
 8008ebe:	f101 0304 	add.w	r3, r1, #4
 8008ec2:	d50a      	bpl.n	8008eda <_printf_i+0xce>
 8008ec4:	680e      	ldr	r6, [r1, #0]
 8008ec6:	602b      	str	r3, [r5, #0]
 8008ec8:	2e00      	cmp	r6, #0
 8008eca:	da03      	bge.n	8008ed4 <_printf_i+0xc8>
 8008ecc:	232d      	movs	r3, #45	; 0x2d
 8008ece:	4276      	negs	r6, r6
 8008ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ed4:	485e      	ldr	r0, [pc, #376]	; (8009050 <_printf_i+0x244>)
 8008ed6:	230a      	movs	r3, #10
 8008ed8:	e019      	b.n	8008f0e <_printf_i+0x102>
 8008eda:	680e      	ldr	r6, [r1, #0]
 8008edc:	602b      	str	r3, [r5, #0]
 8008ede:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ee2:	bf18      	it	ne
 8008ee4:	b236      	sxthne	r6, r6
 8008ee6:	e7ef      	b.n	8008ec8 <_printf_i+0xbc>
 8008ee8:	682b      	ldr	r3, [r5, #0]
 8008eea:	6820      	ldr	r0, [r4, #0]
 8008eec:	1d19      	adds	r1, r3, #4
 8008eee:	6029      	str	r1, [r5, #0]
 8008ef0:	0601      	lsls	r1, r0, #24
 8008ef2:	d501      	bpl.n	8008ef8 <_printf_i+0xec>
 8008ef4:	681e      	ldr	r6, [r3, #0]
 8008ef6:	e002      	b.n	8008efe <_printf_i+0xf2>
 8008ef8:	0646      	lsls	r6, r0, #25
 8008efa:	d5fb      	bpl.n	8008ef4 <_printf_i+0xe8>
 8008efc:	881e      	ldrh	r6, [r3, #0]
 8008efe:	4854      	ldr	r0, [pc, #336]	; (8009050 <_printf_i+0x244>)
 8008f00:	2f6f      	cmp	r7, #111	; 0x6f
 8008f02:	bf0c      	ite	eq
 8008f04:	2308      	moveq	r3, #8
 8008f06:	230a      	movne	r3, #10
 8008f08:	2100      	movs	r1, #0
 8008f0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f0e:	6865      	ldr	r5, [r4, #4]
 8008f10:	60a5      	str	r5, [r4, #8]
 8008f12:	2d00      	cmp	r5, #0
 8008f14:	bfa2      	ittt	ge
 8008f16:	6821      	ldrge	r1, [r4, #0]
 8008f18:	f021 0104 	bicge.w	r1, r1, #4
 8008f1c:	6021      	strge	r1, [r4, #0]
 8008f1e:	b90e      	cbnz	r6, 8008f24 <_printf_i+0x118>
 8008f20:	2d00      	cmp	r5, #0
 8008f22:	d04d      	beq.n	8008fc0 <_printf_i+0x1b4>
 8008f24:	4615      	mov	r5, r2
 8008f26:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f2a:	fb03 6711 	mls	r7, r3, r1, r6
 8008f2e:	5dc7      	ldrb	r7, [r0, r7]
 8008f30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f34:	4637      	mov	r7, r6
 8008f36:	42bb      	cmp	r3, r7
 8008f38:	460e      	mov	r6, r1
 8008f3a:	d9f4      	bls.n	8008f26 <_printf_i+0x11a>
 8008f3c:	2b08      	cmp	r3, #8
 8008f3e:	d10b      	bne.n	8008f58 <_printf_i+0x14c>
 8008f40:	6823      	ldr	r3, [r4, #0]
 8008f42:	07de      	lsls	r6, r3, #31
 8008f44:	d508      	bpl.n	8008f58 <_printf_i+0x14c>
 8008f46:	6923      	ldr	r3, [r4, #16]
 8008f48:	6861      	ldr	r1, [r4, #4]
 8008f4a:	4299      	cmp	r1, r3
 8008f4c:	bfde      	ittt	le
 8008f4e:	2330      	movle	r3, #48	; 0x30
 8008f50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f54:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008f58:	1b52      	subs	r2, r2, r5
 8008f5a:	6122      	str	r2, [r4, #16]
 8008f5c:	f8cd a000 	str.w	sl, [sp]
 8008f60:	464b      	mov	r3, r9
 8008f62:	aa03      	add	r2, sp, #12
 8008f64:	4621      	mov	r1, r4
 8008f66:	4640      	mov	r0, r8
 8008f68:	f7ff fee2 	bl	8008d30 <_printf_common>
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	d14c      	bne.n	800900a <_printf_i+0x1fe>
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f74:	b004      	add	sp, #16
 8008f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f7a:	4835      	ldr	r0, [pc, #212]	; (8009050 <_printf_i+0x244>)
 8008f7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f80:	6829      	ldr	r1, [r5, #0]
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f88:	6029      	str	r1, [r5, #0]
 8008f8a:	061d      	lsls	r5, r3, #24
 8008f8c:	d514      	bpl.n	8008fb8 <_printf_i+0x1ac>
 8008f8e:	07df      	lsls	r7, r3, #31
 8008f90:	bf44      	itt	mi
 8008f92:	f043 0320 	orrmi.w	r3, r3, #32
 8008f96:	6023      	strmi	r3, [r4, #0]
 8008f98:	b91e      	cbnz	r6, 8008fa2 <_printf_i+0x196>
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	f023 0320 	bic.w	r3, r3, #32
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	2310      	movs	r3, #16
 8008fa4:	e7b0      	b.n	8008f08 <_printf_i+0xfc>
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	f043 0320 	orr.w	r3, r3, #32
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	2378      	movs	r3, #120	; 0x78
 8008fb0:	4828      	ldr	r0, [pc, #160]	; (8009054 <_printf_i+0x248>)
 8008fb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fb6:	e7e3      	b.n	8008f80 <_printf_i+0x174>
 8008fb8:	0659      	lsls	r1, r3, #25
 8008fba:	bf48      	it	mi
 8008fbc:	b2b6      	uxthmi	r6, r6
 8008fbe:	e7e6      	b.n	8008f8e <_printf_i+0x182>
 8008fc0:	4615      	mov	r5, r2
 8008fc2:	e7bb      	b.n	8008f3c <_printf_i+0x130>
 8008fc4:	682b      	ldr	r3, [r5, #0]
 8008fc6:	6826      	ldr	r6, [r4, #0]
 8008fc8:	6961      	ldr	r1, [r4, #20]
 8008fca:	1d18      	adds	r0, r3, #4
 8008fcc:	6028      	str	r0, [r5, #0]
 8008fce:	0635      	lsls	r5, r6, #24
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	d501      	bpl.n	8008fd8 <_printf_i+0x1cc>
 8008fd4:	6019      	str	r1, [r3, #0]
 8008fd6:	e002      	b.n	8008fde <_printf_i+0x1d2>
 8008fd8:	0670      	lsls	r0, r6, #25
 8008fda:	d5fb      	bpl.n	8008fd4 <_printf_i+0x1c8>
 8008fdc:	8019      	strh	r1, [r3, #0]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	6123      	str	r3, [r4, #16]
 8008fe2:	4615      	mov	r5, r2
 8008fe4:	e7ba      	b.n	8008f5c <_printf_i+0x150>
 8008fe6:	682b      	ldr	r3, [r5, #0]
 8008fe8:	1d1a      	adds	r2, r3, #4
 8008fea:	602a      	str	r2, [r5, #0]
 8008fec:	681d      	ldr	r5, [r3, #0]
 8008fee:	6862      	ldr	r2, [r4, #4]
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	f7f7 f914 	bl	8000220 <memchr>
 8008ff8:	b108      	cbz	r0, 8008ffe <_printf_i+0x1f2>
 8008ffa:	1b40      	subs	r0, r0, r5
 8008ffc:	6060      	str	r0, [r4, #4]
 8008ffe:	6863      	ldr	r3, [r4, #4]
 8009000:	6123      	str	r3, [r4, #16]
 8009002:	2300      	movs	r3, #0
 8009004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009008:	e7a8      	b.n	8008f5c <_printf_i+0x150>
 800900a:	6923      	ldr	r3, [r4, #16]
 800900c:	462a      	mov	r2, r5
 800900e:	4649      	mov	r1, r9
 8009010:	4640      	mov	r0, r8
 8009012:	47d0      	blx	sl
 8009014:	3001      	adds	r0, #1
 8009016:	d0ab      	beq.n	8008f70 <_printf_i+0x164>
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	079b      	lsls	r3, r3, #30
 800901c:	d413      	bmi.n	8009046 <_printf_i+0x23a>
 800901e:	68e0      	ldr	r0, [r4, #12]
 8009020:	9b03      	ldr	r3, [sp, #12]
 8009022:	4298      	cmp	r0, r3
 8009024:	bfb8      	it	lt
 8009026:	4618      	movlt	r0, r3
 8009028:	e7a4      	b.n	8008f74 <_printf_i+0x168>
 800902a:	2301      	movs	r3, #1
 800902c:	4632      	mov	r2, r6
 800902e:	4649      	mov	r1, r9
 8009030:	4640      	mov	r0, r8
 8009032:	47d0      	blx	sl
 8009034:	3001      	adds	r0, #1
 8009036:	d09b      	beq.n	8008f70 <_printf_i+0x164>
 8009038:	3501      	adds	r5, #1
 800903a:	68e3      	ldr	r3, [r4, #12]
 800903c:	9903      	ldr	r1, [sp, #12]
 800903e:	1a5b      	subs	r3, r3, r1
 8009040:	42ab      	cmp	r3, r5
 8009042:	dcf2      	bgt.n	800902a <_printf_i+0x21e>
 8009044:	e7eb      	b.n	800901e <_printf_i+0x212>
 8009046:	2500      	movs	r5, #0
 8009048:	f104 0619 	add.w	r6, r4, #25
 800904c:	e7f5      	b.n	800903a <_printf_i+0x22e>
 800904e:	bf00      	nop
 8009050:	080093c5 	.word	0x080093c5
 8009054:	080093d6 	.word	0x080093d6

08009058 <_sbrk_r>:
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	4d06      	ldr	r5, [pc, #24]	; (8009074 <_sbrk_r+0x1c>)
 800905c:	2300      	movs	r3, #0
 800905e:	4604      	mov	r4, r0
 8009060:	4608      	mov	r0, r1
 8009062:	602b      	str	r3, [r5, #0]
 8009064:	f7f9 fd76 	bl	8002b54 <_sbrk>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	d102      	bne.n	8009072 <_sbrk_r+0x1a>
 800906c:	682b      	ldr	r3, [r5, #0]
 800906e:	b103      	cbz	r3, 8009072 <_sbrk_r+0x1a>
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	bd38      	pop	{r3, r4, r5, pc}
 8009074:	20004ca0 	.word	0x20004ca0

08009078 <memmove>:
 8009078:	4288      	cmp	r0, r1
 800907a:	b510      	push	{r4, lr}
 800907c:	eb01 0402 	add.w	r4, r1, r2
 8009080:	d902      	bls.n	8009088 <memmove+0x10>
 8009082:	4284      	cmp	r4, r0
 8009084:	4623      	mov	r3, r4
 8009086:	d807      	bhi.n	8009098 <memmove+0x20>
 8009088:	1e43      	subs	r3, r0, #1
 800908a:	42a1      	cmp	r1, r4
 800908c:	d008      	beq.n	80090a0 <memmove+0x28>
 800908e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009092:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009096:	e7f8      	b.n	800908a <memmove+0x12>
 8009098:	4402      	add	r2, r0
 800909a:	4601      	mov	r1, r0
 800909c:	428a      	cmp	r2, r1
 800909e:	d100      	bne.n	80090a2 <memmove+0x2a>
 80090a0:	bd10      	pop	{r4, pc}
 80090a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090aa:	e7f7      	b.n	800909c <memmove+0x24>

080090ac <__malloc_lock>:
 80090ac:	4801      	ldr	r0, [pc, #4]	; (80090b4 <__malloc_lock+0x8>)
 80090ae:	f000 b884 	b.w	80091ba <__retarget_lock_acquire_recursive>
 80090b2:	bf00      	nop
 80090b4:	20004ca4 	.word	0x20004ca4

080090b8 <__malloc_unlock>:
 80090b8:	4801      	ldr	r0, [pc, #4]	; (80090c0 <__malloc_unlock+0x8>)
 80090ba:	f000 b87f 	b.w	80091bc <__retarget_lock_release_recursive>
 80090be:	bf00      	nop
 80090c0:	20004ca4 	.word	0x20004ca4

080090c4 <_free_r>:
 80090c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090c6:	2900      	cmp	r1, #0
 80090c8:	d044      	beq.n	8009154 <_free_r+0x90>
 80090ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ce:	9001      	str	r0, [sp, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f1a1 0404 	sub.w	r4, r1, #4
 80090d6:	bfb8      	it	lt
 80090d8:	18e4      	addlt	r4, r4, r3
 80090da:	f7ff ffe7 	bl	80090ac <__malloc_lock>
 80090de:	4a1e      	ldr	r2, [pc, #120]	; (8009158 <_free_r+0x94>)
 80090e0:	9801      	ldr	r0, [sp, #4]
 80090e2:	6813      	ldr	r3, [r2, #0]
 80090e4:	b933      	cbnz	r3, 80090f4 <_free_r+0x30>
 80090e6:	6063      	str	r3, [r4, #4]
 80090e8:	6014      	str	r4, [r2, #0]
 80090ea:	b003      	add	sp, #12
 80090ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090f0:	f7ff bfe2 	b.w	80090b8 <__malloc_unlock>
 80090f4:	42a3      	cmp	r3, r4
 80090f6:	d908      	bls.n	800910a <_free_r+0x46>
 80090f8:	6825      	ldr	r5, [r4, #0]
 80090fa:	1961      	adds	r1, r4, r5
 80090fc:	428b      	cmp	r3, r1
 80090fe:	bf01      	itttt	eq
 8009100:	6819      	ldreq	r1, [r3, #0]
 8009102:	685b      	ldreq	r3, [r3, #4]
 8009104:	1949      	addeq	r1, r1, r5
 8009106:	6021      	streq	r1, [r4, #0]
 8009108:	e7ed      	b.n	80090e6 <_free_r+0x22>
 800910a:	461a      	mov	r2, r3
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	b10b      	cbz	r3, 8009114 <_free_r+0x50>
 8009110:	42a3      	cmp	r3, r4
 8009112:	d9fa      	bls.n	800910a <_free_r+0x46>
 8009114:	6811      	ldr	r1, [r2, #0]
 8009116:	1855      	adds	r5, r2, r1
 8009118:	42a5      	cmp	r5, r4
 800911a:	d10b      	bne.n	8009134 <_free_r+0x70>
 800911c:	6824      	ldr	r4, [r4, #0]
 800911e:	4421      	add	r1, r4
 8009120:	1854      	adds	r4, r2, r1
 8009122:	42a3      	cmp	r3, r4
 8009124:	6011      	str	r1, [r2, #0]
 8009126:	d1e0      	bne.n	80090ea <_free_r+0x26>
 8009128:	681c      	ldr	r4, [r3, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	6053      	str	r3, [r2, #4]
 800912e:	4421      	add	r1, r4
 8009130:	6011      	str	r1, [r2, #0]
 8009132:	e7da      	b.n	80090ea <_free_r+0x26>
 8009134:	d902      	bls.n	800913c <_free_r+0x78>
 8009136:	230c      	movs	r3, #12
 8009138:	6003      	str	r3, [r0, #0]
 800913a:	e7d6      	b.n	80090ea <_free_r+0x26>
 800913c:	6825      	ldr	r5, [r4, #0]
 800913e:	1961      	adds	r1, r4, r5
 8009140:	428b      	cmp	r3, r1
 8009142:	bf04      	itt	eq
 8009144:	6819      	ldreq	r1, [r3, #0]
 8009146:	685b      	ldreq	r3, [r3, #4]
 8009148:	6063      	str	r3, [r4, #4]
 800914a:	bf04      	itt	eq
 800914c:	1949      	addeq	r1, r1, r5
 800914e:	6021      	streq	r1, [r4, #0]
 8009150:	6054      	str	r4, [r2, #4]
 8009152:	e7ca      	b.n	80090ea <_free_r+0x26>
 8009154:	b003      	add	sp, #12
 8009156:	bd30      	pop	{r4, r5, pc}
 8009158:	20004c98 	.word	0x20004c98

0800915c <_realloc_r>:
 800915c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009160:	4680      	mov	r8, r0
 8009162:	4614      	mov	r4, r2
 8009164:	460e      	mov	r6, r1
 8009166:	b921      	cbnz	r1, 8009172 <_realloc_r+0x16>
 8009168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800916c:	4611      	mov	r1, r2
 800916e:	f7ff bc0f 	b.w	8008990 <_malloc_r>
 8009172:	b92a      	cbnz	r2, 8009180 <_realloc_r+0x24>
 8009174:	f7ff ffa6 	bl	80090c4 <_free_r>
 8009178:	4625      	mov	r5, r4
 800917a:	4628      	mov	r0, r5
 800917c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009180:	f000 f81d 	bl	80091be <_malloc_usable_size_r>
 8009184:	4284      	cmp	r4, r0
 8009186:	4607      	mov	r7, r0
 8009188:	d802      	bhi.n	8009190 <_realloc_r+0x34>
 800918a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800918e:	d812      	bhi.n	80091b6 <_realloc_r+0x5a>
 8009190:	4621      	mov	r1, r4
 8009192:	4640      	mov	r0, r8
 8009194:	f7ff fbfc 	bl	8008990 <_malloc_r>
 8009198:	4605      	mov	r5, r0
 800919a:	2800      	cmp	r0, #0
 800919c:	d0ed      	beq.n	800917a <_realloc_r+0x1e>
 800919e:	42bc      	cmp	r4, r7
 80091a0:	4622      	mov	r2, r4
 80091a2:	4631      	mov	r1, r6
 80091a4:	bf28      	it	cs
 80091a6:	463a      	movcs	r2, r7
 80091a8:	f7ff fb2e 	bl	8008808 <memcpy>
 80091ac:	4631      	mov	r1, r6
 80091ae:	4640      	mov	r0, r8
 80091b0:	f7ff ff88 	bl	80090c4 <_free_r>
 80091b4:	e7e1      	b.n	800917a <_realloc_r+0x1e>
 80091b6:	4635      	mov	r5, r6
 80091b8:	e7df      	b.n	800917a <_realloc_r+0x1e>

080091ba <__retarget_lock_acquire_recursive>:
 80091ba:	4770      	bx	lr

080091bc <__retarget_lock_release_recursive>:
 80091bc:	4770      	bx	lr

080091be <_malloc_usable_size_r>:
 80091be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091c2:	1f18      	subs	r0, r3, #4
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	bfbc      	itt	lt
 80091c8:	580b      	ldrlt	r3, [r1, r0]
 80091ca:	18c0      	addlt	r0, r0, r3
 80091cc:	4770      	bx	lr
	...

080091d0 <_init>:
 80091d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d2:	bf00      	nop
 80091d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d6:	bc08      	pop	{r3}
 80091d8:	469e      	mov	lr, r3
 80091da:	4770      	bx	lr

080091dc <_fini>:
 80091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091de:	bf00      	nop
 80091e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e2:	bc08      	pop	{r3}
 80091e4:	469e      	mov	lr, r3
 80091e6:	4770      	bx	lr
