
pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007770  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007938  08007938  00017938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007958  08007958  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08007958  08007958  00017958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007960  08007960  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007960  08007960  00017960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007964  08007964  00017964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08007968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cb0  20000040  080079a8  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002cf0  080079a8  00022cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f5e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000269c  00000000  00000000  00033fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00036670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  00037830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ffc  00000000  00000000  00038920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014268  00000000  00000000  0005b91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6066  00000000  00000000  0006fb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145bea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c18  00000000  00000000  00145c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000040 	.word	0x20000040
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007920 	.word	0x08007920

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000044 	.word	0x20000044
 8000204:	08007920 	.word	0x08007920

08000208 <__aeabi_frsub>:
 8000208:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__addsf3>
 800020e:	bf00      	nop

08000210 <__aeabi_fsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000214 <__addsf3>:
 8000214:	0042      	lsls	r2, r0, #1
 8000216:	bf1f      	itttt	ne
 8000218:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800021c:	ea92 0f03 	teqne	r2, r3
 8000220:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000224:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000228:	d06a      	beq.n	8000300 <__addsf3+0xec>
 800022a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800022e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000232:	bfc1      	itttt	gt
 8000234:	18d2      	addgt	r2, r2, r3
 8000236:	4041      	eorgt	r1, r0
 8000238:	4048      	eorgt	r0, r1
 800023a:	4041      	eorgt	r1, r0
 800023c:	bfb8      	it	lt
 800023e:	425b      	neglt	r3, r3
 8000240:	2b19      	cmp	r3, #25
 8000242:	bf88      	it	hi
 8000244:	4770      	bxhi	lr
 8000246:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800024a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800024e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000252:	bf18      	it	ne
 8000254:	4240      	negne	r0, r0
 8000256:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800025a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800025e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000262:	bf18      	it	ne
 8000264:	4249      	negne	r1, r1
 8000266:	ea92 0f03 	teq	r2, r3
 800026a:	d03f      	beq.n	80002ec <__addsf3+0xd8>
 800026c:	f1a2 0201 	sub.w	r2, r2, #1
 8000270:	fa41 fc03 	asr.w	ip, r1, r3
 8000274:	eb10 000c 	adds.w	r0, r0, ip
 8000278:	f1c3 0320 	rsb	r3, r3, #32
 800027c:	fa01 f103 	lsl.w	r1, r1, r3
 8000280:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000284:	d502      	bpl.n	800028c <__addsf3+0x78>
 8000286:	4249      	negs	r1, r1
 8000288:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800028c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000290:	d313      	bcc.n	80002ba <__addsf3+0xa6>
 8000292:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000296:	d306      	bcc.n	80002a6 <__addsf3+0x92>
 8000298:	0840      	lsrs	r0, r0, #1
 800029a:	ea4f 0131 	mov.w	r1, r1, rrx
 800029e:	f102 0201 	add.w	r2, r2, #1
 80002a2:	2afe      	cmp	r2, #254	; 0xfe
 80002a4:	d251      	bcs.n	800034a <__addsf3+0x136>
 80002a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ae:	bf08      	it	eq
 80002b0:	f020 0001 	biceq.w	r0, r0, #1
 80002b4:	ea40 0003 	orr.w	r0, r0, r3
 80002b8:	4770      	bx	lr
 80002ba:	0049      	lsls	r1, r1, #1
 80002bc:	eb40 0000 	adc.w	r0, r0, r0
 80002c0:	3a01      	subs	r2, #1
 80002c2:	bf28      	it	cs
 80002c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002c8:	d2ed      	bcs.n	80002a6 <__addsf3+0x92>
 80002ca:	fab0 fc80 	clz	ip, r0
 80002ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80002d2:	ebb2 020c 	subs.w	r2, r2, ip
 80002d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002da:	bfaa      	itet	ge
 80002dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002e0:	4252      	neglt	r2, r2
 80002e2:	4318      	orrge	r0, r3
 80002e4:	bfbc      	itt	lt
 80002e6:	40d0      	lsrlt	r0, r2
 80002e8:	4318      	orrlt	r0, r3
 80002ea:	4770      	bx	lr
 80002ec:	f092 0f00 	teq	r2, #0
 80002f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002f4:	bf06      	itte	eq
 80002f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002fa:	3201      	addeq	r2, #1
 80002fc:	3b01      	subne	r3, #1
 80002fe:	e7b5      	b.n	800026c <__addsf3+0x58>
 8000300:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000304:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000308:	bf18      	it	ne
 800030a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800030e:	d021      	beq.n	8000354 <__addsf3+0x140>
 8000310:	ea92 0f03 	teq	r2, r3
 8000314:	d004      	beq.n	8000320 <__addsf3+0x10c>
 8000316:	f092 0f00 	teq	r2, #0
 800031a:	bf08      	it	eq
 800031c:	4608      	moveq	r0, r1
 800031e:	4770      	bx	lr
 8000320:	ea90 0f01 	teq	r0, r1
 8000324:	bf1c      	itt	ne
 8000326:	2000      	movne	r0, #0
 8000328:	4770      	bxne	lr
 800032a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800032e:	d104      	bne.n	800033a <__addsf3+0x126>
 8000330:	0040      	lsls	r0, r0, #1
 8000332:	bf28      	it	cs
 8000334:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000338:	4770      	bx	lr
 800033a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800033e:	bf3c      	itt	cc
 8000340:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000344:	4770      	bxcc	lr
 8000346:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800034a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800034e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000352:	4770      	bx	lr
 8000354:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000358:	bf16      	itet	ne
 800035a:	4608      	movne	r0, r1
 800035c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000360:	4601      	movne	r1, r0
 8000362:	0242      	lsls	r2, r0, #9
 8000364:	bf06      	itte	eq
 8000366:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800036a:	ea90 0f01 	teqeq	r0, r1
 800036e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000372:	4770      	bx	lr

08000374 <__aeabi_ui2f>:
 8000374:	f04f 0300 	mov.w	r3, #0
 8000378:	e004      	b.n	8000384 <__aeabi_i2f+0x8>
 800037a:	bf00      	nop

0800037c <__aeabi_i2f>:
 800037c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000380:	bf48      	it	mi
 8000382:	4240      	negmi	r0, r0
 8000384:	ea5f 0c00 	movs.w	ip, r0
 8000388:	bf08      	it	eq
 800038a:	4770      	bxeq	lr
 800038c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000390:	4601      	mov	r1, r0
 8000392:	f04f 0000 	mov.w	r0, #0
 8000396:	e01c      	b.n	80003d2 <__aeabi_l2f+0x2a>

08000398 <__aeabi_ul2f>:
 8000398:	ea50 0201 	orrs.w	r2, r0, r1
 800039c:	bf08      	it	eq
 800039e:	4770      	bxeq	lr
 80003a0:	f04f 0300 	mov.w	r3, #0
 80003a4:	e00a      	b.n	80003bc <__aeabi_l2f+0x14>
 80003a6:	bf00      	nop

080003a8 <__aeabi_l2f>:
 80003a8:	ea50 0201 	orrs.w	r2, r0, r1
 80003ac:	bf08      	it	eq
 80003ae:	4770      	bxeq	lr
 80003b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003b4:	d502      	bpl.n	80003bc <__aeabi_l2f+0x14>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	ea5f 0c01 	movs.w	ip, r1
 80003c0:	bf02      	ittt	eq
 80003c2:	4684      	moveq	ip, r0
 80003c4:	4601      	moveq	r1, r0
 80003c6:	2000      	moveq	r0, #0
 80003c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003cc:	bf08      	it	eq
 80003ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003d6:	fabc f28c 	clz	r2, ip
 80003da:	3a08      	subs	r2, #8
 80003dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003e0:	db10      	blt.n	8000404 <__aeabi_l2f+0x5c>
 80003e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003e6:	4463      	add	r3, ip
 80003e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003ec:	f1c2 0220 	rsb	r2, r2, #32
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	fa20 f202 	lsr.w	r2, r0, r2
 80003f8:	eb43 0002 	adc.w	r0, r3, r2
 80003fc:	bf08      	it	eq
 80003fe:	f020 0001 	biceq.w	r0, r0, #1
 8000402:	4770      	bx	lr
 8000404:	f102 0220 	add.w	r2, r2, #32
 8000408:	fa01 fc02 	lsl.w	ip, r1, r2
 800040c:	f1c2 0220 	rsb	r2, r2, #32
 8000410:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000414:	fa21 f202 	lsr.w	r2, r1, r2
 8000418:	eb43 0002 	adc.w	r0, r3, r2
 800041c:	bf08      	it	eq
 800041e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000422:	4770      	bx	lr

08000424 <__aeabi_uldivmod>:
 8000424:	b953      	cbnz	r3, 800043c <__aeabi_uldivmod+0x18>
 8000426:	b94a      	cbnz	r2, 800043c <__aeabi_uldivmod+0x18>
 8000428:	2900      	cmp	r1, #0
 800042a:	bf08      	it	eq
 800042c:	2800      	cmpeq	r0, #0
 800042e:	bf1c      	itt	ne
 8000430:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000434:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000438:	f000 b974 	b.w	8000724 <__aeabi_idiv0>
 800043c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000440:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	f8dd e004 	ldr.w	lr, [sp, #4]
 800044c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000450:	b004      	add	sp, #16
 8000452:	4770      	bx	lr

08000454 <__udivmoddi4>:
 8000454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000458:	9d08      	ldr	r5, [sp, #32]
 800045a:	4604      	mov	r4, r0
 800045c:	468e      	mov	lr, r1
 800045e:	2b00      	cmp	r3, #0
 8000460:	d14d      	bne.n	80004fe <__udivmoddi4+0xaa>
 8000462:	428a      	cmp	r2, r1
 8000464:	4694      	mov	ip, r2
 8000466:	d969      	bls.n	800053c <__udivmoddi4+0xe8>
 8000468:	fab2 f282 	clz	r2, r2
 800046c:	b152      	cbz	r2, 8000484 <__udivmoddi4+0x30>
 800046e:	fa01 f302 	lsl.w	r3, r1, r2
 8000472:	f1c2 0120 	rsb	r1, r2, #32
 8000476:	fa20 f101 	lsr.w	r1, r0, r1
 800047a:	fa0c fc02 	lsl.w	ip, ip, r2
 800047e:	ea41 0e03 	orr.w	lr, r1, r3
 8000482:	4094      	lsls	r4, r2
 8000484:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000488:	0c21      	lsrs	r1, r4, #16
 800048a:	fbbe f6f8 	udiv	r6, lr, r8
 800048e:	fa1f f78c 	uxth.w	r7, ip
 8000492:	fb08 e316 	mls	r3, r8, r6, lr
 8000496:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800049a:	fb06 f107 	mul.w	r1, r6, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d90a      	bls.n	80004b8 <__udivmoddi4+0x64>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80004aa:	f080 811f 	bcs.w	80006ec <__udivmoddi4+0x298>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 811c 	bls.w	80006ec <__udivmoddi4+0x298>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c8:	fb00 f707 	mul.w	r7, r0, r7
 80004cc:	42a7      	cmp	r7, r4
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x92>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d8:	f080 810a 	bcs.w	80006f0 <__udivmoddi4+0x29c>
 80004dc:	42a7      	cmp	r7, r4
 80004de:	f240 8107 	bls.w	80006f0 <__udivmoddi4+0x29c>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ea:	1be4      	subs	r4, r4, r7
 80004ec:	2600      	movs	r6, #0
 80004ee:	b11d      	cbz	r5, 80004f8 <__udivmoddi4+0xa4>
 80004f0:	40d4      	lsrs	r4, r2
 80004f2:	2300      	movs	r3, #0
 80004f4:	e9c5 4300 	strd	r4, r3, [r5]
 80004f8:	4631      	mov	r1, r6
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	428b      	cmp	r3, r1
 8000500:	d909      	bls.n	8000516 <__udivmoddi4+0xc2>
 8000502:	2d00      	cmp	r5, #0
 8000504:	f000 80ef 	beq.w	80006e6 <__udivmoddi4+0x292>
 8000508:	2600      	movs	r6, #0
 800050a:	e9c5 0100 	strd	r0, r1, [r5]
 800050e:	4630      	mov	r0, r6
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	fab3 f683 	clz	r6, r3
 800051a:	2e00      	cmp	r6, #0
 800051c:	d14a      	bne.n	80005b4 <__udivmoddi4+0x160>
 800051e:	428b      	cmp	r3, r1
 8000520:	d302      	bcc.n	8000528 <__udivmoddi4+0xd4>
 8000522:	4282      	cmp	r2, r0
 8000524:	f200 80f9 	bhi.w	800071a <__udivmoddi4+0x2c6>
 8000528:	1a84      	subs	r4, r0, r2
 800052a:	eb61 0303 	sbc.w	r3, r1, r3
 800052e:	2001      	movs	r0, #1
 8000530:	469e      	mov	lr, r3
 8000532:	2d00      	cmp	r5, #0
 8000534:	d0e0      	beq.n	80004f8 <__udivmoddi4+0xa4>
 8000536:	e9c5 4e00 	strd	r4, lr, [r5]
 800053a:	e7dd      	b.n	80004f8 <__udivmoddi4+0xa4>
 800053c:	b902      	cbnz	r2, 8000540 <__udivmoddi4+0xec>
 800053e:	deff      	udf	#255	; 0xff
 8000540:	fab2 f282 	clz	r2, r2
 8000544:	2a00      	cmp	r2, #0
 8000546:	f040 8092 	bne.w	800066e <__udivmoddi4+0x21a>
 800054a:	eba1 010c 	sub.w	r1, r1, ip
 800054e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000552:	fa1f fe8c 	uxth.w	lr, ip
 8000556:	2601      	movs	r6, #1
 8000558:	0c20      	lsrs	r0, r4, #16
 800055a:	fbb1 f3f7 	udiv	r3, r1, r7
 800055e:	fb07 1113 	mls	r1, r7, r3, r1
 8000562:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000566:	fb0e f003 	mul.w	r0, lr, r3
 800056a:	4288      	cmp	r0, r1
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x12c>
 800056e:	eb1c 0101 	adds.w	r1, ip, r1
 8000572:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000576:	d202      	bcs.n	800057e <__udivmoddi4+0x12a>
 8000578:	4288      	cmp	r0, r1
 800057a:	f200 80cb 	bhi.w	8000714 <__udivmoddi4+0x2c0>
 800057e:	4643      	mov	r3, r8
 8000580:	1a09      	subs	r1, r1, r0
 8000582:	b2a4      	uxth	r4, r4
 8000584:	fbb1 f0f7 	udiv	r0, r1, r7
 8000588:	fb07 1110 	mls	r1, r7, r0, r1
 800058c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000590:	fb0e fe00 	mul.w	lr, lr, r0
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x156>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005a0:	d202      	bcs.n	80005a8 <__udivmoddi4+0x154>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	f200 80bb 	bhi.w	800071e <__udivmoddi4+0x2ca>
 80005a8:	4608      	mov	r0, r1
 80005aa:	eba4 040e 	sub.w	r4, r4, lr
 80005ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005b2:	e79c      	b.n	80004ee <__udivmoddi4+0x9a>
 80005b4:	f1c6 0720 	rsb	r7, r6, #32
 80005b8:	40b3      	lsls	r3, r6
 80005ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80005be:	ea4c 0c03 	orr.w	ip, ip, r3
 80005c2:	fa20 f407 	lsr.w	r4, r0, r7
 80005c6:	fa01 f306 	lsl.w	r3, r1, r6
 80005ca:	431c      	orrs	r4, r3
 80005cc:	40f9      	lsrs	r1, r7
 80005ce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005d2:	fa00 f306 	lsl.w	r3, r0, r6
 80005d6:	fbb1 f8f9 	udiv	r8, r1, r9
 80005da:	0c20      	lsrs	r0, r4, #16
 80005dc:	fa1f fe8c 	uxth.w	lr, ip
 80005e0:	fb09 1118 	mls	r1, r9, r8, r1
 80005e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005e8:	fb08 f00e 	mul.w	r0, r8, lr
 80005ec:	4288      	cmp	r0, r1
 80005ee:	fa02 f206 	lsl.w	r2, r2, r6
 80005f2:	d90b      	bls.n	800060c <__udivmoddi4+0x1b8>
 80005f4:	eb1c 0101 	adds.w	r1, ip, r1
 80005f8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80005fc:	f080 8088 	bcs.w	8000710 <__udivmoddi4+0x2bc>
 8000600:	4288      	cmp	r0, r1
 8000602:	f240 8085 	bls.w	8000710 <__udivmoddi4+0x2bc>
 8000606:	f1a8 0802 	sub.w	r8, r8, #2
 800060a:	4461      	add	r1, ip
 800060c:	1a09      	subs	r1, r1, r0
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb1 f0f9 	udiv	r0, r1, r9
 8000614:	fb09 1110 	mls	r1, r9, r0, r1
 8000618:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800061c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000620:	458e      	cmp	lr, r1
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x1e2>
 8000624:	eb1c 0101 	adds.w	r1, ip, r1
 8000628:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800062c:	d26c      	bcs.n	8000708 <__udivmoddi4+0x2b4>
 800062e:	458e      	cmp	lr, r1
 8000630:	d96a      	bls.n	8000708 <__udivmoddi4+0x2b4>
 8000632:	3802      	subs	r0, #2
 8000634:	4461      	add	r1, ip
 8000636:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800063a:	fba0 9402 	umull	r9, r4, r0, r2
 800063e:	eba1 010e 	sub.w	r1, r1, lr
 8000642:	42a1      	cmp	r1, r4
 8000644:	46c8      	mov	r8, r9
 8000646:	46a6      	mov	lr, r4
 8000648:	d356      	bcc.n	80006f8 <__udivmoddi4+0x2a4>
 800064a:	d053      	beq.n	80006f4 <__udivmoddi4+0x2a0>
 800064c:	b15d      	cbz	r5, 8000666 <__udivmoddi4+0x212>
 800064e:	ebb3 0208 	subs.w	r2, r3, r8
 8000652:	eb61 010e 	sbc.w	r1, r1, lr
 8000656:	fa01 f707 	lsl.w	r7, r1, r7
 800065a:	fa22 f306 	lsr.w	r3, r2, r6
 800065e:	40f1      	lsrs	r1, r6
 8000660:	431f      	orrs	r7, r3
 8000662:	e9c5 7100 	strd	r7, r1, [r5]
 8000666:	2600      	movs	r6, #0
 8000668:	4631      	mov	r1, r6
 800066a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066e:	f1c2 0320 	rsb	r3, r2, #32
 8000672:	40d8      	lsrs	r0, r3
 8000674:	fa0c fc02 	lsl.w	ip, ip, r2
 8000678:	fa21 f303 	lsr.w	r3, r1, r3
 800067c:	4091      	lsls	r1, r2
 800067e:	4301      	orrs	r1, r0
 8000680:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000684:	fa1f fe8c 	uxth.w	lr, ip
 8000688:	fbb3 f0f7 	udiv	r0, r3, r7
 800068c:	fb07 3610 	mls	r6, r7, r0, r3
 8000690:	0c0b      	lsrs	r3, r1, #16
 8000692:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000696:	fb00 f60e 	mul.w	r6, r0, lr
 800069a:	429e      	cmp	r6, r3
 800069c:	fa04 f402 	lsl.w	r4, r4, r2
 80006a0:	d908      	bls.n	80006b4 <__udivmoddi4+0x260>
 80006a2:	eb1c 0303 	adds.w	r3, ip, r3
 80006a6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80006aa:	d22f      	bcs.n	800070c <__udivmoddi4+0x2b8>
 80006ac:	429e      	cmp	r6, r3
 80006ae:	d92d      	bls.n	800070c <__udivmoddi4+0x2b8>
 80006b0:	3802      	subs	r0, #2
 80006b2:	4463      	add	r3, ip
 80006b4:	1b9b      	subs	r3, r3, r6
 80006b6:	b289      	uxth	r1, r1
 80006b8:	fbb3 f6f7 	udiv	r6, r3, r7
 80006bc:	fb07 3316 	mls	r3, r7, r6, r3
 80006c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006c4:	fb06 f30e 	mul.w	r3, r6, lr
 80006c8:	428b      	cmp	r3, r1
 80006ca:	d908      	bls.n	80006de <__udivmoddi4+0x28a>
 80006cc:	eb1c 0101 	adds.w	r1, ip, r1
 80006d0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80006d4:	d216      	bcs.n	8000704 <__udivmoddi4+0x2b0>
 80006d6:	428b      	cmp	r3, r1
 80006d8:	d914      	bls.n	8000704 <__udivmoddi4+0x2b0>
 80006da:	3e02      	subs	r6, #2
 80006dc:	4461      	add	r1, ip
 80006de:	1ac9      	subs	r1, r1, r3
 80006e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006e4:	e738      	b.n	8000558 <__udivmoddi4+0x104>
 80006e6:	462e      	mov	r6, r5
 80006e8:	4628      	mov	r0, r5
 80006ea:	e705      	b.n	80004f8 <__udivmoddi4+0xa4>
 80006ec:	4606      	mov	r6, r0
 80006ee:	e6e3      	b.n	80004b8 <__udivmoddi4+0x64>
 80006f0:	4618      	mov	r0, r3
 80006f2:	e6f8      	b.n	80004e6 <__udivmoddi4+0x92>
 80006f4:	454b      	cmp	r3, r9
 80006f6:	d2a9      	bcs.n	800064c <__udivmoddi4+0x1f8>
 80006f8:	ebb9 0802 	subs.w	r8, r9, r2
 80006fc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000700:	3801      	subs	r0, #1
 8000702:	e7a3      	b.n	800064c <__udivmoddi4+0x1f8>
 8000704:	4646      	mov	r6, r8
 8000706:	e7ea      	b.n	80006de <__udivmoddi4+0x28a>
 8000708:	4620      	mov	r0, r4
 800070a:	e794      	b.n	8000636 <__udivmoddi4+0x1e2>
 800070c:	4640      	mov	r0, r8
 800070e:	e7d1      	b.n	80006b4 <__udivmoddi4+0x260>
 8000710:	46d0      	mov	r8, sl
 8000712:	e77b      	b.n	800060c <__udivmoddi4+0x1b8>
 8000714:	3b02      	subs	r3, #2
 8000716:	4461      	add	r1, ip
 8000718:	e732      	b.n	8000580 <__udivmoddi4+0x12c>
 800071a:	4630      	mov	r0, r6
 800071c:	e709      	b.n	8000532 <__udivmoddi4+0xde>
 800071e:	4464      	add	r4, ip
 8000720:	3802      	subs	r0, #2
 8000722:	e742      	b.n	80005aa <__udivmoddi4+0x156>

08000724 <__aeabi_idiv0>:
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop

08000728 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800073e:	b2db      	uxtb	r3, r3
 8000740:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6858      	ldr	r0, [r3, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	8adb      	ldrh	r3, [r3, #22]
 800074a:	2200      	movs	r2, #0
 800074c:	4619      	mov	r1, r3
 800074e:	f002 fa97 	bl	8002c80 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6818      	ldr	r0, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	1cf9      	adds	r1, r7, #3
 800075c:	2201      	movs	r2, #1
 800075e:	f004 fa6e 	bl	8004c3e <HAL_SPI_Transmit>
 8000762:	4603      	mov	r3, r0
 8000764:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	f107 010f 	add.w	r1, r7, #15
 8000772:	2201      	movs	r2, #1
 8000774:	f004 fb9f 	bl	8004eb6 <HAL_SPI_Receive>
 8000778:	4603      	mov	r3, r0
 800077a:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6858      	ldr	r0, [r3, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	8adb      	ldrh	r3, [r3, #22]
 8000784:	2201      	movs	r2, #1
 8000786:	4619      	mov	r1, r3
 8000788:	f002 fa7a 	bl	8002c80 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 800078c:	7bfb      	ldrb	r3, [r7, #15]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b084      	sub	sp, #16
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	460b      	mov	r3, r1
 80007a0:	70fb      	strb	r3, [r7, #3]
 80007a2:	4613      	mov	r3, r2
 80007a4:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007ac:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 80007ae:	78bb      	ldrb	r3, [r7, #2]
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	78fb      	ldrb	r3, [r7, #3]
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	4313      	orrs	r3, r2
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	b29b      	uxth	r3, r3
 80007be:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6858      	ldr	r0, [r3, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	8adb      	ldrh	r3, [r3, #22]
 80007c8:	2200      	movs	r2, #0
 80007ca:	4619      	mov	r1, r3
 80007cc:	f002 fa58 	bl	8002c80 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	f107 010a 	add.w	r1, r7, #10
 80007dc:	2202      	movs	r2, #2
 80007de:	f004 fa2e 	bl	8004c3e <HAL_SPI_Transmit>
 80007e2:	4603      	mov	r3, r0
 80007e4:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6858      	ldr	r0, [r3, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	8adb      	ldrh	r3, [r3, #22]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4619      	mov	r1, r3
 80007f2:	f002 fa45 	bl	8002c80 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b088      	sub	sp, #32
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	4611      	mov	r1, r2
 800080a:	461a      	mov	r2, r3
 800080c:	460b      	mov	r3, r1
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	4613      	mov	r3, r2
 8000812:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	6858      	ldr	r0, [r3, #4]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	8adb      	ldrh	r3, [r3, #22]
 8000820:	2200      	movs	r2, #0
 8000822:	4619      	mov	r1, r3
 8000824:	f002 fa2c 	bl	8002c80 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	6818      	ldr	r0, [r3, #0]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	f107 0117 	add.w	r1, r7, #23
 8000834:	2201      	movs	r2, #1
 8000836:	f004 fa02 	bl	8004c3e <HAL_SPI_Transmit>
 800083a:	4603      	mov	r3, r0
 800083c:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 800083e:	79bb      	ldrb	r3, [r7, #6]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d108      	bne.n	8000856 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	79fa      	ldrb	r2, [r7, #7]
 800084a:	b292      	uxth	r2, r2
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	4618      	mov	r0, r3
 8000850:	f004 fde4 	bl	800541c <HAL_SPI_Transmit_DMA>
 8000854:	e012      	b.n	800087c <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	6818      	ldr	r0, [r3, #0]
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	b29a      	uxth	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	68b9      	ldr	r1, [r7, #8]
 8000864:	f004 f9eb 	bl	8004c3e <HAL_SPI_Transmit>
 8000868:	4603      	mov	r3, r0
 800086a:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	6858      	ldr	r0, [r3, #4]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	8adb      	ldrh	r3, [r3, #22]
 8000874:	2201      	movs	r2, #1
 8000876:	4619      	mov	r1, r3
 8000878:	f002 fa02 	bl	8002c80 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 800087c:	3720      	adds	r7, #32
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
 800088a:	460b      	mov	r3, r1
 800088c:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000894:	b2db      	uxtb	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	2101      	movs	r1, #1
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ff7b 	bl	8000796 <write_register>
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	2b2c      	cmp	r3, #44	; 0x2c
 80008b8:	d801      	bhi.n	80008be <set_OCP+0x16>
    imax = 45;
 80008ba:	232d      	movs	r3, #45	; 0x2d
 80008bc:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	2bf0      	cmp	r3, #240	; 0xf0
 80008c2:	d901      	bls.n	80008c8 <set_OCP+0x20>
    imax = 240;
 80008c4:	23f0      	movs	r3, #240	; 0xf0
 80008c6:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	2b81      	cmp	r3, #129	; 0x81
 80008cc:	d809      	bhi.n	80008e2 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	3b2d      	subs	r3, #45	; 0x2d
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <set_OCP+0x68>)
 80008d4:	fb82 1203 	smull	r1, r2, r2, r3
 80008d8:	1052      	asrs	r2, r2, #1
 80008da:	17db      	asrs	r3, r3, #31
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	73fb      	strb	r3, [r7, #15]
 80008e0:	e008      	b.n	80008f4 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	331e      	adds	r3, #30
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <set_OCP+0x68>)
 80008e8:	fb82 1203 	smull	r1, r2, r2, r3
 80008ec:	1092      	asrs	r2, r2, #2
 80008ee:	17db      	asrs	r3, r3, #31
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	f043 0320 	orr.w	r3, r3, #32
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	210b      	movs	r1, #11
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff48 	bl	8000796 <write_register>
}
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	66666667 	.word	0x66666667

08000914 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8000914:	b5b0      	push	{r4, r5, r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 800091c:	211d      	movs	r1, #29
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ff02 	bl	8000728 <read_register>
 8000924:	4603      	mov	r3, r0
 8000926:	091b      	lsrs	r3, r3, #4
 8000928:	b2db      	uxtb	r3, r3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2200      	movs	r2, #0
 800092e:	461c      	mov	r4, r3
 8000930:	4615      	mov	r5, r2
 8000932:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8000936:	211e      	movs	r1, #30
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff fef5 	bl	8000728 <read_register>
 800093e:	4603      	mov	r3, r0
 8000940:	091b      	lsrs	r3, r3, #4
 8000942:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8000944:	2304      	movs	r3, #4
 8000946:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2b0a      	cmp	r3, #10
 800094c:	d908      	bls.n	8000960 <set_low_data_rate_optimization+0x4c>
 800094e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000952:	1fd1      	subs	r1, r2, #7
 8000954:	430b      	orrs	r3, r1
 8000956:	d103      	bne.n	8000960 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8000958:	7ffb      	ldrb	r3, [r7, #31]
 800095a:	f043 0308 	orr.w	r3, r3, #8
 800095e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8000960:	7ffb      	ldrb	r3, [r7, #31]
 8000962:	461a      	mov	r2, r3
 8000964:	2126      	movs	r1, #38	; 0x26
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ff15 	bl	8000796 <write_register>
}
 800096c:	bf00      	nop
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bdb0      	pop	{r4, r5, r7, pc}

08000974 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 800097c:	2100      	movs	r1, #0
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ff7f 	bl	8000882 <set_mode>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8000994:	2101      	movs	r1, #1
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ff73 	bl	8000882 <set_mode>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80009ac:	211d      	movs	r1, #29
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff feba 	bl	8000728 <read_register>
 80009b4:	4603      	mov	r3, r0
 80009b6:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	f023 0301 	bic.w	r3, r3, #1
 80009be:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	461a      	mov	r2, r3
 80009c4:	211d      	movs	r1, #29
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff fee5 	bl	8000796 <write_register>
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	691b      	ldr	r3, [r3, #16]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d10e      	bne.n	8000a06 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	2b0f      	cmp	r3, #15
 80009ec:	d901      	bls.n	80009f2 <lora_set_tx_power+0x1e>
      level = 15;
 80009ee:	230f      	movs	r3, #15
 80009f0:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80009f2:	78fb      	ldrb	r3, [r7, #3]
 80009f4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	461a      	mov	r2, r3
 80009fc:	2109      	movs	r1, #9
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff fec9 	bl	8000796 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8000a04:	e02e      	b.n	8000a64 <lora_set_tx_power+0x90>
    if (level > 20) {
 8000a06:	78fb      	ldrb	r3, [r7, #3]
 8000a08:	2b14      	cmp	r3, #20
 8000a0a:	d901      	bls.n	8000a10 <lora_set_tx_power+0x3c>
      level = 20;
 8000a0c:	2314      	movs	r3, #20
 8000a0e:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8000a10:	78fb      	ldrb	r3, [r7, #3]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d801      	bhi.n	8000a1a <lora_set_tx_power+0x46>
      level = 2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8000a1a:	78fb      	ldrb	r3, [r7, #3]
 8000a1c:	2b11      	cmp	r3, #17
 8000a1e:	d90c      	bls.n	8000a3a <lora_set_tx_power+0x66>
      level -= 3;
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	3b03      	subs	r3, #3
 8000a24:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8000a26:	2287      	movs	r2, #135	; 0x87
 8000a28:	214d      	movs	r1, #77	; 0x4d
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff feb3 	bl	8000796 <write_register>
      set_OCP(lora, 140);
 8000a30:	218c      	movs	r1, #140	; 0x8c
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ff38 	bl	80008a8 <set_OCP>
 8000a38:	e008      	b.n	8000a4c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8000a3a:	2284      	movs	r2, #132	; 0x84
 8000a3c:	214d      	movs	r1, #77	; 0x4d
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff fea9 	bl	8000796 <write_register>
      set_OCP(lora, 97);
 8000a44:	2161      	movs	r1, #97	; 0x61
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ff2e 	bl	80008a8 <set_OCP>
    level -= 2;
 8000a4c:	78fb      	ldrb	r3, [r7, #3]
 8000a4e:	3b02      	subs	r3, #2
 8000a50:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8000a52:	78fb      	ldrb	r3, [r7, #3]
 8000a54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	2109      	movs	r1, #9
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff fe99 	bl	8000796 <write_register>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8000a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	f04f 0100 	mov.w	r1, #0
 8000a84:	04d9      	lsls	r1, r3, #19
 8000a86:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000a8a:	04d0      	lsls	r0, r2, #19
 8000a8c:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <lora_set_frequency+0x88>)
 8000a8e:	f04f 0300 	mov.w	r3, #0
 8000a92:	f7ff fcc7 	bl	8000424 <__aeabi_uldivmod>
 8000a96:	4602      	mov	r2, r0
 8000a98:	460b      	mov	r3, r1
 8000a9a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8000a9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000aa2:	f04f 0200 	mov.w	r2, #0
 8000aa6:	f04f 0300 	mov.w	r3, #0
 8000aaa:	0c02      	lsrs	r2, r0, #16
 8000aac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ab0:	0c0b      	lsrs	r3, r1, #16
 8000ab2:	b2d3      	uxtb	r3, r2
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	2106      	movs	r1, #6
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f7ff fe6c 	bl	8000796 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8000abe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ac2:	f04f 0200 	mov.w	r2, #0
 8000ac6:	f04f 0300 	mov.w	r3, #0
 8000aca:	0a02      	lsrs	r2, r0, #8
 8000acc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000ad0:	0a0b      	lsrs	r3, r1, #8
 8000ad2:	b2d3      	uxtb	r3, r2
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	2107      	movs	r1, #7
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff fe5c 	bl	8000796 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8000ade:	7c3b      	ldrb	r3, [r7, #16]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	2108      	movs	r1, #8
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 8000ae6:	f7ff fe56 	bl	8000796 <write_register>
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	01e84800 	.word	0x01e84800

08000af8 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8000b04:	78fb      	ldrb	r3, [r7, #3]
 8000b06:	2b05      	cmp	r3, #5
 8000b08:	d802      	bhi.n	8000b10 <lora_set_spreading_factor+0x18>
    sf = 6;
 8000b0a:	2306      	movs	r3, #6
 8000b0c:	70fb      	strb	r3, [r7, #3]
 8000b0e:	e004      	b.n	8000b1a <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	2b0c      	cmp	r3, #12
 8000b14:	d901      	bls.n	8000b1a <lora_set_spreading_factor+0x22>
    sf = 12;
 8000b16:	230c      	movs	r3, #12
 8000b18:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8000b1a:	78fb      	ldrb	r3, [r7, #3]
 8000b1c:	2b06      	cmp	r3, #6
 8000b1e:	d10a      	bne.n	8000b36 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8000b20:	22c5      	movs	r2, #197	; 0xc5
 8000b22:	2131      	movs	r1, #49	; 0x31
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff fe36 	bl	8000796 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	2137      	movs	r1, #55	; 0x37
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff fe31 	bl	8000796 <write_register>
 8000b34:	e009      	b.n	8000b4a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8000b36:	22c3      	movs	r2, #195	; 0xc3
 8000b38:	2131      	movs	r1, #49	; 0x31
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff fe2b 	bl	8000796 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000b40:	220a      	movs	r2, #10
 8000b42:	2137      	movs	r1, #55	; 0x37
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff fe26 	bl	8000796 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8000b4a:	211e      	movs	r1, #30
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff fdeb 	bl	8000728 <read_register>
 8000b52:	4603      	mov	r3, r0
 8000b54:	73fb      	strb	r3, [r7, #15]
  mc2 |= sf << 4;
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	011b      	lsls	r3, r3, #4
 8000b5a:	b25a      	sxtb	r2, r3
 8000b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	b25b      	sxtb	r3, r3
 8000b64:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	211e      	movs	r1, #30
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff fe12 	bl	8000796 <write_register>

  set_low_data_rate_optimization(lora);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff fece 	bl	8000914 <set_low_data_rate_optimization>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8000b8c:	887b      	ldrh	r3, [r7, #2]
 8000b8e:	0a1b      	lsrs	r3, r3, #8
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	2120      	movs	r1, #32
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fdfc 	bl	8000796 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	461a      	mov	r2, r3
 8000baa:	2121      	movs	r1, #33	; 0x21
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fdf2 	bl	8000796 <write_register>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <lora_is_transmitting>:

  return read_register(lora, REG_VERSION);
}

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fdaf 	bl	8000728 <read_register>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d101      	bne.n	8000bdc <lora_is_transmitting+0x22>
 8000bd8:	2305      	movs	r3, #5
 8000bda:	e000      	b.n	8000bde <lora_is_transmitting+0x24>
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b084      	sub	sp, #16
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f7ff ffdc 	bl	8000bba <lora_is_transmitting>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8000c08:	2305      	movs	r3, #5
 8000c0a:	e02a      	b.n	8000c62 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	68f8      	ldr	r0, [r7, #12]
 8000c10:	f7ff fe37 	bl	8000882 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f000 f83a 	bl	8000c8e <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	7d1b      	ldrb	r3, [r3, #20]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	210d      	movs	r1, #13
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f7ff fdb7 	bl	8000796 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	7d1b      	ldrb	r3, [r3, #20]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	210e      	movs	r1, #14
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f7ff fdb0 	bl	8000796 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	2122      	movs	r1, #34	; 0x22
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	f7ff fdaa 	bl	8000796 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	79fa      	ldrb	r2, [r7, #7]
 8000c46:	68b9      	ldr	r1, [r7, #8]
 8000c48:	68f8      	ldr	r0, [r7, #12]
 8000c4a:	f7ff fdd8 	bl	80007fe <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8000c4e:	79bb      	ldrb	r3, [r7, #6]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d101      	bne.n	8000c58 <lora_send_packet_base+0x72>
    return LORA_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	e004      	b.n	8000c62 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8000c58:	2103      	movs	r1, #3
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f7ff fe11 	bl	8000882 <set_mode>
  return LORA_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b084      	sub	sp, #16
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	4613      	mov	r3, r2
 8000c76:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8000c78:	79fa      	ldrb	r2, [r7, #7]
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f7ff ffb1 	bl	8000be6 <lora_send_packet_base>
 8000c84:	4603      	mov	r3, r0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8000c96:	2208      	movs	r2, #8
 8000c98:	2112      	movs	r1, #18
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fd7b 	bl	8000796 <write_register>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	807b      	strh	r3, [r7, #2]

  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	68ba      	ldr	r2, [r7, #8]
 8000cba:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	887a      	ldrh	r2, [r7, #2]
 8000cc6:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000cc8:	6a3a      	ldr	r2, [r7, #32]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ce6:	609a      	str	r2, [r3, #8]
    return LORA_ERROR;
  }
#endif

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	f7ff fe43 	bl	8000974 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f7ff fe40 	bl	8000974 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000cf4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000cf8:	68f8      	ldr	r0, [r7, #12]
 8000cfa:	f7ff feb7 	bl	8000a6c <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000cfe:	2107      	movs	r1, #7
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f7ff fef9 	bl	8000af8 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000d06:	210a      	movs	r1, #10
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff ff39 	bl	8000b80 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	f7ff fe48 	bl	80009a4 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000d14:	210c      	movs	r1, #12
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f7ff fd06 	bl	8000728 <read_register>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	75fb      	strb	r3, [r7, #23]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	f043 0303 	orr.w	r3, r3, #3
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	461a      	mov	r2, r3
 8000d2a:	210c      	movs	r1, #12
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f7ff fd32 	bl	8000796 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000d32:	2204      	movs	r2, #4
 8000d34:	2126      	movs	r1, #38	; 0x26
 8000d36:	68f8      	ldr	r0, [r7, #12]
 8000d38:	f7ff fd2d 	bl	8000796 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000d3c:	2111      	movs	r1, #17
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f7ff fe48 	bl	80009d4 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	f7ff fe21 	bl	800098c <lora_mode_standby>

  return LORA_OK;
 8000d4a:	2300      	movs	r3, #0

}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int32_t timerVal;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, GPS_buffer, 1, 100);
 8000d78:	2364      	movs	r3, #100	; 0x64
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4906      	ldr	r1, [pc, #24]	; (8000d98 <HAL_UART_RxCpltCallback+0x28>)
 8000d7e:	4807      	ldr	r0, [pc, #28]	; (8000d9c <HAL_UART_RxCpltCallback+0x2c>)
 8000d80:	f005 fbe3 	bl	800654a <HAL_UART_Transmit>
    HAL_UART_Receive_DMA(&huart2, GPS_buffer, 1);
 8000d84:	2201      	movs	r2, #1
 8000d86:	4904      	ldr	r1, [pc, #16]	; (8000d98 <HAL_UART_RxCpltCallback+0x28>)
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <HAL_UART_RxCpltCallback+0x30>)
 8000d8a:	f005 fc70 	bl	800666e <HAL_UART_Receive_DMA>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20002cbc 	.word	0x20002cbc
 8000d9c:	200001e4 	.word	0x200001e4
 8000da0:	20000228 	.word	0x20000228
 8000da4:	00000000 	.word	0x00000000

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  _running = false;
 8000dae:	4b52      	ldr	r3, [pc, #328]	; (8000ef8 <main+0x150>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
  head_mov = 0;
 8000db4:	4b51      	ldr	r3, [pc, #324]	; (8000efc <main+0x154>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
  tail_mov = 1;
 8000dba:	4b51      	ldr	r3, [pc, #324]	; (8000f00 <main+0x158>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]
  head_full = 0;
 8000dc0:	4b50      	ldr	r3, [pc, #320]	; (8000f04 <main+0x15c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
  tail_full = 1;
 8000dc6:	4b50      	ldr	r3, [pc, #320]	; (8000f08 <main+0x160>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	601a      	str	r2, [r3, #0]
  moving_sum = 0;
 8000dcc:	494f      	ldr	r1, [pc, #316]	; (8000f0c <main+0x164>)
 8000dce:	f04f 0200 	mov.w	r2, #0
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	e9c1 2300 	strd	r2, r3, [r1]
  moving_avg = 0;
 8000dda:	4b4d      	ldr	r3, [pc, #308]	; (8000f10 <main+0x168>)
 8000ddc:	f04f 0200 	mov.w	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
  counter = 0;
 8000de2:	4b4c      	ldr	r3, [pc, #304]	; (8000f14 <main+0x16c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	801a      	strh	r2, [r3, #0]
  done = 0;
 8000de8:	4b4b      	ldr	r3, [pc, #300]	; (8000f18 <main+0x170>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*4); i++){
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	e007      	b.n	8000e04 <main+0x5c>
	  circular_buf_mov[i] = 0;
 8000df4:	4a49      	ldr	r2, [pc, #292]	; (8000f1c <main+0x174>)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4413      	add	r3, r2
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*4); i++){
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3301      	adds	r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 8000e0a:	dbf3      	blt.n	8000df4 <main+0x4c>
  }
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*16); i++){
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	e007      	b.n	8000e22 <main+0x7a>
	  circular_buf_full[i] = 0;
 8000e12:	4a43      	ldr	r2, [pc, #268]	; (8000f20 <main+0x178>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4413      	add	r3, r2
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET*16); i++){
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	f5b3 5f5c 	cmp.w	r3, #14080	; 0x3700
 8000e28:	dbf3      	blt.n	8000e12 <main+0x6a>
  }
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET * 2); i++){
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	e007      	b.n	8000e40 <main+0x98>
	  _sampleBuffer[i] = 0;
 8000e30:	4a3c      	ldr	r2, [pc, #240]	; (8000f24 <main+0x17c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2100      	movs	r1, #0
 8000e36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < (MIC_SAMPLES_PER_PACKET * 2); i++){
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8000e46:	dbf3      	blt.n	8000e30 <main+0x88>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f000 ffdc 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f882 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e50:	f000 fa4a 	bl	80012e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e54:	f000 f936 	bl	80010c4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000e58:	f000 f96a 	bl	8001130 <MX_TIM2_Init>
  MX_DMA_Init();
 8000e5c:	f000 fa0e 	bl	800127c <MX_DMA_Init>
  MX_SAI1_Init();
 8000e60:	f000 f8e6 	bl	8001030 <MX_SAI1_Init>
  MX_USART2_UART_Init();
 8000e64:	f000 f9e0 	bl	8001228 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000e68:	f000 f9b4 	bl	80011d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	482e      	ldr	r0, [pc, #184]	; (8000f28 <main+0x180>)
 8000e70:	f004 fdaa 	bl	80059c8 <HAL_TIM_IC_Start_IT>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2108      	movs	r1, #8
 8000e78:	482c      	ldr	r0, [pc, #176]	; (8000f2c <main+0x184>)
 8000e7a:	f001 ff01 	bl	8002c80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2120      	movs	r1, #32
 8000e82:	482a      	ldr	r0, [pc, #168]	; (8000f2c <main+0x184>)
 8000e84:	f001 fefc 	bl	8002c80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2120      	movs	r1, #32
 8000e8c:	4828      	ldr	r0, [pc, #160]	; (8000f30 <main+0x188>)
 8000e8e:	f001 fef7 	bl	8002c80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e98:	4826      	ldr	r0, [pc, #152]	; (8000f34 <main+0x18c>)
 8000e9a:	f001 fef1 	bl	8002c80 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000e9e:	2064      	movs	r0, #100	; 0x64
 8000ea0:	f001 f822 	bl	8001ee8 <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eaa:	4822      	ldr	r0, [pc, #136]	; (8000f34 <main+0x18c>)
 8000eac:	f001 fee8 	bl	8002c80 <HAL_GPIO_WritePin>
  HAL_UART_Receive_DMA(&huart2, GPS_buffer, 1);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4921      	ldr	r1, [pc, #132]	; (8000f38 <main+0x190>)
 8000eb4:	4821      	ldr	r0, [pc, #132]	; (8000f3c <main+0x194>)
 8000eb6:	f005 fbda 	bl	800666e <HAL_UART_Receive_DMA>

  uint8_t res = lora_init(&lora, &hspi1, NSS_GPIO_Port, NSS_Pin, LORA_BASE_FREQUENCY_US);
 8000eba:	a30d      	add	r3, pc, #52	; (adr r3, 8000ef0 <main+0x148>)
 8000ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec0:	e9cd 2300 	strd	r2, r3, [sp]
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	4a1e      	ldr	r2, [pc, #120]	; (8000f40 <main+0x198>)
 8000ec8:	491e      	ldr	r1, [pc, #120]	; (8000f44 <main+0x19c>)
 8000eca:	481f      	ldr	r0, [pc, #124]	; (8000f48 <main+0x1a0>)
 8000ecc:	f7ff feec 	bl	8000ca8 <lora_init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	70fb      	strb	r3, [r7, #3]
    if (res != LORA_OK) {
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d006      	beq.n	8000ee8 <main+0x140>
    	HAL_UART_Transmit(&huart1, iterfacing_failed, sizeof(iterfacing_failed), 1000);
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	2213      	movs	r2, #19
 8000ee0:	491a      	ldr	r1, [pc, #104]	; (8000f4c <main+0x1a4>)
 8000ee2:	481b      	ldr	r0, [pc, #108]	; (8000f50 <main+0x1a8>)
 8000ee4:	f005 fb31 	bl	800654a <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <main+0x140>
 8000eea:	bf00      	nop
 8000eec:	f3af 8000 	nop.w
 8000ef0:	3689cac0 	.word	0x3689cac0
 8000ef4:	00000000 	.word	0x00000000
 8000ef8:	20002c9c 	.word	0x20002c9c
 8000efc:	20002284 	.word	0x20002284
 8000f00:	20002288 	.word	0x20002288
 8000f04:	20002c84 	.word	0x20002c84
 8000f08:	20002c88 	.word	0x20002c88
 8000f0c:	20002c90 	.word	0x20002c90
 8000f10:	20002c98 	.word	0x20002c98
 8000f14:	20002c9e 	.word	0x20002c9e
 8000f18:	20002ca0 	.word	0x20002ca0
 8000f1c:	200021bc 	.word	0x200021bc
 8000f20:	2000228c 	.word	0x2000228c
 8000f24:	200002cc 	.word	0x200002cc
 8000f28:	2000019c 	.word	0x2000019c
 8000f2c:	40021400 	.word	0x40021400
 8000f30:	40021800 	.word	0x40021800
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	20002cbc 	.word	0x20002cbc
 8000f3c:	20000228 	.word	0x20000228
 8000f40:	40020000 	.word	0x40020000
 8000f44:	20000144 	.word	0x20000144
 8000f48:	20002ca4 	.word	0x20002ca4
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	200001e4 	.word	0x200001e4

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b094      	sub	sp, #80	; 0x50
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	2234      	movs	r2, #52	; 0x34
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f006 fcd4 	bl	8007910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <SystemClock_Config+0xd4>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	4a29      	ldr	r2, [pc, #164]	; (8001028 <SystemClock_Config+0xd4>)
 8000f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f86:	6413      	str	r3, [r2, #64]	; 0x40
 8000f88:	4b27      	ldr	r3, [pc, #156]	; (8001028 <SystemClock_Config+0xd4>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f94:	2300      	movs	r3, #0
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	4b24      	ldr	r3, [pc, #144]	; (800102c <SystemClock_Config+0xd8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fa0:	4a22      	ldr	r2, [pc, #136]	; (800102c <SystemClock_Config+0xd8>)
 8000fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b20      	ldr	r3, [pc, #128]	; (800102c <SystemClock_Config+0xd8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fc8:	2310      	movs	r3, #16
 8000fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fcc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fd0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fe9c 	bl	8003d20 <HAL_RCC_OscConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fee:	f000 fc2d 	bl	800184c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	2102      	movs	r1, #2
 800100e:	4618      	mov	r0, r3
 8001010:	f001 fe50 	bl	8002cb4 <HAL_RCC_ClockConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800101a:	f000 fc17 	bl	800184c <Error_Handler>
  }
}
 800101e:	bf00      	nop
 8001020:	3750      	adds	r7, #80	; 0x50
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40007000 	.word	0x40007000

08001030 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_SAI1_Init+0x84>)
 8001036:	4a20      	ldr	r2, [pc, #128]	; (80010b8 <MX_SAI1_Init+0x88>)
 8001038:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_RX;
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <MX_SAI1_Init+0x84>)
 800103c:	2201      	movs	r2, #1
 800103e:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_SAI1_Init+0x84>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_SAI1_Init+0x84>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_SAI1_Init+0x84>)
 800104e:	2200      	movs	r2, #0
 8001050:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_SAI1_Init+0x84>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_SAI1_Init+0x84>)
 800105a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800105e:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_SAI1_Init+0x84>)
 8001062:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001066:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_SAI1_Init+0x84>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_SAI1_Init+0x84>)
 8001070:	2200      	movs	r2, #0
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_SAI1_Init+0x84>)
 8001076:	2200      	movs	r2, #0
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800107a:	2302      	movs	r3, #2
 800107c:	2202      	movs	r2, #2
 800107e:	2100      	movs	r1, #0
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <MX_SAI1_Init+0x84>)
 8001082:	f003 f8eb 	bl	800425c <HAL_SAI_InitProtocol>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 800108c:	f000 fbde 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  if ((HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*) _sampleBuffer, MIC_SAMPLES_PER_PACKET * 2)) == HAL_OK) {
 8001090:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001094:	4909      	ldr	r1, [pc, #36]	; (80010bc <MX_SAI1_Init+0x8c>)
 8001096:	4807      	ldr	r0, [pc, #28]	; (80010b4 <MX_SAI1_Init+0x84>)
 8001098:	f003 fa3c 	bl	8004514 <HAL_SAI_Receive_DMA>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d106      	bne.n	80010b0 <MX_SAI1_Init+0x80>
	  HAL_Delay(1000);
 80010a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a6:	f000 ff1f 	bl	8001ee8 <HAL_Delay>
	  _running = true;
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <MX_SAI1_Init+0x90>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END SAI1_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000005c 	.word	0x2000005c
 80010b8:	40015824 	.word	0x40015824
 80010bc:	200002cc 	.word	0x200002cc
 80010c0:	20002c9c 	.word	0x20002c9c

080010c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_SPI1_Init+0x64>)
 80010ca:	4a18      	ldr	r2, [pc, #96]	; (800112c <MX_SPI1_Init+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_SPI1_Init+0x64>)
 80010d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_SPI1_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_SPI1_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_SPI1_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_SPI1_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_SPI1_Init+0x64>)
 80010f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_SPI1_Init+0x64>)
 80010f8:	2238      	movs	r2, #56	; 0x38
 80010fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <MX_SPI1_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_SPI1_Init+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <MX_SPI1_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_SPI1_Init+0x64>)
 8001110:	220a      	movs	r2, #10
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_SPI1_Init+0x64>)
 8001116:	f003 fd09 	bl	8004b2c <HAL_SPI_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001120:	f000 fb94 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000144 	.word	0x20000144
 800112c:	40013000 	.word	0x40013000

08001130 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_TIM2_Init+0xa0>)
 800114e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001152:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <MX_TIM2_Init+0xa0>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_TIM2_Init+0xa0>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_TIM2_Init+0xa0>)
 8001162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001166:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_TIM2_Init+0xa0>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <MX_TIM2_Init+0xa0>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001174:	4816      	ldr	r0, [pc, #88]	; (80011d0 <MX_TIM2_Init+0xa0>)
 8001176:	f004 fbd7 	bl	8005928 <HAL_TIM_IC_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001180:	f000 fb64 	bl	800184c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4619      	mov	r1, r3
 8001192:	480f      	ldr	r0, [pc, #60]	; (80011d0 <MX_TIM2_Init+0xa0>)
 8001194:	f005 f8fc 	bl	8006390 <HAL_TIMEx_MasterConfigSynchronization>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800119e:	f000 fb55 	bl	800184c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011a6:	2301      	movs	r3, #1
 80011a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	2208      	movs	r2, #8
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_TIM2_Init+0xa0>)
 80011ba:	f004 fe35 	bl	8005e28 <HAL_TIM_IC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80011c4:	f000 fb42 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	2000019c 	.word	0x2000019c

080011d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <MX_USART1_UART_Init+0x50>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 800120c:	f005 f950 	bl	80064b0 <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001216:	f000 fb19 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200001e4 	.word	0x200001e4
 8001224:	40011000 	.word	0x40011000

08001228 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <MX_USART2_UART_Init+0x50>)
 8001230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001234:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001260:	f005 f926 	bl	80064b0 <HAL_UART_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800126a:	f000 faef 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000228 	.word	0x20000228
 8001278:	40004400 	.word	0x40004400

0800127c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_DMA_Init+0x68>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a16      	ldr	r2, [pc, #88]	; (80012e4 <MX_DMA_Init+0x68>)
 800128c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_DMA_Init+0x68>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <MX_DMA_Init+0x68>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <MX_DMA_Init+0x68>)
 80012a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <MX_DMA_Init+0x68>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	2010      	movs	r0, #16
 80012c0:	f000 ff11 	bl	80020e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012c4:	2010      	movs	r0, #16
 80012c6:	f000 ff2a 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	203c      	movs	r0, #60	; 0x3c
 80012d0:	f000 ff09 	bl	80020e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80012d4:	203c      	movs	r0, #60	; 0x3c
 80012d6:	f000 ff22 	bl	800211e <HAL_NVIC_EnableIRQ>

}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800

080012e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	; 0x30
 80012ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	4b59      	ldr	r3, [pc, #356]	; (8001468 <MX_GPIO_Init+0x180>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a58      	ldr	r2, [pc, #352]	; (8001468 <MX_GPIO_Init+0x180>)
 8001308:	f043 0310 	orr.w	r3, r3, #16
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b56      	ldr	r3, [pc, #344]	; (8001468 <MX_GPIO_Init+0x180>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	4b52      	ldr	r3, [pc, #328]	; (8001468 <MX_GPIO_Init+0x180>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a51      	ldr	r2, [pc, #324]	; (8001468 <MX_GPIO_Init+0x180>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b4f      	ldr	r3, [pc, #316]	; (8001468 <MX_GPIO_Init+0x180>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b4b      	ldr	r3, [pc, #300]	; (8001468 <MX_GPIO_Init+0x180>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a4a      	ldr	r2, [pc, #296]	; (8001468 <MX_GPIO_Init+0x180>)
 8001340:	f043 0320 	orr.w	r3, r3, #32
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b48      	ldr	r3, [pc, #288]	; (8001468 <MX_GPIO_Init+0x180>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0320 	and.w	r3, r3, #32
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b44      	ldr	r3, [pc, #272]	; (8001468 <MX_GPIO_Init+0x180>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a43      	ldr	r2, [pc, #268]	; (8001468 <MX_GPIO_Init+0x180>)
 800135c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b41      	ldr	r3, [pc, #260]	; (8001468 <MX_GPIO_Init+0x180>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	4b3d      	ldr	r3, [pc, #244]	; (8001468 <MX_GPIO_Init+0x180>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a3c      	ldr	r2, [pc, #240]	; (8001468 <MX_GPIO_Init+0x180>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <MX_GPIO_Init+0x180>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b36      	ldr	r3, [pc, #216]	; (8001468 <MX_GPIO_Init+0x180>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a35      	ldr	r2, [pc, #212]	; (8001468 <MX_GPIO_Init+0x180>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b33      	ldr	r3, [pc, #204]	; (8001468 <MX_GPIO_Init+0x180>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <MX_GPIO_Init+0x180>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a2e      	ldr	r2, [pc, #184]	; (8001468 <MX_GPIO_Init+0x180>)
 80013b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b2c      	ldr	r3, [pc, #176]	; (8001468 <MX_GPIO_Init+0x180>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2128      	movs	r1, #40	; 0x28
 80013c6:	4829      	ldr	r0, [pc, #164]	; (800146c <MX_GPIO_Init+0x184>)
 80013c8:	f001 fc5a 	bl	8002c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2110      	movs	r1, #16
 80013d0:	4827      	ldr	r0, [pc, #156]	; (8001470 <MX_GPIO_Init+0x188>)
 80013d2:	f001 fc55 	bl	8002c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013dc:	4825      	ldr	r0, [pc, #148]	; (8001474 <MX_GPIO_Init+0x18c>)
 80013de:	f001 fc4f 	bl	8002c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2120      	movs	r1, #32
 80013e6:	4824      	ldr	r0, [pc, #144]	; (8001478 <MX_GPIO_Init+0x190>)
 80013e8:	f001 fc4a 	bl	8002c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF3 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80013ec:	2328      	movs	r3, #40	; 0x28
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	481a      	ldr	r0, [pc, #104]	; (800146c <MX_GPIO_Init+0x184>)
 8001404:	f001 faa8 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8001408:	2310      	movs	r3, #16
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	4619      	mov	r1, r3
 800141e:	4814      	ldr	r0, [pc, #80]	; (8001470 <MX_GPIO_Init+0x188>)
 8001420:	f001 fa9a 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <MX_GPIO_Init+0x18c>)
 800143e:	f001 fa8b 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001442:	2320      	movs	r3, #32
 8001444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	4807      	ldr	r0, [pc, #28]	; (8001478 <MX_GPIO_Init+0x190>)
 800145a:	f001 fa7d 	bl	8002958 <HAL_GPIO_Init>

}
 800145e:	bf00      	nop
 8001460:	3730      	adds	r7, #48	; 0x30
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40021400 	.word	0x40021400
 8001470:	40020000 	.word	0x40020000
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021800 	.word	0x40021800

0800147c <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	sendData(_sampleBuffer, _sendBuffer);
 8001484:	4903      	ldr	r1, [pc, #12]	; (8001494 <HAL_SAI_RxHalfCpltCallback+0x18>)
 8001486:	4804      	ldr	r0, [pc, #16]	; (8001498 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8001488:	f000 f818 	bl	80014bc <sendData>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20001e4c 	.word	0x20001e4c
 8001498:	200002cc 	.word	0x200002cc

0800149c <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	sendData(&_sampleBuffer[MIC_SAMPLES_PER_PACKET], &_sendBuffer[MIC_SAMPLES_PER_PACKET / 2]);
 80014a4:	4903      	ldr	r1, [pc, #12]	; (80014b4 <HAL_SAI_RxCpltCallback+0x18>)
 80014a6:	4804      	ldr	r0, [pc, #16]	; (80014b8 <HAL_SAI_RxCpltCallback+0x1c>)
 80014a8:	f000 f808 	bl	80014bc <sendData>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20002004 	.word	0x20002004
 80014b8:	2000108c 	.word	0x2000108c

080014bc <sendData>:

void sendData(volatile int32_t *data_in, int8_t *data_out) {
 80014bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014c0:	f6ad 2d28 	subw	sp, sp, #2600	; 0xa28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80014ca:	f6a3 231c 	subw	r3, r3, #2588	; 0xa1c
 80014ce:	6018      	str	r0, [r3, #0]
 80014d0:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80014d4:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 80014d8:	6019      	str	r1, [r3, #0]

  if (_running) {
 80014da:	4b79      	ldr	r3, [pc, #484]	; (80016c0 <sendData+0x204>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8193 	beq.w	800180a <sendData+0x34e>

      for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8a7 3a26 	strh.w	r3, [r7, #2598]	; 0xa26
 80014ea:	e188      	b.n	80017fe <sendData+0x342>

        int8_t sample = ((data_in[0]>>16) & 0xff);
 80014ec:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80014f0:	f6a3 231c 	subw	r3, r3, #2588	; 0xa1c
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	141b      	asrs	r3, r3, #16
 80014fa:	f887 3a1b 	strb.w	r3, [r7, #2587]	; 0xa1b
        moving_sum += abs(sample);
 80014fe:	f997 3a1b 	ldrsb.w	r3, [r7, #2587]	; 0xa1b
 8001502:	2b00      	cmp	r3, #0
 8001504:	bfb8      	it	lt
 8001506:	425b      	neglt	r3, r3
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2200      	movs	r2, #0
 800150e:	461c      	mov	r4, r3
 8001510:	4615      	mov	r5, r2
 8001512:	4b6c      	ldr	r3, [pc, #432]	; (80016c4 <sendData+0x208>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	eb14 0a02 	adds.w	sl, r4, r2
 800151c:	eb45 0b03 	adc.w	fp, r5, r3
 8001520:	4b68      	ldr	r3, [pc, #416]	; (80016c4 <sendData+0x208>)
 8001522:	e9c3 ab00 	strd	sl, fp, [r3]
        moving_sum -= abs(circular_buf_mov[tail_mov]);
 8001526:	4b67      	ldr	r3, [pc, #412]	; (80016c4 <sendData+0x208>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	4966      	ldr	r1, [pc, #408]	; (80016c8 <sendData+0x20c>)
 800152e:	6809      	ldr	r1, [r1, #0]
 8001530:	4866      	ldr	r0, [pc, #408]	; (80016cc <sendData+0x210>)
 8001532:	5641      	ldrsb	r1, [r0, r1]
 8001534:	2900      	cmp	r1, #0
 8001536:	bfb8      	it	lt
 8001538:	4249      	neglt	r1, r1
 800153a:	b2c9      	uxtb	r1, r1
 800153c:	b2c9      	uxtb	r1, r1
 800153e:	2000      	movs	r0, #0
 8001540:	4688      	mov	r8, r1
 8001542:	4681      	mov	r9, r0
 8001544:	ebb2 0108 	subs.w	r1, r2, r8
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	eb63 0309 	sbc.w	r3, r3, r9
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	4b5c      	ldr	r3, [pc, #368]	; (80016c4 <sendData+0x208>)
 8001552:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001556:	e9c3 1200 	strd	r1, r2, [r3]
    	circular_buf_mov[tail_mov] = sample;
 800155a:	4b5b      	ldr	r3, [pc, #364]	; (80016c8 <sendData+0x20c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	495b      	ldr	r1, [pc, #364]	; (80016cc <sendData+0x210>)
 8001560:	f897 2a1b 	ldrb.w	r2, [r7, #2587]	; 0xa1b
 8001564:	54ca      	strb	r2, [r1, r3]
    	circular_buf_full[tail_full] = sample;
 8001566:	4b5a      	ldr	r3, [pc, #360]	; (80016d0 <sendData+0x214>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	495a      	ldr	r1, [pc, #360]	; (80016d4 <sendData+0x218>)
 800156c:	f897 2a1b 	ldrb.w	r2, [r7, #2587]	; 0xa1b
 8001570:	54ca      	strb	r2, [r1, r3]
    	moving_avg = ((float) moving_sum)/(MOVING_AVG_LEN);
 8001572:	4b54      	ldr	r3, [pc, #336]	; (80016c4 <sendData+0x208>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7fe ff14 	bl	80003a8 <__aeabi_l2f>
 8001580:	ee06 0a90 	vmov	s13, r0
 8001584:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80016d8 <sendData+0x21c>
 8001588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800158c:	4b53      	ldr	r3, [pc, #332]	; (80016dc <sendData+0x220>)
 800158e:	edc3 7a00 	vstr	s15, [r3]


    	if ((counter > 0) && (!done)){
 8001592:	4b53      	ldr	r3, [pc, #332]	; (80016e0 <sendData+0x224>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 80cc 	beq.w	8001734 <sendData+0x278>
 800159c:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <sendData+0x228>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f040 80c7 	bne.w	8001734 <sendData+0x278>
    		counter++;
 80015a6:	4b4e      	ldr	r3, [pc, #312]	; (80016e0 <sendData+0x224>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4b4c      	ldr	r3, [pc, #304]	; (80016e0 <sendData+0x224>)
 80015b0:	801a      	strh	r2, [r3, #0]
    		if (counter == (SEND_LEN-100)){
 80015b2:	4b4b      	ldr	r3, [pc, #300]	; (80016e0 <sendData+0x224>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	f640 1292 	movw	r2, #2450	; 0x992
 80015ba:	4293      	cmp	r3, r2
 80015bc:	f040 80ba 	bne.w	8001734 <sendData+0x278>

    			for(int delay = 0; delay < NODE_DELAY; delay++); // non-blocking delay used to offset the transmissions of each node to prevent garbled transmissions
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
 80015c6:	e004      	b.n	80015d2 <sendData+0x116>
 80015c8:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 80015cc:	3301      	adds	r3, #1
 80015ce:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
 80015d2:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	dbf6      	blt.n	80015c8 <sendData+0x10c>
 80015da:	4b43      	ldr	r3, [pc, #268]	; (80016e8 <sendData+0x22c>)
 80015dc:	681b      	ldr	r3, [r3, #0]

    			uint8_t metaData[12];
    			memcpy(metaData, &timerVal, 4);
 80015de:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
    			memcpy(metaData+4, &devID, 4);
 80015e2:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 80015e6:	3304      	adds	r3, #4
 80015e8:	4a40      	ldr	r2, [pc, #256]	; (80016ec <sendData+0x230>)
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	601a      	str	r2, [r3, #0]
    			memcpy(metaData+8, &endPadding, 4);
 80015ee:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 80015f2:	3308      	adds	r3, #8
 80015f4:	4a3e      	ldr	r2, [pc, #248]	; (80016f0 <sendData+0x234>)
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	601a      	str	r2, [r3, #0]

    			uint8_t packet_res = lora_send_packet(&lora, metaData, 12);
 80015fa:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 80015fe:	220c      	movs	r2, #12
 8001600:	4619      	mov	r1, r3
 8001602:	483c      	ldr	r0, [pc, #240]	; (80016f4 <sendData+0x238>)
 8001604:	f7ff fb31 	bl	8000c6a <lora_send_packet>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 3a0b 	strb.w	r3, [r7, #2571]	; 0xa0b

    			if (packet_res != LORA_OK) {
 800160e:	f897 3a0b 	ldrb.w	r3, [r7, #2571]	; 0xa0b
 8001612:	2b00      	cmp	r3, #0
 8001614:	d008      	beq.n	8001628 <sendData+0x16c>
    				HAL_UART_Transmit(&huart2, &packet_res, sizeof(packet_res), 1000);
 8001616:	f607 210b 	addw	r1, r7, #2571	; 0xa0b
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	2201      	movs	r2, #1
 8001620:	4835      	ldr	r0, [pc, #212]	; (80016f8 <sendData+0x23c>)
 8001622:	f004 ff92 	bl	800654a <HAL_UART_Transmit>
 8001626:	e006      	b.n	8001636 <sendData+0x17a>
    			}
    			else {
    				HAL_UART_Transmit(&huart2, transmission_success, sizeof(transmission_success), 1000);
 8001628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162c:	2215      	movs	r2, #21
 800162e:	4933      	ldr	r1, [pc, #204]	; (80016fc <sendData+0x240>)
 8001630:	4831      	ldr	r0, [pc, #196]	; (80016f8 <sendData+0x23c>)
 8001632:	f004 ff8a 	bl	800654a <HAL_UART_Transmit>
    			}

    			while(lora_is_transmitting(&lora)); // non-blocking delay
 8001636:	bf00      	nop
 8001638:	482e      	ldr	r0, [pc, #184]	; (80016f4 <sendData+0x238>)
 800163a:	f7ff fabe 	bl	8000bba <lora_is_transmitting>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f9      	bne.n	8001638 <sendData+0x17c>

    			uint8_t sendBuf[SEND_LEN];
    			memcpy(sendBuf, circular_buf_full+tail_full, (SEND_LEN)-tail_full);
 8001644:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <sendData+0x214>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a22      	ldr	r2, [pc, #136]	; (80016d4 <sendData+0x218>)
 800164a:	1899      	adds	r1, r3, r2
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <sendData+0x214>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f5c3 631f 	rsb	r3, r3, #2544	; 0x9f0
 8001654:	3306      	adds	r3, #6
 8001656:	f107 0014 	add.w	r0, r7, #20
 800165a:	461a      	mov	r2, r3
 800165c:	f006 f94a 	bl	80078f4 <memcpy>
    			memcpy(sendBuf+(SEND_LEN)-tail_full, circular_buf_full, tail_full);
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <sendData+0x214>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f5c3 631f 	rsb	r3, r3, #2544	; 0x9f0
 8001668:	3306      	adds	r3, #6
 800166a:	f107 0214 	add.w	r2, r7, #20
 800166e:	4413      	add	r3, r2
 8001670:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <sendData+0x214>)
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	4917      	ldr	r1, [pc, #92]	; (80016d4 <sendData+0x218>)
 8001676:	4618      	mov	r0, r3
 8001678:	f006 f93c 	bl	80078f4 <memcpy>

    			for(int send_loop_cnt = 0; send_loop_cnt < 10; send_loop_cnt++){
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 8001682:	e050      	b.n	8001726 <sendData+0x26a>
    				packet_res = lora_send_packet(&lora, sendBuf+(255*send_loop_cnt), 255);
 8001684:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 8001688:	4613      	mov	r3, r2
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	461a      	mov	r2, r3
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4413      	add	r3, r2
 8001696:	22ff      	movs	r2, #255	; 0xff
 8001698:	4619      	mov	r1, r3
 800169a:	4816      	ldr	r0, [pc, #88]	; (80016f4 <sendData+0x238>)
 800169c:	f7ff fae5 	bl	8000c6a <lora_send_packet>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f887 3a0b 	strb.w	r3, [r7, #2571]	; 0xa0b
    				if (packet_res != LORA_OK) {
 80016a6:	f897 3a0b 	ldrb.w	r3, [r7, #2571]	; 0xa0b
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d028      	beq.n	8001700 <sendData+0x244>
    					HAL_UART_Transmit(&huart2, &packet_res, sizeof(packet_res), 1000);
 80016ae:	f607 210b 	addw	r1, r7, #2571	; 0xa0b
 80016b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b6:	2201      	movs	r2, #1
 80016b8:	480f      	ldr	r0, [pc, #60]	; (80016f8 <sendData+0x23c>)
 80016ba:	f004 ff46 	bl	800654a <HAL_UART_Transmit>
 80016be:	e026      	b.n	800170e <sendData+0x252>
 80016c0:	20002c9c 	.word	0x20002c9c
 80016c4:	20002c90 	.word	0x20002c90
 80016c8:	20002288 	.word	0x20002288
 80016cc:	200021bc 	.word	0x200021bc
 80016d0:	20002c88 	.word	0x20002c88
 80016d4:	2000228c 	.word	0x2000228c
 80016d8:	43480000 	.word	0x43480000
 80016dc:	20002c98 	.word	0x20002c98
 80016e0:	20002c9e 	.word	0x20002c9e
 80016e4:	20002ca0 	.word	0x20002ca0
 80016e8:	20002ce4 	.word	0x20002ce4
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000004 	.word	0x20000004
 80016f4:	20002ca4 	.word	0x20002ca4
 80016f8:	20000228 	.word	0x20000228
 80016fc:	2000001c 	.word	0x2000001c
    				}
    				else {
    					HAL_UART_Transmit(&huart2, transmission_success, sizeof(transmission_success), 1000);
 8001700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001704:	2215      	movs	r2, #21
 8001706:	4944      	ldr	r1, [pc, #272]	; (8001818 <sendData+0x35c>)
 8001708:	4844      	ldr	r0, [pc, #272]	; (800181c <sendData+0x360>)
 800170a:	f004 ff1e 	bl	800654a <HAL_UART_Transmit>
    				}
    				while(lora_is_transmitting(&lora)); // non-blocking delay
 800170e:	bf00      	nop
 8001710:	4843      	ldr	r0, [pc, #268]	; (8001820 <sendData+0x364>)
 8001712:	f7ff fa52 	bl	8000bba <lora_is_transmitting>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f9      	bne.n	8001710 <sendData+0x254>
    			for(int send_loop_cnt = 0; send_loop_cnt < 10; send_loop_cnt++){
 800171c:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 8001720:	3301      	adds	r3, #1
 8001722:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 8001726:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 800172a:	2b09      	cmp	r3, #9
 800172c:	ddaa      	ble.n	8001684 <sendData+0x1c8>
    			}

    			done = 1;
 800172e:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <sendData+0x368>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]
    		}
    	}

    	if ((moving_avg >= MOVING_AVG_THRESHOLD) && (counter == 0)){
 8001734:	4b3c      	ldr	r3, [pc, #240]	; (8001828 <sendData+0x36c>)
 8001736:	edd3 7a00 	vldr	s15, [r3]
 800173a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800173e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	db12      	blt.n	800176e <sendData+0x2b2>
 8001748:	4b38      	ldr	r3, [pc, #224]	; (800182c <sendData+0x370>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10e      	bne.n	800176e <sendData+0x2b2>
    		counter += 1;
 8001750:	4b36      	ldr	r3, [pc, #216]	; (800182c <sendData+0x370>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	3301      	adds	r3, #1
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b34      	ldr	r3, [pc, #208]	; (800182c <sendData+0x370>)
 800175a:	801a      	strh	r2, [r3, #0]
    		done = 0;
 800175c:	4b31      	ldr	r3, [pc, #196]	; (8001824 <sendData+0x368>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
			timerVal = TIM2->CNT;
 8001762:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	461a      	mov	r2, r3
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <sendData+0x374>)
 800176c:	601a      	str	r2, [r3, #0]

    	}
        tail_mov = (tail_mov + 1) % (MOVING_AVG_LEN);
 800176e:	4b31      	ldr	r3, [pc, #196]	; (8001834 <sendData+0x378>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	4b30      	ldr	r3, [pc, #192]	; (8001838 <sendData+0x37c>)
 8001776:	fba3 1302 	umull	r1, r3, r3, r2
 800177a:	099b      	lsrs	r3, r3, #6
 800177c:	21c8      	movs	r1, #200	; 0xc8
 800177e:	fb01 f303 	mul.w	r3, r1, r3
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	4a2b      	ldr	r2, [pc, #172]	; (8001834 <sendData+0x378>)
 8001786:	6013      	str	r3, [r2, #0]
        head_mov = (head_mov + 1) % (MOVING_AVG_LEN);
 8001788:	4b2c      	ldr	r3, [pc, #176]	; (800183c <sendData+0x380>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <sendData+0x37c>)
 8001790:	fba3 1302 	umull	r1, r3, r3, r2
 8001794:	099b      	lsrs	r3, r3, #6
 8001796:	21c8      	movs	r1, #200	; 0xc8
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	4a27      	ldr	r2, [pc, #156]	; (800183c <sendData+0x380>)
 80017a0:	6013      	str	r3, [r2, #0]

        tail_full = (tail_full + 1) % (SEND_LEN);
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <sendData+0x384>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	0853      	lsrs	r3, r2, #1
 80017aa:	4926      	ldr	r1, [pc, #152]	; (8001844 <sendData+0x388>)
 80017ac:	fba1 1303 	umull	r1, r3, r1, r3
 80017b0:	0a9b      	lsrs	r3, r3, #10
 80017b2:	f640 11f6 	movw	r1, #2550	; 0x9f6
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	4a20      	ldr	r2, [pc, #128]	; (8001840 <sendData+0x384>)
 80017be:	6013      	str	r3, [r2, #0]
        head_full = (head_full + 1) % (SEND_LEN);
 80017c0:	4b21      	ldr	r3, [pc, #132]	; (8001848 <sendData+0x38c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	0853      	lsrs	r3, r2, #1
 80017c8:	491e      	ldr	r1, [pc, #120]	; (8001844 <sendData+0x388>)
 80017ca:	fba1 1303 	umull	r1, r3, r1, r3
 80017ce:	0a9b      	lsrs	r3, r3, #10
 80017d0:	f640 11f6 	movw	r1, #2550	; 0x9f6
 80017d4:	fb01 f303 	mul.w	r3, r1, r3
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <sendData+0x38c>)
 80017dc:	6013      	str	r3, [r2, #0]

        data_in += 2;
 80017de:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80017e2:	f6a3 231c 	subw	r3, r3, #2588	; 0xa1c
 80017e6:	f607 2228 	addw	r2, r7, #2600	; 0xa28
 80017ea:	f6a2 221c 	subw	r2, r2, #2588	; 0xa1c
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	3208      	adds	r2, #8
 80017f2:	601a      	str	r2, [r3, #0]
      for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 80017f4:	f8b7 3a26 	ldrh.w	r3, [r7, #2598]	; 0xa26
 80017f8:	3301      	adds	r3, #1
 80017fa:	f8a7 3a26 	strh.w	r3, [r7, #2598]	; 0xa26
 80017fe:	f8b7 3a26 	ldrh.w	r3, [r7, #2598]	; 0xa26
 8001802:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8001806:	f4ff ae71 	bcc.w	80014ec <sendData+0x30>
      }


  }
}
 800180a:	bf00      	nop
 800180c:	f607 2728 	addw	r7, r7, #2600	; 0xa28
 8001810:	46bd      	mov	sp, r7
 8001812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001816:	bf00      	nop
 8001818:	2000001c 	.word	0x2000001c
 800181c:	20000228 	.word	0x20000228
 8001820:	20002ca4 	.word	0x20002ca4
 8001824:	20002ca0 	.word	0x20002ca0
 8001828:	20002c98 	.word	0x20002c98
 800182c:	20002c9e 	.word	0x20002c9e
 8001830:	20002ce4 	.word	0x20002ce4
 8001834:	20002288 	.word	0x20002288
 8001838:	51eb851f 	.word	0x51eb851f
 800183c:	20002284 	.word	0x20002284
 8001840:	20002c88 	.word	0x20002c88
 8001844:	cd9a6735 	.word	0xcd9a6735
 8001848:	20002c84 	.word	0x20002c84

0800184c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001850:	b672      	cpsid	i
}
 8001852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001854:	e7fe      	b.n	8001854 <Error_Handler+0x8>
	...

08001858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <HAL_MspInit+0x4c>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <HAL_MspInit+0x4c>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_MspInit+0x4c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_MspInit+0x4c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_MspInit+0x4c>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001888:	6413      	str	r3, [r2, #64]	; 0x40
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_MspInit+0x4c>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800

080018a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a19      	ldr	r2, [pc, #100]	; (800192c <HAL_SPI_MspInit+0x84>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d12b      	bne.n	8001922 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_SPI_MspInit+0x88>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	4a17      	ldr	r2, [pc, #92]	; (8001930 <HAL_SPI_MspInit+0x88>)
 80018d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_SPI_MspInit+0x88>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_SPI_MspInit+0x88>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a10      	ldr	r2, [pc, #64]	; (8001930 <HAL_SPI_MspInit+0x88>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_SPI_MspInit+0x88>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001902:	23e0      	movs	r3, #224	; 0xe0
 8001904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190e:	2303      	movs	r3, #3
 8001910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001912:	2305      	movs	r3, #5
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	4805      	ldr	r0, [pc, #20]	; (8001934 <HAL_SPI_MspInit+0x8c>)
 800191e:	f001 f81b 	bl	8002958 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	; 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40013000 	.word	0x40013000
 8001930:	40023800 	.word	0x40023800
 8001934:	40020000 	.word	0x40020000

08001938 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001958:	d133      	bne.n	80019c2 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <HAL_TIM_IC_MspInit+0x94>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	4a1a      	ldr	r2, [pc, #104]	; (80019cc <HAL_TIM_IC_MspInit+0x94>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6413      	str	r3, [r2, #64]	; 0x40
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <HAL_TIM_IC_MspInit+0x94>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <HAL_TIM_IC_MspInit+0x94>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a13      	ldr	r2, [pc, #76]	; (80019cc <HAL_TIM_IC_MspInit+0x94>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <HAL_TIM_IC_MspInit+0x94>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001992:	2304      	movs	r3, #4
 8001994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019a2:	2301      	movs	r3, #1
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	4808      	ldr	r0, [pc, #32]	; (80019d0 <HAL_TIM_IC_MspInit+0x98>)
 80019ae:	f000 ffd3 	bl	8002958 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	201c      	movs	r0, #28
 80019b8:	f000 fb95 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019bc:	201c      	movs	r0, #28
 80019be:	f000 fbae 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	3728      	adds	r7, #40	; 0x28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020000 	.word	0x40020000

080019d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	; 0x30
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a5c      	ldr	r2, [pc, #368]	; (8001b64 <HAL_UART_MspInit+0x190>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d12d      	bne.n	8001a52 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	4b5b      	ldr	r3, [pc, #364]	; (8001b68 <HAL_UART_MspInit+0x194>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	4a5a      	ldr	r2, [pc, #360]	; (8001b68 <HAL_UART_MspInit+0x194>)
 8001a00:	f043 0310 	orr.w	r3, r3, #16
 8001a04:	6453      	str	r3, [r2, #68]	; 0x44
 8001a06:	4b58      	ldr	r3, [pc, #352]	; (8001b68 <HAL_UART_MspInit+0x194>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	61bb      	str	r3, [r7, #24]
 8001a10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	4b54      	ldr	r3, [pc, #336]	; (8001b68 <HAL_UART_MspInit+0x194>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a53      	ldr	r2, [pc, #332]	; (8001b68 <HAL_UART_MspInit+0x194>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <HAL_UART_MspInit+0x194>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a40:	2307      	movs	r3, #7
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4848      	ldr	r0, [pc, #288]	; (8001b6c <HAL_UART_MspInit+0x198>)
 8001a4c:	f000 ff84 	bl	8002958 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a50:	e084      	b.n	8001b5c <HAL_UART_MspInit+0x188>
  else if(huart->Instance==USART2)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a46      	ldr	r2, [pc, #280]	; (8001b70 <HAL_UART_MspInit+0x19c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d17f      	bne.n	8001b5c <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	4b41      	ldr	r3, [pc, #260]	; (8001b68 <HAL_UART_MspInit+0x194>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	4a40      	ldr	r2, [pc, #256]	; (8001b68 <HAL_UART_MspInit+0x194>)
 8001a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6c:	4b3e      	ldr	r3, [pc, #248]	; (8001b68 <HAL_UART_MspInit+0x194>)
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <HAL_UART_MspInit+0x194>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	4a39      	ldr	r2, [pc, #228]	; (8001b68 <HAL_UART_MspInit+0x194>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6313      	str	r3, [r2, #48]	; 0x30
 8001a88:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <HAL_UART_MspInit+0x194>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <HAL_UART_MspInit+0x194>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	4a32      	ldr	r2, [pc, #200]	; (8001b68 <HAL_UART_MspInit+0x194>)
 8001a9e:	f043 0308 	orr.w	r3, r3, #8
 8001aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa4:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <HAL_UART_MspInit+0x194>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4828      	ldr	r0, [pc, #160]	; (8001b6c <HAL_UART_MspInit+0x198>)
 8001acc:	f000 ff44 	bl	8002958 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ad0:	2320      	movs	r3, #32
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4822      	ldr	r0, [pc, #136]	; (8001b74 <HAL_UART_MspInit+0x1a0>)
 8001aec:	f000 ff34 	bl	8002958 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_UART_MspInit+0x1a4>)
 8001af2:	4a22      	ldr	r2, [pc, #136]	; (8001b7c <HAL_UART_MspInit+0x1a8>)
 8001af4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001af6:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <HAL_UART_MspInit+0x1a4>)
 8001af8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001afc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001afe:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <HAL_UART_MspInit+0x1a4>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b04:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_UART_MspInit+0x1a4>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_UART_MspInit+0x1a4>)
 8001b0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b10:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_UART_MspInit+0x1a4>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_UART_MspInit+0x1a4>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <HAL_UART_MspInit+0x1a4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_UART_MspInit+0x1a4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <HAL_UART_MspInit+0x1a4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b30:	4811      	ldr	r0, [pc, #68]	; (8001b78 <HAL_UART_MspInit+0x1a4>)
 8001b32:	f000 fb0f 	bl	8002154 <HAL_DMA_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_UART_MspInit+0x16c>
      Error_Handler();
 8001b3c:	f7ff fe86 	bl	800184c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a0d      	ldr	r2, [pc, #52]	; (8001b78 <HAL_UART_MspInit+0x1a4>)
 8001b44:	639a      	str	r2, [r3, #56]	; 0x38
 8001b46:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <HAL_UART_MspInit+0x1a4>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	2026      	movs	r0, #38	; 0x26
 8001b52:	f000 fac8 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b56:	2026      	movs	r0, #38	; 0x26
 8001b58:	f000 fae1 	bl	800211e <HAL_NVIC_EnableIRQ>
}
 8001b5c:	bf00      	nop
 8001b5e:	3730      	adds	r7, #48	; 0x30
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40011000 	.word	0x40011000
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40004400 	.word	0x40004400
 8001b74:	40020c00 	.word	0x40020c00
 8001b78:	2000026c 	.word	0x2000026c
 8001b7c:	40026088 	.word	0x40026088

08001b80 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0a0      	sub	sp, #128	; 0x80
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	225c      	movs	r2, #92	; 0x5c
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f005 febd 	bl	8007910 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a4c      	ldr	r2, [pc, #304]	; (8001ccc <HAL_SAI_MspInit+0x14c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	f040 8090 	bne.w	8001cc2 <HAL_SAI_MspInit+0x142>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 16;
 8001ba6:	2310      	movs	r3, #16
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001baa:	23c0      	movs	r3, #192	; 0xc0
 8001bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bbe:	f107 0310 	add.w	r3, r7, #16
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f001 f990 	bl	8002ee8 <HAL_RCCEx_PeriphCLKConfig>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_SAI_MspInit+0x52>
    {
      Error_Handler();
 8001bce:	f7ff fe3d 	bl	800184c <Error_Handler>
    }

      if (SAI1_client == 0)
 8001bd2:	4b3f      	ldr	r3, [pc, #252]	; (8001cd0 <HAL_SAI_MspInit+0x150>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10d      	bne.n	8001bf6 <HAL_SAI_MspInit+0x76>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_SAI_MspInit+0x154>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	4a3c      	ldr	r2, [pc, #240]	; (8001cd4 <HAL_SAI_MspInit+0x154>)
 8001be4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001be8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bea:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <HAL_SAI_MspInit+0x154>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001bf6:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <HAL_SAI_MspInit+0x150>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	4a34      	ldr	r2, [pc, #208]	; (8001cd0 <HAL_SAI_MspInit+0x150>)
 8001bfe:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c00:	2308      	movs	r3, #8
 8001c02:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001c10:	2306      	movs	r3, #6
 8001c12:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c18:	4619      	mov	r1, r3
 8001c1a:	482f      	ldr	r0, [pc, #188]	; (8001cd8 <HAL_SAI_MspInit+0x158>)
 8001c1c:	f000 fe9c 	bl	8002958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c24:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001c32:	2306      	movs	r3, #6
 8001c34:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c36:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4827      	ldr	r0, [pc, #156]	; (8001cdc <HAL_SAI_MspInit+0x15c>)
 8001c3e:	f000 fe8b 	bl	8002958 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 8001c42:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001c44:	4a27      	ldr	r2, [pc, #156]	; (8001ce4 <HAL_SAI_MspInit+0x164>)
 8001c46:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 8001c48:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001c4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c4e:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c50:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c56:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001c5c:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001c5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c62:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001c66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c6a:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001c6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c72:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c7a:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8001c7c:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001c84:	2204      	movs	r2, #4
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001c9a:	4811      	ldr	r0, [pc, #68]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001c9c:	f000 fa5a 	bl	8002154 <HAL_DMA_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_SAI_MspInit+0x12a>
    {
      Error_Handler();
 8001ca6:	f7ff fdd1 	bl	800184c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a0c      	ldr	r2, [pc, #48]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001cae:	675a      	str	r2, [r3, #116]	; 0x74
 8001cb0:	4a0b      	ldr	r2, [pc, #44]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001cba:	671a      	str	r2, [r3, #112]	; 0x70
 8001cbc:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <HAL_SAI_MspInit+0x160>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001cc2:	bf00      	nop
 8001cc4:	3780      	adds	r7, #128	; 0x80
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40015824 	.word	0x40015824
 8001cd0:	20002ce8 	.word	0x20002ce8
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40021400 	.word	0x40021400
 8001ce0:	200000e4 	.word	0x200000e4
 8001ce4:	40026470 	.word	0x40026470

08001ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <NMI_Handler+0x4>

08001cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <HardFault_Handler+0x4>

08001cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <MemManage_Handler+0x4>

08001cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <BusFault_Handler+0x4>

08001d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <UsageFault_Handler+0x4>

08001d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d34:	f000 f8b8 	bl	8001ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <DMA1_Stream5_IRQHandler+0x10>)
 8001d42:	f000 fb9f 	bl	8002484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2000026c 	.word	0x2000026c

08001d50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <TIM2_IRQHandler+0x10>)
 8001d56:	f003 ff5f 	bl	8005c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	2000019c 	.word	0x2000019c

08001d64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <USART2_IRQHandler+0x10>)
 8001d6a:	f004 fcb1 	bl	80066d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000228 	.word	0x20000228

08001d78 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <DMA2_Stream4_IRQHandler+0x10>)
 8001d7e:	f000 fb81 	bl	8002484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200000e4 	.word	0x200000e4

08001d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <SystemInit+0x20>)
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <SystemInit+0x20>)
 8001d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001db6:	490e      	ldr	r1, [pc, #56]	; (8001df0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001db8:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dbc:	e002      	b.n	8001dc4 <LoopCopyDataInit>

08001dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc2:	3304      	adds	r3, #4

08001dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc8:	d3f9      	bcc.n	8001dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dca:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dcc:	4c0b      	ldr	r4, [pc, #44]	; (8001dfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd0:	e001      	b.n	8001dd6 <LoopFillZerobss>

08001dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd4:	3204      	adds	r2, #4

08001dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd8:	d3fb      	bcc.n	8001dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dda:	f7ff ffd7 	bl	8001d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dde:	f005 fd65 	bl	80078ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de2:	f7fe ffe1 	bl	8000da8 <main>
  bx  lr    
 8001de6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df0:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001df4:	08007968 	.word	0x08007968
  ldr r2, =_sbss
 8001df8:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001dfc:	20002cf0 	.word	0x20002cf0

08001e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC_IRQHandler>
	...

08001e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <HAL_Init+0x40>)
 8001e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_Init+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <HAL_Init+0x40>)
 8001e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <HAL_Init+0x40>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <HAL_Init+0x40>)
 8001e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f000 f94f 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e32:	200f      	movs	r0, #15
 8001e34:	f000 f808 	bl	8001e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e38:	f7ff fd0e 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023c00 	.word	0x40023c00

08001e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_InitTick+0x54>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_InitTick+0x58>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f967 	bl	800213a <HAL_SYSTICK_Config>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00e      	b.n	8001e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b0f      	cmp	r3, #15
 8001e7a:	d80a      	bhi.n	8001e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e84:	f000 f92f 	bl	80020e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e88:	4a06      	ldr	r2, [pc, #24]	; (8001ea4 <HAL_InitTick+0x5c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e000      	b.n	8001e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000034 	.word	0x20000034
 8001ea0:	2000003c 	.word	0x2000003c
 8001ea4:	20000038 	.word	0x20000038

08001ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_IncTick+0x20>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_IncTick+0x24>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <HAL_IncTick+0x24>)
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	2000003c 	.word	0x2000003c
 8001ecc:	20002cec 	.word	0x20002cec

08001ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <HAL_GetTick+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20002cec 	.word	0x20002cec

08001ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef0:	f7ff ffee 	bl	8001ed0 <HAL_GetTick>
 8001ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f00:	d005      	beq.n	8001f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_Delay+0x44>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f0e:	bf00      	nop
 8001f10:	f7ff ffde 	bl	8001ed0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d8f7      	bhi.n	8001f10 <HAL_Delay+0x28>
  {
  }
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000003c 	.word	0x2000003c

08001f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <__NVIC_GetPriorityGrouping+0x18>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0307 	and.w	r3, r3, #7
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db0b      	blt.n	8001fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	4907      	ldr	r1, [pc, #28]	; (8001fcc <__NVIC_EnableIRQ+0x38>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0a      	blt.n	8001ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	490c      	ldr	r1, [pc, #48]	; (800201c <__NVIC_SetPriority+0x4c>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	0112      	lsls	r2, r2, #4
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff8:	e00a      	b.n	8002010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4908      	ldr	r1, [pc, #32]	; (8002020 <__NVIC_SetPriority+0x50>)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3b04      	subs	r3, #4
 8002008:	0112      	lsls	r2, r2, #4
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	440b      	add	r3, r1
 800200e:	761a      	strb	r2, [r3, #24]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b04      	cmp	r3, #4
 8002040:	bf28      	it	cs
 8002042:	2304      	movcs	r3, #4
 8002044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	2b06      	cmp	r3, #6
 800204c:	d902      	bls.n	8002054 <NVIC_EncodePriority+0x30>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3b03      	subs	r3, #3
 8002052:	e000      	b.n	8002056 <NVIC_EncodePriority+0x32>
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43d9      	mvns	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	4313      	orrs	r3, r2
         );
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	; 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800209c:	d301      	bcc.n	80020a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <SysTick_Config+0x40>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020aa:	210f      	movs	r1, #15
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020b0:	f7ff ff8e 	bl	8001fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <SysTick_Config+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	; (80020cc <SysTick_Config+0x40>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff29 	bl	8001f30 <__NVIC_SetPriorityGrouping>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f8:	f7ff ff3e 	bl	8001f78 <__NVIC_GetPriorityGrouping>
 80020fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f7ff ff8e 	bl	8002024 <NVIC_EncodePriority>
 8002108:	4602      	mov	r2, r0
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff5d 	bl	8001fd0 <__NVIC_SetPriority>
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff31 	bl	8001f94 <__NVIC_EnableIRQ>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ffa2 	bl	800208c <SysTick_Config>
 8002148:	4603      	mov	r3, r0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002160:	f7ff feb6 	bl	8001ed0 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e099      	b.n	80022a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002190:	e00f      	b.n	80021b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002192:	f7ff fe9d 	bl	8001ed0 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b05      	cmp	r3, #5
 800219e:	d908      	bls.n	80021b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2203      	movs	r2, #3
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e078      	b.n	80022a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e8      	bne.n	8002192 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	4b38      	ldr	r3, [pc, #224]	; (80022ac <HAL_DMA_Init+0x158>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	2b04      	cmp	r3, #4
 800220a:	d107      	bne.n	800221c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	4313      	orrs	r3, r2
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f023 0307 	bic.w	r3, r3, #7
 8002232:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	2b04      	cmp	r3, #4
 8002244:	d117      	bne.n	8002276 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00e      	beq.n	8002276 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 fb01 	bl	8002860 <DMA_CheckFifoParam>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2240      	movs	r2, #64	; 0x40
 8002268:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002272:	2301      	movs	r3, #1
 8002274:	e016      	b.n	80022a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fab8 	bl	80027f4 <DMA_CalcBaseAndBitshift>
 8002284:	4603      	mov	r3, r0
 8002286:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	223f      	movs	r2, #63	; 0x3f
 800228e:	409a      	lsls	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	f010803f 	.word	0xf010803f

080022b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_DMA_Start_IT+0x26>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e040      	b.n	8002358 <HAL_DMA_Start_IT+0xa8>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d12f      	bne.n	800234a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2202      	movs	r2, #2
 80022ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 fa4a 	bl	8002798 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002308:	223f      	movs	r2, #63	; 0x3f
 800230a:	409a      	lsls	r2, r3
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0216 	orr.w	r2, r2, #22
 800231e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0208 	orr.w	r2, r2, #8
 8002336:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	e005      	b.n	8002356 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002352:	2302      	movs	r3, #2
 8002354:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002356:	7dfb      	ldrb	r3, [r7, #23]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800236e:	f7ff fdaf 	bl	8001ed0 <HAL_GetTick>
 8002372:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d008      	beq.n	8002392 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e052      	b.n	8002438 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0216 	bic.w	r2, r2, #22
 80023a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d103      	bne.n	80023c2 <HAL_DMA_Abort+0x62>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d007      	beq.n	80023d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0208 	bic.w	r2, r2, #8
 80023d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0201 	bic.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e2:	e013      	b.n	800240c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e4:	f7ff fd74 	bl	8001ed0 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b05      	cmp	r3, #5
 80023f0:	d90c      	bls.n	800240c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2220      	movs	r2, #32
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2203      	movs	r2, #3
 80023fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e015      	b.n	8002438 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1e4      	bne.n	80023e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	223f      	movs	r2, #63	; 0x3f
 8002420:	409a      	lsls	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d004      	beq.n	800245e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2280      	movs	r2, #128	; 0x80
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e00c      	b.n	8002478 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2205      	movs	r2, #5
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002490:	4b8e      	ldr	r3, [pc, #568]	; (80026cc <HAL_DMA_IRQHandler+0x248>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a8e      	ldr	r2, [pc, #568]	; (80026d0 <HAL_DMA_IRQHandler+0x24c>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	0a9b      	lsrs	r3, r3, #10
 800249c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	2208      	movs	r2, #8
 80024b0:	409a      	lsls	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01a      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0204 	bic.w	r2, r2, #4
 80024d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	2208      	movs	r2, #8
 80024de:	409a      	lsls	r2, r3
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e8:	f043 0201 	orr.w	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	2201      	movs	r2, #1
 80024f6:	409a      	lsls	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d012      	beq.n	8002526 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002512:	2201      	movs	r2, #1
 8002514:	409a      	lsls	r2, r3
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f043 0202 	orr.w	r2, r3, #2
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252a:	2204      	movs	r2, #4
 800252c:	409a      	lsls	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d012      	beq.n	800255c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00b      	beq.n	800255c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002548:	2204      	movs	r2, #4
 800254a:	409a      	lsls	r2, r3
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	f043 0204 	orr.w	r2, r3, #4
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	2210      	movs	r2, #16
 8002562:	409a      	lsls	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d043      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d03c      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	2210      	movs	r2, #16
 8002580:	409a      	lsls	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d018      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d108      	bne.n	80025b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d024      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	4798      	blx	r3
 80025b2:	e01f      	b.n	80025f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01b      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	4798      	blx	r3
 80025c4:	e016      	b.n	80025f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d107      	bne.n	80025e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0208 	bic.w	r2, r2, #8
 80025e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	2220      	movs	r2, #32
 80025fa:	409a      	lsls	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 808f 	beq.w	8002724 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8087 	beq.w	8002724 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	2220      	movs	r2, #32
 800261c:	409a      	lsls	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b05      	cmp	r3, #5
 800262c:	d136      	bne.n	800269c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0216 	bic.w	r2, r2, #22
 800263c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800264c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d103      	bne.n	800265e <HAL_DMA_IRQHandler+0x1da>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0208 	bic.w	r2, r2, #8
 800266c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	223f      	movs	r2, #63	; 0x3f
 8002674:	409a      	lsls	r2, r3
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268e:	2b00      	cmp	r3, #0
 8002690:	d07e      	beq.n	8002790 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	4798      	blx	r3
        }
        return;
 800269a:	e079      	b.n	8002790 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01d      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10d      	bne.n	80026d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d031      	beq.n	8002724 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
 80026c8:	e02c      	b.n	8002724 <HAL_DMA_IRQHandler+0x2a0>
 80026ca:	bf00      	nop
 80026cc:	20000034 	.word	0x20000034
 80026d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d023      	beq.n	8002724 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	4798      	blx	r3
 80026e4:	e01e      	b.n	8002724 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10f      	bne.n	8002714 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0210 	bic.w	r2, r2, #16
 8002702:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	2b00      	cmp	r3, #0
 800272a:	d032      	beq.n	8002792 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d022      	beq.n	800277e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2205      	movs	r2, #5
 800273c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0201 	bic.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	3301      	adds	r3, #1
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	429a      	cmp	r2, r3
 800275a:	d307      	bcc.n	800276c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f2      	bne.n	8002750 <HAL_DMA_IRQHandler+0x2cc>
 800276a:	e000      	b.n	800276e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800276c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	4798      	blx	r3
 800278e:	e000      	b.n	8002792 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002790:	bf00      	nop
    }
  }
}
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d108      	bne.n	80027d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027d6:	e007      	b.n	80027e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3b10      	subs	r3, #16
 8002804:	4a14      	ldr	r2, [pc, #80]	; (8002858 <DMA_CalcBaseAndBitshift+0x64>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800280e:	4a13      	ldr	r2, [pc, #76]	; (800285c <DMA_CalcBaseAndBitshift+0x68>)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4413      	add	r3, r2
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d909      	bls.n	8002836 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800282a:	f023 0303 	bic.w	r3, r3, #3
 800282e:	1d1a      	adds	r2, r3, #4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	659a      	str	r2, [r3, #88]	; 0x58
 8002834:	e007      	b.n	8002846 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800283e:	f023 0303 	bic.w	r3, r3, #3
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	aaaaaaab 	.word	0xaaaaaaab
 800285c:	08007950 	.word	0x08007950

08002860 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d11f      	bne.n	80028ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b03      	cmp	r3, #3
 800287e:	d856      	bhi.n	800292e <DMA_CheckFifoParam+0xce>
 8002880:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <DMA_CheckFifoParam+0x28>)
 8002882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002886:	bf00      	nop
 8002888:	08002899 	.word	0x08002899
 800288c:	080028ab 	.word	0x080028ab
 8002890:	08002899 	.word	0x08002899
 8002894:	0800292f 	.word	0x0800292f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d046      	beq.n	8002932 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a8:	e043      	b.n	8002932 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028b2:	d140      	bne.n	8002936 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028b8:	e03d      	b.n	8002936 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c2:	d121      	bne.n	8002908 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d837      	bhi.n	800293a <DMA_CheckFifoParam+0xda>
 80028ca:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <DMA_CheckFifoParam+0x70>)
 80028cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d0:	080028e1 	.word	0x080028e1
 80028d4:	080028e7 	.word	0x080028e7
 80028d8:	080028e1 	.word	0x080028e1
 80028dc:	080028f9 	.word	0x080028f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      break;
 80028e4:	e030      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d025      	beq.n	800293e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f6:	e022      	b.n	800293e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002900:	d11f      	bne.n	8002942 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002906:	e01c      	b.n	8002942 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d903      	bls.n	8002916 <DMA_CheckFifoParam+0xb6>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b03      	cmp	r3, #3
 8002912:	d003      	beq.n	800291c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002914:	e018      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
      break;
 800291a:	e015      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00e      	beq.n	8002946 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      break;
 800292c:	e00b      	b.n	8002946 <DMA_CheckFifoParam+0xe6>
      break;
 800292e:	bf00      	nop
 8002930:	e00a      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 8002932:	bf00      	nop
 8002934:	e008      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 8002936:	bf00      	nop
 8002938:	e006      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 800293a:	bf00      	nop
 800293c:	e004      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 800293e:	bf00      	nop
 8002940:	e002      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;   
 8002942:	bf00      	nop
 8002944:	e000      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 8002946:	bf00      	nop
    }
  } 
  
  return status; 
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop

08002958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002958:	b480      	push	{r7}
 800295a:	b089      	sub	sp, #36	; 0x24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	e165      	b.n	8002c40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002974:	2201      	movs	r2, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	429a      	cmp	r2, r3
 800298e:	f040 8154 	bne.w	8002c3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d005      	beq.n	80029aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d130      	bne.n	8002a0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	2203      	movs	r2, #3
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e0:	2201      	movs	r2, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 0201 	and.w	r2, r3, #1
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d017      	beq.n	8002a48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	2203      	movs	r2, #3
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d123      	bne.n	8002a9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	08da      	lsrs	r2, r3, #3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3208      	adds	r2, #8
 8002a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	220f      	movs	r2, #15
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	08da      	lsrs	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3208      	adds	r2, #8
 8002a96:	69b9      	ldr	r1, [r7, #24]
 8002a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0203 	and.w	r2, r3, #3
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80ae 	beq.w	8002c3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	4b5d      	ldr	r3, [pc, #372]	; (8002c58 <HAL_GPIO_Init+0x300>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	4a5c      	ldr	r2, [pc, #368]	; (8002c58 <HAL_GPIO_Init+0x300>)
 8002ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aec:	6453      	str	r3, [r2, #68]	; 0x44
 8002aee:	4b5a      	ldr	r3, [pc, #360]	; (8002c58 <HAL_GPIO_Init+0x300>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002afa:	4a58      	ldr	r2, [pc, #352]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	3302      	adds	r3, #2
 8002b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	220f      	movs	r2, #15
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4f      	ldr	r2, [pc, #316]	; (8002c60 <HAL_GPIO_Init+0x308>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d025      	beq.n	8002b72 <HAL_GPIO_Init+0x21a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a4e      	ldr	r2, [pc, #312]	; (8002c64 <HAL_GPIO_Init+0x30c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d01f      	beq.n	8002b6e <HAL_GPIO_Init+0x216>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a4d      	ldr	r2, [pc, #308]	; (8002c68 <HAL_GPIO_Init+0x310>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d019      	beq.n	8002b6a <HAL_GPIO_Init+0x212>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a4c      	ldr	r2, [pc, #304]	; (8002c6c <HAL_GPIO_Init+0x314>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d013      	beq.n	8002b66 <HAL_GPIO_Init+0x20e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a4b      	ldr	r2, [pc, #300]	; (8002c70 <HAL_GPIO_Init+0x318>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00d      	beq.n	8002b62 <HAL_GPIO_Init+0x20a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a4a      	ldr	r2, [pc, #296]	; (8002c74 <HAL_GPIO_Init+0x31c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d007      	beq.n	8002b5e <HAL_GPIO_Init+0x206>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a49      	ldr	r2, [pc, #292]	; (8002c78 <HAL_GPIO_Init+0x320>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <HAL_GPIO_Init+0x202>
 8002b56:	2306      	movs	r3, #6
 8002b58:	e00c      	b.n	8002b74 <HAL_GPIO_Init+0x21c>
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	e00a      	b.n	8002b74 <HAL_GPIO_Init+0x21c>
 8002b5e:	2305      	movs	r3, #5
 8002b60:	e008      	b.n	8002b74 <HAL_GPIO_Init+0x21c>
 8002b62:	2304      	movs	r3, #4
 8002b64:	e006      	b.n	8002b74 <HAL_GPIO_Init+0x21c>
 8002b66:	2303      	movs	r3, #3
 8002b68:	e004      	b.n	8002b74 <HAL_GPIO_Init+0x21c>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e002      	b.n	8002b74 <HAL_GPIO_Init+0x21c>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_GPIO_Init+0x21c>
 8002b72:	2300      	movs	r3, #0
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	f002 0203 	and.w	r2, r2, #3
 8002b7a:	0092      	lsls	r2, r2, #2
 8002b7c:	4093      	lsls	r3, r2
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b84:	4935      	ldr	r1, [pc, #212]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b92:	4b3a      	ldr	r3, [pc, #232]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bb6:	4a31      	ldr	r2, [pc, #196]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bbc:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002be0:	4a26      	ldr	r2, [pc, #152]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002be6:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c0a:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c10:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c34:	4a11      	ldr	r2, [pc, #68]	; (8002c7c <HAL_GPIO_Init+0x324>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b0f      	cmp	r3, #15
 8002c44:	f67f ae96 	bls.w	8002974 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	3724      	adds	r7, #36	; 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40013800 	.word	0x40013800
 8002c60:	40020000 	.word	0x40020000
 8002c64:	40020400 	.word	0x40020400
 8002c68:	40020800 	.word	0x40020800
 8002c6c:	40020c00 	.word	0x40020c00
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40021400 	.word	0x40021400
 8002c78:	40021800 	.word	0x40021800
 8002c7c:	40013c00 	.word	0x40013c00

08002c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c90:	787b      	ldrb	r3, [r7, #1]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c96:	887a      	ldrh	r2, [r7, #2]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c9c:	e003      	b.n	8002ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c9e:	887b      	ldrh	r3, [r7, #2]
 8002ca0:	041a      	lsls	r2, r3, #16
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	619a      	str	r2, [r3, #24]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0cc      	b.n	8002e62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b68      	ldr	r3, [pc, #416]	; (8002e6c <HAL_RCC_ClockConfig+0x1b8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d90c      	bls.n	8002cf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b65      	ldr	r3, [pc, #404]	; (8002e6c <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b63      	ldr	r3, [pc, #396]	; (8002e6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0b8      	b.n	8002e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d020      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d08:	4b59      	ldr	r3, [pc, #356]	; (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	4a58      	ldr	r2, [pc, #352]	; (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d20:	4b53      	ldr	r3, [pc, #332]	; (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4a52      	ldr	r2, [pc, #328]	; (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d2c:	4b50      	ldr	r3, [pc, #320]	; (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	494d      	ldr	r1, [pc, #308]	; (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d044      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d107      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d52:	4b47      	ldr	r3, [pc, #284]	; (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d119      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e07f      	b.n	8002e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d003      	beq.n	8002d72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d72:	4b3f      	ldr	r3, [pc, #252]	; (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e06f      	b.n	8002e62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d82:	4b3b      	ldr	r3, [pc, #236]	; (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e067      	b.n	8002e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d92:	4b37      	ldr	r3, [pc, #220]	; (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f023 0203 	bic.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4934      	ldr	r1, [pc, #208]	; (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da4:	f7ff f894 	bl	8001ed0 <HAL_GetTick>
 8002da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dac:	f7ff f890 	bl	8001ed0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e04f      	b.n	8002e62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 020c 	and.w	r2, r3, #12
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d1eb      	bne.n	8002dac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd4:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <HAL_RCC_ClockConfig+0x1b8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d20c      	bcs.n	8002dfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de2:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <HAL_RCC_ClockConfig+0x1b8>)
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dea:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <HAL_RCC_ClockConfig+0x1b8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d001      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e032      	b.n	8002e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e08:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4916      	ldr	r1, [pc, #88]	; (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d009      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e26:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	490e      	ldr	r1, [pc, #56]	; (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e3a:	f000 fdc7 	bl	80039cc <HAL_RCC_GetSysClockFreq>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	490a      	ldr	r1, [pc, #40]	; (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002e4c:	5ccb      	ldrb	r3, [r1, r3]
 8002e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e52:	4a09      	ldr	r2, [pc, #36]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e56:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fff4 	bl	8001e48 <HAL_InitTick>

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023c00 	.word	0x40023c00
 8002e70:	40023800 	.word	0x40023800
 8002e74:	08007938 	.word	0x08007938
 8002e78:	20000034 	.word	0x20000034
 8002e7c:	20000038 	.word	0x20000038

08002e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e84:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e86:	681b      	ldr	r3, [r3, #0]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000034 	.word	0x20000034

08002e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e9c:	f7ff fff0 	bl	8002e80 <HAL_RCC_GetHCLKFreq>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	0a9b      	lsrs	r3, r3, #10
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	4903      	ldr	r1, [pc, #12]	; (8002ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eae:	5ccb      	ldrb	r3, [r1, r3]
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	08007948 	.word	0x08007948

08002ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ec4:	f7ff ffdc 	bl	8002e80 <HAL_RCC_GetHCLKFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	0b5b      	lsrs	r3, r3, #13
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	4903      	ldr	r1, [pc, #12]	; (8002ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	08007948 	.word	0x08007948

08002ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08c      	sub	sp, #48	; 0x30
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d010      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002f20:	4b6f      	ldr	r3, [pc, #444]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f26:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	496c      	ldr	r1, [pc, #432]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d010      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002f4e:	4b64      	ldr	r3, [pc, #400]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f54:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5c:	4960      	ldr	r1, [pc, #384]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d017      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f7c:	4b58      	ldr	r3, [pc, #352]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	4955      	ldr	r1, [pc, #340]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d017      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fb8:	4b49      	ldr	r3, [pc, #292]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc6:	4946      	ldr	r1, [pc, #280]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 808a 	beq.w	800310a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	4b39      	ldr	r3, [pc, #228]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	4a38      	ldr	r2, [pc, #224]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003004:	6413      	str	r3, [r2, #64]	; 0x40
 8003006:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003012:	4b34      	ldr	r3, [pc, #208]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a33      	ldr	r2, [pc, #204]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800301e:	f7fe ff57 	bl	8001ed0 <HAL_GetTick>
 8003022:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003026:	f7fe ff53 	bl	8001ed0 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e278      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003038:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003044:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d02f      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305c:	6a3a      	ldr	r2, [r7, #32]
 800305e:	429a      	cmp	r2, r3
 8003060:	d028      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003062:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800306a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800306c:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003072:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003078:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800307e:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d114      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800308a:	f7fe ff21 	bl	8001ed0 <HAL_GetTick>
 800308e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003090:	e00a      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fe ff1d 	bl	8001ed0 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e240      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a8:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0ee      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030c0:	d114      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x204>
 80030c2:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80030d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d6:	4902      	ldr	r1, [pc, #8]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	608b      	str	r3, [r1, #8]
 80030dc:	e00c      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40007000 	.word	0x40007000
 80030e8:	42470e40 	.word	0x42470e40
 80030ec:	4b4a      	ldr	r3, [pc, #296]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4a49      	ldr	r2, [pc, #292]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030f6:	6093      	str	r3, [r2, #8]
 80030f8:	4b47      	ldr	r3, [pc, #284]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003104:	4944      	ldr	r1, [pc, #272]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003106:	4313      	orrs	r3, r2
 8003108:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b00      	cmp	r3, #0
 8003114:	d004      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800311c:	4b3f      	ldr	r3, [pc, #252]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800311e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800312c:	4b3a      	ldr	r3, [pc, #232]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800312e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003132:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313a:	4937      	ldr	r1, [pc, #220]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800314e:	4b32      	ldr	r3, [pc, #200]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003154:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315c:	492e      	ldr	r1, [pc, #184]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d011      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003170:	4b29      	ldr	r3, [pc, #164]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003176:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317e:	4926      	ldr	r1, [pc, #152]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800318e:	d101      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003190:	2301      	movs	r3, #1
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80031a0:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	491a      	ldr	r1, [pc, #104]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d011      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d0:	4911      	ldr	r1, [pc, #68]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e0:	d101      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80031e2:	2301      	movs	r3, #1
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d005      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f4:	f040 80ff 	bne.w	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031fe:	f7fe fe67 	bl	8001ed0 <HAL_GetTick>
 8003202:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003204:	e00e      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003206:	f7fe fe63 	bl	8001ed0 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d907      	bls.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e188      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003218:	40023800 	.word	0x40023800
 800321c:	424711e0 	.word	0x424711e0
 8003220:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003224:	4b7e      	ldr	r3, [pc, #504]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ea      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	2b00      	cmp	r3, #0
 8003242:	d009      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800324c:	2b00      	cmp	r3, #0
 800324e:	d028      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003254:	2b00      	cmp	r3, #0
 8003256:	d124      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003258:	4b71      	ldr	r3, [pc, #452]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800325a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800325e:	0c1b      	lsrs	r3, r3, #16
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	3301      	adds	r3, #1
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800326a:	4b6d      	ldr	r3, [pc, #436]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800326c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003270:	0e1b      	lsrs	r3, r3, #24
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	019b      	lsls	r3, r3, #6
 8003282:	431a      	orrs	r2, r3
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	3b01      	subs	r3, #1
 800328a:	041b      	lsls	r3, r3, #16
 800328c:	431a      	orrs	r2, r3
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	061b      	lsls	r3, r3, #24
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	071b      	lsls	r3, r3, #28
 800329a:	4961      	ldr	r1, [pc, #388]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d035      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032cc:	d130      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80032ce:	4b54      	ldr	r3, [pc, #336]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d4:	0c1b      	lsrs	r3, r3, #16
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	3301      	adds	r3, #1
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032e0:	4b4f      	ldr	r3, [pc, #316]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e6:	0f1b      	lsrs	r3, r3, #28
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	019b      	lsls	r3, r3, #6
 80032f8:	431a      	orrs	r2, r3
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	085b      	lsrs	r3, r3, #1
 80032fe:	3b01      	subs	r3, #1
 8003300:	041b      	lsls	r3, r3, #16
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	061b      	lsls	r3, r3, #24
 800330a:	431a      	orrs	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	071b      	lsls	r3, r3, #28
 8003310:	4943      	ldr	r1, [pc, #268]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003318:	4b41      	ldr	r3, [pc, #260]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800331a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800331e:	f023 021f 	bic.w	r2, r3, #31
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	3b01      	subs	r3, #1
 8003328:	493d      	ldr	r1, [pc, #244]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003338:	2b00      	cmp	r3, #0
 800333a:	d029      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003344:	d124      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003346:	4b36      	ldr	r3, [pc, #216]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	3301      	adds	r3, #1
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003358:	4b31      	ldr	r3, [pc, #196]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800335a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800335e:	0f1b      	lsrs	r3, r3, #28
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	019b      	lsls	r3, r3, #6
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	3b01      	subs	r3, #1
 800337a:	041b      	lsls	r3, r3, #16
 800337c:	431a      	orrs	r2, r3
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	061b      	lsls	r3, r3, #24
 8003382:	431a      	orrs	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	071b      	lsls	r3, r3, #28
 8003388:	4925      	ldr	r1, [pc, #148]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003398:	2b00      	cmp	r3, #0
 800339a:	d016      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	019b      	lsls	r3, r3, #6
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	085b      	lsrs	r3, r3, #1
 80033ae:	3b01      	subs	r3, #1
 80033b0:	041b      	lsls	r3, r3, #16
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	061b      	lsls	r3, r3, #24
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	071b      	lsls	r3, r3, #28
 80033c2:	4917      	ldr	r1, [pc, #92]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033ca:	4b16      	ldr	r3, [pc, #88]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033d0:	f7fe fd7e 	bl	8001ed0 <HAL_GetTick>
 80033d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80033d8:	f7fe fd7a 	bl	8001ed0 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e09f      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033ea:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	f040 8095 	bne.w	8003528 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003404:	f7fe fd64 	bl	8001ed0 <HAL_GetTick>
 8003408:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800340a:	e00f      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800340c:	f7fe fd60 	bl	8001ed0 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d908      	bls.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e085      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800
 8003424:	42470068 	.word	0x42470068
 8003428:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800342c:	4b41      	ldr	r3, [pc, #260]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003438:	d0e8      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003456:	2b00      	cmp	r3, #0
 8003458:	d02b      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345e:	2b00      	cmp	r3, #0
 8003460:	d127      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003462:	4b34      	ldr	r3, [pc, #208]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003468:	0c1b      	lsrs	r3, r3, #16
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	3301      	adds	r3, #1
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699a      	ldr	r2, [r3, #24]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	019b      	lsls	r3, r3, #6
 800347e:	431a      	orrs	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	085b      	lsrs	r3, r3, #1
 8003484:	3b01      	subs	r3, #1
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	061b      	lsls	r3, r3, #24
 8003490:	4928      	ldr	r1, [pc, #160]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003498:	4b26      	ldr	r3, [pc, #152]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800349a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800349e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	3b01      	subs	r3, #1
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	4922      	ldr	r1, [pc, #136]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d01d      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x612>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034c6:	d118      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ce:	0e1b      	lsrs	r3, r3, #24
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	019b      	lsls	r3, r3, #6
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	085b      	lsrs	r3, r3, #1
 80034e8:	3b01      	subs	r3, #1
 80034ea:	041b      	lsls	r3, r3, #16
 80034ec:	431a      	orrs	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	4910      	ldr	r1, [pc, #64]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80034fa:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003500:	f7fe fce6 	bl	8001ed0 <HAL_GetTick>
 8003504:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003508:	f7fe fce2 	bl	8001ed0 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e007      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003526:	d1ef      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3730      	adds	r7, #48	; 0x30
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800
 8003538:	42470070 	.word	0x42470070

0800353c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800353c:	b480      	push	{r7}
 800353e:	b089      	sub	sp, #36	; 0x24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3b01      	subs	r3, #1
 8003560:	2b07      	cmp	r3, #7
 8003562:	f200 8224 	bhi.w	80039ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8003566:	a201      	add	r2, pc, #4	; (adr r2, 800356c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356c:	0800376f 	.word	0x0800376f
 8003570:	08003899 	.word	0x08003899
 8003574:	080039af 	.word	0x080039af
 8003578:	0800358d 	.word	0x0800358d
 800357c:	080039af 	.word	0x080039af
 8003580:	080039af 	.word	0x080039af
 8003584:	080039af 	.word	0x080039af
 8003588:	0800358d 	.word	0x0800358d
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 800358c:	4ba8      	ldr	r3, [pc, #672]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800358e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003592:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035a2:	f000 80d6 	beq.w	8003752 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035ac:	f200 80dd 	bhi.w	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b6:	f000 809f 	beq.w	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035c0:	f200 80d3 	bhi.w	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ca:	d05b      	beq.n	8003684 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d2:	f200 80ca 	bhi.w	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035dc:	f000 80b6 	beq.w	800374c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035e6:	f200 80c0 	bhi.w	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035f0:	f000 8082 	beq.w	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035fa:	f200 80b6 	bhi.w	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d004      	beq.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800360a:	d03b      	beq.n	8003684 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 800360c:	e0ad      	b.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800360e:	4b88      	ldr	r3, [pc, #544]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800361a:	4b85      	ldr	r3, [pc, #532]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003624:	4a83      	ldr	r2, [pc, #524]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003626:	fbb2 f3f3 	udiv	r3, r2, r3
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	e008      	b.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800362e:	4b80      	ldr	r3, [pc, #512]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003638:	4a7f      	ldr	r2, [pc, #508]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003640:	4b7b      	ldr	r3, [pc, #492]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003646:	0e1b      	lsrs	r3, r3, #24
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800364e:	4b78      	ldr	r3, [pc, #480]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	099b      	lsrs	r3, r3, #6
 8003656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	fb03 f202 	mul.w	r2, r3, r2
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	fbb2 f3f3 	udiv	r3, r2, r3
 8003666:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8003668:	4b71      	ldr	r3, [pc, #452]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800366a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	3301      	adds	r3, #1
 8003676:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003680:	61fb      	str	r3, [r7, #28]
          break;
 8003682:	e073      	b.n	800376c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003684:	4b6a      	ldr	r3, [pc, #424]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d109      	bne.n	80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003690:	4b67      	ldr	r3, [pc, #412]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003696:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800369a:	4a66      	ldr	r2, [pc, #408]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	e008      	b.n	80036b6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80036a4:	4b62      	ldr	r3, [pc, #392]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ae:	4a62      	ldr	r2, [pc, #392]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80036b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b4:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80036b6:	4b5e      	ldr	r3, [pc, #376]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036bc:	0e1b      	lsrs	r3, r3, #24
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80036c4:	4b5a      	ldr	r3, [pc, #360]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ca:	099b      	lsrs	r3, r3, #6
 80036cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	fb03 f202 	mul.w	r2, r3, r2
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80036de:	4b54      	ldr	r3, [pc, #336]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	3301      	adds	r3, #1
 80036ea:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	61fb      	str	r3, [r7, #28]
          break;
 80036f6:	e039      	b.n	800376c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80036f8:	4b4d      	ldr	r3, [pc, #308]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d108      	bne.n	8003716 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003704:	4b4a      	ldr	r3, [pc, #296]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800370c:	4a49      	ldr	r2, [pc, #292]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800370e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	e007      	b.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003716:	4b46      	ldr	r3, [pc, #280]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800371e:	4a46      	ldr	r2, [pc, #280]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003720:	fbb2 f3f3 	udiv	r3, r2, r3
 8003724:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8003726:	4b42      	ldr	r3, [pc, #264]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	0f1b      	lsrs	r3, r3, #28
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8003732:	4b3f      	ldr	r3, [pc, #252]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	099b      	lsrs	r3, r3, #6
 8003738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	fb03 f202 	mul.w	r2, r3, r2
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	61fb      	str	r3, [r7, #28]
          break;
 800374a:	e00f      	b.n	800376c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 800374c:	4b3b      	ldr	r3, [pc, #236]	; (800383c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800374e:	61fb      	str	r3, [r7, #28]
          break;
 8003750:	e00c      	b.n	800376c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003752:	4b37      	ldr	r3, [pc, #220]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 800375e:	4b35      	ldr	r3, [pc, #212]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003760:	61fb      	str	r3, [r7, #28]
          break;
 8003762:	e003      	b.n	800376c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8003764:	4b34      	ldr	r3, [pc, #208]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003766:	61fb      	str	r3, [r7, #28]
          break;
 8003768:	e000      	b.n	800376c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 800376a:	bf00      	nop
        }
      }
      break;
 800376c:	e11f      	b.n	80039ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800376e:	4b30      	ldr	r3, [pc, #192]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003774:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003780:	d079      	beq.n	8003876 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003788:	f200 8082 	bhi.w	8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003792:	d03c      	beq.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800379a:	d879      	bhi.n	8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d006      	beq.n	80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037a8:	d172      	bne.n	8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80037ac:	61fb      	str	r3, [r7, #28]
          break;
 80037ae:	e072      	b.n	8003896 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80037b0:	4b1f      	ldr	r3, [pc, #124]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037bc:	d109      	bne.n	80037d2 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80037be:	4b1c      	ldr	r3, [pc, #112]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80037ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ce:	61bb      	str	r3, [r7, #24]
 80037d0:	e008      	b.n	80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80037d2:	4b17      	ldr	r3, [pc, #92]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037dc:	4a15      	ldr	r2, [pc, #84]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80037de:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80037e4:	4b12      	ldr	r3, [pc, #72]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ea:	099b      	lsrs	r3, r3, #6
 80037ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80037f8:	4b0d      	ldr	r3, [pc, #52]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fe:	0f1b      	lsrs	r3, r3, #28
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	fbb2 f3f3 	udiv	r3, r2, r3
 800380a:	61fb      	str	r3, [r7, #28]
          break;
 800380c:	e043      	b.n	8003896 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800380e:	4b08      	ldr	r3, [pc, #32]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381a:	d111      	bne.n	8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003824:	4a04      	ldr	r2, [pc, #16]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	e010      	b.n	8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
 8003834:	00f42400 	.word	0x00f42400
 8003838:	017d7840 	.word	0x017d7840
 800383c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003840:	4b5e      	ldr	r3, [pc, #376]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003848:	4a5d      	ldr	r2, [pc, #372]	; (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800384a:	fbb2 f3f3 	udiv	r3, r2, r3
 800384e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003850:	4b5a      	ldr	r3, [pc, #360]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	099b      	lsrs	r3, r3, #6
 8003856:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	fb02 f303 	mul.w	r3, r2, r3
 8003860:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003862:	4b56      	ldr	r3, [pc, #344]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	0f1b      	lsrs	r3, r3, #28
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003872:	61fb      	str	r3, [r7, #28]
          break;
 8003874:	e00f      	b.n	8003896 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003876:	4b51      	ldr	r3, [pc, #324]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003882:	d102      	bne.n	800388a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8003884:	4b4f      	ldr	r3, [pc, #316]	; (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003886:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003888:	e005      	b.n	8003896 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 800388a:	4b4d      	ldr	r3, [pc, #308]	; (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800388c:	61fb      	str	r3, [r7, #28]
          break;
 800388e:	e002      	b.n	8003896 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	61fb      	str	r3, [r7, #28]
          break;
 8003894:	bf00      	nop
        }
      }
      break;
 8003896:	e08a      	b.n	80039ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003898:	4b48      	ldr	r3, [pc, #288]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800389a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800389e:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80038aa:	d06f      	beq.n	800398c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80038b2:	d878      	bhi.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ba:	d03c      	beq.n	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038c2:	d870      	bhi.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d006      	beq.n	80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038d0:	d169      	bne.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80038d2:	4b3d      	ldr	r3, [pc, #244]	; (80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80038d4:	61fb      	str	r3, [r7, #28]
          break;
 80038d6:	e069      	b.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80038d8:	4b38      	ldr	r3, [pc, #224]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e4:	d109      	bne.n	80038fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80038e6:	4b35      	ldr	r3, [pc, #212]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80038e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038f0:	4a34      	ldr	r2, [pc, #208]	; (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80038f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	e008      	b.n	800390c <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80038fa:	4b30      	ldr	r3, [pc, #192]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80038fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003904:	4a2e      	ldr	r2, [pc, #184]	; (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003906:	fbb2 f3f3 	udiv	r3, r2, r3
 800390a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800390c:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800390e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003912:	099b      	lsrs	r3, r3, #6
 8003914:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	fb02 f303 	mul.w	r3, r2, r3
 800391e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003920:	4b26      	ldr	r3, [pc, #152]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003926:	0f1b      	lsrs	r3, r3, #28
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003932:	61fb      	str	r3, [r7, #28]
          break;
 8003934:	e03a      	b.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003936:	4b21      	ldr	r3, [pc, #132]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003942:	d108      	bne.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003944:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800394c:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800394e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	e007      	b.n	8003966 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003956:	4b19      	ldr	r3, [pc, #100]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800395e:	4a18      	ldr	r2, [pc, #96]	; (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003960:	fbb2 f3f3 	udiv	r3, r2, r3
 8003964:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	099b      	lsrs	r3, r3, #6
 800396c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	fb02 f303 	mul.w	r3, r2, r3
 8003976:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003978:	4b10      	ldr	r3, [pc, #64]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	0f1b      	lsrs	r3, r3, #28
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	fbb2 f3f3 	udiv	r3, r2, r3
 8003988:	61fb      	str	r3, [r7, #28]
          break;
 800398a:	e00f      	b.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003998:	d102      	bne.n	80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800399c:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800399e:	e005      	b.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80039a2:	61fb      	str	r3, [r7, #28]
          break;
 80039a4:	e002      	b.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
          break;
 80039aa:	bf00      	nop
        }
      }
      break;
 80039ac:	bf00      	nop
    }
  }
  return frequency;
 80039ae:	69fb      	ldr	r3, [r7, #28]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3724      	adds	r7, #36	; 0x24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	40023800 	.word	0x40023800
 80039c0:	00f42400 	.word	0x00f42400
 80039c4:	017d7840 	.word	0x017d7840
 80039c8:	00bb8000 	.word	0x00bb8000

080039cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d0:	b0a6      	sub	sp, #152	; 0x98
 80039d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039f2:	4bc8      	ldr	r3, [pc, #800]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b0c      	cmp	r3, #12
 80039fc:	f200 817e 	bhi.w	8003cfc <HAL_RCC_GetSysClockFreq+0x330>
 8003a00:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a06:	bf00      	nop
 8003a08:	08003a3d 	.word	0x08003a3d
 8003a0c:	08003cfd 	.word	0x08003cfd
 8003a10:	08003cfd 	.word	0x08003cfd
 8003a14:	08003cfd 	.word	0x08003cfd
 8003a18:	08003a45 	.word	0x08003a45
 8003a1c:	08003cfd 	.word	0x08003cfd
 8003a20:	08003cfd 	.word	0x08003cfd
 8003a24:	08003cfd 	.word	0x08003cfd
 8003a28:	08003a4d 	.word	0x08003a4d
 8003a2c:	08003cfd 	.word	0x08003cfd
 8003a30:	08003cfd 	.word	0x08003cfd
 8003a34:	08003cfd 	.word	0x08003cfd
 8003a38:	08003bb7 	.word	0x08003bb7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a3c:	4bb6      	ldr	r3, [pc, #728]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003a42:	e15f      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a44:	4bb5      	ldr	r3, [pc, #724]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x350>)
 8003a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003a4a:	e15b      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a4c:	4bb1      	ldr	r3, [pc, #708]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a58:	4bae      	ldr	r3, [pc, #696]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d031      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a64:	4bab      	ldr	r3, [pc, #684]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	099b      	lsrs	r3, r3, #6
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a76:	663b      	str	r3, [r7, #96]	; 0x60
 8003a78:	2300      	movs	r3, #0
 8003a7a:	667b      	str	r3, [r7, #100]	; 0x64
 8003a7c:	4ba7      	ldr	r3, [pc, #668]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x350>)
 8003a7e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003a82:	462a      	mov	r2, r5
 8003a84:	fb03 f202 	mul.w	r2, r3, r2
 8003a88:	2300      	movs	r3, #0
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	4aa2      	ldr	r2, [pc, #648]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x350>)
 8003a94:	4621      	mov	r1, r4
 8003a96:	fba1 1202 	umull	r1, r2, r1, r2
 8003a9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a9c:	460a      	mov	r2, r1
 8003a9e:	67ba      	str	r2, [r7, #120]	; 0x78
 8003aa0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003aa2:	4413      	add	r3, r2
 8003aa4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aaa:	2200      	movs	r2, #0
 8003aac:	65bb      	str	r3, [r7, #88]	; 0x58
 8003aae:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003ab0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ab4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003ab8:	f7fc fcb4 	bl	8000424 <__aeabi_uldivmod>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ac6:	e064      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac8:	4b92      	ldr	r3, [pc, #584]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	099b      	lsrs	r3, r3, #6
 8003ace:	2200      	movs	r2, #0
 8003ad0:	653b      	str	r3, [r7, #80]	; 0x50
 8003ad2:	657a      	str	r2, [r7, #84]	; 0x54
 8003ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ada:	64bb      	str	r3, [r7, #72]	; 0x48
 8003adc:	2300      	movs	r3, #0
 8003ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003ae4:	4622      	mov	r2, r4
 8003ae6:	462b      	mov	r3, r5
 8003ae8:	f04f 0000 	mov.w	r0, #0
 8003aec:	f04f 0100 	mov.w	r1, #0
 8003af0:	0159      	lsls	r1, r3, #5
 8003af2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003af6:	0150      	lsls	r0, r2, #5
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4621      	mov	r1, r4
 8003afe:	1a51      	subs	r1, r2, r1
 8003b00:	6139      	str	r1, [r7, #16]
 8003b02:	4629      	mov	r1, r5
 8003b04:	eb63 0301 	sbc.w	r3, r3, r1
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b16:	4659      	mov	r1, fp
 8003b18:	018b      	lsls	r3, r1, #6
 8003b1a:	4651      	mov	r1, sl
 8003b1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b20:	4651      	mov	r1, sl
 8003b22:	018a      	lsls	r2, r1, #6
 8003b24:	4651      	mov	r1, sl
 8003b26:	ebb2 0801 	subs.w	r8, r2, r1
 8003b2a:	4659      	mov	r1, fp
 8003b2c:	eb63 0901 	sbc.w	r9, r3, r1
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b44:	4690      	mov	r8, r2
 8003b46:	4699      	mov	r9, r3
 8003b48:	4623      	mov	r3, r4
 8003b4a:	eb18 0303 	adds.w	r3, r8, r3
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	462b      	mov	r3, r5
 8003b52:	eb49 0303 	adc.w	r3, r9, r3
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b64:	4629      	mov	r1, r5
 8003b66:	028b      	lsls	r3, r1, #10
 8003b68:	4621      	mov	r1, r4
 8003b6a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b6e:	4621      	mov	r1, r4
 8003b70:	028a      	lsls	r2, r1, #10
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b7e:	647a      	str	r2, [r7, #68]	; 0x44
 8003b80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b84:	f7fc fc4e 	bl	8000424 <__aeabi_uldivmod>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b92:	4b60      	ldr	r3, [pc, #384]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003ba4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003bb4:	e0a6      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bb6:	4b57      	ldr	r3, [pc, #348]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bc2:	4b54      	ldr	r3, [pc, #336]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d02a      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bce:	4b51      	ldr	r3, [pc, #324]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	099b      	lsrs	r3, r3, #6
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bdc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003be0:	2100      	movs	r1, #0
 8003be2:	4b4e      	ldr	r3, [pc, #312]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x350>)
 8003be4:	fb03 f201 	mul.w	r2, r3, r1
 8003be8:	2300      	movs	r3, #0
 8003bea:	fb00 f303 	mul.w	r3, r0, r3
 8003bee:	4413      	add	r3, r2
 8003bf0:	4a4a      	ldr	r2, [pc, #296]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x350>)
 8003bf2:	fba0 1202 	umull	r1, r2, r0, r2
 8003bf6:	677a      	str	r2, [r7, #116]	; 0x74
 8003bf8:	460a      	mov	r2, r1
 8003bfa:	673a      	str	r2, [r7, #112]	; 0x70
 8003bfc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bfe:	4413      	add	r3, r2
 8003c00:	677b      	str	r3, [r7, #116]	; 0x74
 8003c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c06:	2200      	movs	r2, #0
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
 8003c0a:	637a      	str	r2, [r7, #52]	; 0x34
 8003c0c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c10:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003c14:	f7fc fc06 	bl	8000424 <__aeabi_uldivmod>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c22:	e05b      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c24:	4b3b      	ldr	r3, [pc, #236]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	099b      	lsrs	r3, r3, #6
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c36:	623b      	str	r3, [r7, #32]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c40:	4642      	mov	r2, r8
 8003c42:	464b      	mov	r3, r9
 8003c44:	f04f 0000 	mov.w	r0, #0
 8003c48:	f04f 0100 	mov.w	r1, #0
 8003c4c:	0159      	lsls	r1, r3, #5
 8003c4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c52:	0150      	lsls	r0, r2, #5
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4641      	mov	r1, r8
 8003c5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c5e:	4649      	mov	r1, r9
 8003c60:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c78:	ebb2 040a 	subs.w	r4, r2, sl
 8003c7c:	eb63 050b 	sbc.w	r5, r3, fp
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	00eb      	lsls	r3, r5, #3
 8003c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c8e:	00e2      	lsls	r2, r4, #3
 8003c90:	4614      	mov	r4, r2
 8003c92:	461d      	mov	r5, r3
 8003c94:	4643      	mov	r3, r8
 8003c96:	18e3      	adds	r3, r4, r3
 8003c98:	603b      	str	r3, [r7, #0]
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	eb45 0303 	adc.w	r3, r5, r3
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cae:	4629      	mov	r1, r5
 8003cb0:	028b      	lsls	r3, r1, #10
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cb8:	4621      	mov	r1, r4
 8003cba:	028a      	lsls	r2, r1, #10
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	61fa      	str	r2, [r7, #28]
 8003cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cce:	f7fc fba9 	bl	8000424 <__aeabi_uldivmod>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cdc:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	0f1b      	lsrs	r3, r3, #28
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003cea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003cfa:	e003      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003d02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3798      	adds	r7, #152	; 0x98
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800
 8003d18:	00f42400 	.word	0x00f42400
 8003d1c:	017d7840 	.word	0x017d7840

08003d20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e28d      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 8083 	beq.w	8003e46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d40:	4b94      	ldr	r3, [pc, #592]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d019      	beq.n	8003d80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d4c:	4b91      	ldr	r3, [pc, #580]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d58:	4b8e      	ldr	r3, [pc, #568]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d64:	d00c      	beq.n	8003d80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d66:	4b8b      	ldr	r3, [pc, #556]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d6e:	2b0c      	cmp	r3, #12
 8003d70:	d112      	bne.n	8003d98 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d72:	4b88      	ldr	r3, [pc, #544]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d7e:	d10b      	bne.n	8003d98 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d80:	4b84      	ldr	r3, [pc, #528]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d05b      	beq.n	8003e44 <HAL_RCC_OscConfig+0x124>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d157      	bne.n	8003e44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e25a      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da0:	d106      	bne.n	8003db0 <HAL_RCC_OscConfig+0x90>
 8003da2:	4b7c      	ldr	r3, [pc, #496]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7b      	ldr	r2, [pc, #492]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e01d      	b.n	8003dec <HAL_RCC_OscConfig+0xcc>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0xb4>
 8003dba:	4b76      	ldr	r3, [pc, #472]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a75      	ldr	r2, [pc, #468]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	4b73      	ldr	r3, [pc, #460]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a72      	ldr	r2, [pc, #456]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	e00b      	b.n	8003dec <HAL_RCC_OscConfig+0xcc>
 8003dd4:	4b6f      	ldr	r3, [pc, #444]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a6e      	ldr	r2, [pc, #440]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	4b6c      	ldr	r3, [pc, #432]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a6b      	ldr	r2, [pc, #428]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d013      	beq.n	8003e1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fe f86c 	bl	8001ed0 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dfc:	f7fe f868 	bl	8001ed0 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	; 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e21f      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	4b61      	ldr	r3, [pc, #388]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0xdc>
 8003e1a:	e014      	b.n	8003e46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7fe f858 	bl	8001ed0 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e24:	f7fe f854 	bl	8001ed0 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	; 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e20b      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e36:	4b57      	ldr	r3, [pc, #348]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x104>
 8003e42:	e000      	b.n	8003e46 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d06f      	beq.n	8003f32 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e52:	4b50      	ldr	r3, [pc, #320]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d017      	beq.n	8003e8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e5e:	4b4d      	ldr	r3, [pc, #308]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d105      	bne.n	8003e76 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e6a:	4b4a      	ldr	r3, [pc, #296]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e76:	4b47      	ldr	r3, [pc, #284]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e7e:	2b0c      	cmp	r3, #12
 8003e80:	d11c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e82:	4b44      	ldr	r3, [pc, #272]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d116      	bne.n	8003ebc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8e:	4b41      	ldr	r3, [pc, #260]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x186>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d001      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e1d3      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea6:	4b3b      	ldr	r3, [pc, #236]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4937      	ldr	r1, [pc, #220]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eba:	e03a      	b.n	8003f32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d020      	beq.n	8003f06 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec4:	4b34      	ldr	r3, [pc, #208]	; (8003f98 <HAL_RCC_OscConfig+0x278>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eca:	f7fe f801 	bl	8001ed0 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ed2:	f7fd fffd 	bl	8001ed0 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e1b4      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee4:	4b2b      	ldr	r3, [pc, #172]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef0:	4b28      	ldr	r3, [pc, #160]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4925      	ldr	r1, [pc, #148]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]
 8003f04:	e015      	b.n	8003f32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f06:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <HAL_RCC_OscConfig+0x278>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fd ffe0 	bl	8001ed0 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f14:	f7fd ffdc 	bl	8001ed0 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e193      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f26:	4b1b      	ldr	r3, [pc, #108]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d036      	beq.n	8003fac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d016      	beq.n	8003f74 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4c:	f7fd ffc0 	bl	8001ed0 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f54:	f7fd ffbc 	bl	8001ed0 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e173      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x234>
 8003f72:	e01b      	b.n	8003fac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7a:	f7fd ffa9 	bl	8001ed0 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f80:	e00e      	b.n	8003fa0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f82:	f7fd ffa5 	bl	8001ed0 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d907      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e15c      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
 8003f94:	40023800 	.word	0x40023800
 8003f98:	42470000 	.word	0x42470000
 8003f9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa0:	4b8a      	ldr	r3, [pc, #552]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8003fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1ea      	bne.n	8003f82 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8097 	beq.w	80040e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fbe:	4b83      	ldr	r3, [pc, #524]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10f      	bne.n	8003fea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	4b7f      	ldr	r3, [pc, #508]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	4a7e      	ldr	r2, [pc, #504]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8003fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fda:	4b7c      	ldr	r3, [pc, #496]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	60bb      	str	r3, [r7, #8]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fea:	4b79      	ldr	r3, [pc, #484]	; (80041d0 <HAL_RCC_OscConfig+0x4b0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d118      	bne.n	8004028 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff6:	4b76      	ldr	r3, [pc, #472]	; (80041d0 <HAL_RCC_OscConfig+0x4b0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a75      	ldr	r2, [pc, #468]	; (80041d0 <HAL_RCC_OscConfig+0x4b0>)
 8003ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004002:	f7fd ff65 	bl	8001ed0 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400a:	f7fd ff61 	bl	8001ed0 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e118      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401c:	4b6c      	ldr	r3, [pc, #432]	; (80041d0 <HAL_RCC_OscConfig+0x4b0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d106      	bne.n	800403e <HAL_RCC_OscConfig+0x31e>
 8004030:	4b66      	ldr	r3, [pc, #408]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	4a65      	ldr	r2, [pc, #404]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6713      	str	r3, [r2, #112]	; 0x70
 800403c:	e01c      	b.n	8004078 <HAL_RCC_OscConfig+0x358>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b05      	cmp	r3, #5
 8004044:	d10c      	bne.n	8004060 <HAL_RCC_OscConfig+0x340>
 8004046:	4b61      	ldr	r3, [pc, #388]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	4a60      	ldr	r2, [pc, #384]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 800404c:	f043 0304 	orr.w	r3, r3, #4
 8004050:	6713      	str	r3, [r2, #112]	; 0x70
 8004052:	4b5e      	ldr	r3, [pc, #376]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	4a5d      	ldr	r2, [pc, #372]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	6713      	str	r3, [r2, #112]	; 0x70
 800405e:	e00b      	b.n	8004078 <HAL_RCC_OscConfig+0x358>
 8004060:	4b5a      	ldr	r3, [pc, #360]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004064:	4a59      	ldr	r2, [pc, #356]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	6713      	str	r3, [r2, #112]	; 0x70
 800406c:	4b57      	ldr	r3, [pc, #348]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 800406e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004070:	4a56      	ldr	r2, [pc, #344]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004072:	f023 0304 	bic.w	r3, r3, #4
 8004076:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d015      	beq.n	80040ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004080:	f7fd ff26 	bl	8001ed0 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004086:	e00a      	b.n	800409e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004088:	f7fd ff22 	bl	8001ed0 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	; 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0d7      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409e:	4b4b      	ldr	r3, [pc, #300]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0ee      	beq.n	8004088 <HAL_RCC_OscConfig+0x368>
 80040aa:	e014      	b.n	80040d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ac:	f7fd ff10 	bl	8001ed0 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b2:	e00a      	b.n	80040ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b4:	f7fd ff0c 	bl	8001ed0 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e0c1      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ca:	4b40      	ldr	r3, [pc, #256]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 80040cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1ee      	bne.n	80040b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d105      	bne.n	80040e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040dc:	4b3b      	ldr	r3, [pc, #236]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	4a3a      	ldr	r2, [pc, #232]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 80040e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 80ad 	beq.w	800424c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040f2:	4b36      	ldr	r3, [pc, #216]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d060      	beq.n	80041c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d145      	bne.n	8004192 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004106:	4b33      	ldr	r3, [pc, #204]	; (80041d4 <HAL_RCC_OscConfig+0x4b4>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7fd fee0 	bl	8001ed0 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004114:	f7fd fedc 	bl	8001ed0 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e093      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004126:	4b29      	ldr	r3, [pc, #164]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69da      	ldr	r2, [r3, #28]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	019b      	lsls	r3, r3, #6
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	085b      	lsrs	r3, r3, #1
 800414a:	3b01      	subs	r3, #1
 800414c:	041b      	lsls	r3, r3, #16
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	061b      	lsls	r3, r3, #24
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	071b      	lsls	r3, r3, #28
 800415e:	491b      	ldr	r1, [pc, #108]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004160:	4313      	orrs	r3, r2
 8004162:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004164:	4b1b      	ldr	r3, [pc, #108]	; (80041d4 <HAL_RCC_OscConfig+0x4b4>)
 8004166:	2201      	movs	r2, #1
 8004168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fd feb1 	bl	8001ed0 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004172:	f7fd fead 	bl	8001ed0 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e064      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004184:	4b11      	ldr	r3, [pc, #68]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x452>
 8004190:	e05c      	b.n	800424c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004192:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <HAL_RCC_OscConfig+0x4b4>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004198:	f7fd fe9a 	bl	8001ed0 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a0:	f7fd fe96 	bl	8001ed0 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e04d      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HAL_RCC_OscConfig+0x4ac>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f0      	bne.n	80041a0 <HAL_RCC_OscConfig+0x480>
 80041be:	e045      	b.n	800424c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d107      	bne.n	80041d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e040      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
 80041cc:	40023800 	.word	0x40023800
 80041d0:	40007000 	.word	0x40007000
 80041d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041d8:	4b1f      	ldr	r3, [pc, #124]	; (8004258 <HAL_RCC_OscConfig+0x538>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d030      	beq.n	8004248 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d129      	bne.n	8004248 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fe:	429a      	cmp	r2, r3
 8004200:	d122      	bne.n	8004248 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004208:	4013      	ands	r3, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800420e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004210:	4293      	cmp	r3, r2
 8004212:	d119      	bne.n	8004248 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421e:	085b      	lsrs	r3, r3, #1
 8004220:	3b01      	subs	r3, #1
 8004222:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004224:	429a      	cmp	r2, r3
 8004226:	d10f      	bne.n	8004248 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d107      	bne.n	8004248 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d001      	beq.n	800424c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800

0800425c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d904      	bls.n	800427e <HAL_SAI_InitProtocol+0x22>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	3b03      	subs	r3, #3
 8004278:	2b01      	cmp	r3, #1
 800427a:	d812      	bhi.n	80042a2 <HAL_SAI_InitProtocol+0x46>
 800427c:	e008      	b.n	8004290 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f9dd 	bl	8004644 <SAI_InitI2S>
 800428a:	4603      	mov	r3, r0
 800428c:	75fb      	strb	r3, [r7, #23]
      break;
 800428e:	e00b      	b.n	80042a8 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fa82 	bl	80047a0 <SAI_InitPCM>
 800429c:	4603      	mov	r3, r0
 800429e:	75fb      	strb	r3, [r7, #23]
      break;
 80042a0:	e002      	b.n	80042a8 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	75fb      	strb	r3, [r7, #23]
      break;
 80042a6:	bf00      	nop
  }

  if (status == HAL_OK)
 80042a8:	7dfb      	ldrb	r3, [r7, #23]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d104      	bne.n	80042b8 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f808 	bl	80042c4 <HAL_SAI_Init>
 80042b4:	4603      	mov	r3, r0
 80042b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e10c      	b.n	8004500 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fd fc40 	bl	8001b80 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 faff 	bl	800490c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fba6 	bl	8004a60 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d030      	beq.n	800437e <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fbe3 	bl	8004ae8 <SAI_GetInputClock>
 8004322:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	461a      	mov	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	025b      	lsls	r3, r3, #9
 8004336:	fbb2 f3f3 	udiv	r3, r2, r3
 800433a:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4a72      	ldr	r2, [pc, #456]	; (8004508 <HAL_SAI_Init+0x244>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	08da      	lsrs	r2, r3, #3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 800434a:	68f9      	ldr	r1, [r7, #12]
 800434c:	4b6e      	ldr	r3, [pc, #440]	; (8004508 <HAL_SAI_Init+0x244>)
 800434e:	fba3 2301 	umull	r2, r3, r3, r1
 8004352:	08da      	lsrs	r2, r3, #3
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	1aca      	subs	r2, r1, r3
 800435e:	2a08      	cmp	r2, #8
 8004360:	d904      	bls.n	800436c <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004370:	2b04      	cmp	r3, #4
 8004372:	d104      	bne.n	800437e <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	085a      	lsrs	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_SAI_Init+0xca>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d109      	bne.n	80043a2 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <HAL_SAI_Init+0xd6>
 8004396:	2300      	movs	r3, #0
 8004398:	e001      	b.n	800439e <HAL_SAI_Init+0xda>
 800439a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	e008      	b.n	80043b4 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d102      	bne.n	80043b0 <HAL_SAI_Init+0xec>
 80043aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043ae:	e000      	b.n	80043b2 <HAL_SAI_Init+0xee>
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d811      	bhi.n	80043e0 <HAL_SAI_Init+0x11c>
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d20b      	bcs.n	80043d8 <HAL_SAI_Init+0x114>
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <HAL_SAI_Init+0x106>
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d003      	beq.n	80043d0 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 80043c8:	e00a      	b.n	80043e0 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	613b      	str	r3, [r7, #16]
    break;
 80043ce:	e008      	b.n	80043e2 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80043d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043d4:	613b      	str	r3, [r7, #16]
    break;
 80043d6:	e004      	b.n	80043e2 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80043d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043dc:	613b      	str	r3, [r7, #16]
    break;
 80043de:	e000      	b.n	80043e2 <HAL_SAI_Init+0x11e>
      break;
 80043e0:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6819      	ldr	r1, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	4b47      	ldr	r3, [pc, #284]	; (800450c <HAL_SAI_Init+0x248>)
 80043ee:	400b      	ands	r3, r1
 80043f0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6819      	ldr	r1, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004400:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004406:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	431a      	orrs	r2, r3
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800441a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004426:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	051b      	lsls	r3, r3, #20
 800442e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6812      	ldr	r2, [r2, #0]
 8004442:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004446:	f023 030f 	bic.w	r3, r3, #15
 800444a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6859      	ldr	r1, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6899      	ldr	r1, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4b26      	ldr	r3, [pc, #152]	; (8004510 <HAL_SAI_Init+0x24c>)
 8004476:	400b      	ands	r3, r1
 8004478:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6899      	ldr	r1, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800448a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 8004490:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 8004496:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449c:	3b01      	subs	r3, #1
 800449e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80044a0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68d9      	ldr	r1, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	f24f 0320 	movw	r3, #61472	; 0xf020
 80044b8:	400b      	ands	r3, r1
 80044ba:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68d9      	ldr	r1, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ca:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044d0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80044d2:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d8:	3b01      	subs	r3, #1
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	cccccccd 	.word	0xcccccccd
 800450c:	ff05c010 	.word	0xff05c010
 8004510:	fff88000 	.word	0xfff88000

08004514 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	4613      	mov	r3, r2
 8004520:	80fb      	strh	r3, [r7, #6]
  if ((pData == NULL) || (Size == 0))
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_SAI_Receive_DMA+0x1a>
 8004528:	88fb      	ldrh	r3, [r7, #6]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e074      	b.n	800461c <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b01      	cmp	r3, #1
 800453c:	d16d      	bne.n	800461a <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_SAI_Receive_DMA+0x38>
 8004548:	2302      	movs	r3, #2
 800454a:	e067      	b.n	800461c <HAL_SAI_Receive_DMA+0x108>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hsai->pBuffPtr = pData;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	669a      	str	r2, [r3, #104]	; 0x68
    hsai->XferSize = Size;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	88fa      	ldrh	r2, [r7, #6]
 800455e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    hsai->XferCount = Size;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	88fa      	ldrh	r2, [r7, #6]
 8004566:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2222      	movs	r2, #34	; 0x22
 8004576:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457e:	4a29      	ldr	r2, [pc, #164]	; (8004624 <HAL_SAI_Receive_DMA+0x110>)
 8004580:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004586:	4a28      	ldr	r2, [pc, #160]	; (8004628 <HAL_SAI_Receive_DMA+0x114>)
 8004588:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458e:	4a27      	ldr	r2, [pc, #156]	; (800462c <HAL_SAI_Receive_DMA+0x118>)
 8004590:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004596:	2200      	movs	r2, #0
 8004598:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	331c      	adds	r3, #28
 80045a4:	4619      	mov	r1, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045aa:	461a      	mov	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80045b2:	f7fd fe7d 	bl	80022b0 <HAL_DMA_Start_IT>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return  HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e029      	b.n	800461c <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80045c8:	2100      	movs	r1, #0
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 f968 	bl	80048a0 <SAI_InterruptFlag>
 80045d0:	4601      	mov	r1, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80045ee:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d107      	bne.n	800460e <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800460c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	e000      	b.n	800461c <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800461a:	2302      	movs	r3, #2
  }
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	080049dd 	.word	0x080049dd
 8004628:	0800497d 	.word	0x0800497d
 800462c:	080049f9 	.word	0x080049f9

08004630 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <SAI_InitI2S+0x2a>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d103      	bne.n	8004676 <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	641a      	str	r2, [r3, #64]	; 0x40
 8004674:	e002      	b.n	800467c <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004682:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800468a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	661a      	str	r2, [r3, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e076      	b.n	8004794 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d107      	bne.n	80046bc <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80046b8:	655a      	str	r2, [r3, #84]	; 0x54
 80046ba:	e006      	b.n	80046ca <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046c2:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Frame definition */
  switch (datasize)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d84f      	bhi.n	8004770 <SAI_InitI2S+0x12c>
 80046d0:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <SAI_InitI2S+0x94>)
 80046d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d6:	bf00      	nop
 80046d8:	080046e9 	.word	0x080046e9
 80046dc:	0800470b 	.word	0x0800470b
 80046e0:	0800472d 	.word	0x0800472d
 80046e4:	0800474f 	.word	0x0800474f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2280      	movs	r2, #128	; 0x80
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	085b      	lsrs	r3, r3, #1
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	085b      	lsrs	r3, r3, #1
 80046fc:	011a      	lsls	r2, r3, #4
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2240      	movs	r2, #64	; 0x40
 8004706:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004708:	e034      	b.n	8004774 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2280      	movs	r2, #128	; 0x80
 800470e:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	085b      	lsrs	r3, r3, #1
 8004714:	019a      	lsls	r2, r3, #6
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2280      	movs	r2, #128	; 0x80
 8004728:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800472a:	e023      	b.n	8004774 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	22c0      	movs	r2, #192	; 0xc0
 8004730:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	085b      	lsrs	r3, r3, #1
 8004736:	019a      	lsls	r2, r3, #6
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	085b      	lsrs	r3, r3, #1
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2280      	movs	r2, #128	; 0x80
 800474a:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800474c:	e012      	b.n	8004774 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	22e0      	movs	r2, #224	; 0xe0
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	085b      	lsrs	r3, r3, #1
 8004758:	019a      	lsls	r2, r3, #6
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	085b      	lsrs	r3, r3, #1
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2280      	movs	r2, #128	; 0x80
 800476c:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800476e:	e001      	b.n	8004774 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e00f      	b.n	8004794 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d10b      	bne.n	8004792 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d102      	bne.n	8004786 <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2210      	movs	r2, #16
 8004784:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d102      	bne.n	8004792 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2208      	movs	r2, #8
 8004790:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <SAI_InitPCM+0x2a>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d103      	bne.n	80047d2 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	641a      	str	r2, [r3, #64]	; 0x40
 80047d0:	e002      	b.n	80047d8 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047e4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80047ec:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004800:	665a      	str	r2, [r3, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b04      	cmp	r3, #4
 8004806:	d103      	bne.n	8004810 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	649a      	str	r2, [r3, #72]	; 0x48
 800480e:	e002      	b.n	8004816 <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	220d      	movs	r2, #13
 8004814:	649a      	str	r2, [r3, #72]	; 0x48
  }

  switch (datasize)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b03      	cmp	r3, #3
 800481a:	d837      	bhi.n	800488c <SAI_InitPCM+0xec>
 800481c:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <SAI_InitPCM+0x84>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004835 	.word	0x08004835
 8004828:	0800484b 	.word	0x0800484b
 800482c:	08004861 	.word	0x08004861
 8004830:	08004877 	.word	0x08004877
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2280      	movs	r2, #128	; 0x80
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	011a      	lsls	r2, r3, #4
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2240      	movs	r2, #64	; 0x40
 8004846:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004848:	e022      	b.n	8004890 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2280      	movs	r2, #128	; 0x80
 800484e:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2280      	movs	r2, #128	; 0x80
 800485c:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800485e:	e017      	b.n	8004890 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	22c0      	movs	r2, #192	; 0xc0
 8004864:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2280      	movs	r2, #128	; 0x80
 8004872:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8004874:	e00c      	b.n	8004890 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	22e0      	movs	r2, #224	; 0xe0
 800487a:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2280      	movs	r2, #128	; 0x80
 8004888:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800488a:	e001      	b.n	8004890 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop

080048a0 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d103      	bne.n	80048bc <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f043 0308 	orr.w	r3, r3, #8
 80048ba:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d10b      	bne.n	80048dc <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d003      	beq.n	80048d4 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d103      	bne.n	80048dc <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f043 0310 	orr.w	r3, r3, #16
 80048da:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d003      	beq.n	80048ec <SAI_InterruptFlag+0x4c>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d104      	bne.n	80048f6 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	e003      	b.n	80048fe <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f043 0304 	orr.w	r3, r3, #4
 80048fc:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80048fe:	68fb      	ldr	r3, [r7, #12]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004914:	4b17      	ldr	r3, [pc, #92]	; (8004974 <SAI_Disable+0x68>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a17      	ldr	r2, [pc, #92]	; (8004978 <SAI_Disable+0x6c>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	0b1b      	lsrs	r3, r3, #12
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004936:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	1e5a      	subs	r2, r3, #1
 800493c:	60fa      	str	r2, [r7, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10a      	bne.n	8004958 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004948:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	72fb      	strb	r3, [r7, #11]
      break;
 8004956:	e006      	b.n	8004966 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e8      	bne.n	8004938 <SAI_Disable+0x2c>

  return status;
 8004966:	7afb      	ldrb	r3, [r7, #11]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	20000034 	.word	0x20000034
 8004978:	95cbec1b 	.word	0x95cbec1b

0800497c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004992:	d01c      	beq.n	80049ce <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80049a2:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80049ac:	2100      	movs	r1, #0
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f7ff ff76 	bl	80048a0 <SAI_InterruptFlag>
 80049b4:	4603      	mov	r3, r0
 80049b6:	43d9      	mvns	r1, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	400a      	ands	r2, r1
 80049c4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f7fc fd64 	bl	800149c <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80049d4:	bf00      	nop
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f7fc fd46 	bl	800147c <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d004      	beq.n	8004a2a <SAI_DMAError+0x32>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d112      	bne.n	8004a50 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004a38:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f7ff ff66 	bl	800490c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f7ff fded 	bl	8004630 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d00c      	beq.n	8004a8a <SAI_BlockSynchroConfig+0x2a>
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d80d      	bhi.n	8004a90 <SAI_BlockSynchroConfig+0x30>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <SAI_BlockSynchroConfig+0x1e>
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d003      	beq.n	8004a84 <SAI_BlockSynchroConfig+0x24>
 8004a7c:	e008      	b.n	8004a90 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60fb      	str	r3, [r7, #12]
      break;
 8004a82:	e008      	b.n	8004a96 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004a84:	2310      	movs	r3, #16
 8004a86:	60fb      	str	r3, [r7, #12]
      break;
 8004a88:	e005      	b.n	8004a96 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004a8a:	2320      	movs	r3, #32
 8004a8c:	60fb      	str	r3, [r7, #12]
      break;
 8004a8e:	e002      	b.n	8004a96 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60fb      	str	r3, [r7, #12]
      break;
 8004a94:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d103      	bne.n	8004aa6 <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a0b      	ldr	r2, [pc, #44]	; (8004ad8 <SAI_BlockSynchroConfig+0x78>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d004      	beq.n	8004aba <SAI_BlockSynchroConfig+0x5a>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a09      	ldr	r2, [pc, #36]	; (8004adc <SAI_BlockSynchroConfig+0x7c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d103      	bne.n	8004ac2 <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 8004aba:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <SAI_BlockSynchroConfig+0x80>)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	e003      	b.n	8004aca <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004ac2:	4a08      	ldr	r2, [pc, #32]	; (8004ae4 <SAI_BlockSynchroConfig+0x84>)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8004ac8:	bf00      	nop
 8004aca:	bf00      	nop
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40015804 	.word	0x40015804
 8004adc:	40015824 	.word	0x40015824
 8004ae0:	40015800 	.word	0x40015800
 8004ae4:	40015c00 	.word	0x40015c00

08004ae8 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a0a      	ldr	r2, [pc, #40]	; (8004b24 <SAI_GetInputClock+0x3c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <SAI_GetInputClock+0x20>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a09      	ldr	r2, [pc, #36]	; (8004b28 <SAI_GetInputClock+0x40>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d104      	bne.n	8004b12 <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004b08:	2004      	movs	r0, #4
 8004b0a:	f7fe fd17 	bl	800353c <HAL_RCCEx_GetPeriphCLKFreq>
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	e003      	b.n	8004b1a <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004b12:	2008      	movs	r0, #8
 8004b14:	f7fe fd12 	bl	800353c <HAL_RCCEx_GetPeriphCLKFreq>
 8004b18:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40015804 	.word	0x40015804
 8004b28:	40015824 	.word	0x40015824

08004b2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e07b      	b.n	8004c36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d108      	bne.n	8004b58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b4e:	d009      	beq.n	8004b64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	61da      	str	r2, [r3, #28]
 8004b56:	e005      	b.n	8004b64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fc fe92 	bl	80018a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be8:	ea42 0103 	orr.w	r1, r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	0c1b      	lsrs	r3, r3, #16
 8004c02:	f003 0104 	and.w	r1, r3, #4
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	f003 0210 	and.w	r2, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b088      	sub	sp, #32
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	603b      	str	r3, [r7, #0]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_SPI_Transmit+0x22>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e126      	b.n	8004eae <HAL_SPI_Transmit+0x270>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c68:	f7fd f932 	bl	8001ed0 <HAL_GetTick>
 8004c6c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c6e:	88fb      	ldrh	r3, [r7, #6]
 8004c70:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d002      	beq.n	8004c84 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c7e:	2302      	movs	r3, #2
 8004c80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c82:	e10b      	b.n	8004e9c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <HAL_SPI_Transmit+0x52>
 8004c8a:	88fb      	ldrh	r3, [r7, #6]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d102      	bne.n	8004c96 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c94:	e102      	b.n	8004e9c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2203      	movs	r2, #3
 8004c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	88fa      	ldrh	r2, [r7, #6]
 8004cae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	88fa      	ldrh	r2, [r7, #6]
 8004cb4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cdc:	d10f      	bne.n	8004cfe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d08:	2b40      	cmp	r3, #64	; 0x40
 8004d0a:	d007      	beq.n	8004d1c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d24:	d14b      	bne.n	8004dbe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_SPI_Transmit+0xf6>
 8004d2e:	8afb      	ldrh	r3, [r7, #22]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d13e      	bne.n	8004db2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	881a      	ldrh	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	1c9a      	adds	r2, r3, #2
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d58:	e02b      	b.n	8004db2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d112      	bne.n	8004d8e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	881a      	ldrh	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	1c9a      	adds	r2, r3, #2
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d8c:	e011      	b.n	8004db2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d8e:	f7fd f89f 	bl	8001ed0 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d803      	bhi.n	8004da6 <HAL_SPI_Transmit+0x168>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004da4:	d102      	bne.n	8004dac <HAL_SPI_Transmit+0x16e>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d102      	bne.n	8004db2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004db0:	e074      	b.n	8004e9c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1ce      	bne.n	8004d5a <HAL_SPI_Transmit+0x11c>
 8004dbc:	e04c      	b.n	8004e58 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_SPI_Transmit+0x18e>
 8004dc6:	8afb      	ldrh	r3, [r7, #22]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d140      	bne.n	8004e4e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	330c      	adds	r3, #12
 8004dd6:	7812      	ldrb	r2, [r2, #0]
 8004dd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004df2:	e02c      	b.n	8004e4e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d113      	bne.n	8004e2a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	330c      	adds	r3, #12
 8004e0c:	7812      	ldrb	r2, [r2, #0]
 8004e0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e28:	e011      	b.n	8004e4e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e2a:	f7fd f851 	bl	8001ed0 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d803      	bhi.n	8004e42 <HAL_SPI_Transmit+0x204>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e40:	d102      	bne.n	8004e48 <HAL_SPI_Transmit+0x20a>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e4c:	e026      	b.n	8004e9c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1cd      	bne.n	8004df4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	6839      	ldr	r1, [r7, #0]
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 fd21 	bl	80058a4 <SPI_EndRxTxTransaction>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10a      	bne.n	8004e8c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e76:	2300      	movs	r3, #0
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	77fb      	strb	r3, [r7, #31]
 8004e98:	e000      	b.n	8004e9c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004eac:	7ffb      	ldrb	r3, [r7, #31]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b088      	sub	sp, #32
 8004eba:	af02      	add	r7, sp, #8
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	603b      	str	r3, [r7, #0]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ed2:	d112      	bne.n	8004efa <HAL_SPI_Receive+0x44>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10e      	bne.n	8004efa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2204      	movs	r2, #4
 8004ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ee4:	88fa      	ldrh	r2, [r7, #6]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	4613      	mov	r3, r2
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f8f1 	bl	80050d8 <HAL_SPI_TransmitReceive>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	e0ea      	b.n	80050d0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_SPI_Receive+0x52>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e0e3      	b.n	80050d0 <HAL_SPI_Receive+0x21a>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f10:	f7fc ffde 	bl	8001ed0 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d002      	beq.n	8004f28 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004f22:	2302      	movs	r3, #2
 8004f24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f26:	e0ca      	b.n	80050be <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <HAL_SPI_Receive+0x7e>
 8004f2e:	88fb      	ldrh	r3, [r7, #6]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d102      	bne.n	8004f3a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f38:	e0c1      	b.n	80050be <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2204      	movs	r2, #4
 8004f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	88fa      	ldrh	r2, [r7, #6]
 8004f52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	88fa      	ldrh	r2, [r7, #6]
 8004f58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f80:	d10f      	bne.n	8004fa2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fa0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	d007      	beq.n	8004fc0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fbe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d162      	bne.n	800508e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004fc8:	e02e      	b.n	8005028 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d115      	bne.n	8005004 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f103 020c 	add.w	r2, r3, #12
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	7812      	ldrb	r2, [r2, #0]
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005002:	e011      	b.n	8005028 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005004:	f7fc ff64 	bl	8001ed0 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d803      	bhi.n	800501c <HAL_SPI_Receive+0x166>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800501a:	d102      	bne.n	8005022 <HAL_SPI_Receive+0x16c>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d102      	bne.n	8005028 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005026:	e04a      	b.n	80050be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1cb      	bne.n	8004fca <HAL_SPI_Receive+0x114>
 8005032:	e031      	b.n	8005098 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b01      	cmp	r3, #1
 8005040:	d113      	bne.n	800506a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	b292      	uxth	r2, r2
 800504e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	1c9a      	adds	r2, r3, #2
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005068:	e011      	b.n	800508e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800506a:	f7fc ff31 	bl	8001ed0 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d803      	bhi.n	8005082 <HAL_SPI_Receive+0x1cc>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005080:	d102      	bne.n	8005088 <HAL_SPI_Receive+0x1d2>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d102      	bne.n	800508e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800508c:	e017      	b.n	80050be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005092:	b29b      	uxth	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1cd      	bne.n	8005034 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	6839      	ldr	r1, [r7, #0]
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 fb9b 	bl	80057d8 <SPI_EndRxTransaction>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	75fb      	strb	r3, [r7, #23]
 80050ba:	e000      	b.n	80050be <HAL_SPI_Receive+0x208>
  }

error :
 80050bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08c      	sub	sp, #48	; 0x30
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050e6:	2301      	movs	r3, #1
 80050e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_SPI_TransmitReceive+0x26>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e18a      	b.n	8005414 <HAL_SPI_TransmitReceive+0x33c>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005106:	f7fc fee3 	bl	8001ed0 <HAL_GetTick>
 800510a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800511c:	887b      	ldrh	r3, [r7, #2]
 800511e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005120:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005124:	2b01      	cmp	r3, #1
 8005126:	d00f      	beq.n	8005148 <HAL_SPI_TransmitReceive+0x70>
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800512e:	d107      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d103      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x68>
 8005138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800513c:	2b04      	cmp	r3, #4
 800513e:	d003      	beq.n	8005148 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005140:	2302      	movs	r3, #2
 8005142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005146:	e15b      	b.n	8005400 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d005      	beq.n	800515a <HAL_SPI_TransmitReceive+0x82>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_SPI_TransmitReceive+0x82>
 8005154:	887b      	ldrh	r3, [r7, #2]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d103      	bne.n	8005162 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005160:	e14e      	b.n	8005400 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b04      	cmp	r3, #4
 800516c:	d003      	beq.n	8005176 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2205      	movs	r2, #5
 8005172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	887a      	ldrh	r2, [r7, #2]
 8005186:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	887a      	ldrh	r2, [r7, #2]
 800518c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	887a      	ldrh	r2, [r7, #2]
 8005198:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	887a      	ldrh	r2, [r7, #2]
 800519e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b6:	2b40      	cmp	r3, #64	; 0x40
 80051b8:	d007      	beq.n	80051ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d2:	d178      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <HAL_SPI_TransmitReceive+0x10a>
 80051dc:	8b7b      	ldrh	r3, [r7, #26]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d166      	bne.n	80052b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	881a      	ldrh	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	1c9a      	adds	r2, r3, #2
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005206:	e053      	b.n	80052b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b02      	cmp	r3, #2
 8005214:	d11b      	bne.n	800524e <HAL_SPI_TransmitReceive+0x176>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800521a:	b29b      	uxth	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d016      	beq.n	800524e <HAL_SPI_TransmitReceive+0x176>
 8005220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005222:	2b01      	cmp	r3, #1
 8005224:	d113      	bne.n	800524e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	881a      	ldrh	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	1c9a      	adds	r2, r3, #2
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b01      	cmp	r3, #1
 800525a:	d119      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x1b8>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d014      	beq.n	8005290 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	b292      	uxth	r2, r2
 8005272:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	1c9a      	adds	r2, r3, #2
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800528c:	2301      	movs	r3, #1
 800528e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005290:	f7fc fe1e 	bl	8001ed0 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800529c:	429a      	cmp	r2, r3
 800529e:	d807      	bhi.n	80052b0 <HAL_SPI_TransmitReceive+0x1d8>
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052a6:	d003      	beq.n	80052b0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052ae:	e0a7      	b.n	8005400 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1a6      	bne.n	8005208 <HAL_SPI_TransmitReceive+0x130>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1a1      	bne.n	8005208 <HAL_SPI_TransmitReceive+0x130>
 80052c4:	e07c      	b.n	80053c0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <HAL_SPI_TransmitReceive+0x1fc>
 80052ce:	8b7b      	ldrh	r3, [r7, #26]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d16b      	bne.n	80053ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	7812      	ldrb	r2, [r2, #0]
 80052e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052fa:	e057      	b.n	80053ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b02      	cmp	r3, #2
 8005308:	d11c      	bne.n	8005344 <HAL_SPI_TransmitReceive+0x26c>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d017      	beq.n	8005344 <HAL_SPI_TransmitReceive+0x26c>
 8005314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005316:	2b01      	cmp	r3, #1
 8005318:	d114      	bne.n	8005344 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	330c      	adds	r3, #12
 8005324:	7812      	ldrb	r2, [r2, #0]
 8005326:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b01      	cmp	r3, #1
 8005350:	d119      	bne.n	8005386 <HAL_SPI_TransmitReceive+0x2ae>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005356:	b29b      	uxth	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d014      	beq.n	8005386 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005382:	2301      	movs	r3, #1
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005386:	f7fc fda3 	bl	8001ed0 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005392:	429a      	cmp	r2, r3
 8005394:	d803      	bhi.n	800539e <HAL_SPI_TransmitReceive+0x2c6>
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800539c:	d102      	bne.n	80053a4 <HAL_SPI_TransmitReceive+0x2cc>
 800539e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d103      	bne.n	80053ac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80053aa:	e029      	b.n	8005400 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1a2      	bne.n	80052fc <HAL_SPI_TransmitReceive+0x224>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d19d      	bne.n	80052fc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 fa6d 	bl	80058a4 <SPI_EndRxTxTransaction>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d006      	beq.n	80053de <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2220      	movs	r2, #32
 80053da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80053dc:	e010      	b.n	8005400 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10b      	bne.n	80053fe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053e6:	2300      	movs	r3, #0
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	e000      	b.n	8005400 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80053fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005410:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005414:	4618      	mov	r0, r3
 8005416:	3730      	adds	r7, #48	; 0x30
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	4613      	mov	r3, r2
 8005428:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_SPI_Transmit_DMA+0x20>
 8005438:	2302      	movs	r3, #2
 800543a:	e09b      	b.n	8005574 <HAL_SPI_Transmit_DMA+0x158>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	d002      	beq.n	8005456 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005450:	2302      	movs	r3, #2
 8005452:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005454:	e089      	b.n	800556a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <HAL_SPI_Transmit_DMA+0x46>
 800545c:	88fb      	ldrh	r3, [r7, #6]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d102      	bne.n	8005468 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005466:	e080      	b.n	800556a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2203      	movs	r2, #3
 800546c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	88fa      	ldrh	r2, [r7, #6]
 8005480:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	88fa      	ldrh	r2, [r7, #6]
 8005486:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ae:	d10f      	bne.n	80054d0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d4:	4a29      	ldr	r2, [pc, #164]	; (800557c <HAL_SPI_Transmit_DMA+0x160>)
 80054d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054dc:	4a28      	ldr	r2, [pc, #160]	; (8005580 <HAL_SPI_Transmit_DMA+0x164>)
 80054de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e4:	4a27      	ldr	r2, [pc, #156]	; (8005584 <HAL_SPI_Transmit_DMA+0x168>)
 80054e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ec:	2200      	movs	r2, #0
 80054ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	4619      	mov	r1, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	330c      	adds	r3, #12
 8005500:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005506:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005508:	f7fc fed2 	bl	80022b0 <HAL_DMA_Start_IT>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00c      	beq.n	800552c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005516:	f043 0210 	orr.w	r2, r3, #16
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800552a:	e01e      	b.n	800556a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005536:	2b40      	cmp	r3, #64	; 0x40
 8005538:	d007      	beq.n	800554a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005548:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0220 	orr.w	r2, r2, #32
 8005558:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0202 	orr.w	r2, r2, #2
 8005568:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005572:	7dfb      	ldrb	r3, [r7, #23]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	0800566d 	.word	0x0800566d
 8005580:	080055c5 	.word	0x080055c5
 8005584:	08005689 	.word	0x08005689

08005588 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055d2:	f7fc fc7d 	bl	8001ed0 <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e6:	d03b      	beq.n	8005660 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0220 	bic.w	r2, r2, #32
 80055f6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0202 	bic.w	r2, r2, #2
 8005606:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	2164      	movs	r1, #100	; 0x64
 800560c:	6978      	ldr	r0, [r7, #20]
 800560e:	f000 f949 	bl	80058a4 <SPI_EndRxTxTransaction>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561c:	f043 0220 	orr.w	r2, r3, #32
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10a      	bne.n	8005642 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2200      	movs	r2, #0
 8005646:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005658:	6978      	ldr	r0, [r7, #20]
 800565a:	f7ff ffa9 	bl	80055b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800565e:	e002      	b.n	8005666 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005660:	6978      	ldr	r0, [r7, #20]
 8005662:	f7ff ff91 	bl	8005588 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f7ff ff8e 	bl	800559c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005680:	bf00      	nop
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0203 	bic.w	r2, r2, #3
 80056a4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056aa:	f043 0210 	orr.w	r2, r3, #16
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f7ff ff78 	bl	80055b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056c0:	bf00      	nop
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	4613      	mov	r3, r2
 80056d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056d8:	f7fc fbfa 	bl	8001ed0 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	1a9b      	subs	r3, r3, r2
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	4413      	add	r3, r2
 80056e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056e8:	f7fc fbf2 	bl	8001ed0 <HAL_GetTick>
 80056ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056ee:	4b39      	ldr	r3, [pc, #228]	; (80057d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	015b      	lsls	r3, r3, #5
 80056f4:	0d1b      	lsrs	r3, r3, #20
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	fb02 f303 	mul.w	r3, r2, r3
 80056fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056fe:	e054      	b.n	80057aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005706:	d050      	beq.n	80057aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005708:	f7fc fbe2 	bl	8001ed0 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	429a      	cmp	r2, r3
 8005716:	d902      	bls.n	800571e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d13d      	bne.n	800579a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800572c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005736:	d111      	bne.n	800575c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005740:	d004      	beq.n	800574c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800574a:	d107      	bne.n	800575c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800575a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005764:	d10f      	bne.n	8005786 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e017      	b.n	80057ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4013      	ands	r3, r2
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	bf0c      	ite	eq
 80057ba:	2301      	moveq	r3, #1
 80057bc:	2300      	movne	r3, #0
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	461a      	mov	r2, r3
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d19b      	bne.n	8005700 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3720      	adds	r7, #32
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000034 	.word	0x20000034

080057d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af02      	add	r7, sp, #8
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ec:	d111      	bne.n	8005812 <SPI_EndRxTransaction+0x3a>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f6:	d004      	beq.n	8005802 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005800:	d107      	bne.n	8005812 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005810:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800581a:	d12a      	bne.n	8005872 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005824:	d012      	beq.n	800584c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2200      	movs	r2, #0
 800582e:	2180      	movs	r1, #128	; 0x80
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f7ff ff49 	bl	80056c8 <SPI_WaitFlagStateUntilTimeout>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d02d      	beq.n	8005898 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005840:	f043 0220 	orr.w	r2, r3, #32
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e026      	b.n	800589a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2200      	movs	r2, #0
 8005854:	2101      	movs	r1, #1
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f7ff ff36 	bl	80056c8 <SPI_WaitFlagStateUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d01a      	beq.n	8005898 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005866:	f043 0220 	orr.w	r2, r3, #32
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e013      	b.n	800589a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2200      	movs	r2, #0
 800587a:	2101      	movs	r1, #1
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f7ff ff23 	bl	80056c8 <SPI_WaitFlagStateUntilTimeout>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d007      	beq.n	8005898 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588c:	f043 0220 	orr.w	r2, r3, #32
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e000      	b.n	800589a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af02      	add	r7, sp, #8
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058b0:	4b1b      	ldr	r3, [pc, #108]	; (8005920 <SPI_EndRxTxTransaction+0x7c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1b      	ldr	r2, [pc, #108]	; (8005924 <SPI_EndRxTxTransaction+0x80>)
 80058b6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ba:	0d5b      	lsrs	r3, r3, #21
 80058bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058c0:	fb02 f303 	mul.w	r3, r2, r3
 80058c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ce:	d112      	bne.n	80058f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2200      	movs	r2, #0
 80058d8:	2180      	movs	r1, #128	; 0x80
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f7ff fef4 	bl	80056c8 <SPI_WaitFlagStateUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d016      	beq.n	8005914 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ea:	f043 0220 	orr.w	r2, r3, #32
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e00f      	b.n	8005916 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	3b01      	subs	r3, #1
 8005900:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590c:	2b80      	cmp	r3, #128	; 0x80
 800590e:	d0f2      	beq.n	80058f6 <SPI_EndRxTxTransaction+0x52>
 8005910:	e000      	b.n	8005914 <SPI_EndRxTxTransaction+0x70>
        break;
 8005912:	bf00      	nop
  }

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20000034 	.word	0x20000034
 8005924:	165e9f81 	.word	0x165e9f81

08005928 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e041      	b.n	80059be <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d106      	bne.n	8005954 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fb fff2 	bl	8001938 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	3304      	adds	r3, #4
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f000 fb22 	bl	8005fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d104      	bne.n	80059e6 <HAL_TIM_IC_Start_IT+0x1e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	e013      	b.n	8005a0e <HAL_TIM_IC_Start_IT+0x46>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d104      	bne.n	80059f6 <HAL_TIM_IC_Start_IT+0x2e>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	e00b      	b.n	8005a0e <HAL_TIM_IC_Start_IT+0x46>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d104      	bne.n	8005a06 <HAL_TIM_IC_Start_IT+0x3e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	e003      	b.n	8005a0e <HAL_TIM_IC_Start_IT+0x46>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d104      	bne.n	8005a20 <HAL_TIM_IC_Start_IT+0x58>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	e013      	b.n	8005a48 <HAL_TIM_IC_Start_IT+0x80>
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d104      	bne.n	8005a30 <HAL_TIM_IC_Start_IT+0x68>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	e00b      	b.n	8005a48 <HAL_TIM_IC_Start_IT+0x80>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d104      	bne.n	8005a40 <HAL_TIM_IC_Start_IT+0x78>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	e003      	b.n	8005a48 <HAL_TIM_IC_Start_IT+0x80>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a4a:	7bbb      	ldrb	r3, [r7, #14]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d102      	bne.n	8005a56 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a50:	7b7b      	ldrb	r3, [r7, #13]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d001      	beq.n	8005a5a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e0cc      	b.n	8005bf4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d104      	bne.n	8005a6a <HAL_TIM_IC_Start_IT+0xa2>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a68:	e013      	b.n	8005a92 <HAL_TIM_IC_Start_IT+0xca>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d104      	bne.n	8005a7a <HAL_TIM_IC_Start_IT+0xb2>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a78:	e00b      	b.n	8005a92 <HAL_TIM_IC_Start_IT+0xca>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d104      	bne.n	8005a8a <HAL_TIM_IC_Start_IT+0xc2>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a88:	e003      	b.n	8005a92 <HAL_TIM_IC_Start_IT+0xca>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d104      	bne.n	8005aa2 <HAL_TIM_IC_Start_IT+0xda>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aa0:	e013      	b.n	8005aca <HAL_TIM_IC_Start_IT+0x102>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d104      	bne.n	8005ab2 <HAL_TIM_IC_Start_IT+0xea>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ab0:	e00b      	b.n	8005aca <HAL_TIM_IC_Start_IT+0x102>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d104      	bne.n	8005ac2 <HAL_TIM_IC_Start_IT+0xfa>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac0:	e003      	b.n	8005aca <HAL_TIM_IC_Start_IT+0x102>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b0c      	cmp	r3, #12
 8005ace:	d841      	bhi.n	8005b54 <HAL_TIM_IC_Start_IT+0x18c>
 8005ad0:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <HAL_TIM_IC_Start_IT+0x110>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005b0d 	.word	0x08005b0d
 8005adc:	08005b55 	.word	0x08005b55
 8005ae0:	08005b55 	.word	0x08005b55
 8005ae4:	08005b55 	.word	0x08005b55
 8005ae8:	08005b1f 	.word	0x08005b1f
 8005aec:	08005b55 	.word	0x08005b55
 8005af0:	08005b55 	.word	0x08005b55
 8005af4:	08005b55 	.word	0x08005b55
 8005af8:	08005b31 	.word	0x08005b31
 8005afc:	08005b55 	.word	0x08005b55
 8005b00:	08005b55 	.word	0x08005b55
 8005b04:	08005b55 	.word	0x08005b55
 8005b08:	08005b43 	.word	0x08005b43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0202 	orr.w	r2, r2, #2
 8005b1a:	60da      	str	r2, [r3, #12]
      break;
 8005b1c:	e01d      	b.n	8005b5a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68da      	ldr	r2, [r3, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0204 	orr.w	r2, r2, #4
 8005b2c:	60da      	str	r2, [r3, #12]
      break;
 8005b2e:	e014      	b.n	8005b5a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0208 	orr.w	r2, r2, #8
 8005b3e:	60da      	str	r2, [r3, #12]
      break;
 8005b40:	e00b      	b.n	8005b5a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0210 	orr.w	r2, r2, #16
 8005b50:	60da      	str	r2, [r3, #12]
      break;
 8005b52:	e002      	b.n	8005b5a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
      break;
 8005b58:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d148      	bne.n	8005bf2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2201      	movs	r2, #1
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fbeb 	bl	8006344 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a22      	ldr	r2, [pc, #136]	; (8005bfc <HAL_TIM_IC_Start_IT+0x234>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d022      	beq.n	8005bbe <HAL_TIM_IC_Start_IT+0x1f6>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b80:	d01d      	beq.n	8005bbe <HAL_TIM_IC_Start_IT+0x1f6>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <HAL_TIM_IC_Start_IT+0x238>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d018      	beq.n	8005bbe <HAL_TIM_IC_Start_IT+0x1f6>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a1c      	ldr	r2, [pc, #112]	; (8005c04 <HAL_TIM_IC_Start_IT+0x23c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d013      	beq.n	8005bbe <HAL_TIM_IC_Start_IT+0x1f6>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <HAL_TIM_IC_Start_IT+0x240>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00e      	beq.n	8005bbe <HAL_TIM_IC_Start_IT+0x1f6>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a19      	ldr	r2, [pc, #100]	; (8005c0c <HAL_TIM_IC_Start_IT+0x244>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d009      	beq.n	8005bbe <HAL_TIM_IC_Start_IT+0x1f6>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a18      	ldr	r2, [pc, #96]	; (8005c10 <HAL_TIM_IC_Start_IT+0x248>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d004      	beq.n	8005bbe <HAL_TIM_IC_Start_IT+0x1f6>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a16      	ldr	r2, [pc, #88]	; (8005c14 <HAL_TIM_IC_Start_IT+0x24c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d111      	bne.n	8005be2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2b06      	cmp	r3, #6
 8005bce:	d010      	beq.n	8005bf2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be0:	e007      	b.n	8005bf2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0201 	orr.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	40000400 	.word	0x40000400
 8005c04:	40000800 	.word	0x40000800
 8005c08:	40000c00 	.word	0x40000c00
 8005c0c:	40010400 	.word	0x40010400
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40001800 	.word	0x40001800

08005c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d122      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d11b      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f06f 0202 	mvn.w	r2, #2
 8005c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7fb f87a 	bl	8000d54 <HAL_TIM_IC_CaptureCallback>
 8005c60:	e005      	b.n	8005c6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f986 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f98d 	bl	8005f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	f003 0304 	and.w	r3, r3, #4
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d122      	bne.n	8005cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d11b      	bne.n	8005cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f06f 0204 	mvn.w	r2, #4
 8005c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7fb f850 	bl	8000d54 <HAL_TIM_IC_CaptureCallback>
 8005cb4:	e005      	b.n	8005cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f95c 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f963 	bl	8005f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b08      	cmp	r3, #8
 8005cd4:	d122      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d11b      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f06f 0208 	mvn.w	r2, #8
 8005cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fb f826 	bl	8000d54 <HAL_TIM_IC_CaptureCallback>
 8005d08:	e005      	b.n	8005d16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f932 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f939 	bl	8005f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 0310 	and.w	r3, r3, #16
 8005d26:	2b10      	cmp	r3, #16
 8005d28:	d122      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d11b      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0210 	mvn.w	r2, #16
 8005d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2208      	movs	r2, #8
 8005d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7fa fffc 	bl	8000d54 <HAL_TIM_IC_CaptureCallback>
 8005d5c:	e005      	b.n	8005d6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f908 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f90f 	bl	8005f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d10e      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d107      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0201 	mvn.w	r2, #1
 8005d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f8e2 	bl	8005f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da6:	2b80      	cmp	r3, #128	; 0x80
 8005da8:	d10e      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db4:	2b80      	cmp	r3, #128	; 0x80
 8005db6:	d107      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fb6a 	bl	800649c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd2:	2b40      	cmp	r3, #64	; 0x40
 8005dd4:	d10e      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de0:	2b40      	cmp	r3, #64	; 0x40
 8005de2:	d107      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f8d4 	bl	8005f9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	d10e      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	d107      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0220 	mvn.w	r2, #32
 8005e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fb34 	bl	8006488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005e42:	2302      	movs	r3, #2
 8005e44:	e088      	b.n	8005f58 <HAL_TIM_IC_ConfigChannel+0x130>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d11b      	bne.n	8005e8c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6818      	ldr	r0, [r3, #0]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	6819      	ldr	r1, [r3, #0]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f000 f944 	bl	80060f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 020c 	bic.w	r2, r2, #12
 8005e76:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6999      	ldr	r1, [r3, #24]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	619a      	str	r2, [r3, #24]
 8005e8a:	e060      	b.n	8005f4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d11c      	bne.n	8005ecc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	6819      	ldr	r1, [r3, #0]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f000 f999 	bl	80061d8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	699a      	ldr	r2, [r3, #24]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005eb4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6999      	ldr	r1, [r3, #24]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	021a      	lsls	r2, r3, #8
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	619a      	str	r2, [r3, #24]
 8005eca:	e040      	b.n	8005f4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b08      	cmp	r3, #8
 8005ed0:	d11b      	bne.n	8005f0a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	6819      	ldr	r1, [r3, #0]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f000 f9b6 	bl	8006252 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69da      	ldr	r2, [r3, #28]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 020c 	bic.w	r2, r2, #12
 8005ef4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	69d9      	ldr	r1, [r3, #28]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	61da      	str	r2, [r3, #28]
 8005f08:	e021      	b.n	8005f4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b0c      	cmp	r3, #12
 8005f0e:	d11c      	bne.n	8005f4a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	6819      	ldr	r1, [r3, #0]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f000 f9d3 	bl	80062ca <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	69da      	ldr	r2, [r3, #28]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f32:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69d9      	ldr	r1, [r3, #28]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	021a      	lsls	r2, r3, #8
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	61da      	str	r2, [r3, #28]
 8005f48:	e001      	b.n	8005f4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a40      	ldr	r2, [pc, #256]	; (80060c4 <TIM_Base_SetConfig+0x114>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d013      	beq.n	8005ff0 <TIM_Base_SetConfig+0x40>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fce:	d00f      	beq.n	8005ff0 <TIM_Base_SetConfig+0x40>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a3d      	ldr	r2, [pc, #244]	; (80060c8 <TIM_Base_SetConfig+0x118>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00b      	beq.n	8005ff0 <TIM_Base_SetConfig+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a3c      	ldr	r2, [pc, #240]	; (80060cc <TIM_Base_SetConfig+0x11c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d007      	beq.n	8005ff0 <TIM_Base_SetConfig+0x40>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a3b      	ldr	r2, [pc, #236]	; (80060d0 <TIM_Base_SetConfig+0x120>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d003      	beq.n	8005ff0 <TIM_Base_SetConfig+0x40>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a3a      	ldr	r2, [pc, #232]	; (80060d4 <TIM_Base_SetConfig+0x124>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d108      	bne.n	8006002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a2f      	ldr	r2, [pc, #188]	; (80060c4 <TIM_Base_SetConfig+0x114>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d02b      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006010:	d027      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a2c      	ldr	r2, [pc, #176]	; (80060c8 <TIM_Base_SetConfig+0x118>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d023      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a2b      	ldr	r2, [pc, #172]	; (80060cc <TIM_Base_SetConfig+0x11c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d01f      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a2a      	ldr	r2, [pc, #168]	; (80060d0 <TIM_Base_SetConfig+0x120>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d01b      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a29      	ldr	r2, [pc, #164]	; (80060d4 <TIM_Base_SetConfig+0x124>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d017      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a28      	ldr	r2, [pc, #160]	; (80060d8 <TIM_Base_SetConfig+0x128>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d013      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a27      	ldr	r2, [pc, #156]	; (80060dc <TIM_Base_SetConfig+0x12c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00f      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a26      	ldr	r2, [pc, #152]	; (80060e0 <TIM_Base_SetConfig+0x130>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00b      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a25      	ldr	r2, [pc, #148]	; (80060e4 <TIM_Base_SetConfig+0x134>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d007      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a24      	ldr	r2, [pc, #144]	; (80060e8 <TIM_Base_SetConfig+0x138>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d003      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a23      	ldr	r2, [pc, #140]	; (80060ec <TIM_Base_SetConfig+0x13c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d108      	bne.n	8006074 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a0a      	ldr	r2, [pc, #40]	; (80060c4 <TIM_Base_SetConfig+0x114>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_Base_SetConfig+0xf8>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a0c      	ldr	r2, [pc, #48]	; (80060d4 <TIM_Base_SetConfig+0x124>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d103      	bne.n	80060b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	615a      	str	r2, [r3, #20]
}
 80060b6:	bf00      	nop
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40010000 	.word	0x40010000
 80060c8:	40000400 	.word	0x40000400
 80060cc:	40000800 	.word	0x40000800
 80060d0:	40000c00 	.word	0x40000c00
 80060d4:	40010400 	.word	0x40010400
 80060d8:	40014000 	.word	0x40014000
 80060dc:	40014400 	.word	0x40014400
 80060e0:	40014800 	.word	0x40014800
 80060e4:	40001800 	.word	0x40001800
 80060e8:	40001c00 	.word	0x40001c00
 80060ec:	40002000 	.word	0x40002000

080060f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	f023 0201 	bic.w	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4a28      	ldr	r2, [pc, #160]	; (80061bc <TIM_TI1_SetConfig+0xcc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d01b      	beq.n	8006156 <TIM_TI1_SetConfig+0x66>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006124:	d017      	beq.n	8006156 <TIM_TI1_SetConfig+0x66>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4a25      	ldr	r2, [pc, #148]	; (80061c0 <TIM_TI1_SetConfig+0xd0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d013      	beq.n	8006156 <TIM_TI1_SetConfig+0x66>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4a24      	ldr	r2, [pc, #144]	; (80061c4 <TIM_TI1_SetConfig+0xd4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00f      	beq.n	8006156 <TIM_TI1_SetConfig+0x66>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4a23      	ldr	r2, [pc, #140]	; (80061c8 <TIM_TI1_SetConfig+0xd8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00b      	beq.n	8006156 <TIM_TI1_SetConfig+0x66>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4a22      	ldr	r2, [pc, #136]	; (80061cc <TIM_TI1_SetConfig+0xdc>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d007      	beq.n	8006156 <TIM_TI1_SetConfig+0x66>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4a21      	ldr	r2, [pc, #132]	; (80061d0 <TIM_TI1_SetConfig+0xe0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d003      	beq.n	8006156 <TIM_TI1_SetConfig+0x66>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4a20      	ldr	r2, [pc, #128]	; (80061d4 <TIM_TI1_SetConfig+0xe4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d101      	bne.n	800615a <TIM_TI1_SetConfig+0x6a>
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <TIM_TI1_SetConfig+0x6c>
 800615a:	2300      	movs	r3, #0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d008      	beq.n	8006172 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f023 0303 	bic.w	r3, r3, #3
 8006166:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	e003      	b.n	800617a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f043 0301 	orr.w	r3, r3, #1
 8006178:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006180:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	b2db      	uxtb	r3, r3
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f023 030a 	bic.w	r3, r3, #10
 8006194:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f003 030a 	and.w	r3, r3, #10
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	621a      	str	r2, [r3, #32]
}
 80061ae:	bf00      	nop
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	40010000 	.word	0x40010000
 80061c0:	40000400 	.word	0x40000400
 80061c4:	40000800 	.word	0x40000800
 80061c8:	40000c00 	.word	0x40000c00
 80061cc:	40010400 	.word	0x40010400
 80061d0:	40014000 	.word	0x40014000
 80061d4:	40001800 	.word	0x40001800

080061d8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	f023 0210 	bic.w	r2, r3, #16
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006204:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	021b      	lsls	r3, r3, #8
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006216:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	031b      	lsls	r3, r3, #12
 800621c:	b29b      	uxth	r3, r3
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	4313      	orrs	r3, r2
 8006222:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800622a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	621a      	str	r2, [r3, #32]
}
 8006246:	bf00      	nop
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006252:	b480      	push	{r7}
 8006254:	b087      	sub	sp, #28
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	607a      	str	r2, [r7, #4]
 800625e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f023 0303 	bic.w	r3, r3, #3
 800627e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4313      	orrs	r3, r2
 8006286:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800628e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	b2db      	uxtb	r3, r3
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	4313      	orrs	r3, r2
 800629a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80062a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	021b      	lsls	r3, r3, #8
 80062a8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	621a      	str	r2, [r3, #32]
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b087      	sub	sp, #28
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006308:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	031b      	lsls	r3, r3, #12
 800630e:	b29b      	uxth	r3, r3
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800631c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	031b      	lsls	r3, r3, #12
 8006322:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	621a      	str	r2, [r3, #32]
}
 8006338:	bf00      	nop
 800633a:	371c      	adds	r7, #28
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f003 031f 	and.w	r3, r3, #31
 8006356:	2201      	movs	r2, #1
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6a1a      	ldr	r2, [r3, #32]
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	43db      	mvns	r3, r3
 8006366:	401a      	ands	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a1a      	ldr	r2, [r3, #32]
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f003 031f 	and.w	r3, r3, #31
 8006376:	6879      	ldr	r1, [r7, #4]
 8006378:	fa01 f303 	lsl.w	r3, r1, r3
 800637c:	431a      	orrs	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	621a      	str	r2, [r3, #32]
}
 8006382:	bf00      	nop
 8006384:	371c      	adds	r7, #28
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
	...

08006390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e05a      	b.n	800645e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a21      	ldr	r2, [pc, #132]	; (800646c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d022      	beq.n	8006432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f4:	d01d      	beq.n	8006432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a1d      	ldr	r2, [pc, #116]	; (8006470 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d018      	beq.n	8006432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a1b      	ldr	r2, [pc, #108]	; (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d013      	beq.n	8006432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a1a      	ldr	r2, [pc, #104]	; (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d00e      	beq.n	8006432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a18      	ldr	r2, [pc, #96]	; (800647c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d009      	beq.n	8006432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a17      	ldr	r2, [pc, #92]	; (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d004      	beq.n	8006432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a15      	ldr	r2, [pc, #84]	; (8006484 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d10c      	bne.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	4313      	orrs	r3, r2
 8006442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	40010000 	.word	0x40010000
 8006470:	40000400 	.word	0x40000400
 8006474:	40000800 	.word	0x40000800
 8006478:	40000c00 	.word	0x40000c00
 800647c:	40010400 	.word	0x40010400
 8006480:	40014000 	.word	0x40014000
 8006484:	40001800 	.word	0x40001800

08006488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e03f      	b.n	8006542 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fb fa7c 	bl	80019d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2224      	movs	r2, #36	; 0x24
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 ff65 	bl	80073c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	695a      	ldr	r2, [r3, #20]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b08a      	sub	sp, #40	; 0x28
 800654e:	af02      	add	r7, sp, #8
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	603b      	str	r3, [r7, #0]
 8006556:	4613      	mov	r3, r2
 8006558:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b20      	cmp	r3, #32
 8006568:	d17c      	bne.n	8006664 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <HAL_UART_Transmit+0x2c>
 8006570:	88fb      	ldrh	r3, [r7, #6]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e075      	b.n	8006666 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006580:	2b01      	cmp	r3, #1
 8006582:	d101      	bne.n	8006588 <HAL_UART_Transmit+0x3e>
 8006584:	2302      	movs	r3, #2
 8006586:	e06e      	b.n	8006666 <HAL_UART_Transmit+0x11c>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2221      	movs	r2, #33	; 0x21
 800659a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800659e:	f7fb fc97 	bl	8001ed0 <HAL_GetTick>
 80065a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	88fa      	ldrh	r2, [r7, #6]
 80065a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	88fa      	ldrh	r2, [r7, #6]
 80065ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b8:	d108      	bne.n	80065cc <HAL_UART_Transmit+0x82>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d104      	bne.n	80065cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	e003      	b.n	80065d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80065dc:	e02a      	b.n	8006634 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2200      	movs	r2, #0
 80065e6:	2180      	movs	r1, #128	; 0x80
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fc21 	bl	8006e30 <UART_WaitOnFlagUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e036      	b.n	8006666 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10b      	bne.n	8006616 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800660c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	3302      	adds	r3, #2
 8006612:	61bb      	str	r3, [r7, #24]
 8006614:	e007      	b.n	8006626 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	781a      	ldrb	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	3301      	adds	r3, #1
 8006624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800662a:	b29b      	uxth	r3, r3
 800662c:	3b01      	subs	r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1cf      	bne.n	80065de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2200      	movs	r2, #0
 8006646:	2140      	movs	r1, #64	; 0x40
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 fbf1 	bl	8006e30 <UART_WaitOnFlagUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e006      	b.n	8006666 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	e000      	b.n	8006666 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006664:	2302      	movs	r3, #2
  }
}
 8006666:	4618      	mov	r0, r3
 8006668:	3720      	adds	r7, #32
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b084      	sub	sp, #16
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	4613      	mov	r3, r2
 800667a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b20      	cmp	r3, #32
 8006686:	d11d      	bne.n	80066c4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <HAL_UART_Receive_DMA+0x26>
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e016      	b.n	80066c6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d101      	bne.n	80066a6 <HAL_UART_Receive_DMA+0x38>
 80066a2:	2302      	movs	r3, #2
 80066a4:	e00f      	b.n	80066c6 <HAL_UART_Receive_DMA+0x58>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80066b4:	88fb      	ldrh	r3, [r7, #6]
 80066b6:	461a      	mov	r2, r3
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 fc26 	bl	8006f0c <UART_Start_Receive_DMA>
 80066c0:	4603      	mov	r3, r0
 80066c2:	e000      	b.n	80066c6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80066c4:	2302      	movs	r3, #2
  }
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b0ba      	sub	sp, #232	; 0xe8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800670e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10f      	bne.n	8006736 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b00      	cmp	r3, #0
 8006720:	d009      	beq.n	8006736 <HAL_UART_IRQHandler+0x66>
 8006722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fd8d 	bl	800724e <UART_Receive_IT>
      return;
 8006734:	e256      	b.n	8006be4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 80de 	beq.w	80068fc <HAL_UART_IRQHandler+0x22c>
 8006740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d106      	bne.n	800675a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800674c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006750:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 80d1 	beq.w	80068fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800675a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00b      	beq.n	800677e <HAL_UART_IRQHandler+0xae>
 8006766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800676a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676e:	2b00      	cmp	r3, #0
 8006770:	d005      	beq.n	800677e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	f043 0201 	orr.w	r2, r3, #1
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800677e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006782:	f003 0304 	and.w	r3, r3, #4
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00b      	beq.n	80067a2 <HAL_UART_IRQHandler+0xd2>
 800678a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d005      	beq.n	80067a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	f043 0202 	orr.w	r2, r3, #2
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00b      	beq.n	80067c6 <HAL_UART_IRQHandler+0xf6>
 80067ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d005      	beq.n	80067c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	f043 0204 	orr.w	r2, r3, #4
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80067c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ca:	f003 0308 	and.w	r3, r3, #8
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d011      	beq.n	80067f6 <HAL_UART_IRQHandler+0x126>
 80067d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d105      	bne.n	80067ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80067de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ee:	f043 0208 	orr.w	r2, r3, #8
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 81ed 	beq.w	8006bda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006804:	f003 0320 	and.w	r3, r3, #32
 8006808:	2b00      	cmp	r3, #0
 800680a:	d008      	beq.n	800681e <HAL_UART_IRQHandler+0x14e>
 800680c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fd18 	bl	800724e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006828:	2b40      	cmp	r3, #64	; 0x40
 800682a:	bf0c      	ite	eq
 800682c:	2301      	moveq	r3, #1
 800682e:	2300      	movne	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	f003 0308 	and.w	r3, r3, #8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d103      	bne.n	800684a <HAL_UART_IRQHandler+0x17a>
 8006842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006846:	2b00      	cmp	r3, #0
 8006848:	d04f      	beq.n	80068ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fc20 	bl	8007090 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685a:	2b40      	cmp	r3, #64	; 0x40
 800685c:	d141      	bne.n	80068e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3314      	adds	r3, #20
 8006864:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006874:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800687c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3314      	adds	r3, #20
 8006886:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800688a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800688e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006896:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1d9      	bne.n	800685e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d013      	beq.n	80068da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b6:	4a7d      	ldr	r2, [pc, #500]	; (8006aac <HAL_UART_IRQHandler+0x3dc>)
 80068b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fb fdbe 	bl	8002440 <HAL_DMA_Abort_IT>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d016      	beq.n	80068f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068d4:	4610      	mov	r0, r2
 80068d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d8:	e00e      	b.n	80068f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f99a 	bl	8006c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e0:	e00a      	b.n	80068f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f996 	bl	8006c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e8:	e006      	b.n	80068f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f992 	bl	8006c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80068f6:	e170      	b.n	8006bda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f8:	bf00      	nop
    return;
 80068fa:	e16e      	b.n	8006bda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006900:	2b01      	cmp	r3, #1
 8006902:	f040 814a 	bne.w	8006b9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690a:	f003 0310 	and.w	r3, r3, #16
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 8143 	beq.w	8006b9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006918:	f003 0310 	and.w	r3, r3, #16
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 813c 	beq.w	8006b9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006922:	2300      	movs	r3, #0
 8006924:	60bb      	str	r3, [r7, #8]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60bb      	str	r3, [r7, #8]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	60bb      	str	r3, [r7, #8]
 8006936:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006942:	2b40      	cmp	r3, #64	; 0x40
 8006944:	f040 80b4 	bne.w	8006ab0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006954:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 8140 	beq.w	8006bde <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006966:	429a      	cmp	r2, r3
 8006968:	f080 8139 	bcs.w	8006bde <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006972:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800697e:	f000 8088 	beq.w	8006a92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	330c      	adds	r3, #12
 8006988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006998:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800699c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	330c      	adds	r3, #12
 80069aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80069ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1d9      	bne.n	8006982 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3314      	adds	r3, #20
 80069d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069e0:	f023 0301 	bic.w	r3, r3, #1
 80069e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3314      	adds	r3, #20
 80069ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e1      	bne.n	80069ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3314      	adds	r3, #20
 8006a10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3314      	adds	r3, #20
 8006a2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e3      	bne.n	8006a0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	330c      	adds	r3, #12
 8006a56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a62:	f023 0310 	bic.w	r3, r3, #16
 8006a66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	330c      	adds	r3, #12
 8006a70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006a74:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e3      	bne.n	8006a50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fb fc67 	bl	8002360 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f8c0 	bl	8006c28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006aa8:	e099      	b.n	8006bde <HAL_UART_IRQHandler+0x50e>
 8006aaa:	bf00      	nop
 8006aac:	08007157 	.word	0x08007157
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 808b 	beq.w	8006be2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006acc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 8086 	beq.w	8006be2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	330c      	adds	r3, #12
 8006adc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	330c      	adds	r3, #12
 8006af6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006afa:	647a      	str	r2, [r7, #68]	; 0x44
 8006afc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1e3      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3314      	adds	r3, #20
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	623b      	str	r3, [r7, #32]
   return(result);
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	f023 0301 	bic.w	r3, r3, #1
 8006b24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3314      	adds	r3, #20
 8006b2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b32:	633a      	str	r2, [r7, #48]	; 0x30
 8006b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e3      	bne.n	8006b0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	330c      	adds	r3, #12
 8006b5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	e853 3f00 	ldrex	r3, [r3]
 8006b62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0310 	bic.w	r3, r3, #16
 8006b6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	330c      	adds	r3, #12
 8006b74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006b78:	61fa      	str	r2, [r7, #28]
 8006b7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	69b9      	ldr	r1, [r7, #24]
 8006b7e:	69fa      	ldr	r2, [r7, #28]
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	617b      	str	r3, [r7, #20]
   return(result);
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e3      	bne.n	8006b54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b90:	4619      	mov	r1, r3
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f848 	bl	8006c28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b98:	e023      	b.n	8006be2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d009      	beq.n	8006bba <HAL_UART_IRQHandler+0x4ea>
 8006ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fae3 	bl	800717e <UART_Transmit_IT>
    return;
 8006bb8:	e014      	b.n	8006be4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00e      	beq.n	8006be4 <HAL_UART_IRQHandler+0x514>
 8006bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d008      	beq.n	8006be4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fb23 	bl	800721e <UART_EndTransmit_IT>
    return;
 8006bd8:	e004      	b.n	8006be4 <HAL_UART_IRQHandler+0x514>
    return;
 8006bda:	bf00      	nop
 8006bdc:	e002      	b.n	8006be4 <HAL_UART_IRQHandler+0x514>
      return;
 8006bde:	bf00      	nop
 8006be0:	e000      	b.n	8006be4 <HAL_UART_IRQHandler+0x514>
      return;
 8006be2:	bf00      	nop
  }
}
 8006be4:	37e8      	adds	r7, #232	; 0xe8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop

08006bec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b09c      	sub	sp, #112	; 0x70
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d172      	bne.n	8006d42 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c5e:	2200      	movs	r2, #0
 8006c60:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	330c      	adds	r3, #12
 8006c68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6c:	e853 3f00 	ldrex	r3, [r3]
 8006c70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c78:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	330c      	adds	r3, #12
 8006c80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c82:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c84:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e5      	bne.n	8006c62 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3314      	adds	r3, #20
 8006c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	e853 3f00 	ldrex	r3, [r3]
 8006ca4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca8:	f023 0301 	bic.w	r3, r3, #1
 8006cac:	667b      	str	r3, [r7, #100]	; 0x64
 8006cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3314      	adds	r3, #20
 8006cb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006cb6:	647a      	str	r2, [r7, #68]	; 0x44
 8006cb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cbe:	e841 2300 	strex	r3, r2, [r1]
 8006cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1e5      	bne.n	8006c96 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3314      	adds	r3, #20
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ce0:	663b      	str	r3, [r7, #96]	; 0x60
 8006ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3314      	adds	r3, #20
 8006ce8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006cea:	633a      	str	r2, [r7, #48]	; 0x30
 8006cec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e5      	bne.n	8006cca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d00:	2220      	movs	r2, #32
 8006d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d119      	bne.n	8006d42 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	330c      	adds	r3, #12
 8006d14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	e853 3f00 	ldrex	r3, [r3]
 8006d1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f023 0310 	bic.w	r3, r3, #16
 8006d24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	330c      	adds	r3, #12
 8006d2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d2e:	61fa      	str	r2, [r7, #28]
 8006d30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d32:	69b9      	ldr	r1, [r7, #24]
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	e841 2300 	strex	r3, r2, [r1]
 8006d3a:	617b      	str	r3, [r7, #20]
   return(result);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1e5      	bne.n	8006d0e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d106      	bne.n	8006d58 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d52:	f7ff ff69 	bl	8006c28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d56:	e002      	b.n	8006d5e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006d58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d5a:	f7fa f809 	bl	8000d70 <HAL_UART_RxCpltCallback>
}
 8006d5e:	bf00      	nop
 8006d60:	3770      	adds	r7, #112	; 0x70
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b084      	sub	sp, #16
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d108      	bne.n	8006d8e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d80:	085b      	lsrs	r3, r3, #1
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	4619      	mov	r1, r3
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff ff4e 	bl	8006c28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d8c:	e002      	b.n	8006d94 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f7ff ff36 	bl	8006c00 <HAL_UART_RxHalfCpltCallback>
}
 8006d94:	bf00      	nop
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dac:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db8:	2b80      	cmp	r3, #128	; 0x80
 8006dba:	bf0c      	ite	eq
 8006dbc:	2301      	moveq	r3, #1
 8006dbe:	2300      	movne	r3, #0
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b21      	cmp	r3, #33	; 0x21
 8006dce:	d108      	bne.n	8006de2 <UART_DMAError+0x46>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d005      	beq.n	8006de2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006ddc:	68b8      	ldr	r0, [r7, #8]
 8006dde:	f000 f92f 	bl	8007040 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dec:	2b40      	cmp	r3, #64	; 0x40
 8006dee:	bf0c      	ite	eq
 8006df0:	2301      	moveq	r3, #1
 8006df2:	2300      	movne	r3, #0
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b22      	cmp	r3, #34	; 0x22
 8006e02:	d108      	bne.n	8006e16 <UART_DMAError+0x7a>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006e10:	68b8      	ldr	r0, [r7, #8]
 8006e12:	f000 f93d 	bl	8007090 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	f043 0210 	orr.w	r2, r3, #16
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e22:	68b8      	ldr	r0, [r7, #8]
 8006e24:	f7ff fef6 	bl	8006c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e28:	bf00      	nop
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b090      	sub	sp, #64	; 0x40
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	603b      	str	r3, [r7, #0]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e40:	e050      	b.n	8006ee4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e48:	d04c      	beq.n	8006ee4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d007      	beq.n	8006e60 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e50:	f7fb f83e 	bl	8001ed0 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d241      	bcs.n	8006ee4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	330c      	adds	r3, #12
 8006e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e80:	637a      	str	r2, [r7, #52]	; 0x34
 8006e82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e5      	bne.n	8006e60 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3314      	adds	r3, #20
 8006e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	e853 3f00 	ldrex	r3, [r3]
 8006ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f023 0301 	bic.w	r3, r3, #1
 8006eaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3314      	adds	r3, #20
 8006eb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eb4:	623a      	str	r2, [r7, #32]
 8006eb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	69f9      	ldr	r1, [r7, #28]
 8006eba:	6a3a      	ldr	r2, [r7, #32]
 8006ebc:	e841 2300 	strex	r3, r2, [r1]
 8006ec0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1e5      	bne.n	8006e94 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e00f      	b.n	8006f04 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	4013      	ands	r3, r2
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	bf0c      	ite	eq
 8006ef4:	2301      	moveq	r3, #1
 8006ef6:	2300      	movne	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	461a      	mov	r2, r3
 8006efc:	79fb      	ldrb	r3, [r7, #7]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d09f      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3740      	adds	r7, #64	; 0x40
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b098      	sub	sp, #96	; 0x60
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	4613      	mov	r3, r2
 8006f18:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	88fa      	ldrh	r2, [r7, #6]
 8006f24:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2222      	movs	r2, #34	; 0x22
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f38:	4a3e      	ldr	r2, [pc, #248]	; (8007034 <UART_Start_Receive_DMA+0x128>)
 8006f3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f40:	4a3d      	ldr	r2, [pc, #244]	; (8007038 <UART_Start_Receive_DMA+0x12c>)
 8006f42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	4a3c      	ldr	r2, [pc, #240]	; (800703c <UART_Start_Receive_DMA+0x130>)
 8006f4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f50:	2200      	movs	r2, #0
 8006f52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006f54:	f107 0308 	add.w	r3, r7, #8
 8006f58:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3304      	adds	r3, #4
 8006f64:	4619      	mov	r1, r3
 8006f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	88fb      	ldrh	r3, [r7, #6]
 8006f6c:	f7fb f9a0 	bl	80022b0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006f70:	2300      	movs	r3, #0
 8006f72:	613b      	str	r3, [r7, #16]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	613b      	str	r3, [r7, #16]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	613b      	str	r3, [r7, #16]
 8006f84:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	330c      	adds	r3, #12
 8006f94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	330c      	adds	r3, #12
 8006fac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fae:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006fb0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e5      	bne.n	8006f8e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3314      	adds	r3, #20
 8006fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fcc:	e853 3f00 	ldrex	r3, [r3]
 8006fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	f043 0301 	orr.w	r3, r3, #1
 8006fd8:	657b      	str	r3, [r7, #84]	; 0x54
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3314      	adds	r3, #20
 8006fe0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fe2:	63ba      	str	r2, [r7, #56]	; 0x38
 8006fe4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fea:	e841 2300 	strex	r3, r2, [r1]
 8006fee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e5      	bne.n	8006fc2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3314      	adds	r3, #20
 8006ffc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	e853 3f00 	ldrex	r3, [r3]
 8007004:	617b      	str	r3, [r7, #20]
   return(result);
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800700c:	653b      	str	r3, [r7, #80]	; 0x50
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3314      	adds	r3, #20
 8007014:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007016:	627a      	str	r2, [r7, #36]	; 0x24
 8007018:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701a:	6a39      	ldr	r1, [r7, #32]
 800701c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	61fb      	str	r3, [r7, #28]
   return(result);
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1e5      	bne.n	8006ff6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3760      	adds	r7, #96	; 0x60
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	08006c41 	.word	0x08006c41
 8007038:	08006d67 	.word	0x08006d67
 800703c:	08006d9d 	.word	0x08006d9d

08007040 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007040:	b480      	push	{r7}
 8007042:	b089      	sub	sp, #36	; 0x24
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	330c      	adds	r3, #12
 800704e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	e853 3f00 	ldrex	r3, [r3]
 8007056:	60bb      	str	r3, [r7, #8]
   return(result);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800705e:	61fb      	str	r3, [r7, #28]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	330c      	adds	r3, #12
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	61ba      	str	r2, [r7, #24]
 800706a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706c:	6979      	ldr	r1, [r7, #20]
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	e841 2300 	strex	r3, r2, [r1]
 8007074:	613b      	str	r3, [r7, #16]
   return(result);
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1e5      	bne.n	8007048 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2220      	movs	r2, #32
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007084:	bf00      	nop
 8007086:	3724      	adds	r7, #36	; 0x24
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007090:	b480      	push	{r7}
 8007092:	b095      	sub	sp, #84	; 0x54
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	330c      	adds	r3, #12
 800709e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a2:	e853 3f00 	ldrex	r3, [r3]
 80070a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	330c      	adds	r3, #12
 80070b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070b8:	643a      	str	r2, [r7, #64]	; 0x40
 80070ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e5      	bne.n	8007098 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	3314      	adds	r3, #20
 80070d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	61fb      	str	r3, [r7, #28]
   return(result);
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	f023 0301 	bic.w	r3, r3, #1
 80070e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3314      	adds	r3, #20
 80070ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e5      	bne.n	80070cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007104:	2b01      	cmp	r3, #1
 8007106:	d119      	bne.n	800713c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	330c      	adds	r3, #12
 800710e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	60bb      	str	r3, [r7, #8]
   return(result);
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f023 0310 	bic.w	r3, r3, #16
 800711e:	647b      	str	r3, [r7, #68]	; 0x44
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	330c      	adds	r3, #12
 8007126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007128:	61ba      	str	r2, [r7, #24]
 800712a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	6979      	ldr	r1, [r7, #20]
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	613b      	str	r3, [r7, #16]
   return(result);
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e5      	bne.n	8007108 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	631a      	str	r2, [r3, #48]	; 0x30
}
 800714a:	bf00      	nop
 800714c:	3754      	adds	r7, #84	; 0x54
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007162:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f7ff fd4f 	bl	8006c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007176:	bf00      	nop
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800717e:	b480      	push	{r7}
 8007180:	b085      	sub	sp, #20
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b21      	cmp	r3, #33	; 0x21
 8007190:	d13e      	bne.n	8007210 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800719a:	d114      	bne.n	80071c6 <UART_Transmit_IT+0x48>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d110      	bne.n	80071c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	1c9a      	adds	r2, r3, #2
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	621a      	str	r2, [r3, #32]
 80071c4:	e008      	b.n	80071d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	1c59      	adds	r1, r3, #1
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6211      	str	r1, [r2, #32]
 80071d0:	781a      	ldrb	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071dc:	b29b      	uxth	r3, r3
 80071de:	3b01      	subs	r3, #1
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	4619      	mov	r1, r3
 80071e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10f      	bne.n	800720c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68da      	ldr	r2, [r3, #12]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800720a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	e000      	b.n	8007212 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007210:	2302      	movs	r3, #2
  }
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007234:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2220      	movs	r2, #32
 800723a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7ff fcd4 	bl	8006bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b08c      	sub	sp, #48	; 0x30
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b22      	cmp	r3, #34	; 0x22
 8007260:	f040 80ab 	bne.w	80073ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726c:	d117      	bne.n	800729e <UART_Receive_IT+0x50>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d113      	bne.n	800729e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007276:	2300      	movs	r3, #0
 8007278:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	b29b      	uxth	r3, r3
 8007288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728c:	b29a      	uxth	r2, r3
 800728e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007290:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007296:	1c9a      	adds	r2, r3, #2
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	629a      	str	r2, [r3, #40]	; 0x28
 800729c:	e026      	b.n	80072ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80072a4:	2300      	movs	r3, #0
 80072a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b0:	d007      	beq.n	80072c2 <UART_Receive_IT+0x74>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10a      	bne.n	80072d0 <UART_Receive_IT+0x82>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d106      	bne.n	80072d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072cc:	701a      	strb	r2, [r3, #0]
 80072ce:	e008      	b.n	80072e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	4619      	mov	r1, r3
 80072fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d15a      	bne.n	80073b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0220 	bic.w	r2, r2, #32
 800730e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68da      	ldr	r2, [r3, #12]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800731e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	695a      	ldr	r2, [r3, #20]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0201 	bic.w	r2, r2, #1
 800732e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2220      	movs	r2, #32
 8007334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733c:	2b01      	cmp	r3, #1
 800733e:	d135      	bne.n	80073ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	330c      	adds	r3, #12
 800734c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	613b      	str	r3, [r7, #16]
   return(result);
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f023 0310 	bic.w	r3, r3, #16
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	330c      	adds	r3, #12
 8007364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007366:	623a      	str	r2, [r7, #32]
 8007368:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	69f9      	ldr	r1, [r7, #28]
 800736c:	6a3a      	ldr	r2, [r7, #32]
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	61bb      	str	r3, [r7, #24]
   return(result);
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e5      	bne.n	8007346 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0310 	and.w	r3, r3, #16
 8007384:	2b10      	cmp	r3, #16
 8007386:	d10a      	bne.n	800739e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007388:	2300      	movs	r3, #0
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f7ff fc3f 	bl	8006c28 <HAL_UARTEx_RxEventCallback>
 80073aa:	e002      	b.n	80073b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7f9 fcdf 	bl	8000d70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	e002      	b.n	80073bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	e000      	b.n	80073bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80073ba:	2302      	movs	r3, #2
  }
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3730      	adds	r7, #48	; 0x30
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073c8:	b0c0      	sub	sp, #256	; 0x100
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80073dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e0:	68d9      	ldr	r1, [r3, #12]
 80073e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	ea40 0301 	orr.w	r3, r0, r1
 80073ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f2:	689a      	ldr	r2, [r3, #8]
 80073f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	431a      	orrs	r2, r3
 80073fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	431a      	orrs	r2, r3
 8007404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	4313      	orrs	r3, r2
 800740c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800741c:	f021 010c 	bic.w	r1, r1, #12
 8007420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800742a:	430b      	orrs	r3, r1
 800742c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800742e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800743a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743e:	6999      	ldr	r1, [r3, #24]
 8007440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	ea40 0301 	orr.w	r3, r0, r1
 800744a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800744c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	4b8f      	ldr	r3, [pc, #572]	; (8007690 <UART_SetConfig+0x2cc>)
 8007454:	429a      	cmp	r2, r3
 8007456:	d005      	beq.n	8007464 <UART_SetConfig+0xa0>
 8007458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	4b8d      	ldr	r3, [pc, #564]	; (8007694 <UART_SetConfig+0x2d0>)
 8007460:	429a      	cmp	r2, r3
 8007462:	d104      	bne.n	800746e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007464:	f7fb fd2c 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
 8007468:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800746c:	e003      	b.n	8007476 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800746e:	f7fb fd13 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 8007472:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007480:	f040 810c 	bne.w	800769c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007488:	2200      	movs	r2, #0
 800748a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800748e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007492:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007496:	4622      	mov	r2, r4
 8007498:	462b      	mov	r3, r5
 800749a:	1891      	adds	r1, r2, r2
 800749c:	65b9      	str	r1, [r7, #88]	; 0x58
 800749e:	415b      	adcs	r3, r3
 80074a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80074a6:	4621      	mov	r1, r4
 80074a8:	eb12 0801 	adds.w	r8, r2, r1
 80074ac:	4629      	mov	r1, r5
 80074ae:	eb43 0901 	adc.w	r9, r3, r1
 80074b2:	f04f 0200 	mov.w	r2, #0
 80074b6:	f04f 0300 	mov.w	r3, #0
 80074ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074c6:	4690      	mov	r8, r2
 80074c8:	4699      	mov	r9, r3
 80074ca:	4623      	mov	r3, r4
 80074cc:	eb18 0303 	adds.w	r3, r8, r3
 80074d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074d4:	462b      	mov	r3, r5
 80074d6:	eb49 0303 	adc.w	r3, r9, r3
 80074da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80074ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80074f2:	460b      	mov	r3, r1
 80074f4:	18db      	adds	r3, r3, r3
 80074f6:	653b      	str	r3, [r7, #80]	; 0x50
 80074f8:	4613      	mov	r3, r2
 80074fa:	eb42 0303 	adc.w	r3, r2, r3
 80074fe:	657b      	str	r3, [r7, #84]	; 0x54
 8007500:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007504:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007508:	f7f8 ff8c 	bl	8000424 <__aeabi_uldivmod>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4b61      	ldr	r3, [pc, #388]	; (8007698 <UART_SetConfig+0x2d4>)
 8007512:	fba3 2302 	umull	r2, r3, r3, r2
 8007516:	095b      	lsrs	r3, r3, #5
 8007518:	011c      	lsls	r4, r3, #4
 800751a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800751e:	2200      	movs	r2, #0
 8007520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007524:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007528:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800752c:	4642      	mov	r2, r8
 800752e:	464b      	mov	r3, r9
 8007530:	1891      	adds	r1, r2, r2
 8007532:	64b9      	str	r1, [r7, #72]	; 0x48
 8007534:	415b      	adcs	r3, r3
 8007536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007538:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800753c:	4641      	mov	r1, r8
 800753e:	eb12 0a01 	adds.w	sl, r2, r1
 8007542:	4649      	mov	r1, r9
 8007544:	eb43 0b01 	adc.w	fp, r3, r1
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007554:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007558:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800755c:	4692      	mov	sl, r2
 800755e:	469b      	mov	fp, r3
 8007560:	4643      	mov	r3, r8
 8007562:	eb1a 0303 	adds.w	r3, sl, r3
 8007566:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800756a:	464b      	mov	r3, r9
 800756c:	eb4b 0303 	adc.w	r3, fp, r3
 8007570:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007580:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007584:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007588:	460b      	mov	r3, r1
 800758a:	18db      	adds	r3, r3, r3
 800758c:	643b      	str	r3, [r7, #64]	; 0x40
 800758e:	4613      	mov	r3, r2
 8007590:	eb42 0303 	adc.w	r3, r2, r3
 8007594:	647b      	str	r3, [r7, #68]	; 0x44
 8007596:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800759a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800759e:	f7f8 ff41 	bl	8000424 <__aeabi_uldivmod>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	4611      	mov	r1, r2
 80075a8:	4b3b      	ldr	r3, [pc, #236]	; (8007698 <UART_SetConfig+0x2d4>)
 80075aa:	fba3 2301 	umull	r2, r3, r3, r1
 80075ae:	095b      	lsrs	r3, r3, #5
 80075b0:	2264      	movs	r2, #100	; 0x64
 80075b2:	fb02 f303 	mul.w	r3, r2, r3
 80075b6:	1acb      	subs	r3, r1, r3
 80075b8:	00db      	lsls	r3, r3, #3
 80075ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80075be:	4b36      	ldr	r3, [pc, #216]	; (8007698 <UART_SetConfig+0x2d4>)
 80075c0:	fba3 2302 	umull	r2, r3, r3, r2
 80075c4:	095b      	lsrs	r3, r3, #5
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075cc:	441c      	add	r4, r3
 80075ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075d2:	2200      	movs	r2, #0
 80075d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80075dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80075e0:	4642      	mov	r2, r8
 80075e2:	464b      	mov	r3, r9
 80075e4:	1891      	adds	r1, r2, r2
 80075e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80075e8:	415b      	adcs	r3, r3
 80075ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80075f0:	4641      	mov	r1, r8
 80075f2:	1851      	adds	r1, r2, r1
 80075f4:	6339      	str	r1, [r7, #48]	; 0x30
 80075f6:	4649      	mov	r1, r9
 80075f8:	414b      	adcs	r3, r1
 80075fa:	637b      	str	r3, [r7, #52]	; 0x34
 80075fc:	f04f 0200 	mov.w	r2, #0
 8007600:	f04f 0300 	mov.w	r3, #0
 8007604:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007608:	4659      	mov	r1, fp
 800760a:	00cb      	lsls	r3, r1, #3
 800760c:	4651      	mov	r1, sl
 800760e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007612:	4651      	mov	r1, sl
 8007614:	00ca      	lsls	r2, r1, #3
 8007616:	4610      	mov	r0, r2
 8007618:	4619      	mov	r1, r3
 800761a:	4603      	mov	r3, r0
 800761c:	4642      	mov	r2, r8
 800761e:	189b      	adds	r3, r3, r2
 8007620:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007624:	464b      	mov	r3, r9
 8007626:	460a      	mov	r2, r1
 8007628:	eb42 0303 	adc.w	r3, r2, r3
 800762c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800763c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007640:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007644:	460b      	mov	r3, r1
 8007646:	18db      	adds	r3, r3, r3
 8007648:	62bb      	str	r3, [r7, #40]	; 0x28
 800764a:	4613      	mov	r3, r2
 800764c:	eb42 0303 	adc.w	r3, r2, r3
 8007650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007652:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007656:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800765a:	f7f8 fee3 	bl	8000424 <__aeabi_uldivmod>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	4b0d      	ldr	r3, [pc, #52]	; (8007698 <UART_SetConfig+0x2d4>)
 8007664:	fba3 1302 	umull	r1, r3, r3, r2
 8007668:	095b      	lsrs	r3, r3, #5
 800766a:	2164      	movs	r1, #100	; 0x64
 800766c:	fb01 f303 	mul.w	r3, r1, r3
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	3332      	adds	r3, #50	; 0x32
 8007676:	4a08      	ldr	r2, [pc, #32]	; (8007698 <UART_SetConfig+0x2d4>)
 8007678:	fba2 2303 	umull	r2, r3, r2, r3
 800767c:	095b      	lsrs	r3, r3, #5
 800767e:	f003 0207 	and.w	r2, r3, #7
 8007682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4422      	add	r2, r4
 800768a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800768c:	e105      	b.n	800789a <UART_SetConfig+0x4d6>
 800768e:	bf00      	nop
 8007690:	40011000 	.word	0x40011000
 8007694:	40011400 	.word	0x40011400
 8007698:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800769c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076a0:	2200      	movs	r2, #0
 80076a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80076aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80076ae:	4642      	mov	r2, r8
 80076b0:	464b      	mov	r3, r9
 80076b2:	1891      	adds	r1, r2, r2
 80076b4:	6239      	str	r1, [r7, #32]
 80076b6:	415b      	adcs	r3, r3
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
 80076ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076be:	4641      	mov	r1, r8
 80076c0:	1854      	adds	r4, r2, r1
 80076c2:	4649      	mov	r1, r9
 80076c4:	eb43 0501 	adc.w	r5, r3, r1
 80076c8:	f04f 0200 	mov.w	r2, #0
 80076cc:	f04f 0300 	mov.w	r3, #0
 80076d0:	00eb      	lsls	r3, r5, #3
 80076d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076d6:	00e2      	lsls	r2, r4, #3
 80076d8:	4614      	mov	r4, r2
 80076da:	461d      	mov	r5, r3
 80076dc:	4643      	mov	r3, r8
 80076de:	18e3      	adds	r3, r4, r3
 80076e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076e4:	464b      	mov	r3, r9
 80076e6:	eb45 0303 	adc.w	r3, r5, r3
 80076ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80076fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80076fe:	f04f 0200 	mov.w	r2, #0
 8007702:	f04f 0300 	mov.w	r3, #0
 8007706:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800770a:	4629      	mov	r1, r5
 800770c:	008b      	lsls	r3, r1, #2
 800770e:	4621      	mov	r1, r4
 8007710:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007714:	4621      	mov	r1, r4
 8007716:	008a      	lsls	r2, r1, #2
 8007718:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800771c:	f7f8 fe82 	bl	8000424 <__aeabi_uldivmod>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4b60      	ldr	r3, [pc, #384]	; (80078a8 <UART_SetConfig+0x4e4>)
 8007726:	fba3 2302 	umull	r2, r3, r3, r2
 800772a:	095b      	lsrs	r3, r3, #5
 800772c:	011c      	lsls	r4, r3, #4
 800772e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007732:	2200      	movs	r2, #0
 8007734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007738:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800773c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007740:	4642      	mov	r2, r8
 8007742:	464b      	mov	r3, r9
 8007744:	1891      	adds	r1, r2, r2
 8007746:	61b9      	str	r1, [r7, #24]
 8007748:	415b      	adcs	r3, r3
 800774a:	61fb      	str	r3, [r7, #28]
 800774c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007750:	4641      	mov	r1, r8
 8007752:	1851      	adds	r1, r2, r1
 8007754:	6139      	str	r1, [r7, #16]
 8007756:	4649      	mov	r1, r9
 8007758:	414b      	adcs	r3, r1
 800775a:	617b      	str	r3, [r7, #20]
 800775c:	f04f 0200 	mov.w	r2, #0
 8007760:	f04f 0300 	mov.w	r3, #0
 8007764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007768:	4659      	mov	r1, fp
 800776a:	00cb      	lsls	r3, r1, #3
 800776c:	4651      	mov	r1, sl
 800776e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007772:	4651      	mov	r1, sl
 8007774:	00ca      	lsls	r2, r1, #3
 8007776:	4610      	mov	r0, r2
 8007778:	4619      	mov	r1, r3
 800777a:	4603      	mov	r3, r0
 800777c:	4642      	mov	r2, r8
 800777e:	189b      	adds	r3, r3, r2
 8007780:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007784:	464b      	mov	r3, r9
 8007786:	460a      	mov	r2, r1
 8007788:	eb42 0303 	adc.w	r3, r2, r3
 800778c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	67bb      	str	r3, [r7, #120]	; 0x78
 800779a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	f04f 0300 	mov.w	r3, #0
 80077a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80077a8:	4649      	mov	r1, r9
 80077aa:	008b      	lsls	r3, r1, #2
 80077ac:	4641      	mov	r1, r8
 80077ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077b2:	4641      	mov	r1, r8
 80077b4:	008a      	lsls	r2, r1, #2
 80077b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80077ba:	f7f8 fe33 	bl	8000424 <__aeabi_uldivmod>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4b39      	ldr	r3, [pc, #228]	; (80078a8 <UART_SetConfig+0x4e4>)
 80077c4:	fba3 1302 	umull	r1, r3, r3, r2
 80077c8:	095b      	lsrs	r3, r3, #5
 80077ca:	2164      	movs	r1, #100	; 0x64
 80077cc:	fb01 f303 	mul.w	r3, r1, r3
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	011b      	lsls	r3, r3, #4
 80077d4:	3332      	adds	r3, #50	; 0x32
 80077d6:	4a34      	ldr	r2, [pc, #208]	; (80078a8 <UART_SetConfig+0x4e4>)
 80077d8:	fba2 2303 	umull	r2, r3, r2, r3
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077e2:	441c      	add	r4, r3
 80077e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077e8:	2200      	movs	r2, #0
 80077ea:	673b      	str	r3, [r7, #112]	; 0x70
 80077ec:	677a      	str	r2, [r7, #116]	; 0x74
 80077ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80077f2:	4642      	mov	r2, r8
 80077f4:	464b      	mov	r3, r9
 80077f6:	1891      	adds	r1, r2, r2
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	415b      	adcs	r3, r3
 80077fc:	60fb      	str	r3, [r7, #12]
 80077fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007802:	4641      	mov	r1, r8
 8007804:	1851      	adds	r1, r2, r1
 8007806:	6039      	str	r1, [r7, #0]
 8007808:	4649      	mov	r1, r9
 800780a:	414b      	adcs	r3, r1
 800780c:	607b      	str	r3, [r7, #4]
 800780e:	f04f 0200 	mov.w	r2, #0
 8007812:	f04f 0300 	mov.w	r3, #0
 8007816:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800781a:	4659      	mov	r1, fp
 800781c:	00cb      	lsls	r3, r1, #3
 800781e:	4651      	mov	r1, sl
 8007820:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007824:	4651      	mov	r1, sl
 8007826:	00ca      	lsls	r2, r1, #3
 8007828:	4610      	mov	r0, r2
 800782a:	4619      	mov	r1, r3
 800782c:	4603      	mov	r3, r0
 800782e:	4642      	mov	r2, r8
 8007830:	189b      	adds	r3, r3, r2
 8007832:	66bb      	str	r3, [r7, #104]	; 0x68
 8007834:	464b      	mov	r3, r9
 8007836:	460a      	mov	r2, r1
 8007838:	eb42 0303 	adc.w	r3, r2, r3
 800783c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800783e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	663b      	str	r3, [r7, #96]	; 0x60
 8007848:	667a      	str	r2, [r7, #100]	; 0x64
 800784a:	f04f 0200 	mov.w	r2, #0
 800784e:	f04f 0300 	mov.w	r3, #0
 8007852:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007856:	4649      	mov	r1, r9
 8007858:	008b      	lsls	r3, r1, #2
 800785a:	4641      	mov	r1, r8
 800785c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007860:	4641      	mov	r1, r8
 8007862:	008a      	lsls	r2, r1, #2
 8007864:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007868:	f7f8 fddc 	bl	8000424 <__aeabi_uldivmod>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4b0d      	ldr	r3, [pc, #52]	; (80078a8 <UART_SetConfig+0x4e4>)
 8007872:	fba3 1302 	umull	r1, r3, r3, r2
 8007876:	095b      	lsrs	r3, r3, #5
 8007878:	2164      	movs	r1, #100	; 0x64
 800787a:	fb01 f303 	mul.w	r3, r1, r3
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	3332      	adds	r3, #50	; 0x32
 8007884:	4a08      	ldr	r2, [pc, #32]	; (80078a8 <UART_SetConfig+0x4e4>)
 8007886:	fba2 2303 	umull	r2, r3, r2, r3
 800788a:	095b      	lsrs	r3, r3, #5
 800788c:	f003 020f 	and.w	r2, r3, #15
 8007890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4422      	add	r2, r4
 8007898:	609a      	str	r2, [r3, #8]
}
 800789a:	bf00      	nop
 800789c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80078a0:	46bd      	mov	sp, r7
 80078a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078a6:	bf00      	nop
 80078a8:	51eb851f 	.word	0x51eb851f

080078ac <__libc_init_array>:
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	4d0d      	ldr	r5, [pc, #52]	; (80078e4 <__libc_init_array+0x38>)
 80078b0:	4c0d      	ldr	r4, [pc, #52]	; (80078e8 <__libc_init_array+0x3c>)
 80078b2:	1b64      	subs	r4, r4, r5
 80078b4:	10a4      	asrs	r4, r4, #2
 80078b6:	2600      	movs	r6, #0
 80078b8:	42a6      	cmp	r6, r4
 80078ba:	d109      	bne.n	80078d0 <__libc_init_array+0x24>
 80078bc:	4d0b      	ldr	r5, [pc, #44]	; (80078ec <__libc_init_array+0x40>)
 80078be:	4c0c      	ldr	r4, [pc, #48]	; (80078f0 <__libc_init_array+0x44>)
 80078c0:	f000 f82e 	bl	8007920 <_init>
 80078c4:	1b64      	subs	r4, r4, r5
 80078c6:	10a4      	asrs	r4, r4, #2
 80078c8:	2600      	movs	r6, #0
 80078ca:	42a6      	cmp	r6, r4
 80078cc:	d105      	bne.n	80078da <__libc_init_array+0x2e>
 80078ce:	bd70      	pop	{r4, r5, r6, pc}
 80078d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078d4:	4798      	blx	r3
 80078d6:	3601      	adds	r6, #1
 80078d8:	e7ee      	b.n	80078b8 <__libc_init_array+0xc>
 80078da:	f855 3b04 	ldr.w	r3, [r5], #4
 80078de:	4798      	blx	r3
 80078e0:	3601      	adds	r6, #1
 80078e2:	e7f2      	b.n	80078ca <__libc_init_array+0x1e>
 80078e4:	08007960 	.word	0x08007960
 80078e8:	08007960 	.word	0x08007960
 80078ec:	08007960 	.word	0x08007960
 80078f0:	08007964 	.word	0x08007964

080078f4 <memcpy>:
 80078f4:	440a      	add	r2, r1
 80078f6:	4291      	cmp	r1, r2
 80078f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80078fc:	d100      	bne.n	8007900 <memcpy+0xc>
 80078fe:	4770      	bx	lr
 8007900:	b510      	push	{r4, lr}
 8007902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800790a:	4291      	cmp	r1, r2
 800790c:	d1f9      	bne.n	8007902 <memcpy+0xe>
 800790e:	bd10      	pop	{r4, pc}

08007910 <memset>:
 8007910:	4402      	add	r2, r0
 8007912:	4603      	mov	r3, r0
 8007914:	4293      	cmp	r3, r2
 8007916:	d100      	bne.n	800791a <memset+0xa>
 8007918:	4770      	bx	lr
 800791a:	f803 1b01 	strb.w	r1, [r3], #1
 800791e:	e7f9      	b.n	8007914 <memset+0x4>

08007920 <_init>:
 8007920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007922:	bf00      	nop
 8007924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007926:	bc08      	pop	{r3}
 8007928:	469e      	mov	lr, r3
 800792a:	4770      	bx	lr

0800792c <_fini>:
 800792c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792e:	bf00      	nop
 8007930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007932:	bc08      	pop	{r3}
 8007934:	469e      	mov	lr, r3
 8007936:	4770      	bx	lr
