
pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800900c  0800900c  0001900c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091f4  080091f4  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  080091f4  080091f4  000191f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091fc  080091fc  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091fc  080091fc  000191fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009200  08009200  00019200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08009204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bc8  200000a8  080092ac  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004c70  080092ac  00024c70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001489c  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002942  00000000  00000000  00034974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  000372b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  000384e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002396c  00000000  00000000  00039608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015805  00000000  00000000  0005cf74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7666  00000000  00000000  00072779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149ddf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005144  00000000  00000000  00149e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008ff4 	.word	0x08008ff4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ac 	.word	0x200000ac
 800020c:	08008ff4 	.word	0x08008ff4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <arm_fir_f32>:
void arm_fir_f32(
const arm_fir_instance_f32 * S,
float32_t * pSrc,
float32_t * pDst,
uint32_t blockSize)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b09f      	sub	sp, #124	; 0x7c
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	603b      	str	r3, [r7, #0]
   float32_t *pState = S->pState;                 /* State pointer */
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	677b      	str	r3, [r7, #116]	; 0x74
   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	61fb      	str	r3, [r7, #28]
   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient buffers */
   float32_t acc0, acc1, acc2, acc3, acc4, acc5, acc6, acc7;     /* Accumulators */
   float32_t x0, x1, x2, x3, x4, x5, x6, x7, c0;  /* Temporary variables to hold state and coefficient values */
   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	61bb      	str	r3, [r7, #24]
   uint32_t i, tapCnt, blkCnt;                    /* Loop counters */

   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
   /* pStateCurnt points to the location where the new input data should be written */
   pStateCurnt = &(S->pState[(numTaps - 1u)]);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80005ee:	3b01      	subs	r3, #1
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	673b      	str	r3, [r7, #112]	; 0x70
    *    acc0 =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0]  
    *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-numTaps-2] +...+ b[0] * x[1]  
    *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-numTaps-1] +...+ b[0] * x[2]  
    *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-numTaps]   +...+ b[0] * x[3]  
    */
   blkCnt = blockSize >> 3;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	08db      	lsrs	r3, r3, #3
 80005fa:	623b      	str	r3, [r7, #32]

   /* First part of the processing with loop unrolling.  Compute 8 outputs at a time.  
   ** a second loop below computes the remaining 1 to 7 samples. */
   while(blkCnt > 0u)
 80005fc:	f000 bc8b 	b.w	8000f16 <arm_fir_f32+0x952>
   {
      /* Copy four new input samples into the state buffer */
      *pStateCurnt++ = *pSrc++;
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	1d13      	adds	r3, r2, #4
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000608:	1d19      	adds	r1, r3, #4
 800060a:	6739      	str	r1, [r7, #112]	; 0x70
 800060c:	6812      	ldr	r2, [r2, #0]
 800060e:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	1d13      	adds	r3, r2, #4
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000618:	1d19      	adds	r1, r3, #4
 800061a:	6739      	str	r1, [r7, #112]	; 0x70
 800061c:	6812      	ldr	r2, [r2, #0]
 800061e:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000620:	68ba      	ldr	r2, [r7, #8]
 8000622:	1d13      	adds	r3, r2, #4
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000628:	1d19      	adds	r1, r3, #4
 800062a:	6739      	str	r1, [r7, #112]	; 0x70
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	1d13      	adds	r3, r2, #4
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000638:	1d19      	adds	r1, r3, #4
 800063a:	6739      	str	r1, [r7, #112]	; 0x70
 800063c:	6812      	ldr	r2, [r2, #0]
 800063e:	601a      	str	r2, [r3, #0]

      /* Set all accumulators to zero */
      acc0 = 0.0f;
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	667b      	str	r3, [r7, #100]	; 0x64
      acc1 = 0.0f;
 8000646:	f04f 0300 	mov.w	r3, #0
 800064a:	663b      	str	r3, [r7, #96]	; 0x60
      acc2 = 0.0f;
 800064c:	f04f 0300 	mov.w	r3, #0
 8000650:	65fb      	str	r3, [r7, #92]	; 0x5c
      acc3 = 0.0f;
 8000652:	f04f 0300 	mov.w	r3, #0
 8000656:	65bb      	str	r3, [r7, #88]	; 0x58
      acc4 = 0.0f;
 8000658:	f04f 0300 	mov.w	r3, #0
 800065c:	657b      	str	r3, [r7, #84]	; 0x54
      acc5 = 0.0f;
 800065e:	f04f 0300 	mov.w	r3, #0
 8000662:	653b      	str	r3, [r7, #80]	; 0x50
      acc6 = 0.0f;
 8000664:	f04f 0300 	mov.w	r3, #0
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
      acc7 = 0.0f;		
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48

      /* Initialize state pointer */
      px = pState;
 8000670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000672:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* Initialize coeff pointer */
      pb = (pCoeffs);		
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	66bb      	str	r3, [r7, #104]	; 0x68
   
      /* This is separated from the others to avoid 
       * a call to __aeabi_memmove which would be slower
       */
      *pStateCurnt++ = *pSrc++;
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	1d13      	adds	r3, r2, #4
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000680:	1d19      	adds	r1, r3, #4
 8000682:	6739      	str	r1, [r7, #112]	; 0x70
 8000684:	6812      	ldr	r2, [r2, #0]
 8000686:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	1d13      	adds	r3, r2, #4
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000690:	1d19      	adds	r1, r3, #4
 8000692:	6739      	str	r1, [r7, #112]	; 0x70
 8000694:	6812      	ldr	r2, [r2, #0]
 8000696:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	1d13      	adds	r3, r2, #4
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006a0:	1d19      	adds	r1, r3, #4
 80006a2:	6739      	str	r1, [r7, #112]	; 0x70
 80006a4:	6812      	ldr	r2, [r2, #0]
 80006a6:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	1d13      	adds	r3, r2, #4
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006b0:	1d19      	adds	r1, r3, #4
 80006b2:	6739      	str	r1, [r7, #112]	; 0x70
 80006b4:	6812      	ldr	r2, [r2, #0]
 80006b6:	601a      	str	r2, [r3, #0]

      /* Read the first seven samples from the state buffer:  x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2] */
      x0 = *px++;
 80006b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006ba:	1d1a      	adds	r2, r3, #4
 80006bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	647b      	str	r3, [r7, #68]	; 0x44
      x1 = *px++;
 80006c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006c4:	1d1a      	adds	r2, r3, #4
 80006c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
      x2 = *px++;
 80006cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006ce:	1d1a      	adds	r2, r3, #4
 80006d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	63fb      	str	r3, [r7, #60]	; 0x3c
      x3 = *px++;
 80006d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006d8:	1d1a      	adds	r2, r3, #4
 80006da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
      x4 = *px++;
 80006e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006e2:	1d1a      	adds	r2, r3, #4
 80006e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	637b      	str	r3, [r7, #52]	; 0x34
      x5 = *px++;
 80006ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006ec:	1d1a      	adds	r2, r3, #4
 80006ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
      x6 = *px++;
 80006f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006f6:	1d1a      	adds	r2, r3, #4
 80006f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Loop unrolling.  Process 8 taps at a time. */
      tapCnt = numTaps >> 3u;
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	08db      	lsrs	r3, r3, #3
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Loop over the number of taps.  Unroll by a factor of 8.  
       ** Repeat until we've computed numTaps-8 coefficients. */
      while(tapCnt > 0u)
 8000704:	e352      	b.n	8000dac <arm_fir_f32+0x7e8>
      {
         /* Read the b[numTaps-1] coefficient */
         c0 = *(pb++);
 8000706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000708:	1d1a      	adds	r2, r3, #4
 800070a:	66ba      	str	r2, [r7, #104]	; 0x68
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-3] sample */
         x7 = *(px++);
 8000710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000712:	1d1a      	adds	r2, r3, #4
 8000714:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	613b      	str	r3, [r7, #16]

         /* acc0 +=  b[numTaps-1] * x[n-numTaps] */
         acc0 += x0 * c0;
 800071a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800071e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000726:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800072a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800072e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-1] */
         acc1 += x1 * c0;
 8000732:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000736:	edd7 7a05 	vldr	s15, [r7, #20]
 800073a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000746:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-2] */
         acc2 += x2 * c0;
 800074a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800074e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000756:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800075a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800075e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-3] */
         acc3 += x3 * c0;
 8000762:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000766:	edd7 7a05 	vldr	s15, [r7, #20]
 800076a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800076e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000776:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

         /* acc4 +=  b[numTaps-1] * x[n-numTaps-4] */
         acc4 += x4 * c0;
 800077a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800077e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000786:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800078a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800078e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-5] */
         acc5 += x5 * c0;
 8000792:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000796:	edd7 7a05 	vldr	s15, [r7, #20]
 800079a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800079e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80007a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007a6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-6] */
         acc6 += x6 * c0;
 80007aa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80007ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80007b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007b6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80007ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007be:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-7] */
         acc7 += x7 * c0;
 80007c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80007c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80007ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ce:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80007d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007d6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
         
         /* Read the b[numTaps-2] coefficient */
         c0 = *(pb++);
 80007da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007dc:	1d1a      	adds	r2, r3, #4
 80007de:	66ba      	str	r2, [r7, #104]	; 0x68
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-4] sample */
         x0 = *(px++);
 80007e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007e6:	1d1a      	adds	r2, r3, #4
 80007e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	647b      	str	r3, [r7, #68]	; 0x44

         /* Perform the multiply-accumulate */
         acc0 += x1 * c0;
 80007ee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80007f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80007f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007fa:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80007fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000802:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x2 * c0;   
 8000806:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800080a:	edd7 7a05 	vldr	s15, [r7, #20]
 800080e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000812:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800081a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x3 * c0;   
 800081e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000822:	edd7 7a05 	vldr	s15, [r7, #20]
 8000826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800082a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800082e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000832:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x4 * c0;   
 8000836:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800083a:	edd7 7a05 	vldr	s15, [r7, #20]
 800083e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000842:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800084a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x5 * c0;   
 800084e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000852:	edd7 7a05 	vldr	s15, [r7, #20]
 8000856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800085a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800085e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000862:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x6 * c0;   
 8000866:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800086a:	edd7 7a05 	vldr	s15, [r7, #20]
 800086e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000872:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800087a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x7 * c0;   
 800087e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000882:	edd7 7a05 	vldr	s15, [r7, #20]
 8000886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800088a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800088e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000892:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x0 * c0;   
 8000896:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800089a:	edd7 7a05 	vldr	s15, [r7, #20]
 800089e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008a2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80008a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008aa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
         
         /* Read the b[numTaps-3] coefficient */
         c0 = *(pb++);
 80008ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008b0:	1d1a      	adds	r2, r3, #4
 80008b2:	66ba      	str	r2, [r7, #104]	; 0x68
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-5] sample */
         x1 = *(px++);
 80008b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008ba:	1d1a      	adds	r2, r3, #4
 80008bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	643b      	str	r3, [r7, #64]	; 0x40

         /* Perform the multiply-accumulates */      
         acc0 += x2 * c0;
 80008c2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80008c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80008ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ce:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80008d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008d6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x3 * c0;   
 80008da:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80008de:	edd7 7a05 	vldr	s15, [r7, #20]
 80008e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80008ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ee:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x4 * c0;   
 80008f2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80008f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80008fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008fe:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000906:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x5 * c0;   
 800090a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800090e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000916:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800091a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800091e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x6 * c0;   
 8000922:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000926:	edd7 7a05 	vldr	s15, [r7, #20]
 800092a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800092e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000936:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x7 * c0;   
 800093a:	ed97 7a04 	vldr	s14, [r7, #16]
 800093e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000946:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800094a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800094e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x0 * c0;   
 8000952:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000956:	edd7 7a05 	vldr	s15, [r7, #20]
 800095a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800095e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000966:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x1 * c0;   
 800096a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800096e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000976:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800097a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800097e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000984:	1d1a      	adds	r2, r3, #4
 8000986:	66ba      	str	r2, [r7, #104]	; 0x68
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x2 = *(px++);
 800098c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800098e:	1d1a      	adds	r2, r3, #4
 8000990:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c

         /* Perform the multiply-accumulates */      
         acc0 += x3 * c0;
 8000996:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800099a:	edd7 7a05 	vldr	s15, [r7, #20]
 800099e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009a2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80009a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009aa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x4 * c0;   
 80009ae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80009b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80009b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ba:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80009be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009c2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x5 * c0;   
 80009c6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80009ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80009ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009d2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80009d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009da:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x6 * c0;   
 80009de:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80009e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80009e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ea:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80009ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009f2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x7 * c0;   
 80009f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80009fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80009fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a02:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a0a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x0 * c0;   
 8000a0e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a12:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a1a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a22:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x1 * c0;   
 8000a26:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000a2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a32:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a3a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x2 * c0;   
 8000a3e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000a42:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a4a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a52:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000a56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a58:	1d1a      	adds	r2, r3, #4
 8000a5a:	66ba      	str	r2, [r7, #104]	; 0x68
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x3 = *(px++);
 8000a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a62:	1d1a      	adds	r2, r3, #4
 8000a64:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
         /* Perform the multiply-accumulates */      
         acc0 += x4 * c0;
 8000a6a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000a6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a76:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a7e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x5 * c0;   
 8000a82:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000a86:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a8e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a96:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x6 * c0;   
 8000a9a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000a9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aae:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x7 * c0;   
 8000ab2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ab6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000abe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ac6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x0 * c0;   
 8000aca:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000ace:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ade:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x1 * c0;   
 8000ae2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000ae6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aee:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000af6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x2 * c0;   
 8000afa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000afe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b06:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b0e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x3 * c0;   
 8000b12:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000b16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b1e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b26:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b2c:	1d1a      	adds	r2, r3, #4
 8000b2e:	66ba      	str	r2, [r7, #104]	; 0x68
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x4 = *(px++);
 8000b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b36:	1d1a      	adds	r2, r3, #4
 8000b38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	637b      	str	r3, [r7, #52]	; 0x34

         /* Perform the multiply-accumulates */      
         acc0 += x5 * c0;
 8000b3e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000b42:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b4a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b52:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x6 * c0;   
 8000b56:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000b5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b62:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b6a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x7 * c0;   
 8000b6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b72:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b7a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b82:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x0 * c0;   
 8000b86:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000b8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b92:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b9a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x1 * c0;   
 8000b9e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000ba2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000baa:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x2 * c0;   
 8000bb6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000bba:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bc2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bca:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x3 * c0;   
 8000bce:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000bd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bda:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x4 * c0;   
 8000be6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000bea:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bf2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bfa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c00:	1d1a      	adds	r2, r3, #4
 8000c02:	66ba      	str	r2, [r7, #104]	; 0x68
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x5 = *(px++);
 8000c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c0a:	1d1a      	adds	r2, r3, #4
 8000c0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30

         /* Perform the multiply-accumulates */      
         acc0 += x6 * c0;
 8000c12:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000c16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c1e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c26:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x7 * c0;   
 8000c2a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c36:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c3e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x0 * c0;   
 8000c42:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000c46:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c4e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c56:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x1 * c0;   
 8000c5a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000c5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c66:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c6e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x2 * c0;   
 8000c72:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c76:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c7e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c86:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x3 * c0;   
 8000c8a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000c8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c96:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c9e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x4 * c0;   
 8000ca2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000ca6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x5 * c0;   
 8000cba:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000cbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cce:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000cd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000cd4:	1d1a      	adds	r2, r3, #4
 8000cd6:	66ba      	str	r2, [r7, #104]	; 0x68
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x6 = *(px++);
 8000cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cde:	1d1a      	adds	r2, r3, #4
 8000ce0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c

         /* Perform the multiply-accumulates */      
         acc0 += x7 * c0;
 8000ce6:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cea:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cf2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x0 * c0;   
 8000cfe:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000d02:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d0a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d12:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x1 * c0;   
 8000d16:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000d1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d22:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d2a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x2 * c0;   
 8000d2e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000d32:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d3a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d42:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x3 * c0;   
 8000d46:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000d4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d52:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d5a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x4 * c0;   
 8000d5e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000d62:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d6a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d72:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x5 * c0;   
 8000d76:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000d7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d82:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d8a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x6 * c0;   
 8000d8e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000d92:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d9a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         tapCnt--;
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	3b01      	subs	r3, #1
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
      while(tapCnt > 0u)
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f47f aca9 	bne.w	8000706 <arm_fir_f32+0x142>
      }

      /* If the filter length is not a multiple of 8, compute the remaining filter taps */
      tapCnt = numTaps % 0x8u;
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24

      while(tapCnt > 0u)
 8000dbc:	e07a      	b.n	8000eb4 <arm_fir_f32+0x8f0>
      {
         /* Read coefficients */
         c0 = *(pb++);
 8000dbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000dc0:	1d1a      	adds	r2, r3, #4
 8000dc2:	66ba      	str	r2, [r7, #104]	; 0x68
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	617b      	str	r3, [r7, #20]

         /* Fetch 1 state variable */
         x7 = *(px++);
 8000dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dca:	1d1a      	adds	r2, r3, #4
 8000dcc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	613b      	str	r3, [r7, #16]

         /* Perform the multiply-accumulates */      
         acc0 += x0 * c0;
 8000dd2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000dd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dde:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x1 * c0;   
 8000dea:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000dee:	edd7 7a05 	vldr	s15, [r7, #20]
 8000df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dfe:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x2 * c0;   
 8000e02:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e0e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e16:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x3 * c0;   
 8000e1a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000e1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e26:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x4 * c0;   
 8000e32:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000e36:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e3e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e46:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x5 * c0;   
 8000e4a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000e4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e56:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e5e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x6 * c0;   
 8000e62:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000e66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e6e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e76:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x7 * c0;   
 8000e7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e86:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Reuse the present sample states for next sample */
         x0 = x1;
 8000e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e94:	647b      	str	r3, [r7, #68]	; 0x44
         x1 = x2;
 8000e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e98:	643b      	str	r3, [r7, #64]	; 0x40
         x2 = x3;
 8000e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         x3 = x4;
 8000e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
         x4 = x5;
 8000ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
         x5 = x6;
 8000ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
         x6 = x7;
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c

         /* Decrement the loop counter */
         tapCnt--;
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
      while(tapCnt > 0u)
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d181      	bne.n	8000dbe <arm_fir_f32+0x7fa>
      }

      /* Advance the state pointer by 8 to process the next group of 8 samples */
      pState = pState + 8;
 8000eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ebc:	3320      	adds	r3, #32
 8000ebe:	677b      	str	r3, [r7, #116]	; 0x74

      /* The results in the 8 accumulators, store in the destination buffer. */
      *pDst++ = acc0;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1d1a      	adds	r2, r3, #4
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ec8:	601a      	str	r2, [r3, #0]
      *pDst++ = acc1;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	1d1a      	adds	r2, r3, #4
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ed2:	601a      	str	r2, [r3, #0]
      *pDst++ = acc2;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	1d1a      	adds	r2, r3, #4
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000edc:	601a      	str	r2, [r3, #0]
      *pDst++ = acc3;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	1d1a      	adds	r2, r3, #4
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000ee6:	601a      	str	r2, [r3, #0]
      *pDst++ = acc4;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	1d1a      	adds	r2, r3, #4
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ef0:	601a      	str	r2, [r3, #0]
      *pDst++ = acc5;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	1d1a      	adds	r2, r3, #4
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000efa:	601a      	str	r2, [r3, #0]
      *pDst++ = acc6;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	1d1a      	adds	r2, r3, #4
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f04:	601a      	str	r2, [r3, #0]
      *pDst++ = acc7;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	1d1a      	adds	r2, r3, #4
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f0e:	601a      	str	r2, [r3, #0]

      blkCnt--;
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	623b      	str	r3, [r7, #32]
   while(blkCnt > 0u)
 8000f16:	6a3b      	ldr	r3, [r7, #32]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f47f ab71 	bne.w	8000600 <arm_fir_f32+0x3c>
   }

   /* If the blockSize is not a multiple of 8, compute any remaining output samples here.  
   ** No loop unrolling is used. */
   blkCnt = blockSize % 0x8u;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	623b      	str	r3, [r7, #32]

   while(blkCnt > 0u)
 8000f26:	e033      	b.n	8000f90 <arm_fir_f32+0x9cc>
   {
      /* Copy one sample at a time into state buffer */
      *pStateCurnt++ = *pSrc++;
 8000f28:	68ba      	ldr	r2, [r7, #8]
 8000f2a:	1d13      	adds	r3, r2, #4
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f30:	1d19      	adds	r1, r3, #4
 8000f32:	6739      	str	r1, [r7, #112]	; 0x70
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	601a      	str	r2, [r3, #0]

      /* Set the accumulator to zero */
      acc0 = 0.0f;
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	667b      	str	r3, [r7, #100]	; 0x64

      /* Initialize state pointer */
      px = pState;
 8000f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f40:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* Initialize Coefficient pointer */
      pb = (pCoeffs);
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	66bb      	str	r3, [r7, #104]	; 0x68

      i = numTaps;
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Perform the multiply-accumulates */
      do
      {
         acc0 += *px++ * *pb++;
 8000f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f4c:	1d1a      	adds	r2, r3, #4
 8000f4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f50:	ed93 7a00 	vldr	s14, [r3]
 8000f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f56:	1d1a      	adds	r2, r3, #4
 8000f58:	66ba      	str	r2, [r7, #104]	; 0x68
 8000f5a:	edd3 7a00 	vldr	s15, [r3]
 8000f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f62:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         i--;
 8000f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f70:	3b01      	subs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28

      } while(i > 0u);
 8000f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1e7      	bne.n	8000f4a <arm_fir_f32+0x986>

      /* The result is store in the destination buffer. */
      *pDst++ = acc0;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	1d1a      	adds	r2, r3, #4
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000f82:	601a      	str	r2, [r3, #0]

      /* Advance state pointer by 1 for the next sample */
      pState = pState + 1;
 8000f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f86:	3304      	adds	r3, #4
 8000f88:	677b      	str	r3, [r7, #116]	; 0x74

      blkCnt--;
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
   while(blkCnt > 0u)
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1c8      	bne.n	8000f28 <arm_fir_f32+0x964>
   /* Processing is complete.  
   ** Now copy the last numTaps - 1 samples to the start of the state buffer.  
   ** This prepares the state buffer for the next function call. */

   /* Points to the start of the state buffer */
   pStateCurnt = S->pState;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	673b      	str	r3, [r7, #112]	; 0x70

   tapCnt = (numTaps - 1u) >> 2u;
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24

   /* copy data */
   while(tapCnt > 0u)
 8000fa4:	e022      	b.n	8000fec <arm_fir_f32+0xa28>
   {
      *pStateCurnt++ = *pState++;
 8000fa6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fa8:	1d13      	adds	r3, r2, #4
 8000faa:	677b      	str	r3, [r7, #116]	; 0x74
 8000fac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fae:	1d19      	adds	r1, r3, #4
 8000fb0:	6739      	str	r1, [r7, #112]	; 0x70
 8000fb2:	6812      	ldr	r2, [r2, #0]
 8000fb4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8000fb6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fb8:	1d13      	adds	r3, r2, #4
 8000fba:	677b      	str	r3, [r7, #116]	; 0x74
 8000fbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fbe:	1d19      	adds	r1, r3, #4
 8000fc0:	6739      	str	r1, [r7, #112]	; 0x70
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8000fc6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fc8:	1d13      	adds	r3, r2, #4
 8000fca:	677b      	str	r3, [r7, #116]	; 0x74
 8000fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fce:	1d19      	adds	r1, r3, #4
 8000fd0:	6739      	str	r1, [r7, #112]	; 0x70
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8000fd6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fd8:	1d13      	adds	r3, r2, #4
 8000fda:	677b      	str	r3, [r7, #116]	; 0x74
 8000fdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fde:	1d19      	adds	r1, r3, #4
 8000fe0:	6739      	str	r1, [r7, #112]	; 0x70
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
   while(tapCnt > 0u)
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1d9      	bne.n	8000fa6 <arm_fir_f32+0x9e2>
   }

   /* Calculate remaining number of copies */
   tapCnt = (numTaps - 1u) % 0x4u;
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24

   /* Copy the remaining q31_t data */
   while(tapCnt > 0u)
 8000ffc:	e00a      	b.n	8001014 <arm_fir_f32+0xa50>
   {
      *pStateCurnt++ = *pState++;
 8000ffe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001000:	1d13      	adds	r3, r2, #4
 8001002:	677b      	str	r3, [r7, #116]	; 0x74
 8001004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001006:	1d19      	adds	r1, r3, #4
 8001008:	6739      	str	r1, [r7, #112]	; 0x70
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	3b01      	subs	r3, #1
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
   while(tapCnt > 0u)
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f1      	bne.n	8000ffe <arm_fir_f32+0xa3a>
   }
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	377c      	adds	r7, #124	; 0x7c
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <arm_fir_init_f32>:
  arm_fir_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	460b      	mov	r3, r1
 8001036:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	897a      	ldrh	r2, [r7, #10]
 800103c:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and the size of state buffer is (blockSize + numTaps - 1) */
  memset(pState, 0, (numTaps + (blockSize - 1u)) * sizeof(float32_t));
 8001044:	897a      	ldrh	r2, [r7, #10]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4413      	add	r3, r2
 800104a:	3b01      	subs	r3, #1
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	461a      	mov	r2, r3
 8001050:	2100      	movs	r1, #0
 8001052:	6838      	ldr	r0, [r7, #0]
 8001054:	f007 fb06 	bl	8008664 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	605a      	str	r2, [r3, #4]

}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800107c:	b2db      	uxtb	r3, r3
 800107e:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6858      	ldr	r0, [r3, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	8adb      	ldrh	r3, [r3, #22]
 8001088:	2200      	movs	r2, #0
 800108a:	4619      	mov	r1, r3
 800108c:	f002 fc82 	bl	8003994 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	1cf9      	adds	r1, r7, #3
 800109a:	2201      	movs	r2, #1
 800109c:	f004 fc73 	bl	8005986 <HAL_SPI_Transmit>
 80010a0:	4603      	mov	r3, r0
 80010a2:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f107 010f 	add.w	r1, r7, #15
 80010b0:	2201      	movs	r2, #1
 80010b2:	f004 fda4 	bl	8005bfe <HAL_SPI_Receive>
 80010b6:	4603      	mov	r3, r0
 80010b8:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6858      	ldr	r0, [r3, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	8adb      	ldrh	r3, [r3, #22]
 80010c2:	2201      	movs	r2, #1
 80010c4:	4619      	mov	r1, r3
 80010c6:	f002 fc65 	bl	8003994 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
 80010e0:	4613      	mov	r3, r2
 80010e2:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ea:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 80010ec:	78bb      	ldrb	r3, [r7, #2]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6858      	ldr	r0, [r3, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	8adb      	ldrh	r3, [r3, #22]
 8001106:	2200      	movs	r2, #0
 8001108:	4619      	mov	r1, r3
 800110a:	f002 fc43 	bl	8003994 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f107 010a 	add.w	r1, r7, #10
 800111a:	2202      	movs	r2, #2
 800111c:	f004 fc33 	bl	8005986 <HAL_SPI_Transmit>
 8001120:	4603      	mov	r3, r0
 8001122:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6858      	ldr	r0, [r3, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	8adb      	ldrh	r3, [r3, #22]
 800112c:	2201      	movs	r2, #1
 800112e:	4619      	mov	r1, r3
 8001130:	f002 fc30 	bl	8003994 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	4611      	mov	r1, r2
 8001148:	461a      	mov	r2, r3
 800114a:	460b      	mov	r3, r1
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	4613      	mov	r3, r2
 8001150:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6858      	ldr	r0, [r3, #4]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	8adb      	ldrh	r3, [r3, #22]
 800115e:	2200      	movs	r2, #0
 8001160:	4619      	mov	r1, r3
 8001162:	f002 fc17 	bl	8003994 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f107 0117 	add.w	r1, r7, #23
 8001172:	2201      	movs	r2, #1
 8001174:	f004 fc07 	bl	8005986 <HAL_SPI_Transmit>
 8001178:	4603      	mov	r3, r0
 800117a:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 800117c:	79bb      	ldrb	r3, [r7, #6]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d108      	bne.n	8001194 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	79fa      	ldrb	r2, [r7, #7]
 8001188:	b292      	uxth	r2, r2
 800118a:	68b9      	ldr	r1, [r7, #8]
 800118c:	4618      	mov	r0, r3
 800118e:	f004 ffe9 	bl	8006164 <HAL_SPI_Transmit_DMA>
 8001192:	e012      	b.n	80011ba <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	b29a      	uxth	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	f004 fbf0 	bl	8005986 <HAL_SPI_Transmit>
 80011a6:	4603      	mov	r3, r0
 80011a8:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6858      	ldr	r0, [r3, #4]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	8adb      	ldrh	r3, [r3, #22]
 80011b2:	2201      	movs	r2, #1
 80011b4:	4619      	mov	r1, r3
 80011b6:	f002 fbed 	bl	8003994 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	2101      	movs	r1, #1
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff7b 	bl	80010d4 <write_register>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	2b2c      	cmp	r3, #44	; 0x2c
 80011f8:	d801      	bhi.n	80011fe <set_OCP+0x16>
    imax = 45;
 80011fa:	232d      	movs	r3, #45	; 0x2d
 80011fc:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	2bf0      	cmp	r3, #240	; 0xf0
 8001202:	d901      	bls.n	8001208 <set_OCP+0x20>
    imax = 240;
 8001204:	23f0      	movs	r3, #240	; 0xf0
 8001206:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	2b81      	cmp	r3, #129	; 0x81
 800120c:	d809      	bhi.n	8001222 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 800120e:	78fb      	ldrb	r3, [r7, #3]
 8001210:	3b2d      	subs	r3, #45	; 0x2d
 8001212:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <set_OCP+0x68>)
 8001214:	fb82 1203 	smull	r1, r2, r2, r3
 8001218:	1052      	asrs	r2, r2, #1
 800121a:	17db      	asrs	r3, r3, #31
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e008      	b.n	8001234 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	331e      	adds	r3, #30
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <set_OCP+0x68>)
 8001228:	fb82 1203 	smull	r1, r2, r2, r3
 800122c:	1092      	asrs	r2, r2, #2
 800122e:	17db      	asrs	r3, r3, #31
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	210b      	movs	r1, #11
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff47 	bl	80010d4 <write_register>
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	66666667 	.word	0x66666667

08001254 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 800125c:	211d      	movs	r1, #29
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ff01 	bl	8001066 <read_register>
 8001264:	4603      	mov	r3, r0
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	b2db      	uxtb	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2200      	movs	r2, #0
 800126e:	461c      	mov	r4, r3
 8001270:	4615      	mov	r5, r2
 8001272:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8001276:	211e      	movs	r1, #30
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fef4 	bl	8001066 <read_register>
 800127e:	4603      	mov	r3, r0
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001284:	2304      	movs	r3, #4
 8001286:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2b0a      	cmp	r3, #10
 800128c:	d908      	bls.n	80012a0 <set_low_data_rate_optimization+0x4c>
 800128e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001292:	1fd1      	subs	r1, r2, #7
 8001294:	430b      	orrs	r3, r1
 8001296:	d103      	bne.n	80012a0 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001298:	7ffb      	ldrb	r3, [r7, #31]
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 80012a0:	7ffb      	ldrb	r3, [r7, #31]
 80012a2:	461a      	mov	r2, r3
 80012a4:	2126      	movs	r1, #38	; 0x26
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ff14 	bl	80010d4 <write_register>
}
 80012ac:	bf00      	nop
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bdb0      	pop	{r4, r5, r7, pc}

080012b4 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 80012bc:	2100      	movs	r1, #0
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ff7e 	bl	80011c0 <set_mode>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 80012d4:	2101      	movs	r1, #1
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff72 	bl	80011c0 <set_mode>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80012ec:	211d      	movs	r1, #29
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff feb9 	bl	8001066 <read_register>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	f023 0301 	bic.w	r3, r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	461a      	mov	r2, r3
 8001304:	211d      	movs	r1, #29
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fee4 	bl	80010d4 <write_register>
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10e      	bne.n	8001346 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	2b0f      	cmp	r3, #15
 800132c:	d901      	bls.n	8001332 <lora_set_tx_power+0x1e>
      level = 15;
 800132e:	230f      	movs	r3, #15
 8001330:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001338:	b2db      	uxtb	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	2109      	movs	r1, #9
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fec8 	bl	80010d4 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8001344:	e02e      	b.n	80013a4 <lora_set_tx_power+0x90>
    if (level > 20) {
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	2b14      	cmp	r3, #20
 800134a:	d901      	bls.n	8001350 <lora_set_tx_power+0x3c>
      level = 20;
 800134c:	2314      	movs	r3, #20
 800134e:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d801      	bhi.n	800135a <lora_set_tx_power+0x46>
      level = 2;
 8001356:	2302      	movs	r3, #2
 8001358:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	2b11      	cmp	r3, #17
 800135e:	d90c      	bls.n	800137a <lora_set_tx_power+0x66>
      level -= 3;
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	3b03      	subs	r3, #3
 8001364:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8001366:	2287      	movs	r2, #135	; 0x87
 8001368:	214d      	movs	r1, #77	; 0x4d
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff feb2 	bl	80010d4 <write_register>
      set_OCP(lora, 140);
 8001370:	218c      	movs	r1, #140	; 0x8c
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ff38 	bl	80011e8 <set_OCP>
 8001378:	e008      	b.n	800138c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800137a:	2284      	movs	r2, #132	; 0x84
 800137c:	214d      	movs	r1, #77	; 0x4d
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fea8 	bl	80010d4 <write_register>
      set_OCP(lora, 97);
 8001384:	2161      	movs	r1, #97	; 0x61
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff2e 	bl	80011e8 <set_OCP>
    level -= 2;
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	3b02      	subs	r3, #2
 8001390:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001398:	b2db      	uxtb	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	2109      	movs	r1, #9
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff fe98 	bl	80010d4 <write_register>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 80013b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013bc:	f04f 0000 	mov.w	r0, #0
 80013c0:	f04f 0100 	mov.w	r1, #0
 80013c4:	04d9      	lsls	r1, r3, #19
 80013c6:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80013ca:	04d0      	lsls	r0, r2, #19
 80013cc:	4a19      	ldr	r2, [pc, #100]	; (8001434 <lora_set_frequency+0x88>)
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	f7fe ff75 	bl	80002c0 <__aeabi_uldivmod>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80013de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	0c02      	lsrs	r2, r0, #16
 80013ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80013f0:	0c0b      	lsrs	r3, r1, #16
 80013f2:	b2d3      	uxtb	r3, r2
 80013f4:	461a      	mov	r2, r3
 80013f6:	2106      	movs	r1, #6
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f7ff fe6b 	bl	80010d4 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80013fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	0a02      	lsrs	r2, r0, #8
 800140c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001410:	0a0b      	lsrs	r3, r1, #8
 8001412:	b2d3      	uxtb	r3, r2
 8001414:	461a      	mov	r2, r3
 8001416:	2107      	movs	r1, #7
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f7ff fe5b 	bl	80010d4 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 800141e:	7c3b      	ldrb	r3, [r7, #16]
 8001420:	461a      	mov	r2, r3
 8001422:	2108      	movs	r1, #8
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f7ff fe55 	bl	80010d4 <write_register>
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	01e84800 	.word	0x01e84800

08001438 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	2b05      	cmp	r3, #5
 8001448:	d802      	bhi.n	8001450 <lora_set_spreading_factor+0x18>
    sf = 6;
 800144a:	2306      	movs	r3, #6
 800144c:	70fb      	strb	r3, [r7, #3]
 800144e:	e004      	b.n	800145a <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	2b0c      	cmp	r3, #12
 8001454:	d901      	bls.n	800145a <lora_set_spreading_factor+0x22>
    sf = 12;
 8001456:	230c      	movs	r3, #12
 8001458:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	2b06      	cmp	r3, #6
 800145e:	d10a      	bne.n	8001476 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8001460:	22c5      	movs	r2, #197	; 0xc5
 8001462:	2131      	movs	r1, #49	; 0x31
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fe35 	bl	80010d4 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 800146a:	220c      	movs	r2, #12
 800146c:	2137      	movs	r1, #55	; 0x37
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fe30 	bl	80010d4 <write_register>
 8001474:	e009      	b.n	800148a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8001476:	22c3      	movs	r2, #195	; 0xc3
 8001478:	2131      	movs	r1, #49	; 0x31
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fe2a 	bl	80010d4 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8001480:	220a      	movs	r2, #10
 8001482:	2137      	movs	r1, #55	; 0x37
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fe25 	bl	80010d4 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800148a:	211e      	movs	r1, #30
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fdea 	bl	8001066 <read_register>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]
  mc2 |= sf << 4;
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	b25a      	sxtb	r2, r3
 800149c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	461a      	mov	r2, r3
 80014aa:	211e      	movs	r1, #30
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fe11 	bl	80010d4 <write_register>

  set_low_data_rate_optimization(lora);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fece 	bl	8001254 <set_low_data_rate_optimization>
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	2120      	movs	r1, #32
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fdfb 	bl	80010d4 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	2121      	movs	r1, #33	; 0x21
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fdf1 	bl	80010d4 <write_register>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <lora_is_transmitting>:

  return read_register(lora, REG_VERSION);
}

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8001502:	2101      	movs	r1, #1
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fdae 	bl	8001066 <read_register>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b03      	cmp	r3, #3
 8001516:	d101      	bne.n	800151c <lora_is_transmitting+0x22>
 8001518:	2305      	movs	r3, #5
 800151a:	e000      	b.n	800151e <lora_is_transmitting+0x24>
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	4611      	mov	r1, r2
 8001532:	461a      	mov	r2, r3
 8001534:	460b      	mov	r3, r1
 8001536:	71fb      	strb	r3, [r7, #7]
 8001538:	4613      	mov	r3, r2
 800153a:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f7ff ffdc 	bl	80014fa <lora_is_transmitting>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8001548:	2305      	movs	r3, #5
 800154a:	e02a      	b.n	80015a2 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 800154c:	2101      	movs	r1, #1
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f7ff fe36 	bl	80011c0 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 f83a 	bl	80015ce <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	7d1b      	ldrb	r3, [r3, #20]
 800155e:	461a      	mov	r2, r3
 8001560:	210d      	movs	r1, #13
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff fdb6 	bl	80010d4 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	7d1b      	ldrb	r3, [r3, #20]
 800156c:	461a      	mov	r2, r3
 800156e:	210e      	movs	r1, #14
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f7ff fdaf 	bl	80010d4 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	461a      	mov	r2, r3
 800157a:	2122      	movs	r1, #34	; 0x22
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f7ff fda9 	bl	80010d4 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8001582:	79bb      	ldrb	r3, [r7, #6]
 8001584:	79fa      	ldrb	r2, [r7, #7]
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7ff fdd7 	bl	800113c <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <lora_send_packet_base+0x72>
    return LORA_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	e004      	b.n	80015a2 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8001598:	2103      	movs	r1, #3
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f7ff fe10 	bl	80011c0 <set_mode>
  return LORA_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	4613      	mov	r3, r2
 80015b6:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 80015b8:	79fa      	ldrb	r2, [r7, #7]
 80015ba:	2302      	movs	r3, #2
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f7ff ffb1 	bl	8001526 <lora_send_packet_base>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 80015d6:	2208      	movs	r2, #8
 80015d8:	2112      	movs	r1, #18
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fd7a 	bl	80010d4 <write_register>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	807b      	strh	r3, [r7, #2]

  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	887a      	ldrh	r2, [r7, #2]
 8001606:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8001608:	6a3a      	ldr	r2, [r7, #32]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2201      	movs	r2, #1
 8001612:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001626:	609a      	str	r2, [r3, #8]
    return LORA_ERROR;
  }
#endif

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fe43 	bl	80012b4 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f7ff fe40 	bl	80012b4 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8001634:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f7ff feb7 	bl	80013ac <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 800163e:	2107      	movs	r1, #7
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7ff fef9 	bl	8001438 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8001646:	210a      	movs	r1, #10
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff ff39 	bl	80014c0 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f7ff fe48 	bl	80012e4 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8001654:	210c      	movs	r1, #12
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f7ff fd05 	bl	8001066 <read_register>
 800165c:	4603      	mov	r3, r0
 800165e:	75fb      	strb	r3, [r7, #23]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	f043 0303 	orr.w	r3, r3, #3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	210c      	movs	r1, #12
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f7ff fd31 	bl	80010d4 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8001672:	2204      	movs	r2, #4
 8001674:	2126      	movs	r1, #38	; 0x26
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f7ff fd2c 	bl	80010d4 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 800167c:	2111      	movs	r1, #17
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7ff fe48 	bl	8001314 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff fe21 	bl	80012cc <lora_mode_standby>

  return LORA_OK;
 800168a:	2300      	movs	r3, #0

}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int32_t timerVal;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim,0);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a37      	ldr	r2, [pc, #220]	; (8001798 <HAL_UART_RxCpltCallback+0xe8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d167      	bne.n	8001790 <HAL_UART_RxCpltCallback+0xe0>
		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);
 80016c0:	2110      	movs	r1, #16
 80016c2:	4836      	ldr	r0, [pc, #216]	; (800179c <HAL_UART_RxCpltCallback+0xec>)
 80016c4:	f002 f97f 	bl	80039c6 <HAL_GPIO_TogglePin>

		char *string;
		memset(buffStr, 0, 2048);
 80016c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016cc:	2100      	movs	r1, #0
 80016ce:	4834      	ldr	r0, [pc, #208]	; (80017a0 <HAL_UART_RxCpltCallback+0xf0>)
 80016d0:	f006 ffc8 	bl	8008664 <memset>
		sprintf(buffStr, "%s", GPS_buffer);
 80016d4:	4a33      	ldr	r2, [pc, #204]	; (80017a4 <HAL_UART_RxCpltCallback+0xf4>)
 80016d6:	4934      	ldr	r1, [pc, #208]	; (80017a8 <HAL_UART_RxCpltCallback+0xf8>)
 80016d8:	4831      	ldr	r0, [pc, #196]	; (80017a0 <HAL_UART_RxCpltCallback+0xf0>)
 80016da:	f006 ffcb 	bl	8008674 <siprintf>
		string = strdup(buffStr);
 80016de:	4830      	ldr	r0, [pc, #192]	; (80017a0 <HAL_UART_RxCpltCallback+0xf0>)
 80016e0:	f006 ffe8 	bl	80086b4 <strdup>
 80016e4:	4603      	mov	r3, r0
 80016e6:	60bb      	str	r3, [r7, #8]

		char* token;
		while ((token = strsep(&string, "\n")) != NULL) {
 80016e8:	e042      	b.n	8001770 <HAL_UART_RxCpltCallback+0xc0>
			memset(nmeaSnt, 0, 80);
 80016ea:	2250      	movs	r2, #80	; 0x50
 80016ec:	2100      	movs	r1, #0
 80016ee:	482f      	ldr	r0, [pc, #188]	; (80017ac <HAL_UART_RxCpltCallback+0xfc>)
 80016f0:	f006 ffb8 	bl	8008664 <memset>
			sprintf(nmeaSnt, "%s\n\r", token);
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	492e      	ldr	r1, [pc, #184]	; (80017b0 <HAL_UART_RxCpltCallback+0x100>)
 80016f8:	482c      	ldr	r0, [pc, #176]	; (80017ac <HAL_UART_RxCpltCallback+0xfc>)
 80016fa:	f006 ffbb 	bl	8008674 <siprintf>
			if (((strstr(nmeaSnt, "$GPRMC") != 0) || (strstr(nmeaSnt, "$GPGLL") != 0) || (strstr(nmeaSnt, "$GPGGA") != 0)) && strlen(nmeaSnt) > 48 && strlen(nmeaSnt) < 65) {
 80016fe:	492d      	ldr	r1, [pc, #180]	; (80017b4 <HAL_UART_RxCpltCallback+0x104>)
 8001700:	482a      	ldr	r0, [pc, #168]	; (80017ac <HAL_UART_RxCpltCallback+0xfc>)
 8001702:	f006 fff9 	bl	80086f8 <strstr>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10d      	bne.n	8001728 <HAL_UART_RxCpltCallback+0x78>
 800170c:	492a      	ldr	r1, [pc, #168]	; (80017b8 <HAL_UART_RxCpltCallback+0x108>)
 800170e:	4827      	ldr	r0, [pc, #156]	; (80017ac <HAL_UART_RxCpltCallback+0xfc>)
 8001710:	f006 fff2 	bl	80086f8 <strstr>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d106      	bne.n	8001728 <HAL_UART_RxCpltCallback+0x78>
 800171a:	4928      	ldr	r1, [pc, #160]	; (80017bc <HAL_UART_RxCpltCallback+0x10c>)
 800171c:	4823      	ldr	r0, [pc, #140]	; (80017ac <HAL_UART_RxCpltCallback+0xfc>)
 800171e:	f006 ffeb 	bl	80086f8 <strstr>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d023      	beq.n	8001770 <HAL_UART_RxCpltCallback+0xc0>
 8001728:	4820      	ldr	r0, [pc, #128]	; (80017ac <HAL_UART_RxCpltCallback+0xfc>)
 800172a:	f7fe fd71 	bl	8000210 <strlen>
 800172e:	4603      	mov	r3, r0
 8001730:	2b30      	cmp	r3, #48	; 0x30
 8001732:	d91d      	bls.n	8001770 <HAL_UART_RxCpltCallback+0xc0>
 8001734:	481d      	ldr	r0, [pc, #116]	; (80017ac <HAL_UART_RxCpltCallback+0xfc>)
 8001736:	f7fe fd6b 	bl	8000210 <strlen>
 800173a:	4603      	mov	r3, r0
 800173c:	2b40      	cmp	r3, #64	; 0x40
 800173e:	d817      	bhi.n	8001770 <HAL_UART_RxCpltCallback+0xc0>
				//Raw Data
				memset(GPS_latest_data, 0, 65);
 8001740:	2241      	movs	r2, #65	; 0x41
 8001742:	2100      	movs	r1, #0
 8001744:	481e      	ldr	r0, [pc, #120]	; (80017c0 <HAL_UART_RxCpltCallback+0x110>)
 8001746:	f006 ff8d 	bl	8008664 <memset>
				memcpy(GPS_latest_data, nmeaSnt, strlen(nmeaSnt));
 800174a:	4818      	ldr	r0, [pc, #96]	; (80017ac <HAL_UART_RxCpltCallback+0xfc>)
 800174c:	f7fe fd60 	bl	8000210 <strlen>
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	4915      	ldr	r1, [pc, #84]	; (80017ac <HAL_UART_RxCpltCallback+0xfc>)
 8001756:	481a      	ldr	r0, [pc, #104]	; (80017c0 <HAL_UART_RxCpltCallback+0x110>)
 8001758:	f006 ff76 	bl	8008648 <memcpy>
				HAL_UART_Transmit(&huart1, (uint8_t*)nmeaSnt, strlen(nmeaSnt), 70);
 800175c:	4813      	ldr	r0, [pc, #76]	; (80017ac <HAL_UART_RxCpltCallback+0xfc>)
 800175e:	f7fe fd57 	bl	8000210 <strlen>
 8001762:	4603      	mov	r3, r0
 8001764:	b29a      	uxth	r2, r3
 8001766:	2346      	movs	r3, #70	; 0x46
 8001768:	4910      	ldr	r1, [pc, #64]	; (80017ac <HAL_UART_RxCpltCallback+0xfc>)
 800176a:	4816      	ldr	r0, [pc, #88]	; (80017c4 <HAL_UART_RxCpltCallback+0x114>)
 800176c:	f005 fd91 	bl	8007292 <HAL_UART_Transmit>
		while ((token = strsep(&string, "\n")) != NULL) {
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	4914      	ldr	r1, [pc, #80]	; (80017c8 <HAL_UART_RxCpltCallback+0x118>)
 8001776:	4618      	mov	r0, r3
 8001778:	f006 ffb9 	bl	80086ee <strsep>
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1b2      	bne.n	80016ea <HAL_UART_RxCpltCallback+0x3a>
			}
		}
		HAL_UART_Receive_DMA(&huart2, GPS_buffer, 2048);
 8001784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001788:	4906      	ldr	r1, [pc, #24]	; (80017a4 <HAL_UART_RxCpltCallback+0xf4>)
 800178a:	4803      	ldr	r0, [pc, #12]	; (8001798 <HAL_UART_RxCpltCallback+0xe8>)
 800178c:	f005 fe13 	bl	80073b6 <HAL_UART_Receive_DMA>
	}
}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000290 	.word	0x20000290
 800179c:	40021400 	.word	0x40021400
 80017a0:	20003b6c 	.word	0x20003b6c
 80017a4:	2000336c 	.word	0x2000336c
 80017a8:	0800900c 	.word	0x0800900c
 80017ac:	2000436c 	.word	0x2000436c
 80017b0:	08009010 	.word	0x08009010
 80017b4:	08009018 	.word	0x08009018
 80017b8:	08009020 	.word	0x08009020
 80017bc:	08009028 	.word	0x08009028
 80017c0:	200043bc 	.word	0x200043bc
 80017c4:	2000024c 	.word	0x2000024c
 80017c8:	08009030 	.word	0x08009030
 80017cc:	00000000 	.word	0x00000000

080017d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  _running = false;
 80017d6:	4b56      	ldr	r3, [pc, #344]	; (8001930 <main+0x160>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
  head_mov = 0;
 80017dc:	4b55      	ldr	r3, [pc, #340]	; (8001934 <main+0x164>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
  tail_mov = 1;
 80017e2:	4b55      	ldr	r3, [pc, #340]	; (8001938 <main+0x168>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
  head_full = 0;
 80017e8:	4b54      	ldr	r3, [pc, #336]	; (800193c <main+0x16c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
  tail_full = 1;
 80017ee:	4b54      	ldr	r3, [pc, #336]	; (8001940 <main+0x170>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
  moving_sum = 0;
 80017f4:	4b53      	ldr	r3, [pc, #332]	; (8001944 <main+0x174>)
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
  moving_avg = 0;
 80017fc:	4b52      	ldr	r3, [pc, #328]	; (8001948 <main+0x178>)
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
  moving_sum_left = 0;
 8001804:	4951      	ldr	r1, [pc, #324]	; (800194c <main+0x17c>)
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	e9c1 2300 	strd	r2, r3, [r1]
  moving_avg_left = 0;
 8001812:	4b4f      	ldr	r3, [pc, #316]	; (8001950 <main+0x180>)
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
  moving_sum_right = 0;
 800181a:	494e      	ldr	r1, [pc, #312]	; (8001954 <main+0x184>)
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	e9c1 2300 	strd	r2, r3, [r1]
  moving_avg_right = 0;
 8001828:	4b4b      	ldr	r3, [pc, #300]	; (8001958 <main+0x188>)
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
  counter = 0;
 8001830:	4b4a      	ldr	r3, [pc, #296]	; (800195c <main+0x18c>)
 8001832:	2200      	movs	r2, #0
 8001834:	801a      	strh	r2, [r3, #0]
  done = 0;
 8001836:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <main+0x190>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
  memset(circular_buf_mov, 0, MOVING_AVG_LEN*sizeof(int16_t));
 800183c:	220a      	movs	r2, #10
 800183e:	2100      	movs	r1, #0
 8001840:	4848      	ldr	r0, [pc, #288]	; (8001964 <main+0x194>)
 8001842:	f006 ff0f 	bl	8008664 <memset>
  memset(circular_buf_mov_right, 0, MOVING_AVG_LEN*sizeof(int16_t));
 8001846:	220a      	movs	r2, #10
 8001848:	2100      	movs	r1, #0
 800184a:	4847      	ldr	r0, [pc, #284]	; (8001968 <main+0x198>)
 800184c:	f006 ff0a 	bl	8008664 <memset>
  memset(circular_buf_full, 0, SEND_LEN*sizeof(int16_t));
 8001850:	f241 32ec 	movw	r2, #5100	; 0x13ec
 8001854:	2100      	movs	r1, #0
 8001856:	4845      	ldr	r0, [pc, #276]	; (800196c <main+0x19c>)
 8001858:	f006 ff04 	bl	8008664 <memset>
  memset(_sampleBuffer, 0, MIC_SAMPLES_PER_PACKET*2*sizeof(int32_t));
 800185c:	f44f 52dc 	mov.w	r2, #7040	; 0x1b80
 8001860:	2100      	movs	r1, #0
 8001862:	4843      	ldr	r0, [pc, #268]	; (8001970 <main+0x1a0>)
 8001864:	f006 fefe 	bl	8008664 <memset>
  arm_fir_init_f32(&S, FILTER_LEN, coeffs, buffer, blockSize);
 8001868:	4b42      	ldr	r3, [pc, #264]	; (8001974 <main+0x1a4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	4b42      	ldr	r3, [pc, #264]	; (8001978 <main+0x1a8>)
 8001870:	4a42      	ldr	r2, [pc, #264]	; (800197c <main+0x1ac>)
 8001872:	215a      	movs	r1, #90	; 0x5a
 8001874:	4842      	ldr	r0, [pc, #264]	; (8001980 <main+0x1b0>)
 8001876:	f7ff fbd7 	bl	8001028 <arm_fir_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800187a:	f001 f94d 	bl	8002b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800187e:	f000 f897 	bl	80019b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001882:	f000 fa67 	bl	8001d54 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001886:	f000 f94b 	bl	8001b20 <MX_SPI1_Init>
  MX_TIM2_Init();
 800188a:	f000 f97f 	bl	8001b8c <MX_TIM2_Init>
  MX_DMA_Init();
 800188e:	f000 fa23 	bl	8001cd8 <MX_DMA_Init>
  MX_SAI1_Init();
 8001892:	f000 f8fb 	bl	8001a8c <MX_SAI1_Init>
  MX_USART2_UART_Init();
 8001896:	f000 f9f5 	bl	8001c84 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800189a:	f000 f9c9 	bl	8001c30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800189e:	2108      	movs	r1, #8
 80018a0:	4838      	ldr	r0, [pc, #224]	; (8001984 <main+0x1b4>)
 80018a2:	f004 ff35 	bl	8006710 <HAL_TIM_IC_Start_IT>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2110      	movs	r1, #16
 80018aa:	4837      	ldr	r0, [pc, #220]	; (8001988 <main+0x1b8>)
 80018ac:	f002 f872 	bl	8003994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 80018b0:	2201      	movs	r2, #1
 80018b2:	2108      	movs	r1, #8
 80018b4:	4834      	ldr	r0, [pc, #208]	; (8001988 <main+0x1b8>)
 80018b6:	f002 f86d 	bl	8003994 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2120      	movs	r1, #32
 80018be:	4832      	ldr	r0, [pc, #200]	; (8001988 <main+0x1b8>)
 80018c0:	f002 f868 	bl	8003994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 80018c4:	2201      	movs	r2, #1
 80018c6:	2120      	movs	r1, #32
 80018c8:	4830      	ldr	r0, [pc, #192]	; (800198c <main+0x1bc>)
 80018ca:	f002 f863 	bl	8003994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018d4:	482e      	ldr	r0, [pc, #184]	; (8001990 <main+0x1c0>)
 80018d6:	f002 f85d 	bl	8003994 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80018da:	2064      	movs	r0, #100	; 0x64
 80018dc:	f001 f98e 	bl	8002bfc <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80018e0:	2201      	movs	r2, #1
 80018e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018e6:	482a      	ldr	r0, [pc, #168]	; (8001990 <main+0x1c0>)
 80018e8:	f002 f854 	bl	8003994 <HAL_GPIO_WritePin>
  HAL_UART_Receive_DMA(&huart2, GPS_buffer, 2048);
 80018ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018f0:	4928      	ldr	r1, [pc, #160]	; (8001994 <main+0x1c4>)
 80018f2:	4829      	ldr	r0, [pc, #164]	; (8001998 <main+0x1c8>)
 80018f4:	f005 fd5f 	bl	80073b6 <HAL_UART_Receive_DMA>

#if LORA_TRANSMIT
  uint8_t res = lora_init(&lora, &hspi1, NSS_GPIO_Port, NSS_Pin, LORA_BASE_FREQUENCY_US);
 80018f8:	a30b      	add	r3, pc, #44	; (adr r3, 8001928 <main+0x158>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	e9cd 2300 	strd	r2, r3, [sp]
 8001902:	2310      	movs	r3, #16
 8001904:	4a25      	ldr	r2, [pc, #148]	; (800199c <main+0x1cc>)
 8001906:	4926      	ldr	r1, [pc, #152]	; (80019a0 <main+0x1d0>)
 8001908:	4826      	ldr	r0, [pc, #152]	; (80019a4 <main+0x1d4>)
 800190a:	f7ff fe6d 	bl	80015e8 <lora_init>
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  if (res != LORA_OK) {
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <main+0x156>
	  HAL_UART_Transmit(&huart1, iterfacing_failed, sizeof(iterfacing_failed), 1000);
 8001918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191c:	2213      	movs	r2, #19
 800191e:	4922      	ldr	r1, [pc, #136]	; (80019a8 <main+0x1d8>)
 8001920:	4822      	ldr	r0, [pc, #136]	; (80019ac <main+0x1dc>)
 8001922:	f005 fcb6 	bl	8007292 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001926:	e7fe      	b.n	8001926 <main+0x156>
 8001928:	3689cac0 	.word	0x3689cac0
 800192c:	00000000 	.word	0x00000000
 8001930:	2000334c 	.word	0x2000334c
 8001934:	20001f2c 	.word	0x20001f2c
 8001938:	20001f30 	.word	0x20001f30
 800193c:	20003320 	.word	0x20003320
 8001940:	20003324 	.word	0x20003324
 8001944:	20003328 	.word	0x20003328
 8001948:	2000332c 	.word	0x2000332c
 800194c:	20003330 	.word	0x20003330
 8001950:	20003338 	.word	0x20003338
 8001954:	20003340 	.word	0x20003340
 8001958:	20003348 	.word	0x20003348
 800195c:	2000334e 	.word	0x2000334e
 8001960:	20003350 	.word	0x20003350
 8001964:	20001f14 	.word	0x20001f14
 8001968:	20001f20 	.word	0x20001f20
 800196c:	20001f34 	.word	0x20001f34
 8001970:	20000394 	.word	0x20000394
 8001974:	20000034 	.word	0x20000034
 8001978:	2000440c 	.word	0x2000440c
 800197c:	08009034 	.word	0x08009034
 8001980:	20004400 	.word	0x20004400
 8001984:	20000204 	.word	0x20000204
 8001988:	40021400 	.word	0x40021400
 800198c:	40021800 	.word	0x40021800
 8001990:	40020c00 	.word	0x40020c00
 8001994:	2000336c 	.word	0x2000336c
 8001998:	20000290 	.word	0x20000290
 800199c:	40020000 	.word	0x40020000
 80019a0:	200001ac 	.word	0x200001ac
 80019a4:	20003354 	.word	0x20003354
 80019a8:	20000008 	.word	0x20000008
 80019ac:	2000024c 	.word	0x2000024c

080019b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b094      	sub	sp, #80	; 0x50
 80019b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b6:	f107 031c 	add.w	r3, r7, #28
 80019ba:	2234      	movs	r2, #52	; 0x34
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f006 fe50 	bl	8008664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c4:	f107 0308 	add.w	r3, r7, #8
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <SystemClock_Config+0xd4>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	4a29      	ldr	r2, [pc, #164]	; (8001a84 <SystemClock_Config+0xd4>)
 80019de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e2:	6413      	str	r3, [r2, #64]	; 0x40
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <SystemClock_Config+0xd4>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019f0:	2300      	movs	r3, #0
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <SystemClock_Config+0xd8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019fc:	4a22      	ldr	r2, [pc, #136]	; (8001a88 <SystemClock_Config+0xd8>)
 80019fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <SystemClock_Config+0xd8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a14:	2301      	movs	r3, #1
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a18:	2310      	movs	r3, #16
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a20:	2300      	movs	r3, #0
 8001a22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a24:	2310      	movs	r3, #16
 8001a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001a2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a32:	2302      	movs	r3, #2
 8001a34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a36:	2302      	movs	r3, #2
 8001a38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 f812 	bl	8004a68 <HAL_RCC_OscConfig>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a4a:	f000 fd15 	bl	8002478 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a4e:	230f      	movs	r3, #15
 8001a50:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a52:	2302      	movs	r3, #2
 8001a54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	2102      	movs	r1, #2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 ffc6 	bl	80039fc <HAL_RCC_ClockConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001a76:	f000 fcff 	bl	8002478 <Error_Handler>
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	3750      	adds	r7, #80	; 0x50
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40007000 	.word	0x40007000

08001a8c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001a90:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <MX_SAI1_Init+0x84>)
 8001a92:	4a20      	ldr	r2, [pc, #128]	; (8001b14 <MX_SAI1_Init+0x88>)
 8001a94:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001a96:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <MX_SAI1_Init+0x84>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001a9c:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <MX_SAI1_Init+0x84>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <MX_SAI1_Init+0x84>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <MX_SAI1_Init+0x84>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <MX_SAI1_Init+0x84>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <MX_SAI1_Init+0x84>)
 8001ab6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001aba:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_SAI1_Init+0x84>)
 8001abe:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001ac2:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <MX_SAI1_Init+0x84>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_SAI1_Init+0x84>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <MX_SAI1_Init+0x84>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	2202      	movs	r2, #2
 8001ada:	2100      	movs	r1, #0
 8001adc:	480c      	ldr	r0, [pc, #48]	; (8001b10 <MX_SAI1_Init+0x84>)
 8001ade:	f003 fa61 	bl	8004fa4 <HAL_SAI_InitProtocol>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8001ae8:	f000 fcc6 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  if ((HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*) _sampleBuffer, MIC_SAMPLES_PER_PACKET * 2)) == HAL_OK) {
 8001aec:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001af0:	4909      	ldr	r1, [pc, #36]	; (8001b18 <MX_SAI1_Init+0x8c>)
 8001af2:	4807      	ldr	r0, [pc, #28]	; (8001b10 <MX_SAI1_Init+0x84>)
 8001af4:	f003 fbb2 	bl	800525c <HAL_SAI_Receive_DMA>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d106      	bne.n	8001b0c <MX_SAI1_Init+0x80>
	  HAL_Delay(1000);
 8001afe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b02:	f001 f87b 	bl	8002bfc <HAL_Delay>
	  _running = true;
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <MX_SAI1_Init+0x90>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END SAI1_Init 2 */

}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	200000c4 	.word	0x200000c4
 8001b14:	40015824 	.word	0x40015824
 8001b18:	20000394 	.word	0x20000394
 8001b1c:	2000334c 	.word	0x2000334c

08001b20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b24:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b26:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <MX_SPI1_Init+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b54:	2238      	movs	r2, #56	; 0x38
 8001b56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b6c:	220a      	movs	r2, #10
 8001b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b72:	f003 fe7f 	bl	8005874 <HAL_SPI_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b7c:	f000 fc7c 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200001ac 	.word	0x200001ac
 8001b88:	40013000 	.word	0x40013000

08001b8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b92:	f107 0310 	add.w	r3, r7, #16
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ba8:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <MX_TIM2_Init+0xa0>)
 8001baa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bb0:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <MX_TIM2_Init+0xa0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <MX_TIM2_Init+0xa0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <MX_TIM2_Init+0xa0>)
 8001bbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <MX_TIM2_Init+0xa0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <MX_TIM2_Init+0xa0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001bd0:	4816      	ldr	r0, [pc, #88]	; (8001c2c <MX_TIM2_Init+0xa0>)
 8001bd2:	f004 fd4d 	bl	8006670 <HAL_TIM_IC_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bdc:	f000 fc4c 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4619      	mov	r1, r3
 8001bee:	480f      	ldr	r0, [pc, #60]	; (8001c2c <MX_TIM2_Init+0xa0>)
 8001bf0:	f005 fa72 	bl	80070d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bfa:	f000 fc3d 	bl	8002478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c02:	2301      	movs	r3, #1
 8001c04:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001c0e:	463b      	mov	r3, r7
 8001c10:	2208      	movs	r2, #8
 8001c12:	4619      	mov	r1, r3
 8001c14:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_TIM2_Init+0xa0>)
 8001c16:	f004 ffab 	bl	8006b70 <HAL_TIM_IC_ConfigChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001c20:	f000 fc2a 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c24:	bf00      	nop
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000204 	.word	0x20000204

08001c30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <MX_USART1_UART_Init+0x50>)
 8001c38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c56:	220c      	movs	r2, #12
 8001c58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_USART1_UART_Init+0x4c>)
 8001c68:	f005 fac6 	bl	80071f8 <HAL_UART_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c72:	f000 fc01 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000024c 	.word	0x2000024c
 8001c80:	40011000 	.word	0x40011000

08001c84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <MX_USART2_UART_Init+0x4c>)
 8001c8a:	4a12      	ldr	r2, [pc, #72]	; (8001cd4 <MX_USART2_UART_Init+0x50>)
 8001c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <MX_USART2_UART_Init+0x4c>)
 8001c90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <MX_USART2_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MX_USART2_UART_Init+0x4c>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <MX_USART2_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MX_USART2_UART_Init+0x4c>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <MX_USART2_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <MX_USART2_UART_Init+0x4c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <MX_USART2_UART_Init+0x4c>)
 8001cbc:	f005 fa9c 	bl	80071f8 <HAL_UART_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cc6:	f000 fbd7 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000290 	.word	0x20000290
 8001cd4:	40004400 	.word	0x40004400

08001cd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <MX_DMA_Init+0x78>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a1a      	ldr	r2, [pc, #104]	; (8001d50 <MX_DMA_Init+0x78>)
 8001ce8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <MX_DMA_Init+0x78>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_DMA_Init+0x78>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a13      	ldr	r2, [pc, #76]	; (8001d50 <MX_DMA_Init+0x78>)
 8001d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_DMA_Init+0x78>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2010      	movs	r0, #16
 8001d1c:	f001 f86d 	bl	8002dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d20:	2010      	movs	r0, #16
 8001d22:	f001 f886 	bl	8002e32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	203c      	movs	r0, #60	; 0x3c
 8001d2c:	f001 f865 	bl	8002dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001d30:	203c      	movs	r0, #60	; 0x3c
 8001d32:	f001 f87e 	bl	8002e32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2046      	movs	r0, #70	; 0x46
 8001d3c:	f001 f85d 	bl	8002dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001d40:	2046      	movs	r0, #70	; 0x46
 8001d42:	f001 f876 	bl	8002e32 <HAL_NVIC_EnableIRQ>

}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800

08001d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	; 0x30
 8001d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
 8001d6e:	4b59      	ldr	r3, [pc, #356]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a58      	ldr	r2, [pc, #352]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001d74:	f043 0310 	orr.w	r3, r3, #16
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b56      	ldr	r3, [pc, #344]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	61bb      	str	r3, [r7, #24]
 8001d84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	4b52      	ldr	r3, [pc, #328]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a51      	ldr	r2, [pc, #324]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b4f      	ldr	r3, [pc, #316]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	4b4b      	ldr	r3, [pc, #300]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a4a      	ldr	r2, [pc, #296]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001dac:	f043 0320 	orr.w	r3, r3, #32
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b48      	ldr	r3, [pc, #288]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b44      	ldr	r3, [pc, #272]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a43      	ldr	r2, [pc, #268]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a3c      	ldr	r2, [pc, #240]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b3a      	ldr	r3, [pc, #232]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a35      	ldr	r2, [pc, #212]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a2e      	ldr	r2, [pc, #184]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <MX_GPIO_Init+0x180>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2138      	movs	r1, #56	; 0x38
 8001e32:	4829      	ldr	r0, [pc, #164]	; (8001ed8 <MX_GPIO_Init+0x184>)
 8001e34:	f001 fdae 	bl	8003994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2110      	movs	r1, #16
 8001e3c:	4827      	ldr	r0, [pc, #156]	; (8001edc <MX_GPIO_Init+0x188>)
 8001e3e:	f001 fda9 	bl	8003994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001e42:	2200      	movs	r2, #0
 8001e44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e48:	4825      	ldr	r0, [pc, #148]	; (8001ee0 <MX_GPIO_Init+0x18c>)
 8001e4a:	f001 fda3 	bl	8003994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2120      	movs	r1, #32
 8001e52:	4824      	ldr	r0, [pc, #144]	; (8001ee4 <MX_GPIO_Init+0x190>)
 8001e54:	f001 fd9e 	bl	8003994 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF3 PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e58:	2338      	movs	r3, #56	; 0x38
 8001e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	481a      	ldr	r0, [pc, #104]	; (8001ed8 <MX_GPIO_Init+0x184>)
 8001e70:	f001 fbfc 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8001e74:	2310      	movs	r3, #16
 8001e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4814      	ldr	r0, [pc, #80]	; (8001edc <MX_GPIO_Init+0x188>)
 8001e8c:	f001 fbee 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e96:	2301      	movs	r3, #1
 8001e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001ea2:	f107 031c 	add.w	r3, r7, #28
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <MX_GPIO_Init+0x18c>)
 8001eaa:	f001 fbdf 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001eae:	2320      	movs	r3, #32
 8001eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ebe:	f107 031c 	add.w	r3, r7, #28
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4807      	ldr	r0, [pc, #28]	; (8001ee4 <MX_GPIO_Init+0x190>)
 8001ec6:	f001 fbd1 	bl	800366c <HAL_GPIO_Init>

}
 8001eca:	bf00      	nop
 8001ecc:	3730      	adds	r7, #48	; 0x30
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40021400 	.word	0x40021400
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	40020c00 	.word	0x40020c00
 8001ee4:	40021800 	.word	0x40021800

08001ee8 <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	sendData(_sampleBuffer);
 8001ef0:	4803      	ldr	r0, [pc, #12]	; (8001f00 <HAL_SAI_RxHalfCpltCallback+0x18>)
 8001ef2:	f000 f815 	bl	8001f20 <sendData>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000394 	.word	0x20000394

08001f04 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	sendData(&_sampleBuffer[MIC_SAMPLES_PER_PACKET]);
 8001f0c:	4803      	ldr	r0, [pc, #12]	; (8001f1c <HAL_SAI_RxCpltCallback+0x18>)
 8001f0e:	f000 f807 	bl	8001f20 <sendData>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20001154 	.word	0x20001154

08001f20 <sendData>:

void sendData(volatile int32_t *data_in) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	f5ad 5d07 	sub.w	sp, sp, #8640	; 0x21c0
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f2e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f32:	6018      	str	r0, [r3, #0]

	float data_in_float[MIC_SAMPLES_PER_PACKET / 2];
	float filt[MIC_SAMPLES_PER_PACKET / 2];
	volatile int32_t *data_in_tmp = data_in;
 8001f34:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f38:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001f42:	f102 0214 	add.w	r2, r2, #20
 8001f46:	6013      	str	r3, [r2, #0]
	for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001f4e:	f102 0212 	add.w	r2, r2, #18
 8001f52:	8013      	strh	r3, [r2, #0]
 8001f54:	e03a      	b.n	8001fcc <sendData+0xac>
		int16_t tmp = (int16_t) ((data_in_tmp[0]>>8) & 0xffff);
 8001f56:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001f5a:	f103 0314 	add.w	r3, r3, #20
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	121b      	asrs	r3, r3, #8
 8001f64:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001f68:	f102 0206 	add.w	r2, r2, #6
 8001f6c:	8013      	strh	r3, [r2, #0]
		data_in_float[i] = (float) tmp;
 8001f6e:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001f72:	f103 0312 	add.w	r3, r3, #18
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001f7c:	f102 0206 	add.w	r2, r2, #6
 8001f80:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f84:	ee07 2a90 	vmov	s15, r2
 8001f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001f90:	f102 0218 	add.w	r2, r2, #24
 8001f94:	f2a2 62f4 	subw	r2, r2, #1780	; 0x6f4
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	edc3 7a00 	vstr	s15, [r3]
		data_in_tmp += 2;
 8001fa0:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001fa4:	f103 0314 	add.w	r3, r3, #20
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	3308      	adds	r3, #8
 8001fac:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001fb0:	f102 0214 	add.w	r2, r2, #20
 8001fb4:	6013      	str	r3, [r2, #0]
	for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8001fb6:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001fba:	f103 0312 	add.w	r3, r3, #18
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001fc6:	f102 0212 	add.w	r2, r2, #18
 8001fca:	8013      	strh	r3, [r2, #0]
 8001fcc:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001fd0:	f103 0312 	add.w	r3, r3, #18
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8001fda:	d3bc      	bcc.n	8001f56 <sendData+0x36>
	}
	arm_fir_f32(&S, data_in_float, filt, blockSize);
 8001fdc:	4bb0      	ldr	r3, [pc, #704]	; (80022a0 <sendData+0x380>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8001fe4:	f102 0204 	add.w	r2, r2, #4
 8001fe8:	f507 51d7 	add.w	r1, r7, #6880	; 0x1ae0
 8001fec:	f101 0104 	add.w	r1, r1, #4
 8001ff0:	48ac      	ldr	r0, [pc, #688]	; (80022a4 <sendData+0x384>)
 8001ff2:	f7fe fae7 	bl	80005c4 <arm_fir_f32>


  if (_running) {
 8001ff6:	4bac      	ldr	r3, [pc, #688]	; (80022a8 <sendData+0x388>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8217 	beq.w	800242e <sendData+0x50e>
      for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8002000:	2300      	movs	r3, #0
 8002002:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002006:	f102 0210 	add.w	r2, r2, #16
 800200a:	8013      	strh	r3, [r2, #0]
 800200c:	e206      	b.n	800241c <sendData+0x4fc>

        moving_sum += (int16_t) fabsf(filt[i]); // * abs(sample_right);
 800200e:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002012:	f103 0310 	add.w	r3, r3, #16
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 800201c:	f102 0218 	add.w	r2, r2, #24
 8002020:	f6a2 52d4 	subw	r2, r2, #3540	; 0xdd4
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	eef0 7ae7 	vabs.f32	s15, s15
 8002030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002034:	ee17 3a90 	vmov	r3, s15
 8002038:	b21b      	sxth	r3, r3
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002042:	4b9a      	ldr	r3, [pc, #616]	; (80022ac <sendData+0x38c>)
 8002044:	edd3 7a00 	vldr	s15, [r3]
 8002048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800204c:	4b97      	ldr	r3, [pc, #604]	; (80022ac <sendData+0x38c>)
 800204e:	edc3 7a00 	vstr	s15, [r3]
        moving_sum -= (int16_t) abs(circular_buf_mov[tail_mov]); // * abs(circular_buf_mov_right[tail_mov]);
 8002052:	4b96      	ldr	r3, [pc, #600]	; (80022ac <sendData+0x38c>)
 8002054:	ed93 7a00 	vldr	s14, [r3]
 8002058:	4b95      	ldr	r3, [pc, #596]	; (80022b0 <sendData+0x390>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a95      	ldr	r2, [pc, #596]	; (80022b4 <sendData+0x394>)
 800205e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002062:	2b00      	cmp	r3, #0
 8002064:	bfb8      	it	lt
 8002066:	425b      	neglt	r3, r3
 8002068:	b29b      	uxth	r3, r3
 800206a:	b21b      	sxth	r3, r3
 800206c:	ee07 3a90 	vmov	s15, r3
 8002070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002078:	4b8c      	ldr	r3, [pc, #560]	; (80022ac <sendData+0x38c>)
 800207a:	edc3 7a00 	vstr	s15, [r3]
    	circular_buf_mov[tail_mov] = (int16_t) filt[i];
 800207e:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002082:	f103 0310 	add.w	r3, r3, #16
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 800208c:	f102 0218 	add.w	r2, r2, #24
 8002090:	f6a2 52d4 	subw	r2, r2, #3540	; 0xdd4
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	edd3 7a00 	vldr	s15, [r3]
 800209c:	4b84      	ldr	r3, [pc, #528]	; (80022b0 <sendData+0x390>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020a4:	ee17 2a90 	vmov	r2, s15
 80020a8:	b211      	sxth	r1, r2
 80020aa:	4a82      	ldr	r2, [pc, #520]	; (80022b4 <sendData+0x394>)
 80020ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    	circular_buf_full[tail_full] = (int16_t) filt[i];
 80020b0:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80020b4:	f103 0310 	add.w	r3, r3, #16
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 80020be:	f102 0218 	add.w	r2, r2, #24
 80020c2:	f6a2 52d4 	subw	r2, r2, #3540	; 0xdd4
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	edd3 7a00 	vldr	s15, [r3]
 80020ce:	4b7a      	ldr	r3, [pc, #488]	; (80022b8 <sendData+0x398>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020d6:	ee17 2a90 	vmov	r2, s15
 80020da:	b211      	sxth	r1, r2
 80020dc:	4a77      	ldr	r2, [pc, #476]	; (80022bc <sendData+0x39c>)
 80020de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        moving_avg = moving_sum / MOVING_AVG_LEN;
 80020e2:	4b72      	ldr	r3, [pc, #456]	; (80022ac <sendData+0x38c>)
 80020e4:	ed93 7a00 	vldr	s14, [r3]
 80020e8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80020ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020f0:	4b73      	ldr	r3, [pc, #460]	; (80022c0 <sendData+0x3a0>)
 80020f2:	edc3 7a00 	vstr	s15, [r3]

    	if ((counter > 0) && (!done)){
 80020f6:	4b73      	ldr	r3, [pc, #460]	; (80022c4 <sendData+0x3a4>)
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 811e 	beq.w	800233c <sendData+0x41c>
 8002100:	4b71      	ldr	r3, [pc, #452]	; (80022c8 <sendData+0x3a8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	f040 8119 	bne.w	800233c <sendData+0x41c>
    		counter++;
 800210a:	4b6e      	ldr	r3, [pc, #440]	; (80022c4 <sendData+0x3a4>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	3301      	adds	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	4b6c      	ldr	r3, [pc, #432]	; (80022c4 <sendData+0x3a4>)
 8002114:	801a      	strh	r2, [r3, #0]
    		if (counter == (SEND_LEN/2)){ // TODO: need to change this to SEND_LEN-100;
 8002116:	4b6b      	ldr	r3, [pc, #428]	; (80022c4 <sendData+0x3a4>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	f240 42fb 	movw	r2, #1275	; 0x4fb
 800211e:	4293      	cmp	r3, r2
 8002120:	f040 810c 	bne.w	800233c <sendData+0x41c>

    			for(int delay = 0; delay < NODE_DELAY; delay++); // non-blocking delay used to offset the transmissions of each node to prevent garbled transmissions
 8002124:	2300      	movs	r3, #0
 8002126:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 800212a:	f102 020c 	add.w	r2, r2, #12
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	e00a      	b.n	8002148 <sendData+0x228>
 8002132:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002136:	f103 030c 	add.w	r3, r3, #12
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002142:	f102 020c 	add.w	r2, r2, #12
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800214c:	f103 030c 	add.w	r3, r3, #12
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	dbed      	blt.n	8002132 <sendData+0x212>
 8002156:	4b5d      	ldr	r3, [pc, #372]	; (80022cc <sendData+0x3ac>)
 8002158:	681a      	ldr	r2, [r3, #0]

    			uint8_t metaData[12];
    			memcpy(metaData, &startPadding, 4);
 800215a:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800215e:	f103 0318 	add.w	r3, r3, #24
 8002162:	f5a3 635e 	sub.w	r3, r3, #3552	; 0xde0
 8002166:	601a      	str	r2, [r3, #0]
    			memcpy(metaData+4, &timerVal, 4);
 8002168:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800216c:	f103 0318 	add.w	r3, r3, #24
 8002170:	3304      	adds	r3, #4
 8002172:	4a57      	ldr	r2, [pc, #348]	; (80022d0 <sendData+0x3b0>)
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	601a      	str	r2, [r3, #0]
    			memcpy(metaData+8, &devID, 4);
 8002178:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 800217c:	f103 0318 	add.w	r3, r3, #24
 8002180:	3308      	adds	r3, #8
 8002182:	4a54      	ldr	r2, [pc, #336]	; (80022d4 <sendData+0x3b4>)
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	601a      	str	r2, [r3, #0]

    			uint8_t sendBuf[SEND_LEN*2];
    			memcpy(sendBuf, &circular_buf_full[tail_full], ((SEND_LEN)-tail_full)*2);
 8002188:	4b4b      	ldr	r3, [pc, #300]	; (80022b8 <sendData+0x398>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4a4b      	ldr	r2, [pc, #300]	; (80022bc <sendData+0x39c>)
 8002190:	1899      	adds	r1, r3, r2
 8002192:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <sendData+0x398>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f5c3 631f 	rsb	r3, r3, #2544	; 0x9f0
 800219a:	3306      	adds	r3, #6
 800219c:	005a      	lsls	r2, r3, #1
 800219e:	f107 0318 	add.w	r3, r7, #24
 80021a2:	3b10      	subs	r3, #16
 80021a4:	4618      	mov	r0, r3
 80021a6:	f006 fa4f 	bl	8008648 <memcpy>
    			memcpy(&sendBuf[(SEND_LEN-tail_full)*2], circular_buf_full, tail_full*2);
 80021aa:	4b43      	ldr	r3, [pc, #268]	; (80022b8 <sendData+0x398>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f5c3 631f 	rsb	r3, r3, #2544	; 0x9f0
 80021b2:	3306      	adds	r3, #6
 80021b4:	005a      	lsls	r2, r3, #1
 80021b6:	f107 0318 	add.w	r3, r7, #24
 80021ba:	3b10      	subs	r3, #16
 80021bc:	1898      	adds	r0, r3, r2
 80021be:	4b3e      	ldr	r3, [pc, #248]	; (80022b8 <sendData+0x398>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	461a      	mov	r2, r3
 80021c6:	493d      	ldr	r1, [pc, #244]	; (80022bc <sendData+0x39c>)
 80021c8:	f006 fa3e 	bl	8008648 <memcpy>

#if LORA_TRANSMIT
    			uint8_t packet_res = lora_send_packet(&lora, metaData, 12);
 80021cc:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 80021d0:	f103 0318 	add.w	r3, r3, #24
 80021d4:	220c      	movs	r2, #12
 80021d6:	4619      	mov	r1, r3
 80021d8:	483f      	ldr	r0, [pc, #252]	; (80022d8 <sendData+0x3b8>)
 80021da:	f7ff f9e6 	bl	80015aa <lora_send_packet>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80021e6:	f103 0318 	add.w	r3, r3, #24
 80021ea:	f6a3 53e1 	subw	r3, r3, #3553	; 0xde1
 80021ee:	701a      	strb	r2, [r3, #0]

    			if (packet_res != LORA_OK) {
 80021f0:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80021f4:	f103 0318 	add.w	r3, r3, #24
 80021f8:	f6a3 53e1 	subw	r3, r3, #3553	; 0xde1
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <sendData+0x2f8>
    				HAL_UART_Transmit(&huart1, &packet_res, sizeof(packet_res), 1000);
 8002202:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8002206:	f101 0117 	add.w	r1, r1, #23
 800220a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220e:	2201      	movs	r2, #1
 8002210:	4832      	ldr	r0, [pc, #200]	; (80022dc <sendData+0x3bc>)
 8002212:	f005 f83e 	bl	8007292 <HAL_UART_Transmit>
 8002216:	e006      	b.n	8002226 <sendData+0x306>
    			}
    			else {
    				HAL_UART_Transmit(&huart1, transmission_success, sizeof(transmission_success), 1000);
 8002218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221c:	2215      	movs	r2, #21
 800221e:	4930      	ldr	r1, [pc, #192]	; (80022e0 <sendData+0x3c0>)
 8002220:	482e      	ldr	r0, [pc, #184]	; (80022dc <sendData+0x3bc>)
 8002222:	f005 f836 	bl	8007292 <HAL_UART_Transmit>
    			}

    			while(lora_is_transmitting(&lora)); // non-blocking delay
 8002226:	bf00      	nop
 8002228:	482b      	ldr	r0, [pc, #172]	; (80022d8 <sendData+0x3b8>)
 800222a:	f7ff f966 	bl	80014fa <lora_is_transmitting>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f9      	bne.n	8002228 <sendData+0x308>
    		    HAL_UART_Transmit(&huart1, (uint8_t*) sendBuf, SEND_LEN*2, 1000);
#endif

#if LORA_TRANSMIT

    			for(int send_loop_cnt = 0; send_loop_cnt < ((SEND_LEN*2)/255 + ((SEND_LEN*2) % 255 != 0)); send_loop_cnt++){
 8002234:	2300      	movs	r3, #0
 8002236:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 800223a:	f102 0208 	add.w	r2, r2, #8
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e06d      	b.n	800231e <sendData+0x3fe>
    				packet_res = lora_send_packet(&lora, sendBuf+(255*send_loop_cnt), 255);
 8002242:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002246:	f103 0308 	add.w	r3, r3, #8
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4613      	mov	r3, r2
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	1a9b      	subs	r3, r3, r2
 8002252:	461a      	mov	r2, r3
 8002254:	f107 0318 	add.w	r3, r7, #24
 8002258:	3b10      	subs	r3, #16
 800225a:	4413      	add	r3, r2
 800225c:	22ff      	movs	r2, #255	; 0xff
 800225e:	4619      	mov	r1, r3
 8002260:	481d      	ldr	r0, [pc, #116]	; (80022d8 <sendData+0x3b8>)
 8002262:	f7ff f9a2 	bl	80015aa <lora_send_packet>
 8002266:	4603      	mov	r3, r0
 8002268:	461a      	mov	r2, r3
 800226a:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800226e:	f103 0318 	add.w	r3, r3, #24
 8002272:	f6a3 53e1 	subw	r3, r3, #3553	; 0xde1
 8002276:	701a      	strb	r2, [r3, #0]
    				if (packet_res != LORA_OK) {
 8002278:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800227c:	f103 0318 	add.w	r3, r3, #24
 8002280:	f6a3 53e1 	subw	r3, r3, #3553	; 0xde1
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d02c      	beq.n	80022e4 <sendData+0x3c4>
    					HAL_UART_Transmit(&huart1, &packet_res, sizeof(packet_res), 1000);
 800228a:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800228e:	f101 0117 	add.w	r1, r1, #23
 8002292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002296:	2201      	movs	r2, #1
 8002298:	4810      	ldr	r0, [pc, #64]	; (80022dc <sendData+0x3bc>)
 800229a:	f004 fffa 	bl	8007292 <HAL_UART_Transmit>
 800229e:	e028      	b.n	80022f2 <sendData+0x3d2>
 80022a0:	20000034 	.word	0x20000034
 80022a4:	20004400 	.word	0x20004400
 80022a8:	2000334c 	.word	0x2000334c
 80022ac:	20003328 	.word	0x20003328
 80022b0:	20001f30 	.word	0x20001f30
 80022b4:	20001f14 	.word	0x20001f14
 80022b8:	20003324 	.word	0x20003324
 80022bc:	20001f34 	.word	0x20001f34
 80022c0:	2000332c 	.word	0x2000332c
 80022c4:	2000334e 	.word	0x2000334e
 80022c8:	20003350 	.word	0x20003350
 80022cc:	20000004 	.word	0x20000004
 80022d0:	20004c50 	.word	0x20004c50
 80022d4:	20000000 	.word	0x20000000
 80022d8:	20003354 	.word	0x20003354
 80022dc:	2000024c 	.word	0x2000024c
 80022e0:	2000001c 	.word	0x2000001c
    				}
    				else {
    					HAL_UART_Transmit(&huart1, transmission_success, sizeof(transmission_success), 1000);
 80022e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e8:	2215      	movs	r2, #21
 80022ea:	4954      	ldr	r1, [pc, #336]	; (800243c <sendData+0x51c>)
 80022ec:	4854      	ldr	r0, [pc, #336]	; (8002440 <sendData+0x520>)
 80022ee:	f004 ffd0 	bl	8007292 <HAL_UART_Transmit>
    				}
    	    		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_3);
 80022f2:	2108      	movs	r1, #8
 80022f4:	4853      	ldr	r0, [pc, #332]	; (8002444 <sendData+0x524>)
 80022f6:	f001 fb66 	bl	80039c6 <HAL_GPIO_TogglePin>
    				while(lora_is_transmitting(&lora)); // non-blocking delay
 80022fa:	bf00      	nop
 80022fc:	4852      	ldr	r0, [pc, #328]	; (8002448 <sendData+0x528>)
 80022fe:	f7ff f8fc 	bl	80014fa <lora_is_transmitting>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f9      	bne.n	80022fc <sendData+0x3dc>
    			for(int send_loop_cnt = 0; send_loop_cnt < ((SEND_LEN*2)/255 + ((SEND_LEN*2) % 255 != 0)); send_loop_cnt++){
 8002308:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800230c:	f103 0308 	add.w	r3, r3, #8
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3301      	adds	r3, #1
 8002314:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002318:	f102 0208 	add.w	r2, r2, #8
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002322:	f103 0308 	add.w	r3, r3, #8
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b13      	cmp	r3, #19
 800232a:	dd8a      	ble.n	8002242 <sendData+0x322>
    			}
#endif

        		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	2108      	movs	r1, #8
 8002330:	4844      	ldr	r0, [pc, #272]	; (8002444 <sendData+0x524>)
 8002332:	f001 fb2f 	bl	8003994 <HAL_GPIO_WritePin>
    			done = 1;
 8002336:	4b45      	ldr	r3, [pc, #276]	; (800244c <sendData+0x52c>)
 8002338:	2201      	movs	r2, #1
 800233a:	601a      	str	r2, [r3, #0]
    		}
    	}

    	if ((moving_avg >= MOVING_AVG_THRESHOLD) && (counter == 0)){
 800233c:	4b44      	ldr	r3, [pc, #272]	; (8002450 <sendData+0x530>)
 800233e:	edd3 7a00 	vldr	s15, [r3]
 8002342:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002454 <sendData+0x534>
 8002346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800234a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234e:	db17      	blt.n	8002380 <sendData+0x460>
 8002350:	4b41      	ldr	r3, [pc, #260]	; (8002458 <sendData+0x538>)
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d113      	bne.n	8002380 <sendData+0x460>
    		timerVal = TIM2->CNT;
 8002358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	461a      	mov	r2, r3
 8002360:	4b3e      	ldr	r3, [pc, #248]	; (800245c <sendData+0x53c>)
 8002362:	601a      	str	r2, [r3, #0]
    		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8002364:	2200      	movs	r2, #0
 8002366:	2108      	movs	r1, #8
 8002368:	4836      	ldr	r0, [pc, #216]	; (8002444 <sendData+0x524>)
 800236a:	f001 fb13 	bl	8003994 <HAL_GPIO_WritePin>
    		counter += 1;
 800236e:	4b3a      	ldr	r3, [pc, #232]	; (8002458 <sendData+0x538>)
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	3301      	adds	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	4b38      	ldr	r3, [pc, #224]	; (8002458 <sendData+0x538>)
 8002378:	801a      	strh	r2, [r3, #0]
    		done = 0;
 800237a:	4b34      	ldr	r3, [pc, #208]	; (800244c <sendData+0x52c>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]

    	}
        tail_mov = (tail_mov + 1) % (MOVING_AVG_LEN);
 8002380:	4b37      	ldr	r3, [pc, #220]	; (8002460 <sendData+0x540>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	1c59      	adds	r1, r3, #1
 8002386:	4b37      	ldr	r3, [pc, #220]	; (8002464 <sendData+0x544>)
 8002388:	fba3 2301 	umull	r2, r3, r3, r1
 800238c:	089a      	lsrs	r2, r3, #2
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	1aca      	subs	r2, r1, r3
 8002396:	4b32      	ldr	r3, [pc, #200]	; (8002460 <sendData+0x540>)
 8002398:	601a      	str	r2, [r3, #0]
        head_mov = (head_mov + 1) % (MOVING_AVG_LEN);
 800239a:	4b33      	ldr	r3, [pc, #204]	; (8002468 <sendData+0x548>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	1c59      	adds	r1, r3, #1
 80023a0:	4b30      	ldr	r3, [pc, #192]	; (8002464 <sendData+0x544>)
 80023a2:	fba3 2301 	umull	r2, r3, r3, r1
 80023a6:	089a      	lsrs	r2, r3, #2
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	1aca      	subs	r2, r1, r3
 80023b0:	4b2d      	ldr	r3, [pc, #180]	; (8002468 <sendData+0x548>)
 80023b2:	601a      	str	r2, [r3, #0]

        tail_full = (tail_full + 1) % (SEND_LEN);
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <sendData+0x54c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	0853      	lsrs	r3, r2, #1
 80023bc:	492c      	ldr	r1, [pc, #176]	; (8002470 <sendData+0x550>)
 80023be:	fba1 1303 	umull	r1, r3, r1, r3
 80023c2:	0a9b      	lsrs	r3, r3, #10
 80023c4:	f640 11f6 	movw	r1, #2550	; 0x9f6
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	4a27      	ldr	r2, [pc, #156]	; (800246c <sendData+0x54c>)
 80023d0:	6013      	str	r3, [r2, #0]
        head_full = (head_full + 1) % (SEND_LEN);
 80023d2:	4b28      	ldr	r3, [pc, #160]	; (8002474 <sendData+0x554>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	0853      	lsrs	r3, r2, #1
 80023da:	4925      	ldr	r1, [pc, #148]	; (8002470 <sendData+0x550>)
 80023dc:	fba1 1303 	umull	r1, r3, r1, r3
 80023e0:	0a9b      	lsrs	r3, r3, #10
 80023e2:	f640 11f6 	movw	r1, #2550	; 0x9f6
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	4a21      	ldr	r2, [pc, #132]	; (8002474 <sendData+0x554>)
 80023ee:	6013      	str	r3, [r2, #0]

        data_in += 2;
 80023f0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80023f4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80023f8:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 80023fc:	f5a2 72ea 	sub.w	r2, r2, #468	; 0x1d4
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	3208      	adds	r2, #8
 8002404:	601a      	str	r2, [r3, #0]
      for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8002406:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800240a:	f103 0310 	add.w	r3, r3, #16
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002416:	f102 0210 	add.w	r2, r2, #16
 800241a:	8013      	strh	r3, [r2, #0]
 800241c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002420:	f103 0310 	add.w	r3, r3, #16
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 800242a:	f4ff adf0 	bcc.w	800200e <sendData+0xee>
      }


  }
}
 800242e:	bf00      	nop
 8002430:	f507 5707 	add.w	r7, r7, #8640	; 0x21c0
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	2000001c 	.word	0x2000001c
 8002440:	2000024c 	.word	0x2000024c
 8002444:	40021400 	.word	0x40021400
 8002448:	20003354 	.word	0x20003354
 800244c:	20003350 	.word	0x20003350
 8002450:	2000332c 	.word	0x2000332c
 8002454:	42c80000 	.word	0x42c80000
 8002458:	2000334e 	.word	0x2000334e
 800245c:	20004c50 	.word	0x20004c50
 8002460:	20001f30 	.word	0x20001f30
 8002464:	cccccccd 	.word	0xcccccccd
 8002468:	20001f2c 	.word	0x20001f2c
 800246c:	20003324 	.word	0x20003324
 8002470:	cd9a6735 	.word	0xcd9a6735
 8002474:	20003320 	.word	0x20003320

08002478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800247c:	b672      	cpsid	i
}
 800247e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002480:	e7fe      	b.n	8002480 <Error_Handler+0x8>
	...

08002484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <HAL_MspInit+0x4c>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a0f      	ldr	r2, [pc, #60]	; (80024d0 <HAL_MspInit+0x4c>)
 8002494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <HAL_MspInit+0x4c>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	603b      	str	r3, [r7, #0]
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_MspInit+0x4c>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	4a08      	ldr	r2, [pc, #32]	; (80024d0 <HAL_MspInit+0x4c>)
 80024b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b4:	6413      	str	r3, [r2, #64]	; 0x40
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_MspInit+0x4c>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800

080024d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a19      	ldr	r2, [pc, #100]	; (8002558 <HAL_SPI_MspInit+0x84>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d12b      	bne.n	800254e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <HAL_SPI_MspInit+0x88>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	4a17      	ldr	r2, [pc, #92]	; (800255c <HAL_SPI_MspInit+0x88>)
 8002500:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002504:	6453      	str	r3, [r2, #68]	; 0x44
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <HAL_SPI_MspInit+0x88>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <HAL_SPI_MspInit+0x88>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a10      	ldr	r2, [pc, #64]	; (800255c <HAL_SPI_MspInit+0x88>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <HAL_SPI_MspInit+0x88>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800252e:	23e0      	movs	r3, #224	; 0xe0
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253a:	2303      	movs	r3, #3
 800253c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800253e:	2305      	movs	r3, #5
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	4805      	ldr	r0, [pc, #20]	; (8002560 <HAL_SPI_MspInit+0x8c>)
 800254a:	f001 f88f 	bl	800366c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800254e:	bf00      	nop
 8002550:	3728      	adds	r7, #40	; 0x28
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40013000 	.word	0x40013000
 800255c:	40023800 	.word	0x40023800
 8002560:	40020000 	.word	0x40020000

08002564 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002584:	d133      	bne.n	80025ee <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_TIM_IC_MspInit+0x94>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a1a      	ldr	r2, [pc, #104]	; (80025f8 <HAL_TIM_IC_MspInit+0x94>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <HAL_TIM_IC_MspInit+0x94>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <HAL_TIM_IC_MspInit+0x94>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <HAL_TIM_IC_MspInit+0x94>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_TIM_IC_MspInit+0x94>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025be:	2304      	movs	r3, #4
 80025c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025ce:	2301      	movs	r3, #1
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	4808      	ldr	r0, [pc, #32]	; (80025fc <HAL_TIM_IC_MspInit+0x98>)
 80025da:	f001 f847 	bl	800366c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	2100      	movs	r1, #0
 80025e2:	201c      	movs	r0, #28
 80025e4:	f000 fc09 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025e8:	201c      	movs	r0, #28
 80025ea:	f000 fc22 	bl	8002e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025ee:	bf00      	nop
 80025f0:	3728      	adds	r7, #40	; 0x28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020000 	.word	0x40020000

08002600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08c      	sub	sp, #48	; 0x30
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a74      	ldr	r2, [pc, #464]	; (80027f0 <HAL_UART_MspInit+0x1f0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d15b      	bne.n	80026da <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	4b73      	ldr	r3, [pc, #460]	; (80027f4 <HAL_UART_MspInit+0x1f4>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	4a72      	ldr	r2, [pc, #456]	; (80027f4 <HAL_UART_MspInit+0x1f4>)
 800262c:	f043 0310 	orr.w	r3, r3, #16
 8002630:	6453      	str	r3, [r2, #68]	; 0x44
 8002632:	4b70      	ldr	r3, [pc, #448]	; (80027f4 <HAL_UART_MspInit+0x1f4>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	4b6c      	ldr	r3, [pc, #432]	; (80027f4 <HAL_UART_MspInit+0x1f4>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a6b      	ldr	r2, [pc, #428]	; (80027f4 <HAL_UART_MspInit+0x1f4>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b69      	ldr	r3, [pc, #420]	; (80027f4 <HAL_UART_MspInit+0x1f4>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800265a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800265e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002668:	2303      	movs	r3, #3
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800266c:	2307      	movs	r3, #7
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	4619      	mov	r1, r3
 8002676:	4860      	ldr	r0, [pc, #384]	; (80027f8 <HAL_UART_MspInit+0x1f8>)
 8002678:	f000 fff8 	bl	800366c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800267c:	4b5f      	ldr	r3, [pc, #380]	; (80027fc <HAL_UART_MspInit+0x1fc>)
 800267e:	4a60      	ldr	r2, [pc, #384]	; (8002800 <HAL_UART_MspInit+0x200>)
 8002680:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002682:	4b5e      	ldr	r3, [pc, #376]	; (80027fc <HAL_UART_MspInit+0x1fc>)
 8002684:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002688:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800268a:	4b5c      	ldr	r3, [pc, #368]	; (80027fc <HAL_UART_MspInit+0x1fc>)
 800268c:	2240      	movs	r2, #64	; 0x40
 800268e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002690:	4b5a      	ldr	r3, [pc, #360]	; (80027fc <HAL_UART_MspInit+0x1fc>)
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002696:	4b59      	ldr	r3, [pc, #356]	; (80027fc <HAL_UART_MspInit+0x1fc>)
 8002698:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800269c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800269e:	4b57      	ldr	r3, [pc, #348]	; (80027fc <HAL_UART_MspInit+0x1fc>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026a4:	4b55      	ldr	r3, [pc, #340]	; (80027fc <HAL_UART_MspInit+0x1fc>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80026aa:	4b54      	ldr	r3, [pc, #336]	; (80027fc <HAL_UART_MspInit+0x1fc>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026b0:	4b52      	ldr	r3, [pc, #328]	; (80027fc <HAL_UART_MspInit+0x1fc>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026b6:	4b51      	ldr	r3, [pc, #324]	; (80027fc <HAL_UART_MspInit+0x1fc>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80026bc:	484f      	ldr	r0, [pc, #316]	; (80027fc <HAL_UART_MspInit+0x1fc>)
 80026be:	f000 fbd3 	bl	8002e68 <HAL_DMA_Init>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80026c8:	f7ff fed6 	bl	8002478 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a4b      	ldr	r2, [pc, #300]	; (80027fc <HAL_UART_MspInit+0x1fc>)
 80026d0:	635a      	str	r2, [r3, #52]	; 0x34
 80026d2:	4a4a      	ldr	r2, [pc, #296]	; (80027fc <HAL_UART_MspInit+0x1fc>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026d8:	e086      	b.n	80027e8 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a49      	ldr	r2, [pc, #292]	; (8002804 <HAL_UART_MspInit+0x204>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	f040 8081 	bne.w	80027e8 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <HAL_UART_MspInit+0x1f4>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a41      	ldr	r2, [pc, #260]	; (80027f4 <HAL_UART_MspInit+0x1f4>)
 80026f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b3f      	ldr	r3, [pc, #252]	; (80027f4 <HAL_UART_MspInit+0x1f4>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b3b      	ldr	r3, [pc, #236]	; (80027f4 <HAL_UART_MspInit+0x1f4>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a3a      	ldr	r2, [pc, #232]	; (80027f4 <HAL_UART_MspInit+0x1f4>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b38      	ldr	r3, [pc, #224]	; (80027f4 <HAL_UART_MspInit+0x1f4>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b34      	ldr	r3, [pc, #208]	; (80027f4 <HAL_UART_MspInit+0x1f4>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a33      	ldr	r2, [pc, #204]	; (80027f4 <HAL_UART_MspInit+0x1f4>)
 8002728:	f043 0308 	orr.w	r3, r3, #8
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <HAL_UART_MspInit+0x1f4>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800273a:	2308      	movs	r3, #8
 800273c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800274a:	2307      	movs	r3, #7
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	4619      	mov	r1, r3
 8002754:	4828      	ldr	r0, [pc, #160]	; (80027f8 <HAL_UART_MspInit+0x1f8>)
 8002756:	f000 ff89 	bl	800366c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800275a:	2320      	movs	r3, #32
 800275c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002766:	2303      	movs	r3, #3
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800276a:	2307      	movs	r3, #7
 800276c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800276e:	f107 031c 	add.w	r3, r7, #28
 8002772:	4619      	mov	r1, r3
 8002774:	4824      	ldr	r0, [pc, #144]	; (8002808 <HAL_UART_MspInit+0x208>)
 8002776:	f000 ff79 	bl	800366c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800277a:	4b24      	ldr	r3, [pc, #144]	; (800280c <HAL_UART_MspInit+0x20c>)
 800277c:	4a24      	ldr	r2, [pc, #144]	; (8002810 <HAL_UART_MspInit+0x210>)
 800277e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <HAL_UART_MspInit+0x20c>)
 8002782:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002786:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002788:	4b20      	ldr	r3, [pc, #128]	; (800280c <HAL_UART_MspInit+0x20c>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800278e:	4b1f      	ldr	r3, [pc, #124]	; (800280c <HAL_UART_MspInit+0x20c>)
 8002790:	2200      	movs	r2, #0
 8002792:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002794:	4b1d      	ldr	r3, [pc, #116]	; (800280c <HAL_UART_MspInit+0x20c>)
 8002796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800279a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <HAL_UART_MspInit+0x20c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <HAL_UART_MspInit+0x20c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <HAL_UART_MspInit+0x20c>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <HAL_UART_MspInit+0x20c>)
 80027b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_UART_MspInit+0x20c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80027bc:	4813      	ldr	r0, [pc, #76]	; (800280c <HAL_UART_MspInit+0x20c>)
 80027be:	f000 fb53 	bl	8002e68 <HAL_DMA_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 80027c8:	f7ff fe56 	bl	8002478 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a0f      	ldr	r2, [pc, #60]	; (800280c <HAL_UART_MspInit+0x20c>)
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38
 80027d2:	4a0e      	ldr	r2, [pc, #56]	; (800280c <HAL_UART_MspInit+0x20c>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027d8:	2200      	movs	r2, #0
 80027da:	2100      	movs	r1, #0
 80027dc:	2026      	movs	r0, #38	; 0x26
 80027de:	f000 fb0c 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027e2:	2026      	movs	r0, #38	; 0x26
 80027e4:	f000 fb25 	bl	8002e32 <HAL_NVIC_EnableIRQ>
}
 80027e8:	bf00      	nop
 80027ea:	3730      	adds	r7, #48	; 0x30
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40011000 	.word	0x40011000
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	200002d4 	.word	0x200002d4
 8002800:	400264b8 	.word	0x400264b8
 8002804:	40004400 	.word	0x40004400
 8002808:	40020c00 	.word	0x40020c00
 800280c:	20000334 	.word	0x20000334
 8002810:	40026088 	.word	0x40026088

08002814 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b0a0      	sub	sp, #128	; 0x80
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800281c:	f107 0310 	add.w	r3, r7, #16
 8002820:	225c      	movs	r2, #92	; 0x5c
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f005 ff1d 	bl	8008664 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a4c      	ldr	r2, [pc, #304]	; (8002960 <HAL_SAI_MspInit+0x14c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	f040 8090 	bne.w	8002956 <HAL_SAI_MspInit+0x142>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002836:	2304      	movs	r3, #4
 8002838:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 16;
 800283a:	2310      	movs	r3, #16
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800283e:	23c0      	movs	r3, #192	; 0xc0
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002842:	2302      	movs	r3, #2
 8002844:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8002846:	2302      	movs	r3, #2
 8002848:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800284a:	2301      	movs	r3, #1
 800284c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800284e:	2300      	movs	r3, #0
 8002850:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002852:	f107 0310 	add.w	r3, r7, #16
 8002856:	4618      	mov	r0, r3
 8002858:	f001 f9ea 	bl	8003c30 <HAL_RCCEx_PeriphCLKConfig>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_SAI_MspInit+0x52>
    {
      Error_Handler();
 8002862:	f7ff fe09 	bl	8002478 <Error_Handler>
    }

      if (SAI1_client == 0)
 8002866:	4b3f      	ldr	r3, [pc, #252]	; (8002964 <HAL_SAI_MspInit+0x150>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10d      	bne.n	800288a <HAL_SAI_MspInit+0x76>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <HAL_SAI_MspInit+0x154>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	4a3c      	ldr	r2, [pc, #240]	; (8002968 <HAL_SAI_MspInit+0x154>)
 8002878:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800287c:	6453      	str	r3, [r2, #68]	; 0x44
 800287e:	4b3a      	ldr	r3, [pc, #232]	; (8002968 <HAL_SAI_MspInit+0x154>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800288a:	4b36      	ldr	r3, [pc, #216]	; (8002964 <HAL_SAI_MspInit+0x150>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3301      	adds	r3, #1
 8002890:	4a34      	ldr	r2, [pc, #208]	; (8002964 <HAL_SAI_MspInit+0x150>)
 8002892:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002894:	2308      	movs	r3, #8
 8002896:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	2302      	movs	r3, #2
 800289a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	2300      	movs	r3, #0
 80028a2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80028a4:	2306      	movs	r3, #6
 80028a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028ac:	4619      	mov	r1, r3
 80028ae:	482f      	ldr	r0, [pc, #188]	; (800296c <HAL_SAI_MspInit+0x158>)
 80028b0:	f000 fedc 	bl	800366c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80028c6:	2306      	movs	r3, #6
 80028c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028ce:	4619      	mov	r1, r3
 80028d0:	4827      	ldr	r0, [pc, #156]	; (8002970 <HAL_SAI_MspInit+0x15c>)
 80028d2:	f000 fecb 	bl	800366c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 80028d6:	4b27      	ldr	r3, [pc, #156]	; (8002974 <HAL_SAI_MspInit+0x160>)
 80028d8:	4a27      	ldr	r2, [pc, #156]	; (8002978 <HAL_SAI_MspInit+0x164>)
 80028da:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 80028dc:	4b25      	ldr	r3, [pc, #148]	; (8002974 <HAL_SAI_MspInit+0x160>)
 80028de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e2:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028e4:	4b23      	ldr	r3, [pc, #140]	; (8002974 <HAL_SAI_MspInit+0x160>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ea:	4b22      	ldr	r3, [pc, #136]	; (8002974 <HAL_SAI_MspInit+0x160>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80028f0:	4b20      	ldr	r3, [pc, #128]	; (8002974 <HAL_SAI_MspInit+0x160>)
 80028f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028f6:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028f8:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <HAL_SAI_MspInit+0x160>)
 80028fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028fe:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002900:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <HAL_SAI_MspInit+0x160>)
 8002902:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002906:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002908:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <HAL_SAI_MspInit+0x160>)
 800290a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800290e:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_SAI_MspInit+0x160>)
 8002912:	2200      	movs	r2, #0
 8002914:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002916:	4b17      	ldr	r3, [pc, #92]	; (8002974 <HAL_SAI_MspInit+0x160>)
 8002918:	2204      	movs	r2, #4
 800291a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800291c:	4b15      	ldr	r3, [pc, #84]	; (8002974 <HAL_SAI_MspInit+0x160>)
 800291e:	2203      	movs	r2, #3
 8002920:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8002922:	4b14      	ldr	r3, [pc, #80]	; (8002974 <HAL_SAI_MspInit+0x160>)
 8002924:	2200      	movs	r2, #0
 8002926:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002928:	4b12      	ldr	r3, [pc, #72]	; (8002974 <HAL_SAI_MspInit+0x160>)
 800292a:	2200      	movs	r2, #0
 800292c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800292e:	4811      	ldr	r0, [pc, #68]	; (8002974 <HAL_SAI_MspInit+0x160>)
 8002930:	f000 fa9a 	bl	8002e68 <HAL_DMA_Init>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_SAI_MspInit+0x12a>
    {
      Error_Handler();
 800293a:	f7ff fd9d 	bl	8002478 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <HAL_SAI_MspInit+0x160>)
 8002942:	675a      	str	r2, [r3, #116]	; 0x74
 8002944:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <HAL_SAI_MspInit+0x160>)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a09      	ldr	r2, [pc, #36]	; (8002974 <HAL_SAI_MspInit+0x160>)
 800294e:	671a      	str	r2, [r3, #112]	; 0x70
 8002950:	4a08      	ldr	r2, [pc, #32]	; (8002974 <HAL_SAI_MspInit+0x160>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8002956:	bf00      	nop
 8002958:	3780      	adds	r7, #128	; 0x80
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40015824 	.word	0x40015824
 8002964:	20004c54 	.word	0x20004c54
 8002968:	40023800 	.word	0x40023800
 800296c:	40021000 	.word	0x40021000
 8002970:	40021400 	.word	0x40021400
 8002974:	2000014c 	.word	0x2000014c
 8002978:	40026470 	.word	0x40026470

0800297c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <NMI_Handler+0x4>

08002982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002986:	e7fe      	b.n	8002986 <HardFault_Handler+0x4>

08002988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800298c:	e7fe      	b.n	800298c <MemManage_Handler+0x4>

0800298e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002992:	e7fe      	b.n	8002992 <BusFault_Handler+0x4>

08002994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002998:	e7fe      	b.n	8002998 <UsageFault_Handler+0x4>

0800299a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c8:	f000 f8f8 	bl	8002bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <DMA1_Stream5_IRQHandler+0x10>)
 80029d6:	f000 fbdf 	bl	8003198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000334 	.word	0x20000334

080029e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029e8:	4802      	ldr	r0, [pc, #8]	; (80029f4 <TIM2_IRQHandler+0x10>)
 80029ea:	f003 ffb9 	bl	8006960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000204 	.word	0x20000204

080029f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029fc:	4802      	ldr	r0, [pc, #8]	; (8002a08 <USART2_IRQHandler+0x10>)
 80029fe:	f004 fd0b 	bl	8007418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000290 	.word	0x20000290

08002a0c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8002a10:	4802      	ldr	r0, [pc, #8]	; (8002a1c <DMA2_Stream4_IRQHandler+0x10>)
 8002a12:	f000 fbc1 	bl	8003198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	2000014c 	.word	0x2000014c

08002a20 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002a24:	4802      	ldr	r0, [pc, #8]	; (8002a30 <DMA2_Stream7_IRQHandler+0x10>)
 8002a26:	f000 fbb7 	bl	8003198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	200002d4 	.word	0x200002d4

08002a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a3c:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <_sbrk+0x5c>)
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <_sbrk+0x60>)
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <_sbrk+0x64>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <_sbrk+0x64>)
 8002a52:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <_sbrk+0x68>)
 8002a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <_sbrk+0x64>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d207      	bcs.n	8002a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a64:	f005 fdc6 	bl	80085f4 <__errno>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	220c      	movs	r2, #12
 8002a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a72:	e009      	b.n	8002a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <_sbrk+0x64>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <_sbrk+0x64>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <_sbrk+0x64>)
 8002a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a86:	68fb      	ldr	r3, [r7, #12]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20020000 	.word	0x20020000
 8002a94:	00000400 	.word	0x00000400
 8002a98:	20004c58 	.word	0x20004c58
 8002a9c:	20004c70 	.word	0x20004c70

08002aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <SystemInit+0x20>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <SystemInit+0x20>)
 8002aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002afc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ac8:	480d      	ldr	r0, [pc, #52]	; (8002b00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aca:	490e      	ldr	r1, [pc, #56]	; (8002b04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002acc:	4a0e      	ldr	r2, [pc, #56]	; (8002b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ad0:	e002      	b.n	8002ad8 <LoopCopyDataInit>

08002ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ad6:	3304      	adds	r3, #4

08002ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002adc:	d3f9      	bcc.n	8002ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ade:	4a0b      	ldr	r2, [pc, #44]	; (8002b0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ae0:	4c0b      	ldr	r4, [pc, #44]	; (8002b10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ae4:	e001      	b.n	8002aea <LoopFillZerobss>

08002ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ae8:	3204      	adds	r2, #4

08002aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aec:	d3fb      	bcc.n	8002ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002aee:	f7ff ffd7 	bl	8002aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002af2:	f005 fd85 	bl	8008600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002af6:	f7fe fe6b 	bl	80017d0 <main>
  bx  lr    
 8002afa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002afc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b04:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8002b08:	08009204 	.word	0x08009204
  ldr r2, =_sbss
 8002b0c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002b10:	20004c70 	.word	0x20004c70

08002b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b14:	e7fe      	b.n	8002b14 <ADC_IRQHandler>
	...

08002b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <HAL_Init+0x40>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0d      	ldr	r2, [pc, #52]	; (8002b58 <HAL_Init+0x40>)
 8002b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_Init+0x40>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <HAL_Init+0x40>)
 8002b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b34:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <HAL_Init+0x40>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a07      	ldr	r2, [pc, #28]	; (8002b58 <HAL_Init+0x40>)
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b40:	2003      	movs	r0, #3
 8002b42:	f000 f94f 	bl	8002de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b46:	200f      	movs	r0, #15
 8002b48:	f000 f808 	bl	8002b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b4c:	f7ff fc9a 	bl	8002484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023c00 	.word	0x40023c00

08002b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_InitTick+0x54>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_InitTick+0x58>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f967 	bl	8002e4e <HAL_SYSTICK_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00e      	b.n	8002ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b0f      	cmp	r3, #15
 8002b8e:	d80a      	bhi.n	8002ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b90:	2200      	movs	r2, #0
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b98:	f000 f92f 	bl	8002dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b9c:	4a06      	ldr	r2, [pc, #24]	; (8002bb8 <HAL_InitTick+0x5c>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e000      	b.n	8002ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000038 	.word	0x20000038
 8002bb4:	20000040 	.word	0x20000040
 8002bb8:	2000003c 	.word	0x2000003c

08002bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_IncTick+0x20>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_IncTick+0x24>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <HAL_IncTick+0x24>)
 8002bce:	6013      	str	r3, [r2, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	20000040 	.word	0x20000040
 8002be0:	20004c5c 	.word	0x20004c5c

08002be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return uwTick;
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <HAL_GetTick+0x14>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20004c5c 	.word	0x20004c5c

08002bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c04:	f7ff ffee 	bl	8002be4 <HAL_GetTick>
 8002c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c14:	d005      	beq.n	8002c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c16:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_Delay+0x44>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4413      	add	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c22:	bf00      	nop
 8002c24:	f7ff ffde 	bl	8002be4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d8f7      	bhi.n	8002c24 <HAL_Delay+0x28>
  {
  }
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000040 	.word	0x20000040

08002c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <__NVIC_SetPriorityGrouping+0x44>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c60:	4013      	ands	r3, r2
 8002c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c76:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <__NVIC_SetPriorityGrouping+0x44>)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	60d3      	str	r3, [r2, #12]
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	0a1b      	lsrs	r3, r3, #8
 8002c96:	f003 0307 	and.w	r3, r3, #7
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	db0b      	blt.n	8002cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	f003 021f 	and.w	r2, r3, #31
 8002cc0:	4907      	ldr	r1, [pc, #28]	; (8002ce0 <__NVIC_EnableIRQ+0x38>)
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	2001      	movs	r0, #1
 8002cca:	fa00 f202 	lsl.w	r2, r0, r2
 8002cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	e000e100 	.word	0xe000e100

08002ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	6039      	str	r1, [r7, #0]
 8002cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	db0a      	blt.n	8002d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	490c      	ldr	r1, [pc, #48]	; (8002d30 <__NVIC_SetPriority+0x4c>)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	0112      	lsls	r2, r2, #4
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	440b      	add	r3, r1
 8002d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d0c:	e00a      	b.n	8002d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	4908      	ldr	r1, [pc, #32]	; (8002d34 <__NVIC_SetPriority+0x50>)
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	3b04      	subs	r3, #4
 8002d1c:	0112      	lsls	r2, r2, #4
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	440b      	add	r3, r1
 8002d22:	761a      	strb	r2, [r3, #24]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000e100 	.word	0xe000e100
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	; 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f1c3 0307 	rsb	r3, r3, #7
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	bf28      	it	cs
 8002d56:	2304      	movcs	r3, #4
 8002d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	2b06      	cmp	r3, #6
 8002d60:	d902      	bls.n	8002d68 <NVIC_EncodePriority+0x30>
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3b03      	subs	r3, #3
 8002d66:	e000      	b.n	8002d6a <NVIC_EncodePriority+0x32>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43da      	mvns	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8a:	43d9      	mvns	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	4313      	orrs	r3, r2
         );
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3724      	adds	r7, #36	; 0x24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002db0:	d301      	bcc.n	8002db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002db2:	2301      	movs	r3, #1
 8002db4:	e00f      	b.n	8002dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <SysTick_Config+0x40>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dbe:	210f      	movs	r1, #15
 8002dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dc4:	f7ff ff8e 	bl	8002ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <SysTick_Config+0x40>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dce:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <SysTick_Config+0x40>)
 8002dd0:	2207      	movs	r2, #7
 8002dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	e000e010 	.word	0xe000e010

08002de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7ff ff29 	bl	8002c44 <__NVIC_SetPriorityGrouping>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b086      	sub	sp, #24
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	4603      	mov	r3, r0
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e0c:	f7ff ff3e 	bl	8002c8c <__NVIC_GetPriorityGrouping>
 8002e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	6978      	ldr	r0, [r7, #20]
 8002e18:	f7ff ff8e 	bl	8002d38 <NVIC_EncodePriority>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff5d 	bl	8002ce4 <__NVIC_SetPriority>
}
 8002e2a:	bf00      	nop
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	4603      	mov	r3, r0
 8002e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff31 	bl	8002ca8 <__NVIC_EnableIRQ>
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff ffa2 	bl	8002da0 <SysTick_Config>
 8002e5c:	4603      	mov	r3, r0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e74:	f7ff feb6 	bl	8002be4 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e099      	b.n	8002fb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0201 	bic.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea4:	e00f      	b.n	8002ec6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ea6:	f7ff fe9d 	bl	8002be4 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b05      	cmp	r3, #5
 8002eb2:	d908      	bls.n	8002ec6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e078      	b.n	8002fb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e8      	bne.n	8002ea6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <HAL_DMA_Init+0x158>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d107      	bne.n	8002f30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f023 0307 	bic.w	r3, r3, #7
 8002f46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d117      	bne.n	8002f8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00e      	beq.n	8002f8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fb01 	bl	8003574 <DMA_CheckFifoParam>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2240      	movs	r2, #64	; 0x40
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f86:	2301      	movs	r3, #1
 8002f88:	e016      	b.n	8002fb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fab8 	bl	8003508 <DMA_CalcBaseAndBitshift>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	223f      	movs	r2, #63	; 0x3f
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	f010803f 	.word	0xf010803f

08002fc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_DMA_Start_IT+0x26>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e040      	b.n	800306c <HAL_DMA_Start_IT+0xa8>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d12f      	bne.n	800305e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2202      	movs	r2, #2
 8003002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fa4a 	bl	80034ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301c:	223f      	movs	r2, #63	; 0x3f
 800301e:	409a      	lsls	r2, r3
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0216 	orr.w	r2, r2, #22
 8003032:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d007      	beq.n	800304c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0208 	orr.w	r2, r2, #8
 800304a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	e005      	b.n	800306a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003066:	2302      	movs	r3, #2
 8003068:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800306a:	7dfb      	ldrb	r3, [r7, #23]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003082:	f7ff fdaf 	bl	8002be4 <HAL_GetTick>
 8003086:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d008      	beq.n	80030a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2280      	movs	r2, #128	; 0x80
 8003098:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e052      	b.n	800314c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0216 	bic.w	r2, r2, #22
 80030b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695a      	ldr	r2, [r3, #20]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d103      	bne.n	80030d6 <HAL_DMA_Abort+0x62>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d007      	beq.n	80030e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0208 	bic.w	r2, r2, #8
 80030e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f6:	e013      	b.n	8003120 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030f8:	f7ff fd74 	bl	8002be4 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b05      	cmp	r3, #5
 8003104:	d90c      	bls.n	8003120 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2203      	movs	r2, #3
 8003110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e015      	b.n	800314c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1e4      	bne.n	80030f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003132:	223f      	movs	r2, #63	; 0x3f
 8003134:	409a      	lsls	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d004      	beq.n	8003172 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2280      	movs	r2, #128	; 0x80
 800316c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e00c      	b.n	800318c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2205      	movs	r2, #5
 8003176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031a4:	4b8e      	ldr	r3, [pc, #568]	; (80033e0 <HAL_DMA_IRQHandler+0x248>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a8e      	ldr	r2, [pc, #568]	; (80033e4 <HAL_DMA_IRQHandler+0x24c>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	0a9b      	lsrs	r3, r3, #10
 80031b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c2:	2208      	movs	r2, #8
 80031c4:	409a      	lsls	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01a      	beq.n	8003204 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d013      	beq.n	8003204 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0204 	bic.w	r2, r2, #4
 80031ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	2208      	movs	r2, #8
 80031f2:	409a      	lsls	r2, r3
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	f043 0201 	orr.w	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003208:	2201      	movs	r2, #1
 800320a:	409a      	lsls	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d012      	beq.n	800323a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	2201      	movs	r2, #1
 8003228:	409a      	lsls	r2, r3
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	f043 0202 	orr.w	r2, r3, #2
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	2204      	movs	r2, #4
 8003240:	409a      	lsls	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d012      	beq.n	8003270 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00b      	beq.n	8003270 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325c:	2204      	movs	r2, #4
 800325e:	409a      	lsls	r2, r3
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	f043 0204 	orr.w	r2, r3, #4
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003274:	2210      	movs	r2, #16
 8003276:	409a      	lsls	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4013      	ands	r3, r2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d043      	beq.n	8003308 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d03c      	beq.n	8003308 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003292:	2210      	movs	r2, #16
 8003294:	409a      	lsls	r2, r3
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d018      	beq.n	80032da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d108      	bne.n	80032c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d024      	beq.n	8003308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	4798      	blx	r3
 80032c6:	e01f      	b.n	8003308 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d01b      	beq.n	8003308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4798      	blx	r3
 80032d8:	e016      	b.n	8003308 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d107      	bne.n	80032f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0208 	bic.w	r2, r2, #8
 80032f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	2220      	movs	r2, #32
 800330e:	409a      	lsls	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 808f 	beq.w	8003438 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8087 	beq.w	8003438 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332e:	2220      	movs	r2, #32
 8003330:	409a      	lsls	r2, r3
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b05      	cmp	r3, #5
 8003340:	d136      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0216 	bic.w	r2, r2, #22
 8003350:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003360:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d103      	bne.n	8003372 <HAL_DMA_IRQHandler+0x1da>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0208 	bic.w	r2, r2, #8
 8003380:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003386:	223f      	movs	r2, #63	; 0x3f
 8003388:	409a      	lsls	r2, r3
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d07e      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	4798      	blx	r3
        }
        return;
 80033ae:	e079      	b.n	80034a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d01d      	beq.n	80033fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10d      	bne.n	80033e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d031      	beq.n	8003438 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	4798      	blx	r3
 80033dc:	e02c      	b.n	8003438 <HAL_DMA_IRQHandler+0x2a0>
 80033de:	bf00      	nop
 80033e0:	20000038 	.word	0x20000038
 80033e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d023      	beq.n	8003438 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
 80033f8:	e01e      	b.n	8003438 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10f      	bne.n	8003428 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0210 	bic.w	r2, r2, #16
 8003416:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	2b00      	cmp	r3, #0
 800343e:	d032      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d022      	beq.n	8003492 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2205      	movs	r2, #5
 8003450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	3301      	adds	r3, #1
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	429a      	cmp	r2, r3
 800346e:	d307      	bcc.n	8003480 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f2      	bne.n	8003464 <HAL_DMA_IRQHandler+0x2cc>
 800347e:	e000      	b.n	8003482 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003480:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	4798      	blx	r3
 80034a2:	e000      	b.n	80034a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80034a4:	bf00      	nop
    }
  }
}
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b40      	cmp	r3, #64	; 0x40
 80034d8:	d108      	bne.n	80034ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034ea:	e007      	b.n	80034fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	60da      	str	r2, [r3, #12]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	3b10      	subs	r3, #16
 8003518:	4a14      	ldr	r2, [pc, #80]	; (800356c <DMA_CalcBaseAndBitshift+0x64>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	091b      	lsrs	r3, r3, #4
 8003520:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003522:	4a13      	ldr	r2, [pc, #76]	; (8003570 <DMA_CalcBaseAndBitshift+0x68>)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4413      	add	r3, r2
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b03      	cmp	r3, #3
 8003534:	d909      	bls.n	800354a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800353e:	f023 0303 	bic.w	r3, r3, #3
 8003542:	1d1a      	adds	r2, r3, #4
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	659a      	str	r2, [r3, #88]	; 0x58
 8003548:	e007      	b.n	800355a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003552:	f023 0303 	bic.w	r3, r3, #3
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	aaaaaaab 	.word	0xaaaaaaab
 8003570:	080091b8 	.word	0x080091b8

08003574 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003584:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d11f      	bne.n	80035ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b03      	cmp	r3, #3
 8003592:	d856      	bhi.n	8003642 <DMA_CheckFifoParam+0xce>
 8003594:	a201      	add	r2, pc, #4	; (adr r2, 800359c <DMA_CheckFifoParam+0x28>)
 8003596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359a:	bf00      	nop
 800359c:	080035ad 	.word	0x080035ad
 80035a0:	080035bf 	.word	0x080035bf
 80035a4:	080035ad 	.word	0x080035ad
 80035a8:	08003643 	.word	0x08003643
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d046      	beq.n	8003646 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035bc:	e043      	b.n	8003646 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035c6:	d140      	bne.n	800364a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035cc:	e03d      	b.n	800364a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d6:	d121      	bne.n	800361c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d837      	bhi.n	800364e <DMA_CheckFifoParam+0xda>
 80035de:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <DMA_CheckFifoParam+0x70>)
 80035e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e4:	080035f5 	.word	0x080035f5
 80035e8:	080035fb 	.word	0x080035fb
 80035ec:	080035f5 	.word	0x080035f5
 80035f0:	0800360d 	.word	0x0800360d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
      break;
 80035f8:	e030      	b.n	800365c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d025      	beq.n	8003652 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800360a:	e022      	b.n	8003652 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003614:	d11f      	bne.n	8003656 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800361a:	e01c      	b.n	8003656 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d903      	bls.n	800362a <DMA_CheckFifoParam+0xb6>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b03      	cmp	r3, #3
 8003626:	d003      	beq.n	8003630 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003628:	e018      	b.n	800365c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	73fb      	strb	r3, [r7, #15]
      break;
 800362e:	e015      	b.n	800365c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00e      	beq.n	800365a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
      break;
 8003640:	e00b      	b.n	800365a <DMA_CheckFifoParam+0xe6>
      break;
 8003642:	bf00      	nop
 8003644:	e00a      	b.n	800365c <DMA_CheckFifoParam+0xe8>
      break;
 8003646:	bf00      	nop
 8003648:	e008      	b.n	800365c <DMA_CheckFifoParam+0xe8>
      break;
 800364a:	bf00      	nop
 800364c:	e006      	b.n	800365c <DMA_CheckFifoParam+0xe8>
      break;
 800364e:	bf00      	nop
 8003650:	e004      	b.n	800365c <DMA_CheckFifoParam+0xe8>
      break;
 8003652:	bf00      	nop
 8003654:	e002      	b.n	800365c <DMA_CheckFifoParam+0xe8>
      break;   
 8003656:	bf00      	nop
 8003658:	e000      	b.n	800365c <DMA_CheckFifoParam+0xe8>
      break;
 800365a:	bf00      	nop
    }
  } 
  
  return status; 
 800365c:	7bfb      	ldrb	r3, [r7, #15]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop

0800366c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800366c:	b480      	push	{r7}
 800366e:	b089      	sub	sp, #36	; 0x24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800367e:	2300      	movs	r3, #0
 8003680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	e165      	b.n	8003954 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003688:	2201      	movs	r2, #1
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	f040 8154 	bne.w	800394e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d005      	beq.n	80036be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d130      	bne.n	8003720 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	2203      	movs	r2, #3
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036f4:	2201      	movs	r2, #1
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 0201 	and.w	r2, r3, #1
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b03      	cmp	r3, #3
 800372a:	d017      	beq.n	800375c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	2203      	movs	r2, #3
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d123      	bne.n	80037b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	08da      	lsrs	r2, r3, #3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3208      	adds	r2, #8
 8003770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	220f      	movs	r2, #15
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	08da      	lsrs	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3208      	adds	r2, #8
 80037aa:	69b9      	ldr	r1, [r7, #24]
 80037ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	2203      	movs	r2, #3
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0203 	and.w	r2, r3, #3
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80ae 	beq.w	800394e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	4b5d      	ldr	r3, [pc, #372]	; (800396c <HAL_GPIO_Init+0x300>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	4a5c      	ldr	r2, [pc, #368]	; (800396c <HAL_GPIO_Init+0x300>)
 80037fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003800:	6453      	str	r3, [r2, #68]	; 0x44
 8003802:	4b5a      	ldr	r3, [pc, #360]	; (800396c <HAL_GPIO_Init+0x300>)
 8003804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800380e:	4a58      	ldr	r2, [pc, #352]	; (8003970 <HAL_GPIO_Init+0x304>)
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	089b      	lsrs	r3, r3, #2
 8003814:	3302      	adds	r3, #2
 8003816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	220f      	movs	r2, #15
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a4f      	ldr	r2, [pc, #316]	; (8003974 <HAL_GPIO_Init+0x308>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d025      	beq.n	8003886 <HAL_GPIO_Init+0x21a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a4e      	ldr	r2, [pc, #312]	; (8003978 <HAL_GPIO_Init+0x30c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d01f      	beq.n	8003882 <HAL_GPIO_Init+0x216>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a4d      	ldr	r2, [pc, #308]	; (800397c <HAL_GPIO_Init+0x310>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d019      	beq.n	800387e <HAL_GPIO_Init+0x212>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a4c      	ldr	r2, [pc, #304]	; (8003980 <HAL_GPIO_Init+0x314>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <HAL_GPIO_Init+0x20e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a4b      	ldr	r2, [pc, #300]	; (8003984 <HAL_GPIO_Init+0x318>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00d      	beq.n	8003876 <HAL_GPIO_Init+0x20a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4a      	ldr	r2, [pc, #296]	; (8003988 <HAL_GPIO_Init+0x31c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d007      	beq.n	8003872 <HAL_GPIO_Init+0x206>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a49      	ldr	r2, [pc, #292]	; (800398c <HAL_GPIO_Init+0x320>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d101      	bne.n	800386e <HAL_GPIO_Init+0x202>
 800386a:	2306      	movs	r3, #6
 800386c:	e00c      	b.n	8003888 <HAL_GPIO_Init+0x21c>
 800386e:	2307      	movs	r3, #7
 8003870:	e00a      	b.n	8003888 <HAL_GPIO_Init+0x21c>
 8003872:	2305      	movs	r3, #5
 8003874:	e008      	b.n	8003888 <HAL_GPIO_Init+0x21c>
 8003876:	2304      	movs	r3, #4
 8003878:	e006      	b.n	8003888 <HAL_GPIO_Init+0x21c>
 800387a:	2303      	movs	r3, #3
 800387c:	e004      	b.n	8003888 <HAL_GPIO_Init+0x21c>
 800387e:	2302      	movs	r3, #2
 8003880:	e002      	b.n	8003888 <HAL_GPIO_Init+0x21c>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <HAL_GPIO_Init+0x21c>
 8003886:	2300      	movs	r3, #0
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	f002 0203 	and.w	r2, r2, #3
 800388e:	0092      	lsls	r2, r2, #2
 8003890:	4093      	lsls	r3, r2
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003898:	4935      	ldr	r1, [pc, #212]	; (8003970 <HAL_GPIO_Init+0x304>)
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	089b      	lsrs	r3, r3, #2
 800389e:	3302      	adds	r3, #2
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038a6:	4b3a      	ldr	r3, [pc, #232]	; (8003990 <HAL_GPIO_Init+0x324>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038ca:	4a31      	ldr	r2, [pc, #196]	; (8003990 <HAL_GPIO_Init+0x324>)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038d0:	4b2f      	ldr	r3, [pc, #188]	; (8003990 <HAL_GPIO_Init+0x324>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038f4:	4a26      	ldr	r2, [pc, #152]	; (8003990 <HAL_GPIO_Init+0x324>)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038fa:	4b25      	ldr	r3, [pc, #148]	; (8003990 <HAL_GPIO_Init+0x324>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800391e:	4a1c      	ldr	r2, [pc, #112]	; (8003990 <HAL_GPIO_Init+0x324>)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003924:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <HAL_GPIO_Init+0x324>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003948:	4a11      	ldr	r2, [pc, #68]	; (8003990 <HAL_GPIO_Init+0x324>)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3301      	adds	r3, #1
 8003952:	61fb      	str	r3, [r7, #28]
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	2b0f      	cmp	r3, #15
 8003958:	f67f ae96 	bls.w	8003688 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800395c:	bf00      	nop
 800395e:	bf00      	nop
 8003960:	3724      	adds	r7, #36	; 0x24
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800
 8003970:	40013800 	.word	0x40013800
 8003974:	40020000 	.word	0x40020000
 8003978:	40020400 	.word	0x40020400
 800397c:	40020800 	.word	0x40020800
 8003980:	40020c00 	.word	0x40020c00
 8003984:	40021000 	.word	0x40021000
 8003988:	40021400 	.word	0x40021400
 800398c:	40021800 	.word	0x40021800
 8003990:	40013c00 	.word	0x40013c00

08003994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	807b      	strh	r3, [r7, #2]
 80039a0:	4613      	mov	r3, r2
 80039a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039a4:	787b      	ldrb	r3, [r7, #1]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039aa:	887a      	ldrh	r2, [r7, #2]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039b0:	e003      	b.n	80039ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039b2:	887b      	ldrh	r3, [r7, #2]
 80039b4:	041a      	lsls	r2, r3, #16
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	619a      	str	r2, [r3, #24]
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b085      	sub	sp, #20
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	460b      	mov	r3, r1
 80039d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039d8:	887a      	ldrh	r2, [r7, #2]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4013      	ands	r3, r2
 80039de:	041a      	lsls	r2, r3, #16
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	43d9      	mvns	r1, r3
 80039e4:	887b      	ldrh	r3, [r7, #2]
 80039e6:	400b      	ands	r3, r1
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	619a      	str	r2, [r3, #24]
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0cc      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a10:	4b68      	ldr	r3, [pc, #416]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d90c      	bls.n	8003a38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b65      	ldr	r3, [pc, #404]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a26:	4b63      	ldr	r3, [pc, #396]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0b8      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d020      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a50:	4b59      	ldr	r3, [pc, #356]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4a58      	ldr	r2, [pc, #352]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a68:	4b53      	ldr	r3, [pc, #332]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4a52      	ldr	r2, [pc, #328]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a74:	4b50      	ldr	r3, [pc, #320]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	494d      	ldr	r1, [pc, #308]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d044      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9a:	4b47      	ldr	r3, [pc, #284]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d119      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e07f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d003      	beq.n	8003aba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aba:	4b3f      	ldr	r3, [pc, #252]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e06f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aca:	4b3b      	ldr	r3, [pc, #236]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e067      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ada:	4b37      	ldr	r3, [pc, #220]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f023 0203 	bic.w	r2, r3, #3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4934      	ldr	r1, [pc, #208]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aec:	f7ff f87a 	bl	8002be4 <HAL_GetTick>
 8003af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af4:	f7ff f876 	bl	8002be4 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e04f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 020c 	and.w	r2, r3, #12
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d1eb      	bne.n	8003af4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b1c:	4b25      	ldr	r3, [pc, #148]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d20c      	bcs.n	8003b44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2a:	4b22      	ldr	r3, [pc, #136]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e032      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b50:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4916      	ldr	r1, [pc, #88]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b6e:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	490e      	ldr	r1, [pc, #56]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b82:	f000 fdc7 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 8003b86:	4602      	mov	r2, r0
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	490a      	ldr	r1, [pc, #40]	; (8003bbc <HAL_RCC_ClockConfig+0x1c0>)
 8003b94:	5ccb      	ldrb	r3, [r1, r3]
 8003b96:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9a:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe ffda 	bl	8002b5c <HAL_InitTick>

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023c00 	.word	0x40023c00
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	080091a0 	.word	0x080091a0
 8003bc0:	20000038 	.word	0x20000038
 8003bc4:	2000003c 	.word	0x2000003c

08003bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bcc:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bce:	681b      	ldr	r3, [r3, #0]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20000038 	.word	0x20000038

08003be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003be4:	f7ff fff0 	bl	8003bc8 <HAL_RCC_GetHCLKFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	0a9b      	lsrs	r3, r3, #10
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	4903      	ldr	r1, [pc, #12]	; (8003c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40023800 	.word	0x40023800
 8003c04:	080091b0 	.word	0x080091b0

08003c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c0c:	f7ff ffdc 	bl	8003bc8 <HAL_RCC_GetHCLKFreq>
 8003c10:	4602      	mov	r2, r0
 8003c12:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	0b5b      	lsrs	r3, r3, #13
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	4903      	ldr	r1, [pc, #12]	; (8003c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c1e:	5ccb      	ldrb	r3, [r1, r3]
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	080091b0 	.word	0x080091b0

08003c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08c      	sub	sp, #48	; 0x30
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d010      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003c68:	4b6f      	ldr	r3, [pc, #444]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c6e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	496c      	ldr	r1, [pc, #432]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003c86:	2301      	movs	r3, #1
 8003c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d010      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003c96:	4b64      	ldr	r3, [pc, #400]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c9c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca4:	4960      	ldr	r1, [pc, #384]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d017      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cc4:	4b58      	ldr	r3, [pc, #352]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	4955      	ldr	r1, [pc, #340]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce2:	d101      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d017      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d00:	4b49      	ldr	r3, [pc, #292]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0e:	4946      	ldr	r1, [pc, #280]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003d20:	2301      	movs	r3, #1
 8003d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 808a 	beq.w	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	4a38      	ldr	r2, [pc, #224]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4e:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d5a:	4b34      	ldr	r3, [pc, #208]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a33      	ldr	r2, [pc, #204]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d66:	f7fe ff3d 	bl	8002be4 <HAL_GetTick>
 8003d6a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d6e:	f7fe ff39 	bl	8002be4 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e278      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d80:	4b2a      	ldr	r3, [pc, #168]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d8c:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d94:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d02f      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da4:	6a3a      	ldr	r2, [r7, #32]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d028      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003daa:	4b1f      	ldr	r3, [pc, #124]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003db4:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dba:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003dc0:	4a19      	ldr	r2, [pc, #100]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dc6:	4b18      	ldr	r3, [pc, #96]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d114      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003dd2:	f7fe ff07 	bl	8002be4 <HAL_GetTick>
 8003dd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd8:	e00a      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dda:	f7fe ff03 	bl	8002be4 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e240      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df0:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0ee      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e08:	d114      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003e0a:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1e:	4902      	ldr	r1, [pc, #8]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	608b      	str	r3, [r1, #8]
 8003e24:	e00c      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	42470e40 	.word	0x42470e40
 8003e34:	4b4a      	ldr	r3, [pc, #296]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4a49      	ldr	r2, [pc, #292]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e3e:	6093      	str	r3, [r2, #8]
 8003e40:	4b47      	ldr	r3, [pc, #284]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e4c:	4944      	ldr	r1, [pc, #272]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0310 	and.w	r3, r3, #16
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d004      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003e64:	4b3f      	ldr	r3, [pc, #252]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003e66:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003e74:	4b3a      	ldr	r3, [pc, #232]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e82:	4937      	ldr	r1, [pc, #220]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e96:	4b32      	ldr	r3, [pc, #200]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e9c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea4:	492e      	ldr	r1, [pc, #184]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d011      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003eb8:	4b29      	ldr	r3, [pc, #164]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ebe:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec6:	4926      	ldr	r1, [pc, #152]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed6:	d101      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003ee8:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	491a      	ldr	r1, [pc, #104]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d011      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003f0a:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f10:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f18:	4911      	ldr	r1, [pc, #68]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f28:	d101      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d005      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f3c:	f040 80ff 	bne.w	800413e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f40:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f46:	f7fe fe4d 	bl	8002be4 <HAL_GetTick>
 8003f4a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f4c:	e00e      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f4e:	f7fe fe49 	bl	8002be4 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d907      	bls.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e188      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003f60:	40023800 	.word	0x40023800
 8003f64:	424711e0 	.word	0x424711e0
 8003f68:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f6c:	4b7e      	ldr	r3, [pc, #504]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1ea      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d009      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d028      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d124      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003fa0:	4b71      	ldr	r3, [pc, #452]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa6:	0c1b      	lsrs	r3, r3, #16
 8003fa8:	f003 0303 	and.w	r3, r3, #3
 8003fac:	3301      	adds	r3, #1
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fb2:	4b6d      	ldr	r3, [pc, #436]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb8:	0e1b      	lsrs	r3, r3, #24
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	019b      	lsls	r3, r3, #6
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	085b      	lsrs	r3, r3, #1
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	041b      	lsls	r3, r3, #16
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	061b      	lsls	r3, r3, #24
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	071b      	lsls	r3, r3, #28
 8003fe2:	4961      	ldr	r1, [pc, #388]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004008:	2b00      	cmp	r3, #0
 800400a:	d035      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004014:	d130      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004016:	4b54      	ldr	r3, [pc, #336]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	3301      	adds	r3, #1
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004028:	4b4f      	ldr	r3, [pc, #316]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800402a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800402e:	0f1b      	lsrs	r3, r3, #28
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	019b      	lsls	r3, r3, #6
 8004040:	431a      	orrs	r2, r3
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	3b01      	subs	r3, #1
 8004048:	041b      	lsls	r3, r3, #16
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	061b      	lsls	r3, r3, #24
 8004052:	431a      	orrs	r2, r3
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	071b      	lsls	r3, r3, #28
 8004058:	4943      	ldr	r1, [pc, #268]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004060:	4b41      	ldr	r3, [pc, #260]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004066:	f023 021f 	bic.w	r2, r3, #31
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	3b01      	subs	r3, #1
 8004070:	493d      	ldr	r1, [pc, #244]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004080:	2b00      	cmp	r3, #0
 8004082:	d029      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800408c:	d124      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800408e:	4b36      	ldr	r3, [pc, #216]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004094:	0c1b      	lsrs	r3, r3, #16
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	3301      	adds	r3, #1
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040a0:	4b31      	ldr	r3, [pc, #196]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040a6:	0f1b      	lsrs	r3, r3, #28
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	019b      	lsls	r3, r3, #6
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	085b      	lsrs	r3, r3, #1
 80040c0:	3b01      	subs	r3, #1
 80040c2:	041b      	lsls	r3, r3, #16
 80040c4:	431a      	orrs	r2, r3
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	061b      	lsls	r3, r3, #24
 80040ca:	431a      	orrs	r2, r3
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	071b      	lsls	r3, r3, #28
 80040d0:	4925      	ldr	r1, [pc, #148]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d016      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	019b      	lsls	r3, r3, #6
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	3b01      	subs	r3, #1
 80040f8:	041b      	lsls	r3, r3, #16
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	061b      	lsls	r3, r3, #24
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	071b      	lsls	r3, r3, #28
 800410a:	4917      	ldr	r1, [pc, #92]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004112:	4b16      	ldr	r3, [pc, #88]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004114:	2201      	movs	r2, #1
 8004116:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004118:	f7fe fd64 	bl	8002be4 <HAL_GetTick>
 800411c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004120:	f7fe fd60 	bl	8002be4 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e09f      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004132:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004140:	2b01      	cmp	r3, #1
 8004142:	f040 8095 	bne.w	8004270 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004146:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800414c:	f7fe fd4a 	bl	8002be4 <HAL_GetTick>
 8004150:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004152:	e00f      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004154:	f7fe fd46 	bl	8002be4 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d908      	bls.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e085      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004166:	bf00      	nop
 8004168:	40023800 	.word	0x40023800
 800416c:	42470068 	.word	0x42470068
 8004170:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004174:	4b41      	ldr	r3, [pc, #260]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800417c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004180:	d0e8      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d02b      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d127      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80041aa:	4b34      	ldr	r3, [pc, #208]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b0:	0c1b      	lsrs	r3, r3, #16
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	3301      	adds	r3, #1
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699a      	ldr	r2, [r3, #24]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	019b      	lsls	r3, r3, #6
 80041c6:	431a      	orrs	r2, r3
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	3b01      	subs	r3, #1
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	061b      	lsls	r3, r3, #24
 80041d8:	4928      	ldr	r1, [pc, #160]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041e0:	4b26      	ldr	r3, [pc, #152]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	3b01      	subs	r3, #1
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	4922      	ldr	r1, [pc, #136]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d01d      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800420e:	d118      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004210:	4b1a      	ldr	r3, [pc, #104]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	0e1b      	lsrs	r3, r3, #24
 8004218:	f003 030f 	and.w	r3, r3, #15
 800421c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	019b      	lsls	r3, r3, #6
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	3b01      	subs	r3, #1
 8004232:	041b      	lsls	r3, r3, #16
 8004234:	431a      	orrs	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	061b      	lsls	r3, r3, #24
 800423a:	4910      	ldr	r1, [pc, #64]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004242:	4b0f      	ldr	r3, [pc, #60]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004244:	2201      	movs	r2, #1
 8004246:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004248:	f7fe fccc 	bl	8002be4 <HAL_GetTick>
 800424c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004250:	f7fe fcc8 	bl	8002be4 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e007      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800426a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800426e:	d1ef      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3730      	adds	r7, #48	; 0x30
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40023800 	.word	0x40023800
 8004280:	42470070 	.word	0x42470070

08004284 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004284:	b480      	push	{r7}
 8004286:	b089      	sub	sp, #36	; 0x24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	2b07      	cmp	r3, #7
 80042aa:	f200 8224 	bhi.w	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80042ae:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80042b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b4:	080044b7 	.word	0x080044b7
 80042b8:	080045e1 	.word	0x080045e1
 80042bc:	080046f7 	.word	0x080046f7
 80042c0:	080042d5 	.word	0x080042d5
 80042c4:	080046f7 	.word	0x080046f7
 80042c8:	080046f7 	.word	0x080046f7
 80042cc:	080046f7 	.word	0x080046f7
 80042d0:	080042d5 	.word	0x080042d5
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80042d4:	4ba8      	ldr	r3, [pc, #672]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80042d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042da:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042ea:	f000 80d6 	beq.w	800449a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042f4:	f200 80dd 	bhi.w	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042fe:	f000 809f 	beq.w	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004308:	f200 80d3 	bhi.w	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004312:	d05b      	beq.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800431a:	f200 80ca 	bhi.w	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004324:	f000 80b6 	beq.w	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800432e:	f200 80c0 	bhi.w	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004338:	f000 8082 	beq.w	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004342:	f200 80b6 	bhi.w	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d004      	beq.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004352:	d03b      	beq.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8004354:	e0ad      	b.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004356:	4b88      	ldr	r3, [pc, #544]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8004362:	4b85      	ldr	r3, [pc, #532]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800436c:	4a83      	ldr	r2, [pc, #524]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800436e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	e008      	b.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8004376:	4b80      	ldr	r3, [pc, #512]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004380:	4a7f      	ldr	r2, [pc, #508]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8004388:	4b7b      	ldr	r3, [pc, #492]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	0e1b      	lsrs	r3, r3, #24
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8004396:	4b78      	ldr	r3, [pc, #480]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	099b      	lsrs	r3, r3, #6
 800439e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	fb03 f202 	mul.w	r2, r3, r2
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ae:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80043b0:	4b71      	ldr	r3, [pc, #452]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b6:	0a1b      	lsrs	r3, r3, #8
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	3301      	adds	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	61fb      	str	r3, [r7, #28]
          break;
 80043ca:	e073      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80043cc:	4b6a      	ldr	r3, [pc, #424]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d109      	bne.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80043d8:	4b67      	ldr	r3, [pc, #412]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e2:	4a66      	ldr	r2, [pc, #408]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	e008      	b.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80043ec:	4b62      	ldr	r3, [pc, #392]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80043ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f6:	4a62      	ldr	r2, [pc, #392]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80043fe:	4b5e      	ldr	r3, [pc, #376]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004404:	0e1b      	lsrs	r3, r3, #24
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 800440c:	4b5a      	ldr	r3, [pc, #360]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800440e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	fb03 f202 	mul.w	r2, r3, r2
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8004426:	4b54      	ldr	r3, [pc, #336]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	3301      	adds	r3, #1
 8004432:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8004434:	69fa      	ldr	r2, [r7, #28]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	fbb2 f3f3 	udiv	r3, r2, r3
 800443c:	61fb      	str	r3, [r7, #28]
          break;
 800443e:	e039      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004440:	4b4d      	ldr	r3, [pc, #308]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d108      	bne.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800444c:	4b4a      	ldr	r3, [pc, #296]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004454:	4a49      	ldr	r2, [pc, #292]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004456:	fbb2 f3f3 	udiv	r3, r2, r3
 800445a:	61bb      	str	r3, [r7, #24]
 800445c:	e007      	b.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800445e:	4b46      	ldr	r3, [pc, #280]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004466:	4a46      	ldr	r2, [pc, #280]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800446e:	4b42      	ldr	r3, [pc, #264]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	0f1b      	lsrs	r3, r3, #28
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800447a:	4b3f      	ldr	r3, [pc, #252]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	099b      	lsrs	r3, r3, #6
 8004480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	fb03 f202 	mul.w	r2, r3, r2
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	61fb      	str	r3, [r7, #28]
          break;
 8004492:	e00f      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004494:	4b3b      	ldr	r3, [pc, #236]	; (8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004496:	61fb      	str	r3, [r7, #28]
          break;
 8004498:	e00c      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800449a:	4b37      	ldr	r3, [pc, #220]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80044a6:	4b35      	ldr	r3, [pc, #212]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044a8:	61fb      	str	r3, [r7, #28]
          break;
 80044aa:	e003      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80044ac:	4b34      	ldr	r3, [pc, #208]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80044ae:	61fb      	str	r3, [r7, #28]
          break;
 80044b0:	e000      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80044b2:	bf00      	nop
        }
      }
      break;
 80044b4:	e11f      	b.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80044b6:	4b30      	ldr	r3, [pc, #192]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80044b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044bc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80044c8:	d079      	beq.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80044d0:	f200 8082 	bhi.w	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044da:	d03c      	beq.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044e2:	d879      	bhi.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d006      	beq.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044f0:	d172      	bne.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044f2:	4b24      	ldr	r3, [pc, #144]	; (8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80044f4:	61fb      	str	r3, [r7, #28]
          break;
 80044f6:	e072      	b.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044f8:	4b1f      	ldr	r3, [pc, #124]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004504:	d109      	bne.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004506:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004510:	4a1b      	ldr	r2, [pc, #108]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004512:	fbb2 f3f3 	udiv	r3, r2, r3
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	e008      	b.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800451a:	4b17      	ldr	r3, [pc, #92]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800451c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004524:	4a15      	ldr	r2, [pc, #84]	; (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004526:	fbb2 f3f3 	udiv	r3, r2, r3
 800452a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800452c:	4b12      	ldr	r3, [pc, #72]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800452e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004532:	099b      	lsrs	r3, r3, #6
 8004534:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004540:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004546:	0f1b      	lsrs	r3, r3, #28
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004552:	61fb      	str	r3, [r7, #28]
          break;
 8004554:	e043      	b.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004556:	4b08      	ldr	r3, [pc, #32]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004562:	d111      	bne.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004564:	4b04      	ldr	r3, [pc, #16]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800456c:	4a04      	ldr	r2, [pc, #16]	; (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800456e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004572:	61bb      	str	r3, [r7, #24]
 8004574:	e010      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004576:	bf00      	nop
 8004578:	40023800 	.word	0x40023800
 800457c:	00f42400 	.word	0x00f42400
 8004580:	017d7840 	.word	0x017d7840
 8004584:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004588:	4b5e      	ldr	r3, [pc, #376]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004590:	4a5d      	ldr	r2, [pc, #372]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004592:	fbb2 f3f3 	udiv	r3, r2, r3
 8004596:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004598:	4b5a      	ldr	r3, [pc, #360]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	099b      	lsrs	r3, r3, #6
 800459e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	fb02 f303 	mul.w	r3, r2, r3
 80045a8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80045aa:	4b56      	ldr	r3, [pc, #344]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	0f1b      	lsrs	r3, r3, #28
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ba:	61fb      	str	r3, [r7, #28]
          break;
 80045bc:	e00f      	b.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045be:	4b51      	ldr	r3, [pc, #324]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ca:	d102      	bne.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80045cc:	4b4f      	ldr	r3, [pc, #316]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80045ce:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80045d0:	e005      	b.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 80045d2:	4b4d      	ldr	r3, [pc, #308]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80045d4:	61fb      	str	r3, [r7, #28]
          break;
 80045d6:	e002      	b.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	61fb      	str	r3, [r7, #28]
          break;
 80045dc:	bf00      	nop
        }
      }
      break;
 80045de:	e08a      	b.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80045e0:	4b48      	ldr	r3, [pc, #288]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80045e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e6:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80045f2:	d06f      	beq.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80045fa:	d878      	bhi.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004602:	d03c      	beq.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800460a:	d870      	bhi.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d006      	beq.n	8004620 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004618:	d169      	bne.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800461a:	4b3d      	ldr	r3, [pc, #244]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800461c:	61fb      	str	r3, [r7, #28]
          break;
 800461e:	e069      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004620:	4b38      	ldr	r3, [pc, #224]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800462c:	d109      	bne.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800462e:	4b35      	ldr	r3, [pc, #212]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004638:	4a34      	ldr	r2, [pc, #208]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800463a:	fbb2 f3f3 	udiv	r3, r2, r3
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	e008      	b.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004642:	4b30      	ldr	r3, [pc, #192]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800464c:	4a2e      	ldr	r2, [pc, #184]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800464e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004652:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004654:	4b2b      	ldr	r3, [pc, #172]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465a:	099b      	lsrs	r3, r3, #6
 800465c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	fb02 f303 	mul.w	r3, r2, r3
 8004666:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004668:	4b26      	ldr	r3, [pc, #152]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800466a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466e:	0f1b      	lsrs	r3, r3, #28
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	fbb2 f3f3 	udiv	r3, r2, r3
 800467a:	61fb      	str	r3, [r7, #28]
          break;
 800467c:	e03a      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800467e:	4b21      	ldr	r3, [pc, #132]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800468a:	d108      	bne.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800468c:	4b1d      	ldr	r3, [pc, #116]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004694:	4a1d      	ldr	r2, [pc, #116]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004696:	fbb2 f3f3 	udiv	r3, r2, r3
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	e007      	b.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800469e:	4b19      	ldr	r3, [pc, #100]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a6:	4a18      	ldr	r2, [pc, #96]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80046ae:	4b15      	ldr	r3, [pc, #84]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80046c0:	4b10      	ldr	r3, [pc, #64]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	0f1b      	lsrs	r3, r3, #28
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	61fb      	str	r3, [r7, #28]
          break;
 80046d2:	e00f      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e0:	d102      	bne.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 80046e2:	4b0a      	ldr	r3, [pc, #40]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80046e4:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80046e6:	e005      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80046e8:	4b07      	ldr	r3, [pc, #28]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80046ea:	61fb      	str	r3, [r7, #28]
          break;
 80046ec:	e002      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
          break;
 80046f2:	bf00      	nop
        }
      }
      break;
 80046f4:	bf00      	nop
    }
  }
  return frequency;
 80046f6:	69fb      	ldr	r3, [r7, #28]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3724      	adds	r7, #36	; 0x24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	40023800 	.word	0x40023800
 8004708:	00f42400 	.word	0x00f42400
 800470c:	017d7840 	.word	0x017d7840
 8004710:	00bb8000 	.word	0x00bb8000

08004714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004718:	b0a6      	sub	sp, #152	; 0x98
 800471a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800473a:	4bc8      	ldr	r3, [pc, #800]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x348>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b0c      	cmp	r3, #12
 8004744:	f200 817e 	bhi.w	8004a44 <HAL_RCC_GetSysClockFreq+0x330>
 8004748:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <HAL_RCC_GetSysClockFreq+0x3c>)
 800474a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474e:	bf00      	nop
 8004750:	08004785 	.word	0x08004785
 8004754:	08004a45 	.word	0x08004a45
 8004758:	08004a45 	.word	0x08004a45
 800475c:	08004a45 	.word	0x08004a45
 8004760:	0800478d 	.word	0x0800478d
 8004764:	08004a45 	.word	0x08004a45
 8004768:	08004a45 	.word	0x08004a45
 800476c:	08004a45 	.word	0x08004a45
 8004770:	08004795 	.word	0x08004795
 8004774:	08004a45 	.word	0x08004a45
 8004778:	08004a45 	.word	0x08004a45
 800477c:	08004a45 	.word	0x08004a45
 8004780:	080048ff 	.word	0x080048ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004784:	4bb6      	ldr	r3, [pc, #728]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800478a:	e15f      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800478c:	4bb5      	ldr	r3, [pc, #724]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x350>)
 800478e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004792:	e15b      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004794:	4bb1      	ldr	r3, [pc, #708]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x348>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800479c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047a0:	4bae      	ldr	r3, [pc, #696]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x348>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d031      	beq.n	8004810 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ac:	4bab      	ldr	r3, [pc, #684]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x348>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	099b      	lsrs	r3, r3, #6
 80047b2:	2200      	movs	r2, #0
 80047b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80047b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047be:	663b      	str	r3, [r7, #96]	; 0x60
 80047c0:	2300      	movs	r3, #0
 80047c2:	667b      	str	r3, [r7, #100]	; 0x64
 80047c4:	4ba7      	ldr	r3, [pc, #668]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x350>)
 80047c6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80047ca:	462a      	mov	r2, r5
 80047cc:	fb03 f202 	mul.w	r2, r3, r2
 80047d0:	2300      	movs	r3, #0
 80047d2:	4621      	mov	r1, r4
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	4413      	add	r3, r2
 80047da:	4aa2      	ldr	r2, [pc, #648]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x350>)
 80047dc:	4621      	mov	r1, r4
 80047de:	fba1 1202 	umull	r1, r2, r1, r2
 80047e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047e4:	460a      	mov	r2, r1
 80047e6:	67ba      	str	r2, [r7, #120]	; 0x78
 80047e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80047ea:	4413      	add	r3, r2
 80047ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047f2:	2200      	movs	r2, #0
 80047f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80047f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80047f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047fc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004800:	f7fb fd5e 	bl	80002c0 <__aeabi_uldivmod>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4613      	mov	r3, r2
 800480a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800480e:	e064      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004810:	4b92      	ldr	r3, [pc, #584]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x348>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	099b      	lsrs	r3, r3, #6
 8004816:	2200      	movs	r2, #0
 8004818:	653b      	str	r3, [r7, #80]	; 0x50
 800481a:	657a      	str	r2, [r7, #84]	; 0x54
 800481c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800481e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004822:	64bb      	str	r3, [r7, #72]	; 0x48
 8004824:	2300      	movs	r3, #0
 8004826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004828:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800482c:	4622      	mov	r2, r4
 800482e:	462b      	mov	r3, r5
 8004830:	f04f 0000 	mov.w	r0, #0
 8004834:	f04f 0100 	mov.w	r1, #0
 8004838:	0159      	lsls	r1, r3, #5
 800483a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800483e:	0150      	lsls	r0, r2, #5
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4621      	mov	r1, r4
 8004846:	1a51      	subs	r1, r2, r1
 8004848:	6139      	str	r1, [r7, #16]
 800484a:	4629      	mov	r1, r5
 800484c:	eb63 0301 	sbc.w	r3, r3, r1
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800485e:	4659      	mov	r1, fp
 8004860:	018b      	lsls	r3, r1, #6
 8004862:	4651      	mov	r1, sl
 8004864:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004868:	4651      	mov	r1, sl
 800486a:	018a      	lsls	r2, r1, #6
 800486c:	4651      	mov	r1, sl
 800486e:	ebb2 0801 	subs.w	r8, r2, r1
 8004872:	4659      	mov	r1, fp
 8004874:	eb63 0901 	sbc.w	r9, r3, r1
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004884:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004888:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800488c:	4690      	mov	r8, r2
 800488e:	4699      	mov	r9, r3
 8004890:	4623      	mov	r3, r4
 8004892:	eb18 0303 	adds.w	r3, r8, r3
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	462b      	mov	r3, r5
 800489a:	eb49 0303 	adc.w	r3, r9, r3
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048ac:	4629      	mov	r1, r5
 80048ae:	028b      	lsls	r3, r1, #10
 80048b0:	4621      	mov	r1, r4
 80048b2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048b6:	4621      	mov	r1, r4
 80048b8:	028a      	lsls	r2, r1, #10
 80048ba:	4610      	mov	r0, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048c2:	2200      	movs	r2, #0
 80048c4:	643b      	str	r3, [r7, #64]	; 0x40
 80048c6:	647a      	str	r2, [r7, #68]	; 0x44
 80048c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048cc:	f7fb fcf8 	bl	80002c0 <__aeabi_uldivmod>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4613      	mov	r3, r2
 80048d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048da:	4b60      	ldr	r3, [pc, #384]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x348>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	0c1b      	lsrs	r3, r3, #16
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	3301      	adds	r3, #1
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80048ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80048fc:	e0a6      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048fe:	4b57      	ldr	r3, [pc, #348]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x348>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004906:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800490a:	4b54      	ldr	r3, [pc, #336]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x348>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d02a      	beq.n	800496c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004916:	4b51      	ldr	r3, [pc, #324]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x348>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	099b      	lsrs	r3, r3, #6
 800491c:	2200      	movs	r2, #0
 800491e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004920:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004928:	2100      	movs	r1, #0
 800492a:	4b4e      	ldr	r3, [pc, #312]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x350>)
 800492c:	fb03 f201 	mul.w	r2, r3, r1
 8004930:	2300      	movs	r3, #0
 8004932:	fb00 f303 	mul.w	r3, r0, r3
 8004936:	4413      	add	r3, r2
 8004938:	4a4a      	ldr	r2, [pc, #296]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x350>)
 800493a:	fba0 1202 	umull	r1, r2, r0, r2
 800493e:	677a      	str	r2, [r7, #116]	; 0x74
 8004940:	460a      	mov	r2, r1
 8004942:	673a      	str	r2, [r7, #112]	; 0x70
 8004944:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004946:	4413      	add	r3, r2
 8004948:	677b      	str	r3, [r7, #116]	; 0x74
 800494a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800494e:	2200      	movs	r2, #0
 8004950:	633b      	str	r3, [r7, #48]	; 0x30
 8004952:	637a      	str	r2, [r7, #52]	; 0x34
 8004954:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004958:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800495c:	f7fb fcb0 	bl	80002c0 <__aeabi_uldivmod>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4613      	mov	r3, r2
 8004966:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800496a:	e05b      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800496c:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x348>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	099b      	lsrs	r3, r3, #6
 8004972:	2200      	movs	r2, #0
 8004974:	62bb      	str	r3, [r7, #40]	; 0x28
 8004976:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497e:	623b      	str	r3, [r7, #32]
 8004980:	2300      	movs	r3, #0
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
 8004984:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004988:	4642      	mov	r2, r8
 800498a:	464b      	mov	r3, r9
 800498c:	f04f 0000 	mov.w	r0, #0
 8004990:	f04f 0100 	mov.w	r1, #0
 8004994:	0159      	lsls	r1, r3, #5
 8004996:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800499a:	0150      	lsls	r0, r2, #5
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4641      	mov	r1, r8
 80049a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80049a6:	4649      	mov	r1, r9
 80049a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049c0:	ebb2 040a 	subs.w	r4, r2, sl
 80049c4:	eb63 050b 	sbc.w	r5, r3, fp
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	00eb      	lsls	r3, r5, #3
 80049d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049d6:	00e2      	lsls	r2, r4, #3
 80049d8:	4614      	mov	r4, r2
 80049da:	461d      	mov	r5, r3
 80049dc:	4643      	mov	r3, r8
 80049de:	18e3      	adds	r3, r4, r3
 80049e0:	603b      	str	r3, [r7, #0]
 80049e2:	464b      	mov	r3, r9
 80049e4:	eb45 0303 	adc.w	r3, r5, r3
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049f6:	4629      	mov	r1, r5
 80049f8:	028b      	lsls	r3, r1, #10
 80049fa:	4621      	mov	r1, r4
 80049fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a00:	4621      	mov	r1, r4
 8004a02:	028a      	lsls	r2, r1, #10
 8004a04:	4610      	mov	r0, r2
 8004a06:	4619      	mov	r1, r3
 8004a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	61bb      	str	r3, [r7, #24]
 8004a10:	61fa      	str	r2, [r7, #28]
 8004a12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a16:	f7fb fc53 	bl	80002c0 <__aeabi_uldivmod>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4613      	mov	r3, r2
 8004a20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004a24:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x348>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	0f1b      	lsrs	r3, r3, #28
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004a32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004a42:	e003      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a44:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004a4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3798      	adds	r7, #152	; 0x98
 8004a54:	46bd      	mov	sp, r7
 8004a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	00f42400 	.word	0x00f42400
 8004a64:	017d7840 	.word	0x017d7840

08004a68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e28d      	b.n	8004f96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 8083 	beq.w	8004b8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a88:	4b94      	ldr	r3, [pc, #592]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 030c 	and.w	r3, r3, #12
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d019      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a94:	4b91      	ldr	r3, [pc, #580]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d106      	bne.n	8004aae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004aa0:	4b8e      	ldr	r3, [pc, #568]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aac:	d00c      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aae:	4b8b      	ldr	r3, [pc, #556]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ab6:	2b0c      	cmp	r3, #12
 8004ab8:	d112      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aba:	4b88      	ldr	r3, [pc, #544]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac6:	d10b      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac8:	4b84      	ldr	r3, [pc, #528]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d05b      	beq.n	8004b8c <HAL_RCC_OscConfig+0x124>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d157      	bne.n	8004b8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e25a      	b.n	8004f96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae8:	d106      	bne.n	8004af8 <HAL_RCC_OscConfig+0x90>
 8004aea:	4b7c      	ldr	r3, [pc, #496]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a7b      	ldr	r2, [pc, #492]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	e01d      	b.n	8004b34 <HAL_RCC_OscConfig+0xcc>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b00:	d10c      	bne.n	8004b1c <HAL_RCC_OscConfig+0xb4>
 8004b02:	4b76      	ldr	r3, [pc, #472]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a75      	ldr	r2, [pc, #468]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	4b73      	ldr	r3, [pc, #460]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a72      	ldr	r2, [pc, #456]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	e00b      	b.n	8004b34 <HAL_RCC_OscConfig+0xcc>
 8004b1c:	4b6f      	ldr	r3, [pc, #444]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a6e      	ldr	r2, [pc, #440]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	4b6c      	ldr	r3, [pc, #432]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a6b      	ldr	r2, [pc, #428]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d013      	beq.n	8004b64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3c:	f7fe f852 	bl	8002be4 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b44:	f7fe f84e 	bl	8002be4 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b64      	cmp	r3, #100	; 0x64
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e21f      	b.n	8004f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b56:	4b61      	ldr	r3, [pc, #388]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0f0      	beq.n	8004b44 <HAL_RCC_OscConfig+0xdc>
 8004b62:	e014      	b.n	8004b8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fe f83e 	bl	8002be4 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b6c:	f7fe f83a 	bl	8002be4 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b64      	cmp	r3, #100	; 0x64
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e20b      	b.n	8004f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b7e:	4b57      	ldr	r3, [pc, #348]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x104>
 8004b8a:	e000      	b.n	8004b8e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d06f      	beq.n	8004c7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b9a:	4b50      	ldr	r3, [pc, #320]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d017      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ba6:	4b4d      	ldr	r3, [pc, #308]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d105      	bne.n	8004bbe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004bb2:	4b4a      	ldr	r3, [pc, #296]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bbe:	4b47      	ldr	r3, [pc, #284]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004bc6:	2b0c      	cmp	r3, #12
 8004bc8:	d11c      	bne.n	8004c04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bca:	4b44      	ldr	r3, [pc, #272]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d116      	bne.n	8004c04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd6:	4b41      	ldr	r3, [pc, #260]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <HAL_RCC_OscConfig+0x186>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d001      	beq.n	8004bee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e1d3      	b.n	8004f96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bee:	4b3b      	ldr	r3, [pc, #236]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4937      	ldr	r1, [pc, #220]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c02:	e03a      	b.n	8004c7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d020      	beq.n	8004c4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c0c:	4b34      	ldr	r3, [pc, #208]	; (8004ce0 <HAL_RCC_OscConfig+0x278>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c12:	f7fd ffe7 	bl	8002be4 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c1a:	f7fd ffe3 	bl	8002be4 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e1b4      	b.n	8004f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2c:	4b2b      	ldr	r3, [pc, #172]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f0      	beq.n	8004c1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c38:	4b28      	ldr	r3, [pc, #160]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	4925      	ldr	r1, [pc, #148]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	600b      	str	r3, [r1, #0]
 8004c4c:	e015      	b.n	8004c7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c4e:	4b24      	ldr	r3, [pc, #144]	; (8004ce0 <HAL_RCC_OscConfig+0x278>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7fd ffc6 	bl	8002be4 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c5c:	f7fd ffc2 	bl	8002be4 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e193      	b.n	8004f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d036      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d016      	beq.n	8004cbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c8e:	4b15      	ldr	r3, [pc, #84]	; (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c94:	f7fd ffa6 	bl	8002be4 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c9c:	f7fd ffa2 	bl	8002be4 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e173      	b.n	8004f96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cae:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <HAL_RCC_OscConfig+0x274>)
 8004cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0x234>
 8004cba:	e01b      	b.n	8004cf4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cbc:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <HAL_RCC_OscConfig+0x27c>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc2:	f7fd ff8f 	bl	8002be4 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc8:	e00e      	b.n	8004ce8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cca:	f7fd ff8b 	bl	8002be4 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d907      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e15c      	b.n	8004f96 <HAL_RCC_OscConfig+0x52e>
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	42470000 	.word	0x42470000
 8004ce4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce8:	4b8a      	ldr	r3, [pc, #552]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1ea      	bne.n	8004cca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8097 	beq.w	8004e30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d02:	2300      	movs	r3, #0
 8004d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d06:	4b83      	ldr	r3, [pc, #524]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d12:	2300      	movs	r3, #0
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	4b7f      	ldr	r3, [pc, #508]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	4a7e      	ldr	r2, [pc, #504]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d20:	6413      	str	r3, [r2, #64]	; 0x40
 8004d22:	4b7c      	ldr	r3, [pc, #496]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	60bb      	str	r3, [r7, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d32:	4b79      	ldr	r3, [pc, #484]	; (8004f18 <HAL_RCC_OscConfig+0x4b0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d118      	bne.n	8004d70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d3e:	4b76      	ldr	r3, [pc, #472]	; (8004f18 <HAL_RCC_OscConfig+0x4b0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a75      	ldr	r2, [pc, #468]	; (8004f18 <HAL_RCC_OscConfig+0x4b0>)
 8004d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d4a:	f7fd ff4b 	bl	8002be4 <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d52:	f7fd ff47 	bl	8002be4 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e118      	b.n	8004f96 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d64:	4b6c      	ldr	r3, [pc, #432]	; (8004f18 <HAL_RCC_OscConfig+0x4b0>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0f0      	beq.n	8004d52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d106      	bne.n	8004d86 <HAL_RCC_OscConfig+0x31e>
 8004d78:	4b66      	ldr	r3, [pc, #408]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7c:	4a65      	ldr	r2, [pc, #404]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	6713      	str	r3, [r2, #112]	; 0x70
 8004d84:	e01c      	b.n	8004dc0 <HAL_RCC_OscConfig+0x358>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b05      	cmp	r3, #5
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCC_OscConfig+0x340>
 8004d8e:	4b61      	ldr	r3, [pc, #388]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d92:	4a60      	ldr	r2, [pc, #384]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004d94:	f043 0304 	orr.w	r3, r3, #4
 8004d98:	6713      	str	r3, [r2, #112]	; 0x70
 8004d9a:	4b5e      	ldr	r3, [pc, #376]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9e:	4a5d      	ldr	r2, [pc, #372]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	6713      	str	r3, [r2, #112]	; 0x70
 8004da6:	e00b      	b.n	8004dc0 <HAL_RCC_OscConfig+0x358>
 8004da8:	4b5a      	ldr	r3, [pc, #360]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dac:	4a59      	ldr	r2, [pc, #356]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	; 0x70
 8004db4:	4b57      	ldr	r3, [pc, #348]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db8:	4a56      	ldr	r2, [pc, #344]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004dba:	f023 0304 	bic.w	r3, r3, #4
 8004dbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d015      	beq.n	8004df4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc8:	f7fd ff0c 	bl	8002be4 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dce:	e00a      	b.n	8004de6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dd0:	f7fd ff08 	bl	8002be4 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e0d7      	b.n	8004f96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de6:	4b4b      	ldr	r3, [pc, #300]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0ee      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x368>
 8004df2:	e014      	b.n	8004e1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df4:	f7fd fef6 	bl	8002be4 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dfa:	e00a      	b.n	8004e12 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dfc:	f7fd fef2 	bl	8002be4 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e0c1      	b.n	8004f96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e12:	4b40      	ldr	r3, [pc, #256]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1ee      	bne.n	8004dfc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e1e:	7dfb      	ldrb	r3, [r7, #23]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d105      	bne.n	8004e30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e24:	4b3b      	ldr	r3, [pc, #236]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	4a3a      	ldr	r2, [pc, #232]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 80ad 	beq.w	8004f94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e3a:	4b36      	ldr	r3, [pc, #216]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d060      	beq.n	8004f08 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d145      	bne.n	8004eda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4e:	4b33      	ldr	r3, [pc, #204]	; (8004f1c <HAL_RCC_OscConfig+0x4b4>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e54:	f7fd fec6 	bl	8002be4 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e5c:	f7fd fec2 	bl	8002be4 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e093      	b.n	8004f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6e:	4b29      	ldr	r3, [pc, #164]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69da      	ldr	r2, [r3, #28]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	019b      	lsls	r3, r3, #6
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	3b01      	subs	r3, #1
 8004e94:	041b      	lsls	r3, r3, #16
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	061b      	lsls	r3, r3, #24
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea4:	071b      	lsls	r3, r3, #28
 8004ea6:	491b      	ldr	r1, [pc, #108]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eac:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <HAL_RCC_OscConfig+0x4b4>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb2:	f7fd fe97 	bl	8002be4 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eba:	f7fd fe93 	bl	8002be4 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e064      	b.n	8004f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ecc:	4b11      	ldr	r3, [pc, #68]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f0      	beq.n	8004eba <HAL_RCC_OscConfig+0x452>
 8004ed8:	e05c      	b.n	8004f94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eda:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <HAL_RCC_OscConfig+0x4b4>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee0:	f7fd fe80 	bl	8002be4 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee8:	f7fd fe7c 	bl	8002be4 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e04d      	b.n	8004f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efa:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <HAL_RCC_OscConfig+0x4ac>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f0      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x480>
 8004f06:	e045      	b.n	8004f94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d107      	bne.n	8004f20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e040      	b.n	8004f96 <HAL_RCC_OscConfig+0x52e>
 8004f14:	40023800 	.word	0x40023800
 8004f18:	40007000 	.word	0x40007000
 8004f1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f20:	4b1f      	ldr	r3, [pc, #124]	; (8004fa0 <HAL_RCC_OscConfig+0x538>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d030      	beq.n	8004f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d129      	bne.n	8004f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d122      	bne.n	8004f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f50:	4013      	ands	r3, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d119      	bne.n	8004f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	085b      	lsrs	r3, r3, #1
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d10f      	bne.n	8004f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d107      	bne.n	8004f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d001      	beq.n	8004f94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40023800 	.word	0x40023800

08004fa4 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d904      	bls.n	8004fc6 <HAL_SAI_InitProtocol+0x22>
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	3b03      	subs	r3, #3
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d812      	bhi.n	8004fea <HAL_SAI_InitProtocol+0x46>
 8004fc4:	e008      	b.n	8004fd8 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 f9dd 	bl	800538c <SAI_InitI2S>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd6:	e00b      	b.n	8004ff0 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 fa82 	bl	80054e8 <SAI_InitPCM>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fe8:	e002      	b.n	8004ff0 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	75fb      	strb	r3, [r7, #23]
      break;
 8004fee:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ff0:	7dfb      	ldrb	r3, [r7, #23]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d104      	bne.n	8005000 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 f808 	bl	800500c <HAL_SAI_Init>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005000:	7dfb      	ldrb	r3, [r7, #23]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e10c      	b.n	8005248 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fd fbe6 	bl	8002814 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 faff 	bl	8005654 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fba6 	bl	80057a8 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d030      	beq.n	80050c6 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fbe3 	bl	8005830 <SAI_GetInputClock>
 800506a:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	461a      	mov	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	025b      	lsls	r3, r3, #9
 800507e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005082:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4a72      	ldr	r2, [pc, #456]	; (8005250 <HAL_SAI_Init+0x244>)
 8005088:	fba2 2303 	umull	r2, r3, r2, r3
 800508c:	08da      	lsrs	r2, r3, #3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8005092:	68f9      	ldr	r1, [r7, #12]
 8005094:	4b6e      	ldr	r3, [pc, #440]	; (8005250 <HAL_SAI_Init+0x244>)
 8005096:	fba3 2301 	umull	r2, r3, r3, r1
 800509a:	08da      	lsrs	r2, r3, #3
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	1aca      	subs	r2, r1, r3
 80050a6:	2a08      	cmp	r2, #8
 80050a8:	d904      	bls.n	80050b4 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d104      	bne.n	80050c6 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	085a      	lsrs	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_SAI_Init+0xca>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d109      	bne.n	80050ea <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d101      	bne.n	80050e2 <HAL_SAI_Init+0xd6>
 80050de:	2300      	movs	r3, #0
 80050e0:	e001      	b.n	80050e6 <HAL_SAI_Init+0xda>
 80050e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	e008      	b.n	80050fc <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d102      	bne.n	80050f8 <HAL_SAI_Init+0xec>
 80050f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050f6:	e000      	b.n	80050fa <HAL_SAI_Init+0xee>
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b03      	cmp	r3, #3
 8005102:	d811      	bhi.n	8005128 <HAL_SAI_Init+0x11c>
 8005104:	2b02      	cmp	r3, #2
 8005106:	d20b      	bcs.n	8005120 <HAL_SAI_Init+0x114>
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <HAL_SAI_Init+0x106>
 800510c:	2b01      	cmp	r3, #1
 800510e:	d003      	beq.n	8005118 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8005110:	e00a      	b.n	8005128 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]
    break;
 8005116:	e008      	b.n	800512a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800511c:	613b      	str	r3, [r7, #16]
    break;
 800511e:	e004      	b.n	800512a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005120:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005124:	613b      	str	r3, [r7, #16]
    break;
 8005126:	e000      	b.n	800512a <HAL_SAI_Init+0x11e>
      break;
 8005128:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6819      	ldr	r1, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4b47      	ldr	r3, [pc, #284]	; (8005254 <HAL_SAI_Init+0x248>)
 8005136:	400b      	ands	r3, r1
 8005138:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6819      	ldr	r1, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005148:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800514e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005154:	431a      	orrs	r2, r3
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8005162:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800516e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	051b      	lsls	r3, r3, #20
 8005176:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6812      	ldr	r2, [r2, #0]
 800518a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800518e:	f023 030f 	bic.w	r3, r3, #15
 8005192:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6859      	ldr	r1, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6899      	ldr	r1, [r3, #8]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	4b26      	ldr	r3, [pc, #152]	; (8005258 <HAL_SAI_Init+0x24c>)
 80051be:	400b      	ands	r3, r1
 80051c0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6899      	ldr	r1, [r3, #8]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051cc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80051d2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 80051d8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 80051de:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e4:	3b01      	subs	r3, #1
 80051e6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80051e8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68d9      	ldr	r1, [r3, #12]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005200:	400b      	ands	r3, r1
 8005202:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68d9      	ldr	r1, [r3, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005212:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005218:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800521a:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005220:	3b01      	subs	r3, #1
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	cccccccd 	.word	0xcccccccd
 8005254:	ff05c010 	.word	0xff05c010
 8005258:	fff88000 	.word	0xfff88000

0800525c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	4613      	mov	r3, r2
 8005268:	80fb      	strh	r3, [r7, #6]
  if ((pData == NULL) || (Size == 0))
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_SAI_Receive_DMA+0x1a>
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e074      	b.n	8005364 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	d16d      	bne.n	8005362 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800528c:	2b01      	cmp	r3, #1
 800528e:	d101      	bne.n	8005294 <HAL_SAI_Receive_DMA+0x38>
 8005290:	2302      	movs	r3, #2
 8005292:	e067      	b.n	8005364 <HAL_SAI_Receive_DMA+0x108>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hsai->pBuffPtr = pData;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	669a      	str	r2, [r3, #104]	; 0x68
    hsai->XferSize = Size;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	88fa      	ldrh	r2, [r7, #6]
 80052a6:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    hsai->XferCount = Size;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	88fa      	ldrh	r2, [r7, #6]
 80052ae:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2222      	movs	r2, #34	; 0x22
 80052be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052c6:	4a29      	ldr	r2, [pc, #164]	; (800536c <HAL_SAI_Receive_DMA+0x110>)
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ce:	4a28      	ldr	r2, [pc, #160]	; (8005370 <HAL_SAI_Receive_DMA+0x114>)
 80052d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d6:	4a27      	ldr	r2, [pc, #156]	; (8005374 <HAL_SAI_Receive_DMA+0x118>)
 80052d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052de:	2200      	movs	r2, #0
 80052e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	331c      	adds	r3, #28
 80052ec:	4619      	mov	r1, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052f2:	461a      	mov	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80052fa:	f7fd fe63 	bl	8002fc4 <HAL_DMA_Start_IT>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return  HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e029      	b.n	8005364 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005310:	2100      	movs	r1, #0
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f968 	bl	80055e8 <SAI_InterruptFlag>
 8005318:	4601      	mov	r1, r0
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005336:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d107      	bne.n	8005356 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005354:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	e000      	b.n	8005364 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8005362:	2302      	movs	r3, #2
  }
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	08005725 	.word	0x08005725
 8005370:	080056c5 	.word	0x080056c5
 8005374:	08005741 	.word	0x08005741

08005378 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <SAI_InitI2S+0x2a>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d103      	bne.n	80053be <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	641a      	str	r2, [r3, #64]	; 0x40
 80053bc:	e002      	b.n	80053c4 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80053ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053d2:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	661a      	str	r2, [r3, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e076      	b.n	80054dc <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d107      	bne.n	8005404 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005400:	655a      	str	r2, [r3, #84]	; 0x54
 8005402:	e006      	b.n	8005412 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800540a:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Frame definition */
  switch (datasize)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b03      	cmp	r3, #3
 8005416:	d84f      	bhi.n	80054b8 <SAI_InitI2S+0x12c>
 8005418:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <SAI_InitI2S+0x94>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005431 	.word	0x08005431
 8005424:	08005453 	.word	0x08005453
 8005428:	08005475 	.word	0x08005475
 800542c:	08005497 	.word	0x08005497
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2280      	movs	r2, #128	; 0x80
 8005434:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	085b      	lsrs	r3, r3, #1
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	085b      	lsrs	r3, r3, #1
 8005444:	011a      	lsls	r2, r3, #4
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2240      	movs	r2, #64	; 0x40
 800544e:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005450:	e034      	b.n	80054bc <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2280      	movs	r2, #128	; 0x80
 8005456:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	085b      	lsrs	r3, r3, #1
 800545c:	019a      	lsls	r2, r3, #6
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	085b      	lsrs	r3, r3, #1
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2280      	movs	r2, #128	; 0x80
 8005470:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005472:	e023      	b.n	80054bc <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	22c0      	movs	r2, #192	; 0xc0
 8005478:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	085b      	lsrs	r3, r3, #1
 800547e:	019a      	lsls	r2, r3, #6
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2280      	movs	r2, #128	; 0x80
 8005492:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005494:	e012      	b.n	80054bc <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	22e0      	movs	r2, #224	; 0xe0
 800549a:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	085b      	lsrs	r3, r3, #1
 80054a0:	019a      	lsls	r2, r3, #6
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	085b      	lsrs	r3, r3, #1
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2280      	movs	r2, #128	; 0x80
 80054b4:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80054b6:	e001      	b.n	80054bc <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e00f      	b.n	80054dc <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d10b      	bne.n	80054da <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d102      	bne.n	80054ce <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2210      	movs	r2, #16
 80054cc:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d102      	bne.n	80054da <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2208      	movs	r2, #8
 80054d8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <SAI_InitPCM+0x2a>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b02      	cmp	r3, #2
 8005510:	d103      	bne.n	800551a <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	641a      	str	r2, [r3, #64]	; 0x40
 8005518:	e002      	b.n	8005520 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800552c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005534:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005548:	665a      	str	r2, [r3, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b04      	cmp	r3, #4
 800554e:	d103      	bne.n	8005558 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	649a      	str	r2, [r3, #72]	; 0x48
 8005556:	e002      	b.n	800555e <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	220d      	movs	r2, #13
 800555c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  switch (datasize)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b03      	cmp	r3, #3
 8005562:	d837      	bhi.n	80055d4 <SAI_InitPCM+0xec>
 8005564:	a201      	add	r2, pc, #4	; (adr r2, 800556c <SAI_InitPCM+0x84>)
 8005566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556a:	bf00      	nop
 800556c:	0800557d 	.word	0x0800557d
 8005570:	08005593 	.word	0x08005593
 8005574:	080055a9 	.word	0x080055a9
 8005578:	080055bf 	.word	0x080055bf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2280      	movs	r2, #128	; 0x80
 8005580:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	011a      	lsls	r2, r3, #4
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2240      	movs	r2, #64	; 0x40
 800558e:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005590:	e022      	b.n	80055d8 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2280      	movs	r2, #128	; 0x80
 8005596:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2280      	movs	r2, #128	; 0x80
 80055a4:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80055a6:	e017      	b.n	80055d8 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	22c0      	movs	r2, #192	; 0xc0
 80055ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2280      	movs	r2, #128	; 0x80
 80055ba:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80055bc:	e00c      	b.n	80055d8 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	22e0      	movs	r2, #224	; 0xe0
 80055c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2280      	movs	r2, #128	; 0x80
 80055d0:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80055d2:	e001      	b.n	80055d8 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e000      	b.n	80055da <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop

080055e8 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d103      	bne.n	8005604 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f043 0308 	orr.w	r3, r3, #8
 8005602:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005608:	2b08      	cmp	r3, #8
 800560a:	d10b      	bne.n	8005624 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005610:	2b03      	cmp	r3, #3
 8005612:	d003      	beq.n	800561c <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d103      	bne.n	8005624 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f043 0310 	orr.w	r3, r3, #16
 8005622:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b03      	cmp	r3, #3
 800562a:	d003      	beq.n	8005634 <SAI_InterruptFlag+0x4c>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b02      	cmp	r3, #2
 8005632:	d104      	bne.n	800563e <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	e003      	b.n	8005646 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f043 0304 	orr.w	r3, r3, #4
 8005644:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005646:	68fb      	ldr	r3, [r7, #12]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800565c:	4b17      	ldr	r3, [pc, #92]	; (80056bc <SAI_Disable+0x68>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a17      	ldr	r2, [pc, #92]	; (80056c0 <SAI_Disable+0x6c>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	0b1b      	lsrs	r3, r3, #12
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800567e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	1e5a      	subs	r2, r3, #1
 8005684:	60fa      	str	r2, [r7, #12]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10a      	bne.n	80056a0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005690:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	72fb      	strb	r3, [r7, #11]
      break;
 800569e:	e006      	b.n	80056ae <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e8      	bne.n	8005680 <SAI_Disable+0x2c>

  return status;
 80056ae:	7afb      	ldrb	r3, [r7, #11]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	20000038 	.word	0x20000038
 80056c0:	95cbec1b 	.word	0x95cbec1b

080056c4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056da:	d01c      	beq.n	8005716 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80056ea:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80056f4:	2100      	movs	r1, #0
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f7ff ff76 	bl	80055e8 <SAI_InterruptFlag>
 80056fc:	4603      	mov	r3, r0
 80056fe:	43d9      	mvns	r1, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	400a      	ands	r2, r1
 800570c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f7fc fbf4 	bl	8001f04 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800571c:	bf00      	nop
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005730:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f7fc fbd8 	bl	8001ee8 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005738:	bf00      	nop
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005754:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005764:	2b01      	cmp	r3, #1
 8005766:	d004      	beq.n	8005772 <SAI_DMAError+0x32>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800576c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576e:	2b01      	cmp	r3, #1
 8005770:	d112      	bne.n	8005798 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005780:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f7ff ff66 	bl	8005654 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f7ff fded 	bl	8005378 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800579e:	bf00      	nop
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d00c      	beq.n	80057d2 <SAI_BlockSynchroConfig+0x2a>
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d80d      	bhi.n	80057d8 <SAI_BlockSynchroConfig+0x30>
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <SAI_BlockSynchroConfig+0x1e>
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d003      	beq.n	80057cc <SAI_BlockSynchroConfig+0x24>
 80057c4:	e008      	b.n	80057d8 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
      break;
 80057ca:	e008      	b.n	80057de <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80057cc:	2310      	movs	r3, #16
 80057ce:	60fb      	str	r3, [r7, #12]
      break;
 80057d0:	e005      	b.n	80057de <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80057d2:	2320      	movs	r3, #32
 80057d4:	60fb      	str	r3, [r7, #12]
      break;
 80057d6:	e002      	b.n	80057de <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	60fb      	str	r3, [r7, #12]
      break;
 80057dc:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d103      	bne.n	80057ee <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f043 0301 	orr.w	r3, r3, #1
 80057ec:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a0b      	ldr	r2, [pc, #44]	; (8005820 <SAI_BlockSynchroConfig+0x78>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d004      	beq.n	8005802 <SAI_BlockSynchroConfig+0x5a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a09      	ldr	r2, [pc, #36]	; (8005824 <SAI_BlockSynchroConfig+0x7c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d103      	bne.n	800580a <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 8005802:	4a09      	ldr	r2, [pc, #36]	; (8005828 <SAI_BlockSynchroConfig+0x80>)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	e003      	b.n	8005812 <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800580a:	4a08      	ldr	r2, [pc, #32]	; (800582c <SAI_BlockSynchroConfig+0x84>)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40015804 	.word	0x40015804
 8005824:	40015824 	.word	0x40015824
 8005828:	40015800 	.word	0x40015800
 800582c:	40015c00 	.word	0x40015c00

08005830 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a0a      	ldr	r2, [pc, #40]	; (800586c <SAI_GetInputClock+0x3c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d004      	beq.n	8005850 <SAI_GetInputClock+0x20>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a09      	ldr	r2, [pc, #36]	; (8005870 <SAI_GetInputClock+0x40>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d104      	bne.n	800585a <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005850:	2004      	movs	r0, #4
 8005852:	f7fe fd17 	bl	8004284 <HAL_RCCEx_GetPeriphCLKFreq>
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	e003      	b.n	8005862 <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800585a:	2008      	movs	r0, #8
 800585c:	f7fe fd12 	bl	8004284 <HAL_RCCEx_GetPeriphCLKFreq>
 8005860:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8005862:	68fb      	ldr	r3, [r7, #12]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40015804 	.word	0x40015804
 8005870:	40015824 	.word	0x40015824

08005874 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e07b      	b.n	800597e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	2b00      	cmp	r3, #0
 800588c:	d108      	bne.n	80058a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005896:	d009      	beq.n	80058ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	61da      	str	r2, [r3, #28]
 800589e:	e005      	b.n	80058ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d106      	bne.n	80058cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7fc fe04 	bl	80024d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058f4:	431a      	orrs	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	431a      	orrs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005930:	ea42 0103 	orr.w	r1, r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005938:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	0c1b      	lsrs	r3, r3, #16
 800594a:	f003 0104 	and.w	r1, r3, #4
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	f003 0210 	and.w	r2, r3, #16
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69da      	ldr	r2, [r3, #28]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800596c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b088      	sub	sp, #32
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	603b      	str	r3, [r7, #0]
 8005992:	4613      	mov	r3, r2
 8005994:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_SPI_Transmit+0x22>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e126      	b.n	8005bf6 <HAL_SPI_Transmit+0x270>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059b0:	f7fd f918 	bl	8002be4 <HAL_GetTick>
 80059b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059b6:	88fb      	ldrh	r3, [r7, #6]
 80059b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d002      	beq.n	80059cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80059c6:	2302      	movs	r3, #2
 80059c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059ca:	e10b      	b.n	8005be4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <HAL_SPI_Transmit+0x52>
 80059d2:	88fb      	ldrh	r3, [r7, #6]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d102      	bne.n	80059de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059dc:	e102      	b.n	8005be4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2203      	movs	r2, #3
 80059e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	88fa      	ldrh	r2, [r7, #6]
 80059f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	88fa      	ldrh	r2, [r7, #6]
 80059fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a24:	d10f      	bne.n	8005a46 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a50:	2b40      	cmp	r3, #64	; 0x40
 8005a52:	d007      	beq.n	8005a64 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a6c:	d14b      	bne.n	8005b06 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <HAL_SPI_Transmit+0xf6>
 8005a76:	8afb      	ldrh	r3, [r7, #22]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d13e      	bne.n	8005afa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a80:	881a      	ldrh	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	1c9a      	adds	r2, r3, #2
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005aa0:	e02b      	b.n	8005afa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d112      	bne.n	8005ad6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab4:	881a      	ldrh	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	1c9a      	adds	r2, r3, #2
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ad4:	e011      	b.n	8005afa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ad6:	f7fd f885 	bl	8002be4 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d803      	bhi.n	8005aee <HAL_SPI_Transmit+0x168>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aec:	d102      	bne.n	8005af4 <HAL_SPI_Transmit+0x16e>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d102      	bne.n	8005afa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005af8:	e074      	b.n	8005be4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1ce      	bne.n	8005aa2 <HAL_SPI_Transmit+0x11c>
 8005b04:	e04c      	b.n	8005ba0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <HAL_SPI_Transmit+0x18e>
 8005b0e:	8afb      	ldrh	r3, [r7, #22]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d140      	bne.n	8005b96 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	330c      	adds	r3, #12
 8005b1e:	7812      	ldrb	r2, [r2, #0]
 8005b20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b3a:	e02c      	b.n	8005b96 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d113      	bne.n	8005b72 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	330c      	adds	r3, #12
 8005b54:	7812      	ldrb	r2, [r2, #0]
 8005b56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b70:	e011      	b.n	8005b96 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b72:	f7fd f837 	bl	8002be4 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d803      	bhi.n	8005b8a <HAL_SPI_Transmit+0x204>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b88:	d102      	bne.n	8005b90 <HAL_SPI_Transmit+0x20a>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d102      	bne.n	8005b96 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b94:	e026      	b.n	8005be4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1cd      	bne.n	8005b3c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	6839      	ldr	r1, [r7, #0]
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 fd21 	bl	80065ec <SPI_EndRxTxTransaction>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	77fb      	strb	r3, [r7, #31]
 8005be0:	e000      	b.n	8005be4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005be2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3720      	adds	r7, #32
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b088      	sub	sp, #32
 8005c02:	af02      	add	r7, sp, #8
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	603b      	str	r3, [r7, #0]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c1a:	d112      	bne.n	8005c42 <HAL_SPI_Receive+0x44>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10e      	bne.n	8005c42 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2204      	movs	r2, #4
 8005c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c2c:	88fa      	ldrh	r2, [r7, #6]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	4613      	mov	r3, r2
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f8f1 	bl	8005e20 <HAL_SPI_TransmitReceive>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	e0ea      	b.n	8005e18 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <HAL_SPI_Receive+0x52>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e0e3      	b.n	8005e18 <HAL_SPI_Receive+0x21a>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c58:	f7fc ffc4 	bl	8002be4 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d002      	beq.n	8005c70 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c6e:	e0ca      	b.n	8005e06 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <HAL_SPI_Receive+0x7e>
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d102      	bne.n	8005c82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c80:	e0c1      	b.n	8005e06 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2204      	movs	r2, #4
 8005c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	88fa      	ldrh	r2, [r7, #6]
 8005c9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	88fa      	ldrh	r2, [r7, #6]
 8005ca0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc8:	d10f      	bne.n	8005cea <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ce8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf4:	2b40      	cmp	r3, #64	; 0x40
 8005cf6:	d007      	beq.n	8005d08 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d06:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d162      	bne.n	8005dd6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d10:	e02e      	b.n	8005d70 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d115      	bne.n	8005d4c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f103 020c 	add.w	r2, r3, #12
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	7812      	ldrb	r2, [r2, #0]
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d4a:	e011      	b.n	8005d70 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d4c:	f7fc ff4a 	bl	8002be4 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d803      	bhi.n	8005d64 <HAL_SPI_Receive+0x166>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d62:	d102      	bne.n	8005d6a <HAL_SPI_Receive+0x16c>
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d102      	bne.n	8005d70 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d6e:	e04a      	b.n	8005e06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1cb      	bne.n	8005d12 <HAL_SPI_Receive+0x114>
 8005d7a:	e031      	b.n	8005de0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d113      	bne.n	8005db2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	b292      	uxth	r2, r2
 8005d96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9c:	1c9a      	adds	r2, r3, #2
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005db0:	e011      	b.n	8005dd6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005db2:	f7fc ff17 	bl	8002be4 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d803      	bhi.n	8005dca <HAL_SPI_Receive+0x1cc>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dc8:	d102      	bne.n	8005dd0 <HAL_SPI_Receive+0x1d2>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d102      	bne.n	8005dd6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005dd4:	e017      	b.n	8005e06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1cd      	bne.n	8005d7c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 fb9b 	bl	8006520 <SPI_EndRxTransaction>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2220      	movs	r2, #32
 8005df4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	75fb      	strb	r3, [r7, #23]
 8005e02:	e000      	b.n	8005e06 <HAL_SPI_Receive+0x208>
  }

error :
 8005e04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08c      	sub	sp, #48	; 0x30
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_SPI_TransmitReceive+0x26>
 8005e42:	2302      	movs	r3, #2
 8005e44:	e18a      	b.n	800615c <HAL_SPI_TransmitReceive+0x33c>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e4e:	f7fc fec9 	bl	8002be4 <HAL_GetTick>
 8005e52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e64:	887b      	ldrh	r3, [r7, #2]
 8005e66:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d00f      	beq.n	8005e90 <HAL_SPI_TransmitReceive+0x70>
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e76:	d107      	bne.n	8005e88 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d103      	bne.n	8005e88 <HAL_SPI_TransmitReceive+0x68>
 8005e80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d003      	beq.n	8005e90 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e8e:	e15b      	b.n	8006148 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d005      	beq.n	8005ea2 <HAL_SPI_TransmitReceive+0x82>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <HAL_SPI_TransmitReceive+0x82>
 8005e9c:	887b      	ldrh	r3, [r7, #2]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d103      	bne.n	8005eaa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ea8:	e14e      	b.n	8006148 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d003      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2205      	movs	r2, #5
 8005eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	887a      	ldrh	r2, [r7, #2]
 8005ece:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	887a      	ldrh	r2, [r7, #2]
 8005ed4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	887a      	ldrh	r2, [r7, #2]
 8005ee0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	887a      	ldrh	r2, [r7, #2]
 8005ee6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efe:	2b40      	cmp	r3, #64	; 0x40
 8005f00:	d007      	beq.n	8005f12 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f1a:	d178      	bne.n	800600e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <HAL_SPI_TransmitReceive+0x10a>
 8005f24:	8b7b      	ldrh	r3, [r7, #26]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d166      	bne.n	8005ff8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	881a      	ldrh	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	1c9a      	adds	r2, r3, #2
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f4e:	e053      	b.n	8005ff8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d11b      	bne.n	8005f96 <HAL_SPI_TransmitReceive+0x176>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d016      	beq.n	8005f96 <HAL_SPI_TransmitReceive+0x176>
 8005f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d113      	bne.n	8005f96 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	881a      	ldrh	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	1c9a      	adds	r2, r3, #2
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d119      	bne.n	8005fd8 <HAL_SPI_TransmitReceive+0x1b8>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d014      	beq.n	8005fd8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb8:	b292      	uxth	r2, r2
 8005fba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc0:	1c9a      	adds	r2, r3, #2
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fd8:	f7fc fe04 	bl	8002be4 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d807      	bhi.n	8005ff8 <HAL_SPI_TransmitReceive+0x1d8>
 8005fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fee:	d003      	beq.n	8005ff8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ff6:	e0a7      	b.n	8006148 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1a6      	bne.n	8005f50 <HAL_SPI_TransmitReceive+0x130>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006006:	b29b      	uxth	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1a1      	bne.n	8005f50 <HAL_SPI_TransmitReceive+0x130>
 800600c:	e07c      	b.n	8006108 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <HAL_SPI_TransmitReceive+0x1fc>
 8006016:	8b7b      	ldrh	r3, [r7, #26]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d16b      	bne.n	80060f4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	330c      	adds	r3, #12
 8006026:	7812      	ldrb	r2, [r2, #0]
 8006028:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006042:	e057      	b.n	80060f4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b02      	cmp	r3, #2
 8006050:	d11c      	bne.n	800608c <HAL_SPI_TransmitReceive+0x26c>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006056:	b29b      	uxth	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d017      	beq.n	800608c <HAL_SPI_TransmitReceive+0x26c>
 800605c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605e:	2b01      	cmp	r3, #1
 8006060:	d114      	bne.n	800608c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	330c      	adds	r3, #12
 800606c:	7812      	ldrb	r2, [r2, #0]
 800606e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b01      	cmp	r3, #1
 8006098:	d119      	bne.n	80060ce <HAL_SPI_TransmitReceive+0x2ae>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d014      	beq.n	80060ce <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060ca:	2301      	movs	r3, #1
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060ce:	f7fc fd89 	bl	8002be4 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060da:	429a      	cmp	r2, r3
 80060dc:	d803      	bhi.n	80060e6 <HAL_SPI_TransmitReceive+0x2c6>
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060e4:	d102      	bne.n	80060ec <HAL_SPI_TransmitReceive+0x2cc>
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d103      	bne.n	80060f4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80060f2:	e029      	b.n	8006148 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1a2      	bne.n	8006044 <HAL_SPI_TransmitReceive+0x224>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d19d      	bne.n	8006044 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800610a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 fa6d 	bl	80065ec <SPI_EndRxTxTransaction>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d006      	beq.n	8006126 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2220      	movs	r2, #32
 8006122:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006124:	e010      	b.n	8006148 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10b      	bne.n	8006146 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	617b      	str	r3, [r7, #20]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	617b      	str	r3, [r7, #20]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	e000      	b.n	8006148 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006146:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006158:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800615c:	4618      	mov	r0, r3
 800615e:	3730      	adds	r7, #48	; 0x30
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	4613      	mov	r3, r2
 8006170:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800617c:	2b01      	cmp	r3, #1
 800617e:	d101      	bne.n	8006184 <HAL_SPI_Transmit_DMA+0x20>
 8006180:	2302      	movs	r3, #2
 8006182:	e09b      	b.n	80062bc <HAL_SPI_Transmit_DMA+0x158>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	d002      	beq.n	800619e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006198:	2302      	movs	r3, #2
 800619a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800619c:	e089      	b.n	80062b2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_SPI_Transmit_DMA+0x46>
 80061a4:	88fb      	ldrh	r3, [r7, #6]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d102      	bne.n	80061b0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061ae:	e080      	b.n	80062b2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2203      	movs	r2, #3
 80061b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	88fa      	ldrh	r2, [r7, #6]
 80061ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f6:	d10f      	bne.n	8006218 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006206:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006216:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800621c:	4a29      	ldr	r2, [pc, #164]	; (80062c4 <HAL_SPI_Transmit_DMA+0x160>)
 800621e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006224:	4a28      	ldr	r2, [pc, #160]	; (80062c8 <HAL_SPI_Transmit_DMA+0x164>)
 8006226:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800622c:	4a27      	ldr	r2, [pc, #156]	; (80062cc <HAL_SPI_Transmit_DMA+0x168>)
 800622e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006234:	2200      	movs	r2, #0
 8006236:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006240:	4619      	mov	r1, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	330c      	adds	r3, #12
 8006248:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800624e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006250:	f7fc feb8 	bl	8002fc4 <HAL_DMA_Start_IT>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00c      	beq.n	8006274 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625e:	f043 0210 	orr.w	r2, r3, #16
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006272:	e01e      	b.n	80062b2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b40      	cmp	r3, #64	; 0x40
 8006280:	d007      	beq.n	8006292 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006290:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 0220 	orr.w	r2, r2, #32
 80062a0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f042 0202 	orr.w	r2, r2, #2
 80062b0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	080063b5 	.word	0x080063b5
 80062c8:	0800630d 	.word	0x0800630d
 80062cc:	080063d1 	.word	0x080063d1

080062d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800631a:	f7fc fc63 	bl	8002be4 <HAL_GetTick>
 800631e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800632e:	d03b      	beq.n	80063a8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0220 	bic.w	r2, r2, #32
 800633e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0202 	bic.w	r2, r2, #2
 800634e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	2164      	movs	r1, #100	; 0x64
 8006354:	6978      	ldr	r0, [r7, #20]
 8006356:	f000 f949 	bl	80065ec <SPI_EndRxTxTransaction>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d005      	beq.n	800636c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006364:	f043 0220 	orr.w	r2, r3, #32
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10a      	bne.n	800638a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006374:	2300      	movs	r3, #0
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2200      	movs	r2, #0
 800638e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80063a0:	6978      	ldr	r0, [r7, #20]
 80063a2:	f7ff ffa9 	bl	80062f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80063a6:	e002      	b.n	80063ae <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80063a8:	6978      	ldr	r0, [r7, #20]
 80063aa:	f7ff ff91 	bl	80062d0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f7ff ff8e 	bl	80062e4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063c8:	bf00      	nop
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0203 	bic.w	r2, r2, #3
 80063ec:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f2:	f043 0210 	orr.w	r2, r3, #16
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f7ff ff78 	bl	80062f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006408:	bf00      	nop
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b088      	sub	sp, #32
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	603b      	str	r3, [r7, #0]
 800641c:	4613      	mov	r3, r2
 800641e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006420:	f7fc fbe0 	bl	8002be4 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	1a9b      	subs	r3, r3, r2
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	4413      	add	r3, r2
 800642e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006430:	f7fc fbd8 	bl	8002be4 <HAL_GetTick>
 8006434:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006436:	4b39      	ldr	r3, [pc, #228]	; (800651c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	015b      	lsls	r3, r3, #5
 800643c:	0d1b      	lsrs	r3, r3, #20
 800643e:	69fa      	ldr	r2, [r7, #28]
 8006440:	fb02 f303 	mul.w	r3, r2, r3
 8006444:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006446:	e054      	b.n	80064f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800644e:	d050      	beq.n	80064f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006450:	f7fc fbc8 	bl	8002be4 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	69fa      	ldr	r2, [r7, #28]
 800645c:	429a      	cmp	r2, r3
 800645e:	d902      	bls.n	8006466 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d13d      	bne.n	80064e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006474:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800647e:	d111      	bne.n	80064a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006488:	d004      	beq.n	8006494 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006492:	d107      	bne.n	80064a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ac:	d10f      	bne.n	80064ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e017      	b.n	8006512 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	4013      	ands	r3, r2
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	429a      	cmp	r2, r3
 8006500:	bf0c      	ite	eq
 8006502:	2301      	moveq	r3, #1
 8006504:	2300      	movne	r3, #0
 8006506:	b2db      	uxtb	r3, r3
 8006508:	461a      	mov	r2, r3
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	429a      	cmp	r2, r3
 800650e:	d19b      	bne.n	8006448 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3720      	adds	r7, #32
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000038 	.word	0x20000038

08006520 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af02      	add	r7, sp, #8
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006534:	d111      	bne.n	800655a <SPI_EndRxTransaction+0x3a>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800653e:	d004      	beq.n	800654a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006548:	d107      	bne.n	800655a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006558:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006562:	d12a      	bne.n	80065ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800656c:	d012      	beq.n	8006594 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2200      	movs	r2, #0
 8006576:	2180      	movs	r1, #128	; 0x80
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f7ff ff49 	bl	8006410 <SPI_WaitFlagStateUntilTimeout>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d02d      	beq.n	80065e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006588:	f043 0220 	orr.w	r2, r3, #32
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e026      	b.n	80065e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2200      	movs	r2, #0
 800659c:	2101      	movs	r1, #1
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f7ff ff36 	bl	8006410 <SPI_WaitFlagStateUntilTimeout>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d01a      	beq.n	80065e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ae:	f043 0220 	orr.w	r2, r3, #32
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e013      	b.n	80065e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2200      	movs	r2, #0
 80065c2:	2101      	movs	r1, #1
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f7ff ff23 	bl	8006410 <SPI_WaitFlagStateUntilTimeout>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d007      	beq.n	80065e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d4:	f043 0220 	orr.w	r2, r3, #32
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e000      	b.n	80065e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80065f8:	4b1b      	ldr	r3, [pc, #108]	; (8006668 <SPI_EndRxTxTransaction+0x7c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a1b      	ldr	r2, [pc, #108]	; (800666c <SPI_EndRxTxTransaction+0x80>)
 80065fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006602:	0d5b      	lsrs	r3, r3, #21
 8006604:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006608:	fb02 f303 	mul.w	r3, r2, r3
 800660c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006616:	d112      	bne.n	800663e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2200      	movs	r2, #0
 8006620:	2180      	movs	r1, #128	; 0x80
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f7ff fef4 	bl	8006410 <SPI_WaitFlagStateUntilTimeout>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d016      	beq.n	800665c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006632:	f043 0220 	orr.w	r2, r3, #32
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e00f      	b.n	800665e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00a      	beq.n	800665a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	3b01      	subs	r3, #1
 8006648:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006654:	2b80      	cmp	r3, #128	; 0x80
 8006656:	d0f2      	beq.n	800663e <SPI_EndRxTxTransaction+0x52>
 8006658:	e000      	b.n	800665c <SPI_EndRxTxTransaction+0x70>
        break;
 800665a:	bf00      	nop
  }

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20000038 	.word	0x20000038
 800666c:	165e9f81 	.word	0x165e9f81

08006670 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e041      	b.n	8006706 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d106      	bne.n	800669c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7fb ff64 	bl	8002564 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	3304      	adds	r3, #4
 80066ac:	4619      	mov	r1, r3
 80066ae:	4610      	mov	r0, r2
 80066b0:	f000 fb22 	bl	8006cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d104      	bne.n	800672e <HAL_TIM_IC_Start_IT+0x1e>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800672a:	b2db      	uxtb	r3, r3
 800672c:	e013      	b.n	8006756 <HAL_TIM_IC_Start_IT+0x46>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b04      	cmp	r3, #4
 8006732:	d104      	bne.n	800673e <HAL_TIM_IC_Start_IT+0x2e>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800673a:	b2db      	uxtb	r3, r3
 800673c:	e00b      	b.n	8006756 <HAL_TIM_IC_Start_IT+0x46>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b08      	cmp	r3, #8
 8006742:	d104      	bne.n	800674e <HAL_TIM_IC_Start_IT+0x3e>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800674a:	b2db      	uxtb	r3, r3
 800674c:	e003      	b.n	8006756 <HAL_TIM_IC_Start_IT+0x46>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006754:	b2db      	uxtb	r3, r3
 8006756:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d104      	bne.n	8006768 <HAL_TIM_IC_Start_IT+0x58>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006764:	b2db      	uxtb	r3, r3
 8006766:	e013      	b.n	8006790 <HAL_TIM_IC_Start_IT+0x80>
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2b04      	cmp	r3, #4
 800676c:	d104      	bne.n	8006778 <HAL_TIM_IC_Start_IT+0x68>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006774:	b2db      	uxtb	r3, r3
 8006776:	e00b      	b.n	8006790 <HAL_TIM_IC_Start_IT+0x80>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b08      	cmp	r3, #8
 800677c:	d104      	bne.n	8006788 <HAL_TIM_IC_Start_IT+0x78>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006784:	b2db      	uxtb	r3, r3
 8006786:	e003      	b.n	8006790 <HAL_TIM_IC_Start_IT+0x80>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800678e:	b2db      	uxtb	r3, r3
 8006790:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d102      	bne.n	800679e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006798:	7b7b      	ldrb	r3, [r7, #13]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d001      	beq.n	80067a2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e0cc      	b.n	800693c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d104      	bne.n	80067b2 <HAL_TIM_IC_Start_IT+0xa2>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2202      	movs	r2, #2
 80067ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067b0:	e013      	b.n	80067da <HAL_TIM_IC_Start_IT+0xca>
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	d104      	bne.n	80067c2 <HAL_TIM_IC_Start_IT+0xb2>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067c0:	e00b      	b.n	80067da <HAL_TIM_IC_Start_IT+0xca>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	d104      	bne.n	80067d2 <HAL_TIM_IC_Start_IT+0xc2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067d0:	e003      	b.n	80067da <HAL_TIM_IC_Start_IT+0xca>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2202      	movs	r2, #2
 80067d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d104      	bne.n	80067ea <HAL_TIM_IC_Start_IT+0xda>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067e8:	e013      	b.n	8006812 <HAL_TIM_IC_Start_IT+0x102>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d104      	bne.n	80067fa <HAL_TIM_IC_Start_IT+0xea>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067f8:	e00b      	b.n	8006812 <HAL_TIM_IC_Start_IT+0x102>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d104      	bne.n	800680a <HAL_TIM_IC_Start_IT+0xfa>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006808:	e003      	b.n	8006812 <HAL_TIM_IC_Start_IT+0x102>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2202      	movs	r2, #2
 800680e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b0c      	cmp	r3, #12
 8006816:	d841      	bhi.n	800689c <HAL_TIM_IC_Start_IT+0x18c>
 8006818:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <HAL_TIM_IC_Start_IT+0x110>)
 800681a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681e:	bf00      	nop
 8006820:	08006855 	.word	0x08006855
 8006824:	0800689d 	.word	0x0800689d
 8006828:	0800689d 	.word	0x0800689d
 800682c:	0800689d 	.word	0x0800689d
 8006830:	08006867 	.word	0x08006867
 8006834:	0800689d 	.word	0x0800689d
 8006838:	0800689d 	.word	0x0800689d
 800683c:	0800689d 	.word	0x0800689d
 8006840:	08006879 	.word	0x08006879
 8006844:	0800689d 	.word	0x0800689d
 8006848:	0800689d 	.word	0x0800689d
 800684c:	0800689d 	.word	0x0800689d
 8006850:	0800688b 	.word	0x0800688b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0202 	orr.w	r2, r2, #2
 8006862:	60da      	str	r2, [r3, #12]
      break;
 8006864:	e01d      	b.n	80068a2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68da      	ldr	r2, [r3, #12]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f042 0204 	orr.w	r2, r2, #4
 8006874:	60da      	str	r2, [r3, #12]
      break;
 8006876:	e014      	b.n	80068a2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0208 	orr.w	r2, r2, #8
 8006886:	60da      	str	r2, [r3, #12]
      break;
 8006888:	e00b      	b.n	80068a2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0210 	orr.w	r2, r2, #16
 8006898:	60da      	str	r2, [r3, #12]
      break;
 800689a:	e002      	b.n	80068a2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	73fb      	strb	r3, [r7, #15]
      break;
 80068a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80068a2:	7bfb      	ldrb	r3, [r7, #15]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d148      	bne.n	800693a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2201      	movs	r2, #1
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fbeb 	bl	800708c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a22      	ldr	r2, [pc, #136]	; (8006944 <HAL_TIM_IC_Start_IT+0x234>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d022      	beq.n	8006906 <HAL_TIM_IC_Start_IT+0x1f6>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c8:	d01d      	beq.n	8006906 <HAL_TIM_IC_Start_IT+0x1f6>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a1e      	ldr	r2, [pc, #120]	; (8006948 <HAL_TIM_IC_Start_IT+0x238>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d018      	beq.n	8006906 <HAL_TIM_IC_Start_IT+0x1f6>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a1c      	ldr	r2, [pc, #112]	; (800694c <HAL_TIM_IC_Start_IT+0x23c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d013      	beq.n	8006906 <HAL_TIM_IC_Start_IT+0x1f6>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a1b      	ldr	r2, [pc, #108]	; (8006950 <HAL_TIM_IC_Start_IT+0x240>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00e      	beq.n	8006906 <HAL_TIM_IC_Start_IT+0x1f6>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a19      	ldr	r2, [pc, #100]	; (8006954 <HAL_TIM_IC_Start_IT+0x244>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d009      	beq.n	8006906 <HAL_TIM_IC_Start_IT+0x1f6>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a18      	ldr	r2, [pc, #96]	; (8006958 <HAL_TIM_IC_Start_IT+0x248>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d004      	beq.n	8006906 <HAL_TIM_IC_Start_IT+0x1f6>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a16      	ldr	r2, [pc, #88]	; (800695c <HAL_TIM_IC_Start_IT+0x24c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d111      	bne.n	800692a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b06      	cmp	r3, #6
 8006916:	d010      	beq.n	800693a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0201 	orr.w	r2, r2, #1
 8006926:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006928:	e007      	b.n	800693a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f042 0201 	orr.w	r2, r2, #1
 8006938:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800693a:	7bfb      	ldrb	r3, [r7, #15]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	40010000 	.word	0x40010000
 8006948:	40000400 	.word	0x40000400
 800694c:	40000800 	.word	0x40000800
 8006950:	40000c00 	.word	0x40000c00
 8006954:	40010400 	.word	0x40010400
 8006958:	40014000 	.word	0x40014000
 800695c:	40001800 	.word	0x40001800

08006960 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b02      	cmp	r3, #2
 8006974:	d122      	bne.n	80069bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b02      	cmp	r3, #2
 8006982:	d11b      	bne.n	80069bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f06f 0202 	mvn.w	r2, #2
 800698c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7fa fe76 	bl	8001694 <HAL_TIM_IC_CaptureCallback>
 80069a8:	e005      	b.n	80069b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f986 	bl	8006cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f98d 	bl	8006cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d122      	bne.n	8006a10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d11b      	bne.n	8006a10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0204 	mvn.w	r2, #4
 80069e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2202      	movs	r2, #2
 80069e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fa fe4c 	bl	8001694 <HAL_TIM_IC_CaptureCallback>
 80069fc:	e005      	b.n	8006a0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f95c 	bl	8006cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f963 	bl	8006cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	d122      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f003 0308 	and.w	r3, r3, #8
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d11b      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f06f 0208 	mvn.w	r2, #8
 8006a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2204      	movs	r2, #4
 8006a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7fa fe22 	bl	8001694 <HAL_TIM_IC_CaptureCallback>
 8006a50:	e005      	b.n	8006a5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f932 	bl	8006cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f939 	bl	8006cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0310 	and.w	r3, r3, #16
 8006a6e:	2b10      	cmp	r3, #16
 8006a70:	d122      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f003 0310 	and.w	r3, r3, #16
 8006a7c:	2b10      	cmp	r3, #16
 8006a7e:	d11b      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f06f 0210 	mvn.w	r2, #16
 8006a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2208      	movs	r2, #8
 8006a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fa fdf8 	bl	8001694 <HAL_TIM_IC_CaptureCallback>
 8006aa4:	e005      	b.n	8006ab2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f908 	bl	8006cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f90f 	bl	8006cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d10e      	bne.n	8006ae4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d107      	bne.n	8006ae4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f06f 0201 	mvn.w	r2, #1
 8006adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f8e2 	bl	8006ca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aee:	2b80      	cmp	r3, #128	; 0x80
 8006af0:	d10e      	bne.n	8006b10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afc:	2b80      	cmp	r3, #128	; 0x80
 8006afe:	d107      	bne.n	8006b10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fb6a 	bl	80071e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1a:	2b40      	cmp	r3, #64	; 0x40
 8006b1c:	d10e      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b28:	2b40      	cmp	r3, #64	; 0x40
 8006b2a:	d107      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f8d4 	bl	8006ce4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	d10e      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b20      	cmp	r3, #32
 8006b56:	d107      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f06f 0220 	mvn.w	r2, #32
 8006b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fb34 	bl	80071d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b68:	bf00      	nop
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d101      	bne.n	8006b8e <HAL_TIM_IC_ConfigChannel+0x1e>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	e088      	b.n	8006ca0 <HAL_TIM_IC_ConfigChannel+0x130>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d11b      	bne.n	8006bd4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6818      	ldr	r0, [r3, #0]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	6819      	ldr	r1, [r3, #0]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f000 f944 	bl	8006e38 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699a      	ldr	r2, [r3, #24]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 020c 	bic.w	r2, r2, #12
 8006bbe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6999      	ldr	r1, [r3, #24]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	689a      	ldr	r2, [r3, #8]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	619a      	str	r2, [r3, #24]
 8006bd2:	e060      	b.n	8006c96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d11c      	bne.n	8006c14 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	6819      	ldr	r1, [r3, #0]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f000 f999 	bl	8006f20 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	699a      	ldr	r2, [r3, #24]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006bfc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6999      	ldr	r1, [r3, #24]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	021a      	lsls	r2, r3, #8
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	619a      	str	r2, [r3, #24]
 8006c12:	e040      	b.n	8006c96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b08      	cmp	r3, #8
 8006c18:	d11b      	bne.n	8006c52 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	6819      	ldr	r1, [r3, #0]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f000 f9b6 	bl	8006f9a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 020c 	bic.w	r2, r2, #12
 8006c3c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69d9      	ldr	r1, [r3, #28]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	61da      	str	r2, [r3, #28]
 8006c50:	e021      	b.n	8006c96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b0c      	cmp	r3, #12
 8006c56:	d11c      	bne.n	8006c92 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6818      	ldr	r0, [r3, #0]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	6819      	ldr	r1, [r3, #0]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f000 f9d3 	bl	8007012 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	69da      	ldr	r2, [r3, #28]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c7a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	69d9      	ldr	r1, [r3, #28]
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	021a      	lsls	r2, r3, #8
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	61da      	str	r2, [r3, #28]
 8006c90:	e001      	b.n	8006c96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3718      	adds	r7, #24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a40      	ldr	r2, [pc, #256]	; (8006e0c <TIM_Base_SetConfig+0x114>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d013      	beq.n	8006d38 <TIM_Base_SetConfig+0x40>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d16:	d00f      	beq.n	8006d38 <TIM_Base_SetConfig+0x40>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a3d      	ldr	r2, [pc, #244]	; (8006e10 <TIM_Base_SetConfig+0x118>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00b      	beq.n	8006d38 <TIM_Base_SetConfig+0x40>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a3c      	ldr	r2, [pc, #240]	; (8006e14 <TIM_Base_SetConfig+0x11c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d007      	beq.n	8006d38 <TIM_Base_SetConfig+0x40>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a3b      	ldr	r2, [pc, #236]	; (8006e18 <TIM_Base_SetConfig+0x120>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d003      	beq.n	8006d38 <TIM_Base_SetConfig+0x40>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a3a      	ldr	r2, [pc, #232]	; (8006e1c <TIM_Base_SetConfig+0x124>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d108      	bne.n	8006d4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a2f      	ldr	r2, [pc, #188]	; (8006e0c <TIM_Base_SetConfig+0x114>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d02b      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d58:	d027      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a2c      	ldr	r2, [pc, #176]	; (8006e10 <TIM_Base_SetConfig+0x118>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d023      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a2b      	ldr	r2, [pc, #172]	; (8006e14 <TIM_Base_SetConfig+0x11c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d01f      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a2a      	ldr	r2, [pc, #168]	; (8006e18 <TIM_Base_SetConfig+0x120>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d01b      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a29      	ldr	r2, [pc, #164]	; (8006e1c <TIM_Base_SetConfig+0x124>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d017      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a28      	ldr	r2, [pc, #160]	; (8006e20 <TIM_Base_SetConfig+0x128>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d013      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a27      	ldr	r2, [pc, #156]	; (8006e24 <TIM_Base_SetConfig+0x12c>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d00f      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a26      	ldr	r2, [pc, #152]	; (8006e28 <TIM_Base_SetConfig+0x130>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00b      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a25      	ldr	r2, [pc, #148]	; (8006e2c <TIM_Base_SetConfig+0x134>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d007      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a24      	ldr	r2, [pc, #144]	; (8006e30 <TIM_Base_SetConfig+0x138>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d003      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a23      	ldr	r2, [pc, #140]	; (8006e34 <TIM_Base_SetConfig+0x13c>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d108      	bne.n	8006dbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a0a      	ldr	r2, [pc, #40]	; (8006e0c <TIM_Base_SetConfig+0x114>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d003      	beq.n	8006df0 <TIM_Base_SetConfig+0xf8>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a0c      	ldr	r2, [pc, #48]	; (8006e1c <TIM_Base_SetConfig+0x124>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d103      	bne.n	8006df8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	691a      	ldr	r2, [r3, #16]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	615a      	str	r2, [r3, #20]
}
 8006dfe:	bf00      	nop
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	40010000 	.word	0x40010000
 8006e10:	40000400 	.word	0x40000400
 8006e14:	40000800 	.word	0x40000800
 8006e18:	40000c00 	.word	0x40000c00
 8006e1c:	40010400 	.word	0x40010400
 8006e20:	40014000 	.word	0x40014000
 8006e24:	40014400 	.word	0x40014400
 8006e28:	40014800 	.word	0x40014800
 8006e2c:	40001800 	.word	0x40001800
 8006e30:	40001c00 	.word	0x40001c00
 8006e34:	40002000 	.word	0x40002000

08006e38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
 8006e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	f023 0201 	bic.w	r2, r3, #1
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4a28      	ldr	r2, [pc, #160]	; (8006f04 <TIM_TI1_SetConfig+0xcc>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d01b      	beq.n	8006e9e <TIM_TI1_SetConfig+0x66>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e6c:	d017      	beq.n	8006e9e <TIM_TI1_SetConfig+0x66>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4a25      	ldr	r2, [pc, #148]	; (8006f08 <TIM_TI1_SetConfig+0xd0>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d013      	beq.n	8006e9e <TIM_TI1_SetConfig+0x66>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4a24      	ldr	r2, [pc, #144]	; (8006f0c <TIM_TI1_SetConfig+0xd4>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d00f      	beq.n	8006e9e <TIM_TI1_SetConfig+0x66>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4a23      	ldr	r2, [pc, #140]	; (8006f10 <TIM_TI1_SetConfig+0xd8>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00b      	beq.n	8006e9e <TIM_TI1_SetConfig+0x66>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	4a22      	ldr	r2, [pc, #136]	; (8006f14 <TIM_TI1_SetConfig+0xdc>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d007      	beq.n	8006e9e <TIM_TI1_SetConfig+0x66>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4a21      	ldr	r2, [pc, #132]	; (8006f18 <TIM_TI1_SetConfig+0xe0>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d003      	beq.n	8006e9e <TIM_TI1_SetConfig+0x66>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4a20      	ldr	r2, [pc, #128]	; (8006f1c <TIM_TI1_SetConfig+0xe4>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d101      	bne.n	8006ea2 <TIM_TI1_SetConfig+0x6a>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e000      	b.n	8006ea4 <TIM_TI1_SetConfig+0x6c>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d008      	beq.n	8006eba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f023 0303 	bic.w	r3, r3, #3
 8006eae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	e003      	b.n	8006ec2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f043 0301 	orr.w	r3, r3, #1
 8006ec0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ec8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f023 030a 	bic.w	r3, r3, #10
 8006edc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f003 030a 	and.w	r3, r3, #10
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	621a      	str	r2, [r3, #32]
}
 8006ef6:	bf00      	nop
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40010000 	.word	0x40010000
 8006f08:	40000400 	.word	0x40000400
 8006f0c:	40000800 	.word	0x40000800
 8006f10:	40000c00 	.word	0x40000c00
 8006f14:	40010400 	.word	0x40010400
 8006f18:	40014000 	.word	0x40014000
 8006f1c:	40001800 	.word	0x40001800

08006f20 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	f023 0210 	bic.w	r2, r3, #16
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	021b      	lsls	r3, r3, #8
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	031b      	lsls	r3, r3, #12
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f72:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	621a      	str	r2, [r3, #32]
}
 8006f8e:	bf00      	nop
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b087      	sub	sp, #28
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	607a      	str	r2, [r7, #4]
 8006fa6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f023 0303 	bic.w	r3, r3, #3
 8006fc6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fd6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006fea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	021b      	lsls	r3, r3, #8
 8006ff0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	621a      	str	r2, [r3, #32]
}
 8007006:	bf00      	nop
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007012:	b480      	push	{r7}
 8007014:	b087      	sub	sp, #28
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	607a      	str	r2, [r7, #4]
 800701e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800703e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007050:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	031b      	lsls	r3, r3, #12
 8007056:	b29b      	uxth	r3, r3
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	4313      	orrs	r3, r2
 800705c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007064:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	031b      	lsls	r3, r3, #12
 800706a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4313      	orrs	r3, r2
 8007072:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	621a      	str	r2, [r3, #32]
}
 8007080:	bf00      	nop
 8007082:	371c      	adds	r7, #28
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f003 031f 	and.w	r3, r3, #31
 800709e:	2201      	movs	r2, #1
 80070a0:	fa02 f303 	lsl.w	r3, r2, r3
 80070a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6a1a      	ldr	r2, [r3, #32]
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	43db      	mvns	r3, r3
 80070ae:	401a      	ands	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6a1a      	ldr	r2, [r3, #32]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f003 031f 	and.w	r3, r3, #31
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	fa01 f303 	lsl.w	r3, r1, r3
 80070c4:	431a      	orrs	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	621a      	str	r2, [r3, #32]
}
 80070ca:	bf00      	nop
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
	...

080070d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d101      	bne.n	80070f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070ec:	2302      	movs	r3, #2
 80070ee:	e05a      	b.n	80071a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2202      	movs	r2, #2
 80070fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	4313      	orrs	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a21      	ldr	r2, [pc, #132]	; (80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d022      	beq.n	800717a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800713c:	d01d      	beq.n	800717a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a1d      	ldr	r2, [pc, #116]	; (80071b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d018      	beq.n	800717a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a1b      	ldr	r2, [pc, #108]	; (80071bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d013      	beq.n	800717a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a1a      	ldr	r2, [pc, #104]	; (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00e      	beq.n	800717a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a18      	ldr	r2, [pc, #96]	; (80071c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d009      	beq.n	800717a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a17      	ldr	r2, [pc, #92]	; (80071c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d004      	beq.n	800717a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a15      	ldr	r2, [pc, #84]	; (80071cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d10c      	bne.n	8007194 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	4313      	orrs	r3, r2
 800718a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	40010000 	.word	0x40010000
 80071b8:	40000400 	.word	0x40000400
 80071bc:	40000800 	.word	0x40000800
 80071c0:	40000c00 	.word	0x40000c00
 80071c4:	40010400 	.word	0x40010400
 80071c8:	40014000 	.word	0x40014000
 80071cc:	40001800 	.word	0x40001800

080071d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e03f      	b.n	800728a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d106      	bne.n	8007224 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7fb f9ee 	bl	8002600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2224      	movs	r2, #36	; 0x24
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800723a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 ff65 	bl	800810c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	691a      	ldr	r2, [r3, #16]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007250:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	695a      	ldr	r2, [r3, #20]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007260:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68da      	ldr	r2, [r3, #12]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007270:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2220      	movs	r2, #32
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2220      	movs	r2, #32
 8007284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b08a      	sub	sp, #40	; 0x28
 8007296:	af02      	add	r7, sp, #8
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	60b9      	str	r1, [r7, #8]
 800729c:	603b      	str	r3, [r7, #0]
 800729e:	4613      	mov	r3, r2
 80072a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	d17c      	bne.n	80073ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <HAL_UART_Transmit+0x2c>
 80072b8:	88fb      	ldrh	r3, [r7, #6]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e075      	b.n	80073ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d101      	bne.n	80072d0 <HAL_UART_Transmit+0x3e>
 80072cc:	2302      	movs	r3, #2
 80072ce:	e06e      	b.n	80073ae <HAL_UART_Transmit+0x11c>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2221      	movs	r2, #33	; 0x21
 80072e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072e6:	f7fb fc7d 	bl	8002be4 <HAL_GetTick>
 80072ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	88fa      	ldrh	r2, [r7, #6]
 80072f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	88fa      	ldrh	r2, [r7, #6]
 80072f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007300:	d108      	bne.n	8007314 <HAL_UART_Transmit+0x82>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d104      	bne.n	8007314 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800730a:	2300      	movs	r3, #0
 800730c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	61bb      	str	r3, [r7, #24]
 8007312:	e003      	b.n	800731c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007318:	2300      	movs	r3, #0
 800731a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007324:	e02a      	b.n	800737c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2200      	movs	r2, #0
 800732e:	2180      	movs	r1, #128	; 0x80
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 fc21 	bl	8007b78 <UART_WaitOnFlagUntilTimeout>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e036      	b.n	80073ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10b      	bne.n	800735e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007354:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	3302      	adds	r3, #2
 800735a:	61bb      	str	r3, [r7, #24]
 800735c:	e007      	b.n	800736e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	781a      	ldrb	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	3301      	adds	r3, #1
 800736c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007372:	b29b      	uxth	r3, r3
 8007374:	3b01      	subs	r3, #1
 8007376:	b29a      	uxth	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007380:	b29b      	uxth	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1cf      	bne.n	8007326 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2200      	movs	r2, #0
 800738e:	2140      	movs	r1, #64	; 0x40
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 fbf1 	bl	8007b78 <UART_WaitOnFlagUntilTimeout>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e006      	b.n	80073ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	e000      	b.n	80073ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80073ac:	2302      	movs	r3, #2
  }
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3720      	adds	r7, #32
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	4613      	mov	r3, r2
 80073c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	d11d      	bne.n	800740c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <HAL_UART_Receive_DMA+0x26>
 80073d6:	88fb      	ldrh	r3, [r7, #6]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e016      	b.n	800740e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d101      	bne.n	80073ee <HAL_UART_Receive_DMA+0x38>
 80073ea:	2302      	movs	r3, #2
 80073ec:	e00f      	b.n	800740e <HAL_UART_Receive_DMA+0x58>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80073fc:	88fb      	ldrh	r3, [r7, #6]
 80073fe:	461a      	mov	r2, r3
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 fc26 	bl	8007c54 <UART_Start_Receive_DMA>
 8007408:	4603      	mov	r3, r0
 800740a:	e000      	b.n	800740e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800740c:	2302      	movs	r3, #2
  }
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b0ba      	sub	sp, #232	; 0xe8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800743e:	2300      	movs	r3, #0
 8007440:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007444:	2300      	movs	r3, #0
 8007446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800744a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007456:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10f      	bne.n	800747e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800745e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b00      	cmp	r3, #0
 8007468:	d009      	beq.n	800747e <HAL_UART_IRQHandler+0x66>
 800746a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800746e:	f003 0320 	and.w	r3, r3, #32
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fd8d 	bl	8007f96 <UART_Receive_IT>
      return;
 800747c:	e256      	b.n	800792c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800747e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 80de 	beq.w	8007644 <HAL_UART_IRQHandler+0x22c>
 8007488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	d106      	bne.n	80074a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007498:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 80d1 	beq.w	8007644 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00b      	beq.n	80074c6 <HAL_UART_IRQHandler+0xae>
 80074ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d005      	beq.n	80074c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	f043 0201 	orr.w	r2, r3, #1
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ca:	f003 0304 	and.w	r3, r3, #4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00b      	beq.n	80074ea <HAL_UART_IRQHandler+0xd2>
 80074d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d005      	beq.n	80074ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	f043 0202 	orr.w	r2, r3, #2
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00b      	beq.n	800750e <HAL_UART_IRQHandler+0xf6>
 80074f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d005      	beq.n	800750e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	f043 0204 	orr.w	r2, r3, #4
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800750e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007512:	f003 0308 	and.w	r3, r3, #8
 8007516:	2b00      	cmp	r3, #0
 8007518:	d011      	beq.n	800753e <HAL_UART_IRQHandler+0x126>
 800751a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800751e:	f003 0320 	and.w	r3, r3, #32
 8007522:	2b00      	cmp	r3, #0
 8007524:	d105      	bne.n	8007532 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d005      	beq.n	800753e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	f043 0208 	orr.w	r2, r3, #8
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 81ed 	beq.w	8007922 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800754c:	f003 0320 	and.w	r3, r3, #32
 8007550:	2b00      	cmp	r3, #0
 8007552:	d008      	beq.n	8007566 <HAL_UART_IRQHandler+0x14e>
 8007554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007558:	f003 0320 	and.w	r3, r3, #32
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fd18 	bl	8007f96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007570:	2b40      	cmp	r3, #64	; 0x40
 8007572:	bf0c      	ite	eq
 8007574:	2301      	moveq	r3, #1
 8007576:	2300      	movne	r3, #0
 8007578:	b2db      	uxtb	r3, r3
 800757a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	f003 0308 	and.w	r3, r3, #8
 8007586:	2b00      	cmp	r3, #0
 8007588:	d103      	bne.n	8007592 <HAL_UART_IRQHandler+0x17a>
 800758a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800758e:	2b00      	cmp	r3, #0
 8007590:	d04f      	beq.n	8007632 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fc20 	bl	8007dd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a2:	2b40      	cmp	r3, #64	; 0x40
 80075a4:	d141      	bne.n	800762a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3314      	adds	r3, #20
 80075ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075b4:	e853 3f00 	ldrex	r3, [r3]
 80075b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3314      	adds	r3, #20
 80075ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80075ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1d9      	bne.n	80075a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d013      	beq.n	8007622 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fe:	4a7d      	ldr	r2, [pc, #500]	; (80077f4 <HAL_UART_IRQHandler+0x3dc>)
 8007600:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007606:	4618      	mov	r0, r3
 8007608:	f7fb fda4 	bl	8003154 <HAL_DMA_Abort_IT>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d016      	beq.n	8007640 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800761c:	4610      	mov	r0, r2
 800761e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007620:	e00e      	b.n	8007640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f99a 	bl	800795c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007628:	e00a      	b.n	8007640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f996 	bl	800795c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007630:	e006      	b.n	8007640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f992 	bl	800795c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800763e:	e170      	b.n	8007922 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007640:	bf00      	nop
    return;
 8007642:	e16e      	b.n	8007922 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007648:	2b01      	cmp	r3, #1
 800764a:	f040 814a 	bne.w	80078e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800764e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007652:	f003 0310 	and.w	r3, r3, #16
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 8143 	beq.w	80078e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800765c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007660:	f003 0310 	and.w	r3, r3, #16
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 813c 	beq.w	80078e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800766a:	2300      	movs	r3, #0
 800766c:	60bb      	str	r3, [r7, #8]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60bb      	str	r3, [r7, #8]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	60bb      	str	r3, [r7, #8]
 800767e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768a:	2b40      	cmp	r3, #64	; 0x40
 800768c:	f040 80b4 	bne.w	80077f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800769c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 8140 	beq.w	8007926 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076ae:	429a      	cmp	r2, r3
 80076b0:	f080 8139 	bcs.w	8007926 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076c6:	f000 8088 	beq.w	80077da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	330c      	adds	r3, #12
 80076d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	330c      	adds	r3, #12
 80076f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80076f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80076fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007702:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007706:	e841 2300 	strex	r3, r2, [r1]
 800770a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800770e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1d9      	bne.n	80076ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3314      	adds	r3, #20
 800771c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007720:	e853 3f00 	ldrex	r3, [r3]
 8007724:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007726:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007728:	f023 0301 	bic.w	r3, r3, #1
 800772c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3314      	adds	r3, #20
 8007736:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800773a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800773e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007742:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007746:	e841 2300 	strex	r3, r2, [r1]
 800774a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800774c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1e1      	bne.n	8007716 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3314      	adds	r3, #20
 8007758:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800775c:	e853 3f00 	ldrex	r3, [r3]
 8007760:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3314      	adds	r3, #20
 8007772:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007776:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007778:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800777c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800777e:	e841 2300 	strex	r3, r2, [r1]
 8007782:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1e3      	bne.n	8007752 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2220      	movs	r2, #32
 800778e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	330c      	adds	r3, #12
 800779e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077aa:	f023 0310 	bic.w	r3, r3, #16
 80077ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	330c      	adds	r3, #12
 80077b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80077bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80077be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077c4:	e841 2300 	strex	r3, r2, [r1]
 80077c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e3      	bne.n	8007798 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fb fc4d 	bl	8003074 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f8c0 	bl	8007970 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077f0:	e099      	b.n	8007926 <HAL_UART_IRQHandler+0x50e>
 80077f2:	bf00      	nop
 80077f4:	08007e9f 	.word	0x08007e9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007800:	b29b      	uxth	r3, r3
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800780c:	b29b      	uxth	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 808b 	beq.w	800792a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 8086 	beq.w	800792a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	330c      	adds	r3, #12
 8007824:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800782e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007830:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007834:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	330c      	adds	r3, #12
 800783e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007842:	647a      	str	r2, [r7, #68]	; 0x44
 8007844:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007848:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e3      	bne.n	800781e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3314      	adds	r3, #20
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	623b      	str	r3, [r7, #32]
   return(result);
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	f023 0301 	bic.w	r3, r3, #1
 800786c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3314      	adds	r3, #20
 8007876:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800787a:	633a      	str	r2, [r7, #48]	; 0x30
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1e3      	bne.n	8007856 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	330c      	adds	r3, #12
 80078a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f023 0310 	bic.w	r3, r3, #16
 80078b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	330c      	adds	r3, #12
 80078bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80078c0:	61fa      	str	r2, [r7, #28]
 80078c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	69b9      	ldr	r1, [r7, #24]
 80078c6:	69fa      	ldr	r2, [r7, #28]
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	617b      	str	r3, [r7, #20]
   return(result);
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e3      	bne.n	800789c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f848 	bl	8007970 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078e0:	e023      	b.n	800792a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80078e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d009      	beq.n	8007902 <HAL_UART_IRQHandler+0x4ea>
 80078ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fae3 	bl	8007ec6 <UART_Transmit_IT>
    return;
 8007900:	e014      	b.n	800792c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00e      	beq.n	800792c <HAL_UART_IRQHandler+0x514>
 800790e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	d008      	beq.n	800792c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fb23 	bl	8007f66 <UART_EndTransmit_IT>
    return;
 8007920:	e004      	b.n	800792c <HAL_UART_IRQHandler+0x514>
    return;
 8007922:	bf00      	nop
 8007924:	e002      	b.n	800792c <HAL_UART_IRQHandler+0x514>
      return;
 8007926:	bf00      	nop
 8007928:	e000      	b.n	800792c <HAL_UART_IRQHandler+0x514>
      return;
 800792a:	bf00      	nop
  }
}
 800792c:	37e8      	adds	r7, #232	; 0xe8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop

08007934 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b09c      	sub	sp, #112	; 0x70
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007994:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d172      	bne.n	8007a8a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80079a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a6:	2200      	movs	r2, #0
 80079a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	330c      	adds	r3, #12
 80079b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b4:	e853 3f00 	ldrex	r3, [r3]
 80079b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80079c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	330c      	adds	r3, #12
 80079c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80079cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e5      	bne.n	80079aa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3314      	adds	r3, #20
 80079e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f0:	f023 0301 	bic.w	r3, r3, #1
 80079f4:	667b      	str	r3, [r7, #100]	; 0x64
 80079f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3314      	adds	r3, #20
 80079fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80079fe:	647a      	str	r2, [r7, #68]	; 0x44
 8007a00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a06:	e841 2300 	strex	r3, r2, [r1]
 8007a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1e5      	bne.n	80079de <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3314      	adds	r3, #20
 8007a18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	e853 3f00 	ldrex	r3, [r3]
 8007a20:	623b      	str	r3, [r7, #32]
   return(result);
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a28:	663b      	str	r3, [r7, #96]	; 0x60
 8007a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3314      	adds	r3, #20
 8007a30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a32:	633a      	str	r2, [r7, #48]	; 0x30
 8007a34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a3a:	e841 2300 	strex	r3, r2, [r1]
 8007a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1e5      	bne.n	8007a12 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d119      	bne.n	8007a8a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	330c      	adds	r3, #12
 8007a5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f023 0310 	bic.w	r3, r3, #16
 8007a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	330c      	adds	r3, #12
 8007a74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a76:	61fa      	str	r2, [r7, #28]
 8007a78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7a:	69b9      	ldr	r1, [r7, #24]
 8007a7c:	69fa      	ldr	r2, [r7, #28]
 8007a7e:	e841 2300 	strex	r3, r2, [r1]
 8007a82:	617b      	str	r3, [r7, #20]
   return(result);
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e5      	bne.n	8007a56 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d106      	bne.n	8007aa0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a96:	4619      	mov	r1, r3
 8007a98:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a9a:	f7ff ff69 	bl	8007970 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a9e:	e002      	b.n	8007aa6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007aa0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007aa2:	f7f9 fe05 	bl	80016b0 <HAL_UART_RxCpltCallback>
}
 8007aa6:	bf00      	nop
 8007aa8:	3770      	adds	r7, #112	; 0x70
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b084      	sub	sp, #16
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d108      	bne.n	8007ad6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ac8:	085b      	lsrs	r3, r3, #1
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	4619      	mov	r1, r3
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f7ff ff4e 	bl	8007970 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ad4:	e002      	b.n	8007adc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f7ff ff36 	bl	8007948 <HAL_UART_RxHalfCpltCallback>
}
 8007adc:	bf00      	nop
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007aec:	2300      	movs	r3, #0
 8007aee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b00:	2b80      	cmp	r3, #128	; 0x80
 8007b02:	bf0c      	ite	eq
 8007b04:	2301      	moveq	r3, #1
 8007b06:	2300      	movne	r3, #0
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b21      	cmp	r3, #33	; 0x21
 8007b16:	d108      	bne.n	8007b2a <UART_DMAError+0x46>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d005      	beq.n	8007b2a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2200      	movs	r2, #0
 8007b22:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007b24:	68b8      	ldr	r0, [r7, #8]
 8007b26:	f000 f92f 	bl	8007d88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b34:	2b40      	cmp	r3, #64	; 0x40
 8007b36:	bf0c      	ite	eq
 8007b38:	2301      	moveq	r3, #1
 8007b3a:	2300      	movne	r3, #0
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b22      	cmp	r3, #34	; 0x22
 8007b4a:	d108      	bne.n	8007b5e <UART_DMAError+0x7a>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d005      	beq.n	8007b5e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2200      	movs	r2, #0
 8007b56:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007b58:	68b8      	ldr	r0, [r7, #8]
 8007b5a:	f000 f93d 	bl	8007dd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	f043 0210 	orr.w	r2, r3, #16
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b6a:	68b8      	ldr	r0, [r7, #8]
 8007b6c:	f7ff fef6 	bl	800795c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b70:	bf00      	nop
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b090      	sub	sp, #64	; 0x40
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	4613      	mov	r3, r2
 8007b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b88:	e050      	b.n	8007c2c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b90:	d04c      	beq.n	8007c2c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d007      	beq.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b98:	f7fb f824 	bl	8002be4 <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d241      	bcs.n	8007c2c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	330c      	adds	r3, #12
 8007bae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb2:	e853 3f00 	ldrex	r3, [r3]
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	330c      	adds	r3, #12
 8007bc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007bc8:	637a      	str	r2, [r7, #52]	; 0x34
 8007bca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bd0:	e841 2300 	strex	r3, r2, [r1]
 8007bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e5      	bne.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3314      	adds	r3, #20
 8007be2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	e853 3f00 	ldrex	r3, [r3]
 8007bea:	613b      	str	r3, [r7, #16]
   return(result);
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f023 0301 	bic.w	r3, r3, #1
 8007bf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3314      	adds	r3, #20
 8007bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bfc:	623a      	str	r2, [r7, #32]
 8007bfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c00:	69f9      	ldr	r1, [r7, #28]
 8007c02:	6a3a      	ldr	r2, [r7, #32]
 8007c04:	e841 2300 	strex	r3, r2, [r1]
 8007c08:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e5      	bne.n	8007bdc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e00f      	b.n	8007c4c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	4013      	ands	r3, r2
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	bf0c      	ite	eq
 8007c3c:	2301      	moveq	r3, #1
 8007c3e:	2300      	movne	r3, #0
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	461a      	mov	r2, r3
 8007c44:	79fb      	ldrb	r3, [r7, #7]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d09f      	beq.n	8007b8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3740      	adds	r7, #64	; 0x40
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b098      	sub	sp, #96	; 0x60
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	88fa      	ldrh	r2, [r7, #6]
 8007c6c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2222      	movs	r2, #34	; 0x22
 8007c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c80:	4a3e      	ldr	r2, [pc, #248]	; (8007d7c <UART_Start_Receive_DMA+0x128>)
 8007c82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c88:	4a3d      	ldr	r2, [pc, #244]	; (8007d80 <UART_Start_Receive_DMA+0x12c>)
 8007c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c90:	4a3c      	ldr	r2, [pc, #240]	; (8007d84 <UART_Start_Receive_DMA+0x130>)
 8007c92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c98:	2200      	movs	r2, #0
 8007c9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007c9c:	f107 0308 	add.w	r3, r7, #8
 8007ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3304      	adds	r3, #4
 8007cac:	4619      	mov	r1, r3
 8007cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	88fb      	ldrh	r3, [r7, #6]
 8007cb4:	f7fb f986 	bl	8002fc4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007cb8:	2300      	movs	r3, #0
 8007cba:	613b      	str	r3, [r7, #16]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	613b      	str	r3, [r7, #16]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	613b      	str	r3, [r7, #16]
 8007ccc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	330c      	adds	r3, #12
 8007cdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ce0:	e853 3f00 	ldrex	r3, [r3]
 8007ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cec:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	330c      	adds	r3, #12
 8007cf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cf6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007cf8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007cfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cfe:	e841 2300 	strex	r3, r2, [r1]
 8007d02:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1e5      	bne.n	8007cd6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	3314      	adds	r3, #20
 8007d10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d14:	e853 3f00 	ldrex	r3, [r3]
 8007d18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1c:	f043 0301 	orr.w	r3, r3, #1
 8007d20:	657b      	str	r3, [r7, #84]	; 0x54
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3314      	adds	r3, #20
 8007d28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d2a:	63ba      	str	r2, [r7, #56]	; 0x38
 8007d2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007d30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1e5      	bne.n	8007d0a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3314      	adds	r3, #20
 8007d44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	e853 3f00 	ldrex	r3, [r3]
 8007d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d54:	653b      	str	r3, [r7, #80]	; 0x50
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3314      	adds	r3, #20
 8007d5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d5e:	627a      	str	r2, [r7, #36]	; 0x24
 8007d60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d62:	6a39      	ldr	r1, [r7, #32]
 8007d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1e5      	bne.n	8007d3e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3760      	adds	r7, #96	; 0x60
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	08007989 	.word	0x08007989
 8007d80:	08007aaf 	.word	0x08007aaf
 8007d84:	08007ae5 	.word	0x08007ae5

08007d88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b089      	sub	sp, #36	; 0x24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	330c      	adds	r3, #12
 8007d96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007da6:	61fb      	str	r3, [r7, #28]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	330c      	adds	r3, #12
 8007dae:	69fa      	ldr	r2, [r7, #28]
 8007db0:	61ba      	str	r2, [r7, #24]
 8007db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db4:	6979      	ldr	r1, [r7, #20]
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	e841 2300 	strex	r3, r2, [r1]
 8007dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1e5      	bne.n	8007d90 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007dcc:	bf00      	nop
 8007dce:	3724      	adds	r7, #36	; 0x24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b095      	sub	sp, #84	; 0x54
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	330c      	adds	r3, #12
 8007de6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dea:	e853 3f00 	ldrex	r3, [r3]
 8007dee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	330c      	adds	r3, #12
 8007dfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e00:	643a      	str	r2, [r7, #64]	; 0x40
 8007e02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e08:	e841 2300 	strex	r3, r2, [r1]
 8007e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1e5      	bne.n	8007de0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3314      	adds	r3, #20
 8007e1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	f023 0301 	bic.w	r3, r3, #1
 8007e2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3314      	adds	r3, #20
 8007e32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e3c:	e841 2300 	strex	r3, r2, [r1]
 8007e40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e5      	bne.n	8007e14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d119      	bne.n	8007e84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	330c      	adds	r3, #12
 8007e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	e853 3f00 	ldrex	r3, [r3]
 8007e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	f023 0310 	bic.w	r3, r3, #16
 8007e66:	647b      	str	r3, [r7, #68]	; 0x44
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	330c      	adds	r3, #12
 8007e6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e70:	61ba      	str	r2, [r7, #24]
 8007e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e74:	6979      	ldr	r1, [r7, #20]
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	e841 2300 	strex	r3, r2, [r1]
 8007e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e5      	bne.n	8007e50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2220      	movs	r2, #32
 8007e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e92:	bf00      	nop
 8007e94:	3754      	adds	r7, #84	; 0x54
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b084      	sub	sp, #16
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eaa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f7ff fd4f 	bl	800795c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ebe:	bf00      	nop
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b085      	sub	sp, #20
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b21      	cmp	r3, #33	; 0x21
 8007ed8:	d13e      	bne.n	8007f58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ee2:	d114      	bne.n	8007f0e <UART_Transmit_IT+0x48>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d110      	bne.n	8007f0e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a1b      	ldr	r3, [r3, #32]
 8007ef0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	1c9a      	adds	r2, r3, #2
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	621a      	str	r2, [r3, #32]
 8007f0c:	e008      	b.n	8007f20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	1c59      	adds	r1, r3, #1
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	6211      	str	r1, [r2, #32]
 8007f18:	781a      	ldrb	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	3b01      	subs	r3, #1
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10f      	bne.n	8007f54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68da      	ldr	r2, [r3, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	e000      	b.n	8007f5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f58:	2302      	movs	r3, #2
  }
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b082      	sub	sp, #8
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68da      	ldr	r2, [r3, #12]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2220      	movs	r2, #32
 8007f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff fcd4 	bl	8007934 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b08c      	sub	sp, #48	; 0x30
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b22      	cmp	r3, #34	; 0x22
 8007fa8:	f040 80ab 	bne.w	8008102 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb4:	d117      	bne.n	8007fe6 <UART_Receive_IT+0x50>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d113      	bne.n	8007fe6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fde:	1c9a      	adds	r2, r3, #2
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	629a      	str	r2, [r3, #40]	; 0x28
 8007fe4:	e026      	b.n	8008034 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007fec:	2300      	movs	r3, #0
 8007fee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff8:	d007      	beq.n	800800a <UART_Receive_IT+0x74>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10a      	bne.n	8008018 <UART_Receive_IT+0x82>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d106      	bne.n	8008018 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	b2da      	uxtb	r2, r3
 8008012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008014:	701a      	strb	r2, [r3, #0]
 8008016:	e008      	b.n	800802a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	b2db      	uxtb	r3, r3
 8008020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008024:	b2da      	uxtb	r2, r3
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008038:	b29b      	uxth	r3, r3
 800803a:	3b01      	subs	r3, #1
 800803c:	b29b      	uxth	r3, r3
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	4619      	mov	r1, r3
 8008042:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008044:	2b00      	cmp	r3, #0
 8008046:	d15a      	bne.n	80080fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68da      	ldr	r2, [r3, #12]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 0220 	bic.w	r2, r2, #32
 8008056:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008066:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695a      	ldr	r2, [r3, #20]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0201 	bic.w	r2, r2, #1
 8008076:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2220      	movs	r2, #32
 800807c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008084:	2b01      	cmp	r3, #1
 8008086:	d135      	bne.n	80080f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	330c      	adds	r3, #12
 8008094:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	e853 3f00 	ldrex	r3, [r3]
 800809c:	613b      	str	r3, [r7, #16]
   return(result);
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f023 0310 	bic.w	r3, r3, #16
 80080a4:	627b      	str	r3, [r7, #36]	; 0x24
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	330c      	adds	r3, #12
 80080ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ae:	623a      	str	r2, [r7, #32]
 80080b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b2:	69f9      	ldr	r1, [r7, #28]
 80080b4:	6a3a      	ldr	r2, [r7, #32]
 80080b6:	e841 2300 	strex	r3, r2, [r1]
 80080ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1e5      	bne.n	800808e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0310 	and.w	r3, r3, #16
 80080cc:	2b10      	cmp	r3, #16
 80080ce:	d10a      	bne.n	80080e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080d0:	2300      	movs	r3, #0
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff fc3f 	bl	8007970 <HAL_UARTEx_RxEventCallback>
 80080f2:	e002      	b.n	80080fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7f9 fadb 	bl	80016b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	e002      	b.n	8008104 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	e000      	b.n	8008104 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008102:	2302      	movs	r3, #2
  }
}
 8008104:	4618      	mov	r0, r3
 8008106:	3730      	adds	r7, #48	; 0x30
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800810c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008110:	b0c0      	sub	sp, #256	; 0x100
 8008112:	af00      	add	r7, sp, #0
 8008114:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008128:	68d9      	ldr	r1, [r3, #12]
 800812a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	ea40 0301 	orr.w	r3, r0, r1
 8008134:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800813a:	689a      	ldr	r2, [r3, #8]
 800813c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	431a      	orrs	r2, r3
 8008144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	431a      	orrs	r2, r3
 800814c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	4313      	orrs	r3, r2
 8008154:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008164:	f021 010c 	bic.w	r1, r1, #12
 8008168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008172:	430b      	orrs	r3, r1
 8008174:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008186:	6999      	ldr	r1, [r3, #24]
 8008188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	ea40 0301 	orr.w	r3, r0, r1
 8008192:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	4b8f      	ldr	r3, [pc, #572]	; (80083d8 <UART_SetConfig+0x2cc>)
 800819c:	429a      	cmp	r2, r3
 800819e:	d005      	beq.n	80081ac <UART_SetConfig+0xa0>
 80081a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	4b8d      	ldr	r3, [pc, #564]	; (80083dc <UART_SetConfig+0x2d0>)
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d104      	bne.n	80081b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081ac:	f7fb fd2c 	bl	8003c08 <HAL_RCC_GetPCLK2Freq>
 80081b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80081b4:	e003      	b.n	80081be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081b6:	f7fb fd13 	bl	8003be0 <HAL_RCC_GetPCLK1Freq>
 80081ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c2:	69db      	ldr	r3, [r3, #28]
 80081c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081c8:	f040 810c 	bne.w	80083e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081d0:	2200      	movs	r2, #0
 80081d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80081da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80081de:	4622      	mov	r2, r4
 80081e0:	462b      	mov	r3, r5
 80081e2:	1891      	adds	r1, r2, r2
 80081e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80081e6:	415b      	adcs	r3, r3
 80081e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80081ee:	4621      	mov	r1, r4
 80081f0:	eb12 0801 	adds.w	r8, r2, r1
 80081f4:	4629      	mov	r1, r5
 80081f6:	eb43 0901 	adc.w	r9, r3, r1
 80081fa:	f04f 0200 	mov.w	r2, #0
 80081fe:	f04f 0300 	mov.w	r3, #0
 8008202:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008206:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800820a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800820e:	4690      	mov	r8, r2
 8008210:	4699      	mov	r9, r3
 8008212:	4623      	mov	r3, r4
 8008214:	eb18 0303 	adds.w	r3, r8, r3
 8008218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800821c:	462b      	mov	r3, r5
 800821e:	eb49 0303 	adc.w	r3, r9, r3
 8008222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008232:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008236:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800823a:	460b      	mov	r3, r1
 800823c:	18db      	adds	r3, r3, r3
 800823e:	653b      	str	r3, [r7, #80]	; 0x50
 8008240:	4613      	mov	r3, r2
 8008242:	eb42 0303 	adc.w	r3, r2, r3
 8008246:	657b      	str	r3, [r7, #84]	; 0x54
 8008248:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800824c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008250:	f7f8 f836 	bl	80002c0 <__aeabi_uldivmod>
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	4b61      	ldr	r3, [pc, #388]	; (80083e0 <UART_SetConfig+0x2d4>)
 800825a:	fba3 2302 	umull	r2, r3, r3, r2
 800825e:	095b      	lsrs	r3, r3, #5
 8008260:	011c      	lsls	r4, r3, #4
 8008262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008266:	2200      	movs	r2, #0
 8008268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800826c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008270:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008274:	4642      	mov	r2, r8
 8008276:	464b      	mov	r3, r9
 8008278:	1891      	adds	r1, r2, r2
 800827a:	64b9      	str	r1, [r7, #72]	; 0x48
 800827c:	415b      	adcs	r3, r3
 800827e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008280:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008284:	4641      	mov	r1, r8
 8008286:	eb12 0a01 	adds.w	sl, r2, r1
 800828a:	4649      	mov	r1, r9
 800828c:	eb43 0b01 	adc.w	fp, r3, r1
 8008290:	f04f 0200 	mov.w	r2, #0
 8008294:	f04f 0300 	mov.w	r3, #0
 8008298:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800829c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80082a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082a4:	4692      	mov	sl, r2
 80082a6:	469b      	mov	fp, r3
 80082a8:	4643      	mov	r3, r8
 80082aa:	eb1a 0303 	adds.w	r3, sl, r3
 80082ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082b2:	464b      	mov	r3, r9
 80082b4:	eb4b 0303 	adc.w	r3, fp, r3
 80082b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80082bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80082cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80082d0:	460b      	mov	r3, r1
 80082d2:	18db      	adds	r3, r3, r3
 80082d4:	643b      	str	r3, [r7, #64]	; 0x40
 80082d6:	4613      	mov	r3, r2
 80082d8:	eb42 0303 	adc.w	r3, r2, r3
 80082dc:	647b      	str	r3, [r7, #68]	; 0x44
 80082de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80082e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80082e6:	f7f7 ffeb 	bl	80002c0 <__aeabi_uldivmod>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	4611      	mov	r1, r2
 80082f0:	4b3b      	ldr	r3, [pc, #236]	; (80083e0 <UART_SetConfig+0x2d4>)
 80082f2:	fba3 2301 	umull	r2, r3, r3, r1
 80082f6:	095b      	lsrs	r3, r3, #5
 80082f8:	2264      	movs	r2, #100	; 0x64
 80082fa:	fb02 f303 	mul.w	r3, r2, r3
 80082fe:	1acb      	subs	r3, r1, r3
 8008300:	00db      	lsls	r3, r3, #3
 8008302:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008306:	4b36      	ldr	r3, [pc, #216]	; (80083e0 <UART_SetConfig+0x2d4>)
 8008308:	fba3 2302 	umull	r2, r3, r3, r2
 800830c:	095b      	lsrs	r3, r3, #5
 800830e:	005b      	lsls	r3, r3, #1
 8008310:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008314:	441c      	add	r4, r3
 8008316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800831a:	2200      	movs	r2, #0
 800831c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008320:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008324:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008328:	4642      	mov	r2, r8
 800832a:	464b      	mov	r3, r9
 800832c:	1891      	adds	r1, r2, r2
 800832e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008330:	415b      	adcs	r3, r3
 8008332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008334:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008338:	4641      	mov	r1, r8
 800833a:	1851      	adds	r1, r2, r1
 800833c:	6339      	str	r1, [r7, #48]	; 0x30
 800833e:	4649      	mov	r1, r9
 8008340:	414b      	adcs	r3, r1
 8008342:	637b      	str	r3, [r7, #52]	; 0x34
 8008344:	f04f 0200 	mov.w	r2, #0
 8008348:	f04f 0300 	mov.w	r3, #0
 800834c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008350:	4659      	mov	r1, fp
 8008352:	00cb      	lsls	r3, r1, #3
 8008354:	4651      	mov	r1, sl
 8008356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800835a:	4651      	mov	r1, sl
 800835c:	00ca      	lsls	r2, r1, #3
 800835e:	4610      	mov	r0, r2
 8008360:	4619      	mov	r1, r3
 8008362:	4603      	mov	r3, r0
 8008364:	4642      	mov	r2, r8
 8008366:	189b      	adds	r3, r3, r2
 8008368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800836c:	464b      	mov	r3, r9
 800836e:	460a      	mov	r2, r1
 8008370:	eb42 0303 	adc.w	r3, r2, r3
 8008374:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008384:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008388:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800838c:	460b      	mov	r3, r1
 800838e:	18db      	adds	r3, r3, r3
 8008390:	62bb      	str	r3, [r7, #40]	; 0x28
 8008392:	4613      	mov	r3, r2
 8008394:	eb42 0303 	adc.w	r3, r2, r3
 8008398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800839a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800839e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80083a2:	f7f7 ff8d 	bl	80002c0 <__aeabi_uldivmod>
 80083a6:	4602      	mov	r2, r0
 80083a8:	460b      	mov	r3, r1
 80083aa:	4b0d      	ldr	r3, [pc, #52]	; (80083e0 <UART_SetConfig+0x2d4>)
 80083ac:	fba3 1302 	umull	r1, r3, r3, r2
 80083b0:	095b      	lsrs	r3, r3, #5
 80083b2:	2164      	movs	r1, #100	; 0x64
 80083b4:	fb01 f303 	mul.w	r3, r1, r3
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	3332      	adds	r3, #50	; 0x32
 80083be:	4a08      	ldr	r2, [pc, #32]	; (80083e0 <UART_SetConfig+0x2d4>)
 80083c0:	fba2 2303 	umull	r2, r3, r2, r3
 80083c4:	095b      	lsrs	r3, r3, #5
 80083c6:	f003 0207 	and.w	r2, r3, #7
 80083ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4422      	add	r2, r4
 80083d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083d4:	e105      	b.n	80085e2 <UART_SetConfig+0x4d6>
 80083d6:	bf00      	nop
 80083d8:	40011000 	.word	0x40011000
 80083dc:	40011400 	.word	0x40011400
 80083e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083e8:	2200      	movs	r2, #0
 80083ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80083f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80083f6:	4642      	mov	r2, r8
 80083f8:	464b      	mov	r3, r9
 80083fa:	1891      	adds	r1, r2, r2
 80083fc:	6239      	str	r1, [r7, #32]
 80083fe:	415b      	adcs	r3, r3
 8008400:	627b      	str	r3, [r7, #36]	; 0x24
 8008402:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008406:	4641      	mov	r1, r8
 8008408:	1854      	adds	r4, r2, r1
 800840a:	4649      	mov	r1, r9
 800840c:	eb43 0501 	adc.w	r5, r3, r1
 8008410:	f04f 0200 	mov.w	r2, #0
 8008414:	f04f 0300 	mov.w	r3, #0
 8008418:	00eb      	lsls	r3, r5, #3
 800841a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800841e:	00e2      	lsls	r2, r4, #3
 8008420:	4614      	mov	r4, r2
 8008422:	461d      	mov	r5, r3
 8008424:	4643      	mov	r3, r8
 8008426:	18e3      	adds	r3, r4, r3
 8008428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800842c:	464b      	mov	r3, r9
 800842e:	eb45 0303 	adc.w	r3, r5, r3
 8008432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008442:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008446:	f04f 0200 	mov.w	r2, #0
 800844a:	f04f 0300 	mov.w	r3, #0
 800844e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008452:	4629      	mov	r1, r5
 8008454:	008b      	lsls	r3, r1, #2
 8008456:	4621      	mov	r1, r4
 8008458:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800845c:	4621      	mov	r1, r4
 800845e:	008a      	lsls	r2, r1, #2
 8008460:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008464:	f7f7 ff2c 	bl	80002c0 <__aeabi_uldivmod>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4b60      	ldr	r3, [pc, #384]	; (80085f0 <UART_SetConfig+0x4e4>)
 800846e:	fba3 2302 	umull	r2, r3, r3, r2
 8008472:	095b      	lsrs	r3, r3, #5
 8008474:	011c      	lsls	r4, r3, #4
 8008476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800847a:	2200      	movs	r2, #0
 800847c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008480:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008484:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008488:	4642      	mov	r2, r8
 800848a:	464b      	mov	r3, r9
 800848c:	1891      	adds	r1, r2, r2
 800848e:	61b9      	str	r1, [r7, #24]
 8008490:	415b      	adcs	r3, r3
 8008492:	61fb      	str	r3, [r7, #28]
 8008494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008498:	4641      	mov	r1, r8
 800849a:	1851      	adds	r1, r2, r1
 800849c:	6139      	str	r1, [r7, #16]
 800849e:	4649      	mov	r1, r9
 80084a0:	414b      	adcs	r3, r1
 80084a2:	617b      	str	r3, [r7, #20]
 80084a4:	f04f 0200 	mov.w	r2, #0
 80084a8:	f04f 0300 	mov.w	r3, #0
 80084ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084b0:	4659      	mov	r1, fp
 80084b2:	00cb      	lsls	r3, r1, #3
 80084b4:	4651      	mov	r1, sl
 80084b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084ba:	4651      	mov	r1, sl
 80084bc:	00ca      	lsls	r2, r1, #3
 80084be:	4610      	mov	r0, r2
 80084c0:	4619      	mov	r1, r3
 80084c2:	4603      	mov	r3, r0
 80084c4:	4642      	mov	r2, r8
 80084c6:	189b      	adds	r3, r3, r2
 80084c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084cc:	464b      	mov	r3, r9
 80084ce:	460a      	mov	r2, r1
 80084d0:	eb42 0303 	adc.w	r3, r2, r3
 80084d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80084e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80084e4:	f04f 0200 	mov.w	r2, #0
 80084e8:	f04f 0300 	mov.w	r3, #0
 80084ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80084f0:	4649      	mov	r1, r9
 80084f2:	008b      	lsls	r3, r1, #2
 80084f4:	4641      	mov	r1, r8
 80084f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084fa:	4641      	mov	r1, r8
 80084fc:	008a      	lsls	r2, r1, #2
 80084fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008502:	f7f7 fedd 	bl	80002c0 <__aeabi_uldivmod>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4b39      	ldr	r3, [pc, #228]	; (80085f0 <UART_SetConfig+0x4e4>)
 800850c:	fba3 1302 	umull	r1, r3, r3, r2
 8008510:	095b      	lsrs	r3, r3, #5
 8008512:	2164      	movs	r1, #100	; 0x64
 8008514:	fb01 f303 	mul.w	r3, r1, r3
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	011b      	lsls	r3, r3, #4
 800851c:	3332      	adds	r3, #50	; 0x32
 800851e:	4a34      	ldr	r2, [pc, #208]	; (80085f0 <UART_SetConfig+0x4e4>)
 8008520:	fba2 2303 	umull	r2, r3, r2, r3
 8008524:	095b      	lsrs	r3, r3, #5
 8008526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800852a:	441c      	add	r4, r3
 800852c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008530:	2200      	movs	r2, #0
 8008532:	673b      	str	r3, [r7, #112]	; 0x70
 8008534:	677a      	str	r2, [r7, #116]	; 0x74
 8008536:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800853a:	4642      	mov	r2, r8
 800853c:	464b      	mov	r3, r9
 800853e:	1891      	adds	r1, r2, r2
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	415b      	adcs	r3, r3
 8008544:	60fb      	str	r3, [r7, #12]
 8008546:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800854a:	4641      	mov	r1, r8
 800854c:	1851      	adds	r1, r2, r1
 800854e:	6039      	str	r1, [r7, #0]
 8008550:	4649      	mov	r1, r9
 8008552:	414b      	adcs	r3, r1
 8008554:	607b      	str	r3, [r7, #4]
 8008556:	f04f 0200 	mov.w	r2, #0
 800855a:	f04f 0300 	mov.w	r3, #0
 800855e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008562:	4659      	mov	r1, fp
 8008564:	00cb      	lsls	r3, r1, #3
 8008566:	4651      	mov	r1, sl
 8008568:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800856c:	4651      	mov	r1, sl
 800856e:	00ca      	lsls	r2, r1, #3
 8008570:	4610      	mov	r0, r2
 8008572:	4619      	mov	r1, r3
 8008574:	4603      	mov	r3, r0
 8008576:	4642      	mov	r2, r8
 8008578:	189b      	adds	r3, r3, r2
 800857a:	66bb      	str	r3, [r7, #104]	; 0x68
 800857c:	464b      	mov	r3, r9
 800857e:	460a      	mov	r2, r1
 8008580:	eb42 0303 	adc.w	r3, r2, r3
 8008584:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	663b      	str	r3, [r7, #96]	; 0x60
 8008590:	667a      	str	r2, [r7, #100]	; 0x64
 8008592:	f04f 0200 	mov.w	r2, #0
 8008596:	f04f 0300 	mov.w	r3, #0
 800859a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800859e:	4649      	mov	r1, r9
 80085a0:	008b      	lsls	r3, r1, #2
 80085a2:	4641      	mov	r1, r8
 80085a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085a8:	4641      	mov	r1, r8
 80085aa:	008a      	lsls	r2, r1, #2
 80085ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80085b0:	f7f7 fe86 	bl	80002c0 <__aeabi_uldivmod>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4b0d      	ldr	r3, [pc, #52]	; (80085f0 <UART_SetConfig+0x4e4>)
 80085ba:	fba3 1302 	umull	r1, r3, r3, r2
 80085be:	095b      	lsrs	r3, r3, #5
 80085c0:	2164      	movs	r1, #100	; 0x64
 80085c2:	fb01 f303 	mul.w	r3, r1, r3
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	011b      	lsls	r3, r3, #4
 80085ca:	3332      	adds	r3, #50	; 0x32
 80085cc:	4a08      	ldr	r2, [pc, #32]	; (80085f0 <UART_SetConfig+0x4e4>)
 80085ce:	fba2 2303 	umull	r2, r3, r2, r3
 80085d2:	095b      	lsrs	r3, r3, #5
 80085d4:	f003 020f 	and.w	r2, r3, #15
 80085d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4422      	add	r2, r4
 80085e0:	609a      	str	r2, [r3, #8]
}
 80085e2:	bf00      	nop
 80085e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80085e8:	46bd      	mov	sp, r7
 80085ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085ee:	bf00      	nop
 80085f0:	51eb851f 	.word	0x51eb851f

080085f4 <__errno>:
 80085f4:	4b01      	ldr	r3, [pc, #4]	; (80085fc <__errno+0x8>)
 80085f6:	6818      	ldr	r0, [r3, #0]
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	20000044 	.word	0x20000044

08008600 <__libc_init_array>:
 8008600:	b570      	push	{r4, r5, r6, lr}
 8008602:	4d0d      	ldr	r5, [pc, #52]	; (8008638 <__libc_init_array+0x38>)
 8008604:	4c0d      	ldr	r4, [pc, #52]	; (800863c <__libc_init_array+0x3c>)
 8008606:	1b64      	subs	r4, r4, r5
 8008608:	10a4      	asrs	r4, r4, #2
 800860a:	2600      	movs	r6, #0
 800860c:	42a6      	cmp	r6, r4
 800860e:	d109      	bne.n	8008624 <__libc_init_array+0x24>
 8008610:	4d0b      	ldr	r5, [pc, #44]	; (8008640 <__libc_init_array+0x40>)
 8008612:	4c0c      	ldr	r4, [pc, #48]	; (8008644 <__libc_init_array+0x44>)
 8008614:	f000 fcee 	bl	8008ff4 <_init>
 8008618:	1b64      	subs	r4, r4, r5
 800861a:	10a4      	asrs	r4, r4, #2
 800861c:	2600      	movs	r6, #0
 800861e:	42a6      	cmp	r6, r4
 8008620:	d105      	bne.n	800862e <__libc_init_array+0x2e>
 8008622:	bd70      	pop	{r4, r5, r6, pc}
 8008624:	f855 3b04 	ldr.w	r3, [r5], #4
 8008628:	4798      	blx	r3
 800862a:	3601      	adds	r6, #1
 800862c:	e7ee      	b.n	800860c <__libc_init_array+0xc>
 800862e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008632:	4798      	blx	r3
 8008634:	3601      	adds	r6, #1
 8008636:	e7f2      	b.n	800861e <__libc_init_array+0x1e>
 8008638:	080091fc 	.word	0x080091fc
 800863c:	080091fc 	.word	0x080091fc
 8008640:	080091fc 	.word	0x080091fc
 8008644:	08009200 	.word	0x08009200

08008648 <memcpy>:
 8008648:	440a      	add	r2, r1
 800864a:	4291      	cmp	r1, r2
 800864c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008650:	d100      	bne.n	8008654 <memcpy+0xc>
 8008652:	4770      	bx	lr
 8008654:	b510      	push	{r4, lr}
 8008656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800865a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800865e:	4291      	cmp	r1, r2
 8008660:	d1f9      	bne.n	8008656 <memcpy+0xe>
 8008662:	bd10      	pop	{r4, pc}

08008664 <memset>:
 8008664:	4402      	add	r2, r0
 8008666:	4603      	mov	r3, r0
 8008668:	4293      	cmp	r3, r2
 800866a:	d100      	bne.n	800866e <memset+0xa>
 800866c:	4770      	bx	lr
 800866e:	f803 1b01 	strb.w	r1, [r3], #1
 8008672:	e7f9      	b.n	8008668 <memset+0x4>

08008674 <siprintf>:
 8008674:	b40e      	push	{r1, r2, r3}
 8008676:	b500      	push	{lr}
 8008678:	b09c      	sub	sp, #112	; 0x70
 800867a:	ab1d      	add	r3, sp, #116	; 0x74
 800867c:	9002      	str	r0, [sp, #8]
 800867e:	9006      	str	r0, [sp, #24]
 8008680:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008684:	4809      	ldr	r0, [pc, #36]	; (80086ac <siprintf+0x38>)
 8008686:	9107      	str	r1, [sp, #28]
 8008688:	9104      	str	r1, [sp, #16]
 800868a:	4909      	ldr	r1, [pc, #36]	; (80086b0 <siprintf+0x3c>)
 800868c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008690:	9105      	str	r1, [sp, #20]
 8008692:	6800      	ldr	r0, [r0, #0]
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	a902      	add	r1, sp, #8
 8008698:	f000 f95c 	bl	8008954 <_svfiprintf_r>
 800869c:	9b02      	ldr	r3, [sp, #8]
 800869e:	2200      	movs	r2, #0
 80086a0:	701a      	strb	r2, [r3, #0]
 80086a2:	b01c      	add	sp, #112	; 0x70
 80086a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80086a8:	b003      	add	sp, #12
 80086aa:	4770      	bx	lr
 80086ac:	20000044 	.word	0x20000044
 80086b0:	ffff0208 	.word	0xffff0208

080086b4 <strdup>:
 80086b4:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <strdup+0xc>)
 80086b6:	4601      	mov	r1, r0
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	f000 b803 	b.w	80086c4 <_strdup_r>
 80086be:	bf00      	nop
 80086c0:	20000044 	.word	0x20000044

080086c4 <_strdup_r>:
 80086c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086c6:	4604      	mov	r4, r0
 80086c8:	4608      	mov	r0, r1
 80086ca:	460d      	mov	r5, r1
 80086cc:	f7f7 fda0 	bl	8000210 <strlen>
 80086d0:	1c42      	adds	r2, r0, #1
 80086d2:	4611      	mov	r1, r2
 80086d4:	4620      	mov	r0, r4
 80086d6:	9201      	str	r2, [sp, #4]
 80086d8:	f000 f86c 	bl	80087b4 <_malloc_r>
 80086dc:	4604      	mov	r4, r0
 80086de:	b118      	cbz	r0, 80086e8 <_strdup_r+0x24>
 80086e0:	9a01      	ldr	r2, [sp, #4]
 80086e2:	4629      	mov	r1, r5
 80086e4:	f7ff ffb0 	bl	8008648 <memcpy>
 80086e8:	4620      	mov	r0, r4
 80086ea:	b003      	add	sp, #12
 80086ec:	bd30      	pop	{r4, r5, pc}

080086ee <strsep>:
 80086ee:	4602      	mov	r2, r0
 80086f0:	2300      	movs	r3, #0
 80086f2:	6800      	ldr	r0, [r0, #0]
 80086f4:	f000 b816 	b.w	8008724 <__strtok_r>

080086f8 <strstr>:
 80086f8:	780a      	ldrb	r2, [r1, #0]
 80086fa:	b570      	push	{r4, r5, r6, lr}
 80086fc:	b96a      	cbnz	r2, 800871a <strstr+0x22>
 80086fe:	bd70      	pop	{r4, r5, r6, pc}
 8008700:	429a      	cmp	r2, r3
 8008702:	d109      	bne.n	8008718 <strstr+0x20>
 8008704:	460c      	mov	r4, r1
 8008706:	4605      	mov	r5, r0
 8008708:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0f6      	beq.n	80086fe <strstr+0x6>
 8008710:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008714:	429e      	cmp	r6, r3
 8008716:	d0f7      	beq.n	8008708 <strstr+0x10>
 8008718:	3001      	adds	r0, #1
 800871a:	7803      	ldrb	r3, [r0, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1ef      	bne.n	8008700 <strstr+0x8>
 8008720:	4618      	mov	r0, r3
 8008722:	e7ec      	b.n	80086fe <strstr+0x6>

08008724 <__strtok_r>:
 8008724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008726:	b908      	cbnz	r0, 800872c <__strtok_r+0x8>
 8008728:	6810      	ldr	r0, [r2, #0]
 800872a:	b188      	cbz	r0, 8008750 <__strtok_r+0x2c>
 800872c:	4604      	mov	r4, r0
 800872e:	4620      	mov	r0, r4
 8008730:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008734:	460f      	mov	r7, r1
 8008736:	f817 6b01 	ldrb.w	r6, [r7], #1
 800873a:	b91e      	cbnz	r6, 8008744 <__strtok_r+0x20>
 800873c:	b965      	cbnz	r5, 8008758 <__strtok_r+0x34>
 800873e:	6015      	str	r5, [r2, #0]
 8008740:	4628      	mov	r0, r5
 8008742:	e005      	b.n	8008750 <__strtok_r+0x2c>
 8008744:	42b5      	cmp	r5, r6
 8008746:	d1f6      	bne.n	8008736 <__strtok_r+0x12>
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1f0      	bne.n	800872e <__strtok_r+0xa>
 800874c:	6014      	str	r4, [r2, #0]
 800874e:	7003      	strb	r3, [r0, #0]
 8008750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008752:	461c      	mov	r4, r3
 8008754:	e00c      	b.n	8008770 <__strtok_r+0x4c>
 8008756:	b915      	cbnz	r5, 800875e <__strtok_r+0x3a>
 8008758:	f814 3b01 	ldrb.w	r3, [r4], #1
 800875c:	460e      	mov	r6, r1
 800875e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008762:	42ab      	cmp	r3, r5
 8008764:	d1f7      	bne.n	8008756 <__strtok_r+0x32>
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0f3      	beq.n	8008752 <__strtok_r+0x2e>
 800876a:	2300      	movs	r3, #0
 800876c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008770:	6014      	str	r4, [r2, #0]
 8008772:	e7ed      	b.n	8008750 <__strtok_r+0x2c>

08008774 <sbrk_aligned>:
 8008774:	b570      	push	{r4, r5, r6, lr}
 8008776:	4e0e      	ldr	r6, [pc, #56]	; (80087b0 <sbrk_aligned+0x3c>)
 8008778:	460c      	mov	r4, r1
 800877a:	6831      	ldr	r1, [r6, #0]
 800877c:	4605      	mov	r5, r0
 800877e:	b911      	cbnz	r1, 8008786 <sbrk_aligned+0x12>
 8008780:	f000 fb7c 	bl	8008e7c <_sbrk_r>
 8008784:	6030      	str	r0, [r6, #0]
 8008786:	4621      	mov	r1, r4
 8008788:	4628      	mov	r0, r5
 800878a:	f000 fb77 	bl	8008e7c <_sbrk_r>
 800878e:	1c43      	adds	r3, r0, #1
 8008790:	d00a      	beq.n	80087a8 <sbrk_aligned+0x34>
 8008792:	1cc4      	adds	r4, r0, #3
 8008794:	f024 0403 	bic.w	r4, r4, #3
 8008798:	42a0      	cmp	r0, r4
 800879a:	d007      	beq.n	80087ac <sbrk_aligned+0x38>
 800879c:	1a21      	subs	r1, r4, r0
 800879e:	4628      	mov	r0, r5
 80087a0:	f000 fb6c 	bl	8008e7c <_sbrk_r>
 80087a4:	3001      	adds	r0, #1
 80087a6:	d101      	bne.n	80087ac <sbrk_aligned+0x38>
 80087a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80087ac:	4620      	mov	r0, r4
 80087ae:	bd70      	pop	{r4, r5, r6, pc}
 80087b0:	20004c64 	.word	0x20004c64

080087b4 <_malloc_r>:
 80087b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b8:	1ccd      	adds	r5, r1, #3
 80087ba:	f025 0503 	bic.w	r5, r5, #3
 80087be:	3508      	adds	r5, #8
 80087c0:	2d0c      	cmp	r5, #12
 80087c2:	bf38      	it	cc
 80087c4:	250c      	movcc	r5, #12
 80087c6:	2d00      	cmp	r5, #0
 80087c8:	4607      	mov	r7, r0
 80087ca:	db01      	blt.n	80087d0 <_malloc_r+0x1c>
 80087cc:	42a9      	cmp	r1, r5
 80087ce:	d905      	bls.n	80087dc <_malloc_r+0x28>
 80087d0:	230c      	movs	r3, #12
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	2600      	movs	r6, #0
 80087d6:	4630      	mov	r0, r6
 80087d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087dc:	4e2e      	ldr	r6, [pc, #184]	; (8008898 <_malloc_r+0xe4>)
 80087de:	f000 fb77 	bl	8008ed0 <__malloc_lock>
 80087e2:	6833      	ldr	r3, [r6, #0]
 80087e4:	461c      	mov	r4, r3
 80087e6:	bb34      	cbnz	r4, 8008836 <_malloc_r+0x82>
 80087e8:	4629      	mov	r1, r5
 80087ea:	4638      	mov	r0, r7
 80087ec:	f7ff ffc2 	bl	8008774 <sbrk_aligned>
 80087f0:	1c43      	adds	r3, r0, #1
 80087f2:	4604      	mov	r4, r0
 80087f4:	d14d      	bne.n	8008892 <_malloc_r+0xde>
 80087f6:	6834      	ldr	r4, [r6, #0]
 80087f8:	4626      	mov	r6, r4
 80087fa:	2e00      	cmp	r6, #0
 80087fc:	d140      	bne.n	8008880 <_malloc_r+0xcc>
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	4631      	mov	r1, r6
 8008802:	4638      	mov	r0, r7
 8008804:	eb04 0803 	add.w	r8, r4, r3
 8008808:	f000 fb38 	bl	8008e7c <_sbrk_r>
 800880c:	4580      	cmp	r8, r0
 800880e:	d13a      	bne.n	8008886 <_malloc_r+0xd2>
 8008810:	6821      	ldr	r1, [r4, #0]
 8008812:	3503      	adds	r5, #3
 8008814:	1a6d      	subs	r5, r5, r1
 8008816:	f025 0503 	bic.w	r5, r5, #3
 800881a:	3508      	adds	r5, #8
 800881c:	2d0c      	cmp	r5, #12
 800881e:	bf38      	it	cc
 8008820:	250c      	movcc	r5, #12
 8008822:	4629      	mov	r1, r5
 8008824:	4638      	mov	r0, r7
 8008826:	f7ff ffa5 	bl	8008774 <sbrk_aligned>
 800882a:	3001      	adds	r0, #1
 800882c:	d02b      	beq.n	8008886 <_malloc_r+0xd2>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	442b      	add	r3, r5
 8008832:	6023      	str	r3, [r4, #0]
 8008834:	e00e      	b.n	8008854 <_malloc_r+0xa0>
 8008836:	6822      	ldr	r2, [r4, #0]
 8008838:	1b52      	subs	r2, r2, r5
 800883a:	d41e      	bmi.n	800887a <_malloc_r+0xc6>
 800883c:	2a0b      	cmp	r2, #11
 800883e:	d916      	bls.n	800886e <_malloc_r+0xba>
 8008840:	1961      	adds	r1, r4, r5
 8008842:	42a3      	cmp	r3, r4
 8008844:	6025      	str	r5, [r4, #0]
 8008846:	bf18      	it	ne
 8008848:	6059      	strne	r1, [r3, #4]
 800884a:	6863      	ldr	r3, [r4, #4]
 800884c:	bf08      	it	eq
 800884e:	6031      	streq	r1, [r6, #0]
 8008850:	5162      	str	r2, [r4, r5]
 8008852:	604b      	str	r3, [r1, #4]
 8008854:	4638      	mov	r0, r7
 8008856:	f104 060b 	add.w	r6, r4, #11
 800885a:	f000 fb3f 	bl	8008edc <__malloc_unlock>
 800885e:	f026 0607 	bic.w	r6, r6, #7
 8008862:	1d23      	adds	r3, r4, #4
 8008864:	1af2      	subs	r2, r6, r3
 8008866:	d0b6      	beq.n	80087d6 <_malloc_r+0x22>
 8008868:	1b9b      	subs	r3, r3, r6
 800886a:	50a3      	str	r3, [r4, r2]
 800886c:	e7b3      	b.n	80087d6 <_malloc_r+0x22>
 800886e:	6862      	ldr	r2, [r4, #4]
 8008870:	42a3      	cmp	r3, r4
 8008872:	bf0c      	ite	eq
 8008874:	6032      	streq	r2, [r6, #0]
 8008876:	605a      	strne	r2, [r3, #4]
 8008878:	e7ec      	b.n	8008854 <_malloc_r+0xa0>
 800887a:	4623      	mov	r3, r4
 800887c:	6864      	ldr	r4, [r4, #4]
 800887e:	e7b2      	b.n	80087e6 <_malloc_r+0x32>
 8008880:	4634      	mov	r4, r6
 8008882:	6876      	ldr	r6, [r6, #4]
 8008884:	e7b9      	b.n	80087fa <_malloc_r+0x46>
 8008886:	230c      	movs	r3, #12
 8008888:	603b      	str	r3, [r7, #0]
 800888a:	4638      	mov	r0, r7
 800888c:	f000 fb26 	bl	8008edc <__malloc_unlock>
 8008890:	e7a1      	b.n	80087d6 <_malloc_r+0x22>
 8008892:	6025      	str	r5, [r4, #0]
 8008894:	e7de      	b.n	8008854 <_malloc_r+0xa0>
 8008896:	bf00      	nop
 8008898:	20004c60 	.word	0x20004c60

0800889c <__ssputs_r>:
 800889c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088a0:	688e      	ldr	r6, [r1, #8]
 80088a2:	429e      	cmp	r6, r3
 80088a4:	4682      	mov	sl, r0
 80088a6:	460c      	mov	r4, r1
 80088a8:	4690      	mov	r8, r2
 80088aa:	461f      	mov	r7, r3
 80088ac:	d838      	bhi.n	8008920 <__ssputs_r+0x84>
 80088ae:	898a      	ldrh	r2, [r1, #12]
 80088b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088b4:	d032      	beq.n	800891c <__ssputs_r+0x80>
 80088b6:	6825      	ldr	r5, [r4, #0]
 80088b8:	6909      	ldr	r1, [r1, #16]
 80088ba:	eba5 0901 	sub.w	r9, r5, r1
 80088be:	6965      	ldr	r5, [r4, #20]
 80088c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088c8:	3301      	adds	r3, #1
 80088ca:	444b      	add	r3, r9
 80088cc:	106d      	asrs	r5, r5, #1
 80088ce:	429d      	cmp	r5, r3
 80088d0:	bf38      	it	cc
 80088d2:	461d      	movcc	r5, r3
 80088d4:	0553      	lsls	r3, r2, #21
 80088d6:	d531      	bpl.n	800893c <__ssputs_r+0xa0>
 80088d8:	4629      	mov	r1, r5
 80088da:	f7ff ff6b 	bl	80087b4 <_malloc_r>
 80088de:	4606      	mov	r6, r0
 80088e0:	b950      	cbnz	r0, 80088f8 <__ssputs_r+0x5c>
 80088e2:	230c      	movs	r3, #12
 80088e4:	f8ca 3000 	str.w	r3, [sl]
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ee:	81a3      	strh	r3, [r4, #12]
 80088f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f8:	6921      	ldr	r1, [r4, #16]
 80088fa:	464a      	mov	r2, r9
 80088fc:	f7ff fea4 	bl	8008648 <memcpy>
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800890a:	81a3      	strh	r3, [r4, #12]
 800890c:	6126      	str	r6, [r4, #16]
 800890e:	6165      	str	r5, [r4, #20]
 8008910:	444e      	add	r6, r9
 8008912:	eba5 0509 	sub.w	r5, r5, r9
 8008916:	6026      	str	r6, [r4, #0]
 8008918:	60a5      	str	r5, [r4, #8]
 800891a:	463e      	mov	r6, r7
 800891c:	42be      	cmp	r6, r7
 800891e:	d900      	bls.n	8008922 <__ssputs_r+0x86>
 8008920:	463e      	mov	r6, r7
 8008922:	6820      	ldr	r0, [r4, #0]
 8008924:	4632      	mov	r2, r6
 8008926:	4641      	mov	r1, r8
 8008928:	f000 fab8 	bl	8008e9c <memmove>
 800892c:	68a3      	ldr	r3, [r4, #8]
 800892e:	1b9b      	subs	r3, r3, r6
 8008930:	60a3      	str	r3, [r4, #8]
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	4433      	add	r3, r6
 8008936:	6023      	str	r3, [r4, #0]
 8008938:	2000      	movs	r0, #0
 800893a:	e7db      	b.n	80088f4 <__ssputs_r+0x58>
 800893c:	462a      	mov	r2, r5
 800893e:	f000 fb1f 	bl	8008f80 <_realloc_r>
 8008942:	4606      	mov	r6, r0
 8008944:	2800      	cmp	r0, #0
 8008946:	d1e1      	bne.n	800890c <__ssputs_r+0x70>
 8008948:	6921      	ldr	r1, [r4, #16]
 800894a:	4650      	mov	r0, sl
 800894c:	f000 facc 	bl	8008ee8 <_free_r>
 8008950:	e7c7      	b.n	80088e2 <__ssputs_r+0x46>
	...

08008954 <_svfiprintf_r>:
 8008954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008958:	4698      	mov	r8, r3
 800895a:	898b      	ldrh	r3, [r1, #12]
 800895c:	061b      	lsls	r3, r3, #24
 800895e:	b09d      	sub	sp, #116	; 0x74
 8008960:	4607      	mov	r7, r0
 8008962:	460d      	mov	r5, r1
 8008964:	4614      	mov	r4, r2
 8008966:	d50e      	bpl.n	8008986 <_svfiprintf_r+0x32>
 8008968:	690b      	ldr	r3, [r1, #16]
 800896a:	b963      	cbnz	r3, 8008986 <_svfiprintf_r+0x32>
 800896c:	2140      	movs	r1, #64	; 0x40
 800896e:	f7ff ff21 	bl	80087b4 <_malloc_r>
 8008972:	6028      	str	r0, [r5, #0]
 8008974:	6128      	str	r0, [r5, #16]
 8008976:	b920      	cbnz	r0, 8008982 <_svfiprintf_r+0x2e>
 8008978:	230c      	movs	r3, #12
 800897a:	603b      	str	r3, [r7, #0]
 800897c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008980:	e0d1      	b.n	8008b26 <_svfiprintf_r+0x1d2>
 8008982:	2340      	movs	r3, #64	; 0x40
 8008984:	616b      	str	r3, [r5, #20]
 8008986:	2300      	movs	r3, #0
 8008988:	9309      	str	r3, [sp, #36]	; 0x24
 800898a:	2320      	movs	r3, #32
 800898c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008990:	f8cd 800c 	str.w	r8, [sp, #12]
 8008994:	2330      	movs	r3, #48	; 0x30
 8008996:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b40 <_svfiprintf_r+0x1ec>
 800899a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800899e:	f04f 0901 	mov.w	r9, #1
 80089a2:	4623      	mov	r3, r4
 80089a4:	469a      	mov	sl, r3
 80089a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089aa:	b10a      	cbz	r2, 80089b0 <_svfiprintf_r+0x5c>
 80089ac:	2a25      	cmp	r2, #37	; 0x25
 80089ae:	d1f9      	bne.n	80089a4 <_svfiprintf_r+0x50>
 80089b0:	ebba 0b04 	subs.w	fp, sl, r4
 80089b4:	d00b      	beq.n	80089ce <_svfiprintf_r+0x7a>
 80089b6:	465b      	mov	r3, fp
 80089b8:	4622      	mov	r2, r4
 80089ba:	4629      	mov	r1, r5
 80089bc:	4638      	mov	r0, r7
 80089be:	f7ff ff6d 	bl	800889c <__ssputs_r>
 80089c2:	3001      	adds	r0, #1
 80089c4:	f000 80aa 	beq.w	8008b1c <_svfiprintf_r+0x1c8>
 80089c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089ca:	445a      	add	r2, fp
 80089cc:	9209      	str	r2, [sp, #36]	; 0x24
 80089ce:	f89a 3000 	ldrb.w	r3, [sl]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f000 80a2 	beq.w	8008b1c <_svfiprintf_r+0x1c8>
 80089d8:	2300      	movs	r3, #0
 80089da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089e2:	f10a 0a01 	add.w	sl, sl, #1
 80089e6:	9304      	str	r3, [sp, #16]
 80089e8:	9307      	str	r3, [sp, #28]
 80089ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089ee:	931a      	str	r3, [sp, #104]	; 0x68
 80089f0:	4654      	mov	r4, sl
 80089f2:	2205      	movs	r2, #5
 80089f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089f8:	4851      	ldr	r0, [pc, #324]	; (8008b40 <_svfiprintf_r+0x1ec>)
 80089fa:	f7f7 fc11 	bl	8000220 <memchr>
 80089fe:	9a04      	ldr	r2, [sp, #16]
 8008a00:	b9d8      	cbnz	r0, 8008a3a <_svfiprintf_r+0xe6>
 8008a02:	06d0      	lsls	r0, r2, #27
 8008a04:	bf44      	itt	mi
 8008a06:	2320      	movmi	r3, #32
 8008a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a0c:	0711      	lsls	r1, r2, #28
 8008a0e:	bf44      	itt	mi
 8008a10:	232b      	movmi	r3, #43	; 0x2b
 8008a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a16:	f89a 3000 	ldrb.w	r3, [sl]
 8008a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a1c:	d015      	beq.n	8008a4a <_svfiprintf_r+0xf6>
 8008a1e:	9a07      	ldr	r2, [sp, #28]
 8008a20:	4654      	mov	r4, sl
 8008a22:	2000      	movs	r0, #0
 8008a24:	f04f 0c0a 	mov.w	ip, #10
 8008a28:	4621      	mov	r1, r4
 8008a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a2e:	3b30      	subs	r3, #48	; 0x30
 8008a30:	2b09      	cmp	r3, #9
 8008a32:	d94e      	bls.n	8008ad2 <_svfiprintf_r+0x17e>
 8008a34:	b1b0      	cbz	r0, 8008a64 <_svfiprintf_r+0x110>
 8008a36:	9207      	str	r2, [sp, #28]
 8008a38:	e014      	b.n	8008a64 <_svfiprintf_r+0x110>
 8008a3a:	eba0 0308 	sub.w	r3, r0, r8
 8008a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8008a42:	4313      	orrs	r3, r2
 8008a44:	9304      	str	r3, [sp, #16]
 8008a46:	46a2      	mov	sl, r4
 8008a48:	e7d2      	b.n	80089f0 <_svfiprintf_r+0x9c>
 8008a4a:	9b03      	ldr	r3, [sp, #12]
 8008a4c:	1d19      	adds	r1, r3, #4
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	9103      	str	r1, [sp, #12]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	bfbb      	ittet	lt
 8008a56:	425b      	neglt	r3, r3
 8008a58:	f042 0202 	orrlt.w	r2, r2, #2
 8008a5c:	9307      	strge	r3, [sp, #28]
 8008a5e:	9307      	strlt	r3, [sp, #28]
 8008a60:	bfb8      	it	lt
 8008a62:	9204      	strlt	r2, [sp, #16]
 8008a64:	7823      	ldrb	r3, [r4, #0]
 8008a66:	2b2e      	cmp	r3, #46	; 0x2e
 8008a68:	d10c      	bne.n	8008a84 <_svfiprintf_r+0x130>
 8008a6a:	7863      	ldrb	r3, [r4, #1]
 8008a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a6e:	d135      	bne.n	8008adc <_svfiprintf_r+0x188>
 8008a70:	9b03      	ldr	r3, [sp, #12]
 8008a72:	1d1a      	adds	r2, r3, #4
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	9203      	str	r2, [sp, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	bfb8      	it	lt
 8008a7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a80:	3402      	adds	r4, #2
 8008a82:	9305      	str	r3, [sp, #20]
 8008a84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b50 <_svfiprintf_r+0x1fc>
 8008a88:	7821      	ldrb	r1, [r4, #0]
 8008a8a:	2203      	movs	r2, #3
 8008a8c:	4650      	mov	r0, sl
 8008a8e:	f7f7 fbc7 	bl	8000220 <memchr>
 8008a92:	b140      	cbz	r0, 8008aa6 <_svfiprintf_r+0x152>
 8008a94:	2340      	movs	r3, #64	; 0x40
 8008a96:	eba0 000a 	sub.w	r0, r0, sl
 8008a9a:	fa03 f000 	lsl.w	r0, r3, r0
 8008a9e:	9b04      	ldr	r3, [sp, #16]
 8008aa0:	4303      	orrs	r3, r0
 8008aa2:	3401      	adds	r4, #1
 8008aa4:	9304      	str	r3, [sp, #16]
 8008aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aaa:	4826      	ldr	r0, [pc, #152]	; (8008b44 <_svfiprintf_r+0x1f0>)
 8008aac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ab0:	2206      	movs	r2, #6
 8008ab2:	f7f7 fbb5 	bl	8000220 <memchr>
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d038      	beq.n	8008b2c <_svfiprintf_r+0x1d8>
 8008aba:	4b23      	ldr	r3, [pc, #140]	; (8008b48 <_svfiprintf_r+0x1f4>)
 8008abc:	bb1b      	cbnz	r3, 8008b06 <_svfiprintf_r+0x1b2>
 8008abe:	9b03      	ldr	r3, [sp, #12]
 8008ac0:	3307      	adds	r3, #7
 8008ac2:	f023 0307 	bic.w	r3, r3, #7
 8008ac6:	3308      	adds	r3, #8
 8008ac8:	9303      	str	r3, [sp, #12]
 8008aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008acc:	4433      	add	r3, r6
 8008ace:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad0:	e767      	b.n	80089a2 <_svfiprintf_r+0x4e>
 8008ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	2001      	movs	r0, #1
 8008ada:	e7a5      	b.n	8008a28 <_svfiprintf_r+0xd4>
 8008adc:	2300      	movs	r3, #0
 8008ade:	3401      	adds	r4, #1
 8008ae0:	9305      	str	r3, [sp, #20]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	f04f 0c0a 	mov.w	ip, #10
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aee:	3a30      	subs	r2, #48	; 0x30
 8008af0:	2a09      	cmp	r2, #9
 8008af2:	d903      	bls.n	8008afc <_svfiprintf_r+0x1a8>
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0c5      	beq.n	8008a84 <_svfiprintf_r+0x130>
 8008af8:	9105      	str	r1, [sp, #20]
 8008afa:	e7c3      	b.n	8008a84 <_svfiprintf_r+0x130>
 8008afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b00:	4604      	mov	r4, r0
 8008b02:	2301      	movs	r3, #1
 8008b04:	e7f0      	b.n	8008ae8 <_svfiprintf_r+0x194>
 8008b06:	ab03      	add	r3, sp, #12
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	462a      	mov	r2, r5
 8008b0c:	4b0f      	ldr	r3, [pc, #60]	; (8008b4c <_svfiprintf_r+0x1f8>)
 8008b0e:	a904      	add	r1, sp, #16
 8008b10:	4638      	mov	r0, r7
 8008b12:	f3af 8000 	nop.w
 8008b16:	1c42      	adds	r2, r0, #1
 8008b18:	4606      	mov	r6, r0
 8008b1a:	d1d6      	bne.n	8008aca <_svfiprintf_r+0x176>
 8008b1c:	89ab      	ldrh	r3, [r5, #12]
 8008b1e:	065b      	lsls	r3, r3, #25
 8008b20:	f53f af2c 	bmi.w	800897c <_svfiprintf_r+0x28>
 8008b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b26:	b01d      	add	sp, #116	; 0x74
 8008b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b2c:	ab03      	add	r3, sp, #12
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	462a      	mov	r2, r5
 8008b32:	4b06      	ldr	r3, [pc, #24]	; (8008b4c <_svfiprintf_r+0x1f8>)
 8008b34:	a904      	add	r1, sp, #16
 8008b36:	4638      	mov	r0, r7
 8008b38:	f000 f87a 	bl	8008c30 <_printf_i>
 8008b3c:	e7eb      	b.n	8008b16 <_svfiprintf_r+0x1c2>
 8008b3e:	bf00      	nop
 8008b40:	080091c0 	.word	0x080091c0
 8008b44:	080091ca 	.word	0x080091ca
 8008b48:	00000000 	.word	0x00000000
 8008b4c:	0800889d 	.word	0x0800889d
 8008b50:	080091c6 	.word	0x080091c6

08008b54 <_printf_common>:
 8008b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b58:	4616      	mov	r6, r2
 8008b5a:	4699      	mov	r9, r3
 8008b5c:	688a      	ldr	r2, [r1, #8]
 8008b5e:	690b      	ldr	r3, [r1, #16]
 8008b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b64:	4293      	cmp	r3, r2
 8008b66:	bfb8      	it	lt
 8008b68:	4613      	movlt	r3, r2
 8008b6a:	6033      	str	r3, [r6, #0]
 8008b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b70:	4607      	mov	r7, r0
 8008b72:	460c      	mov	r4, r1
 8008b74:	b10a      	cbz	r2, 8008b7a <_printf_common+0x26>
 8008b76:	3301      	adds	r3, #1
 8008b78:	6033      	str	r3, [r6, #0]
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	0699      	lsls	r1, r3, #26
 8008b7e:	bf42      	ittt	mi
 8008b80:	6833      	ldrmi	r3, [r6, #0]
 8008b82:	3302      	addmi	r3, #2
 8008b84:	6033      	strmi	r3, [r6, #0]
 8008b86:	6825      	ldr	r5, [r4, #0]
 8008b88:	f015 0506 	ands.w	r5, r5, #6
 8008b8c:	d106      	bne.n	8008b9c <_printf_common+0x48>
 8008b8e:	f104 0a19 	add.w	sl, r4, #25
 8008b92:	68e3      	ldr	r3, [r4, #12]
 8008b94:	6832      	ldr	r2, [r6, #0]
 8008b96:	1a9b      	subs	r3, r3, r2
 8008b98:	42ab      	cmp	r3, r5
 8008b9a:	dc26      	bgt.n	8008bea <_printf_common+0x96>
 8008b9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ba0:	1e13      	subs	r3, r2, #0
 8008ba2:	6822      	ldr	r2, [r4, #0]
 8008ba4:	bf18      	it	ne
 8008ba6:	2301      	movne	r3, #1
 8008ba8:	0692      	lsls	r2, r2, #26
 8008baa:	d42b      	bmi.n	8008c04 <_printf_common+0xb0>
 8008bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	47c0      	blx	r8
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	d01e      	beq.n	8008bf8 <_printf_common+0xa4>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	68e5      	ldr	r5, [r4, #12]
 8008bbe:	6832      	ldr	r2, [r6, #0]
 8008bc0:	f003 0306 	and.w	r3, r3, #6
 8008bc4:	2b04      	cmp	r3, #4
 8008bc6:	bf08      	it	eq
 8008bc8:	1aad      	subeq	r5, r5, r2
 8008bca:	68a3      	ldr	r3, [r4, #8]
 8008bcc:	6922      	ldr	r2, [r4, #16]
 8008bce:	bf0c      	ite	eq
 8008bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bd4:	2500      	movne	r5, #0
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	bfc4      	itt	gt
 8008bda:	1a9b      	subgt	r3, r3, r2
 8008bdc:	18ed      	addgt	r5, r5, r3
 8008bde:	2600      	movs	r6, #0
 8008be0:	341a      	adds	r4, #26
 8008be2:	42b5      	cmp	r5, r6
 8008be4:	d11a      	bne.n	8008c1c <_printf_common+0xc8>
 8008be6:	2000      	movs	r0, #0
 8008be8:	e008      	b.n	8008bfc <_printf_common+0xa8>
 8008bea:	2301      	movs	r3, #1
 8008bec:	4652      	mov	r2, sl
 8008bee:	4649      	mov	r1, r9
 8008bf0:	4638      	mov	r0, r7
 8008bf2:	47c0      	blx	r8
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	d103      	bne.n	8008c00 <_printf_common+0xac>
 8008bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c00:	3501      	adds	r5, #1
 8008c02:	e7c6      	b.n	8008b92 <_printf_common+0x3e>
 8008c04:	18e1      	adds	r1, r4, r3
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	2030      	movs	r0, #48	; 0x30
 8008c0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c0e:	4422      	add	r2, r4
 8008c10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c18:	3302      	adds	r3, #2
 8008c1a:	e7c7      	b.n	8008bac <_printf_common+0x58>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	4622      	mov	r2, r4
 8008c20:	4649      	mov	r1, r9
 8008c22:	4638      	mov	r0, r7
 8008c24:	47c0      	blx	r8
 8008c26:	3001      	adds	r0, #1
 8008c28:	d0e6      	beq.n	8008bf8 <_printf_common+0xa4>
 8008c2a:	3601      	adds	r6, #1
 8008c2c:	e7d9      	b.n	8008be2 <_printf_common+0x8e>
	...

08008c30 <_printf_i>:
 8008c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c34:	7e0f      	ldrb	r7, [r1, #24]
 8008c36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c38:	2f78      	cmp	r7, #120	; 0x78
 8008c3a:	4691      	mov	r9, r2
 8008c3c:	4680      	mov	r8, r0
 8008c3e:	460c      	mov	r4, r1
 8008c40:	469a      	mov	sl, r3
 8008c42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c46:	d807      	bhi.n	8008c58 <_printf_i+0x28>
 8008c48:	2f62      	cmp	r7, #98	; 0x62
 8008c4a:	d80a      	bhi.n	8008c62 <_printf_i+0x32>
 8008c4c:	2f00      	cmp	r7, #0
 8008c4e:	f000 80d8 	beq.w	8008e02 <_printf_i+0x1d2>
 8008c52:	2f58      	cmp	r7, #88	; 0x58
 8008c54:	f000 80a3 	beq.w	8008d9e <_printf_i+0x16e>
 8008c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c60:	e03a      	b.n	8008cd8 <_printf_i+0xa8>
 8008c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c66:	2b15      	cmp	r3, #21
 8008c68:	d8f6      	bhi.n	8008c58 <_printf_i+0x28>
 8008c6a:	a101      	add	r1, pc, #4	; (adr r1, 8008c70 <_printf_i+0x40>)
 8008c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c70:	08008cc9 	.word	0x08008cc9
 8008c74:	08008cdd 	.word	0x08008cdd
 8008c78:	08008c59 	.word	0x08008c59
 8008c7c:	08008c59 	.word	0x08008c59
 8008c80:	08008c59 	.word	0x08008c59
 8008c84:	08008c59 	.word	0x08008c59
 8008c88:	08008cdd 	.word	0x08008cdd
 8008c8c:	08008c59 	.word	0x08008c59
 8008c90:	08008c59 	.word	0x08008c59
 8008c94:	08008c59 	.word	0x08008c59
 8008c98:	08008c59 	.word	0x08008c59
 8008c9c:	08008de9 	.word	0x08008de9
 8008ca0:	08008d0d 	.word	0x08008d0d
 8008ca4:	08008dcb 	.word	0x08008dcb
 8008ca8:	08008c59 	.word	0x08008c59
 8008cac:	08008c59 	.word	0x08008c59
 8008cb0:	08008e0b 	.word	0x08008e0b
 8008cb4:	08008c59 	.word	0x08008c59
 8008cb8:	08008d0d 	.word	0x08008d0d
 8008cbc:	08008c59 	.word	0x08008c59
 8008cc0:	08008c59 	.word	0x08008c59
 8008cc4:	08008dd3 	.word	0x08008dd3
 8008cc8:	682b      	ldr	r3, [r5, #0]
 8008cca:	1d1a      	adds	r2, r3, #4
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	602a      	str	r2, [r5, #0]
 8008cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e0a3      	b.n	8008e24 <_printf_i+0x1f4>
 8008cdc:	6820      	ldr	r0, [r4, #0]
 8008cde:	6829      	ldr	r1, [r5, #0]
 8008ce0:	0606      	lsls	r6, r0, #24
 8008ce2:	f101 0304 	add.w	r3, r1, #4
 8008ce6:	d50a      	bpl.n	8008cfe <_printf_i+0xce>
 8008ce8:	680e      	ldr	r6, [r1, #0]
 8008cea:	602b      	str	r3, [r5, #0]
 8008cec:	2e00      	cmp	r6, #0
 8008cee:	da03      	bge.n	8008cf8 <_printf_i+0xc8>
 8008cf0:	232d      	movs	r3, #45	; 0x2d
 8008cf2:	4276      	negs	r6, r6
 8008cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cf8:	485e      	ldr	r0, [pc, #376]	; (8008e74 <_printf_i+0x244>)
 8008cfa:	230a      	movs	r3, #10
 8008cfc:	e019      	b.n	8008d32 <_printf_i+0x102>
 8008cfe:	680e      	ldr	r6, [r1, #0]
 8008d00:	602b      	str	r3, [r5, #0]
 8008d02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d06:	bf18      	it	ne
 8008d08:	b236      	sxthne	r6, r6
 8008d0a:	e7ef      	b.n	8008cec <_printf_i+0xbc>
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	6820      	ldr	r0, [r4, #0]
 8008d10:	1d19      	adds	r1, r3, #4
 8008d12:	6029      	str	r1, [r5, #0]
 8008d14:	0601      	lsls	r1, r0, #24
 8008d16:	d501      	bpl.n	8008d1c <_printf_i+0xec>
 8008d18:	681e      	ldr	r6, [r3, #0]
 8008d1a:	e002      	b.n	8008d22 <_printf_i+0xf2>
 8008d1c:	0646      	lsls	r6, r0, #25
 8008d1e:	d5fb      	bpl.n	8008d18 <_printf_i+0xe8>
 8008d20:	881e      	ldrh	r6, [r3, #0]
 8008d22:	4854      	ldr	r0, [pc, #336]	; (8008e74 <_printf_i+0x244>)
 8008d24:	2f6f      	cmp	r7, #111	; 0x6f
 8008d26:	bf0c      	ite	eq
 8008d28:	2308      	moveq	r3, #8
 8008d2a:	230a      	movne	r3, #10
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d32:	6865      	ldr	r5, [r4, #4]
 8008d34:	60a5      	str	r5, [r4, #8]
 8008d36:	2d00      	cmp	r5, #0
 8008d38:	bfa2      	ittt	ge
 8008d3a:	6821      	ldrge	r1, [r4, #0]
 8008d3c:	f021 0104 	bicge.w	r1, r1, #4
 8008d40:	6021      	strge	r1, [r4, #0]
 8008d42:	b90e      	cbnz	r6, 8008d48 <_printf_i+0x118>
 8008d44:	2d00      	cmp	r5, #0
 8008d46:	d04d      	beq.n	8008de4 <_printf_i+0x1b4>
 8008d48:	4615      	mov	r5, r2
 8008d4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d4e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d52:	5dc7      	ldrb	r7, [r0, r7]
 8008d54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d58:	4637      	mov	r7, r6
 8008d5a:	42bb      	cmp	r3, r7
 8008d5c:	460e      	mov	r6, r1
 8008d5e:	d9f4      	bls.n	8008d4a <_printf_i+0x11a>
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d10b      	bne.n	8008d7c <_printf_i+0x14c>
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	07de      	lsls	r6, r3, #31
 8008d68:	d508      	bpl.n	8008d7c <_printf_i+0x14c>
 8008d6a:	6923      	ldr	r3, [r4, #16]
 8008d6c:	6861      	ldr	r1, [r4, #4]
 8008d6e:	4299      	cmp	r1, r3
 8008d70:	bfde      	ittt	le
 8008d72:	2330      	movle	r3, #48	; 0x30
 8008d74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d78:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008d7c:	1b52      	subs	r2, r2, r5
 8008d7e:	6122      	str	r2, [r4, #16]
 8008d80:	f8cd a000 	str.w	sl, [sp]
 8008d84:	464b      	mov	r3, r9
 8008d86:	aa03      	add	r2, sp, #12
 8008d88:	4621      	mov	r1, r4
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	f7ff fee2 	bl	8008b54 <_printf_common>
 8008d90:	3001      	adds	r0, #1
 8008d92:	d14c      	bne.n	8008e2e <_printf_i+0x1fe>
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d98:	b004      	add	sp, #16
 8008d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9e:	4835      	ldr	r0, [pc, #212]	; (8008e74 <_printf_i+0x244>)
 8008da0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008da4:	6829      	ldr	r1, [r5, #0]
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008dac:	6029      	str	r1, [r5, #0]
 8008dae:	061d      	lsls	r5, r3, #24
 8008db0:	d514      	bpl.n	8008ddc <_printf_i+0x1ac>
 8008db2:	07df      	lsls	r7, r3, #31
 8008db4:	bf44      	itt	mi
 8008db6:	f043 0320 	orrmi.w	r3, r3, #32
 8008dba:	6023      	strmi	r3, [r4, #0]
 8008dbc:	b91e      	cbnz	r6, 8008dc6 <_printf_i+0x196>
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	f023 0320 	bic.w	r3, r3, #32
 8008dc4:	6023      	str	r3, [r4, #0]
 8008dc6:	2310      	movs	r3, #16
 8008dc8:	e7b0      	b.n	8008d2c <_printf_i+0xfc>
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	f043 0320 	orr.w	r3, r3, #32
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	2378      	movs	r3, #120	; 0x78
 8008dd4:	4828      	ldr	r0, [pc, #160]	; (8008e78 <_printf_i+0x248>)
 8008dd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dda:	e7e3      	b.n	8008da4 <_printf_i+0x174>
 8008ddc:	0659      	lsls	r1, r3, #25
 8008dde:	bf48      	it	mi
 8008de0:	b2b6      	uxthmi	r6, r6
 8008de2:	e7e6      	b.n	8008db2 <_printf_i+0x182>
 8008de4:	4615      	mov	r5, r2
 8008de6:	e7bb      	b.n	8008d60 <_printf_i+0x130>
 8008de8:	682b      	ldr	r3, [r5, #0]
 8008dea:	6826      	ldr	r6, [r4, #0]
 8008dec:	6961      	ldr	r1, [r4, #20]
 8008dee:	1d18      	adds	r0, r3, #4
 8008df0:	6028      	str	r0, [r5, #0]
 8008df2:	0635      	lsls	r5, r6, #24
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	d501      	bpl.n	8008dfc <_printf_i+0x1cc>
 8008df8:	6019      	str	r1, [r3, #0]
 8008dfa:	e002      	b.n	8008e02 <_printf_i+0x1d2>
 8008dfc:	0670      	lsls	r0, r6, #25
 8008dfe:	d5fb      	bpl.n	8008df8 <_printf_i+0x1c8>
 8008e00:	8019      	strh	r1, [r3, #0]
 8008e02:	2300      	movs	r3, #0
 8008e04:	6123      	str	r3, [r4, #16]
 8008e06:	4615      	mov	r5, r2
 8008e08:	e7ba      	b.n	8008d80 <_printf_i+0x150>
 8008e0a:	682b      	ldr	r3, [r5, #0]
 8008e0c:	1d1a      	adds	r2, r3, #4
 8008e0e:	602a      	str	r2, [r5, #0]
 8008e10:	681d      	ldr	r5, [r3, #0]
 8008e12:	6862      	ldr	r2, [r4, #4]
 8008e14:	2100      	movs	r1, #0
 8008e16:	4628      	mov	r0, r5
 8008e18:	f7f7 fa02 	bl	8000220 <memchr>
 8008e1c:	b108      	cbz	r0, 8008e22 <_printf_i+0x1f2>
 8008e1e:	1b40      	subs	r0, r0, r5
 8008e20:	6060      	str	r0, [r4, #4]
 8008e22:	6863      	ldr	r3, [r4, #4]
 8008e24:	6123      	str	r3, [r4, #16]
 8008e26:	2300      	movs	r3, #0
 8008e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e2c:	e7a8      	b.n	8008d80 <_printf_i+0x150>
 8008e2e:	6923      	ldr	r3, [r4, #16]
 8008e30:	462a      	mov	r2, r5
 8008e32:	4649      	mov	r1, r9
 8008e34:	4640      	mov	r0, r8
 8008e36:	47d0      	blx	sl
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d0ab      	beq.n	8008d94 <_printf_i+0x164>
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	079b      	lsls	r3, r3, #30
 8008e40:	d413      	bmi.n	8008e6a <_printf_i+0x23a>
 8008e42:	68e0      	ldr	r0, [r4, #12]
 8008e44:	9b03      	ldr	r3, [sp, #12]
 8008e46:	4298      	cmp	r0, r3
 8008e48:	bfb8      	it	lt
 8008e4a:	4618      	movlt	r0, r3
 8008e4c:	e7a4      	b.n	8008d98 <_printf_i+0x168>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	4632      	mov	r2, r6
 8008e52:	4649      	mov	r1, r9
 8008e54:	4640      	mov	r0, r8
 8008e56:	47d0      	blx	sl
 8008e58:	3001      	adds	r0, #1
 8008e5a:	d09b      	beq.n	8008d94 <_printf_i+0x164>
 8008e5c:	3501      	adds	r5, #1
 8008e5e:	68e3      	ldr	r3, [r4, #12]
 8008e60:	9903      	ldr	r1, [sp, #12]
 8008e62:	1a5b      	subs	r3, r3, r1
 8008e64:	42ab      	cmp	r3, r5
 8008e66:	dcf2      	bgt.n	8008e4e <_printf_i+0x21e>
 8008e68:	e7eb      	b.n	8008e42 <_printf_i+0x212>
 8008e6a:	2500      	movs	r5, #0
 8008e6c:	f104 0619 	add.w	r6, r4, #25
 8008e70:	e7f5      	b.n	8008e5e <_printf_i+0x22e>
 8008e72:	bf00      	nop
 8008e74:	080091d1 	.word	0x080091d1
 8008e78:	080091e2 	.word	0x080091e2

08008e7c <_sbrk_r>:
 8008e7c:	b538      	push	{r3, r4, r5, lr}
 8008e7e:	4d06      	ldr	r5, [pc, #24]	; (8008e98 <_sbrk_r+0x1c>)
 8008e80:	2300      	movs	r3, #0
 8008e82:	4604      	mov	r4, r0
 8008e84:	4608      	mov	r0, r1
 8008e86:	602b      	str	r3, [r5, #0]
 8008e88:	f7f9 fdd4 	bl	8002a34 <_sbrk>
 8008e8c:	1c43      	adds	r3, r0, #1
 8008e8e:	d102      	bne.n	8008e96 <_sbrk_r+0x1a>
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	b103      	cbz	r3, 8008e96 <_sbrk_r+0x1a>
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	20004c68 	.word	0x20004c68

08008e9c <memmove>:
 8008e9c:	4288      	cmp	r0, r1
 8008e9e:	b510      	push	{r4, lr}
 8008ea0:	eb01 0402 	add.w	r4, r1, r2
 8008ea4:	d902      	bls.n	8008eac <memmove+0x10>
 8008ea6:	4284      	cmp	r4, r0
 8008ea8:	4623      	mov	r3, r4
 8008eaa:	d807      	bhi.n	8008ebc <memmove+0x20>
 8008eac:	1e43      	subs	r3, r0, #1
 8008eae:	42a1      	cmp	r1, r4
 8008eb0:	d008      	beq.n	8008ec4 <memmove+0x28>
 8008eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008eba:	e7f8      	b.n	8008eae <memmove+0x12>
 8008ebc:	4402      	add	r2, r0
 8008ebe:	4601      	mov	r1, r0
 8008ec0:	428a      	cmp	r2, r1
 8008ec2:	d100      	bne.n	8008ec6 <memmove+0x2a>
 8008ec4:	bd10      	pop	{r4, pc}
 8008ec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ece:	e7f7      	b.n	8008ec0 <memmove+0x24>

08008ed0 <__malloc_lock>:
 8008ed0:	4801      	ldr	r0, [pc, #4]	; (8008ed8 <__malloc_lock+0x8>)
 8008ed2:	f000 b884 	b.w	8008fde <__retarget_lock_acquire_recursive>
 8008ed6:	bf00      	nop
 8008ed8:	20004c6c 	.word	0x20004c6c

08008edc <__malloc_unlock>:
 8008edc:	4801      	ldr	r0, [pc, #4]	; (8008ee4 <__malloc_unlock+0x8>)
 8008ede:	f000 b87f 	b.w	8008fe0 <__retarget_lock_release_recursive>
 8008ee2:	bf00      	nop
 8008ee4:	20004c6c 	.word	0x20004c6c

08008ee8 <_free_r>:
 8008ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eea:	2900      	cmp	r1, #0
 8008eec:	d044      	beq.n	8008f78 <_free_r+0x90>
 8008eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef2:	9001      	str	r0, [sp, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f1a1 0404 	sub.w	r4, r1, #4
 8008efa:	bfb8      	it	lt
 8008efc:	18e4      	addlt	r4, r4, r3
 8008efe:	f7ff ffe7 	bl	8008ed0 <__malloc_lock>
 8008f02:	4a1e      	ldr	r2, [pc, #120]	; (8008f7c <_free_r+0x94>)
 8008f04:	9801      	ldr	r0, [sp, #4]
 8008f06:	6813      	ldr	r3, [r2, #0]
 8008f08:	b933      	cbnz	r3, 8008f18 <_free_r+0x30>
 8008f0a:	6063      	str	r3, [r4, #4]
 8008f0c:	6014      	str	r4, [r2, #0]
 8008f0e:	b003      	add	sp, #12
 8008f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f14:	f7ff bfe2 	b.w	8008edc <__malloc_unlock>
 8008f18:	42a3      	cmp	r3, r4
 8008f1a:	d908      	bls.n	8008f2e <_free_r+0x46>
 8008f1c:	6825      	ldr	r5, [r4, #0]
 8008f1e:	1961      	adds	r1, r4, r5
 8008f20:	428b      	cmp	r3, r1
 8008f22:	bf01      	itttt	eq
 8008f24:	6819      	ldreq	r1, [r3, #0]
 8008f26:	685b      	ldreq	r3, [r3, #4]
 8008f28:	1949      	addeq	r1, r1, r5
 8008f2a:	6021      	streq	r1, [r4, #0]
 8008f2c:	e7ed      	b.n	8008f0a <_free_r+0x22>
 8008f2e:	461a      	mov	r2, r3
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	b10b      	cbz	r3, 8008f38 <_free_r+0x50>
 8008f34:	42a3      	cmp	r3, r4
 8008f36:	d9fa      	bls.n	8008f2e <_free_r+0x46>
 8008f38:	6811      	ldr	r1, [r2, #0]
 8008f3a:	1855      	adds	r5, r2, r1
 8008f3c:	42a5      	cmp	r5, r4
 8008f3e:	d10b      	bne.n	8008f58 <_free_r+0x70>
 8008f40:	6824      	ldr	r4, [r4, #0]
 8008f42:	4421      	add	r1, r4
 8008f44:	1854      	adds	r4, r2, r1
 8008f46:	42a3      	cmp	r3, r4
 8008f48:	6011      	str	r1, [r2, #0]
 8008f4a:	d1e0      	bne.n	8008f0e <_free_r+0x26>
 8008f4c:	681c      	ldr	r4, [r3, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	6053      	str	r3, [r2, #4]
 8008f52:	4421      	add	r1, r4
 8008f54:	6011      	str	r1, [r2, #0]
 8008f56:	e7da      	b.n	8008f0e <_free_r+0x26>
 8008f58:	d902      	bls.n	8008f60 <_free_r+0x78>
 8008f5a:	230c      	movs	r3, #12
 8008f5c:	6003      	str	r3, [r0, #0]
 8008f5e:	e7d6      	b.n	8008f0e <_free_r+0x26>
 8008f60:	6825      	ldr	r5, [r4, #0]
 8008f62:	1961      	adds	r1, r4, r5
 8008f64:	428b      	cmp	r3, r1
 8008f66:	bf04      	itt	eq
 8008f68:	6819      	ldreq	r1, [r3, #0]
 8008f6a:	685b      	ldreq	r3, [r3, #4]
 8008f6c:	6063      	str	r3, [r4, #4]
 8008f6e:	bf04      	itt	eq
 8008f70:	1949      	addeq	r1, r1, r5
 8008f72:	6021      	streq	r1, [r4, #0]
 8008f74:	6054      	str	r4, [r2, #4]
 8008f76:	e7ca      	b.n	8008f0e <_free_r+0x26>
 8008f78:	b003      	add	sp, #12
 8008f7a:	bd30      	pop	{r4, r5, pc}
 8008f7c:	20004c60 	.word	0x20004c60

08008f80 <_realloc_r>:
 8008f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f84:	4680      	mov	r8, r0
 8008f86:	4614      	mov	r4, r2
 8008f88:	460e      	mov	r6, r1
 8008f8a:	b921      	cbnz	r1, 8008f96 <_realloc_r+0x16>
 8008f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f90:	4611      	mov	r1, r2
 8008f92:	f7ff bc0f 	b.w	80087b4 <_malloc_r>
 8008f96:	b92a      	cbnz	r2, 8008fa4 <_realloc_r+0x24>
 8008f98:	f7ff ffa6 	bl	8008ee8 <_free_r>
 8008f9c:	4625      	mov	r5, r4
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa4:	f000 f81d 	bl	8008fe2 <_malloc_usable_size_r>
 8008fa8:	4284      	cmp	r4, r0
 8008faa:	4607      	mov	r7, r0
 8008fac:	d802      	bhi.n	8008fb4 <_realloc_r+0x34>
 8008fae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fb2:	d812      	bhi.n	8008fda <_realloc_r+0x5a>
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	f7ff fbfc 	bl	80087b4 <_malloc_r>
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d0ed      	beq.n	8008f9e <_realloc_r+0x1e>
 8008fc2:	42bc      	cmp	r4, r7
 8008fc4:	4622      	mov	r2, r4
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	bf28      	it	cs
 8008fca:	463a      	movcs	r2, r7
 8008fcc:	f7ff fb3c 	bl	8008648 <memcpy>
 8008fd0:	4631      	mov	r1, r6
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	f7ff ff88 	bl	8008ee8 <_free_r>
 8008fd8:	e7e1      	b.n	8008f9e <_realloc_r+0x1e>
 8008fda:	4635      	mov	r5, r6
 8008fdc:	e7df      	b.n	8008f9e <_realloc_r+0x1e>

08008fde <__retarget_lock_acquire_recursive>:
 8008fde:	4770      	bx	lr

08008fe0 <__retarget_lock_release_recursive>:
 8008fe0:	4770      	bx	lr

08008fe2 <_malloc_usable_size_r>:
 8008fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fe6:	1f18      	subs	r0, r3, #4
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	bfbc      	itt	lt
 8008fec:	580b      	ldrlt	r3, [r1, r0]
 8008fee:	18c0      	addlt	r0, r0, r3
 8008ff0:	4770      	bx	lr
	...

08008ff4 <_init>:
 8008ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff6:	bf00      	nop
 8008ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffa:	bc08      	pop	{r3}
 8008ffc:	469e      	mov	lr, r3
 8008ffe:	4770      	bx	lr

08009000 <_fini>:
 8009000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009002:	bf00      	nop
 8009004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009006:	bc08      	pop	{r3}
 8009008:	469e      	mov	lr, r3
 800900a:	4770      	bx	lr
