
pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009088  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08009258  08009258  00019258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009458  08009458  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08009458  08009458  00019458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009460  08009460  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009460  08009460  00019460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009464  08009464  00019464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08009468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf0  200000b0  08009518  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004ca0  08009518  00024ca0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fec  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b14  00000000  00000000  000350cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00037be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  00038e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b7b  00000000  00000000  00039fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016169  00000000  00000000  0005db5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d77b9  00000000  00000000  00073cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b47d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b8  00000000  00000000  0014b4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009240 	.word	0x08009240

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	08009240 	.word	0x08009240

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <arm_fir_f32>:
void arm_fir_f32(
const arm_fir_instance_f32 * S,
float32_t * pSrc,
float32_t * pDst,
uint32_t blockSize)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b09f      	sub	sp, #124	; 0x7c
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	603b      	str	r3, [r7, #0]
   float32_t *pState = S->pState;                 /* State pointer */
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	677b      	str	r3, [r7, #116]	; 0x74
   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	61fb      	str	r3, [r7, #28]
   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient buffers */
   float32_t acc0, acc1, acc2, acc3, acc4, acc5, acc6, acc7;     /* Accumulators */
   float32_t x0, x1, x2, x3, x4, x5, x6, x7, c0;  /* Temporary variables to hold state and coefficient values */
   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	61bb      	str	r3, [r7, #24]
   uint32_t i, tapCnt, blkCnt;                    /* Loop counters */

   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
   /* pStateCurnt points to the location where the new input data should be written */
   pStateCurnt = &(S->pState[(numTaps - 1u)]);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80005ee:	3b01      	subs	r3, #1
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	673b      	str	r3, [r7, #112]	; 0x70
    *    acc0 =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0]  
    *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-numTaps-2] +...+ b[0] * x[1]  
    *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-numTaps-1] +...+ b[0] * x[2]  
    *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-numTaps]   +...+ b[0] * x[3]  
    */
   blkCnt = blockSize >> 3;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	08db      	lsrs	r3, r3, #3
 80005fa:	623b      	str	r3, [r7, #32]

   /* First part of the processing with loop unrolling.  Compute 8 outputs at a time.  
   ** a second loop below computes the remaining 1 to 7 samples. */
   while(blkCnt > 0u)
 80005fc:	f000 bc8b 	b.w	8000f16 <arm_fir_f32+0x952>
   {
      /* Copy four new input samples into the state buffer */
      *pStateCurnt++ = *pSrc++;
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	1d13      	adds	r3, r2, #4
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000608:	1d19      	adds	r1, r3, #4
 800060a:	6739      	str	r1, [r7, #112]	; 0x70
 800060c:	6812      	ldr	r2, [r2, #0]
 800060e:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	1d13      	adds	r3, r2, #4
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000618:	1d19      	adds	r1, r3, #4
 800061a:	6739      	str	r1, [r7, #112]	; 0x70
 800061c:	6812      	ldr	r2, [r2, #0]
 800061e:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000620:	68ba      	ldr	r2, [r7, #8]
 8000622:	1d13      	adds	r3, r2, #4
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000628:	1d19      	adds	r1, r3, #4
 800062a:	6739      	str	r1, [r7, #112]	; 0x70
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	1d13      	adds	r3, r2, #4
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000638:	1d19      	adds	r1, r3, #4
 800063a:	6739      	str	r1, [r7, #112]	; 0x70
 800063c:	6812      	ldr	r2, [r2, #0]
 800063e:	601a      	str	r2, [r3, #0]

      /* Set all accumulators to zero */
      acc0 = 0.0f;
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	667b      	str	r3, [r7, #100]	; 0x64
      acc1 = 0.0f;
 8000646:	f04f 0300 	mov.w	r3, #0
 800064a:	663b      	str	r3, [r7, #96]	; 0x60
      acc2 = 0.0f;
 800064c:	f04f 0300 	mov.w	r3, #0
 8000650:	65fb      	str	r3, [r7, #92]	; 0x5c
      acc3 = 0.0f;
 8000652:	f04f 0300 	mov.w	r3, #0
 8000656:	65bb      	str	r3, [r7, #88]	; 0x58
      acc4 = 0.0f;
 8000658:	f04f 0300 	mov.w	r3, #0
 800065c:	657b      	str	r3, [r7, #84]	; 0x54
      acc5 = 0.0f;
 800065e:	f04f 0300 	mov.w	r3, #0
 8000662:	653b      	str	r3, [r7, #80]	; 0x50
      acc6 = 0.0f;
 8000664:	f04f 0300 	mov.w	r3, #0
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
      acc7 = 0.0f;		
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48

      /* Initialize state pointer */
      px = pState;
 8000670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000672:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* Initialize coeff pointer */
      pb = (pCoeffs);		
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	66bb      	str	r3, [r7, #104]	; 0x68
   
      /* This is separated from the others to avoid 
       * a call to __aeabi_memmove which would be slower
       */
      *pStateCurnt++ = *pSrc++;
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	1d13      	adds	r3, r2, #4
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000680:	1d19      	adds	r1, r3, #4
 8000682:	6739      	str	r1, [r7, #112]	; 0x70
 8000684:	6812      	ldr	r2, [r2, #0]
 8000686:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	1d13      	adds	r3, r2, #4
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000690:	1d19      	adds	r1, r3, #4
 8000692:	6739      	str	r1, [r7, #112]	; 0x70
 8000694:	6812      	ldr	r2, [r2, #0]
 8000696:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	1d13      	adds	r3, r2, #4
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006a0:	1d19      	adds	r1, r3, #4
 80006a2:	6739      	str	r1, [r7, #112]	; 0x70
 80006a4:	6812      	ldr	r2, [r2, #0]
 80006a6:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	1d13      	adds	r3, r2, #4
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006b0:	1d19      	adds	r1, r3, #4
 80006b2:	6739      	str	r1, [r7, #112]	; 0x70
 80006b4:	6812      	ldr	r2, [r2, #0]
 80006b6:	601a      	str	r2, [r3, #0]

      /* Read the first seven samples from the state buffer:  x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2] */
      x0 = *px++;
 80006b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006ba:	1d1a      	adds	r2, r3, #4
 80006bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	647b      	str	r3, [r7, #68]	; 0x44
      x1 = *px++;
 80006c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006c4:	1d1a      	adds	r2, r3, #4
 80006c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
      x2 = *px++;
 80006cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006ce:	1d1a      	adds	r2, r3, #4
 80006d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	63fb      	str	r3, [r7, #60]	; 0x3c
      x3 = *px++;
 80006d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006d8:	1d1a      	adds	r2, r3, #4
 80006da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
      x4 = *px++;
 80006e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006e2:	1d1a      	adds	r2, r3, #4
 80006e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	637b      	str	r3, [r7, #52]	; 0x34
      x5 = *px++;
 80006ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006ec:	1d1a      	adds	r2, r3, #4
 80006ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
      x6 = *px++;
 80006f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006f6:	1d1a      	adds	r2, r3, #4
 80006f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Loop unrolling.  Process 8 taps at a time. */
      tapCnt = numTaps >> 3u;
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	08db      	lsrs	r3, r3, #3
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Loop over the number of taps.  Unroll by a factor of 8.  
       ** Repeat until we've computed numTaps-8 coefficients. */
      while(tapCnt > 0u)
 8000704:	e352      	b.n	8000dac <arm_fir_f32+0x7e8>
      {
         /* Read the b[numTaps-1] coefficient */
         c0 = *(pb++);
 8000706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000708:	1d1a      	adds	r2, r3, #4
 800070a:	66ba      	str	r2, [r7, #104]	; 0x68
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-3] sample */
         x7 = *(px++);
 8000710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000712:	1d1a      	adds	r2, r3, #4
 8000714:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	613b      	str	r3, [r7, #16]

         /* acc0 +=  b[numTaps-1] * x[n-numTaps] */
         acc0 += x0 * c0;
 800071a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800071e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000726:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800072a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800072e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-1] */
         acc1 += x1 * c0;
 8000732:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000736:	edd7 7a05 	vldr	s15, [r7, #20]
 800073a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000746:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-2] */
         acc2 += x2 * c0;
 800074a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800074e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000756:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800075a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800075e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-3] */
         acc3 += x3 * c0;
 8000762:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000766:	edd7 7a05 	vldr	s15, [r7, #20]
 800076a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800076e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000776:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

         /* acc4 +=  b[numTaps-1] * x[n-numTaps-4] */
         acc4 += x4 * c0;
 800077a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800077e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000786:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800078a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800078e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-5] */
         acc5 += x5 * c0;
 8000792:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000796:	edd7 7a05 	vldr	s15, [r7, #20]
 800079a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800079e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80007a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007a6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-6] */
         acc6 += x6 * c0;
 80007aa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80007ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80007b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007b6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80007ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007be:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-7] */
         acc7 += x7 * c0;
 80007c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80007c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80007ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ce:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80007d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007d6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
         
         /* Read the b[numTaps-2] coefficient */
         c0 = *(pb++);
 80007da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007dc:	1d1a      	adds	r2, r3, #4
 80007de:	66ba      	str	r2, [r7, #104]	; 0x68
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-4] sample */
         x0 = *(px++);
 80007e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007e6:	1d1a      	adds	r2, r3, #4
 80007e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	647b      	str	r3, [r7, #68]	; 0x44

         /* Perform the multiply-accumulate */
         acc0 += x1 * c0;
 80007ee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80007f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80007f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007fa:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80007fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000802:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x2 * c0;   
 8000806:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800080a:	edd7 7a05 	vldr	s15, [r7, #20]
 800080e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000812:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800081a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x3 * c0;   
 800081e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000822:	edd7 7a05 	vldr	s15, [r7, #20]
 8000826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800082a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800082e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000832:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x4 * c0;   
 8000836:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800083a:	edd7 7a05 	vldr	s15, [r7, #20]
 800083e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000842:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800084a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x5 * c0;   
 800084e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000852:	edd7 7a05 	vldr	s15, [r7, #20]
 8000856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800085a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800085e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000862:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x6 * c0;   
 8000866:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800086a:	edd7 7a05 	vldr	s15, [r7, #20]
 800086e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000872:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800087a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x7 * c0;   
 800087e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000882:	edd7 7a05 	vldr	s15, [r7, #20]
 8000886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800088a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800088e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000892:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x0 * c0;   
 8000896:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800089a:	edd7 7a05 	vldr	s15, [r7, #20]
 800089e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008a2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80008a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008aa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
         
         /* Read the b[numTaps-3] coefficient */
         c0 = *(pb++);
 80008ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008b0:	1d1a      	adds	r2, r3, #4
 80008b2:	66ba      	str	r2, [r7, #104]	; 0x68
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-5] sample */
         x1 = *(px++);
 80008b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008ba:	1d1a      	adds	r2, r3, #4
 80008bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	643b      	str	r3, [r7, #64]	; 0x40

         /* Perform the multiply-accumulates */      
         acc0 += x2 * c0;
 80008c2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80008c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80008ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ce:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80008d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008d6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x3 * c0;   
 80008da:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80008de:	edd7 7a05 	vldr	s15, [r7, #20]
 80008e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80008ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ee:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x4 * c0;   
 80008f2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80008f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80008fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008fe:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000906:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x5 * c0;   
 800090a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800090e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000916:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800091a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800091e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x6 * c0;   
 8000922:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000926:	edd7 7a05 	vldr	s15, [r7, #20]
 800092a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800092e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000936:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x7 * c0;   
 800093a:	ed97 7a04 	vldr	s14, [r7, #16]
 800093e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000946:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800094a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800094e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x0 * c0;   
 8000952:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000956:	edd7 7a05 	vldr	s15, [r7, #20]
 800095a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800095e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000966:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x1 * c0;   
 800096a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800096e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000976:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800097a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800097e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000984:	1d1a      	adds	r2, r3, #4
 8000986:	66ba      	str	r2, [r7, #104]	; 0x68
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x2 = *(px++);
 800098c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800098e:	1d1a      	adds	r2, r3, #4
 8000990:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c

         /* Perform the multiply-accumulates */      
         acc0 += x3 * c0;
 8000996:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800099a:	edd7 7a05 	vldr	s15, [r7, #20]
 800099e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009a2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80009a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009aa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x4 * c0;   
 80009ae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80009b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80009b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ba:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80009be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009c2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x5 * c0;   
 80009c6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80009ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80009ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009d2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80009d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009da:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x6 * c0;   
 80009de:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80009e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80009e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ea:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80009ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009f2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x7 * c0;   
 80009f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80009fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80009fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a02:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a0a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x0 * c0;   
 8000a0e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a12:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a1a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a22:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x1 * c0;   
 8000a26:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000a2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a32:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a3a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x2 * c0;   
 8000a3e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000a42:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a4a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a52:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000a56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a58:	1d1a      	adds	r2, r3, #4
 8000a5a:	66ba      	str	r2, [r7, #104]	; 0x68
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x3 = *(px++);
 8000a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a62:	1d1a      	adds	r2, r3, #4
 8000a64:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
         /* Perform the multiply-accumulates */      
         acc0 += x4 * c0;
 8000a6a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000a6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a76:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a7e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x5 * c0;   
 8000a82:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000a86:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a8e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a96:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x6 * c0;   
 8000a9a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000a9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aae:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x7 * c0;   
 8000ab2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ab6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000abe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ac6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x0 * c0;   
 8000aca:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000ace:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ade:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x1 * c0;   
 8000ae2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000ae6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aee:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000af6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x2 * c0;   
 8000afa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000afe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b06:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b0e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x3 * c0;   
 8000b12:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000b16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b1e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b26:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b2c:	1d1a      	adds	r2, r3, #4
 8000b2e:	66ba      	str	r2, [r7, #104]	; 0x68
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x4 = *(px++);
 8000b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b36:	1d1a      	adds	r2, r3, #4
 8000b38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	637b      	str	r3, [r7, #52]	; 0x34

         /* Perform the multiply-accumulates */      
         acc0 += x5 * c0;
 8000b3e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000b42:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b4a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b52:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x6 * c0;   
 8000b56:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000b5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b62:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b6a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x7 * c0;   
 8000b6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b72:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b7a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b82:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x0 * c0;   
 8000b86:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000b8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b92:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b9a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x1 * c0;   
 8000b9e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000ba2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000baa:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x2 * c0;   
 8000bb6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000bba:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bc2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bca:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x3 * c0;   
 8000bce:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000bd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bda:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x4 * c0;   
 8000be6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000bea:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bf2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bfa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c00:	1d1a      	adds	r2, r3, #4
 8000c02:	66ba      	str	r2, [r7, #104]	; 0x68
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x5 = *(px++);
 8000c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c0a:	1d1a      	adds	r2, r3, #4
 8000c0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30

         /* Perform the multiply-accumulates */      
         acc0 += x6 * c0;
 8000c12:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000c16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c1e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c26:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x7 * c0;   
 8000c2a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c36:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c3e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x0 * c0;   
 8000c42:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000c46:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c4e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c56:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x1 * c0;   
 8000c5a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000c5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c66:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c6e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x2 * c0;   
 8000c72:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c76:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c7e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c86:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x3 * c0;   
 8000c8a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000c8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c96:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c9e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x4 * c0;   
 8000ca2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000ca6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x5 * c0;   
 8000cba:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000cbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cce:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000cd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000cd4:	1d1a      	adds	r2, r3, #4
 8000cd6:	66ba      	str	r2, [r7, #104]	; 0x68
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x6 = *(px++);
 8000cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cde:	1d1a      	adds	r2, r3, #4
 8000ce0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c

         /* Perform the multiply-accumulates */      
         acc0 += x7 * c0;
 8000ce6:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cea:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cf2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x0 * c0;   
 8000cfe:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000d02:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d0a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d12:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x1 * c0;   
 8000d16:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000d1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d22:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d2a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x2 * c0;   
 8000d2e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000d32:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d3a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d42:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x3 * c0;   
 8000d46:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000d4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d52:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d5a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x4 * c0;   
 8000d5e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000d62:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d6a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d72:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x5 * c0;   
 8000d76:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000d7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d82:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d8a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x6 * c0;   
 8000d8e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000d92:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d9a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         tapCnt--;
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	3b01      	subs	r3, #1
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
      while(tapCnt > 0u)
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f47f aca9 	bne.w	8000706 <arm_fir_f32+0x142>
      }

      /* If the filter length is not a multiple of 8, compute the remaining filter taps */
      tapCnt = numTaps % 0x8u;
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24

      while(tapCnt > 0u)
 8000dbc:	e07a      	b.n	8000eb4 <arm_fir_f32+0x8f0>
      {
         /* Read coefficients */
         c0 = *(pb++);
 8000dbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000dc0:	1d1a      	adds	r2, r3, #4
 8000dc2:	66ba      	str	r2, [r7, #104]	; 0x68
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	617b      	str	r3, [r7, #20]

         /* Fetch 1 state variable */
         x7 = *(px++);
 8000dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dca:	1d1a      	adds	r2, r3, #4
 8000dcc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	613b      	str	r3, [r7, #16]

         /* Perform the multiply-accumulates */      
         acc0 += x0 * c0;
 8000dd2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000dd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dde:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x1 * c0;   
 8000dea:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000dee:	edd7 7a05 	vldr	s15, [r7, #20]
 8000df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dfe:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x2 * c0;   
 8000e02:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e0e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e16:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x3 * c0;   
 8000e1a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000e1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e26:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x4 * c0;   
 8000e32:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000e36:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e3e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e46:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x5 * c0;   
 8000e4a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000e4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e56:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e5e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x6 * c0;   
 8000e62:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000e66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e6e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e76:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x7 * c0;   
 8000e7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e86:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Reuse the present sample states for next sample */
         x0 = x1;
 8000e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e94:	647b      	str	r3, [r7, #68]	; 0x44
         x1 = x2;
 8000e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e98:	643b      	str	r3, [r7, #64]	; 0x40
         x2 = x3;
 8000e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         x3 = x4;
 8000e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
         x4 = x5;
 8000ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
         x5 = x6;
 8000ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
         x6 = x7;
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c

         /* Decrement the loop counter */
         tapCnt--;
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
      while(tapCnt > 0u)
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d181      	bne.n	8000dbe <arm_fir_f32+0x7fa>
      }

      /* Advance the state pointer by 8 to process the next group of 8 samples */
      pState = pState + 8;
 8000eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ebc:	3320      	adds	r3, #32
 8000ebe:	677b      	str	r3, [r7, #116]	; 0x74

      /* The results in the 8 accumulators, store in the destination buffer. */
      *pDst++ = acc0;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1d1a      	adds	r2, r3, #4
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ec8:	601a      	str	r2, [r3, #0]
      *pDst++ = acc1;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	1d1a      	adds	r2, r3, #4
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ed2:	601a      	str	r2, [r3, #0]
      *pDst++ = acc2;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	1d1a      	adds	r2, r3, #4
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000edc:	601a      	str	r2, [r3, #0]
      *pDst++ = acc3;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	1d1a      	adds	r2, r3, #4
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000ee6:	601a      	str	r2, [r3, #0]
      *pDst++ = acc4;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	1d1a      	adds	r2, r3, #4
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ef0:	601a      	str	r2, [r3, #0]
      *pDst++ = acc5;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	1d1a      	adds	r2, r3, #4
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000efa:	601a      	str	r2, [r3, #0]
      *pDst++ = acc6;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	1d1a      	adds	r2, r3, #4
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f04:	601a      	str	r2, [r3, #0]
      *pDst++ = acc7;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	1d1a      	adds	r2, r3, #4
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f0e:	601a      	str	r2, [r3, #0]

      blkCnt--;
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	623b      	str	r3, [r7, #32]
   while(blkCnt > 0u)
 8000f16:	6a3b      	ldr	r3, [r7, #32]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f47f ab71 	bne.w	8000600 <arm_fir_f32+0x3c>
   }

   /* If the blockSize is not a multiple of 8, compute any remaining output samples here.  
   ** No loop unrolling is used. */
   blkCnt = blockSize % 0x8u;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	623b      	str	r3, [r7, #32]

   while(blkCnt > 0u)
 8000f26:	e033      	b.n	8000f90 <arm_fir_f32+0x9cc>
   {
      /* Copy one sample at a time into state buffer */
      *pStateCurnt++ = *pSrc++;
 8000f28:	68ba      	ldr	r2, [r7, #8]
 8000f2a:	1d13      	adds	r3, r2, #4
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f30:	1d19      	adds	r1, r3, #4
 8000f32:	6739      	str	r1, [r7, #112]	; 0x70
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	601a      	str	r2, [r3, #0]

      /* Set the accumulator to zero */
      acc0 = 0.0f;
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	667b      	str	r3, [r7, #100]	; 0x64

      /* Initialize state pointer */
      px = pState;
 8000f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f40:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* Initialize Coefficient pointer */
      pb = (pCoeffs);
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	66bb      	str	r3, [r7, #104]	; 0x68

      i = numTaps;
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Perform the multiply-accumulates */
      do
      {
         acc0 += *px++ * *pb++;
 8000f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f4c:	1d1a      	adds	r2, r3, #4
 8000f4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f50:	ed93 7a00 	vldr	s14, [r3]
 8000f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f56:	1d1a      	adds	r2, r3, #4
 8000f58:	66ba      	str	r2, [r7, #104]	; 0x68
 8000f5a:	edd3 7a00 	vldr	s15, [r3]
 8000f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f62:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         i--;
 8000f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f70:	3b01      	subs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28

      } while(i > 0u);
 8000f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1e7      	bne.n	8000f4a <arm_fir_f32+0x986>

      /* The result is store in the destination buffer. */
      *pDst++ = acc0;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	1d1a      	adds	r2, r3, #4
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000f82:	601a      	str	r2, [r3, #0]

      /* Advance state pointer by 1 for the next sample */
      pState = pState + 1;
 8000f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f86:	3304      	adds	r3, #4
 8000f88:	677b      	str	r3, [r7, #116]	; 0x74

      blkCnt--;
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
   while(blkCnt > 0u)
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1c8      	bne.n	8000f28 <arm_fir_f32+0x964>
   /* Processing is complete.  
   ** Now copy the last numTaps - 1 samples to the start of the state buffer.  
   ** This prepares the state buffer for the next function call. */

   /* Points to the start of the state buffer */
   pStateCurnt = S->pState;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	673b      	str	r3, [r7, #112]	; 0x70

   tapCnt = (numTaps - 1u) >> 2u;
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24

   /* copy data */
   while(tapCnt > 0u)
 8000fa4:	e022      	b.n	8000fec <arm_fir_f32+0xa28>
   {
      *pStateCurnt++ = *pState++;
 8000fa6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fa8:	1d13      	adds	r3, r2, #4
 8000faa:	677b      	str	r3, [r7, #116]	; 0x74
 8000fac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fae:	1d19      	adds	r1, r3, #4
 8000fb0:	6739      	str	r1, [r7, #112]	; 0x70
 8000fb2:	6812      	ldr	r2, [r2, #0]
 8000fb4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8000fb6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fb8:	1d13      	adds	r3, r2, #4
 8000fba:	677b      	str	r3, [r7, #116]	; 0x74
 8000fbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fbe:	1d19      	adds	r1, r3, #4
 8000fc0:	6739      	str	r1, [r7, #112]	; 0x70
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8000fc6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fc8:	1d13      	adds	r3, r2, #4
 8000fca:	677b      	str	r3, [r7, #116]	; 0x74
 8000fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fce:	1d19      	adds	r1, r3, #4
 8000fd0:	6739      	str	r1, [r7, #112]	; 0x70
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8000fd6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fd8:	1d13      	adds	r3, r2, #4
 8000fda:	677b      	str	r3, [r7, #116]	; 0x74
 8000fdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fde:	1d19      	adds	r1, r3, #4
 8000fe0:	6739      	str	r1, [r7, #112]	; 0x70
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
   while(tapCnt > 0u)
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1d9      	bne.n	8000fa6 <arm_fir_f32+0x9e2>
   }

   /* Calculate remaining number of copies */
   tapCnt = (numTaps - 1u) % 0x4u;
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24

   /* Copy the remaining q31_t data */
   while(tapCnt > 0u)
 8000ffc:	e00a      	b.n	8001014 <arm_fir_f32+0xa50>
   {
      *pStateCurnt++ = *pState++;
 8000ffe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001000:	1d13      	adds	r3, r2, #4
 8001002:	677b      	str	r3, [r7, #116]	; 0x74
 8001004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001006:	1d19      	adds	r1, r3, #4
 8001008:	6739      	str	r1, [r7, #112]	; 0x70
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	3b01      	subs	r3, #1
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
   while(tapCnt > 0u)
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f1      	bne.n	8000ffe <arm_fir_f32+0xa3a>
   }
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	377c      	adds	r7, #124	; 0x7c
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <arm_fir_init_f32>:
  arm_fir_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	460b      	mov	r3, r1
 8001036:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	897a      	ldrh	r2, [r7, #10]
 800103c:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and the size of state buffer is (blockSize + numTaps - 1) */
  memset(pState, 0, (numTaps + (blockSize - 1u)) * sizeof(float32_t));
 8001044:	897a      	ldrh	r2, [r7, #10]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4413      	add	r3, r2
 800104a:	3b01      	subs	r3, #1
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	461a      	mov	r2, r3
 8001050:	2100      	movs	r1, #0
 8001052:	6838      	ldr	r0, [r7, #0]
 8001054:	f007 fc1e 	bl	8008894 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	605a      	str	r2, [r3, #4]

}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800107c:	b2db      	uxtb	r3, r3
 800107e:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6858      	ldr	r0, [r3, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	8adb      	ldrh	r3, [r3, #22]
 8001088:	2200      	movs	r2, #0
 800108a:	4619      	mov	r1, r3
 800108c:	f002 fd4a 	bl	8003b24 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	1cf9      	adds	r1, r7, #3
 800109a:	2201      	movs	r2, #1
 800109c:	f004 fd8b 	bl	8005bb6 <HAL_SPI_Transmit>
 80010a0:	4603      	mov	r3, r0
 80010a2:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f107 010f 	add.w	r1, r7, #15
 80010b0:	2201      	movs	r2, #1
 80010b2:	f004 febc 	bl	8005e2e <HAL_SPI_Receive>
 80010b6:	4603      	mov	r3, r0
 80010b8:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6858      	ldr	r0, [r3, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	8adb      	ldrh	r3, [r3, #22]
 80010c2:	2201      	movs	r2, #1
 80010c4:	4619      	mov	r1, r3
 80010c6:	f002 fd2d 	bl	8003b24 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
 80010e0:	4613      	mov	r3, r2
 80010e2:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ea:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 80010ec:	78bb      	ldrb	r3, [r7, #2]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6858      	ldr	r0, [r3, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	8adb      	ldrh	r3, [r3, #22]
 8001106:	2200      	movs	r2, #0
 8001108:	4619      	mov	r1, r3
 800110a:	f002 fd0b 	bl	8003b24 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f107 010a 	add.w	r1, r7, #10
 800111a:	2202      	movs	r2, #2
 800111c:	f004 fd4b 	bl	8005bb6 <HAL_SPI_Transmit>
 8001120:	4603      	mov	r3, r0
 8001122:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6858      	ldr	r0, [r3, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	8adb      	ldrh	r3, [r3, #22]
 800112c:	2201      	movs	r2, #1
 800112e:	4619      	mov	r1, r3
 8001130:	f002 fcf8 	bl	8003b24 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	4611      	mov	r1, r2
 8001148:	461a      	mov	r2, r3
 800114a:	460b      	mov	r3, r1
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	4613      	mov	r3, r2
 8001150:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6858      	ldr	r0, [r3, #4]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	8adb      	ldrh	r3, [r3, #22]
 800115e:	2200      	movs	r2, #0
 8001160:	4619      	mov	r1, r3
 8001162:	f002 fcdf 	bl	8003b24 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f107 0117 	add.w	r1, r7, #23
 8001172:	2201      	movs	r2, #1
 8001174:	f004 fd1f 	bl	8005bb6 <HAL_SPI_Transmit>
 8001178:	4603      	mov	r3, r0
 800117a:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 800117c:	79bb      	ldrb	r3, [r7, #6]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d108      	bne.n	8001194 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	79fa      	ldrb	r2, [r7, #7]
 8001188:	b292      	uxth	r2, r2
 800118a:	68b9      	ldr	r1, [r7, #8]
 800118c:	4618      	mov	r0, r3
 800118e:	f005 f901 	bl	8006394 <HAL_SPI_Transmit_DMA>
 8001192:	e012      	b.n	80011ba <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	b29a      	uxth	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	f004 fd08 	bl	8005bb6 <HAL_SPI_Transmit>
 80011a6:	4603      	mov	r3, r0
 80011a8:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6858      	ldr	r0, [r3, #4]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	8adb      	ldrh	r3, [r3, #22]
 80011b2:	2201      	movs	r2, #1
 80011b4:	4619      	mov	r1, r3
 80011b6:	f002 fcb5 	bl	8003b24 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	2101      	movs	r1, #1
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff7b 	bl	80010d4 <write_register>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	2b2c      	cmp	r3, #44	; 0x2c
 80011f8:	d801      	bhi.n	80011fe <set_OCP+0x16>
    imax = 45;
 80011fa:	232d      	movs	r3, #45	; 0x2d
 80011fc:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	2bf0      	cmp	r3, #240	; 0xf0
 8001202:	d901      	bls.n	8001208 <set_OCP+0x20>
    imax = 240;
 8001204:	23f0      	movs	r3, #240	; 0xf0
 8001206:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	2b81      	cmp	r3, #129	; 0x81
 800120c:	d809      	bhi.n	8001222 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 800120e:	78fb      	ldrb	r3, [r7, #3]
 8001210:	3b2d      	subs	r3, #45	; 0x2d
 8001212:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <set_OCP+0x68>)
 8001214:	fb82 1203 	smull	r1, r2, r2, r3
 8001218:	1052      	asrs	r2, r2, #1
 800121a:	17db      	asrs	r3, r3, #31
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e008      	b.n	8001234 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	331e      	adds	r3, #30
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <set_OCP+0x68>)
 8001228:	fb82 1203 	smull	r1, r2, r2, r3
 800122c:	1092      	asrs	r2, r2, #2
 800122e:	17db      	asrs	r3, r3, #31
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	210b      	movs	r1, #11
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff47 	bl	80010d4 <write_register>
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	66666667 	.word	0x66666667

08001254 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 800125c:	211d      	movs	r1, #29
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ff01 	bl	8001066 <read_register>
 8001264:	4603      	mov	r3, r0
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	b2db      	uxtb	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2200      	movs	r2, #0
 800126e:	461c      	mov	r4, r3
 8001270:	4615      	mov	r5, r2
 8001272:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8001276:	211e      	movs	r1, #30
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fef4 	bl	8001066 <read_register>
 800127e:	4603      	mov	r3, r0
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001284:	2304      	movs	r3, #4
 8001286:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2b0a      	cmp	r3, #10
 800128c:	d908      	bls.n	80012a0 <set_low_data_rate_optimization+0x4c>
 800128e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001292:	1fd1      	subs	r1, r2, #7
 8001294:	430b      	orrs	r3, r1
 8001296:	d103      	bne.n	80012a0 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001298:	7ffb      	ldrb	r3, [r7, #31]
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 80012a0:	7ffb      	ldrb	r3, [r7, #31]
 80012a2:	461a      	mov	r2, r3
 80012a4:	2126      	movs	r1, #38	; 0x26
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ff14 	bl	80010d4 <write_register>
}
 80012ac:	bf00      	nop
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bdb0      	pop	{r4, r5, r7, pc}

080012b4 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 80012bc:	2100      	movs	r1, #0
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ff7e 	bl	80011c0 <set_mode>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 80012d4:	2101      	movs	r1, #1
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff72 	bl	80011c0 <set_mode>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80012ec:	211d      	movs	r1, #29
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff feb9 	bl	8001066 <read_register>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	f023 0301 	bic.w	r3, r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	461a      	mov	r2, r3
 8001304:	211d      	movs	r1, #29
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fee4 	bl	80010d4 <write_register>
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10e      	bne.n	8001346 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	2b0f      	cmp	r3, #15
 800132c:	d901      	bls.n	8001332 <lora_set_tx_power+0x1e>
      level = 15;
 800132e:	230f      	movs	r3, #15
 8001330:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001338:	b2db      	uxtb	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	2109      	movs	r1, #9
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fec8 	bl	80010d4 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8001344:	e02e      	b.n	80013a4 <lora_set_tx_power+0x90>
    if (level > 20) {
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	2b14      	cmp	r3, #20
 800134a:	d901      	bls.n	8001350 <lora_set_tx_power+0x3c>
      level = 20;
 800134c:	2314      	movs	r3, #20
 800134e:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d801      	bhi.n	800135a <lora_set_tx_power+0x46>
      level = 2;
 8001356:	2302      	movs	r3, #2
 8001358:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	2b11      	cmp	r3, #17
 800135e:	d90c      	bls.n	800137a <lora_set_tx_power+0x66>
      level -= 3;
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	3b03      	subs	r3, #3
 8001364:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8001366:	2287      	movs	r2, #135	; 0x87
 8001368:	214d      	movs	r1, #77	; 0x4d
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff feb2 	bl	80010d4 <write_register>
      set_OCP(lora, 140);
 8001370:	218c      	movs	r1, #140	; 0x8c
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ff38 	bl	80011e8 <set_OCP>
 8001378:	e008      	b.n	800138c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800137a:	2284      	movs	r2, #132	; 0x84
 800137c:	214d      	movs	r1, #77	; 0x4d
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fea8 	bl	80010d4 <write_register>
      set_OCP(lora, 97);
 8001384:	2161      	movs	r1, #97	; 0x61
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff2e 	bl	80011e8 <set_OCP>
    level -= 2;
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	3b02      	subs	r3, #2
 8001390:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001398:	b2db      	uxtb	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	2109      	movs	r1, #9
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff fe98 	bl	80010d4 <write_register>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 80013b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013bc:	f04f 0000 	mov.w	r0, #0
 80013c0:	f04f 0100 	mov.w	r1, #0
 80013c4:	04d9      	lsls	r1, r3, #19
 80013c6:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80013ca:	04d0      	lsls	r0, r2, #19
 80013cc:	4a19      	ldr	r2, [pc, #100]	; (8001434 <lora_set_frequency+0x88>)
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	f7fe ff75 	bl	80002c0 <__aeabi_uldivmod>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80013de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	0c02      	lsrs	r2, r0, #16
 80013ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80013f0:	0c0b      	lsrs	r3, r1, #16
 80013f2:	b2d3      	uxtb	r3, r2
 80013f4:	461a      	mov	r2, r3
 80013f6:	2106      	movs	r1, #6
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f7ff fe6b 	bl	80010d4 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80013fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	0a02      	lsrs	r2, r0, #8
 800140c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001410:	0a0b      	lsrs	r3, r1, #8
 8001412:	b2d3      	uxtb	r3, r2
 8001414:	461a      	mov	r2, r3
 8001416:	2107      	movs	r1, #7
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f7ff fe5b 	bl	80010d4 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 800141e:	7c3b      	ldrb	r3, [r7, #16]
 8001420:	461a      	mov	r2, r3
 8001422:	2108      	movs	r1, #8
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f7ff fe55 	bl	80010d4 <write_register>
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	01e84800 	.word	0x01e84800

08001438 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	2b05      	cmp	r3, #5
 8001448:	d802      	bhi.n	8001450 <lora_set_spreading_factor+0x18>
    sf = 6;
 800144a:	2306      	movs	r3, #6
 800144c:	70fb      	strb	r3, [r7, #3]
 800144e:	e004      	b.n	800145a <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	2b0c      	cmp	r3, #12
 8001454:	d901      	bls.n	800145a <lora_set_spreading_factor+0x22>
    sf = 12;
 8001456:	230c      	movs	r3, #12
 8001458:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	2b06      	cmp	r3, #6
 800145e:	d10a      	bne.n	8001476 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8001460:	22c5      	movs	r2, #197	; 0xc5
 8001462:	2131      	movs	r1, #49	; 0x31
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fe35 	bl	80010d4 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 800146a:	220c      	movs	r2, #12
 800146c:	2137      	movs	r1, #55	; 0x37
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fe30 	bl	80010d4 <write_register>
 8001474:	e009      	b.n	800148a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8001476:	22c3      	movs	r2, #195	; 0xc3
 8001478:	2131      	movs	r1, #49	; 0x31
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fe2a 	bl	80010d4 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8001480:	220a      	movs	r2, #10
 8001482:	2137      	movs	r1, #55	; 0x37
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fe25 	bl	80010d4 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800148a:	211e      	movs	r1, #30
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fdea 	bl	8001066 <read_register>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]
  mc2 |= sf << 4;
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	b25a      	sxtb	r2, r3
 800149c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	461a      	mov	r2, r3
 80014aa:	211e      	movs	r1, #30
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fe11 	bl	80010d4 <write_register>

  set_low_data_rate_optimization(lora);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fece 	bl	8001254 <set_low_data_rate_optimization>
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	2120      	movs	r1, #32
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fdfb 	bl	80010d4 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	2121      	movs	r1, #33	; 0x21
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fdf1 	bl	80010d4 <write_register>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <lora_is_transmitting>:

  return read_register(lora, REG_VERSION);
}

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8001502:	2101      	movs	r1, #1
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fdae 	bl	8001066 <read_register>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b03      	cmp	r3, #3
 8001516:	d101      	bne.n	800151c <lora_is_transmitting+0x22>
 8001518:	2305      	movs	r3, #5
 800151a:	e000      	b.n	800151e <lora_is_transmitting+0x24>
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	4611      	mov	r1, r2
 8001532:	461a      	mov	r2, r3
 8001534:	460b      	mov	r3, r1
 8001536:	71fb      	strb	r3, [r7, #7]
 8001538:	4613      	mov	r3, r2
 800153a:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f7ff ffdc 	bl	80014fa <lora_is_transmitting>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8001548:	2305      	movs	r3, #5
 800154a:	e02a      	b.n	80015a2 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 800154c:	2101      	movs	r1, #1
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f7ff fe36 	bl	80011c0 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 f83a 	bl	80015ce <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	7d1b      	ldrb	r3, [r3, #20]
 800155e:	461a      	mov	r2, r3
 8001560:	210d      	movs	r1, #13
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff fdb6 	bl	80010d4 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	7d1b      	ldrb	r3, [r3, #20]
 800156c:	461a      	mov	r2, r3
 800156e:	210e      	movs	r1, #14
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f7ff fdaf 	bl	80010d4 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	461a      	mov	r2, r3
 800157a:	2122      	movs	r1, #34	; 0x22
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f7ff fda9 	bl	80010d4 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8001582:	79bb      	ldrb	r3, [r7, #6]
 8001584:	79fa      	ldrb	r2, [r7, #7]
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7ff fdd7 	bl	800113c <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <lora_send_packet_base+0x72>
    return LORA_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	e004      	b.n	80015a2 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8001598:	2103      	movs	r1, #3
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f7ff fe10 	bl	80011c0 <set_mode>
  return LORA_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	4613      	mov	r3, r2
 80015b6:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 80015b8:	79fa      	ldrb	r2, [r7, #7]
 80015ba:	2302      	movs	r3, #2
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f7ff ffb1 	bl	8001526 <lora_send_packet_base>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 80015d6:	2208      	movs	r2, #8
 80015d8:	2112      	movs	r1, #18
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fd7a 	bl	80010d4 <write_register>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	807b      	strh	r3, [r7, #2]

  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	887a      	ldrh	r2, [r7, #2]
 8001606:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8001608:	6a3a      	ldr	r2, [r7, #32]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2201      	movs	r2, #1
 8001612:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001626:	609a      	str	r2, [r3, #8]
    return LORA_ERROR;
  }
#endif

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fe43 	bl	80012b4 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f7ff fe40 	bl	80012b4 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8001634:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f7ff feb7 	bl	80013ac <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 800163e:	2107      	movs	r1, #7
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7ff fef9 	bl	8001438 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8001646:	210a      	movs	r1, #10
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff ff39 	bl	80014c0 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f7ff fe48 	bl	80012e4 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8001654:	210c      	movs	r1, #12
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f7ff fd05 	bl	8001066 <read_register>
 800165c:	4603      	mov	r3, r0
 800165e:	75fb      	strb	r3, [r7, #23]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	f043 0303 	orr.w	r3, r3, #3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	210c      	movs	r1, #12
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f7ff fd31 	bl	80010d4 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8001672:	2204      	movs	r2, #4
 8001674:	2126      	movs	r1, #38	; 0x26
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f7ff fd2c 	bl	80010d4 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 800167c:	2111      	movs	r1, #17
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7ff fe48 	bl	8001314 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff fe21 	bl	80012cc <lora_mode_standby>

  return LORA_OK;
 800168a:	2300      	movs	r3, #0

}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t timerVal;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim,0);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a31      	ldr	r2, [pc, #196]	; (8001780 <HAL_UART_RxCpltCallback+0xd0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d15b      	bne.n	8001778 <HAL_UART_RxCpltCallback+0xc8>
		char *string;
		memset(buffStr, 0, 2048);
 80016c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016c4:	2100      	movs	r1, #0
 80016c6:	482f      	ldr	r0, [pc, #188]	; (8001784 <HAL_UART_RxCpltCallback+0xd4>)
 80016c8:	f007 f8e4 	bl	8008894 <memset>
		sprintf(buffStr, "%s", GPS_buffer);
 80016cc:	4a2e      	ldr	r2, [pc, #184]	; (8001788 <HAL_UART_RxCpltCallback+0xd8>)
 80016ce:	492f      	ldr	r1, [pc, #188]	; (800178c <HAL_UART_RxCpltCallback+0xdc>)
 80016d0:	482c      	ldr	r0, [pc, #176]	; (8001784 <HAL_UART_RxCpltCallback+0xd4>)
 80016d2:	f007 f8e7 	bl	80088a4 <siprintf>
		string = strdup(buffStr);
 80016d6:	482b      	ldr	r0, [pc, #172]	; (8001784 <HAL_UART_RxCpltCallback+0xd4>)
 80016d8:	f007 f912 	bl	8008900 <strdup>
 80016dc:	4603      	mov	r3, r0
 80016de:	60fb      	str	r3, [r7, #12]

		char* token;
		while ((token = strsep(&string, "\n")) != NULL) {
 80016e0:	e03a      	b.n	8001758 <HAL_UART_RxCpltCallback+0xa8>
			memset(nmeaSnt, 0, 80);
 80016e2:	2250      	movs	r2, #80	; 0x50
 80016e4:	2100      	movs	r1, #0
 80016e6:	482a      	ldr	r0, [pc, #168]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 80016e8:	f007 f8d4 	bl	8008894 <memset>
			sprintf(nmeaSnt, "%s\n\r", token);
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	4929      	ldr	r1, [pc, #164]	; (8001794 <HAL_UART_RxCpltCallback+0xe4>)
 80016f0:	4827      	ldr	r0, [pc, #156]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 80016f2:	f007 f8d7 	bl	80088a4 <siprintf>
			if ((strstr(nmeaSnt, "$GPGLL") != 0) && strlen(nmeaSnt) > 48 && strlen(nmeaSnt) < 65) {
 80016f6:	4928      	ldr	r1, [pc, #160]	; (8001798 <HAL_UART_RxCpltCallback+0xe8>)
 80016f8:	4825      	ldr	r0, [pc, #148]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 80016fa:	f007 f923 	bl	8008944 <strstr>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d029      	beq.n	8001758 <HAL_UART_RxCpltCallback+0xa8>
 8001704:	4822      	ldr	r0, [pc, #136]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 8001706:	f7fe fd83 	bl	8000210 <strlen>
 800170a:	4603      	mov	r3, r0
 800170c:	2b30      	cmp	r3, #48	; 0x30
 800170e:	d923      	bls.n	8001758 <HAL_UART_RxCpltCallback+0xa8>
 8001710:	481f      	ldr	r0, [pc, #124]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 8001712:	f7fe fd7d 	bl	8000210 <strlen>
 8001716:	4603      	mov	r3, r0
 8001718:	2b40      	cmp	r3, #64	; 0x40
 800171a:	d81d      	bhi.n	8001758 <HAL_UART_RxCpltCallback+0xa8>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	2110      	movs	r1, #16
 8001720:	481e      	ldr	r0, [pc, #120]	; (800179c <HAL_UART_RxCpltCallback+0xec>)
 8001722:	f002 f9ff 	bl	8003b24 <HAL_GPIO_WritePin>
				//Raw Data
				char* GPSidx = strchr(nmeaSnt, '\n');
 8001726:	210a      	movs	r1, #10
 8001728:	4819      	ldr	r0, [pc, #100]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 800172a:	f007 f8db 	bl	80088e4 <strchr>
 800172e:	6138      	str	r0, [r7, #16]
				if (GPSidx){
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d004      	beq.n	8001740 <HAL_UART_RxCpltCallback+0x90>
					GPSidxint = GPSidx-nmeaSnt;
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4a15      	ldr	r2, [pc, #84]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 800173a:	1a9b      	subs	r3, r3, r2
 800173c:	4a18      	ldr	r2, [pc, #96]	; (80017a0 <HAL_UART_RxCpltCallback+0xf0>)
 800173e:	6013      	str	r3, [r2, #0]
				}
				memset(GPS_latest_data, 0, 65);
 8001740:	2241      	movs	r2, #65	; 0x41
 8001742:	2100      	movs	r1, #0
 8001744:	4817      	ldr	r0, [pc, #92]	; (80017a4 <HAL_UART_RxCpltCallback+0xf4>)
 8001746:	f007 f8a5 	bl	8008894 <memset>
				memcpy(GPS_latest_data, nmeaSnt, GPSidxint);
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_UART_RxCpltCallback+0xf0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	490f      	ldr	r1, [pc, #60]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 8001752:	4814      	ldr	r0, [pc, #80]	; (80017a4 <HAL_UART_RxCpltCallback+0xf4>)
 8001754:	f007 f890 	bl	8008878 <memcpy>
		while ((token = strsep(&string, "\n")) != NULL) {
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	4912      	ldr	r1, [pc, #72]	; (80017a8 <HAL_UART_RxCpltCallback+0xf8>)
 800175e:	4618      	mov	r0, r3
 8001760:	f007 f8eb 	bl	800893a <strsep>
 8001764:	6178      	str	r0, [r7, #20]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1ba      	bne.n	80016e2 <HAL_UART_RxCpltCallback+0x32>
			}
		}
		HAL_UART_Receive_DMA(&huart2, GPS_buffer, 2048);
 800176c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001770:	4905      	ldr	r1, [pc, #20]	; (8001788 <HAL_UART_RxCpltCallback+0xd8>)
 8001772:	4803      	ldr	r0, [pc, #12]	; (8001780 <HAL_UART_RxCpltCallback+0xd0>)
 8001774:	f005 ff37 	bl	80075e6 <HAL_UART_Receive_DMA>
	}
}
 8001778:	bf00      	nop
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000298 	.word	0x20000298
 8001784:	20003b6c 	.word	0x20003b6c
 8001788:	2000336c 	.word	0x2000336c
 800178c:	08009258 	.word	0x08009258
 8001790:	2000436c 	.word	0x2000436c
 8001794:	0800925c 	.word	0x0800925c
 8001798:	08009264 	.word	0x08009264
 800179c:	40021400 	.word	0x40021400
 80017a0:	20004400 	.word	0x20004400
 80017a4:	200043bc 	.word	0x200043bc
 80017a8:	0800926c 	.word	0x0800926c
 80017ac:	00000000 	.word	0x00000000

080017b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  _running = false;
 80017b6:	4b54      	ldr	r3, [pc, #336]	; (8001908 <main+0x158>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
  tail_mov = 1;
 80017bc:	4b53      	ldr	r3, [pc, #332]	; (800190c <main+0x15c>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]
  tail_full = 1;
 80017c2:	4b53      	ldr	r3, [pc, #332]	; (8001910 <main+0x160>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
  moving_sum = 0;
 80017c8:	4b52      	ldr	r3, [pc, #328]	; (8001914 <main+0x164>)
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
  moving_avg = 0;
 80017d0:	4b51      	ldr	r3, [pc, #324]	; (8001918 <main+0x168>)
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
  moving_sum_left = 0;
 80017d8:	4950      	ldr	r1, [pc, #320]	; (800191c <main+0x16c>)
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9c1 2300 	strd	r2, r3, [r1]
  moving_avg_left = 0;
 80017e6:	4b4e      	ldr	r3, [pc, #312]	; (8001920 <main+0x170>)
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
  moving_sum_right = 0;
 80017ee:	494d      	ldr	r1, [pc, #308]	; (8001924 <main+0x174>)
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	e9c1 2300 	strd	r2, r3, [r1]
  moving_avg_right = 0;
 80017fc:	4b4a      	ldr	r3, [pc, #296]	; (8001928 <main+0x178>)
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
  counter = 0;
 8001804:	4b49      	ldr	r3, [pc, #292]	; (800192c <main+0x17c>)
 8001806:	2200      	movs	r2, #0
 8001808:	801a      	strh	r2, [r3, #0]
  done = 0;
 800180a:	4b49      	ldr	r3, [pc, #292]	; (8001930 <main+0x180>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
  memset(circular_buf_mov, 0, MOVING_AVG_LEN*sizeof(int16_t));
 8001810:	220a      	movs	r2, #10
 8001812:	2100      	movs	r1, #0
 8001814:	4847      	ldr	r0, [pc, #284]	; (8001934 <main+0x184>)
 8001816:	f007 f83d 	bl	8008894 <memset>
  memset(circular_buf_mov_right, 0, MOVING_AVG_LEN*sizeof(int16_t));
 800181a:	220a      	movs	r2, #10
 800181c:	2100      	movs	r1, #0
 800181e:	4846      	ldr	r0, [pc, #280]	; (8001938 <main+0x188>)
 8001820:	f007 f838 	bl	8008894 <memset>
  memset(circular_buf_full, 0, SEND_LEN*sizeof(int16_t));
 8001824:	f241 32ec 	movw	r2, #5100	; 0x13ec
 8001828:	2100      	movs	r1, #0
 800182a:	4844      	ldr	r0, [pc, #272]	; (800193c <main+0x18c>)
 800182c:	f007 f832 	bl	8008894 <memset>
  memset(_sampleBuffer, 0, MIC_SAMPLES_PER_PACKET*2*sizeof(int32_t));
 8001830:	f44f 52dc 	mov.w	r2, #7040	; 0x1b80
 8001834:	2100      	movs	r1, #0
 8001836:	4842      	ldr	r0, [pc, #264]	; (8001940 <main+0x190>)
 8001838:	f007 f82c 	bl	8008894 <memset>
  arm_fir_init_f32(&S, FILTER_LEN, (float *) coeffs, buffer, blockSize);
 800183c:	4b41      	ldr	r3, [pc, #260]	; (8001944 <main+0x194>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <main+0x198>)
 8001844:	4a41      	ldr	r2, [pc, #260]	; (800194c <main+0x19c>)
 8001846:	2165      	movs	r1, #101	; 0x65
 8001848:	4841      	ldr	r0, [pc, #260]	; (8001950 <main+0x1a0>)
 800184a:	f7ff fbed 	bl	8001028 <arm_fir_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184e:	f001 fa2b 	bl	8002ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001852:	f000 f895 	bl	8001980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001856:	f000 fa6b 	bl	8001d30 <MX_GPIO_Init>
  MX_SPI1_Init();
 800185a:	f000 f94f 	bl	8001afc <MX_SPI1_Init>
  MX_TIM2_Init();
 800185e:	f000 f983 	bl	8001b68 <MX_TIM2_Init>
  MX_DMA_Init();
 8001862:	f000 fa27 	bl	8001cb4 <MX_DMA_Init>
  MX_SAI1_Init();
 8001866:	f000 f8ff 	bl	8001a68 <MX_SAI1_Init>
  MX_USART2_UART_Init();
 800186a:	f000 f9f9 	bl	8001c60 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800186e:	f000 f9cd 	bl	8001c0c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001872:	2108      	movs	r1, #8
 8001874:	4837      	ldr	r0, [pc, #220]	; (8001954 <main+0x1a4>)
 8001876:	f005 f863 	bl	8006940 <HAL_TIM_IC_Start_IT>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 800187a:	2201      	movs	r2, #1
 800187c:	2110      	movs	r1, #16
 800187e:	4836      	ldr	r0, [pc, #216]	; (8001958 <main+0x1a8>)
 8001880:	f002 f950 	bl	8003b24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 8001884:	2201      	movs	r2, #1
 8001886:	2108      	movs	r1, #8
 8001888:	4833      	ldr	r0, [pc, #204]	; (8001958 <main+0x1a8>)
 800188a:	f002 f94b 	bl	8003b24 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET);
 800188e:	2201      	movs	r2, #1
 8001890:	2120      	movs	r1, #32
 8001892:	4831      	ldr	r0, [pc, #196]	; (8001958 <main+0x1a8>)
 8001894:	f002 f946 	bl	8003b24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	2120      	movs	r1, #32
 800189c:	482f      	ldr	r0, [pc, #188]	; (800195c <main+0x1ac>)
 800189e:	f002 f941 	bl	8003b24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018a8:	482d      	ldr	r0, [pc, #180]	; (8001960 <main+0x1b0>)
 80018aa:	f002 f93b 	bl	8003b24 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80018ae:	2064      	movs	r0, #100	; 0x64
 80018b0:	f001 fa6c 	bl	8002d8c <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ba:	4829      	ldr	r0, [pc, #164]	; (8001960 <main+0x1b0>)
 80018bc:	f002 f932 	bl	8003b24 <HAL_GPIO_WritePin>
  HAL_UART_Receive_DMA(&huart2, GPS_buffer, 2048);
 80018c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018c4:	4927      	ldr	r1, [pc, #156]	; (8001964 <main+0x1b4>)
 80018c6:	4828      	ldr	r0, [pc, #160]	; (8001968 <main+0x1b8>)
 80018c8:	f005 fe8d 	bl	80075e6 <HAL_UART_Receive_DMA>

#if LORA_TRANSMIT
  uint8_t res = lora_init(&lora, &hspi1, NSS_GPIO_Port, NSS_Pin, LORA_BASE_FREQUENCY_US);
 80018cc:	a30c      	add	r3, pc, #48	; (adr r3, 8001900 <main+0x150>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	e9cd 2300 	strd	r2, r3, [sp]
 80018d6:	2310      	movs	r3, #16
 80018d8:	4a24      	ldr	r2, [pc, #144]	; (800196c <main+0x1bc>)
 80018da:	4925      	ldr	r1, [pc, #148]	; (8001970 <main+0x1c0>)
 80018dc:	4825      	ldr	r0, [pc, #148]	; (8001974 <main+0x1c4>)
 80018de:	f7ff fe83 	bl	80015e8 <lora_init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  if (res != LORA_OK) {
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <main+0x14a>
	  HAL_UART_Transmit(&huart1, iterfacing_failed, sizeof(iterfacing_failed), 1000);
 80018ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f0:	2213      	movs	r2, #19
 80018f2:	4921      	ldr	r1, [pc, #132]	; (8001978 <main+0x1c8>)
 80018f4:	4821      	ldr	r0, [pc, #132]	; (800197c <main+0x1cc>)
 80018f6:	f005 fde4 	bl	80074c2 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80018fa:	e7fe      	b.n	80018fa <main+0x14a>
 80018fc:	f3af 8000 	nop.w
 8001900:	3689cac0 	.word	0x3689cac0
 8001904:	00000000 	.word	0x00000000
 8001908:	2000334c 	.word	0x2000334c
 800190c:	20001f34 	.word	0x20001f34
 8001910:	20003324 	.word	0x20003324
 8001914:	20003328 	.word	0x20003328
 8001918:	2000332c 	.word	0x2000332c
 800191c:	20003330 	.word	0x20003330
 8001920:	20003338 	.word	0x20003338
 8001924:	20003340 	.word	0x20003340
 8001928:	20003348 	.word	0x20003348
 800192c:	2000334e 	.word	0x2000334e
 8001930:	20003350 	.word	0x20003350
 8001934:	20001f1c 	.word	0x20001f1c
 8001938:	20001f28 	.word	0x20001f28
 800193c:	20001f38 	.word	0x20001f38
 8001940:	2000039c 	.word	0x2000039c
 8001944:	2000003c 	.word	0x2000003c
 8001948:	20004410 	.word	0x20004410
 800194c:	08009270 	.word	0x08009270
 8001950:	20004404 	.word	0x20004404
 8001954:	2000020c 	.word	0x2000020c
 8001958:	40021400 	.word	0x40021400
 800195c:	40021800 	.word	0x40021800
 8001960:	40020c00 	.word	0x40020c00
 8001964:	2000336c 	.word	0x2000336c
 8001968:	20000298 	.word	0x20000298
 800196c:	40020000 	.word	0x40020000
 8001970:	200001b4 	.word	0x200001b4
 8001974:	20003354 	.word	0x20003354
 8001978:	20000010 	.word	0x20000010
 800197c:	20000254 	.word	0x20000254

08001980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b094      	sub	sp, #80	; 0x50
 8001984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	2234      	movs	r2, #52	; 0x34
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f006 ff80 	bl	8008894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001994:	f107 0308 	add.w	r3, r7, #8
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <SystemClock_Config+0xe0>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	4a2c      	ldr	r2, [pc, #176]	; (8001a60 <SystemClock_Config+0xe0>)
 80019ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b2:	6413      	str	r3, [r2, #64]	; 0x40
 80019b4:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <SystemClock_Config+0xe0>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c0:	2300      	movs	r3, #0
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <SystemClock_Config+0xe4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <SystemClock_Config+0xe4>)
 80019ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <SystemClock_Config+0xe4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019dc:	2302      	movs	r3, #2
 80019de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e0:	2301      	movs	r3, #1
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019e4:	2310      	movs	r3, #16
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e8:	2302      	movs	r3, #2
 80019ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019ec:	2300      	movs	r3, #0
 80019ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80019f0:	2310      	movs	r3, #16
 80019f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80019f4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80019f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019fa:	2304      	movs	r3, #4
 80019fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019fe:	2302      	movs	r3, #2
 8001a00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a02:	2302      	movs	r3, #2
 8001a04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f003 f944 	bl	8004c98 <HAL_RCC_OscConfig>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a16:	f000 fdf7 	bl	8002608 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a1a:	f002 f8b7 	bl	8003b8c <HAL_PWREx_EnableOverDrive>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001a24:	f000 fdf0 	bl	8002608 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a28:	230f      	movs	r3, #15
 8001a2a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	2105      	movs	r1, #5
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 f8f0 	bl	8003c2c <HAL_RCC_ClockConfig>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001a52:	f000 fdd9 	bl	8002608 <Error_Handler>
  }
}
 8001a56:	bf00      	nop
 8001a58:	3750      	adds	r7, #80	; 0x50
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40007000 	.word	0x40007000

08001a68 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <MX_SAI1_Init+0x84>)
 8001a6e:	4a20      	ldr	r2, [pc, #128]	; (8001af0 <MX_SAI1_Init+0x88>)
 8001a70:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <MX_SAI1_Init+0x84>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001a78:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <MX_SAI1_Init+0x84>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <MX_SAI1_Init+0x84>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <MX_SAI1_Init+0x84>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <MX_SAI1_Init+0x84>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <MX_SAI1_Init+0x84>)
 8001a92:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a96:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <MX_SAI1_Init+0x84>)
 8001a9a:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001a9e:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <MX_SAI1_Init+0x84>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_SAI1_Init+0x84>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <MX_SAI1_Init+0x84>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <MX_SAI1_Init+0x84>)
 8001aba:	f003 fb8b 	bl	80051d4 <HAL_SAI_InitProtocol>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8001ac4:	f000 fda0 	bl	8002608 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  if ((HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*) _sampleBuffer, MIC_SAMPLES_PER_PACKET * 2)) == HAL_OK) {
 8001ac8:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001acc:	4909      	ldr	r1, [pc, #36]	; (8001af4 <MX_SAI1_Init+0x8c>)
 8001ace:	4807      	ldr	r0, [pc, #28]	; (8001aec <MX_SAI1_Init+0x84>)
 8001ad0:	f003 fcdc 	bl	800548c <HAL_SAI_Receive_DMA>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <MX_SAI1_Init+0x80>
	  HAL_Delay(1000);
 8001ada:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ade:	f001 f955 	bl	8002d8c <HAL_Delay>
	  _running = true;
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <MX_SAI1_Init+0x90>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END SAI1_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200000cc 	.word	0x200000cc
 8001af0:	40015824 	.word	0x40015824
 8001af4:	2000039c 	.word	0x2000039c
 8001af8:	2000334c 	.word	0x2000334c

08001afc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b02:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <MX_SPI1_Init+0x68>)
 8001b04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b30:	2238      	movs	r2, #56	; 0x38
 8001b32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b48:	220a      	movs	r2, #10
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_SPI1_Init+0x64>)
 8001b4e:	f003 ffa9 	bl	8005aa4 <HAL_SPI_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b58:	f000 fd56 	bl	8002608 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200001b4 	.word	0x200001b4
 8001b64:	40013000 	.word	0x40013000

08001b68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6e:	f107 0310 	add.w	r3, r7, #16
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b78:	463b      	mov	r3, r7
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b84:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <MX_TIM2_Init+0xa0>)
 8001b86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b8c:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <MX_TIM2_Init+0xa0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <MX_TIM2_Init+0xa0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <MX_TIM2_Init+0xa0>)
 8001b9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <MX_TIM2_Init+0xa0>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <MX_TIM2_Init+0xa0>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001bac:	4816      	ldr	r0, [pc, #88]	; (8001c08 <MX_TIM2_Init+0xa0>)
 8001bae:	f004 fe77 	bl	80068a0 <HAL_TIM_IC_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bb8:	f000 fd26 	bl	8002608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480f      	ldr	r0, [pc, #60]	; (8001c08 <MX_TIM2_Init+0xa0>)
 8001bcc:	f005 fb9c 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bd6:	f000 fd17 	bl	8002608 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bde:	2301      	movs	r3, #1
 8001be0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001bea:	463b      	mov	r3, r7
 8001bec:	2208      	movs	r2, #8
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_TIM2_Init+0xa0>)
 8001bf2:	f005 f8d5 	bl	8006da0 <HAL_TIM_IC_ConfigChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001bfc:	f000 fd04 	bl	8002608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	2000020c 	.word	0x2000020c

08001c0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <MX_USART1_UART_Init+0x50>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c44:	f005 fbf0 	bl	8007428 <HAL_UART_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c4e:	f000 fcdb 	bl	8002608 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000254 	.word	0x20000254
 8001c5c:	40011000 	.word	0x40011000

08001c60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <MX_USART2_UART_Init+0x50>)
 8001c68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c86:	220c      	movs	r2, #12
 8001c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c98:	f005 fbc6 	bl	8007428 <HAL_UART_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ca2:	f000 fcb1 	bl	8002608 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000298 	.word	0x20000298
 8001cb0:	40004400 	.word	0x40004400

08001cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <MX_DMA_Init+0x78>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a1a      	ldr	r2, [pc, #104]	; (8001d2c <MX_DMA_Init+0x78>)
 8001cc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <MX_DMA_Init+0x78>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_DMA_Init+0x78>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a13      	ldr	r2, [pc, #76]	; (8001d2c <MX_DMA_Init+0x78>)
 8001ce0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_DMA_Init+0x78>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2010      	movs	r0, #16
 8001cf8:	f001 f947 	bl	8002f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001cfc:	2010      	movs	r0, #16
 8001cfe:	f001 f960 	bl	8002fc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	203c      	movs	r0, #60	; 0x3c
 8001d08:	f001 f93f 	bl	8002f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001d0c:	203c      	movs	r0, #60	; 0x3c
 8001d0e:	f001 f958 	bl	8002fc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	2046      	movs	r0, #70	; 0x46
 8001d18:	f001 f937 	bl	8002f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001d1c:	2046      	movs	r0, #70	; 0x46
 8001d1e:	f001 f950 	bl	8002fc2 <HAL_NVIC_EnableIRQ>

}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800

08001d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08c      	sub	sp, #48	; 0x30
 8001d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d36:	f107 031c 	add.w	r3, r7, #28
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a58      	ldr	r2, [pc, #352]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001d50:	f043 0310 	orr.w	r3, r3, #16
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b56      	ldr	r3, [pc, #344]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	61bb      	str	r3, [r7, #24]
 8001d60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	4b52      	ldr	r3, [pc, #328]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a51      	ldr	r2, [pc, #324]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a4a      	ldr	r2, [pc, #296]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001d88:	f043 0320 	orr.w	r3, r3, #32
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0320 	and.w	r3, r3, #32
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b44      	ldr	r3, [pc, #272]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a43      	ldr	r2, [pc, #268]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a3c      	ldr	r2, [pc, #240]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a35      	ldr	r2, [pc, #212]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b33      	ldr	r3, [pc, #204]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a2e      	ldr	r2, [pc, #184]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <MX_GPIO_Init+0x180>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2138      	movs	r1, #56	; 0x38
 8001e0e:	4829      	ldr	r0, [pc, #164]	; (8001eb4 <MX_GPIO_Init+0x184>)
 8001e10:	f001 fe88 	bl	8003b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2110      	movs	r1, #16
 8001e18:	4827      	ldr	r0, [pc, #156]	; (8001eb8 <MX_GPIO_Init+0x188>)
 8001e1a:	f001 fe83 	bl	8003b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e24:	4825      	ldr	r0, [pc, #148]	; (8001ebc <MX_GPIO_Init+0x18c>)
 8001e26:	f001 fe7d 	bl	8003b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2120      	movs	r1, #32
 8001e2e:	4824      	ldr	r0, [pc, #144]	; (8001ec0 <MX_GPIO_Init+0x190>)
 8001e30:	f001 fe78 	bl	8003b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF3 PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e34:	2338      	movs	r3, #56	; 0x38
 8001e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	481a      	ldr	r0, [pc, #104]	; (8001eb4 <MX_GPIO_Init+0x184>)
 8001e4c:	f001 fcd6 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8001e50:	2310      	movs	r3, #16
 8001e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	4619      	mov	r1, r3
 8001e66:	4814      	ldr	r0, [pc, #80]	; (8001eb8 <MX_GPIO_Init+0x188>)
 8001e68:	f001 fcc8 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001e7e:	f107 031c 	add.w	r3, r7, #28
 8001e82:	4619      	mov	r1, r3
 8001e84:	480d      	ldr	r0, [pc, #52]	; (8001ebc <MX_GPIO_Init+0x18c>)
 8001e86:	f001 fcb9 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2300      	movs	r3, #0
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4807      	ldr	r0, [pc, #28]	; (8001ec0 <MX_GPIO_Init+0x190>)
 8001ea2:	f001 fcab 	bl	80037fc <HAL_GPIO_Init>

}
 8001ea6:	bf00      	nop
 8001ea8:	3730      	adds	r7, #48	; 0x30
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40021400 	.word	0x40021400
 8001eb8:	40020000 	.word	0x40020000
 8001ebc:	40020c00 	.word	0x40020c00
 8001ec0:	40021800 	.word	0x40021800

08001ec4 <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	sendData(_sampleBuffer);
 8001ecc:	4803      	ldr	r0, [pc, #12]	; (8001edc <HAL_SAI_RxHalfCpltCallback+0x18>)
 8001ece:	f000 f815 	bl	8001efc <sendData>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	2000039c 	.word	0x2000039c

08001ee0 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	sendData(&_sampleBuffer[MIC_SAMPLES_PER_PACKET]);
 8001ee8:	4803      	ldr	r0, [pc, #12]	; (8001ef8 <HAL_SAI_RxCpltCallback+0x18>)
 8001eea:	f000 f807 	bl	8001efc <sendData>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000115c 	.word	0x2000115c

08001efc <sendData>:

void sendData(volatile int32_t *data_in) {
 8001efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f00:	f5ad 5d07 	sub.w	sp, sp, #8640	; 0x21c0
 8001f04:	b089      	sub	sp, #36	; 0x24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001f0c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f10:	6018      	str	r0, [r3, #0]

	float data_in_float[MIC_SAMPLES_PER_PACKET / 2];
	float filt[MIC_SAMPLES_PER_PACKET / 2];
	volatile int32_t *data_in_tmp = data_in;
 8001f12:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001f16:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001f20:	f102 0214 	add.w	r2, r2, #20
 8001f24:	6013      	str	r3, [r2, #0]
	for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8001f26:	2300      	movs	r3, #0
 8001f28:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001f2c:	f102 0218 	add.w	r2, r2, #24
 8001f30:	8013      	strh	r3, [r2, #0]
 8001f32:	e03a      	b.n	8001faa <sendData+0xae>
		int16_t tmp = (int16_t) ((data_in_tmp[0]>>8) & 0xffff);
 8001f34:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001f38:	f103 0314 	add.w	r3, r3, #20
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	121b      	asrs	r3, r3, #8
 8001f42:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001f46:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8001f4a:	8013      	strh	r3, [r2, #0]
		data_in_float[i] = (float) tmp;
 8001f4c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001f50:	f103 0318 	add.w	r3, r3, #24
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001f5a:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8001f5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f62:	ee07 2a90 	vmov	s15, r2
 8001f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f6a:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001f6e:	f102 0220 	add.w	r2, r2, #32
 8001f72:	f2a2 7204 	subw	r2, r2, #1796	; 0x704
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	edc3 7a00 	vstr	s15, [r3]
		data_in_tmp += 2;
 8001f7e:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001f82:	f103 0314 	add.w	r3, r3, #20
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	3308      	adds	r3, #8
 8001f8a:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001f8e:	f102 0214 	add.w	r2, r2, #20
 8001f92:	6013      	str	r3, [r2, #0]
	for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8001f94:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001f98:	f103 0318 	add.w	r3, r3, #24
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001fa4:	f102 0218 	add.w	r2, r2, #24
 8001fa8:	8013      	strh	r3, [r2, #0]
 8001faa:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001fae:	f103 0318 	add.w	r3, r3, #24
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8001fb8:	d3bc      	bcc.n	8001f34 <sendData+0x38>
	}
	arm_fir_f32(&S, data_in_float, filt, blockSize);
 8001fba:	4bc4      	ldr	r3, [pc, #784]	; (80022cc <sendData+0x3d0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8001fc2:	f102 021c 	add.w	r2, r2, #28
 8001fc6:	f507 51d6 	add.w	r1, r7, #6848	; 0x1ac0
 8001fca:	f101 011c 	add.w	r1, r1, #28
 8001fce:	48c0      	ldr	r0, [pc, #768]	; (80022d0 <sendData+0x3d4>)
 8001fd0:	f7fe faf8 	bl	80005c4 <arm_fir_f32>


	if (_running) {
 8001fd4:	4bbf      	ldr	r3, [pc, #764]	; (80022d4 <sendData+0x3d8>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 82de 	beq.w	800259a <sendData+0x69e>
		for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001fe4:	f102 021a 	add.w	r2, r2, #26
 8001fe8:	8013      	strh	r3, [r2, #0]
 8001fea:	e2cd      	b.n	8002588 <sendData+0x68c>

			moving_sum += (int16_t) fabsf(filt[i]); // * abs(sample_right);
 8001fec:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001ff0:	f103 031a 	add.w	r3, r3, #26
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001ffa:	f102 0220 	add.w	r2, r2, #32
 8001ffe:	f6a2 52e4 	subw	r2, r2, #3556	; 0xde4
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	eef0 7ae7 	vabs.f32	s15, s15
 800200e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002012:	ee17 3a90 	vmov	r3, s15
 8002016:	b21b      	sxth	r3, r3
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002020:	4bad      	ldr	r3, [pc, #692]	; (80022d8 <sendData+0x3dc>)
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202a:	4bab      	ldr	r3, [pc, #684]	; (80022d8 <sendData+0x3dc>)
 800202c:	edc3 7a00 	vstr	s15, [r3]
			moving_sum -= (int16_t) abs(circular_buf_mov[tail_mov]); // * abs(circular_buf_mov_right[tail_mov]);
 8002030:	4ba9      	ldr	r3, [pc, #676]	; (80022d8 <sendData+0x3dc>)
 8002032:	ed93 7a00 	vldr	s14, [r3]
 8002036:	4ba9      	ldr	r3, [pc, #676]	; (80022dc <sendData+0x3e0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4aa9      	ldr	r2, [pc, #676]	; (80022e0 <sendData+0x3e4>)
 800203c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002040:	2b00      	cmp	r3, #0
 8002042:	bfb8      	it	lt
 8002044:	425b      	neglt	r3, r3
 8002046:	b29b      	uxth	r3, r3
 8002048:	b21b      	sxth	r3, r3
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002056:	4ba0      	ldr	r3, [pc, #640]	; (80022d8 <sendData+0x3dc>)
 8002058:	edc3 7a00 	vstr	s15, [r3]
			circular_buf_mov[tail_mov] = (int16_t) filt[i];
 800205c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002060:	f103 031a 	add.w	r3, r3, #26
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 800206a:	f102 0220 	add.w	r2, r2, #32
 800206e:	f6a2 52e4 	subw	r2, r2, #3556	; 0xde4
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	edd3 7a00 	vldr	s15, [r3]
 800207a:	4b98      	ldr	r3, [pc, #608]	; (80022dc <sendData+0x3e0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002082:	ee17 2a90 	vmov	r2, s15
 8002086:	b211      	sxth	r1, r2
 8002088:	4a95      	ldr	r2, [pc, #596]	; (80022e0 <sendData+0x3e4>)
 800208a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			circular_buf_full[tail_full] = (int16_t) filt[i];
 800208e:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002092:	f103 031a 	add.w	r3, r3, #26
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 800209c:	f102 0220 	add.w	r2, r2, #32
 80020a0:	f6a2 52e4 	subw	r2, r2, #3556	; 0xde4
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	4b8d      	ldr	r3, [pc, #564]	; (80022e4 <sendData+0x3e8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020b4:	ee17 2a90 	vmov	r2, s15
 80020b8:	b211      	sxth	r1, r2
 80020ba:	4a8b      	ldr	r2, [pc, #556]	; (80022e8 <sendData+0x3ec>)
 80020bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			moving_avg = moving_sum / MOVING_AVG_LEN;
 80020c0:	4b85      	ldr	r3, [pc, #532]	; (80022d8 <sendData+0x3dc>)
 80020c2:	ed93 7a00 	vldr	s14, [r3]
 80020c6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80020ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ce:	4b87      	ldr	r3, [pc, #540]	; (80022ec <sendData+0x3f0>)
 80020d0:	edc3 7a00 	vstr	s15, [r3]

			if ((counter > 0) && (!done)){
 80020d4:	4b86      	ldr	r3, [pc, #536]	; (80022f0 <sendData+0x3f4>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8202 	beq.w	80024e2 <sendData+0x5e6>
 80020de:	4b85      	ldr	r3, [pc, #532]	; (80022f4 <sendData+0x3f8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f040 81fd 	bne.w	80024e2 <sendData+0x5e6>
				counter++;
 80020e8:	4b81      	ldr	r3, [pc, #516]	; (80022f0 <sendData+0x3f4>)
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	3301      	adds	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	4b7f      	ldr	r3, [pc, #508]	; (80022f0 <sendData+0x3f4>)
 80020f2:	801a      	strh	r2, [r3, #0]
				if (counter == (SEND_LEN/2)){ // TODO: need to change this to SEND_LEN-100;
 80020f4:	4b7e      	ldr	r3, [pc, #504]	; (80022f0 <sendData+0x3f4>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	f240 42fb 	movw	r2, #1275	; 0x4fb
 80020fc:	4293      	cmp	r3, r2
 80020fe:	f040 81f0 	bne.w	80024e2 <sendData+0x5e6>

					for(int delay = 0; delay < NODE_DELAY; delay++); // non-blocking delay used to offset the transmissions of each node to prevent garbled transmissions
 8002102:	2300      	movs	r3, #0
 8002104:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002108:	f102 021c 	add.w	r2, r2, #28
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e00a      	b.n	8002126 <sendData+0x22a>
 8002110:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002114:	f103 031c 	add.w	r3, r3, #28
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3301      	adds	r3, #1
 800211c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002120:	f102 021c 	add.w	r2, r2, #28
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800212a:	f103 031c 	add.w	r3, r3, #28
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a71      	ldr	r2, [pc, #452]	; (80022f8 <sendData+0x3fc>)
 8002132:	4293      	cmp	r3, r2
 8002134:	ddec      	ble.n	8002110 <sendData+0x214>

					uint8_t GPS_data_len = (uint8_t) GPSidxint; //strlen((char *) GPS_latest_data);
 8002136:	4b71      	ldr	r3, [pc, #452]	; (80022fc <sendData+0x400>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 800213e:	f102 020b 	add.w	r2, r2, #11
 8002142:	7013      	strb	r3, [r2, #0]
					uint8_t metaData[16+GPS_data_len];
 8002144:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002148:	f103 030b 	add.w	r3, r3, #11
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	f103 0110 	add.w	r1, r3, #16
 8002152:	466b      	mov	r3, sp
 8002154:	461e      	mov	r6, r3
 8002156:	1e4b      	subs	r3, r1, #1
 8002158:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 800215c:	f102 0204 	add.w	r2, r2, #4
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	460a      	mov	r2, r1
 8002164:	2300      	movs	r3, #0
 8002166:	4614      	mov	r4, r2
 8002168:	461d      	mov	r5, r3
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	00eb      	lsls	r3, r5, #3
 8002174:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002178:	00e2      	lsls	r2, r4, #3
 800217a:	460a      	mov	r2, r1
 800217c:	2300      	movs	r3, #0
 800217e:	4690      	mov	r8, r2
 8002180:	4699      	mov	r9, r3
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800218e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002196:	460b      	mov	r3, r1
 8002198:	3307      	adds	r3, #7
 800219a:	08db      	lsrs	r3, r3, #3
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	ebad 0d03 	sub.w	sp, sp, r3
 80021a2:	466b      	mov	r3, sp
 80021a4:	3300      	adds	r3, #0
 80021a6:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b54      	ldr	r3, [pc, #336]	; (8002300 <sendData+0x404>)
 80021ae:	681a      	ldr	r2, [r3, #0]
					memcpy(metaData, &startPadding, 4);
 80021b0:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	601a      	str	r2, [r3, #0]
					memcpy(metaData+4, &timerVal, 4);
 80021b8:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3304      	adds	r3, #4
 80021c0:	4a50      	ldr	r2, [pc, #320]	; (8002304 <sendData+0x408>)
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	601a      	str	r2, [r3, #0]
					memcpy(metaData+8, &devID, 4);
 80021c6:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	3308      	adds	r3, #8
 80021ce:	4a4e      	ldr	r2, [pc, #312]	; (8002308 <sendData+0x40c>)
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	601a      	str	r2, [r3, #0]
					memcpy(metaData+12, GPS_latest_data, GPS_data_len);
 80021d4:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	330c      	adds	r3, #12
 80021dc:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 80021e0:	f102 020b 	add.w	r2, r2, #11
 80021e4:	7812      	ldrb	r2, [r2, #0]
 80021e6:	4949      	ldr	r1, [pc, #292]	; (800230c <sendData+0x410>)
 80021e8:	4618      	mov	r0, r3
 80021ea:	f006 fb45 	bl	8008878 <memcpy>
					memcpy(metaData+12+GPS_data_len, &endMetaPadding, 4);
 80021ee:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80021f2:	f103 030b 	add.w	r3, r3, #11
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	330c      	adds	r3, #12
 80021fa:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	4413      	add	r3, r2
 8002202:	4a43      	ldr	r2, [pc, #268]	; (8002310 <sendData+0x414>)
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	601a      	str	r2, [r3, #0]

					uint8_t sendBuf[SEND_LEN*2];
					memcpy(sendBuf, &circular_buf_full[tail_full], ((SEND_LEN)-tail_full)*2);
 8002208:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <sendData+0x3e8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4a36      	ldr	r2, [pc, #216]	; (80022e8 <sendData+0x3ec>)
 8002210:	1899      	adds	r1, r3, r2
 8002212:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <sendData+0x3e8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f5c3 631f 	rsb	r3, r3, #2544	; 0x9f0
 800221a:	3306      	adds	r3, #6
 800221c:	005a      	lsls	r2, r3, #1
 800221e:	f107 0320 	add.w	r3, r7, #32
 8002222:	3b14      	subs	r3, #20
 8002224:	4618      	mov	r0, r3
 8002226:	f006 fb27 	bl	8008878 <memcpy>
					memcpy(&sendBuf[(SEND_LEN-tail_full)*2], circular_buf_full, tail_full*2);
 800222a:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <sendData+0x3e8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f5c3 631f 	rsb	r3, r3, #2544	; 0x9f0
 8002232:	3306      	adds	r3, #6
 8002234:	005a      	lsls	r2, r3, #1
 8002236:	f107 0320 	add.w	r3, r7, #32
 800223a:	3b14      	subs	r3, #20
 800223c:	1898      	adds	r0, r3, r2
 800223e:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <sendData+0x3e8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	461a      	mov	r2, r3
 8002246:	4928      	ldr	r1, [pc, #160]	; (80022e8 <sendData+0x3ec>)
 8002248:	f006 fb16 	bl	8008878 <memcpy>

#if LORA_TRANSMIT
					uint8_t packet_res = lora_send_packet(&lora, metaData, 16+GPS_data_len);
 800224c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002250:	f103 030b 	add.w	r3, r3, #11
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	3310      	adds	r3, #16
 8002258:	b2db      	uxtb	r3, r3
 800225a:	461a      	mov	r2, r3
 800225c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002260:	6819      	ldr	r1, [r3, #0]
 8002262:	482c      	ldr	r0, [pc, #176]	; (8002314 <sendData+0x418>)
 8002264:	f7ff f9a1 	bl	80015aa <lora_send_packet>
 8002268:	4603      	mov	r3, r0
 800226a:	461a      	mov	r2, r3
 800226c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002270:	f103 0320 	add.w	r3, r3, #32
 8002274:	f6a3 53e5 	subw	r3, r3, #3557	; 0xde5
 8002278:	701a      	strb	r2, [r3, #0]

					if (packet_res != LORA_OK) {
 800227a:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800227e:	f103 0320 	add.w	r3, r3, #32
 8002282:	f6a3 53e5 	subw	r3, r3, #3557	; 0xde5
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <sendData+0x3a6>
						HAL_UART_Transmit(&huart1, &packet_res, sizeof(packet_res), 1000);
 800228c:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8002290:	f101 011b 	add.w	r1, r1, #27
 8002294:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002298:	2201      	movs	r2, #1
 800229a:	481f      	ldr	r0, [pc, #124]	; (8002318 <sendData+0x41c>)
 800229c:	f005 f911 	bl	80074c2 <HAL_UART_Transmit>
 80022a0:	e006      	b.n	80022b0 <sendData+0x3b4>
					}
					else {
						HAL_UART_Transmit(&huart1, transmission_success, sizeof(transmission_success), 1000);
 80022a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a6:	2215      	movs	r2, #21
 80022a8:	491c      	ldr	r1, [pc, #112]	; (800231c <sendData+0x420>)
 80022aa:	481b      	ldr	r0, [pc, #108]	; (8002318 <sendData+0x41c>)
 80022ac:	f005 f909 	bl	80074c2 <HAL_UART_Transmit>
					}

					while(lora_is_transmitting(&lora)); // non-blocking delay
 80022b0:	bf00      	nop
 80022b2:	4818      	ldr	r0, [pc, #96]	; (8002314 <sendData+0x418>)
 80022b4:	f7ff f921 	bl	80014fa <lora_is_transmitting>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f9      	bne.n	80022b2 <sendData+0x3b6>
					HAL_UART_Transmit(&huart1, (uint8_t*) sendBuf, SEND_LEN*2, 1000);
#endif

#if LORA_TRANSMIT

					for(int send_loop_cnt = 0; send_loop_cnt < ((SEND_LEN*2)/255 + ((SEND_LEN*2) % 255 != 0)); send_loop_cnt++){
 80022be:	2300      	movs	r3, #0
 80022c0:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 80022c4:	f102 0210 	add.w	r2, r2, #16
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e075      	b.n	80023b8 <sendData+0x4bc>
 80022cc:	2000003c 	.word	0x2000003c
 80022d0:	20004404 	.word	0x20004404
 80022d4:	2000334c 	.word	0x2000334c
 80022d8:	20003328 	.word	0x20003328
 80022dc:	20001f34 	.word	0x20001f34
 80022e0:	20001f1c 	.word	0x20001f1c
 80022e4:	20003324 	.word	0x20003324
 80022e8:	20001f38 	.word	0x20001f38
 80022ec:	2000332c 	.word	0x2000332c
 80022f0:	2000334e 	.word	0x2000334e
 80022f4:	20003350 	.word	0x20003350
 80022f8:	05f5e0ff 	.word	0x05f5e0ff
 80022fc:	20004400 	.word	0x20004400
 8002300:	20000004 	.word	0x20000004
 8002304:	20004c80 	.word	0x20004c80
 8002308:	20000000 	.word	0x20000000
 800230c:	200043bc 	.word	0x200043bc
 8002310:	20000008 	.word	0x20000008
 8002314:	20003354 	.word	0x20003354
 8002318:	20000254 	.word	0x20000254
 800231c:	20000024 	.word	0x20000024
						packet_res = lora_send_packet(&lora, sendBuf+(255*send_loop_cnt), 255);
 8002320:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002324:	f103 0310 	add.w	r3, r3, #16
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4613      	mov	r3, r2
 800232c:	021b      	lsls	r3, r3, #8
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	461a      	mov	r2, r3
 8002332:	f107 0320 	add.w	r3, r7, #32
 8002336:	3b14      	subs	r3, #20
 8002338:	4413      	add	r3, r2
 800233a:	22ff      	movs	r2, #255	; 0xff
 800233c:	4619      	mov	r1, r3
 800233e:	489a      	ldr	r0, [pc, #616]	; (80025a8 <sendData+0x6ac>)
 8002340:	f7ff f933 	bl	80015aa <lora_send_packet>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800234c:	f103 0320 	add.w	r3, r3, #32
 8002350:	f6a3 53e5 	subw	r3, r3, #3557	; 0xde5
 8002354:	701a      	strb	r2, [r3, #0]
						if (packet_res != LORA_OK) {
 8002356:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800235a:	f103 0320 	add.w	r3, r3, #32
 800235e:	f6a3 53e5 	subw	r3, r3, #3557	; 0xde5
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <sendData+0x482>
							HAL_UART_Transmit(&huart1, &packet_res, sizeof(packet_res), 1000);
 8002368:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800236c:	f101 011b 	add.w	r1, r1, #27
 8002370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002374:	2201      	movs	r2, #1
 8002376:	488d      	ldr	r0, [pc, #564]	; (80025ac <sendData+0x6b0>)
 8002378:	f005 f8a3 	bl	80074c2 <HAL_UART_Transmit>
 800237c:	e006      	b.n	800238c <sendData+0x490>
						}
						else {
							HAL_UART_Transmit(&huart1, transmission_success, sizeof(transmission_success), 1000);
 800237e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002382:	2215      	movs	r2, #21
 8002384:	498a      	ldr	r1, [pc, #552]	; (80025b0 <sendData+0x6b4>)
 8002386:	4889      	ldr	r0, [pc, #548]	; (80025ac <sendData+0x6b0>)
 8002388:	f005 f89b 	bl	80074c2 <HAL_UART_Transmit>
						}
						HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_3);
 800238c:	2108      	movs	r1, #8
 800238e:	4889      	ldr	r0, [pc, #548]	; (80025b4 <sendData+0x6b8>)
 8002390:	f001 fbe1 	bl	8003b56 <HAL_GPIO_TogglePin>
						while(lora_is_transmitting(&lora)); // non-blocking delay
 8002394:	bf00      	nop
 8002396:	4884      	ldr	r0, [pc, #528]	; (80025a8 <sendData+0x6ac>)
 8002398:	f7ff f8af 	bl	80014fa <lora_is_transmitting>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f9      	bne.n	8002396 <sendData+0x49a>
					for(int send_loop_cnt = 0; send_loop_cnt < ((SEND_LEN*2)/255 + ((SEND_LEN*2) % 255 != 0)); send_loop_cnt++){
 80023a2:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80023a6:	f103 0310 	add.w	r3, r3, #16
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 80023b2:	f102 0210 	add.w	r2, r2, #16
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80023bc:	f103 0310 	add.w	r3, r3, #16
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b13      	cmp	r3, #19
 80023c4:	ddac      	ble.n	8002320 <sendData+0x424>
					}

					packet_res = lora_send_packet(&lora, (uint8_t *) &endPadding, 4);
 80023c6:	2204      	movs	r2, #4
 80023c8:	497b      	ldr	r1, [pc, #492]	; (80025b8 <sendData+0x6bc>)
 80023ca:	4877      	ldr	r0, [pc, #476]	; (80025a8 <sendData+0x6ac>)
 80023cc:	f7ff f8ed 	bl	80015aa <lora_send_packet>
 80023d0:	4603      	mov	r3, r0
 80023d2:	461a      	mov	r2, r3
 80023d4:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80023d8:	f103 0320 	add.w	r3, r3, #32
 80023dc:	f6a3 53e5 	subw	r3, r3, #3557	; 0xde5
 80023e0:	701a      	strb	r2, [r3, #0]
					if (packet_res != LORA_OK) {
 80023e2:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80023e6:	f103 0320 	add.w	r3, r3, #32
 80023ea:	f6a3 53e5 	subw	r3, r3, #3557	; 0xde5
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <sendData+0x50e>
						HAL_UART_Transmit(&huart1, &packet_res, sizeof(packet_res), 1000);
 80023f4:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80023f8:	f101 011b 	add.w	r1, r1, #27
 80023fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002400:	2201      	movs	r2, #1
 8002402:	486a      	ldr	r0, [pc, #424]	; (80025ac <sendData+0x6b0>)
 8002404:	f005 f85d 	bl	80074c2 <HAL_UART_Transmit>
 8002408:	e006      	b.n	8002418 <sendData+0x51c>
					}
					else {
						HAL_UART_Transmit(&huart1, transmission_success, sizeof(transmission_success), 1000);
 800240a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240e:	2215      	movs	r2, #21
 8002410:	4967      	ldr	r1, [pc, #412]	; (80025b0 <sendData+0x6b4>)
 8002412:	4866      	ldr	r0, [pc, #408]	; (80025ac <sendData+0x6b0>)
 8002414:	f005 f855 	bl	80074c2 <HAL_UART_Transmit>
					}
#endif

					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8002418:	2200      	movs	r2, #0
 800241a:	2108      	movs	r1, #8
 800241c:	4865      	ldr	r0, [pc, #404]	; (80025b4 <sendData+0x6b8>)
 800241e:	f001 fb81 	bl	8003b24 <HAL_GPIO_WritePin>
					for(int delay = 0; delay < (TOTAL_DELAY - NODE_DELAY); delay++);
 8002422:	2300      	movs	r3, #0
 8002424:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002428:	f102 020c 	add.w	r2, r2, #12
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e00a      	b.n	8002446 <sendData+0x54a>
 8002430:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002434:	f103 030c 	add.w	r3, r3, #12
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3301      	adds	r3, #1
 800243c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002440:	f102 020c 	add.w	r2, r2, #12
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800244a:	f103 030c 	add.w	r3, r3, #12
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a5a      	ldr	r2, [pc, #360]	; (80025bc <sendData+0x6c0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	ddec      	ble.n	8002430 <sendData+0x534>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 8002456:	2201      	movs	r2, #1
 8002458:	2108      	movs	r1, #8
 800245a:	4856      	ldr	r0, [pc, #344]	; (80025b4 <sendData+0x6b8>)
 800245c:	f001 fb62 	bl	8003b24 <HAL_GPIO_WritePin>
					tail_mov = 1;
 8002460:	4b57      	ldr	r3, [pc, #348]	; (80025c0 <sendData+0x6c4>)
 8002462:	2201      	movs	r2, #1
 8002464:	601a      	str	r2, [r3, #0]
					tail_full = 1;
 8002466:	4b57      	ldr	r3, [pc, #348]	; (80025c4 <sendData+0x6c8>)
 8002468:	2201      	movs	r2, #1
 800246a:	601a      	str	r2, [r3, #0]
					moving_sum = 0;
 800246c:	4b56      	ldr	r3, [pc, #344]	; (80025c8 <sendData+0x6cc>)
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
					moving_avg = 0;
 8002474:	4b55      	ldr	r3, [pc, #340]	; (80025cc <sendData+0x6d0>)
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
					moving_sum_left = 0;
 800247c:	4954      	ldr	r1, [pc, #336]	; (80025d0 <sendData+0x6d4>)
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9c1 2300 	strd	r2, r3, [r1]
					moving_avg_left = 0;
 800248a:	4b52      	ldr	r3, [pc, #328]	; (80025d4 <sendData+0x6d8>)
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
					moving_sum_right = 0;
 8002492:	4951      	ldr	r1, [pc, #324]	; (80025d8 <sendData+0x6dc>)
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	e9c1 2300 	strd	r2, r3, [r1]
					moving_avg_right = 0;
 80024a0:	4b4e      	ldr	r3, [pc, #312]	; (80025dc <sendData+0x6e0>)
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
					counter = 0;
 80024a8:	4b4d      	ldr	r3, [pc, #308]	; (80025e0 <sendData+0x6e4>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	801a      	strh	r2, [r3, #0]
					done = 0;
 80024ae:	4b4d      	ldr	r3, [pc, #308]	; (80025e4 <sendData+0x6e8>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
					memset(circular_buf_mov, 0, MOVING_AVG_LEN*sizeof(int16_t));
 80024b4:	220a      	movs	r2, #10
 80024b6:	2100      	movs	r1, #0
 80024b8:	484b      	ldr	r0, [pc, #300]	; (80025e8 <sendData+0x6ec>)
 80024ba:	f006 f9eb 	bl	8008894 <memset>
					memset(circular_buf_mov_right, 0, MOVING_AVG_LEN*sizeof(int16_t));
 80024be:	220a      	movs	r2, #10
 80024c0:	2100      	movs	r1, #0
 80024c2:	484a      	ldr	r0, [pc, #296]	; (80025ec <sendData+0x6f0>)
 80024c4:	f006 f9e6 	bl	8008894 <memset>
					memset(circular_buf_full, 0, SEND_LEN*sizeof(int16_t));
 80024c8:	f241 32ec 	movw	r2, #5100	; 0x13ec
 80024cc:	2100      	movs	r1, #0
 80024ce:	4848      	ldr	r0, [pc, #288]	; (80025f0 <sendData+0x6f4>)
 80024d0:	f006 f9e0 	bl	8008894 <memset>
					memset(_sampleBuffer, 0, MIC_SAMPLES_PER_PACKET*2*sizeof(int32_t));
 80024d4:	f44f 52dc 	mov.w	r2, #7040	; 0x1b80
 80024d8:	2100      	movs	r1, #0
 80024da:	4846      	ldr	r0, [pc, #280]	; (80025f4 <sendData+0x6f8>)
 80024dc:	f006 f9da 	bl	8008894 <memset>
 80024e0:	46b5      	mov	sp, r6
				}
			}

			if ((moving_avg >= MOVING_AVG_THRESHOLD) && (counter == 0)){
 80024e2:	4b3a      	ldr	r3, [pc, #232]	; (80025cc <sendData+0x6d0>)
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80025f8 <sendData+0x6fc>
 80024ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f4:	db16      	blt.n	8002524 <sendData+0x628>
 80024f6:	4b3a      	ldr	r3, [pc, #232]	; (80025e0 <sendData+0x6e4>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d112      	bne.n	8002524 <sendData+0x628>
				timerVal = TIM2->CNT;
 80024fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	4a3d      	ldr	r2, [pc, #244]	; (80025fc <sendData+0x700>)
 8002506:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8002508:	2200      	movs	r2, #0
 800250a:	2108      	movs	r1, #8
 800250c:	4829      	ldr	r0, [pc, #164]	; (80025b4 <sendData+0x6b8>)
 800250e:	f001 fb09 	bl	8003b24 <HAL_GPIO_WritePin>
				counter += 1;
 8002512:	4b33      	ldr	r3, [pc, #204]	; (80025e0 <sendData+0x6e4>)
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	3301      	adds	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <sendData+0x6e4>)
 800251c:	801a      	strh	r2, [r3, #0]
				done = 0;
 800251e:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <sendData+0x6e8>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
			}

			tail_mov = (tail_mov + 1) % (MOVING_AVG_LEN);
 8002524:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <sendData+0x6c4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	1c59      	adds	r1, r3, #1
 800252a:	4b35      	ldr	r3, [pc, #212]	; (8002600 <sendData+0x704>)
 800252c:	fba3 2301 	umull	r2, r3, r3, r1
 8002530:	089a      	lsrs	r2, r3, #2
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	1aca      	subs	r2, r1, r3
 800253a:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <sendData+0x6c4>)
 800253c:	601a      	str	r2, [r3, #0]
			tail_full = (tail_full + 1) % (SEND_LEN);
 800253e:	4b21      	ldr	r3, [pc, #132]	; (80025c4 <sendData+0x6c8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	0853      	lsrs	r3, r2, #1
 8002546:	492f      	ldr	r1, [pc, #188]	; (8002604 <sendData+0x708>)
 8002548:	fba1 1303 	umull	r1, r3, r1, r3
 800254c:	0a9b      	lsrs	r3, r3, #10
 800254e:	f640 11f6 	movw	r1, #2550	; 0x9f6
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	4a1a      	ldr	r2, [pc, #104]	; (80025c4 <sendData+0x6c8>)
 800255a:	6013      	str	r3, [r2, #0]

			data_in += 2;
 800255c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002560:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002564:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002568:	f5a2 72ee 	sub.w	r2, r2, #476	; 0x1dc
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	3208      	adds	r2, #8
 8002570:	601a      	str	r2, [r3, #0]
		for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8002572:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002576:	f103 031a 	add.w	r3, r3, #26
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	3301      	adds	r3, #1
 800257e:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002582:	f102 021a 	add.w	r2, r2, #26
 8002586:	8013      	strh	r3, [r2, #0]
 8002588:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800258c:	f103 031a 	add.w	r3, r3, #26
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8002596:	f4ff ad29 	bcc.w	8001fec <sendData+0xf0>
		}


	}
}
 800259a:	bf00      	nop
 800259c:	f507 5707 	add.w	r7, r7, #8640	; 0x21c0
 80025a0:	3724      	adds	r7, #36	; 0x24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025a8:	20003354 	.word	0x20003354
 80025ac:	20000254 	.word	0x20000254
 80025b0:	20000024 	.word	0x20000024
 80025b4:	40021400 	.word	0x40021400
 80025b8:	2000000c 	.word	0x2000000c
 80025bc:	0bebc1ff 	.word	0x0bebc1ff
 80025c0:	20001f34 	.word	0x20001f34
 80025c4:	20003324 	.word	0x20003324
 80025c8:	20003328 	.word	0x20003328
 80025cc:	2000332c 	.word	0x2000332c
 80025d0:	20003330 	.word	0x20003330
 80025d4:	20003338 	.word	0x20003338
 80025d8:	20003340 	.word	0x20003340
 80025dc:	20003348 	.word	0x20003348
 80025e0:	2000334e 	.word	0x2000334e
 80025e4:	20003350 	.word	0x20003350
 80025e8:	20001f1c 	.word	0x20001f1c
 80025ec:	20001f28 	.word	0x20001f28
 80025f0:	20001f38 	.word	0x20001f38
 80025f4:	2000039c 	.word	0x2000039c
 80025f8:	42c80000 	.word	0x42c80000
 80025fc:	20004c80 	.word	0x20004c80
 8002600:	cccccccd 	.word	0xcccccccd
 8002604:	cd9a6735 	.word	0xcd9a6735

08002608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800260c:	b672      	cpsid	i
}
 800260e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002610:	e7fe      	b.n	8002610 <Error_Handler+0x8>
	...

08002614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_MspInit+0x4c>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	4a0f      	ldr	r2, [pc, #60]	; (8002660 <HAL_MspInit+0x4c>)
 8002624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002628:	6453      	str	r3, [r2, #68]	; 0x44
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <HAL_MspInit+0x4c>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	603b      	str	r3, [r7, #0]
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_MspInit+0x4c>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a08      	ldr	r2, [pc, #32]	; (8002660 <HAL_MspInit+0x4c>)
 8002640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_MspInit+0x4c>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800

08002664 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	; 0x28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a19      	ldr	r2, [pc, #100]	; (80026e8 <HAL_SPI_MspInit+0x84>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d12b      	bne.n	80026de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	4b18      	ldr	r3, [pc, #96]	; (80026ec <HAL_SPI_MspInit+0x88>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	4a17      	ldr	r2, [pc, #92]	; (80026ec <HAL_SPI_MspInit+0x88>)
 8002690:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_SPI_MspInit+0x88>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_SPI_MspInit+0x88>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a10      	ldr	r2, [pc, #64]	; (80026ec <HAL_SPI_MspInit+0x88>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <HAL_SPI_MspInit+0x88>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026be:	23e0      	movs	r3, #224	; 0xe0
 80026c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ca:	2303      	movs	r3, #3
 80026cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026ce:	2305      	movs	r3, #5
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	4619      	mov	r1, r3
 80026d8:	4805      	ldr	r0, [pc, #20]	; (80026f0 <HAL_SPI_MspInit+0x8c>)
 80026da:	f001 f88f 	bl	80037fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026de:	bf00      	nop
 80026e0:	3728      	adds	r7, #40	; 0x28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40013000 	.word	0x40013000
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40020000 	.word	0x40020000

080026f4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	; 0x28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002714:	d133      	bne.n	800277e <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_TIM_IC_MspInit+0x94>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	4a1a      	ldr	r2, [pc, #104]	; (8002788 <HAL_TIM_IC_MspInit+0x94>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6413      	str	r3, [r2, #64]	; 0x40
 8002726:	4b18      	ldr	r3, [pc, #96]	; (8002788 <HAL_TIM_IC_MspInit+0x94>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	4b14      	ldr	r3, [pc, #80]	; (8002788 <HAL_TIM_IC_MspInit+0x94>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a13      	ldr	r2, [pc, #76]	; (8002788 <HAL_TIM_IC_MspInit+0x94>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_TIM_IC_MspInit+0x94>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800274e:	2304      	movs	r3, #4
 8002750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275a:	2300      	movs	r3, #0
 800275c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800275e:	2301      	movs	r3, #1
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002762:	f107 0314 	add.w	r3, r7, #20
 8002766:	4619      	mov	r1, r3
 8002768:	4808      	ldr	r0, [pc, #32]	; (800278c <HAL_TIM_IC_MspInit+0x98>)
 800276a:	f001 f847 	bl	80037fc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2100      	movs	r1, #0
 8002772:	201c      	movs	r0, #28
 8002774:	f000 fc09 	bl	8002f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002778:	201c      	movs	r0, #28
 800277a:	f000 fc22 	bl	8002fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800277e:	bf00      	nop
 8002780:	3728      	adds	r7, #40	; 0x28
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	40020000 	.word	0x40020000

08002790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08c      	sub	sp, #48	; 0x30
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 031c 	add.w	r3, r7, #28
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a74      	ldr	r2, [pc, #464]	; (8002980 <HAL_UART_MspInit+0x1f0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d15b      	bne.n	800286a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	4b73      	ldr	r3, [pc, #460]	; (8002984 <HAL_UART_MspInit+0x1f4>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	4a72      	ldr	r2, [pc, #456]	; (8002984 <HAL_UART_MspInit+0x1f4>)
 80027bc:	f043 0310 	orr.w	r3, r3, #16
 80027c0:	6453      	str	r3, [r2, #68]	; 0x44
 80027c2:	4b70      	ldr	r3, [pc, #448]	; (8002984 <HAL_UART_MspInit+0x1f4>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	4b6c      	ldr	r3, [pc, #432]	; (8002984 <HAL_UART_MspInit+0x1f4>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a6b      	ldr	r2, [pc, #428]	; (8002984 <HAL_UART_MspInit+0x1f4>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b69      	ldr	r3, [pc, #420]	; (8002984 <HAL_UART_MspInit+0x1f4>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f8:	2303      	movs	r3, #3
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027fc:	2307      	movs	r3, #7
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002800:	f107 031c 	add.w	r3, r7, #28
 8002804:	4619      	mov	r1, r3
 8002806:	4860      	ldr	r0, [pc, #384]	; (8002988 <HAL_UART_MspInit+0x1f8>)
 8002808:	f000 fff8 	bl	80037fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800280c:	4b5f      	ldr	r3, [pc, #380]	; (800298c <HAL_UART_MspInit+0x1fc>)
 800280e:	4a60      	ldr	r2, [pc, #384]	; (8002990 <HAL_UART_MspInit+0x200>)
 8002810:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002812:	4b5e      	ldr	r3, [pc, #376]	; (800298c <HAL_UART_MspInit+0x1fc>)
 8002814:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002818:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800281a:	4b5c      	ldr	r3, [pc, #368]	; (800298c <HAL_UART_MspInit+0x1fc>)
 800281c:	2240      	movs	r2, #64	; 0x40
 800281e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002820:	4b5a      	ldr	r3, [pc, #360]	; (800298c <HAL_UART_MspInit+0x1fc>)
 8002822:	2200      	movs	r2, #0
 8002824:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002826:	4b59      	ldr	r3, [pc, #356]	; (800298c <HAL_UART_MspInit+0x1fc>)
 8002828:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800282c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800282e:	4b57      	ldr	r3, [pc, #348]	; (800298c <HAL_UART_MspInit+0x1fc>)
 8002830:	2200      	movs	r2, #0
 8002832:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002834:	4b55      	ldr	r3, [pc, #340]	; (800298c <HAL_UART_MspInit+0x1fc>)
 8002836:	2200      	movs	r2, #0
 8002838:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800283a:	4b54      	ldr	r3, [pc, #336]	; (800298c <HAL_UART_MspInit+0x1fc>)
 800283c:	2200      	movs	r2, #0
 800283e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002840:	4b52      	ldr	r3, [pc, #328]	; (800298c <HAL_UART_MspInit+0x1fc>)
 8002842:	2200      	movs	r2, #0
 8002844:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002846:	4b51      	ldr	r3, [pc, #324]	; (800298c <HAL_UART_MspInit+0x1fc>)
 8002848:	2200      	movs	r2, #0
 800284a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800284c:	484f      	ldr	r0, [pc, #316]	; (800298c <HAL_UART_MspInit+0x1fc>)
 800284e:	f000 fbd3 	bl	8002ff8 <HAL_DMA_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002858:	f7ff fed6 	bl	8002608 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a4b      	ldr	r2, [pc, #300]	; (800298c <HAL_UART_MspInit+0x1fc>)
 8002860:	635a      	str	r2, [r3, #52]	; 0x34
 8002862:	4a4a      	ldr	r2, [pc, #296]	; (800298c <HAL_UART_MspInit+0x1fc>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002868:	e086      	b.n	8002978 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a49      	ldr	r2, [pc, #292]	; (8002994 <HAL_UART_MspInit+0x204>)
 8002870:	4293      	cmp	r3, r2
 8002872:	f040 8081 	bne.w	8002978 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	4b42      	ldr	r3, [pc, #264]	; (8002984 <HAL_UART_MspInit+0x1f4>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a41      	ldr	r2, [pc, #260]	; (8002984 <HAL_UART_MspInit+0x1f4>)
 8002880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <HAL_UART_MspInit+0x1f4>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <HAL_UART_MspInit+0x1f4>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a3a      	ldr	r2, [pc, #232]	; (8002984 <HAL_UART_MspInit+0x1f4>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b38      	ldr	r3, [pc, #224]	; (8002984 <HAL_UART_MspInit+0x1f4>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	4b34      	ldr	r3, [pc, #208]	; (8002984 <HAL_UART_MspInit+0x1f4>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a33      	ldr	r2, [pc, #204]	; (8002984 <HAL_UART_MspInit+0x1f4>)
 80028b8:	f043 0308 	orr.w	r3, r3, #8
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b31      	ldr	r3, [pc, #196]	; (8002984 <HAL_UART_MspInit+0x1f4>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028ca:	2308      	movs	r3, #8
 80028cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d6:	2303      	movs	r3, #3
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028da:	2307      	movs	r3, #7
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028de:	f107 031c 	add.w	r3, r7, #28
 80028e2:	4619      	mov	r1, r3
 80028e4:	4828      	ldr	r0, [pc, #160]	; (8002988 <HAL_UART_MspInit+0x1f8>)
 80028e6:	f000 ff89 	bl	80037fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028ea:	2320      	movs	r3, #32
 80028ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ee:	2302      	movs	r3, #2
 80028f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f6:	2303      	movs	r3, #3
 80028f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028fa:	2307      	movs	r3, #7
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028fe:	f107 031c 	add.w	r3, r7, #28
 8002902:	4619      	mov	r1, r3
 8002904:	4824      	ldr	r0, [pc, #144]	; (8002998 <HAL_UART_MspInit+0x208>)
 8002906:	f000 ff79 	bl	80037fc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800290a:	4b24      	ldr	r3, [pc, #144]	; (800299c <HAL_UART_MspInit+0x20c>)
 800290c:	4a24      	ldr	r2, [pc, #144]	; (80029a0 <HAL_UART_MspInit+0x210>)
 800290e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002910:	4b22      	ldr	r3, [pc, #136]	; (800299c <HAL_UART_MspInit+0x20c>)
 8002912:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002916:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002918:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_UART_MspInit+0x20c>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800291e:	4b1f      	ldr	r3, [pc, #124]	; (800299c <HAL_UART_MspInit+0x20c>)
 8002920:	2200      	movs	r2, #0
 8002922:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <HAL_UART_MspInit+0x20c>)
 8002926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800292a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_UART_MspInit+0x20c>)
 800292e:	2200      	movs	r2, #0
 8002930:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002932:	4b1a      	ldr	r3, [pc, #104]	; (800299c <HAL_UART_MspInit+0x20c>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002938:	4b18      	ldr	r3, [pc, #96]	; (800299c <HAL_UART_MspInit+0x20c>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800293e:	4b17      	ldr	r3, [pc, #92]	; (800299c <HAL_UART_MspInit+0x20c>)
 8002940:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002944:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <HAL_UART_MspInit+0x20c>)
 8002948:	2200      	movs	r2, #0
 800294a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800294c:	4813      	ldr	r0, [pc, #76]	; (800299c <HAL_UART_MspInit+0x20c>)
 800294e:	f000 fb53 	bl	8002ff8 <HAL_DMA_Init>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 8002958:	f7ff fe56 	bl	8002608 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a0f      	ldr	r2, [pc, #60]	; (800299c <HAL_UART_MspInit+0x20c>)
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
 8002962:	4a0e      	ldr	r2, [pc, #56]	; (800299c <HAL_UART_MspInit+0x20c>)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002968:	2200      	movs	r2, #0
 800296a:	2100      	movs	r1, #0
 800296c:	2026      	movs	r0, #38	; 0x26
 800296e:	f000 fb0c 	bl	8002f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002972:	2026      	movs	r0, #38	; 0x26
 8002974:	f000 fb25 	bl	8002fc2 <HAL_NVIC_EnableIRQ>
}
 8002978:	bf00      	nop
 800297a:	3730      	adds	r7, #48	; 0x30
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40011000 	.word	0x40011000
 8002984:	40023800 	.word	0x40023800
 8002988:	40020000 	.word	0x40020000
 800298c:	200002dc 	.word	0x200002dc
 8002990:	400264b8 	.word	0x400264b8
 8002994:	40004400 	.word	0x40004400
 8002998:	40020c00 	.word	0x40020c00
 800299c:	2000033c 	.word	0x2000033c
 80029a0:	40026088 	.word	0x40026088

080029a4 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b0a0      	sub	sp, #128	; 0x80
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029ac:	f107 0310 	add.w	r3, r7, #16
 80029b0:	225c      	movs	r2, #92	; 0x5c
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f005 ff6d 	bl	8008894 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a4c      	ldr	r2, [pc, #304]	; (8002af0 <HAL_SAI_MspInit+0x14c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	f040 8090 	bne.w	8002ae6 <HAL_SAI_MspInit+0x142>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80029c6:	2304      	movs	r3, #4
 80029c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 16;
 80029ca:	2310      	movs	r3, #16
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80029ce:	23c0      	movs	r3, #192	; 0xc0
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80029d2:	2302      	movs	r3, #2
 80029d4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80029d6:	2302      	movs	r3, #2
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80029da:	2301      	movs	r3, #1
 80029dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80029de:	2300      	movs	r3, #0
 80029e0:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029e2:	f107 0310 	add.w	r3, r7, #16
 80029e6:	4618      	mov	r0, r3
 80029e8:	f001 fa3a 	bl	8003e60 <HAL_RCCEx_PeriphCLKConfig>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_SAI_MspInit+0x52>
    {
      Error_Handler();
 80029f2:	f7ff fe09 	bl	8002608 <Error_Handler>
    }

      if (SAI1_client == 0)
 80029f6:	4b3f      	ldr	r3, [pc, #252]	; (8002af4 <HAL_SAI_MspInit+0x150>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10d      	bne.n	8002a1a <HAL_SAI_MspInit+0x76>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	4b3d      	ldr	r3, [pc, #244]	; (8002af8 <HAL_SAI_MspInit+0x154>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	4a3c      	ldr	r2, [pc, #240]	; (8002af8 <HAL_SAI_MspInit+0x154>)
 8002a08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0e:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <HAL_SAI_MspInit+0x154>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002a1a:	4b36      	ldr	r3, [pc, #216]	; (8002af4 <HAL_SAI_MspInit+0x150>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	4a34      	ldr	r2, [pc, #208]	; (8002af4 <HAL_SAI_MspInit+0x150>)
 8002a22:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a24:	2308      	movs	r3, #8
 8002a26:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002a34:	2306      	movs	r3, #6
 8002a36:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	482f      	ldr	r0, [pc, #188]	; (8002afc <HAL_SAI_MspInit+0x158>)
 8002a40:	f000 fedc 	bl	80037fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a48:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a52:	2300      	movs	r3, #0
 8002a54:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002a56:	2306      	movs	r3, #6
 8002a58:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4827      	ldr	r0, [pc, #156]	; (8002b00 <HAL_SAI_MspInit+0x15c>)
 8002a62:	f000 fecb 	bl	80037fc <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 8002a66:	4b27      	ldr	r3, [pc, #156]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002a68:	4a27      	ldr	r2, [pc, #156]	; (8002b08 <HAL_SAI_MspInit+0x164>)
 8002a6a:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 8002a6c:	4b25      	ldr	r3, [pc, #148]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002a6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a72:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a74:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7a:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8002a80:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a86:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a88:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002a8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a8e:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a90:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002a92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a96:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002a98:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a9e:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8002aa0:	4b18      	ldr	r3, [pc, #96]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002aa6:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002aac:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002aae:	2203      	movs	r2, #3
 8002ab0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8002ab2:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002abe:	4811      	ldr	r0, [pc, #68]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002ac0:	f000 fa9a 	bl	8002ff8 <HAL_DMA_Init>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_SAI_MspInit+0x12a>
    {
      Error_Handler();
 8002aca:	f7ff fd9d 	bl	8002608 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a0c      	ldr	r2, [pc, #48]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002ad2:	675a      	str	r2, [r3, #116]	; 0x74
 8002ad4:	4a0b      	ldr	r2, [pc, #44]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002ade:	671a      	str	r2, [r3, #112]	; 0x70
 8002ae0:	4a08      	ldr	r2, [pc, #32]	; (8002b04 <HAL_SAI_MspInit+0x160>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8002ae6:	bf00      	nop
 8002ae8:	3780      	adds	r7, #128	; 0x80
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40015824 	.word	0x40015824
 8002af4:	20004c84 	.word	0x20004c84
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40021400 	.word	0x40021400
 8002b04:	20000154 	.word	0x20000154
 8002b08:	40026470 	.word	0x40026470

08002b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <NMI_Handler+0x4>

08002b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <HardFault_Handler+0x4>

08002b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <MemManage_Handler+0x4>

08002b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b22:	e7fe      	b.n	8002b22 <BusFault_Handler+0x4>

08002b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <UsageFault_Handler+0x4>

08002b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b58:	f000 f8f8 	bl	8002d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b64:	4802      	ldr	r0, [pc, #8]	; (8002b70 <DMA1_Stream5_IRQHandler+0x10>)
 8002b66:	f000 fbdf 	bl	8003328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	2000033c 	.word	0x2000033c

08002b74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b78:	4802      	ldr	r0, [pc, #8]	; (8002b84 <TIM2_IRQHandler+0x10>)
 8002b7a:	f004 f809 	bl	8006b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	2000020c 	.word	0x2000020c

08002b88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <USART2_IRQHandler+0x10>)
 8002b8e:	f004 fd5b 	bl	8007648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000298 	.word	0x20000298

08002b9c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <DMA2_Stream4_IRQHandler+0x10>)
 8002ba2:	f000 fbc1 	bl	8003328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000154 	.word	0x20000154

08002bb0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <DMA2_Stream7_IRQHandler+0x10>)
 8002bb6:	f000 fbb7 	bl	8003328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200002dc 	.word	0x200002dc

08002bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bcc:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <_sbrk+0x5c>)
 8002bce:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <_sbrk+0x60>)
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd8:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <_sbrk+0x64>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <_sbrk+0x64>)
 8002be2:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <_sbrk+0x68>)
 8002be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <_sbrk+0x64>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d207      	bcs.n	8002c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf4:	f005 fe16 	bl	8008824 <__errno>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	220c      	movs	r2, #12
 8002bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c02:	e009      	b.n	8002c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <_sbrk+0x64>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c0a:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <_sbrk+0x64>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	4a05      	ldr	r2, [pc, #20]	; (8002c28 <_sbrk+0x64>)
 8002c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c16:	68fb      	ldr	r3, [r7, #12]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20020000 	.word	0x20020000
 8002c24:	00000400 	.word	0x00000400
 8002c28:	20004c88 	.word	0x20004c88
 8002c2c:	20004ca0 	.word	0x20004ca0

08002c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <SystemInit+0x20>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <SystemInit+0x20>)
 8002c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c58:	480d      	ldr	r0, [pc, #52]	; (8002c90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c5a:	490e      	ldr	r1, [pc, #56]	; (8002c94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c5c:	4a0e      	ldr	r2, [pc, #56]	; (8002c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c60:	e002      	b.n	8002c68 <LoopCopyDataInit>

08002c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c66:	3304      	adds	r3, #4

08002c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c6c:	d3f9      	bcc.n	8002c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c6e:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c70:	4c0b      	ldr	r4, [pc, #44]	; (8002ca0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c74:	e001      	b.n	8002c7a <LoopFillZerobss>

08002c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c78:	3204      	adds	r2, #4

08002c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c7c:	d3fb      	bcc.n	8002c76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c7e:	f7ff ffd7 	bl	8002c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c82:	f005 fdd5 	bl	8008830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c86:	f7fe fd93 	bl	80017b0 <main>
  bx  lr    
 8002c8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c94:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002c98:	08009468 	.word	0x08009468
  ldr r2, =_sbss
 8002c9c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002ca0:	20004ca0 	.word	0x20004ca0

08002ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ca4:	e7fe      	b.n	8002ca4 <ADC_IRQHandler>
	...

08002ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cac:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <HAL_Init+0x40>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ce8 <HAL_Init+0x40>)
 8002cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_Init+0x40>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <HAL_Init+0x40>)
 8002cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <HAL_Init+0x40>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a07      	ldr	r2, [pc, #28]	; (8002ce8 <HAL_Init+0x40>)
 8002cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd0:	2003      	movs	r0, #3
 8002cd2:	f000 f94f 	bl	8002f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cd6:	200f      	movs	r0, #15
 8002cd8:	f000 f808 	bl	8002cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cdc:	f7ff fc9a 	bl	8002614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023c00 	.word	0x40023c00

08002cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cf4:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_InitTick+0x54>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <HAL_InitTick+0x58>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f967 	bl	8002fde <HAL_SYSTICK_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e00e      	b.n	8002d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b0f      	cmp	r3, #15
 8002d1e:	d80a      	bhi.n	8002d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d20:	2200      	movs	r2, #0
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d28:	f000 f92f 	bl	8002f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d2c:	4a06      	ldr	r2, [pc, #24]	; (8002d48 <HAL_InitTick+0x5c>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000040 	.word	0x20000040
 8002d44:	20000048 	.word	0x20000048
 8002d48:	20000044 	.word	0x20000044

08002d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_IncTick+0x20>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_IncTick+0x24>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <HAL_IncTick+0x24>)
 8002d5e:	6013      	str	r3, [r2, #0]
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000048 	.word	0x20000048
 8002d70:	20004c8c 	.word	0x20004c8c

08002d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return uwTick;
 8002d78:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <HAL_GetTick+0x14>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20004c8c 	.word	0x20004c8c

08002d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d94:	f7ff ffee 	bl	8002d74 <HAL_GetTick>
 8002d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002da4:	d005      	beq.n	8002db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_Delay+0x44>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002db2:	bf00      	nop
 8002db4:	f7ff ffde 	bl	8002d74 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d8f7      	bhi.n	8002db4 <HAL_Delay+0x28>
  {
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000048 	.word	0x20000048

08002dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <__NVIC_SetPriorityGrouping+0x44>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002df0:	4013      	ands	r3, r2
 8002df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e06:	4a04      	ldr	r2, [pc, #16]	; (8002e18 <__NVIC_SetPriorityGrouping+0x44>)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	60d3      	str	r3, [r2, #12]
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	e000ed00 	.word	0xe000ed00

08002e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <__NVIC_GetPriorityGrouping+0x18>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	0a1b      	lsrs	r3, r3, #8
 8002e26:	f003 0307 	and.w	r3, r3, #7
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	db0b      	blt.n	8002e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	f003 021f 	and.w	r2, r3, #31
 8002e50:	4907      	ldr	r1, [pc, #28]	; (8002e70 <__NVIC_EnableIRQ+0x38>)
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	2001      	movs	r0, #1
 8002e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	e000e100 	.word	0xe000e100

08002e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	6039      	str	r1, [r7, #0]
 8002e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	db0a      	blt.n	8002e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	490c      	ldr	r1, [pc, #48]	; (8002ec0 <__NVIC_SetPriority+0x4c>)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	0112      	lsls	r2, r2, #4
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	440b      	add	r3, r1
 8002e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e9c:	e00a      	b.n	8002eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	4908      	ldr	r1, [pc, #32]	; (8002ec4 <__NVIC_SetPriority+0x50>)
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	3b04      	subs	r3, #4
 8002eac:	0112      	lsls	r2, r2, #4
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	761a      	strb	r2, [r3, #24]
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	e000e100 	.word	0xe000e100
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b089      	sub	sp, #36	; 0x24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f1c3 0307 	rsb	r3, r3, #7
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	bf28      	it	cs
 8002ee6:	2304      	movcs	r3, #4
 8002ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3304      	adds	r3, #4
 8002eee:	2b06      	cmp	r3, #6
 8002ef0:	d902      	bls.n	8002ef8 <NVIC_EncodePriority+0x30>
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	3b03      	subs	r3, #3
 8002ef6:	e000      	b.n	8002efa <NVIC_EncodePriority+0x32>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43da      	mvns	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	401a      	ands	r2, r3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1a:	43d9      	mvns	r1, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f20:	4313      	orrs	r3, r2
         );
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3724      	adds	r7, #36	; 0x24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f40:	d301      	bcc.n	8002f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f42:	2301      	movs	r3, #1
 8002f44:	e00f      	b.n	8002f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f46:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <SysTick_Config+0x40>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f4e:	210f      	movs	r1, #15
 8002f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f54:	f7ff ff8e 	bl	8002e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <SysTick_Config+0x40>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f5e:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <SysTick_Config+0x40>)
 8002f60:	2207      	movs	r2, #7
 8002f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	e000e010 	.word	0xe000e010

08002f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff ff29 	bl	8002dd4 <__NVIC_SetPriorityGrouping>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
 8002f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f9c:	f7ff ff3e 	bl	8002e1c <__NVIC_GetPriorityGrouping>
 8002fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	6978      	ldr	r0, [r7, #20]
 8002fa8:	f7ff ff8e 	bl	8002ec8 <NVIC_EncodePriority>
 8002fac:	4602      	mov	r2, r0
 8002fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff ff5d 	bl	8002e74 <__NVIC_SetPriority>
}
 8002fba:	bf00      	nop
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	4603      	mov	r3, r0
 8002fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff31 	bl	8002e38 <__NVIC_EnableIRQ>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff ffa2 	bl	8002f30 <SysTick_Config>
 8002fec:	4603      	mov	r3, r0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003004:	f7ff feb6 	bl	8002d74 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e099      	b.n	8003148 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003034:	e00f      	b.n	8003056 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003036:	f7ff fe9d 	bl	8002d74 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b05      	cmp	r3, #5
 8003042:	d908      	bls.n	8003056 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2203      	movs	r2, #3
 800304e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e078      	b.n	8003148 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e8      	bne.n	8003036 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4b38      	ldr	r3, [pc, #224]	; (8003150 <HAL_DMA_Init+0x158>)
 8003070:	4013      	ands	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003082:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800308e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d107      	bne.n	80030c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	4313      	orrs	r3, r2
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f023 0307 	bic.w	r3, r3, #7
 80030d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d117      	bne.n	800311a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00e      	beq.n	800311a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fb01 	bl	8003704 <DMA_CheckFifoParam>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2240      	movs	r2, #64	; 0x40
 800310c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003116:	2301      	movs	r3, #1
 8003118:	e016      	b.n	8003148 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fab8 	bl	8003698 <DMA_CalcBaseAndBitshift>
 8003128:	4603      	mov	r3, r0
 800312a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003130:	223f      	movs	r2, #63	; 0x3f
 8003132:	409a      	lsls	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	f010803f 	.word	0xf010803f

08003154 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_DMA_Start_IT+0x26>
 8003176:	2302      	movs	r3, #2
 8003178:	e040      	b.n	80031fc <HAL_DMA_Start_IT+0xa8>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b01      	cmp	r3, #1
 800318c:	d12f      	bne.n	80031ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2202      	movs	r2, #2
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 fa4a 	bl	800363c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	223f      	movs	r2, #63	; 0x3f
 80031ae:	409a      	lsls	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0216 	orr.w	r2, r2, #22
 80031c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0208 	orr.w	r2, r2, #8
 80031da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	e005      	b.n	80031fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
 80031f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003210:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003212:	f7ff fdaf 	bl	8002d74 <HAL_GetTick>
 8003216:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d008      	beq.n	8003236 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2280      	movs	r2, #128	; 0x80
 8003228:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e052      	b.n	80032dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0216 	bic.w	r2, r2, #22
 8003244:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003254:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <HAL_DMA_Abort+0x62>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0208 	bic.w	r2, r2, #8
 8003274:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0201 	bic.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003286:	e013      	b.n	80032b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003288:	f7ff fd74 	bl	8002d74 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b05      	cmp	r3, #5
 8003294:	d90c      	bls.n	80032b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2203      	movs	r2, #3
 80032a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e015      	b.n	80032dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1e4      	bne.n	8003288 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c2:	223f      	movs	r2, #63	; 0x3f
 80032c4:	409a      	lsls	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d004      	beq.n	8003302 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e00c      	b.n	800331c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2205      	movs	r2, #5
 8003306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0201 	bic.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003334:	4b8e      	ldr	r3, [pc, #568]	; (8003570 <HAL_DMA_IRQHandler+0x248>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a8e      	ldr	r2, [pc, #568]	; (8003574 <HAL_DMA_IRQHandler+0x24c>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0a9b      	lsrs	r3, r3, #10
 8003340:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003352:	2208      	movs	r2, #8
 8003354:	409a      	lsls	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4013      	ands	r3, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d01a      	beq.n	8003394 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d013      	beq.n	8003394 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0204 	bic.w	r2, r2, #4
 800337a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	2208      	movs	r2, #8
 8003382:	409a      	lsls	r2, r3
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338c:	f043 0201 	orr.w	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003398:	2201      	movs	r2, #1
 800339a:	409a      	lsls	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d012      	beq.n	80033ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00b      	beq.n	80033ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b6:	2201      	movs	r2, #1
 80033b8:	409a      	lsls	r2, r3
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c2:	f043 0202 	orr.w	r2, r3, #2
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ce:	2204      	movs	r2, #4
 80033d0:	409a      	lsls	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d012      	beq.n	8003400 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00b      	beq.n	8003400 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ec:	2204      	movs	r2, #4
 80033ee:	409a      	lsls	r2, r3
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f8:	f043 0204 	orr.w	r2, r3, #4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003404:	2210      	movs	r2, #16
 8003406:	409a      	lsls	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d043      	beq.n	8003498 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d03c      	beq.n	8003498 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003422:	2210      	movs	r2, #16
 8003424:	409a      	lsls	r2, r3
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d018      	beq.n	800346a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d108      	bne.n	8003458 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d024      	beq.n	8003498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
 8003456:	e01f      	b.n	8003498 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01b      	beq.n	8003498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
 8003468:	e016      	b.n	8003498 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d107      	bne.n	8003488 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0208 	bic.w	r2, r2, #8
 8003486:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	2220      	movs	r2, #32
 800349e:	409a      	lsls	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 808f 	beq.w	80035c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8087 	beq.w	80035c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034be:	2220      	movs	r2, #32
 80034c0:	409a      	lsls	r2, r3
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	d136      	bne.n	8003540 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0216 	bic.w	r2, r2, #22
 80034e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d103      	bne.n	8003502 <HAL_DMA_IRQHandler+0x1da>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0208 	bic.w	r2, r2, #8
 8003510:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003516:	223f      	movs	r2, #63	; 0x3f
 8003518:	409a      	lsls	r2, r3
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003532:	2b00      	cmp	r3, #0
 8003534:	d07e      	beq.n	8003634 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
        }
        return;
 800353e:	e079      	b.n	8003634 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01d      	beq.n	800358a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10d      	bne.n	8003578 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	2b00      	cmp	r3, #0
 8003562:	d031      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
 800356c:	e02c      	b.n	80035c8 <HAL_DMA_IRQHandler+0x2a0>
 800356e:	bf00      	nop
 8003570:	20000040 	.word	0x20000040
 8003574:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d023      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	4798      	blx	r3
 8003588:	e01e      	b.n	80035c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10f      	bne.n	80035b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0210 	bic.w	r2, r2, #16
 80035a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d032      	beq.n	8003636 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d022      	beq.n	8003622 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2205      	movs	r2, #5
 80035e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0201 	bic.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	3301      	adds	r3, #1
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d307      	bcc.n	8003610 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f2      	bne.n	80035f4 <HAL_DMA_IRQHandler+0x2cc>
 800360e:	e000      	b.n	8003612 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003610:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	4798      	blx	r3
 8003632:	e000      	b.n	8003636 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003634:	bf00      	nop
    }
  }
}
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003658:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d108      	bne.n	800367c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800367a:	e007      	b.n	800368c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	60da      	str	r2, [r3, #12]
}
 800368c:	bf00      	nop
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	3b10      	subs	r3, #16
 80036a8:	4a14      	ldr	r2, [pc, #80]	; (80036fc <DMA_CalcBaseAndBitshift+0x64>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036b2:	4a13      	ldr	r2, [pc, #76]	; (8003700 <DMA_CalcBaseAndBitshift+0x68>)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d909      	bls.n	80036da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036ce:	f023 0303 	bic.w	r3, r3, #3
 80036d2:	1d1a      	adds	r2, r3, #4
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	659a      	str	r2, [r3, #88]	; 0x58
 80036d8:	e007      	b.n	80036ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036e2:	f023 0303 	bic.w	r3, r3, #3
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	aaaaaaab 	.word	0xaaaaaaab
 8003700:	0800941c 	.word	0x0800941c

08003704 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d11f      	bne.n	800375e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b03      	cmp	r3, #3
 8003722:	d856      	bhi.n	80037d2 <DMA_CheckFifoParam+0xce>
 8003724:	a201      	add	r2, pc, #4	; (adr r2, 800372c <DMA_CheckFifoParam+0x28>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	0800373d 	.word	0x0800373d
 8003730:	0800374f 	.word	0x0800374f
 8003734:	0800373d 	.word	0x0800373d
 8003738:	080037d3 	.word	0x080037d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d046      	beq.n	80037d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374c:	e043      	b.n	80037d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003756:	d140      	bne.n	80037da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375c:	e03d      	b.n	80037da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003766:	d121      	bne.n	80037ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b03      	cmp	r3, #3
 800376c:	d837      	bhi.n	80037de <DMA_CheckFifoParam+0xda>
 800376e:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <DMA_CheckFifoParam+0x70>)
 8003770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003774:	08003785 	.word	0x08003785
 8003778:	0800378b 	.word	0x0800378b
 800377c:	08003785 	.word	0x08003785
 8003780:	0800379d 	.word	0x0800379d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]
      break;
 8003788:	e030      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d025      	beq.n	80037e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800379a:	e022      	b.n	80037e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037a4:	d11f      	bne.n	80037e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037aa:	e01c      	b.n	80037e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d903      	bls.n	80037ba <DMA_CheckFifoParam+0xb6>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d003      	beq.n	80037c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037b8:	e018      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
      break;
 80037be:	e015      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00e      	beq.n	80037ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
      break;
 80037d0:	e00b      	b.n	80037ea <DMA_CheckFifoParam+0xe6>
      break;
 80037d2:	bf00      	nop
 80037d4:	e00a      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
      break;
 80037d6:	bf00      	nop
 80037d8:	e008      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
      break;
 80037da:	bf00      	nop
 80037dc:	e006      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
      break;
 80037de:	bf00      	nop
 80037e0:	e004      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
      break;
 80037e2:	bf00      	nop
 80037e4:	e002      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
      break;   
 80037e6:	bf00      	nop
 80037e8:	e000      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
      break;
 80037ea:	bf00      	nop
    }
  } 
  
  return status; 
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop

080037fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	; 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	e165      	b.n	8003ae4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003818:	2201      	movs	r2, #1
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	429a      	cmp	r2, r3
 8003832:	f040 8154 	bne.w	8003ade <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b01      	cmp	r3, #1
 8003840:	d005      	beq.n	800384e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800384a:	2b02      	cmp	r3, #2
 800384c:	d130      	bne.n	80038b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	2203      	movs	r2, #3
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003884:	2201      	movs	r2, #1
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	f003 0201 	and.w	r2, r3, #1
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d017      	beq.n	80038ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	2203      	movs	r2, #3
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d123      	bne.n	8003940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	08da      	lsrs	r2, r3, #3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3208      	adds	r2, #8
 8003900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	220f      	movs	r2, #15
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	08da      	lsrs	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3208      	adds	r2, #8
 800393a:	69b9      	ldr	r1, [r7, #24]
 800393c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	2203      	movs	r2, #3
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0203 	and.w	r2, r3, #3
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80ae 	beq.w	8003ade <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	4b5d      	ldr	r3, [pc, #372]	; (8003afc <HAL_GPIO_Init+0x300>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	4a5c      	ldr	r2, [pc, #368]	; (8003afc <HAL_GPIO_Init+0x300>)
 800398c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003990:	6453      	str	r3, [r2, #68]	; 0x44
 8003992:	4b5a      	ldr	r3, [pc, #360]	; (8003afc <HAL_GPIO_Init+0x300>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800399e:	4a58      	ldr	r2, [pc, #352]	; (8003b00 <HAL_GPIO_Init+0x304>)
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	089b      	lsrs	r3, r3, #2
 80039a4:	3302      	adds	r3, #2
 80039a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	220f      	movs	r2, #15
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4013      	ands	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a4f      	ldr	r2, [pc, #316]	; (8003b04 <HAL_GPIO_Init+0x308>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d025      	beq.n	8003a16 <HAL_GPIO_Init+0x21a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a4e      	ldr	r2, [pc, #312]	; (8003b08 <HAL_GPIO_Init+0x30c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d01f      	beq.n	8003a12 <HAL_GPIO_Init+0x216>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a4d      	ldr	r2, [pc, #308]	; (8003b0c <HAL_GPIO_Init+0x310>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d019      	beq.n	8003a0e <HAL_GPIO_Init+0x212>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a4c      	ldr	r2, [pc, #304]	; (8003b10 <HAL_GPIO_Init+0x314>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d013      	beq.n	8003a0a <HAL_GPIO_Init+0x20e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a4b      	ldr	r2, [pc, #300]	; (8003b14 <HAL_GPIO_Init+0x318>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00d      	beq.n	8003a06 <HAL_GPIO_Init+0x20a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a4a      	ldr	r2, [pc, #296]	; (8003b18 <HAL_GPIO_Init+0x31c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d007      	beq.n	8003a02 <HAL_GPIO_Init+0x206>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a49      	ldr	r2, [pc, #292]	; (8003b1c <HAL_GPIO_Init+0x320>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d101      	bne.n	80039fe <HAL_GPIO_Init+0x202>
 80039fa:	2306      	movs	r3, #6
 80039fc:	e00c      	b.n	8003a18 <HAL_GPIO_Init+0x21c>
 80039fe:	2307      	movs	r3, #7
 8003a00:	e00a      	b.n	8003a18 <HAL_GPIO_Init+0x21c>
 8003a02:	2305      	movs	r3, #5
 8003a04:	e008      	b.n	8003a18 <HAL_GPIO_Init+0x21c>
 8003a06:	2304      	movs	r3, #4
 8003a08:	e006      	b.n	8003a18 <HAL_GPIO_Init+0x21c>
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e004      	b.n	8003a18 <HAL_GPIO_Init+0x21c>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e002      	b.n	8003a18 <HAL_GPIO_Init+0x21c>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <HAL_GPIO_Init+0x21c>
 8003a16:	2300      	movs	r3, #0
 8003a18:	69fa      	ldr	r2, [r7, #28]
 8003a1a:	f002 0203 	and.w	r2, r2, #3
 8003a1e:	0092      	lsls	r2, r2, #2
 8003a20:	4093      	lsls	r3, r2
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a28:	4935      	ldr	r1, [pc, #212]	; (8003b00 <HAL_GPIO_Init+0x304>)
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	089b      	lsrs	r3, r3, #2
 8003a2e:	3302      	adds	r3, #2
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a36:	4b3a      	ldr	r3, [pc, #232]	; (8003b20 <HAL_GPIO_Init+0x324>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4013      	ands	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a5a:	4a31      	ldr	r2, [pc, #196]	; (8003b20 <HAL_GPIO_Init+0x324>)
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a60:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <HAL_GPIO_Init+0x324>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a84:	4a26      	ldr	r2, [pc, #152]	; (8003b20 <HAL_GPIO_Init+0x324>)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a8a:	4b25      	ldr	r3, [pc, #148]	; (8003b20 <HAL_GPIO_Init+0x324>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	43db      	mvns	r3, r3
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4013      	ands	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aae:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <HAL_GPIO_Init+0x324>)
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <HAL_GPIO_Init+0x324>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ad8:	4a11      	ldr	r2, [pc, #68]	; (8003b20 <HAL_GPIO_Init+0x324>)
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	61fb      	str	r3, [r7, #28]
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	2b0f      	cmp	r3, #15
 8003ae8:	f67f ae96 	bls.w	8003818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003aec:	bf00      	nop
 8003aee:	bf00      	nop
 8003af0:	3724      	adds	r7, #36	; 0x24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40013800 	.word	0x40013800
 8003b04:	40020000 	.word	0x40020000
 8003b08:	40020400 	.word	0x40020400
 8003b0c:	40020800 	.word	0x40020800
 8003b10:	40020c00 	.word	0x40020c00
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40021400 	.word	0x40021400
 8003b1c:	40021800 	.word	0x40021800
 8003b20:	40013c00 	.word	0x40013c00

08003b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	807b      	strh	r3, [r7, #2]
 8003b30:	4613      	mov	r3, r2
 8003b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b34:	787b      	ldrb	r3, [r7, #1]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b3a:	887a      	ldrh	r2, [r7, #2]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b40:	e003      	b.n	8003b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b42:	887b      	ldrh	r3, [r7, #2]
 8003b44:	041a      	lsls	r2, r3, #16
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	619a      	str	r2, [r3, #24]
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b68:	887a      	ldrh	r2, [r7, #2]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	041a      	lsls	r2, r3, #16
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	43d9      	mvns	r1, r3
 8003b74:	887b      	ldrh	r3, [r7, #2]
 8003b76:	400b      	ands	r3, r1
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	619a      	str	r2, [r3, #24]
}
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
	...

08003b8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	603b      	str	r3, [r7, #0]
 8003b9a:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <HAL_PWREx_EnableOverDrive+0x90>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	4a1f      	ldr	r2, [pc, #124]	; (8003c1c <HAL_PWREx_EnableOverDrive+0x90>)
 8003ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <HAL_PWREx_EnableOverDrive+0x90>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bb2:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <HAL_PWREx_EnableOverDrive+0x94>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bb8:	f7ff f8dc 	bl	8002d74 <HAL_GetTick>
 8003bbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bbe:	e009      	b.n	8003bd4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bc0:	f7ff f8d8 	bl	8002d74 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bce:	d901      	bls.n	8003bd4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e01f      	b.n	8003c14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bd4:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be0:	d1ee      	bne.n	8003bc0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003be2:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003be8:	f7ff f8c4 	bl	8002d74 <HAL_GetTick>
 8003bec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bee:	e009      	b.n	8003c04 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bf0:	f7ff f8c0 	bl	8002d74 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bfe:	d901      	bls.n	8003c04 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e007      	b.n	8003c14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c04:	4b07      	ldr	r3, [pc, #28]	; (8003c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c10:	d1ee      	bne.n	8003bf0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	420e0040 	.word	0x420e0040
 8003c24:	40007000 	.word	0x40007000
 8003c28:	420e0044 	.word	0x420e0044

08003c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0cc      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c40:	4b68      	ldr	r3, [pc, #416]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d90c      	bls.n	8003c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b65      	ldr	r3, [pc, #404]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c56:	4b63      	ldr	r3, [pc, #396]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0b8      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d020      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c80:	4b59      	ldr	r3, [pc, #356]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4a58      	ldr	r2, [pc, #352]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c98:	4b53      	ldr	r3, [pc, #332]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	4a52      	ldr	r2, [pc, #328]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca4:	4b50      	ldr	r3, [pc, #320]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	494d      	ldr	r1, [pc, #308]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d044      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d107      	bne.n	8003cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cca:	4b47      	ldr	r3, [pc, #284]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d119      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e07f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d003      	beq.n	8003cea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d107      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cea:	4b3f      	ldr	r3, [pc, #252]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e06f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfa:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e067      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d0a:	4b37      	ldr	r3, [pc, #220]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f023 0203 	bic.w	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4934      	ldr	r1, [pc, #208]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d1c:	f7ff f82a 	bl	8002d74 <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d24:	f7ff f826 	bl	8002d74 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e04f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3a:	4b2b      	ldr	r3, [pc, #172]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 020c 	and.w	r2, r3, #12
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d1eb      	bne.n	8003d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d20c      	bcs.n	8003d74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b22      	ldr	r3, [pc, #136]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d62:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e032      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d80:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4916      	ldr	r1, [pc, #88]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d9e:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	490e      	ldr	r1, [pc, #56]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003db2:	f000 fdc7 	bl	8004944 <HAL_RCC_GetSysClockFreq>
 8003db6:	4602      	mov	r2, r0
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	490a      	ldr	r1, [pc, #40]	; (8003dec <HAL_RCC_ClockConfig+0x1c0>)
 8003dc4:	5ccb      	ldrb	r3, [r1, r3]
 8003dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dca:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe ff8a 	bl	8002cec <HAL_InitTick>

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023c00 	.word	0x40023c00
 8003de8:	40023800 	.word	0x40023800
 8003dec:	08009404 	.word	0x08009404
 8003df0:	20000040 	.word	0x20000040
 8003df4:	20000044 	.word	0x20000044

08003df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	20000040 	.word	0x20000040

08003e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e14:	f7ff fff0 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	0a9b      	lsrs	r3, r3, #10
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	4903      	ldr	r1, [pc, #12]	; (8003e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e26:	5ccb      	ldrb	r3, [r1, r3]
 8003e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40023800 	.word	0x40023800
 8003e34:	08009414 	.word	0x08009414

08003e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e3c:	f7ff ffdc 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8003e40:	4602      	mov	r2, r0
 8003e42:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	0b5b      	lsrs	r3, r3, #13
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	4903      	ldr	r1, [pc, #12]	; (8003e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e4e:	5ccb      	ldrb	r3, [r1, r3]
 8003e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	08009414 	.word	0x08009414

08003e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08c      	sub	sp, #48	; 0x30
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d010      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003e98:	4b6f      	ldr	r3, [pc, #444]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e9e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	496c      	ldr	r1, [pc, #432]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d010      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003ec6:	4b64      	ldr	r3, [pc, #400]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ecc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed4:	4960      	ldr	r1, [pc, #384]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d017      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ef4:	4b58      	ldr	r3, [pc, #352]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003efa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	4955      	ldr	r1, [pc, #340]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f12:	d101      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003f14:	2301      	movs	r3, #1
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003f20:	2301      	movs	r3, #1
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d017      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f30:	4b49      	ldr	r3, [pc, #292]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3e:	4946      	ldr	r1, [pc, #280]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003f50:	2301      	movs	r3, #1
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 808a 	beq.w	8004082 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	4b39      	ldr	r3, [pc, #228]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	4a38      	ldr	r2, [pc, #224]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7e:	4b36      	ldr	r3, [pc, #216]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f8a:	4b34      	ldr	r3, [pc, #208]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a33      	ldr	r2, [pc, #204]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f96:	f7fe feed 	bl	8002d74 <HAL_GetTick>
 8003f9a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f9e:	f7fe fee9 	bl	8002d74 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e278      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fb0:	4b2a      	ldr	r3, [pc, #168]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fbc:	4b26      	ldr	r3, [pc, #152]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d02f      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd4:	6a3a      	ldr	r2, [r7, #32]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d028      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fda:	4b1f      	ldr	r3, [pc, #124]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fe4:	4b1e      	ldr	r3, [pc, #120]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fea:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ff0:	4a19      	ldr	r2, [pc, #100]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ff6:	4b18      	ldr	r3, [pc, #96]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d114      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004002:	f7fe feb7 	bl	8002d74 <HAL_GetTick>
 8004006:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004008:	e00a      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800400a:	f7fe feb3 	bl	8002d74 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f241 3288 	movw	r2, #5000	; 0x1388
 8004018:	4293      	cmp	r3, r2
 800401a:	d901      	bls.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e240      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004020:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0ee      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004038:	d114      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800403a:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800404a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404e:	4902      	ldr	r1, [pc, #8]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004050:	4313      	orrs	r3, r2
 8004052:	608b      	str	r3, [r1, #8]
 8004054:	e00c      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800
 800405c:	40007000 	.word	0x40007000
 8004060:	42470e40 	.word	0x42470e40
 8004064:	4b4a      	ldr	r3, [pc, #296]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4a49      	ldr	r2, [pc, #292]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800406a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800406e:	6093      	str	r3, [r2, #8]
 8004070:	4b47      	ldr	r3, [pc, #284]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004072:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407c:	4944      	ldr	r1, [pc, #272]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800407e:	4313      	orrs	r3, r2
 8004080:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	d004      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004094:	4b3f      	ldr	r3, [pc, #252]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004096:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80040a4:	4b3a      	ldr	r3, [pc, #232]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b2:	4937      	ldr	r1, [pc, #220]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040c6:	4b32      	ldr	r3, [pc, #200]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040cc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d4:	492e      	ldr	r1, [pc, #184]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d011      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040e8:	4b29      	ldr	r3, [pc, #164]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ee:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	4926      	ldr	r1, [pc, #152]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004102:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004106:	d101      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004108:	2301      	movs	r3, #1
 800410a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004118:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800411a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800411e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	491a      	ldr	r1, [pc, #104]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004136:	2b00      	cmp	r3, #0
 8004138:	d011      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800413a:	4b15      	ldr	r3, [pc, #84]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800413c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004140:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004148:	4911      	ldr	r1, [pc, #68]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004158:	d101      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800415a:	2301      	movs	r3, #1
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800415e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d005      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800416c:	f040 80ff 	bne.w	800436e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004176:	f7fe fdfd 	bl	8002d74 <HAL_GetTick>
 800417a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800417c:	e00e      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800417e:	f7fe fdf9 	bl	8002d74 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d907      	bls.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e188      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004190:	40023800 	.word	0x40023800
 8004194:	424711e0 	.word	0x424711e0
 8004198:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800419c:	4b7e      	ldr	r3, [pc, #504]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ea      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d028      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d124      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80041d0:	4b71      	ldr	r3, [pc, #452]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80041d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d6:	0c1b      	lsrs	r3, r3, #16
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	3301      	adds	r3, #1
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041e2:	4b6d      	ldr	r3, [pc, #436]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80041e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e8:	0e1b      	lsrs	r3, r3, #24
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	019b      	lsls	r3, r3, #6
 80041fa:	431a      	orrs	r2, r3
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	085b      	lsrs	r3, r3, #1
 8004200:	3b01      	subs	r3, #1
 8004202:	041b      	lsls	r3, r3, #16
 8004204:	431a      	orrs	r2, r3
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	061b      	lsls	r3, r3, #24
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	071b      	lsls	r3, r3, #28
 8004212:	4961      	ldr	r1, [pc, #388]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	d004      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004238:	2b00      	cmp	r3, #0
 800423a:	d035      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004244:	d130      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004246:	4b54      	ldr	r3, [pc, #336]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800424c:	0c1b      	lsrs	r3, r3, #16
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	3301      	adds	r3, #1
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004258:	4b4f      	ldr	r3, [pc, #316]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800425a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425e:	0f1b      	lsrs	r3, r3, #28
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	019b      	lsls	r3, r3, #6
 8004270:	431a      	orrs	r2, r3
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	085b      	lsrs	r3, r3, #1
 8004276:	3b01      	subs	r3, #1
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	061b      	lsls	r3, r3, #24
 8004282:	431a      	orrs	r2, r3
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	071b      	lsls	r3, r3, #28
 8004288:	4943      	ldr	r1, [pc, #268]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004290:	4b41      	ldr	r3, [pc, #260]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004296:	f023 021f 	bic.w	r2, r3, #31
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	3b01      	subs	r3, #1
 80042a0:	493d      	ldr	r1, [pc, #244]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d029      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042bc:	d124      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80042be:	4b36      	ldr	r3, [pc, #216]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	3301      	adds	r3, #1
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042d0:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d6:	0f1b      	lsrs	r3, r3, #28
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	019b      	lsls	r3, r3, #6
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	085b      	lsrs	r3, r3, #1
 80042f0:	3b01      	subs	r3, #1
 80042f2:	041b      	lsls	r3, r3, #16
 80042f4:	431a      	orrs	r2, r3
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	061b      	lsls	r3, r3, #24
 80042fa:	431a      	orrs	r2, r3
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	071b      	lsls	r3, r3, #28
 8004300:	4925      	ldr	r1, [pc, #148]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004310:	2b00      	cmp	r3, #0
 8004312:	d016      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	019b      	lsls	r3, r3, #6
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	3b01      	subs	r3, #1
 8004328:	041b      	lsls	r3, r3, #16
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	061b      	lsls	r3, r3, #24
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	071b      	lsls	r3, r3, #28
 800433a:	4917      	ldr	r1, [pc, #92]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004342:	4b16      	ldr	r3, [pc, #88]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004344:	2201      	movs	r2, #1
 8004346:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004348:	f7fe fd14 	bl	8002d74 <HAL_GetTick>
 800434c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004350:	f7fe fd10 	bl	8002d74 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e09f      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004362:	4b0d      	ldr	r3, [pc, #52]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	2b01      	cmp	r3, #1
 8004372:	f040 8095 	bne.w	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800437c:	f7fe fcfa 	bl	8002d74 <HAL_GetTick>
 8004380:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004382:	e00f      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004384:	f7fe fcf6 	bl	8002d74 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d908      	bls.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e085      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004396:	bf00      	nop
 8004398:	40023800 	.word	0x40023800
 800439c:	42470068 	.word	0x42470068
 80043a0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043a4:	4b41      	ldr	r3, [pc, #260]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b0:	d0e8      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d009      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d02b      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d127      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80043da:	4b34      	ldr	r3, [pc, #208]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e0:	0c1b      	lsrs	r3, r3, #16
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	3301      	adds	r3, #1
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699a      	ldr	r2, [r3, #24]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	019b      	lsls	r3, r3, #6
 80043f6:	431a      	orrs	r2, r3
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	085b      	lsrs	r3, r3, #1
 80043fc:	3b01      	subs	r3, #1
 80043fe:	041b      	lsls	r3, r3, #16
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	061b      	lsls	r3, r3, #24
 8004408:	4928      	ldr	r1, [pc, #160]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004410:	4b26      	ldr	r3, [pc, #152]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004416:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	3b01      	subs	r3, #1
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	4922      	ldr	r1, [pc, #136]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01d      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800443e:	d118      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004440:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	0e1b      	lsrs	r3, r3, #24
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	019b      	lsls	r3, r3, #6
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	3b01      	subs	r3, #1
 8004462:	041b      	lsls	r3, r3, #16
 8004464:	431a      	orrs	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	061b      	lsls	r3, r3, #24
 800446a:	4910      	ldr	r1, [pc, #64]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004472:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004474:	2201      	movs	r2, #1
 8004476:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004478:	f7fe fc7c 	bl	8002d74 <HAL_GetTick>
 800447c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004480:	f7fe fc78 	bl	8002d74 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e007      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800449a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800449e:	d1ef      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3730      	adds	r7, #48	; 0x30
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40023800 	.word	0x40023800
 80044b0:	42470070 	.word	0x42470070

080044b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b089      	sub	sp, #36	; 0x24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	2b07      	cmp	r3, #7
 80044da:	f200 8224 	bhi.w	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80044de:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80044e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e4:	080046e7 	.word	0x080046e7
 80044e8:	08004811 	.word	0x08004811
 80044ec:	08004927 	.word	0x08004927
 80044f0:	08004505 	.word	0x08004505
 80044f4:	08004927 	.word	0x08004927
 80044f8:	08004927 	.word	0x08004927
 80044fc:	08004927 	.word	0x08004927
 8004500:	08004505 	.word	0x08004505
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8004504:	4ba8      	ldr	r3, [pc, #672]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800450a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800451a:	f000 80d6 	beq.w	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004524:	f200 80dd 	bhi.w	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800452e:	f000 809f 	beq.w	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004538:	f200 80d3 	bhi.w	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004542:	d05b      	beq.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800454a:	f200 80ca 	bhi.w	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004554:	f000 80b6 	beq.w	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800455e:	f200 80c0 	bhi.w	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004568:	f000 8082 	beq.w	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004572:	f200 80b6 	bhi.w	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d004      	beq.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004582:	d03b      	beq.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8004584:	e0ad      	b.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004586:	4b88      	ldr	r3, [pc, #544]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8004592:	4b85      	ldr	r3, [pc, #532]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800459c:	4a83      	ldr	r2, [pc, #524]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800459e:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	e008      	b.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 80045a6:	4b80      	ldr	r3, [pc, #512]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045b0:	4a7f      	ldr	r2, [pc, #508]	; (80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80045b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b6:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80045b8:	4b7b      	ldr	r3, [pc, #492]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	0e1b      	lsrs	r3, r3, #24
 80045c0:	f003 030f 	and.w	r3, r3, #15
 80045c4:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 80045c6:	4b78      	ldr	r3, [pc, #480]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80045c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045cc:	099b      	lsrs	r3, r3, #6
 80045ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	fb03 f202 	mul.w	r2, r3, r2
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	fbb2 f3f3 	udiv	r3, r2, r3
 80045de:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80045e0:	4b71      	ldr	r3, [pc, #452]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80045e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	f003 031f 	and.w	r3, r3, #31
 80045ec:	3301      	adds	r3, #1
 80045ee:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f8:	61fb      	str	r3, [r7, #28]
          break;
 80045fa:	e073      	b.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80045fc:	4b6a      	ldr	r3, [pc, #424]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d109      	bne.n	800461c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004608:	4b67      	ldr	r3, [pc, #412]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800460a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004612:	4a66      	ldr	r2, [pc, #408]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004614:	fbb2 f3f3 	udiv	r3, r2, r3
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	e008      	b.n	800462e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 800461c:	4b62      	ldr	r3, [pc, #392]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800461e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004622:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004626:	4a62      	ldr	r2, [pc, #392]	; (80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004628:	fbb2 f3f3 	udiv	r3, r2, r3
 800462c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800462e:	4b5e      	ldr	r3, [pc, #376]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004634:	0e1b      	lsrs	r3, r3, #24
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 800463c:	4b5a      	ldr	r3, [pc, #360]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800463e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004642:	099b      	lsrs	r3, r3, #6
 8004644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	fb03 f202 	mul.w	r2, r3, r2
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	fbb2 f3f3 	udiv	r3, r2, r3
 8004654:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8004656:	4b54      	ldr	r3, [pc, #336]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800465c:	f003 031f 	and.w	r3, r3, #31
 8004660:	3301      	adds	r3, #1
 8004662:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	fbb2 f3f3 	udiv	r3, r2, r3
 800466c:	61fb      	str	r3, [r7, #28]
          break;
 800466e:	e039      	b.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004670:	4b4d      	ldr	r3, [pc, #308]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d108      	bne.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800467c:	4b4a      	ldr	r3, [pc, #296]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004684:	4a49      	ldr	r2, [pc, #292]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004686:	fbb2 f3f3 	udiv	r3, r2, r3
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	e007      	b.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800468e:	4b46      	ldr	r3, [pc, #280]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004696:	4a46      	ldr	r2, [pc, #280]	; (80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004698:	fbb2 f3f3 	udiv	r3, r2, r3
 800469c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800469e:	4b42      	ldr	r3, [pc, #264]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	0f1b      	lsrs	r3, r3, #28
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 80046aa:	4b3f      	ldr	r3, [pc, #252]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	099b      	lsrs	r3, r3, #6
 80046b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	fb03 f202 	mul.w	r2, r3, r2
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c0:	61fb      	str	r3, [r7, #28]
          break;
 80046c2:	e00f      	b.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 80046c4:	4b3b      	ldr	r3, [pc, #236]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80046c6:	61fb      	str	r3, [r7, #28]
          break;
 80046c8:	e00c      	b.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80046ca:	4b37      	ldr	r3, [pc, #220]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d102      	bne.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80046d6:	4b35      	ldr	r3, [pc, #212]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046d8:	61fb      	str	r3, [r7, #28]
          break;
 80046da:	e003      	b.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80046dc:	4b34      	ldr	r3, [pc, #208]	; (80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80046de:	61fb      	str	r3, [r7, #28]
          break;
 80046e0:	e000      	b.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80046e2:	bf00      	nop
        }
      }
      break;
 80046e4:	e11f      	b.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80046e6:	4b30      	ldr	r3, [pc, #192]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ec:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80046f8:	d079      	beq.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004700:	f200 8082 	bhi.w	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800470a:	d03c      	beq.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004712:	d879      	bhi.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d006      	beq.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004720:	d172      	bne.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004722:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004724:	61fb      	str	r3, [r7, #28]
          break;
 8004726:	e072      	b.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004728:	4b1f      	ldr	r3, [pc, #124]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004734:	d109      	bne.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004736:	4b1c      	ldr	r3, [pc, #112]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004740:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004742:	fbb2 f3f3 	udiv	r3, r2, r3
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	e008      	b.n	800475c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800474a:	4b17      	ldr	r3, [pc, #92]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800474c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004754:	4a15      	ldr	r2, [pc, #84]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004756:	fbb2 f3f3 	udiv	r3, r2, r3
 800475a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800475c:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800475e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004762:	099b      	lsrs	r3, r3, #6
 8004764:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004770:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004776:	0f1b      	lsrs	r3, r3, #28
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004782:	61fb      	str	r3, [r7, #28]
          break;
 8004784:	e043      	b.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004786:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004792:	d111      	bne.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004794:	4b04      	ldr	r3, [pc, #16]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800479c:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800479e:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a2:	61bb      	str	r3, [r7, #24]
 80047a4:	e010      	b.n	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80047a6:	bf00      	nop
 80047a8:	40023800 	.word	0x40023800
 80047ac:	00f42400 	.word	0x00f42400
 80047b0:	017d7840 	.word	0x017d7840
 80047b4:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047b8:	4b5e      	ldr	r3, [pc, #376]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c0:	4a5d      	ldr	r2, [pc, #372]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80047c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c6:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80047c8:	4b5a      	ldr	r3, [pc, #360]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	099b      	lsrs	r3, r3, #6
 80047ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	fb02 f303 	mul.w	r3, r2, r3
 80047d8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80047da:	4b56      	ldr	r3, [pc, #344]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	0f1b      	lsrs	r3, r3, #28
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ea:	61fb      	str	r3, [r7, #28]
          break;
 80047ec:	e00f      	b.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047ee:	4b51      	ldr	r3, [pc, #324]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047fa:	d102      	bne.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80047fc:	4b4f      	ldr	r3, [pc, #316]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80047fe:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004800:	e005      	b.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8004802:	4b4d      	ldr	r3, [pc, #308]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004804:	61fb      	str	r3, [r7, #28]
          break;
 8004806:	e002      	b.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	61fb      	str	r3, [r7, #28]
          break;
 800480c:	bf00      	nop
        }
      }
      break;
 800480e:	e08a      	b.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004810:	4b48      	ldr	r3, [pc, #288]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004816:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004822:	d06f      	beq.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800482a:	d878      	bhi.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004832:	d03c      	beq.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800483a:	d870      	bhi.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d006      	beq.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004848:	d169      	bne.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800484a:	4b3d      	ldr	r3, [pc, #244]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800484c:	61fb      	str	r3, [r7, #28]
          break;
 800484e:	e069      	b.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004850:	4b38      	ldr	r3, [pc, #224]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800485c:	d109      	bne.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800485e:	4b35      	ldr	r3, [pc, #212]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004868:	4a34      	ldr	r2, [pc, #208]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800486a:	fbb2 f3f3 	udiv	r3, r2, r3
 800486e:	61bb      	str	r3, [r7, #24]
 8004870:	e008      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004872:	4b30      	ldr	r3, [pc, #192]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800487c:	4a2e      	ldr	r2, [pc, #184]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800487e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004882:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004884:	4b2b      	ldr	r3, [pc, #172]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488a:	099b      	lsrs	r3, r3, #6
 800488c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004898:	4b26      	ldr	r3, [pc, #152]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800489a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800489e:	0f1b      	lsrs	r3, r3, #28
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048aa:	61fb      	str	r3, [r7, #28]
          break;
 80048ac:	e03a      	b.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048ae:	4b21      	ldr	r3, [pc, #132]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ba:	d108      	bne.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048bc:	4b1d      	ldr	r3, [pc, #116]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c4:	4a1d      	ldr	r2, [pc, #116]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80048c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ca:	61bb      	str	r3, [r7, #24]
 80048cc:	e007      	b.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048ce:	4b19      	ldr	r3, [pc, #100]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048d6:	4a18      	ldr	r2, [pc, #96]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80048d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048dc:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80048de:	4b15      	ldr	r3, [pc, #84]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	099b      	lsrs	r3, r3, #6
 80048e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80048f0:	4b10      	ldr	r3, [pc, #64]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	0f1b      	lsrs	r3, r3, #28
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004900:	61fb      	str	r3, [r7, #28]
          break;
 8004902:	e00f      	b.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004910:	d102      	bne.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8004912:	4b0a      	ldr	r3, [pc, #40]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004914:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004916:	e005      	b.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8004918:	4b07      	ldr	r3, [pc, #28]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800491a:	61fb      	str	r3, [r7, #28]
          break;
 800491c:	e002      	b.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
          break;
 8004922:	bf00      	nop
        }
      }
      break;
 8004924:	bf00      	nop
    }
  }
  return frequency;
 8004926:	69fb      	ldr	r3, [r7, #28]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3724      	adds	r7, #36	; 0x24
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	40023800 	.word	0x40023800
 8004938:	00f42400 	.word	0x00f42400
 800493c:	017d7840 	.word	0x017d7840
 8004940:	00bb8000 	.word	0x00bb8000

08004944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004948:	b0a6      	sub	sp, #152	; 0x98
 800494a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800496a:	4bc8      	ldr	r3, [pc, #800]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
 8004972:	2b0c      	cmp	r3, #12
 8004974:	f200 817e 	bhi.w	8004c74 <HAL_RCC_GetSysClockFreq+0x330>
 8004978:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <HAL_RCC_GetSysClockFreq+0x3c>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	080049b5 	.word	0x080049b5
 8004984:	08004c75 	.word	0x08004c75
 8004988:	08004c75 	.word	0x08004c75
 800498c:	08004c75 	.word	0x08004c75
 8004990:	080049bd 	.word	0x080049bd
 8004994:	08004c75 	.word	0x08004c75
 8004998:	08004c75 	.word	0x08004c75
 800499c:	08004c75 	.word	0x08004c75
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	08004c75 	.word	0x08004c75
 80049a8:	08004c75 	.word	0x08004c75
 80049ac:	08004c75 	.word	0x08004c75
 80049b0:	08004b2f 	.word	0x08004b2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049b4:	4bb6      	ldr	r3, [pc, #728]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x34c>)
 80049b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80049ba:	e15f      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049bc:	4bb5      	ldr	r3, [pc, #724]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x350>)
 80049be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80049c2:	e15b      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049c4:	4bb1      	ldr	r3, [pc, #708]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049d0:	4bae      	ldr	r3, [pc, #696]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d031      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049dc:	4bab      	ldr	r3, [pc, #684]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	099b      	lsrs	r3, r3, #6
 80049e2:	2200      	movs	r2, #0
 80049e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80049e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ee:	663b      	str	r3, [r7, #96]	; 0x60
 80049f0:	2300      	movs	r3, #0
 80049f2:	667b      	str	r3, [r7, #100]	; 0x64
 80049f4:	4ba7      	ldr	r3, [pc, #668]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x350>)
 80049f6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80049fa:	462a      	mov	r2, r5
 80049fc:	fb03 f202 	mul.w	r2, r3, r2
 8004a00:	2300      	movs	r3, #0
 8004a02:	4621      	mov	r1, r4
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	4413      	add	r3, r2
 8004a0a:	4aa2      	ldr	r2, [pc, #648]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x350>)
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	fba1 1202 	umull	r1, r2, r1, r2
 8004a12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a14:	460a      	mov	r2, r1
 8004a16:	67ba      	str	r2, [r7, #120]	; 0x78
 8004a18:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004a1a:	4413      	add	r3, r2
 8004a1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a22:	2200      	movs	r2, #0
 8004a24:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a26:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004a28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a2c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004a30:	f7fb fc46 	bl	80002c0 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4613      	mov	r3, r2
 8004a3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a3e:	e064      	b.n	8004b0a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a40:	4b92      	ldr	r3, [pc, #584]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	099b      	lsrs	r3, r3, #6
 8004a46:	2200      	movs	r2, #0
 8004a48:	653b      	str	r3, [r7, #80]	; 0x50
 8004a4a:	657a      	str	r2, [r7, #84]	; 0x54
 8004a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a54:	2300      	movs	r3, #0
 8004a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a58:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004a5c:	4622      	mov	r2, r4
 8004a5e:	462b      	mov	r3, r5
 8004a60:	f04f 0000 	mov.w	r0, #0
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	0159      	lsls	r1, r3, #5
 8004a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a6e:	0150      	lsls	r0, r2, #5
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4621      	mov	r1, r4
 8004a76:	1a51      	subs	r1, r2, r1
 8004a78:	6139      	str	r1, [r7, #16]
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	eb63 0301 	sbc.w	r3, r3, r1
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a8e:	4659      	mov	r1, fp
 8004a90:	018b      	lsls	r3, r1, #6
 8004a92:	4651      	mov	r1, sl
 8004a94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a98:	4651      	mov	r1, sl
 8004a9a:	018a      	lsls	r2, r1, #6
 8004a9c:	4651      	mov	r1, sl
 8004a9e:	ebb2 0801 	subs.w	r8, r2, r1
 8004aa2:	4659      	mov	r1, fp
 8004aa4:	eb63 0901 	sbc.w	r9, r3, r1
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ab4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ab8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004abc:	4690      	mov	r8, r2
 8004abe:	4699      	mov	r9, r3
 8004ac0:	4623      	mov	r3, r4
 8004ac2:	eb18 0303 	adds.w	r3, r8, r3
 8004ac6:	60bb      	str	r3, [r7, #8]
 8004ac8:	462b      	mov	r3, r5
 8004aca:	eb49 0303 	adc.w	r3, r9, r3
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004adc:	4629      	mov	r1, r5
 8004ade:	028b      	lsls	r3, r1, #10
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	028a      	lsls	r2, r1, #10
 8004aea:	4610      	mov	r0, r2
 8004aec:	4619      	mov	r1, r3
 8004aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004af2:	2200      	movs	r2, #0
 8004af4:	643b      	str	r3, [r7, #64]	; 0x40
 8004af6:	647a      	str	r2, [r7, #68]	; 0x44
 8004af8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004afc:	f7fb fbe0 	bl	80002c0 <__aeabi_uldivmod>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4613      	mov	r3, r2
 8004b06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b0a:	4b60      	ldr	r3, [pc, #384]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	0c1b      	lsrs	r3, r3, #16
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	3301      	adds	r3, #1
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004b1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004b2c:	e0a6      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b2e:	4b57      	ldr	r3, [pc, #348]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b3a:	4b54      	ldr	r3, [pc, #336]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d02a      	beq.n	8004b9c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b46:	4b51      	ldr	r3, [pc, #324]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	099b      	lsrs	r3, r3, #6
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4b4e      	ldr	r3, [pc, #312]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x350>)
 8004b5c:	fb03 f201 	mul.w	r2, r3, r1
 8004b60:	2300      	movs	r3, #0
 8004b62:	fb00 f303 	mul.w	r3, r0, r3
 8004b66:	4413      	add	r3, r2
 8004b68:	4a4a      	ldr	r2, [pc, #296]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x350>)
 8004b6a:	fba0 1202 	umull	r1, r2, r0, r2
 8004b6e:	677a      	str	r2, [r7, #116]	; 0x74
 8004b70:	460a      	mov	r2, r1
 8004b72:	673a      	str	r2, [r7, #112]	; 0x70
 8004b74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004b76:	4413      	add	r3, r2
 8004b78:	677b      	str	r3, [r7, #116]	; 0x74
 8004b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b7e:	2200      	movs	r2, #0
 8004b80:	633b      	str	r3, [r7, #48]	; 0x30
 8004b82:	637a      	str	r2, [r7, #52]	; 0x34
 8004b84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b88:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004b8c:	f7fb fb98 	bl	80002c0 <__aeabi_uldivmod>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4613      	mov	r3, r2
 8004b96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b9a:	e05b      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b9c:	4b3b      	ldr	r3, [pc, #236]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	099b      	lsrs	r3, r3, #6
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bae:	623b      	str	r3, [r7, #32]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bb8:	4642      	mov	r2, r8
 8004bba:	464b      	mov	r3, r9
 8004bbc:	f04f 0000 	mov.w	r0, #0
 8004bc0:	f04f 0100 	mov.w	r1, #0
 8004bc4:	0159      	lsls	r1, r3, #5
 8004bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bca:	0150      	lsls	r0, r2, #5
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004be8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bf0:	ebb2 040a 	subs.w	r4, r2, sl
 8004bf4:	eb63 050b 	sbc.w	r5, r3, fp
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	00eb      	lsls	r3, r5, #3
 8004c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c06:	00e2      	lsls	r2, r4, #3
 8004c08:	4614      	mov	r4, r2
 8004c0a:	461d      	mov	r5, r3
 8004c0c:	4643      	mov	r3, r8
 8004c0e:	18e3      	adds	r3, r4, r3
 8004c10:	603b      	str	r3, [r7, #0]
 8004c12:	464b      	mov	r3, r9
 8004c14:	eb45 0303 	adc.w	r3, r5, r3
 8004c18:	607b      	str	r3, [r7, #4]
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c26:	4629      	mov	r1, r5
 8004c28:	028b      	lsls	r3, r1, #10
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c30:	4621      	mov	r1, r4
 8004c32:	028a      	lsls	r2, r1, #10
 8004c34:	4610      	mov	r0, r2
 8004c36:	4619      	mov	r1, r3
 8004c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	61bb      	str	r3, [r7, #24]
 8004c40:	61fa      	str	r2, [r7, #28]
 8004c42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c46:	f7fb fb3b 	bl	80002c0 <__aeabi_uldivmod>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4613      	mov	r3, r2
 8004c50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c54:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	0f1b      	lsrs	r3, r3, #28
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004c62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004c72:	e003      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c74:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004c76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004c7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3798      	adds	r7, #152	; 0x98
 8004c84:	46bd      	mov	sp, r7
 8004c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	00f42400 	.word	0x00f42400
 8004c94:	017d7840 	.word	0x017d7840

08004c98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e28d      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8083 	beq.w	8004dbe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004cb8:	4b94      	ldr	r3, [pc, #592]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 030c 	and.w	r3, r3, #12
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d019      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004cc4:	4b91      	ldr	r3, [pc, #580]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d106      	bne.n	8004cde <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004cd0:	4b8e      	ldr	r3, [pc, #568]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cdc:	d00c      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cde:	4b8b      	ldr	r3, [pc, #556]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ce6:	2b0c      	cmp	r3, #12
 8004ce8:	d112      	bne.n	8004d10 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cea:	4b88      	ldr	r3, [pc, #544]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf6:	d10b      	bne.n	8004d10 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf8:	4b84      	ldr	r3, [pc, #528]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d05b      	beq.n	8004dbc <HAL_RCC_OscConfig+0x124>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d157      	bne.n	8004dbc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e25a      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d18:	d106      	bne.n	8004d28 <HAL_RCC_OscConfig+0x90>
 8004d1a:	4b7c      	ldr	r3, [pc, #496]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a7b      	ldr	r2, [pc, #492]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	e01d      	b.n	8004d64 <HAL_RCC_OscConfig+0xcc>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d30:	d10c      	bne.n	8004d4c <HAL_RCC_OscConfig+0xb4>
 8004d32:	4b76      	ldr	r3, [pc, #472]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a75      	ldr	r2, [pc, #468]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	4b73      	ldr	r3, [pc, #460]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a72      	ldr	r2, [pc, #456]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	e00b      	b.n	8004d64 <HAL_RCC_OscConfig+0xcc>
 8004d4c:	4b6f      	ldr	r3, [pc, #444]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a6e      	ldr	r2, [pc, #440]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	4b6c      	ldr	r3, [pc, #432]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a6b      	ldr	r2, [pc, #428]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d013      	beq.n	8004d94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fe f802 	bl	8002d74 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fd fffe 	bl	8002d74 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	; 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e21f      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d86:	4b61      	ldr	r3, [pc, #388]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0xdc>
 8004d92:	e014      	b.n	8004dbe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fd ffee 	bl	8002d74 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d9c:	f7fd ffea 	bl	8002d74 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	; 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e20b      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dae:	4b57      	ldr	r3, [pc, #348]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0x104>
 8004dba:	e000      	b.n	8004dbe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d06f      	beq.n	8004eaa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004dca:	4b50      	ldr	r3, [pc, #320]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d017      	beq.n	8004e06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004dd6:	4b4d      	ldr	r3, [pc, #308]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d105      	bne.n	8004dee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004de2:	4b4a      	ldr	r3, [pc, #296]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00b      	beq.n	8004e06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dee:	4b47      	ldr	r3, [pc, #284]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004df6:	2b0c      	cmp	r3, #12
 8004df8:	d11c      	bne.n	8004e34 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dfa:	4b44      	ldr	r3, [pc, #272]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d116      	bne.n	8004e34 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e06:	4b41      	ldr	r3, [pc, #260]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d005      	beq.n	8004e1e <HAL_RCC_OscConfig+0x186>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d001      	beq.n	8004e1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e1d3      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e1e:	4b3b      	ldr	r3, [pc, #236]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	4937      	ldr	r1, [pc, #220]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e32:	e03a      	b.n	8004eaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d020      	beq.n	8004e7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e3c:	4b34      	ldr	r3, [pc, #208]	; (8004f10 <HAL_RCC_OscConfig+0x278>)
 8004e3e:	2201      	movs	r2, #1
 8004e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e42:	f7fd ff97 	bl	8002d74 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e4a:	f7fd ff93 	bl	8002d74 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e1b4      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5c:	4b2b      	ldr	r3, [pc, #172]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e68:	4b28      	ldr	r3, [pc, #160]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	4925      	ldr	r1, [pc, #148]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	600b      	str	r3, [r1, #0]
 8004e7c:	e015      	b.n	8004eaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e7e:	4b24      	ldr	r3, [pc, #144]	; (8004f10 <HAL_RCC_OscConfig+0x278>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e84:	f7fd ff76 	bl	8002d74 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e8c:	f7fd ff72 	bl	8002d74 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e193      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e9e:	4b1b      	ldr	r3, [pc, #108]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f0      	bne.n	8004e8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d036      	beq.n	8004f24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d016      	beq.n	8004eec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ebe:	4b15      	ldr	r3, [pc, #84]	; (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec4:	f7fd ff56 	bl	8002d74 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ecc:	f7fd ff52 	bl	8002d74 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e173      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ede:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <HAL_RCC_OscConfig+0x234>
 8004eea:	e01b      	b.n	8004f24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eec:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef2:	f7fd ff3f 	bl	8002d74 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef8:	e00e      	b.n	8004f18 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004efa:	f7fd ff3b 	bl	8002d74 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d907      	bls.n	8004f18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e15c      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	42470000 	.word	0x42470000
 8004f14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f18:	4b8a      	ldr	r3, [pc, #552]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1ea      	bne.n	8004efa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 8097 	beq.w	8005060 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f32:	2300      	movs	r3, #0
 8004f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f36:	4b83      	ldr	r3, [pc, #524]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10f      	bne.n	8004f62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]
 8004f46:	4b7f      	ldr	r3, [pc, #508]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	4a7e      	ldr	r2, [pc, #504]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f50:	6413      	str	r3, [r2, #64]	; 0x40
 8004f52:	4b7c      	ldr	r3, [pc, #496]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5a:	60bb      	str	r3, [r7, #8]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f62:	4b79      	ldr	r3, [pc, #484]	; (8005148 <HAL_RCC_OscConfig+0x4b0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d118      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f6e:	4b76      	ldr	r3, [pc, #472]	; (8005148 <HAL_RCC_OscConfig+0x4b0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a75      	ldr	r2, [pc, #468]	; (8005148 <HAL_RCC_OscConfig+0x4b0>)
 8004f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f7a:	f7fd fefb 	bl	8002d74 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f82:	f7fd fef7 	bl	8002d74 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e118      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f94:	4b6c      	ldr	r3, [pc, #432]	; (8005148 <HAL_RCC_OscConfig+0x4b0>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f0      	beq.n	8004f82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d106      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x31e>
 8004fa8:	4b66      	ldr	r3, [pc, #408]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fac:	4a65      	ldr	r2, [pc, #404]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb4:	e01c      	b.n	8004ff0 <HAL_RCC_OscConfig+0x358>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b05      	cmp	r3, #5
 8004fbc:	d10c      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x340>
 8004fbe:	4b61      	ldr	r3, [pc, #388]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	4a60      	ldr	r2, [pc, #384]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fc4:	f043 0304 	orr.w	r3, r3, #4
 8004fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fca:	4b5e      	ldr	r3, [pc, #376]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fce:	4a5d      	ldr	r2, [pc, #372]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fd6:	e00b      	b.n	8004ff0 <HAL_RCC_OscConfig+0x358>
 8004fd8:	4b5a      	ldr	r3, [pc, #360]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	4a59      	ldr	r2, [pc, #356]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fde:	f023 0301 	bic.w	r3, r3, #1
 8004fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe4:	4b57      	ldr	r3, [pc, #348]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe8:	4a56      	ldr	r2, [pc, #344]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fea:	f023 0304 	bic.w	r3, r3, #4
 8004fee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d015      	beq.n	8005024 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff8:	f7fd febc 	bl	8002d74 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ffe:	e00a      	b.n	8005016 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005000:	f7fd feb8 	bl	8002d74 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	f241 3288 	movw	r2, #5000	; 0x1388
 800500e:	4293      	cmp	r3, r2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e0d7      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005016:	4b4b      	ldr	r3, [pc, #300]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0ee      	beq.n	8005000 <HAL_RCC_OscConfig+0x368>
 8005022:	e014      	b.n	800504e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005024:	f7fd fea6 	bl	8002d74 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800502a:	e00a      	b.n	8005042 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800502c:	f7fd fea2 	bl	8002d74 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	f241 3288 	movw	r2, #5000	; 0x1388
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e0c1      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005042:	4b40      	ldr	r3, [pc, #256]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8005044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1ee      	bne.n	800502c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800504e:	7dfb      	ldrb	r3, [r7, #23]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d105      	bne.n	8005060 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005054:	4b3b      	ldr	r3, [pc, #236]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	4a3a      	ldr	r2, [pc, #232]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 800505a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800505e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80ad 	beq.w	80051c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800506a:	4b36      	ldr	r3, [pc, #216]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 030c 	and.w	r3, r3, #12
 8005072:	2b08      	cmp	r3, #8
 8005074:	d060      	beq.n	8005138 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	2b02      	cmp	r3, #2
 800507c:	d145      	bne.n	800510a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507e:	4b33      	ldr	r3, [pc, #204]	; (800514c <HAL_RCC_OscConfig+0x4b4>)
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fd fe76 	bl	8002d74 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800508c:	f7fd fe72 	bl	8002d74 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e093      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509e:	4b29      	ldr	r3, [pc, #164]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69da      	ldr	r2, [r3, #28]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	019b      	lsls	r3, r3, #6
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	085b      	lsrs	r3, r3, #1
 80050c2:	3b01      	subs	r3, #1
 80050c4:	041b      	lsls	r3, r3, #16
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	061b      	lsls	r3, r3, #24
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	071b      	lsls	r3, r3, #28
 80050d6:	491b      	ldr	r1, [pc, #108]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050dc:	4b1b      	ldr	r3, [pc, #108]	; (800514c <HAL_RCC_OscConfig+0x4b4>)
 80050de:	2201      	movs	r2, #1
 80050e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e2:	f7fd fe47 	bl	8002d74 <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ea:	f7fd fe43 	bl	8002d74 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e064      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050fc:	4b11      	ldr	r3, [pc, #68]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0f0      	beq.n	80050ea <HAL_RCC_OscConfig+0x452>
 8005108:	e05c      	b.n	80051c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510a:	4b10      	ldr	r3, [pc, #64]	; (800514c <HAL_RCC_OscConfig+0x4b4>)
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005110:	f7fd fe30 	bl	8002d74 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005118:	f7fd fe2c 	bl	8002d74 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e04d      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800512a:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f0      	bne.n	8005118 <HAL_RCC_OscConfig+0x480>
 8005136:	e045      	b.n	80051c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d107      	bne.n	8005150 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e040      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
 8005144:	40023800 	.word	0x40023800
 8005148:	40007000 	.word	0x40007000
 800514c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005150:	4b1f      	ldr	r3, [pc, #124]	; (80051d0 <HAL_RCC_OscConfig+0x538>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d030      	beq.n	80051c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005168:	429a      	cmp	r2, r3
 800516a:	d129      	bne.n	80051c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005176:	429a      	cmp	r2, r3
 8005178:	d122      	bne.n	80051c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005180:	4013      	ands	r3, r2
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005186:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005188:	4293      	cmp	r3, r2
 800518a:	d119      	bne.n	80051c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	085b      	lsrs	r3, r3, #1
 8005198:	3b01      	subs	r3, #1
 800519a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800519c:	429a      	cmp	r2, r3
 800519e:	d10f      	bne.n	80051c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d107      	bne.n	80051c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051bc:	429a      	cmp	r2, r3
 80051be:	d001      	beq.n	80051c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40023800 	.word	0x40023800

080051d4 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d904      	bls.n	80051f6 <HAL_SAI_InitProtocol+0x22>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	3b03      	subs	r3, #3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d812      	bhi.n	800521a <HAL_SAI_InitProtocol+0x46>
 80051f4:	e008      	b.n	8005208 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 f9dd 	bl	80055bc <SAI_InitI2S>
 8005202:	4603      	mov	r3, r0
 8005204:	75fb      	strb	r3, [r7, #23]
      break;
 8005206:	e00b      	b.n	8005220 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 fa82 	bl	8005718 <SAI_InitPCM>
 8005214:	4603      	mov	r3, r0
 8005216:	75fb      	strb	r3, [r7, #23]
      break;
 8005218:	e002      	b.n	8005220 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	75fb      	strb	r3, [r7, #23]
      break;
 800521e:	bf00      	nop
  }

  if (status == HAL_OK)
 8005220:	7dfb      	ldrb	r3, [r7, #23]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d104      	bne.n	8005230 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f808 	bl	800523c <HAL_SAI_Init>
 800522c:	4603      	mov	r3, r0
 800522e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005230:	7dfb      	ldrb	r3, [r7, #23]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e10c      	b.n	8005478 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7fd fb96 	bl	80029a4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 faff 	bl	8005884 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fba6 	bl	80059d8 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d030      	beq.n	80052f6 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fbe3 	bl	8005a60 <SAI_GetInputClock>
 800529a:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	461a      	mov	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	025b      	lsls	r3, r3, #9
 80052ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b2:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4a72      	ldr	r2, [pc, #456]	; (8005480 <HAL_SAI_Init+0x244>)
 80052b8:	fba2 2303 	umull	r2, r3, r2, r3
 80052bc:	08da      	lsrs	r2, r3, #3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 80052c2:	68f9      	ldr	r1, [r7, #12]
 80052c4:	4b6e      	ldr	r3, [pc, #440]	; (8005480 <HAL_SAI_Init+0x244>)
 80052c6:	fba3 2301 	umull	r2, r3, r3, r1
 80052ca:	08da      	lsrs	r2, r3, #3
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	1aca      	subs	r2, r1, r3
 80052d6:	2a08      	cmp	r2, #8
 80052d8:	d904      	bls.n	80052e4 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d104      	bne.n	80052f6 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	085a      	lsrs	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_SAI_Init+0xca>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d109      	bne.n	800531a <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_SAI_Init+0xd6>
 800530e:	2300      	movs	r3, #0
 8005310:	e001      	b.n	8005316 <HAL_SAI_Init+0xda>
 8005312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e008      	b.n	800532c <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	2b01      	cmp	r3, #1
 8005320:	d102      	bne.n	8005328 <HAL_SAI_Init+0xec>
 8005322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005326:	e000      	b.n	800532a <HAL_SAI_Init+0xee>
 8005328:	2300      	movs	r3, #0
 800532a:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2b03      	cmp	r3, #3
 8005332:	d811      	bhi.n	8005358 <HAL_SAI_Init+0x11c>
 8005334:	2b02      	cmp	r3, #2
 8005336:	d20b      	bcs.n	8005350 <HAL_SAI_Init+0x114>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <HAL_SAI_Init+0x106>
 800533c:	2b01      	cmp	r3, #1
 800533e:	d003      	beq.n	8005348 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8005340:	e00a      	b.n	8005358 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	613b      	str	r3, [r7, #16]
    break;
 8005346:	e008      	b.n	800535a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800534c:	613b      	str	r3, [r7, #16]
    break;
 800534e:	e004      	b.n	800535a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005350:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005354:	613b      	str	r3, [r7, #16]
    break;
 8005356:	e000      	b.n	800535a <HAL_SAI_Init+0x11e>
      break;
 8005358:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6819      	ldr	r1, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	4b47      	ldr	r3, [pc, #284]	; (8005484 <HAL_SAI_Init+0x248>)
 8005366:	400b      	ands	r3, r1
 8005368:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6819      	ldr	r1, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005378:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800537e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005384:	431a      	orrs	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8005392:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800539e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	051b      	lsls	r3, r3, #20
 80053a6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6812      	ldr	r2, [r2, #0]
 80053ba:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80053be:	f023 030f 	bic.w	r3, r3, #15
 80053c2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6859      	ldr	r1, [r3, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6899      	ldr	r1, [r3, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	4b26      	ldr	r3, [pc, #152]	; (8005488 <HAL_SAI_Init+0x24c>)
 80053ee:	400b      	ands	r3, r1
 80053f0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6899      	ldr	r1, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005402:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 8005408:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 800540e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005414:	3b01      	subs	r3, #1
 8005416:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005418:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68d9      	ldr	r1, [r3, #12]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005430:	400b      	ands	r3, r1
 8005432:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68d9      	ldr	r1, [r3, #12]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005442:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005448:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800544a:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005450:	3b01      	subs	r3, #1
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	cccccccd 	.word	0xcccccccd
 8005484:	ff05c010 	.word	0xff05c010
 8005488:	fff88000 	.word	0xfff88000

0800548c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	4613      	mov	r3, r2
 8005498:	80fb      	strh	r3, [r7, #6]
  if ((pData == NULL) || (Size == 0))
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <HAL_SAI_Receive_DMA+0x1a>
 80054a0:	88fb      	ldrh	r3, [r7, #6]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e074      	b.n	8005594 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d16d      	bne.n	8005592 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_SAI_Receive_DMA+0x38>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e067      	b.n	8005594 <HAL_SAI_Receive_DMA+0x108>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hsai->pBuffPtr = pData;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	669a      	str	r2, [r3, #104]	; 0x68
    hsai->XferSize = Size;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	88fa      	ldrh	r2, [r7, #6]
 80054d6:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    hsai->XferCount = Size;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	88fa      	ldrh	r2, [r7, #6]
 80054de:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2222      	movs	r2, #34	; 0x22
 80054ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f6:	4a29      	ldr	r2, [pc, #164]	; (800559c <HAL_SAI_Receive_DMA+0x110>)
 80054f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054fe:	4a28      	ldr	r2, [pc, #160]	; (80055a0 <HAL_SAI_Receive_DMA+0x114>)
 8005500:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005506:	4a27      	ldr	r2, [pc, #156]	; (80055a4 <HAL_SAI_Receive_DMA+0x118>)
 8005508:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800550e:	2200      	movs	r2, #0
 8005510:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	331c      	adds	r3, #28
 800551c:	4619      	mov	r1, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005522:	461a      	mov	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800552a:	f7fd fe13 	bl	8003154 <HAL_DMA_Start_IT>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d005      	beq.n	8005540 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return  HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e029      	b.n	8005594 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005540:	2100      	movs	r1, #0
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 f968 	bl	8005818 <SAI_InterruptFlag>
 8005548:	4601      	mov	r1, r0
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005566:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d107      	bne.n	8005586 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005584:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	e000      	b.n	8005594 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8005592:	2302      	movs	r3, #2
  }
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	08005955 	.word	0x08005955
 80055a0:	080058f5 	.word	0x080058f5
 80055a4:	08005971 	.word	0x08005971

080055a8 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <SAI_InitI2S+0x2a>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d103      	bne.n	80055ee <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	641a      	str	r2, [r3, #64]	; 0x40
 80055ec:	e002      	b.n	80055f4 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80055fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005602:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	661a      	str	r2, [r3, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e076      	b.n	800570c <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d107      	bne.n	8005634 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005630:	655a      	str	r2, [r3, #84]	; 0x54
 8005632:	e006      	b.n	8005642 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800563a:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Frame definition */
  switch (datasize)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b03      	cmp	r3, #3
 8005646:	d84f      	bhi.n	80056e8 <SAI_InitI2S+0x12c>
 8005648:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <SAI_InitI2S+0x94>)
 800564a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564e:	bf00      	nop
 8005650:	08005661 	.word	0x08005661
 8005654:	08005683 	.word	0x08005683
 8005658:	080056a5 	.word	0x080056a5
 800565c:	080056c7 	.word	0x080056c7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2280      	movs	r2, #128	; 0x80
 8005664:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	085b      	lsrs	r3, r3, #1
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	085b      	lsrs	r3, r3, #1
 8005674:	011a      	lsls	r2, r3, #4
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2240      	movs	r2, #64	; 0x40
 800567e:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005680:	e034      	b.n	80056ec <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2280      	movs	r2, #128	; 0x80
 8005686:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	085b      	lsrs	r3, r3, #1
 800568c:	019a      	lsls	r2, r3, #6
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	085b      	lsrs	r3, r3, #1
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2280      	movs	r2, #128	; 0x80
 80056a0:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80056a2:	e023      	b.n	80056ec <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	22c0      	movs	r2, #192	; 0xc0
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	085b      	lsrs	r3, r3, #1
 80056ae:	019a      	lsls	r2, r3, #6
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	085b      	lsrs	r3, r3, #1
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2280      	movs	r2, #128	; 0x80
 80056c2:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80056c4:	e012      	b.n	80056ec <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	22e0      	movs	r2, #224	; 0xe0
 80056ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	085b      	lsrs	r3, r3, #1
 80056d0:	019a      	lsls	r2, r3, #6
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	085b      	lsrs	r3, r3, #1
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2280      	movs	r2, #128	; 0x80
 80056e4:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80056e6:	e001      	b.n	80056ec <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e00f      	b.n	800570c <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d10b      	bne.n	800570a <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d102      	bne.n	80056fe <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2210      	movs	r2, #16
 80056fc:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d102      	bne.n	800570a <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2208      	movs	r2, #8
 8005708:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <SAI_InitPCM+0x2a>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d103      	bne.n	800574a <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	641a      	str	r2, [r3, #64]	; 0x40
 8005748:	e002      	b.n	8005750 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800575c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005764:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005778:	665a      	str	r2, [r3, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b04      	cmp	r3, #4
 800577e:	d103      	bne.n	8005788 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	649a      	str	r2, [r3, #72]	; 0x48
 8005786:	e002      	b.n	800578e <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	220d      	movs	r2, #13
 800578c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  switch (datasize)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b03      	cmp	r3, #3
 8005792:	d837      	bhi.n	8005804 <SAI_InitPCM+0xec>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <SAI_InitPCM+0x84>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	080057ad 	.word	0x080057ad
 80057a0:	080057c3 	.word	0x080057c3
 80057a4:	080057d9 	.word	0x080057d9
 80057a8:	080057ef 	.word	0x080057ef
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2280      	movs	r2, #128	; 0x80
 80057b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	011a      	lsls	r2, r3, #4
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2240      	movs	r2, #64	; 0x40
 80057be:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80057c0:	e022      	b.n	8005808 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2280      	movs	r2, #128	; 0x80
 80057c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2280      	movs	r2, #128	; 0x80
 80057d4:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80057d6:	e017      	b.n	8005808 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	22c0      	movs	r2, #192	; 0xc0
 80057dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2280      	movs	r2, #128	; 0x80
 80057ea:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80057ec:	e00c      	b.n	8005808 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	22e0      	movs	r2, #224	; 0xe0
 80057f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2280      	movs	r2, #128	; 0x80
 8005800:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005802:	e001      	b.n	8005808 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop

08005818 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005822:	2301      	movs	r3, #1
 8005824:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d103      	bne.n	8005834 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f043 0308 	orr.w	r3, r3, #8
 8005832:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005838:	2b08      	cmp	r3, #8
 800583a:	d10b      	bne.n	8005854 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005840:	2b03      	cmp	r3, #3
 8005842:	d003      	beq.n	800584c <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d103      	bne.n	8005854 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f043 0310 	orr.w	r3, r3, #16
 8005852:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b03      	cmp	r3, #3
 800585a:	d003      	beq.n	8005864 <SAI_InterruptFlag+0x4c>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d104      	bne.n	800586e <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	e003      	b.n	8005876 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f043 0304 	orr.w	r3, r3, #4
 8005874:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8005876:	68fb      	ldr	r3, [r7, #12]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800588c:	4b17      	ldr	r3, [pc, #92]	; (80058ec <SAI_Disable+0x68>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a17      	ldr	r2, [pc, #92]	; (80058f0 <SAI_Disable+0x6c>)
 8005892:	fba2 2303 	umull	r2, r3, r2, r3
 8005896:	0b1b      	lsrs	r3, r3, #12
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800589c:	2300      	movs	r3, #0
 800589e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80058ae:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	1e5a      	subs	r2, r3, #1
 80058b4:	60fa      	str	r2, [r7, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10a      	bne.n	80058d0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	72fb      	strb	r3, [r7, #11]
      break;
 80058ce:	e006      	b.n	80058de <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1e8      	bne.n	80058b0 <SAI_Disable+0x2c>

  return status;
 80058de:	7afb      	ldrb	r3, [r7, #11]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	20000040 	.word	0x20000040
 80058f0:	95cbec1b 	.word	0x95cbec1b

080058f4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800590a:	d01c      	beq.n	8005946 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800591a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0U;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005924:	2100      	movs	r1, #0
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f7ff ff76 	bl	8005818 <SAI_InterruptFlag>
 800592c:	4603      	mov	r3, r0
 800592e:	43d9      	mvns	r1, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	691a      	ldr	r2, [r3, #16]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	400a      	ands	r2, r1
 800593c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f7fc faca 	bl	8001ee0 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f7fc faae 	bl	8001ec4 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005968:	bf00      	nop
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005984:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005994:	2b01      	cmp	r3, #1
 8005996:	d004      	beq.n	80059a2 <SAI_DMAError+0x32>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d112      	bne.n	80059c8 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80059b0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f7ff ff66 	bl	8005884 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff fded 	bl	80055a8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80059ce:	bf00      	nop
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d00c      	beq.n	8005a02 <SAI_BlockSynchroConfig+0x2a>
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d80d      	bhi.n	8005a08 <SAI_BlockSynchroConfig+0x30>
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <SAI_BlockSynchroConfig+0x1e>
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d003      	beq.n	80059fc <SAI_BlockSynchroConfig+0x24>
 80059f4:	e008      	b.n	8005a08 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]
      break;
 80059fa:	e008      	b.n	8005a0e <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80059fc:	2310      	movs	r3, #16
 80059fe:	60fb      	str	r3, [r7, #12]
      break;
 8005a00:	e005      	b.n	8005a0e <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005a02:	2320      	movs	r3, #32
 8005a04:	60fb      	str	r3, [r7, #12]
      break;
 8005a06:	e002      	b.n	8005a0e <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60fb      	str	r3, [r7, #12]
      break;
 8005a0c:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d103      	bne.n	8005a1e <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f043 0301 	orr.w	r3, r3, #1
 8005a1c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a0b      	ldr	r2, [pc, #44]	; (8005a50 <SAI_BlockSynchroConfig+0x78>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d004      	beq.n	8005a32 <SAI_BlockSynchroConfig+0x5a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a09      	ldr	r2, [pc, #36]	; (8005a54 <SAI_BlockSynchroConfig+0x7c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d103      	bne.n	8005a3a <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 8005a32:	4a09      	ldr	r2, [pc, #36]	; (8005a58 <SAI_BlockSynchroConfig+0x80>)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	e003      	b.n	8005a42 <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005a3a:	4a08      	ldr	r2, [pc, #32]	; (8005a5c <SAI_BlockSynchroConfig+0x84>)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8005a40:	bf00      	nop
 8005a42:	bf00      	nop
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40015804 	.word	0x40015804
 8005a54:	40015824 	.word	0x40015824
 8005a58:	40015800 	.word	0x40015800
 8005a5c:	40015c00 	.word	0x40015c00

08005a60 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <SAI_GetInputClock+0x3c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d004      	beq.n	8005a80 <SAI_GetInputClock+0x20>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <SAI_GetInputClock+0x40>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d104      	bne.n	8005a8a <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005a80:	2004      	movs	r0, #4
 8005a82:	f7fe fd17 	bl	80044b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	e003      	b.n	8005a92 <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005a8a:	2008      	movs	r0, #8
 8005a8c:	f7fe fd12 	bl	80044b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a90:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8005a92:	68fb      	ldr	r3, [r7, #12]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40015804 	.word	0x40015804
 8005aa0:	40015824 	.word	0x40015824

08005aa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e07b      	b.n	8005bae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d108      	bne.n	8005ad0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ac6:	d009      	beq.n	8005adc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	61da      	str	r2, [r3, #28]
 8005ace:	e005      	b.n	8005adc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fc fdb4 	bl	8002664 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b60:	ea42 0103 	orr.w	r1, r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	0c1b      	lsrs	r3, r3, #16
 8005b7a:	f003 0104 	and.w	r1, r3, #4
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	f003 0210 	and.w	r2, r3, #16
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69da      	ldr	r2, [r3, #28]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b088      	sub	sp, #32
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	603b      	str	r3, [r7, #0]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_SPI_Transmit+0x22>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	e126      	b.n	8005e26 <HAL_SPI_Transmit+0x270>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005be0:	f7fd f8c8 	bl	8002d74 <HAL_GetTick>
 8005be4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005be6:	88fb      	ldrh	r3, [r7, #6]
 8005be8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d002      	beq.n	8005bfc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bfa:	e10b      	b.n	8005e14 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <HAL_SPI_Transmit+0x52>
 8005c02:	88fb      	ldrh	r3, [r7, #6]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d102      	bne.n	8005c0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c0c:	e102      	b.n	8005e14 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2203      	movs	r2, #3
 8005c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	88fa      	ldrh	r2, [r7, #6]
 8005c26:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	88fa      	ldrh	r2, [r7, #6]
 8005c2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c54:	d10f      	bne.n	8005c76 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	d007      	beq.n	8005c94 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c9c:	d14b      	bne.n	8005d36 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <HAL_SPI_Transmit+0xf6>
 8005ca6:	8afb      	ldrh	r3, [r7, #22]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d13e      	bne.n	8005d2a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	881a      	ldrh	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	1c9a      	adds	r2, r3, #2
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cd0:	e02b      	b.n	8005d2a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d112      	bne.n	8005d06 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	881a      	ldrh	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	1c9a      	adds	r2, r3, #2
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d04:	e011      	b.n	8005d2a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d06:	f7fd f835 	bl	8002d74 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d803      	bhi.n	8005d1e <HAL_SPI_Transmit+0x168>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d1c:	d102      	bne.n	8005d24 <HAL_SPI_Transmit+0x16e>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d102      	bne.n	8005d2a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d28:	e074      	b.n	8005e14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1ce      	bne.n	8005cd2 <HAL_SPI_Transmit+0x11c>
 8005d34:	e04c      	b.n	8005dd0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <HAL_SPI_Transmit+0x18e>
 8005d3e:	8afb      	ldrh	r3, [r7, #22]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d140      	bne.n	8005dc6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	330c      	adds	r3, #12
 8005d4e:	7812      	ldrb	r2, [r2, #0]
 8005d50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	3b01      	subs	r3, #1
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d6a:	e02c      	b.n	8005dc6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d113      	bne.n	8005da2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	330c      	adds	r3, #12
 8005d84:	7812      	ldrb	r2, [r2, #0]
 8005d86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005da0:	e011      	b.n	8005dc6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005da2:	f7fc ffe7 	bl	8002d74 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d803      	bhi.n	8005dba <HAL_SPI_Transmit+0x204>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005db8:	d102      	bne.n	8005dc0 <HAL_SPI_Transmit+0x20a>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d102      	bne.n	8005dc6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005dc4:	e026      	b.n	8005e14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1cd      	bne.n	8005d6c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	6839      	ldr	r1, [r7, #0]
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 fd21 	bl	800681c <SPI_EndRxTxTransaction>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dee:	2300      	movs	r3, #0
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	77fb      	strb	r3, [r7, #31]
 8005e10:	e000      	b.n	8005e14 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005e12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e24:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3720      	adds	r7, #32
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b088      	sub	sp, #32
 8005e32:	af02      	add	r7, sp, #8
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	603b      	str	r3, [r7, #0]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e4a:	d112      	bne.n	8005e72 <HAL_SPI_Receive+0x44>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10e      	bne.n	8005e72 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2204      	movs	r2, #4
 8005e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e5c:	88fa      	ldrh	r2, [r7, #6]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	4613      	mov	r3, r2
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	68b9      	ldr	r1, [r7, #8]
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 f8f1 	bl	8006050 <HAL_SPI_TransmitReceive>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	e0ea      	b.n	8006048 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <HAL_SPI_Receive+0x52>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e0e3      	b.n	8006048 <HAL_SPI_Receive+0x21a>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e88:	f7fc ff74 	bl	8002d74 <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d002      	beq.n	8005ea0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e9e:	e0ca      	b.n	8006036 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_SPI_Receive+0x7e>
 8005ea6:	88fb      	ldrh	r3, [r7, #6]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d102      	bne.n	8005eb2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005eb0:	e0c1      	b.n	8006036 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2204      	movs	r2, #4
 8005eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	88fa      	ldrh	r2, [r7, #6]
 8005eca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	88fa      	ldrh	r2, [r7, #6]
 8005ed0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ef8:	d10f      	bne.n	8005f1a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f18:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f24:	2b40      	cmp	r3, #64	; 0x40
 8005f26:	d007      	beq.n	8005f38 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d162      	bne.n	8006006 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005f40:	e02e      	b.n	8005fa0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d115      	bne.n	8005f7c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f103 020c 	add.w	r2, r3, #12
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	7812      	ldrb	r2, [r2, #0]
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f7a:	e011      	b.n	8005fa0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f7c:	f7fc fefa 	bl	8002d74 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d803      	bhi.n	8005f94 <HAL_SPI_Receive+0x166>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f92:	d102      	bne.n	8005f9a <HAL_SPI_Receive+0x16c>
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d102      	bne.n	8005fa0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f9e:	e04a      	b.n	8006036 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1cb      	bne.n	8005f42 <HAL_SPI_Receive+0x114>
 8005faa:	e031      	b.n	8006010 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d113      	bne.n	8005fe2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	b292      	uxth	r2, r2
 8005fc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	1c9a      	adds	r2, r3, #2
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fe0:	e011      	b.n	8006006 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fe2:	f7fc fec7 	bl	8002d74 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d803      	bhi.n	8005ffa <HAL_SPI_Receive+0x1cc>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ff8:	d102      	bne.n	8006000 <HAL_SPI_Receive+0x1d2>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d102      	bne.n	8006006 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006004:	e017      	b.n	8006036 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800600a:	b29b      	uxth	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1cd      	bne.n	8005fac <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 fb9b 	bl	8006750 <SPI_EndRxTransaction>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	75fb      	strb	r3, [r7, #23]
 8006032:	e000      	b.n	8006036 <HAL_SPI_Receive+0x208>
  }

error :
 8006034:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006046:	7dfb      	ldrb	r3, [r7, #23]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08c      	sub	sp, #48	; 0x30
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800605e:	2301      	movs	r3, #1
 8006060:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <HAL_SPI_TransmitReceive+0x26>
 8006072:	2302      	movs	r3, #2
 8006074:	e18a      	b.n	800638c <HAL_SPI_TransmitReceive+0x33c>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800607e:	f7fc fe79 	bl	8002d74 <HAL_GetTick>
 8006082:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800608a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006094:	887b      	ldrh	r3, [r7, #2]
 8006096:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006098:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800609c:	2b01      	cmp	r3, #1
 800609e:	d00f      	beq.n	80060c0 <HAL_SPI_TransmitReceive+0x70>
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060a6:	d107      	bne.n	80060b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d103      	bne.n	80060b8 <HAL_SPI_TransmitReceive+0x68>
 80060b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060b4:	2b04      	cmp	r3, #4
 80060b6:	d003      	beq.n	80060c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80060b8:	2302      	movs	r3, #2
 80060ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060be:	e15b      	b.n	8006378 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d005      	beq.n	80060d2 <HAL_SPI_TransmitReceive+0x82>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <HAL_SPI_TransmitReceive+0x82>
 80060cc:	887b      	ldrh	r3, [r7, #2]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060d8:	e14e      	b.n	8006378 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d003      	beq.n	80060ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2205      	movs	r2, #5
 80060ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	887a      	ldrh	r2, [r7, #2]
 80060fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	887a      	ldrh	r2, [r7, #2]
 8006104:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	887a      	ldrh	r2, [r7, #2]
 8006110:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	887a      	ldrh	r2, [r7, #2]
 8006116:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612e:	2b40      	cmp	r3, #64	; 0x40
 8006130:	d007      	beq.n	8006142 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006140:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800614a:	d178      	bne.n	800623e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <HAL_SPI_TransmitReceive+0x10a>
 8006154:	8b7b      	ldrh	r3, [r7, #26]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d166      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615e:	881a      	ldrh	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616a:	1c9a      	adds	r2, r3, #2
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006174:	b29b      	uxth	r3, r3
 8006176:	3b01      	subs	r3, #1
 8006178:	b29a      	uxth	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800617e:	e053      	b.n	8006228 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b02      	cmp	r3, #2
 800618c:	d11b      	bne.n	80061c6 <HAL_SPI_TransmitReceive+0x176>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006192:	b29b      	uxth	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d016      	beq.n	80061c6 <HAL_SPI_TransmitReceive+0x176>
 8006198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619a:	2b01      	cmp	r3, #1
 800619c:	d113      	bne.n	80061c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a2:	881a      	ldrh	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ae:	1c9a      	adds	r2, r3, #2
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d119      	bne.n	8006208 <HAL_SPI_TransmitReceive+0x1b8>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d014      	beq.n	8006208 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	b292      	uxth	r2, r2
 80061ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	1c9a      	adds	r2, r3, #2
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006204:	2301      	movs	r3, #1
 8006206:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006208:	f7fc fdb4 	bl	8002d74 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006214:	429a      	cmp	r2, r3
 8006216:	d807      	bhi.n	8006228 <HAL_SPI_TransmitReceive+0x1d8>
 8006218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800621e:	d003      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006226:	e0a7      	b.n	8006378 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1a6      	bne.n	8006180 <HAL_SPI_TransmitReceive+0x130>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006236:	b29b      	uxth	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1a1      	bne.n	8006180 <HAL_SPI_TransmitReceive+0x130>
 800623c:	e07c      	b.n	8006338 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <HAL_SPI_TransmitReceive+0x1fc>
 8006246:	8b7b      	ldrh	r3, [r7, #26]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d16b      	bne.n	8006324 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	330c      	adds	r3, #12
 8006256:	7812      	ldrb	r2, [r2, #0]
 8006258:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b01      	subs	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006272:	e057      	b.n	8006324 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b02      	cmp	r3, #2
 8006280:	d11c      	bne.n	80062bc <HAL_SPI_TransmitReceive+0x26c>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006286:	b29b      	uxth	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d017      	beq.n	80062bc <HAL_SPI_TransmitReceive+0x26c>
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	2b01      	cmp	r3, #1
 8006290:	d114      	bne.n	80062bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	330c      	adds	r3, #12
 800629c:	7812      	ldrb	r2, [r2, #0]
 800629e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	3b01      	subs	r3, #1
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d119      	bne.n	80062fe <HAL_SPI_TransmitReceive+0x2ae>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d014      	beq.n	80062fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062fa:	2301      	movs	r3, #1
 80062fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062fe:	f7fc fd39 	bl	8002d74 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800630a:	429a      	cmp	r2, r3
 800630c:	d803      	bhi.n	8006316 <HAL_SPI_TransmitReceive+0x2c6>
 800630e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006314:	d102      	bne.n	800631c <HAL_SPI_TransmitReceive+0x2cc>
 8006316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006318:	2b00      	cmp	r3, #0
 800631a:	d103      	bne.n	8006324 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006322:	e029      	b.n	8006378 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1a2      	bne.n	8006274 <HAL_SPI_TransmitReceive+0x224>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006332:	b29b      	uxth	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d19d      	bne.n	8006274 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 fa6d 	bl	800681c <SPI_EndRxTxTransaction>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d006      	beq.n	8006356 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2220      	movs	r2, #32
 8006352:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006354:	e010      	b.n	8006378 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10b      	bne.n	8006376 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	e000      	b.n	8006378 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006376:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006388:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800638c:	4618      	mov	r0, r3
 800638e:	3730      	adds	r7, #48	; 0x30
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	4613      	mov	r3, r2
 80063a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d101      	bne.n	80063b4 <HAL_SPI_Transmit_DMA+0x20>
 80063b0:	2302      	movs	r3, #2
 80063b2:	e09b      	b.n	80064ec <HAL_SPI_Transmit_DMA+0x158>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d002      	beq.n	80063ce <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80063c8:	2302      	movs	r3, #2
 80063ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063cc:	e089      	b.n	80064e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <HAL_SPI_Transmit_DMA+0x46>
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d102      	bne.n	80063e0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063de:	e080      	b.n	80064e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2203      	movs	r2, #3
 80063e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	88fa      	ldrh	r2, [r7, #6]
 80063f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	88fa      	ldrh	r2, [r7, #6]
 80063fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006426:	d10f      	bne.n	8006448 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006436:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006446:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800644c:	4a29      	ldr	r2, [pc, #164]	; (80064f4 <HAL_SPI_Transmit_DMA+0x160>)
 800644e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006454:	4a28      	ldr	r2, [pc, #160]	; (80064f8 <HAL_SPI_Transmit_DMA+0x164>)
 8006456:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800645c:	4a27      	ldr	r2, [pc, #156]	; (80064fc <HAL_SPI_Transmit_DMA+0x168>)
 800645e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006464:	2200      	movs	r2, #0
 8006466:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	4619      	mov	r1, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	330c      	adds	r3, #12
 8006478:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800647e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006480:	f7fc fe68 	bl	8003154 <HAL_DMA_Start_IT>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00c      	beq.n	80064a4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648e:	f043 0210 	orr.w	r2, r3, #16
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80064a2:	e01e      	b.n	80064e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ae:	2b40      	cmp	r3, #64	; 0x40
 80064b0:	d007      	beq.n	80064c2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064c0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0220 	orr.w	r2, r2, #32
 80064d0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0202 	orr.w	r2, r2, #2
 80064e0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	080065e5 	.word	0x080065e5
 80064f8:	0800653d 	.word	0x0800653d
 80064fc:	08006601 	.word	0x08006601

08006500 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006548:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800654a:	f7fc fc13 	bl	8002d74 <HAL_GetTick>
 800654e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800655e:	d03b      	beq.n	80065d8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0220 	bic.w	r2, r2, #32
 800656e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0202 	bic.w	r2, r2, #2
 800657e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	2164      	movs	r1, #100	; 0x64
 8006584:	6978      	ldr	r0, [r7, #20]
 8006586:	f000 f949 	bl	800681c <SPI_EndRxTxTransaction>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006594:	f043 0220 	orr.w	r2, r3, #32
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065a4:	2300      	movs	r3, #0
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2200      	movs	r2, #0
 80065be:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80065d0:	6978      	ldr	r0, [r7, #20]
 80065d2:	f7ff ffa9 	bl	8006528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80065d6:	e002      	b.n	80065de <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80065d8:	6978      	ldr	r0, [r7, #20]
 80065da:	f7ff ff91 	bl	8006500 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f7ff ff8e 	bl	8006514 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80065f8:	bf00      	nop
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0203 	bic.w	r2, r2, #3
 800661c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006622:	f043 0210 	orr.w	r2, r3, #16
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f7ff ff78 	bl	8006528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006638:	bf00      	nop
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b088      	sub	sp, #32
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	603b      	str	r3, [r7, #0]
 800664c:	4613      	mov	r3, r2
 800664e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006650:	f7fc fb90 	bl	8002d74 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006658:	1a9b      	subs	r3, r3, r2
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	4413      	add	r3, r2
 800665e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006660:	f7fc fb88 	bl	8002d74 <HAL_GetTick>
 8006664:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006666:	4b39      	ldr	r3, [pc, #228]	; (800674c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	015b      	lsls	r3, r3, #5
 800666c:	0d1b      	lsrs	r3, r3, #20
 800666e:	69fa      	ldr	r2, [r7, #28]
 8006670:	fb02 f303 	mul.w	r3, r2, r3
 8006674:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006676:	e054      	b.n	8006722 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800667e:	d050      	beq.n	8006722 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006680:	f7fc fb78 	bl	8002d74 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	429a      	cmp	r2, r3
 800668e:	d902      	bls.n	8006696 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d13d      	bne.n	8006712 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ae:	d111      	bne.n	80066d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b8:	d004      	beq.n	80066c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066c2:	d107      	bne.n	80066d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066dc:	d10f      	bne.n	80066fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e017      	b.n	8006742 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	3b01      	subs	r3, #1
 8006720:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4013      	ands	r3, r2
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	429a      	cmp	r2, r3
 8006730:	bf0c      	ite	eq
 8006732:	2301      	moveq	r3, #1
 8006734:	2300      	movne	r3, #0
 8006736:	b2db      	uxtb	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	79fb      	ldrb	r3, [r7, #7]
 800673c:	429a      	cmp	r2, r3
 800673e:	d19b      	bne.n	8006678 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3720      	adds	r7, #32
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20000040 	.word	0x20000040

08006750 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af02      	add	r7, sp, #8
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006764:	d111      	bne.n	800678a <SPI_EndRxTransaction+0x3a>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800676e:	d004      	beq.n	800677a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006778:	d107      	bne.n	800678a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006788:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006792:	d12a      	bne.n	80067ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679c:	d012      	beq.n	80067c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2200      	movs	r2, #0
 80067a6:	2180      	movs	r1, #128	; 0x80
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f7ff ff49 	bl	8006640 <SPI_WaitFlagStateUntilTimeout>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d02d      	beq.n	8006810 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b8:	f043 0220 	orr.w	r2, r3, #32
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e026      	b.n	8006812 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2200      	movs	r2, #0
 80067cc:	2101      	movs	r1, #1
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f7ff ff36 	bl	8006640 <SPI_WaitFlagStateUntilTimeout>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d01a      	beq.n	8006810 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067de:	f043 0220 	orr.w	r2, r3, #32
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e013      	b.n	8006812 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2200      	movs	r2, #0
 80067f2:	2101      	movs	r1, #1
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f7ff ff23 	bl	8006640 <SPI_WaitFlagStateUntilTimeout>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d007      	beq.n	8006810 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006804:	f043 0220 	orr.w	r2, r3, #32
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e000      	b.n	8006812 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b088      	sub	sp, #32
 8006820:	af02      	add	r7, sp, #8
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006828:	4b1b      	ldr	r3, [pc, #108]	; (8006898 <SPI_EndRxTxTransaction+0x7c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a1b      	ldr	r2, [pc, #108]	; (800689c <SPI_EndRxTxTransaction+0x80>)
 800682e:	fba2 2303 	umull	r2, r3, r2, r3
 8006832:	0d5b      	lsrs	r3, r3, #21
 8006834:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006838:	fb02 f303 	mul.w	r3, r2, r3
 800683c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006846:	d112      	bne.n	800686e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2200      	movs	r2, #0
 8006850:	2180      	movs	r1, #128	; 0x80
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f7ff fef4 	bl	8006640 <SPI_WaitFlagStateUntilTimeout>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d016      	beq.n	800688c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006862:	f043 0220 	orr.w	r2, r3, #32
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e00f      	b.n	800688e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	3b01      	subs	r3, #1
 8006878:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006884:	2b80      	cmp	r3, #128	; 0x80
 8006886:	d0f2      	beq.n	800686e <SPI_EndRxTxTransaction+0x52>
 8006888:	e000      	b.n	800688c <SPI_EndRxTxTransaction+0x70>
        break;
 800688a:	bf00      	nop
  }

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20000040 	.word	0x20000040
 800689c:	165e9f81 	.word	0x165e9f81

080068a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e041      	b.n	8006936 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7fb ff14 	bl	80026f4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3304      	adds	r3, #4
 80068dc:	4619      	mov	r1, r3
 80068de:	4610      	mov	r0, r2
 80068e0:	f000 fb22 	bl	8006f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d104      	bne.n	800695e <HAL_TIM_IC_Start_IT+0x1e>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800695a:	b2db      	uxtb	r3, r3
 800695c:	e013      	b.n	8006986 <HAL_TIM_IC_Start_IT+0x46>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b04      	cmp	r3, #4
 8006962:	d104      	bne.n	800696e <HAL_TIM_IC_Start_IT+0x2e>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800696a:	b2db      	uxtb	r3, r3
 800696c:	e00b      	b.n	8006986 <HAL_TIM_IC_Start_IT+0x46>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b08      	cmp	r3, #8
 8006972:	d104      	bne.n	800697e <HAL_TIM_IC_Start_IT+0x3e>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800697a:	b2db      	uxtb	r3, r3
 800697c:	e003      	b.n	8006986 <HAL_TIM_IC_Start_IT+0x46>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006984:	b2db      	uxtb	r3, r3
 8006986:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d104      	bne.n	8006998 <HAL_TIM_IC_Start_IT+0x58>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006994:	b2db      	uxtb	r3, r3
 8006996:	e013      	b.n	80069c0 <HAL_TIM_IC_Start_IT+0x80>
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	2b04      	cmp	r3, #4
 800699c:	d104      	bne.n	80069a8 <HAL_TIM_IC_Start_IT+0x68>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	e00b      	b.n	80069c0 <HAL_TIM_IC_Start_IT+0x80>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2b08      	cmp	r3, #8
 80069ac:	d104      	bne.n	80069b8 <HAL_TIM_IC_Start_IT+0x78>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	e003      	b.n	80069c0 <HAL_TIM_IC_Start_IT+0x80>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80069c2:	7bbb      	ldrb	r3, [r7, #14]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d102      	bne.n	80069ce <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80069c8:	7b7b      	ldrb	r3, [r7, #13]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d001      	beq.n	80069d2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e0cc      	b.n	8006b6c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d104      	bne.n	80069e2 <HAL_TIM_IC_Start_IT+0xa2>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069e0:	e013      	b.n	8006a0a <HAL_TIM_IC_Start_IT+0xca>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	d104      	bne.n	80069f2 <HAL_TIM_IC_Start_IT+0xb2>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069f0:	e00b      	b.n	8006a0a <HAL_TIM_IC_Start_IT+0xca>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d104      	bne.n	8006a02 <HAL_TIM_IC_Start_IT+0xc2>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a00:	e003      	b.n	8006a0a <HAL_TIM_IC_Start_IT+0xca>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2202      	movs	r2, #2
 8006a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <HAL_TIM_IC_Start_IT+0xda>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a18:	e013      	b.n	8006a42 <HAL_TIM_IC_Start_IT+0x102>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d104      	bne.n	8006a2a <HAL_TIM_IC_Start_IT+0xea>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a28:	e00b      	b.n	8006a42 <HAL_TIM_IC_Start_IT+0x102>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d104      	bne.n	8006a3a <HAL_TIM_IC_Start_IT+0xfa>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a38:	e003      	b.n	8006a42 <HAL_TIM_IC_Start_IT+0x102>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b0c      	cmp	r3, #12
 8006a46:	d841      	bhi.n	8006acc <HAL_TIM_IC_Start_IT+0x18c>
 8006a48:	a201      	add	r2, pc, #4	; (adr r2, 8006a50 <HAL_TIM_IC_Start_IT+0x110>)
 8006a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4e:	bf00      	nop
 8006a50:	08006a85 	.word	0x08006a85
 8006a54:	08006acd 	.word	0x08006acd
 8006a58:	08006acd 	.word	0x08006acd
 8006a5c:	08006acd 	.word	0x08006acd
 8006a60:	08006a97 	.word	0x08006a97
 8006a64:	08006acd 	.word	0x08006acd
 8006a68:	08006acd 	.word	0x08006acd
 8006a6c:	08006acd 	.word	0x08006acd
 8006a70:	08006aa9 	.word	0x08006aa9
 8006a74:	08006acd 	.word	0x08006acd
 8006a78:	08006acd 	.word	0x08006acd
 8006a7c:	08006acd 	.word	0x08006acd
 8006a80:	08006abb 	.word	0x08006abb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0202 	orr.w	r2, r2, #2
 8006a92:	60da      	str	r2, [r3, #12]
      break;
 8006a94:	e01d      	b.n	8006ad2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f042 0204 	orr.w	r2, r2, #4
 8006aa4:	60da      	str	r2, [r3, #12]
      break;
 8006aa6:	e014      	b.n	8006ad2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f042 0208 	orr.w	r2, r2, #8
 8006ab6:	60da      	str	r2, [r3, #12]
      break;
 8006ab8:	e00b      	b.n	8006ad2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68da      	ldr	r2, [r3, #12]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f042 0210 	orr.w	r2, r2, #16
 8006ac8:	60da      	str	r2, [r3, #12]
      break;
 8006aca:	e002      	b.n	8006ad2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad0:	bf00      	nop
  }

  if (status == HAL_OK)
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d148      	bne.n	8006b6a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2201      	movs	r2, #1
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fbeb 	bl	80072bc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a22      	ldr	r2, [pc, #136]	; (8006b74 <HAL_TIM_IC_Start_IT+0x234>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d022      	beq.n	8006b36 <HAL_TIM_IC_Start_IT+0x1f6>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af8:	d01d      	beq.n	8006b36 <HAL_TIM_IC_Start_IT+0x1f6>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a1e      	ldr	r2, [pc, #120]	; (8006b78 <HAL_TIM_IC_Start_IT+0x238>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d018      	beq.n	8006b36 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a1c      	ldr	r2, [pc, #112]	; (8006b7c <HAL_TIM_IC_Start_IT+0x23c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d013      	beq.n	8006b36 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a1b      	ldr	r2, [pc, #108]	; (8006b80 <HAL_TIM_IC_Start_IT+0x240>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d00e      	beq.n	8006b36 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a19      	ldr	r2, [pc, #100]	; (8006b84 <HAL_TIM_IC_Start_IT+0x244>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d009      	beq.n	8006b36 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a18      	ldr	r2, [pc, #96]	; (8006b88 <HAL_TIM_IC_Start_IT+0x248>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d004      	beq.n	8006b36 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a16      	ldr	r2, [pc, #88]	; (8006b8c <HAL_TIM_IC_Start_IT+0x24c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d111      	bne.n	8006b5a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f003 0307 	and.w	r3, r3, #7
 8006b40:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b06      	cmp	r3, #6
 8006b46:	d010      	beq.n	8006b6a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0201 	orr.w	r2, r2, #1
 8006b56:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b58:	e007      	b.n	8006b6a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f042 0201 	orr.w	r2, r2, #1
 8006b68:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	40010000 	.word	0x40010000
 8006b78:	40000400 	.word	0x40000400
 8006b7c:	40000800 	.word	0x40000800
 8006b80:	40000c00 	.word	0x40000c00
 8006b84:	40010400 	.word	0x40010400
 8006b88:	40014000 	.word	0x40014000
 8006b8c:	40001800 	.word	0x40001800

08006b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d122      	bne.n	8006bec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d11b      	bne.n	8006bec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f06f 0202 	mvn.w	r2, #2
 8006bbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fa fd5e 	bl	8001694 <HAL_TIM_IC_CaptureCallback>
 8006bd8:	e005      	b.n	8006be6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f986 	bl	8006eec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f98d 	bl	8006f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	f003 0304 	and.w	r3, r3, #4
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d122      	bne.n	8006c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d11b      	bne.n	8006c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f06f 0204 	mvn.w	r2, #4
 8006c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2202      	movs	r2, #2
 8006c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7fa fd34 	bl	8001694 <HAL_TIM_IC_CaptureCallback>
 8006c2c:	e005      	b.n	8006c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f95c 	bl	8006eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f963 	bl	8006f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b08      	cmp	r3, #8
 8006c4c:	d122      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f003 0308 	and.w	r3, r3, #8
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d11b      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f06f 0208 	mvn.w	r2, #8
 8006c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2204      	movs	r2, #4
 8006c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	f003 0303 	and.w	r3, r3, #3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fa fd0a 	bl	8001694 <HAL_TIM_IC_CaptureCallback>
 8006c80:	e005      	b.n	8006c8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f932 	bl	8006eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f939 	bl	8006f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	2b10      	cmp	r3, #16
 8006ca0:	d122      	bne.n	8006ce8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f003 0310 	and.w	r3, r3, #16
 8006cac:	2b10      	cmp	r3, #16
 8006cae:	d11b      	bne.n	8006ce8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f06f 0210 	mvn.w	r2, #16
 8006cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2208      	movs	r2, #8
 8006cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7fa fce0 	bl	8001694 <HAL_TIM_IC_CaptureCallback>
 8006cd4:	e005      	b.n	8006ce2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f908 	bl	8006eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f90f 	bl	8006f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d10e      	bne.n	8006d14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d107      	bne.n	8006d14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f06f 0201 	mvn.w	r2, #1
 8006d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f8e2 	bl	8006ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1e:	2b80      	cmp	r3, #128	; 0x80
 8006d20:	d10e      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2c:	2b80      	cmp	r3, #128	; 0x80
 8006d2e:	d107      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fb6a 	bl	8007414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4a:	2b40      	cmp	r3, #64	; 0x40
 8006d4c:	d10e      	bne.n	8006d6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d58:	2b40      	cmp	r3, #64	; 0x40
 8006d5a:	d107      	bne.n	8006d6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f8d4 	bl	8006f14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	d10e      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f003 0320 	and.w	r3, r3, #32
 8006d84:	2b20      	cmp	r3, #32
 8006d86:	d107      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f06f 0220 	mvn.w	r2, #32
 8006d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fb34 	bl	8007400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d98:	bf00      	nop
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d101      	bne.n	8006dbe <HAL_TIM_IC_ConfigChannel+0x1e>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e088      	b.n	8006ed0 <HAL_TIM_IC_ConfigChannel+0x130>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d11b      	bne.n	8006e04 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6818      	ldr	r0, [r3, #0]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	6819      	ldr	r1, [r3, #0]
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f000 f944 	bl	8007068 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 020c 	bic.w	r2, r2, #12
 8006dee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6999      	ldr	r1, [r3, #24]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	689a      	ldr	r2, [r3, #8]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	619a      	str	r2, [r3, #24]
 8006e02:	e060      	b.n	8006ec6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d11c      	bne.n	8006e44 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6818      	ldr	r0, [r3, #0]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	6819      	ldr	r1, [r3, #0]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f000 f999 	bl	8007150 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	699a      	ldr	r2, [r3, #24]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006e2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6999      	ldr	r1, [r3, #24]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	021a      	lsls	r2, r3, #8
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	619a      	str	r2, [r3, #24]
 8006e42:	e040      	b.n	8006ec6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d11b      	bne.n	8006e82 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	6819      	ldr	r1, [r3, #0]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f000 f9b6 	bl	80071ca <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69da      	ldr	r2, [r3, #28]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 020c 	bic.w	r2, r2, #12
 8006e6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69d9      	ldr	r1, [r3, #28]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	61da      	str	r2, [r3, #28]
 8006e80:	e021      	b.n	8006ec6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b0c      	cmp	r3, #12
 8006e86:	d11c      	bne.n	8006ec2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6818      	ldr	r0, [r3, #0]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	6819      	ldr	r1, [r3, #0]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f000 f9d3 	bl	8007242 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	69da      	ldr	r2, [r3, #28]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006eaa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	69d9      	ldr	r1, [r3, #28]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	021a      	lsls	r2, r3, #8
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	61da      	str	r2, [r3, #28]
 8006ec0:	e001      	b.n	8006ec6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a40      	ldr	r2, [pc, #256]	; (800703c <TIM_Base_SetConfig+0x114>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d013      	beq.n	8006f68 <TIM_Base_SetConfig+0x40>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f46:	d00f      	beq.n	8006f68 <TIM_Base_SetConfig+0x40>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a3d      	ldr	r2, [pc, #244]	; (8007040 <TIM_Base_SetConfig+0x118>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00b      	beq.n	8006f68 <TIM_Base_SetConfig+0x40>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a3c      	ldr	r2, [pc, #240]	; (8007044 <TIM_Base_SetConfig+0x11c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d007      	beq.n	8006f68 <TIM_Base_SetConfig+0x40>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a3b      	ldr	r2, [pc, #236]	; (8007048 <TIM_Base_SetConfig+0x120>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d003      	beq.n	8006f68 <TIM_Base_SetConfig+0x40>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a3a      	ldr	r2, [pc, #232]	; (800704c <TIM_Base_SetConfig+0x124>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d108      	bne.n	8006f7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a2f      	ldr	r2, [pc, #188]	; (800703c <TIM_Base_SetConfig+0x114>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d02b      	beq.n	8006fda <TIM_Base_SetConfig+0xb2>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f88:	d027      	beq.n	8006fda <TIM_Base_SetConfig+0xb2>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a2c      	ldr	r2, [pc, #176]	; (8007040 <TIM_Base_SetConfig+0x118>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d023      	beq.n	8006fda <TIM_Base_SetConfig+0xb2>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a2b      	ldr	r2, [pc, #172]	; (8007044 <TIM_Base_SetConfig+0x11c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d01f      	beq.n	8006fda <TIM_Base_SetConfig+0xb2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a2a      	ldr	r2, [pc, #168]	; (8007048 <TIM_Base_SetConfig+0x120>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d01b      	beq.n	8006fda <TIM_Base_SetConfig+0xb2>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a29      	ldr	r2, [pc, #164]	; (800704c <TIM_Base_SetConfig+0x124>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d017      	beq.n	8006fda <TIM_Base_SetConfig+0xb2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a28      	ldr	r2, [pc, #160]	; (8007050 <TIM_Base_SetConfig+0x128>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d013      	beq.n	8006fda <TIM_Base_SetConfig+0xb2>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a27      	ldr	r2, [pc, #156]	; (8007054 <TIM_Base_SetConfig+0x12c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d00f      	beq.n	8006fda <TIM_Base_SetConfig+0xb2>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a26      	ldr	r2, [pc, #152]	; (8007058 <TIM_Base_SetConfig+0x130>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d00b      	beq.n	8006fda <TIM_Base_SetConfig+0xb2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a25      	ldr	r2, [pc, #148]	; (800705c <TIM_Base_SetConfig+0x134>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d007      	beq.n	8006fda <TIM_Base_SetConfig+0xb2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a24      	ldr	r2, [pc, #144]	; (8007060 <TIM_Base_SetConfig+0x138>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d003      	beq.n	8006fda <TIM_Base_SetConfig+0xb2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a23      	ldr	r2, [pc, #140]	; (8007064 <TIM_Base_SetConfig+0x13c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d108      	bne.n	8006fec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a0a      	ldr	r2, [pc, #40]	; (800703c <TIM_Base_SetConfig+0x114>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d003      	beq.n	8007020 <TIM_Base_SetConfig+0xf8>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a0c      	ldr	r2, [pc, #48]	; (800704c <TIM_Base_SetConfig+0x124>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d103      	bne.n	8007028 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	691a      	ldr	r2, [r3, #16]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	615a      	str	r2, [r3, #20]
}
 800702e:	bf00      	nop
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40010000 	.word	0x40010000
 8007040:	40000400 	.word	0x40000400
 8007044:	40000800 	.word	0x40000800
 8007048:	40000c00 	.word	0x40000c00
 800704c:	40010400 	.word	0x40010400
 8007050:	40014000 	.word	0x40014000
 8007054:	40014400 	.word	0x40014400
 8007058:	40014800 	.word	0x40014800
 800705c:	40001800 	.word	0x40001800
 8007060:	40001c00 	.word	0x40001c00
 8007064:	40002000 	.word	0x40002000

08007068 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	f023 0201 	bic.w	r2, r3, #1
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4a28      	ldr	r2, [pc, #160]	; (8007134 <TIM_TI1_SetConfig+0xcc>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d01b      	beq.n	80070ce <TIM_TI1_SetConfig+0x66>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800709c:	d017      	beq.n	80070ce <TIM_TI1_SetConfig+0x66>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4a25      	ldr	r2, [pc, #148]	; (8007138 <TIM_TI1_SetConfig+0xd0>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d013      	beq.n	80070ce <TIM_TI1_SetConfig+0x66>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4a24      	ldr	r2, [pc, #144]	; (800713c <TIM_TI1_SetConfig+0xd4>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d00f      	beq.n	80070ce <TIM_TI1_SetConfig+0x66>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4a23      	ldr	r2, [pc, #140]	; (8007140 <TIM_TI1_SetConfig+0xd8>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d00b      	beq.n	80070ce <TIM_TI1_SetConfig+0x66>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	4a22      	ldr	r2, [pc, #136]	; (8007144 <TIM_TI1_SetConfig+0xdc>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d007      	beq.n	80070ce <TIM_TI1_SetConfig+0x66>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4a21      	ldr	r2, [pc, #132]	; (8007148 <TIM_TI1_SetConfig+0xe0>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d003      	beq.n	80070ce <TIM_TI1_SetConfig+0x66>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4a20      	ldr	r2, [pc, #128]	; (800714c <TIM_TI1_SetConfig+0xe4>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d101      	bne.n	80070d2 <TIM_TI1_SetConfig+0x6a>
 80070ce:	2301      	movs	r3, #1
 80070d0:	e000      	b.n	80070d4 <TIM_TI1_SetConfig+0x6c>
 80070d2:	2300      	movs	r3, #0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d008      	beq.n	80070ea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f023 0303 	bic.w	r3, r3, #3
 80070de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	e003      	b.n	80070f2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f043 0301 	orr.w	r3, r3, #1
 80070f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	011b      	lsls	r3, r3, #4
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	4313      	orrs	r3, r2
 8007104:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f023 030a 	bic.w	r3, r3, #10
 800710c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f003 030a 	and.w	r3, r3, #10
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	621a      	str	r2, [r3, #32]
}
 8007126:	bf00      	nop
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	40010000 	.word	0x40010000
 8007138:	40000400 	.word	0x40000400
 800713c:	40000800 	.word	0x40000800
 8007140:	40000c00 	.word	0x40000c00
 8007144:	40010400 	.word	0x40010400
 8007148:	40014000 	.word	0x40014000
 800714c:	40001800 	.word	0x40001800

08007150 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
 800715c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	f023 0210 	bic.w	r2, r3, #16
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800717c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	021b      	lsls	r3, r3, #8
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	4313      	orrs	r3, r2
 8007186:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800718e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	031b      	lsls	r3, r3, #12
 8007194:	b29b      	uxth	r3, r3
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	4313      	orrs	r3, r2
 800719a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	011b      	lsls	r3, r3, #4
 80071a8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	621a      	str	r2, [r3, #32]
}
 80071be:	bf00      	nop
 80071c0:	371c      	adds	r7, #28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b087      	sub	sp, #28
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	607a      	str	r2, [r7, #4]
 80071d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f023 0303 	bic.w	r3, r3, #3
 80071f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007206:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	011b      	lsls	r3, r3, #4
 800720c:	b2db      	uxtb	r3, r3
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	4313      	orrs	r3, r2
 8007212:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800721a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	021b      	lsls	r3, r3, #8
 8007220:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4313      	orrs	r3, r2
 8007228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	621a      	str	r2, [r3, #32]
}
 8007236:	bf00      	nop
 8007238:	371c      	adds	r7, #28
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007242:	b480      	push	{r7}
 8007244:	b087      	sub	sp, #28
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	607a      	str	r2, [r7, #4]
 800724e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6a1b      	ldr	r3, [r3, #32]
 8007254:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800726e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	021b      	lsls	r3, r3, #8
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	4313      	orrs	r3, r2
 8007278:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007280:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	031b      	lsls	r3, r3, #12
 8007286:	b29b      	uxth	r3, r3
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	4313      	orrs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007294:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	031b      	lsls	r3, r3, #12
 800729a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	621a      	str	r2, [r3, #32]
}
 80072b0:	bf00      	nop
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	2201      	movs	r2, #1
 80072d0:	fa02 f303 	lsl.w	r3, r2, r3
 80072d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a1a      	ldr	r2, [r3, #32]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	43db      	mvns	r3, r3
 80072de:	401a      	ands	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a1a      	ldr	r2, [r3, #32]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f003 031f 	and.w	r3, r3, #31
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	fa01 f303 	lsl.w	r3, r1, r3
 80072f4:	431a      	orrs	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	621a      	str	r2, [r3, #32]
}
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
	...

08007308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800731c:	2302      	movs	r3, #2
 800731e:	e05a      	b.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a21      	ldr	r2, [pc, #132]	; (80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d022      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736c:	d01d      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1d      	ldr	r2, [pc, #116]	; (80073e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d018      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a1b      	ldr	r2, [pc, #108]	; (80073ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d013      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a1a      	ldr	r2, [pc, #104]	; (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00e      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a18      	ldr	r2, [pc, #96]	; (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d009      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a17      	ldr	r2, [pc, #92]	; (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d004      	beq.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a15      	ldr	r2, [pc, #84]	; (80073fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d10c      	bne.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40010000 	.word	0x40010000
 80073e8:	40000400 	.word	0x40000400
 80073ec:	40000800 	.word	0x40000800
 80073f0:	40000c00 	.word	0x40000c00
 80073f4:	40010400 	.word	0x40010400
 80073f8:	40014000 	.word	0x40014000
 80073fc:	40001800 	.word	0x40001800

08007400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e03f      	b.n	80074ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d106      	bne.n	8007454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7fb f99e 	bl	8002790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2224      	movs	r2, #36	; 0x24
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800746a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 ff65 	bl	800833c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	691a      	ldr	r2, [r3, #16]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	695a      	ldr	r2, [r3, #20]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2220      	movs	r2, #32
 80074b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b08a      	sub	sp, #40	; 0x28
 80074c6:	af02      	add	r7, sp, #8
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	603b      	str	r3, [r7, #0]
 80074ce:	4613      	mov	r3, r2
 80074d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b20      	cmp	r3, #32
 80074e0:	d17c      	bne.n	80075dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <HAL_UART_Transmit+0x2c>
 80074e8:	88fb      	ldrh	r3, [r7, #6]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e075      	b.n	80075de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d101      	bne.n	8007500 <HAL_UART_Transmit+0x3e>
 80074fc:	2302      	movs	r3, #2
 80074fe:	e06e      	b.n	80075de <HAL_UART_Transmit+0x11c>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2221      	movs	r2, #33	; 0x21
 8007512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007516:	f7fb fc2d 	bl	8002d74 <HAL_GetTick>
 800751a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	88fa      	ldrh	r2, [r7, #6]
 8007520:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	88fa      	ldrh	r2, [r7, #6]
 8007526:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007530:	d108      	bne.n	8007544 <HAL_UART_Transmit+0x82>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d104      	bne.n	8007544 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800753a:	2300      	movs	r3, #0
 800753c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	61bb      	str	r3, [r7, #24]
 8007542:	e003      	b.n	800754c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007548:	2300      	movs	r3, #0
 800754a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007554:	e02a      	b.n	80075ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2200      	movs	r2, #0
 800755e:	2180      	movs	r1, #128	; 0x80
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 fc21 	bl	8007da8 <UART_WaitOnFlagUntilTimeout>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e036      	b.n	80075de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10b      	bne.n	800758e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007584:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	3302      	adds	r3, #2
 800758a:	61bb      	str	r3, [r7, #24]
 800758c:	e007      	b.n	800759e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	781a      	ldrb	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	3301      	adds	r3, #1
 800759c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1cf      	bne.n	8007556 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2200      	movs	r2, #0
 80075be:	2140      	movs	r1, #64	; 0x40
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 fbf1 	bl	8007da8 <UART_WaitOnFlagUntilTimeout>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e006      	b.n	80075de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2220      	movs	r2, #32
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	e000      	b.n	80075de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80075dc:	2302      	movs	r3, #2
  }
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3720      	adds	r7, #32
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b084      	sub	sp, #16
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	60f8      	str	r0, [r7, #12]
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	4613      	mov	r3, r2
 80075f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b20      	cmp	r3, #32
 80075fe:	d11d      	bne.n	800763c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <HAL_UART_Receive_DMA+0x26>
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e016      	b.n	800763e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007616:	2b01      	cmp	r3, #1
 8007618:	d101      	bne.n	800761e <HAL_UART_Receive_DMA+0x38>
 800761a:	2302      	movs	r3, #2
 800761c:	e00f      	b.n	800763e <HAL_UART_Receive_DMA+0x58>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800762c:	88fb      	ldrh	r3, [r7, #6]
 800762e:	461a      	mov	r2, r3
 8007630:	68b9      	ldr	r1, [r7, #8]
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 fc26 	bl	8007e84 <UART_Start_Receive_DMA>
 8007638:	4603      	mov	r3, r0
 800763a:	e000      	b.n	800763e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800763c:	2302      	movs	r3, #2
  }
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
	...

08007648 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b0ba      	sub	sp, #232	; 0xe8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800766e:	2300      	movs	r3, #0
 8007670:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007674:	2300      	movs	r3, #0
 8007676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800767a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767e:	f003 030f 	and.w	r3, r3, #15
 8007682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10f      	bne.n	80076ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800768e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b00      	cmp	r3, #0
 8007698:	d009      	beq.n	80076ae <HAL_UART_IRQHandler+0x66>
 800769a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800769e:	f003 0320 	and.w	r3, r3, #32
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fd8d 	bl	80081c6 <UART_Receive_IT>
      return;
 80076ac:	e256      	b.n	8007b5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80076ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 80de 	beq.w	8007874 <HAL_UART_IRQHandler+0x22c>
 80076b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d106      	bne.n	80076d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80076c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 80d1 	beq.w	8007874 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00b      	beq.n	80076f6 <HAL_UART_IRQHandler+0xae>
 80076de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ee:	f043 0201 	orr.w	r2, r3, #1
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076fa:	f003 0304 	and.w	r3, r3, #4
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00b      	beq.n	800771a <HAL_UART_IRQHandler+0xd2>
 8007702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d005      	beq.n	800771a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	f043 0202 	orr.w	r2, r3, #2
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800771a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00b      	beq.n	800773e <HAL_UART_IRQHandler+0xf6>
 8007726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b00      	cmp	r3, #0
 8007730:	d005      	beq.n	800773e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	f043 0204 	orr.w	r2, r3, #4
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800773e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007742:	f003 0308 	and.w	r3, r3, #8
 8007746:	2b00      	cmp	r3, #0
 8007748:	d011      	beq.n	800776e <HAL_UART_IRQHandler+0x126>
 800774a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800774e:	f003 0320 	and.w	r3, r3, #32
 8007752:	2b00      	cmp	r3, #0
 8007754:	d105      	bne.n	8007762 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d005      	beq.n	800776e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	f043 0208 	orr.w	r2, r3, #8
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 81ed 	beq.w	8007b52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777c:	f003 0320 	and.w	r3, r3, #32
 8007780:	2b00      	cmp	r3, #0
 8007782:	d008      	beq.n	8007796 <HAL_UART_IRQHandler+0x14e>
 8007784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007788:	f003 0320 	and.w	r3, r3, #32
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fd18 	bl	80081c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a0:	2b40      	cmp	r3, #64	; 0x40
 80077a2:	bf0c      	ite	eq
 80077a4:	2301      	moveq	r3, #1
 80077a6:	2300      	movne	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	f003 0308 	and.w	r3, r3, #8
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d103      	bne.n	80077c2 <HAL_UART_IRQHandler+0x17a>
 80077ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d04f      	beq.n	8007862 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fc20 	bl	8008008 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d2:	2b40      	cmp	r3, #64	; 0x40
 80077d4:	d141      	bne.n	800785a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3314      	adds	r3, #20
 80077dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077e4:	e853 3f00 	ldrex	r3, [r3]
 80077e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3314      	adds	r3, #20
 80077fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007802:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800780e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800781a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1d9      	bne.n	80077d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007826:	2b00      	cmp	r3, #0
 8007828:	d013      	beq.n	8007852 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782e:	4a7d      	ldr	r2, [pc, #500]	; (8007a24 <HAL_UART_IRQHandler+0x3dc>)
 8007830:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007836:	4618      	mov	r0, r3
 8007838:	f7fb fd54 	bl	80032e4 <HAL_DMA_Abort_IT>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d016      	beq.n	8007870 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800784c:	4610      	mov	r0, r2
 800784e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007850:	e00e      	b.n	8007870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f99a 	bl	8007b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007858:	e00a      	b.n	8007870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f996 	bl	8007b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007860:	e006      	b.n	8007870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f992 	bl	8007b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800786e:	e170      	b.n	8007b52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007870:	bf00      	nop
    return;
 8007872:	e16e      	b.n	8007b52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007878:	2b01      	cmp	r3, #1
 800787a:	f040 814a 	bne.w	8007b12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800787e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007882:	f003 0310 	and.w	r3, r3, #16
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 8143 	beq.w	8007b12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800788c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007890:	f003 0310 	and.w	r3, r3, #16
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 813c 	beq.w	8007b12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800789a:	2300      	movs	r3, #0
 800789c:	60bb      	str	r3, [r7, #8]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	60bb      	str	r3, [r7, #8]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	60bb      	str	r3, [r7, #8]
 80078ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ba:	2b40      	cmp	r3, #64	; 0x40
 80078bc:	f040 80b4 	bne.w	8007a28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 8140 	beq.w	8007b56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078de:	429a      	cmp	r2, r3
 80078e0:	f080 8139 	bcs.w	8007b56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f6:	f000 8088 	beq.w	8007a0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	330c      	adds	r3, #12
 8007900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007908:	e853 3f00 	ldrex	r3, [r3]
 800790c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007910:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007918:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	330c      	adds	r3, #12
 8007922:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007926:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800792a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007932:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800793e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1d9      	bne.n	80078fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3314      	adds	r3, #20
 800794c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007950:	e853 3f00 	ldrex	r3, [r3]
 8007954:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007958:	f023 0301 	bic.w	r3, r3, #1
 800795c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3314      	adds	r3, #20
 8007966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800796a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800796e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007972:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800797c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e1      	bne.n	8007946 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3314      	adds	r3, #20
 8007988:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007998:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3314      	adds	r3, #20
 80079a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80079a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80079a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80079b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e3      	bne.n	8007982 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	330c      	adds	r3, #12
 80079ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d2:	e853 3f00 	ldrex	r3, [r3]
 80079d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079da:	f023 0310 	bic.w	r3, r3, #16
 80079de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	330c      	adds	r3, #12
 80079e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80079ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80079ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079f4:	e841 2300 	strex	r3, r2, [r1]
 80079f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e3      	bne.n	80079c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fb fbfd 	bl	8003204 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f8c0 	bl	8007ba0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a20:	e099      	b.n	8007b56 <HAL_UART_IRQHandler+0x50e>
 8007a22:	bf00      	nop
 8007a24:	080080cf 	.word	0x080080cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 808b 	beq.w	8007b5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007a44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 8086 	beq.w	8007b5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	330c      	adds	r3, #12
 8007a54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	330c      	adds	r3, #12
 8007a6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a72:	647a      	str	r2, [r7, #68]	; 0x44
 8007a74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e3      	bne.n	8007a4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3314      	adds	r3, #20
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	623b      	str	r3, [r7, #32]
   return(result);
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	f023 0301 	bic.w	r3, r3, #1
 8007a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3314      	adds	r3, #20
 8007aa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007aaa:	633a      	str	r2, [r7, #48]	; 0x30
 8007aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab2:	e841 2300 	strex	r3, r2, [r1]
 8007ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1e3      	bne.n	8007a86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	330c      	adds	r3, #12
 8007ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0310 	bic.w	r3, r3, #16
 8007ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	330c      	adds	r3, #12
 8007aec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007af0:	61fa      	str	r2, [r7, #28]
 8007af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	69b9      	ldr	r1, [r7, #24]
 8007af6:	69fa      	ldr	r2, [r7, #28]
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	617b      	str	r3, [r7, #20]
   return(result);
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e3      	bne.n	8007acc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f848 	bl	8007ba0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b10:	e023      	b.n	8007b5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d009      	beq.n	8007b32 <HAL_UART_IRQHandler+0x4ea>
 8007b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d003      	beq.n	8007b32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fae3 	bl	80080f6 <UART_Transmit_IT>
    return;
 8007b30:	e014      	b.n	8007b5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00e      	beq.n	8007b5c <HAL_UART_IRQHandler+0x514>
 8007b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d008      	beq.n	8007b5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fb23 	bl	8008196 <UART_EndTransmit_IT>
    return;
 8007b50:	e004      	b.n	8007b5c <HAL_UART_IRQHandler+0x514>
    return;
 8007b52:	bf00      	nop
 8007b54:	e002      	b.n	8007b5c <HAL_UART_IRQHandler+0x514>
      return;
 8007b56:	bf00      	nop
 8007b58:	e000      	b.n	8007b5c <HAL_UART_IRQHandler+0x514>
      return;
 8007b5a:	bf00      	nop
  }
}
 8007b5c:	37e8      	adds	r7, #232	; 0xe8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop

08007b64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b09c      	sub	sp, #112	; 0x70
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d172      	bne.n	8007cba <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	330c      	adds	r3, #12
 8007be0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bf0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	330c      	adds	r3, #12
 8007bf8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bfa:	65ba      	str	r2, [r7, #88]	; 0x58
 8007bfc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e5      	bne.n	8007bda <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3314      	adds	r3, #20
 8007c14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c20:	f023 0301 	bic.w	r3, r3, #1
 8007c24:	667b      	str	r3, [r7, #100]	; 0x64
 8007c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3314      	adds	r3, #20
 8007c2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c2e:	647a      	str	r2, [r7, #68]	; 0x44
 8007c30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e5      	bne.n	8007c0e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3314      	adds	r3, #20
 8007c48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	e853 3f00 	ldrex	r3, [r3]
 8007c50:	623b      	str	r3, [r7, #32]
   return(result);
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c58:	663b      	str	r3, [r7, #96]	; 0x60
 8007c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3314      	adds	r3, #20
 8007c60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c62:	633a      	str	r2, [r7, #48]	; 0x30
 8007c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c6a:	e841 2300 	strex	r3, r2, [r1]
 8007c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1e5      	bne.n	8007c42 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c78:	2220      	movs	r2, #32
 8007c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d119      	bne.n	8007cba <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	330c      	adds	r3, #12
 8007c8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f023 0310 	bic.w	r3, r3, #16
 8007c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	330c      	adds	r3, #12
 8007ca4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ca6:	61fa      	str	r2, [r7, #28]
 8007ca8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	69b9      	ldr	r1, [r7, #24]
 8007cac:	69fa      	ldr	r2, [r7, #28]
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	617b      	str	r3, [r7, #20]
   return(result);
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e5      	bne.n	8007c86 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d106      	bne.n	8007cd0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007cca:	f7ff ff69 	bl	8007ba0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cce:	e002      	b.n	8007cd6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007cd0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007cd2:	f7f9 fced 	bl	80016b0 <HAL_UART_RxCpltCallback>
}
 8007cd6:	bf00      	nop
 8007cd8:	3770      	adds	r7, #112	; 0x70
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d108      	bne.n	8007d06 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cf8:	085b      	lsrs	r3, r3, #1
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f7ff ff4e 	bl	8007ba0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d04:	e002      	b.n	8007d0c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f7ff ff36 	bl	8007b78 <HAL_UART_RxHalfCpltCallback>
}
 8007d0c:	bf00      	nop
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d24:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d30:	2b80      	cmp	r3, #128	; 0x80
 8007d32:	bf0c      	ite	eq
 8007d34:	2301      	moveq	r3, #1
 8007d36:	2300      	movne	r3, #0
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b21      	cmp	r3, #33	; 0x21
 8007d46:	d108      	bne.n	8007d5a <UART_DMAError+0x46>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d005      	beq.n	8007d5a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2200      	movs	r2, #0
 8007d52:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007d54:	68b8      	ldr	r0, [r7, #8]
 8007d56:	f000 f92f 	bl	8007fb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	695b      	ldr	r3, [r3, #20]
 8007d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d64:	2b40      	cmp	r3, #64	; 0x40
 8007d66:	bf0c      	ite	eq
 8007d68:	2301      	moveq	r3, #1
 8007d6a:	2300      	movne	r3, #0
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b22      	cmp	r3, #34	; 0x22
 8007d7a:	d108      	bne.n	8007d8e <UART_DMAError+0x7a>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d005      	beq.n	8007d8e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2200      	movs	r2, #0
 8007d86:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007d88:	68b8      	ldr	r0, [r7, #8]
 8007d8a:	f000 f93d 	bl	8008008 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d92:	f043 0210 	orr.w	r2, r3, #16
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d9a:	68b8      	ldr	r0, [r7, #8]
 8007d9c:	f7ff fef6 	bl	8007b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b090      	sub	sp, #64	; 0x40
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	4613      	mov	r3, r2
 8007db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007db8:	e050      	b.n	8007e5c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dc0:	d04c      	beq.n	8007e5c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d007      	beq.n	8007dd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dc8:	f7fa ffd4 	bl	8002d74 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d241      	bcs.n	8007e5c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	330c      	adds	r3, #12
 8007dde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	e853 3f00 	ldrex	r3, [r3]
 8007de6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	330c      	adds	r3, #12
 8007df6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007df8:	637a      	str	r2, [r7, #52]	; 0x34
 8007dfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e00:	e841 2300 	strex	r3, r2, [r1]
 8007e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1e5      	bne.n	8007dd8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3314      	adds	r3, #20
 8007e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	e853 3f00 	ldrex	r3, [r3]
 8007e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f023 0301 	bic.w	r3, r3, #1
 8007e22:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	3314      	adds	r3, #20
 8007e2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e2c:	623a      	str	r2, [r7, #32]
 8007e2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e30:	69f9      	ldr	r1, [r7, #28]
 8007e32:	6a3a      	ldr	r2, [r7, #32]
 8007e34:	e841 2300 	strex	r3, r2, [r1]
 8007e38:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e5      	bne.n	8007e0c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e00f      	b.n	8007e7c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	4013      	ands	r3, r2
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	bf0c      	ite	eq
 8007e6c:	2301      	moveq	r3, #1
 8007e6e:	2300      	movne	r3, #0
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	461a      	mov	r2, r3
 8007e74:	79fb      	ldrb	r3, [r7, #7]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d09f      	beq.n	8007dba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3740      	adds	r7, #64	; 0x40
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b098      	sub	sp, #96	; 0x60
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	88fa      	ldrh	r2, [r7, #6]
 8007e9c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2222      	movs	r2, #34	; 0x22
 8007ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb0:	4a3e      	ldr	r2, [pc, #248]	; (8007fac <UART_Start_Receive_DMA+0x128>)
 8007eb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb8:	4a3d      	ldr	r2, [pc, #244]	; (8007fb0 <UART_Start_Receive_DMA+0x12c>)
 8007eba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec0:	4a3c      	ldr	r2, [pc, #240]	; (8007fb4 <UART_Start_Receive_DMA+0x130>)
 8007ec2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec8:	2200      	movs	r2, #0
 8007eca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007ecc:	f107 0308 	add.w	r3, r7, #8
 8007ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3304      	adds	r3, #4
 8007edc:	4619      	mov	r1, r3
 8007ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	88fb      	ldrh	r3, [r7, #6]
 8007ee4:	f7fb f936 	bl	8003154 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007ee8:	2300      	movs	r3, #0
 8007eea:	613b      	str	r3, [r7, #16]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	613b      	str	r3, [r7, #16]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	613b      	str	r3, [r7, #16]
 8007efc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	330c      	adds	r3, #12
 8007f0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f10:	e853 3f00 	ldrex	r3, [r3]
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	330c      	adds	r3, #12
 8007f24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f26:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007f28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007f2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1e5      	bne.n	8007f06 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3314      	adds	r3, #20
 8007f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	f043 0301 	orr.w	r3, r3, #1
 8007f50:	657b      	str	r3, [r7, #84]	; 0x54
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3314      	adds	r3, #20
 8007f58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f5a:	63ba      	str	r2, [r7, #56]	; 0x38
 8007f5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f62:	e841 2300 	strex	r3, r2, [r1]
 8007f66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e5      	bne.n	8007f3a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	3314      	adds	r3, #20
 8007f74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f84:	653b      	str	r3, [r7, #80]	; 0x50
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3314      	adds	r3, #20
 8007f8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f8e:	627a      	str	r2, [r7, #36]	; 0x24
 8007f90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	6a39      	ldr	r1, [r7, #32]
 8007f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e5      	bne.n	8007f6e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3760      	adds	r7, #96	; 0x60
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	08007bb9 	.word	0x08007bb9
 8007fb0:	08007cdf 	.word	0x08007cdf
 8007fb4:	08007d15 	.word	0x08007d15

08007fb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b089      	sub	sp, #36	; 0x24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	330c      	adds	r3, #12
 8007fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007fd6:	61fb      	str	r3, [r7, #28]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	330c      	adds	r3, #12
 8007fde:	69fa      	ldr	r2, [r7, #28]
 8007fe0:	61ba      	str	r2, [r7, #24]
 8007fe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6979      	ldr	r1, [r7, #20]
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	613b      	str	r3, [r7, #16]
   return(result);
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e5      	bne.n	8007fc0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007ffc:	bf00      	nop
 8007ffe:	3724      	adds	r7, #36	; 0x24
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008008:	b480      	push	{r7}
 800800a:	b095      	sub	sp, #84	; 0x54
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	330c      	adds	r3, #12
 8008016:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800801a:	e853 3f00 	ldrex	r3, [r3]
 800801e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008022:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	330c      	adds	r3, #12
 800802e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008030:	643a      	str	r2, [r7, #64]	; 0x40
 8008032:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008034:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008036:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008038:	e841 2300 	strex	r3, r2, [r1]
 800803c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800803e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1e5      	bne.n	8008010 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3314      	adds	r3, #20
 800804a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	e853 3f00 	ldrex	r3, [r3]
 8008052:	61fb      	str	r3, [r7, #28]
   return(result);
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	f023 0301 	bic.w	r3, r3, #1
 800805a:	64bb      	str	r3, [r7, #72]	; 0x48
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3314      	adds	r3, #20
 8008062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008064:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800806a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800806c:	e841 2300 	strex	r3, r2, [r1]
 8008070:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1e5      	bne.n	8008044 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807c:	2b01      	cmp	r3, #1
 800807e:	d119      	bne.n	80080b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	330c      	adds	r3, #12
 8008086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	e853 3f00 	ldrex	r3, [r3]
 800808e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f023 0310 	bic.w	r3, r3, #16
 8008096:	647b      	str	r3, [r7, #68]	; 0x44
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	330c      	adds	r3, #12
 800809e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080a0:	61ba      	str	r2, [r7, #24]
 80080a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a4:	6979      	ldr	r1, [r7, #20]
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	e841 2300 	strex	r3, r2, [r1]
 80080ac:	613b      	str	r3, [r7, #16]
   return(result);
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1e5      	bne.n	8008080 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2220      	movs	r2, #32
 80080b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80080c2:	bf00      	nop
 80080c4:	3754      	adds	r7, #84	; 0x54
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f7ff fd4f 	bl	8007b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080ee:	bf00      	nop
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b085      	sub	sp, #20
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b21      	cmp	r3, #33	; 0x21
 8008108:	d13e      	bne.n	8008188 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008112:	d114      	bne.n	800813e <UART_Transmit_IT+0x48>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d110      	bne.n	800813e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a1b      	ldr	r3, [r3, #32]
 8008120:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008130:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	1c9a      	adds	r2, r3, #2
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	621a      	str	r2, [r3, #32]
 800813c:	e008      	b.n	8008150 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	1c59      	adds	r1, r3, #1
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	6211      	str	r1, [r2, #32]
 8008148:	781a      	ldrb	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008154:	b29b      	uxth	r3, r3
 8008156:	3b01      	subs	r3, #1
 8008158:	b29b      	uxth	r3, r3
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	4619      	mov	r1, r3
 800815e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10f      	bne.n	8008184 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68da      	ldr	r2, [r3, #12]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008172:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68da      	ldr	r2, [r3, #12]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008182:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	e000      	b.n	800818a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008188:	2302      	movs	r3, #2
  }
}
 800818a:	4618      	mov	r0, r3
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b082      	sub	sp, #8
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68da      	ldr	r2, [r3, #12]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2220      	movs	r2, #32
 80081b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff fcd4 	bl	8007b64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b08c      	sub	sp, #48	; 0x30
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b22      	cmp	r3, #34	; 0x22
 80081d8:	f040 80ab 	bne.w	8008332 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e4:	d117      	bne.n	8008216 <UART_Receive_IT+0x50>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d113      	bne.n	8008216 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008204:	b29a      	uxth	r2, r3
 8008206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008208:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820e:	1c9a      	adds	r2, r3, #2
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	629a      	str	r2, [r3, #40]	; 0x28
 8008214:	e026      	b.n	8008264 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800821c:	2300      	movs	r3, #0
 800821e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008228:	d007      	beq.n	800823a <UART_Receive_IT+0x74>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10a      	bne.n	8008248 <UART_Receive_IT+0x82>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d106      	bne.n	8008248 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	b2da      	uxtb	r2, r3
 8008242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008244:	701a      	strb	r2, [r3, #0]
 8008246:	e008      	b.n	800825a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	b2db      	uxtb	r3, r3
 8008250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008254:	b2da      	uxtb	r2, r3
 8008256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008258:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825e:	1c5a      	adds	r2, r3, #1
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008268:	b29b      	uxth	r3, r3
 800826a:	3b01      	subs	r3, #1
 800826c:	b29b      	uxth	r3, r3
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	4619      	mov	r1, r3
 8008272:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008274:	2b00      	cmp	r3, #0
 8008276:	d15a      	bne.n	800832e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f022 0220 	bic.w	r2, r2, #32
 8008286:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68da      	ldr	r2, [r3, #12]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008296:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	695a      	ldr	r2, [r3, #20]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f022 0201 	bic.w	r2, r2, #1
 80082a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2220      	movs	r2, #32
 80082ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d135      	bne.n	8008324 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	330c      	adds	r3, #12
 80082c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	e853 3f00 	ldrex	r3, [r3]
 80082cc:	613b      	str	r3, [r7, #16]
   return(result);
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f023 0310 	bic.w	r3, r3, #16
 80082d4:	627b      	str	r3, [r7, #36]	; 0x24
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	330c      	adds	r3, #12
 80082dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082de:	623a      	str	r2, [r7, #32]
 80082e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e2:	69f9      	ldr	r1, [r7, #28]
 80082e4:	6a3a      	ldr	r2, [r7, #32]
 80082e6:	e841 2300 	strex	r3, r2, [r1]
 80082ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1e5      	bne.n	80082be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0310 	and.w	r3, r3, #16
 80082fc:	2b10      	cmp	r3, #16
 80082fe:	d10a      	bne.n	8008316 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800831a:	4619      	mov	r1, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7ff fc3f 	bl	8007ba0 <HAL_UARTEx_RxEventCallback>
 8008322:	e002      	b.n	800832a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7f9 f9c3 	bl	80016b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	e002      	b.n	8008334 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	e000      	b.n	8008334 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008332:	2302      	movs	r3, #2
  }
}
 8008334:	4618      	mov	r0, r3
 8008336:	3730      	adds	r7, #48	; 0x30
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800833c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008340:	b0c0      	sub	sp, #256	; 0x100
 8008342:	af00      	add	r7, sp, #0
 8008344:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008358:	68d9      	ldr	r1, [r3, #12]
 800835a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	ea40 0301 	orr.w	r3, r0, r1
 8008364:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836a:	689a      	ldr	r2, [r3, #8]
 800836c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	431a      	orrs	r2, r3
 8008374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	431a      	orrs	r2, r3
 800837c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	4313      	orrs	r3, r2
 8008384:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008394:	f021 010c 	bic.w	r1, r1, #12
 8008398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083a2:	430b      	orrs	r3, r1
 80083a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80083b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b6:	6999      	ldr	r1, [r3, #24]
 80083b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	ea40 0301 	orr.w	r3, r0, r1
 80083c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	4b8f      	ldr	r3, [pc, #572]	; (8008608 <UART_SetConfig+0x2cc>)
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d005      	beq.n	80083dc <UART_SetConfig+0xa0>
 80083d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	4b8d      	ldr	r3, [pc, #564]	; (800860c <UART_SetConfig+0x2d0>)
 80083d8:	429a      	cmp	r2, r3
 80083da:	d104      	bne.n	80083e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083dc:	f7fb fd2c 	bl	8003e38 <HAL_RCC_GetPCLK2Freq>
 80083e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80083e4:	e003      	b.n	80083ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083e6:	f7fb fd13 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 80083ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083f8:	f040 810c 	bne.w	8008614 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008400:	2200      	movs	r2, #0
 8008402:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008406:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800840a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800840e:	4622      	mov	r2, r4
 8008410:	462b      	mov	r3, r5
 8008412:	1891      	adds	r1, r2, r2
 8008414:	65b9      	str	r1, [r7, #88]	; 0x58
 8008416:	415b      	adcs	r3, r3
 8008418:	65fb      	str	r3, [r7, #92]	; 0x5c
 800841a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800841e:	4621      	mov	r1, r4
 8008420:	eb12 0801 	adds.w	r8, r2, r1
 8008424:	4629      	mov	r1, r5
 8008426:	eb43 0901 	adc.w	r9, r3, r1
 800842a:	f04f 0200 	mov.w	r2, #0
 800842e:	f04f 0300 	mov.w	r3, #0
 8008432:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008436:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800843a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800843e:	4690      	mov	r8, r2
 8008440:	4699      	mov	r9, r3
 8008442:	4623      	mov	r3, r4
 8008444:	eb18 0303 	adds.w	r3, r8, r3
 8008448:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800844c:	462b      	mov	r3, r5
 800844e:	eb49 0303 	adc.w	r3, r9, r3
 8008452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008462:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008466:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800846a:	460b      	mov	r3, r1
 800846c:	18db      	adds	r3, r3, r3
 800846e:	653b      	str	r3, [r7, #80]	; 0x50
 8008470:	4613      	mov	r3, r2
 8008472:	eb42 0303 	adc.w	r3, r2, r3
 8008476:	657b      	str	r3, [r7, #84]	; 0x54
 8008478:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800847c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008480:	f7f7 ff1e 	bl	80002c0 <__aeabi_uldivmod>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	4b61      	ldr	r3, [pc, #388]	; (8008610 <UART_SetConfig+0x2d4>)
 800848a:	fba3 2302 	umull	r2, r3, r3, r2
 800848e:	095b      	lsrs	r3, r3, #5
 8008490:	011c      	lsls	r4, r3, #4
 8008492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008496:	2200      	movs	r2, #0
 8008498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800849c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80084a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80084a4:	4642      	mov	r2, r8
 80084a6:	464b      	mov	r3, r9
 80084a8:	1891      	adds	r1, r2, r2
 80084aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80084ac:	415b      	adcs	r3, r3
 80084ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084b4:	4641      	mov	r1, r8
 80084b6:	eb12 0a01 	adds.w	sl, r2, r1
 80084ba:	4649      	mov	r1, r9
 80084bc:	eb43 0b01 	adc.w	fp, r3, r1
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80084cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80084d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084d4:	4692      	mov	sl, r2
 80084d6:	469b      	mov	fp, r3
 80084d8:	4643      	mov	r3, r8
 80084da:	eb1a 0303 	adds.w	r3, sl, r3
 80084de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084e2:	464b      	mov	r3, r9
 80084e4:	eb4b 0303 	adc.w	r3, fp, r3
 80084e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80084ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80084fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008500:	460b      	mov	r3, r1
 8008502:	18db      	adds	r3, r3, r3
 8008504:	643b      	str	r3, [r7, #64]	; 0x40
 8008506:	4613      	mov	r3, r2
 8008508:	eb42 0303 	adc.w	r3, r2, r3
 800850c:	647b      	str	r3, [r7, #68]	; 0x44
 800850e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008512:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008516:	f7f7 fed3 	bl	80002c0 <__aeabi_uldivmod>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	4611      	mov	r1, r2
 8008520:	4b3b      	ldr	r3, [pc, #236]	; (8008610 <UART_SetConfig+0x2d4>)
 8008522:	fba3 2301 	umull	r2, r3, r3, r1
 8008526:	095b      	lsrs	r3, r3, #5
 8008528:	2264      	movs	r2, #100	; 0x64
 800852a:	fb02 f303 	mul.w	r3, r2, r3
 800852e:	1acb      	subs	r3, r1, r3
 8008530:	00db      	lsls	r3, r3, #3
 8008532:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008536:	4b36      	ldr	r3, [pc, #216]	; (8008610 <UART_SetConfig+0x2d4>)
 8008538:	fba3 2302 	umull	r2, r3, r3, r2
 800853c:	095b      	lsrs	r3, r3, #5
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008544:	441c      	add	r4, r3
 8008546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800854a:	2200      	movs	r2, #0
 800854c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008550:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008554:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008558:	4642      	mov	r2, r8
 800855a:	464b      	mov	r3, r9
 800855c:	1891      	adds	r1, r2, r2
 800855e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008560:	415b      	adcs	r3, r3
 8008562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008564:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008568:	4641      	mov	r1, r8
 800856a:	1851      	adds	r1, r2, r1
 800856c:	6339      	str	r1, [r7, #48]	; 0x30
 800856e:	4649      	mov	r1, r9
 8008570:	414b      	adcs	r3, r1
 8008572:	637b      	str	r3, [r7, #52]	; 0x34
 8008574:	f04f 0200 	mov.w	r2, #0
 8008578:	f04f 0300 	mov.w	r3, #0
 800857c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008580:	4659      	mov	r1, fp
 8008582:	00cb      	lsls	r3, r1, #3
 8008584:	4651      	mov	r1, sl
 8008586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800858a:	4651      	mov	r1, sl
 800858c:	00ca      	lsls	r2, r1, #3
 800858e:	4610      	mov	r0, r2
 8008590:	4619      	mov	r1, r3
 8008592:	4603      	mov	r3, r0
 8008594:	4642      	mov	r2, r8
 8008596:	189b      	adds	r3, r3, r2
 8008598:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800859c:	464b      	mov	r3, r9
 800859e:	460a      	mov	r2, r1
 80085a0:	eb42 0303 	adc.w	r3, r2, r3
 80085a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80085b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80085b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80085bc:	460b      	mov	r3, r1
 80085be:	18db      	adds	r3, r3, r3
 80085c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80085c2:	4613      	mov	r3, r2
 80085c4:	eb42 0303 	adc.w	r3, r2, r3
 80085c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80085d2:	f7f7 fe75 	bl	80002c0 <__aeabi_uldivmod>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	4b0d      	ldr	r3, [pc, #52]	; (8008610 <UART_SetConfig+0x2d4>)
 80085dc:	fba3 1302 	umull	r1, r3, r3, r2
 80085e0:	095b      	lsrs	r3, r3, #5
 80085e2:	2164      	movs	r1, #100	; 0x64
 80085e4:	fb01 f303 	mul.w	r3, r1, r3
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	3332      	adds	r3, #50	; 0x32
 80085ee:	4a08      	ldr	r2, [pc, #32]	; (8008610 <UART_SetConfig+0x2d4>)
 80085f0:	fba2 2303 	umull	r2, r3, r2, r3
 80085f4:	095b      	lsrs	r3, r3, #5
 80085f6:	f003 0207 	and.w	r2, r3, #7
 80085fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4422      	add	r2, r4
 8008602:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008604:	e105      	b.n	8008812 <UART_SetConfig+0x4d6>
 8008606:	bf00      	nop
 8008608:	40011000 	.word	0x40011000
 800860c:	40011400 	.word	0x40011400
 8008610:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008618:	2200      	movs	r2, #0
 800861a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800861e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008622:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008626:	4642      	mov	r2, r8
 8008628:	464b      	mov	r3, r9
 800862a:	1891      	adds	r1, r2, r2
 800862c:	6239      	str	r1, [r7, #32]
 800862e:	415b      	adcs	r3, r3
 8008630:	627b      	str	r3, [r7, #36]	; 0x24
 8008632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008636:	4641      	mov	r1, r8
 8008638:	1854      	adds	r4, r2, r1
 800863a:	4649      	mov	r1, r9
 800863c:	eb43 0501 	adc.w	r5, r3, r1
 8008640:	f04f 0200 	mov.w	r2, #0
 8008644:	f04f 0300 	mov.w	r3, #0
 8008648:	00eb      	lsls	r3, r5, #3
 800864a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800864e:	00e2      	lsls	r2, r4, #3
 8008650:	4614      	mov	r4, r2
 8008652:	461d      	mov	r5, r3
 8008654:	4643      	mov	r3, r8
 8008656:	18e3      	adds	r3, r4, r3
 8008658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800865c:	464b      	mov	r3, r9
 800865e:	eb45 0303 	adc.w	r3, r5, r3
 8008662:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008672:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008676:	f04f 0200 	mov.w	r2, #0
 800867a:	f04f 0300 	mov.w	r3, #0
 800867e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008682:	4629      	mov	r1, r5
 8008684:	008b      	lsls	r3, r1, #2
 8008686:	4621      	mov	r1, r4
 8008688:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800868c:	4621      	mov	r1, r4
 800868e:	008a      	lsls	r2, r1, #2
 8008690:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008694:	f7f7 fe14 	bl	80002c0 <__aeabi_uldivmod>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	4b60      	ldr	r3, [pc, #384]	; (8008820 <UART_SetConfig+0x4e4>)
 800869e:	fba3 2302 	umull	r2, r3, r3, r2
 80086a2:	095b      	lsrs	r3, r3, #5
 80086a4:	011c      	lsls	r4, r3, #4
 80086a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086aa:	2200      	movs	r2, #0
 80086ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80086b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80086b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80086b8:	4642      	mov	r2, r8
 80086ba:	464b      	mov	r3, r9
 80086bc:	1891      	adds	r1, r2, r2
 80086be:	61b9      	str	r1, [r7, #24]
 80086c0:	415b      	adcs	r3, r3
 80086c2:	61fb      	str	r3, [r7, #28]
 80086c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086c8:	4641      	mov	r1, r8
 80086ca:	1851      	adds	r1, r2, r1
 80086cc:	6139      	str	r1, [r7, #16]
 80086ce:	4649      	mov	r1, r9
 80086d0:	414b      	adcs	r3, r1
 80086d2:	617b      	str	r3, [r7, #20]
 80086d4:	f04f 0200 	mov.w	r2, #0
 80086d8:	f04f 0300 	mov.w	r3, #0
 80086dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086e0:	4659      	mov	r1, fp
 80086e2:	00cb      	lsls	r3, r1, #3
 80086e4:	4651      	mov	r1, sl
 80086e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086ea:	4651      	mov	r1, sl
 80086ec:	00ca      	lsls	r2, r1, #3
 80086ee:	4610      	mov	r0, r2
 80086f0:	4619      	mov	r1, r3
 80086f2:	4603      	mov	r3, r0
 80086f4:	4642      	mov	r2, r8
 80086f6:	189b      	adds	r3, r3, r2
 80086f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086fc:	464b      	mov	r3, r9
 80086fe:	460a      	mov	r2, r1
 8008700:	eb42 0303 	adc.w	r3, r2, r3
 8008704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	67bb      	str	r3, [r7, #120]	; 0x78
 8008712:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008714:	f04f 0200 	mov.w	r2, #0
 8008718:	f04f 0300 	mov.w	r3, #0
 800871c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008720:	4649      	mov	r1, r9
 8008722:	008b      	lsls	r3, r1, #2
 8008724:	4641      	mov	r1, r8
 8008726:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800872a:	4641      	mov	r1, r8
 800872c:	008a      	lsls	r2, r1, #2
 800872e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008732:	f7f7 fdc5 	bl	80002c0 <__aeabi_uldivmod>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	4b39      	ldr	r3, [pc, #228]	; (8008820 <UART_SetConfig+0x4e4>)
 800873c:	fba3 1302 	umull	r1, r3, r3, r2
 8008740:	095b      	lsrs	r3, r3, #5
 8008742:	2164      	movs	r1, #100	; 0x64
 8008744:	fb01 f303 	mul.w	r3, r1, r3
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	011b      	lsls	r3, r3, #4
 800874c:	3332      	adds	r3, #50	; 0x32
 800874e:	4a34      	ldr	r2, [pc, #208]	; (8008820 <UART_SetConfig+0x4e4>)
 8008750:	fba2 2303 	umull	r2, r3, r2, r3
 8008754:	095b      	lsrs	r3, r3, #5
 8008756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800875a:	441c      	add	r4, r3
 800875c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008760:	2200      	movs	r2, #0
 8008762:	673b      	str	r3, [r7, #112]	; 0x70
 8008764:	677a      	str	r2, [r7, #116]	; 0x74
 8008766:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800876a:	4642      	mov	r2, r8
 800876c:	464b      	mov	r3, r9
 800876e:	1891      	adds	r1, r2, r2
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	415b      	adcs	r3, r3
 8008774:	60fb      	str	r3, [r7, #12]
 8008776:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800877a:	4641      	mov	r1, r8
 800877c:	1851      	adds	r1, r2, r1
 800877e:	6039      	str	r1, [r7, #0]
 8008780:	4649      	mov	r1, r9
 8008782:	414b      	adcs	r3, r1
 8008784:	607b      	str	r3, [r7, #4]
 8008786:	f04f 0200 	mov.w	r2, #0
 800878a:	f04f 0300 	mov.w	r3, #0
 800878e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008792:	4659      	mov	r1, fp
 8008794:	00cb      	lsls	r3, r1, #3
 8008796:	4651      	mov	r1, sl
 8008798:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800879c:	4651      	mov	r1, sl
 800879e:	00ca      	lsls	r2, r1, #3
 80087a0:	4610      	mov	r0, r2
 80087a2:	4619      	mov	r1, r3
 80087a4:	4603      	mov	r3, r0
 80087a6:	4642      	mov	r2, r8
 80087a8:	189b      	adds	r3, r3, r2
 80087aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80087ac:	464b      	mov	r3, r9
 80087ae:	460a      	mov	r2, r1
 80087b0:	eb42 0303 	adc.w	r3, r2, r3
 80087b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	663b      	str	r3, [r7, #96]	; 0x60
 80087c0:	667a      	str	r2, [r7, #100]	; 0x64
 80087c2:	f04f 0200 	mov.w	r2, #0
 80087c6:	f04f 0300 	mov.w	r3, #0
 80087ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80087ce:	4649      	mov	r1, r9
 80087d0:	008b      	lsls	r3, r1, #2
 80087d2:	4641      	mov	r1, r8
 80087d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087d8:	4641      	mov	r1, r8
 80087da:	008a      	lsls	r2, r1, #2
 80087dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80087e0:	f7f7 fd6e 	bl	80002c0 <__aeabi_uldivmod>
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	4b0d      	ldr	r3, [pc, #52]	; (8008820 <UART_SetConfig+0x4e4>)
 80087ea:	fba3 1302 	umull	r1, r3, r3, r2
 80087ee:	095b      	lsrs	r3, r3, #5
 80087f0:	2164      	movs	r1, #100	; 0x64
 80087f2:	fb01 f303 	mul.w	r3, r1, r3
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	011b      	lsls	r3, r3, #4
 80087fa:	3332      	adds	r3, #50	; 0x32
 80087fc:	4a08      	ldr	r2, [pc, #32]	; (8008820 <UART_SetConfig+0x4e4>)
 80087fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008802:	095b      	lsrs	r3, r3, #5
 8008804:	f003 020f 	and.w	r2, r3, #15
 8008808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4422      	add	r2, r4
 8008810:	609a      	str	r2, [r3, #8]
}
 8008812:	bf00      	nop
 8008814:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008818:	46bd      	mov	sp, r7
 800881a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800881e:	bf00      	nop
 8008820:	51eb851f 	.word	0x51eb851f

08008824 <__errno>:
 8008824:	4b01      	ldr	r3, [pc, #4]	; (800882c <__errno+0x8>)
 8008826:	6818      	ldr	r0, [r3, #0]
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	2000004c 	.word	0x2000004c

08008830 <__libc_init_array>:
 8008830:	b570      	push	{r4, r5, r6, lr}
 8008832:	4d0d      	ldr	r5, [pc, #52]	; (8008868 <__libc_init_array+0x38>)
 8008834:	4c0d      	ldr	r4, [pc, #52]	; (800886c <__libc_init_array+0x3c>)
 8008836:	1b64      	subs	r4, r4, r5
 8008838:	10a4      	asrs	r4, r4, #2
 800883a:	2600      	movs	r6, #0
 800883c:	42a6      	cmp	r6, r4
 800883e:	d109      	bne.n	8008854 <__libc_init_array+0x24>
 8008840:	4d0b      	ldr	r5, [pc, #44]	; (8008870 <__libc_init_array+0x40>)
 8008842:	4c0c      	ldr	r4, [pc, #48]	; (8008874 <__libc_init_array+0x44>)
 8008844:	f000 fcfc 	bl	8009240 <_init>
 8008848:	1b64      	subs	r4, r4, r5
 800884a:	10a4      	asrs	r4, r4, #2
 800884c:	2600      	movs	r6, #0
 800884e:	42a6      	cmp	r6, r4
 8008850:	d105      	bne.n	800885e <__libc_init_array+0x2e>
 8008852:	bd70      	pop	{r4, r5, r6, pc}
 8008854:	f855 3b04 	ldr.w	r3, [r5], #4
 8008858:	4798      	blx	r3
 800885a:	3601      	adds	r6, #1
 800885c:	e7ee      	b.n	800883c <__libc_init_array+0xc>
 800885e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008862:	4798      	blx	r3
 8008864:	3601      	adds	r6, #1
 8008866:	e7f2      	b.n	800884e <__libc_init_array+0x1e>
 8008868:	08009460 	.word	0x08009460
 800886c:	08009460 	.word	0x08009460
 8008870:	08009460 	.word	0x08009460
 8008874:	08009464 	.word	0x08009464

08008878 <memcpy>:
 8008878:	440a      	add	r2, r1
 800887a:	4291      	cmp	r1, r2
 800887c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008880:	d100      	bne.n	8008884 <memcpy+0xc>
 8008882:	4770      	bx	lr
 8008884:	b510      	push	{r4, lr}
 8008886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800888a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800888e:	4291      	cmp	r1, r2
 8008890:	d1f9      	bne.n	8008886 <memcpy+0xe>
 8008892:	bd10      	pop	{r4, pc}

08008894 <memset>:
 8008894:	4402      	add	r2, r0
 8008896:	4603      	mov	r3, r0
 8008898:	4293      	cmp	r3, r2
 800889a:	d100      	bne.n	800889e <memset+0xa>
 800889c:	4770      	bx	lr
 800889e:	f803 1b01 	strb.w	r1, [r3], #1
 80088a2:	e7f9      	b.n	8008898 <memset+0x4>

080088a4 <siprintf>:
 80088a4:	b40e      	push	{r1, r2, r3}
 80088a6:	b500      	push	{lr}
 80088a8:	b09c      	sub	sp, #112	; 0x70
 80088aa:	ab1d      	add	r3, sp, #116	; 0x74
 80088ac:	9002      	str	r0, [sp, #8]
 80088ae:	9006      	str	r0, [sp, #24]
 80088b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088b4:	4809      	ldr	r0, [pc, #36]	; (80088dc <siprintf+0x38>)
 80088b6:	9107      	str	r1, [sp, #28]
 80088b8:	9104      	str	r1, [sp, #16]
 80088ba:	4909      	ldr	r1, [pc, #36]	; (80088e0 <siprintf+0x3c>)
 80088bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80088c0:	9105      	str	r1, [sp, #20]
 80088c2:	6800      	ldr	r0, [r0, #0]
 80088c4:	9301      	str	r3, [sp, #4]
 80088c6:	a902      	add	r1, sp, #8
 80088c8:	f000 f96a 	bl	8008ba0 <_svfiprintf_r>
 80088cc:	9b02      	ldr	r3, [sp, #8]
 80088ce:	2200      	movs	r2, #0
 80088d0:	701a      	strb	r2, [r3, #0]
 80088d2:	b01c      	add	sp, #112	; 0x70
 80088d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088d8:	b003      	add	sp, #12
 80088da:	4770      	bx	lr
 80088dc:	2000004c 	.word	0x2000004c
 80088e0:	ffff0208 	.word	0xffff0208

080088e4 <strchr>:
 80088e4:	b2c9      	uxtb	r1, r1
 80088e6:	4603      	mov	r3, r0
 80088e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088ec:	b11a      	cbz	r2, 80088f6 <strchr+0x12>
 80088ee:	428a      	cmp	r2, r1
 80088f0:	d1f9      	bne.n	80088e6 <strchr+0x2>
 80088f2:	4618      	mov	r0, r3
 80088f4:	4770      	bx	lr
 80088f6:	2900      	cmp	r1, #0
 80088f8:	bf18      	it	ne
 80088fa:	2300      	movne	r3, #0
 80088fc:	e7f9      	b.n	80088f2 <strchr+0xe>
	...

08008900 <strdup>:
 8008900:	4b02      	ldr	r3, [pc, #8]	; (800890c <strdup+0xc>)
 8008902:	4601      	mov	r1, r0
 8008904:	6818      	ldr	r0, [r3, #0]
 8008906:	f000 b803 	b.w	8008910 <_strdup_r>
 800890a:	bf00      	nop
 800890c:	2000004c 	.word	0x2000004c

08008910 <_strdup_r>:
 8008910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008912:	4604      	mov	r4, r0
 8008914:	4608      	mov	r0, r1
 8008916:	460d      	mov	r5, r1
 8008918:	f7f7 fc7a 	bl	8000210 <strlen>
 800891c:	1c42      	adds	r2, r0, #1
 800891e:	4611      	mov	r1, r2
 8008920:	4620      	mov	r0, r4
 8008922:	9201      	str	r2, [sp, #4]
 8008924:	f000 f86c 	bl	8008a00 <_malloc_r>
 8008928:	4604      	mov	r4, r0
 800892a:	b118      	cbz	r0, 8008934 <_strdup_r+0x24>
 800892c:	9a01      	ldr	r2, [sp, #4]
 800892e:	4629      	mov	r1, r5
 8008930:	f7ff ffa2 	bl	8008878 <memcpy>
 8008934:	4620      	mov	r0, r4
 8008936:	b003      	add	sp, #12
 8008938:	bd30      	pop	{r4, r5, pc}

0800893a <strsep>:
 800893a:	4602      	mov	r2, r0
 800893c:	2300      	movs	r3, #0
 800893e:	6800      	ldr	r0, [r0, #0]
 8008940:	f000 b816 	b.w	8008970 <__strtok_r>

08008944 <strstr>:
 8008944:	780a      	ldrb	r2, [r1, #0]
 8008946:	b570      	push	{r4, r5, r6, lr}
 8008948:	b96a      	cbnz	r2, 8008966 <strstr+0x22>
 800894a:	bd70      	pop	{r4, r5, r6, pc}
 800894c:	429a      	cmp	r2, r3
 800894e:	d109      	bne.n	8008964 <strstr+0x20>
 8008950:	460c      	mov	r4, r1
 8008952:	4605      	mov	r5, r0
 8008954:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0f6      	beq.n	800894a <strstr+0x6>
 800895c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008960:	429e      	cmp	r6, r3
 8008962:	d0f7      	beq.n	8008954 <strstr+0x10>
 8008964:	3001      	adds	r0, #1
 8008966:	7803      	ldrb	r3, [r0, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1ef      	bne.n	800894c <strstr+0x8>
 800896c:	4618      	mov	r0, r3
 800896e:	e7ec      	b.n	800894a <strstr+0x6>

08008970 <__strtok_r>:
 8008970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008972:	b908      	cbnz	r0, 8008978 <__strtok_r+0x8>
 8008974:	6810      	ldr	r0, [r2, #0]
 8008976:	b188      	cbz	r0, 800899c <__strtok_r+0x2c>
 8008978:	4604      	mov	r4, r0
 800897a:	4620      	mov	r0, r4
 800897c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008980:	460f      	mov	r7, r1
 8008982:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008986:	b91e      	cbnz	r6, 8008990 <__strtok_r+0x20>
 8008988:	b965      	cbnz	r5, 80089a4 <__strtok_r+0x34>
 800898a:	6015      	str	r5, [r2, #0]
 800898c:	4628      	mov	r0, r5
 800898e:	e005      	b.n	800899c <__strtok_r+0x2c>
 8008990:	42b5      	cmp	r5, r6
 8008992:	d1f6      	bne.n	8008982 <__strtok_r+0x12>
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1f0      	bne.n	800897a <__strtok_r+0xa>
 8008998:	6014      	str	r4, [r2, #0]
 800899a:	7003      	strb	r3, [r0, #0]
 800899c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800899e:	461c      	mov	r4, r3
 80089a0:	e00c      	b.n	80089bc <__strtok_r+0x4c>
 80089a2:	b915      	cbnz	r5, 80089aa <__strtok_r+0x3a>
 80089a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089a8:	460e      	mov	r6, r1
 80089aa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80089ae:	42ab      	cmp	r3, r5
 80089b0:	d1f7      	bne.n	80089a2 <__strtok_r+0x32>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0f3      	beq.n	800899e <__strtok_r+0x2e>
 80089b6:	2300      	movs	r3, #0
 80089b8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80089bc:	6014      	str	r4, [r2, #0]
 80089be:	e7ed      	b.n	800899c <__strtok_r+0x2c>

080089c0 <sbrk_aligned>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	4e0e      	ldr	r6, [pc, #56]	; (80089fc <sbrk_aligned+0x3c>)
 80089c4:	460c      	mov	r4, r1
 80089c6:	6831      	ldr	r1, [r6, #0]
 80089c8:	4605      	mov	r5, r0
 80089ca:	b911      	cbnz	r1, 80089d2 <sbrk_aligned+0x12>
 80089cc:	f000 fb7c 	bl	80090c8 <_sbrk_r>
 80089d0:	6030      	str	r0, [r6, #0]
 80089d2:	4621      	mov	r1, r4
 80089d4:	4628      	mov	r0, r5
 80089d6:	f000 fb77 	bl	80090c8 <_sbrk_r>
 80089da:	1c43      	adds	r3, r0, #1
 80089dc:	d00a      	beq.n	80089f4 <sbrk_aligned+0x34>
 80089de:	1cc4      	adds	r4, r0, #3
 80089e0:	f024 0403 	bic.w	r4, r4, #3
 80089e4:	42a0      	cmp	r0, r4
 80089e6:	d007      	beq.n	80089f8 <sbrk_aligned+0x38>
 80089e8:	1a21      	subs	r1, r4, r0
 80089ea:	4628      	mov	r0, r5
 80089ec:	f000 fb6c 	bl	80090c8 <_sbrk_r>
 80089f0:	3001      	adds	r0, #1
 80089f2:	d101      	bne.n	80089f8 <sbrk_aligned+0x38>
 80089f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80089f8:	4620      	mov	r0, r4
 80089fa:	bd70      	pop	{r4, r5, r6, pc}
 80089fc:	20004c94 	.word	0x20004c94

08008a00 <_malloc_r>:
 8008a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a04:	1ccd      	adds	r5, r1, #3
 8008a06:	f025 0503 	bic.w	r5, r5, #3
 8008a0a:	3508      	adds	r5, #8
 8008a0c:	2d0c      	cmp	r5, #12
 8008a0e:	bf38      	it	cc
 8008a10:	250c      	movcc	r5, #12
 8008a12:	2d00      	cmp	r5, #0
 8008a14:	4607      	mov	r7, r0
 8008a16:	db01      	blt.n	8008a1c <_malloc_r+0x1c>
 8008a18:	42a9      	cmp	r1, r5
 8008a1a:	d905      	bls.n	8008a28 <_malloc_r+0x28>
 8008a1c:	230c      	movs	r3, #12
 8008a1e:	603b      	str	r3, [r7, #0]
 8008a20:	2600      	movs	r6, #0
 8008a22:	4630      	mov	r0, r6
 8008a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a28:	4e2e      	ldr	r6, [pc, #184]	; (8008ae4 <_malloc_r+0xe4>)
 8008a2a:	f000 fb77 	bl	800911c <__malloc_lock>
 8008a2e:	6833      	ldr	r3, [r6, #0]
 8008a30:	461c      	mov	r4, r3
 8008a32:	bb34      	cbnz	r4, 8008a82 <_malloc_r+0x82>
 8008a34:	4629      	mov	r1, r5
 8008a36:	4638      	mov	r0, r7
 8008a38:	f7ff ffc2 	bl	80089c0 <sbrk_aligned>
 8008a3c:	1c43      	adds	r3, r0, #1
 8008a3e:	4604      	mov	r4, r0
 8008a40:	d14d      	bne.n	8008ade <_malloc_r+0xde>
 8008a42:	6834      	ldr	r4, [r6, #0]
 8008a44:	4626      	mov	r6, r4
 8008a46:	2e00      	cmp	r6, #0
 8008a48:	d140      	bne.n	8008acc <_malloc_r+0xcc>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4638      	mov	r0, r7
 8008a50:	eb04 0803 	add.w	r8, r4, r3
 8008a54:	f000 fb38 	bl	80090c8 <_sbrk_r>
 8008a58:	4580      	cmp	r8, r0
 8008a5a:	d13a      	bne.n	8008ad2 <_malloc_r+0xd2>
 8008a5c:	6821      	ldr	r1, [r4, #0]
 8008a5e:	3503      	adds	r5, #3
 8008a60:	1a6d      	subs	r5, r5, r1
 8008a62:	f025 0503 	bic.w	r5, r5, #3
 8008a66:	3508      	adds	r5, #8
 8008a68:	2d0c      	cmp	r5, #12
 8008a6a:	bf38      	it	cc
 8008a6c:	250c      	movcc	r5, #12
 8008a6e:	4629      	mov	r1, r5
 8008a70:	4638      	mov	r0, r7
 8008a72:	f7ff ffa5 	bl	80089c0 <sbrk_aligned>
 8008a76:	3001      	adds	r0, #1
 8008a78:	d02b      	beq.n	8008ad2 <_malloc_r+0xd2>
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	442b      	add	r3, r5
 8008a7e:	6023      	str	r3, [r4, #0]
 8008a80:	e00e      	b.n	8008aa0 <_malloc_r+0xa0>
 8008a82:	6822      	ldr	r2, [r4, #0]
 8008a84:	1b52      	subs	r2, r2, r5
 8008a86:	d41e      	bmi.n	8008ac6 <_malloc_r+0xc6>
 8008a88:	2a0b      	cmp	r2, #11
 8008a8a:	d916      	bls.n	8008aba <_malloc_r+0xba>
 8008a8c:	1961      	adds	r1, r4, r5
 8008a8e:	42a3      	cmp	r3, r4
 8008a90:	6025      	str	r5, [r4, #0]
 8008a92:	bf18      	it	ne
 8008a94:	6059      	strne	r1, [r3, #4]
 8008a96:	6863      	ldr	r3, [r4, #4]
 8008a98:	bf08      	it	eq
 8008a9a:	6031      	streq	r1, [r6, #0]
 8008a9c:	5162      	str	r2, [r4, r5]
 8008a9e:	604b      	str	r3, [r1, #4]
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	f104 060b 	add.w	r6, r4, #11
 8008aa6:	f000 fb3f 	bl	8009128 <__malloc_unlock>
 8008aaa:	f026 0607 	bic.w	r6, r6, #7
 8008aae:	1d23      	adds	r3, r4, #4
 8008ab0:	1af2      	subs	r2, r6, r3
 8008ab2:	d0b6      	beq.n	8008a22 <_malloc_r+0x22>
 8008ab4:	1b9b      	subs	r3, r3, r6
 8008ab6:	50a3      	str	r3, [r4, r2]
 8008ab8:	e7b3      	b.n	8008a22 <_malloc_r+0x22>
 8008aba:	6862      	ldr	r2, [r4, #4]
 8008abc:	42a3      	cmp	r3, r4
 8008abe:	bf0c      	ite	eq
 8008ac0:	6032      	streq	r2, [r6, #0]
 8008ac2:	605a      	strne	r2, [r3, #4]
 8008ac4:	e7ec      	b.n	8008aa0 <_malloc_r+0xa0>
 8008ac6:	4623      	mov	r3, r4
 8008ac8:	6864      	ldr	r4, [r4, #4]
 8008aca:	e7b2      	b.n	8008a32 <_malloc_r+0x32>
 8008acc:	4634      	mov	r4, r6
 8008ace:	6876      	ldr	r6, [r6, #4]
 8008ad0:	e7b9      	b.n	8008a46 <_malloc_r+0x46>
 8008ad2:	230c      	movs	r3, #12
 8008ad4:	603b      	str	r3, [r7, #0]
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	f000 fb26 	bl	8009128 <__malloc_unlock>
 8008adc:	e7a1      	b.n	8008a22 <_malloc_r+0x22>
 8008ade:	6025      	str	r5, [r4, #0]
 8008ae0:	e7de      	b.n	8008aa0 <_malloc_r+0xa0>
 8008ae2:	bf00      	nop
 8008ae4:	20004c90 	.word	0x20004c90

08008ae8 <__ssputs_r>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	688e      	ldr	r6, [r1, #8]
 8008aee:	429e      	cmp	r6, r3
 8008af0:	4682      	mov	sl, r0
 8008af2:	460c      	mov	r4, r1
 8008af4:	4690      	mov	r8, r2
 8008af6:	461f      	mov	r7, r3
 8008af8:	d838      	bhi.n	8008b6c <__ssputs_r+0x84>
 8008afa:	898a      	ldrh	r2, [r1, #12]
 8008afc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b00:	d032      	beq.n	8008b68 <__ssputs_r+0x80>
 8008b02:	6825      	ldr	r5, [r4, #0]
 8008b04:	6909      	ldr	r1, [r1, #16]
 8008b06:	eba5 0901 	sub.w	r9, r5, r1
 8008b0a:	6965      	ldr	r5, [r4, #20]
 8008b0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b14:	3301      	adds	r3, #1
 8008b16:	444b      	add	r3, r9
 8008b18:	106d      	asrs	r5, r5, #1
 8008b1a:	429d      	cmp	r5, r3
 8008b1c:	bf38      	it	cc
 8008b1e:	461d      	movcc	r5, r3
 8008b20:	0553      	lsls	r3, r2, #21
 8008b22:	d531      	bpl.n	8008b88 <__ssputs_r+0xa0>
 8008b24:	4629      	mov	r1, r5
 8008b26:	f7ff ff6b 	bl	8008a00 <_malloc_r>
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	b950      	cbnz	r0, 8008b44 <__ssputs_r+0x5c>
 8008b2e:	230c      	movs	r3, #12
 8008b30:	f8ca 3000 	str.w	r3, [sl]
 8008b34:	89a3      	ldrh	r3, [r4, #12]
 8008b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b3a:	81a3      	strh	r3, [r4, #12]
 8008b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b44:	6921      	ldr	r1, [r4, #16]
 8008b46:	464a      	mov	r2, r9
 8008b48:	f7ff fe96 	bl	8008878 <memcpy>
 8008b4c:	89a3      	ldrh	r3, [r4, #12]
 8008b4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b56:	81a3      	strh	r3, [r4, #12]
 8008b58:	6126      	str	r6, [r4, #16]
 8008b5a:	6165      	str	r5, [r4, #20]
 8008b5c:	444e      	add	r6, r9
 8008b5e:	eba5 0509 	sub.w	r5, r5, r9
 8008b62:	6026      	str	r6, [r4, #0]
 8008b64:	60a5      	str	r5, [r4, #8]
 8008b66:	463e      	mov	r6, r7
 8008b68:	42be      	cmp	r6, r7
 8008b6a:	d900      	bls.n	8008b6e <__ssputs_r+0x86>
 8008b6c:	463e      	mov	r6, r7
 8008b6e:	6820      	ldr	r0, [r4, #0]
 8008b70:	4632      	mov	r2, r6
 8008b72:	4641      	mov	r1, r8
 8008b74:	f000 fab8 	bl	80090e8 <memmove>
 8008b78:	68a3      	ldr	r3, [r4, #8]
 8008b7a:	1b9b      	subs	r3, r3, r6
 8008b7c:	60a3      	str	r3, [r4, #8]
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	4433      	add	r3, r6
 8008b82:	6023      	str	r3, [r4, #0]
 8008b84:	2000      	movs	r0, #0
 8008b86:	e7db      	b.n	8008b40 <__ssputs_r+0x58>
 8008b88:	462a      	mov	r2, r5
 8008b8a:	f000 fb1f 	bl	80091cc <_realloc_r>
 8008b8e:	4606      	mov	r6, r0
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d1e1      	bne.n	8008b58 <__ssputs_r+0x70>
 8008b94:	6921      	ldr	r1, [r4, #16]
 8008b96:	4650      	mov	r0, sl
 8008b98:	f000 facc 	bl	8009134 <_free_r>
 8008b9c:	e7c7      	b.n	8008b2e <__ssputs_r+0x46>
	...

08008ba0 <_svfiprintf_r>:
 8008ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba4:	4698      	mov	r8, r3
 8008ba6:	898b      	ldrh	r3, [r1, #12]
 8008ba8:	061b      	lsls	r3, r3, #24
 8008baa:	b09d      	sub	sp, #116	; 0x74
 8008bac:	4607      	mov	r7, r0
 8008bae:	460d      	mov	r5, r1
 8008bb0:	4614      	mov	r4, r2
 8008bb2:	d50e      	bpl.n	8008bd2 <_svfiprintf_r+0x32>
 8008bb4:	690b      	ldr	r3, [r1, #16]
 8008bb6:	b963      	cbnz	r3, 8008bd2 <_svfiprintf_r+0x32>
 8008bb8:	2140      	movs	r1, #64	; 0x40
 8008bba:	f7ff ff21 	bl	8008a00 <_malloc_r>
 8008bbe:	6028      	str	r0, [r5, #0]
 8008bc0:	6128      	str	r0, [r5, #16]
 8008bc2:	b920      	cbnz	r0, 8008bce <_svfiprintf_r+0x2e>
 8008bc4:	230c      	movs	r3, #12
 8008bc6:	603b      	str	r3, [r7, #0]
 8008bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bcc:	e0d1      	b.n	8008d72 <_svfiprintf_r+0x1d2>
 8008bce:	2340      	movs	r3, #64	; 0x40
 8008bd0:	616b      	str	r3, [r5, #20]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8008bd6:	2320      	movs	r3, #32
 8008bd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008be0:	2330      	movs	r3, #48	; 0x30
 8008be2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d8c <_svfiprintf_r+0x1ec>
 8008be6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bea:	f04f 0901 	mov.w	r9, #1
 8008bee:	4623      	mov	r3, r4
 8008bf0:	469a      	mov	sl, r3
 8008bf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bf6:	b10a      	cbz	r2, 8008bfc <_svfiprintf_r+0x5c>
 8008bf8:	2a25      	cmp	r2, #37	; 0x25
 8008bfa:	d1f9      	bne.n	8008bf0 <_svfiprintf_r+0x50>
 8008bfc:	ebba 0b04 	subs.w	fp, sl, r4
 8008c00:	d00b      	beq.n	8008c1a <_svfiprintf_r+0x7a>
 8008c02:	465b      	mov	r3, fp
 8008c04:	4622      	mov	r2, r4
 8008c06:	4629      	mov	r1, r5
 8008c08:	4638      	mov	r0, r7
 8008c0a:	f7ff ff6d 	bl	8008ae8 <__ssputs_r>
 8008c0e:	3001      	adds	r0, #1
 8008c10:	f000 80aa 	beq.w	8008d68 <_svfiprintf_r+0x1c8>
 8008c14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c16:	445a      	add	r2, fp
 8008c18:	9209      	str	r2, [sp, #36]	; 0x24
 8008c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 80a2 	beq.w	8008d68 <_svfiprintf_r+0x1c8>
 8008c24:	2300      	movs	r3, #0
 8008c26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c2e:	f10a 0a01 	add.w	sl, sl, #1
 8008c32:	9304      	str	r3, [sp, #16]
 8008c34:	9307      	str	r3, [sp, #28]
 8008c36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c3a:	931a      	str	r3, [sp, #104]	; 0x68
 8008c3c:	4654      	mov	r4, sl
 8008c3e:	2205      	movs	r2, #5
 8008c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c44:	4851      	ldr	r0, [pc, #324]	; (8008d8c <_svfiprintf_r+0x1ec>)
 8008c46:	f7f7 faeb 	bl	8000220 <memchr>
 8008c4a:	9a04      	ldr	r2, [sp, #16]
 8008c4c:	b9d8      	cbnz	r0, 8008c86 <_svfiprintf_r+0xe6>
 8008c4e:	06d0      	lsls	r0, r2, #27
 8008c50:	bf44      	itt	mi
 8008c52:	2320      	movmi	r3, #32
 8008c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c58:	0711      	lsls	r1, r2, #28
 8008c5a:	bf44      	itt	mi
 8008c5c:	232b      	movmi	r3, #43	; 0x2b
 8008c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c62:	f89a 3000 	ldrb.w	r3, [sl]
 8008c66:	2b2a      	cmp	r3, #42	; 0x2a
 8008c68:	d015      	beq.n	8008c96 <_svfiprintf_r+0xf6>
 8008c6a:	9a07      	ldr	r2, [sp, #28]
 8008c6c:	4654      	mov	r4, sl
 8008c6e:	2000      	movs	r0, #0
 8008c70:	f04f 0c0a 	mov.w	ip, #10
 8008c74:	4621      	mov	r1, r4
 8008c76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c7a:	3b30      	subs	r3, #48	; 0x30
 8008c7c:	2b09      	cmp	r3, #9
 8008c7e:	d94e      	bls.n	8008d1e <_svfiprintf_r+0x17e>
 8008c80:	b1b0      	cbz	r0, 8008cb0 <_svfiprintf_r+0x110>
 8008c82:	9207      	str	r2, [sp, #28]
 8008c84:	e014      	b.n	8008cb0 <_svfiprintf_r+0x110>
 8008c86:	eba0 0308 	sub.w	r3, r0, r8
 8008c8a:	fa09 f303 	lsl.w	r3, r9, r3
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	9304      	str	r3, [sp, #16]
 8008c92:	46a2      	mov	sl, r4
 8008c94:	e7d2      	b.n	8008c3c <_svfiprintf_r+0x9c>
 8008c96:	9b03      	ldr	r3, [sp, #12]
 8008c98:	1d19      	adds	r1, r3, #4
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	9103      	str	r1, [sp, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	bfbb      	ittet	lt
 8008ca2:	425b      	neglt	r3, r3
 8008ca4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ca8:	9307      	strge	r3, [sp, #28]
 8008caa:	9307      	strlt	r3, [sp, #28]
 8008cac:	bfb8      	it	lt
 8008cae:	9204      	strlt	r2, [sp, #16]
 8008cb0:	7823      	ldrb	r3, [r4, #0]
 8008cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8008cb4:	d10c      	bne.n	8008cd0 <_svfiprintf_r+0x130>
 8008cb6:	7863      	ldrb	r3, [r4, #1]
 8008cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8008cba:	d135      	bne.n	8008d28 <_svfiprintf_r+0x188>
 8008cbc:	9b03      	ldr	r3, [sp, #12]
 8008cbe:	1d1a      	adds	r2, r3, #4
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	9203      	str	r2, [sp, #12]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	bfb8      	it	lt
 8008cc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ccc:	3402      	adds	r4, #2
 8008cce:	9305      	str	r3, [sp, #20]
 8008cd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d9c <_svfiprintf_r+0x1fc>
 8008cd4:	7821      	ldrb	r1, [r4, #0]
 8008cd6:	2203      	movs	r2, #3
 8008cd8:	4650      	mov	r0, sl
 8008cda:	f7f7 faa1 	bl	8000220 <memchr>
 8008cde:	b140      	cbz	r0, 8008cf2 <_svfiprintf_r+0x152>
 8008ce0:	2340      	movs	r3, #64	; 0x40
 8008ce2:	eba0 000a 	sub.w	r0, r0, sl
 8008ce6:	fa03 f000 	lsl.w	r0, r3, r0
 8008cea:	9b04      	ldr	r3, [sp, #16]
 8008cec:	4303      	orrs	r3, r0
 8008cee:	3401      	adds	r4, #1
 8008cf0:	9304      	str	r3, [sp, #16]
 8008cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf6:	4826      	ldr	r0, [pc, #152]	; (8008d90 <_svfiprintf_r+0x1f0>)
 8008cf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cfc:	2206      	movs	r2, #6
 8008cfe:	f7f7 fa8f 	bl	8000220 <memchr>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	d038      	beq.n	8008d78 <_svfiprintf_r+0x1d8>
 8008d06:	4b23      	ldr	r3, [pc, #140]	; (8008d94 <_svfiprintf_r+0x1f4>)
 8008d08:	bb1b      	cbnz	r3, 8008d52 <_svfiprintf_r+0x1b2>
 8008d0a:	9b03      	ldr	r3, [sp, #12]
 8008d0c:	3307      	adds	r3, #7
 8008d0e:	f023 0307 	bic.w	r3, r3, #7
 8008d12:	3308      	adds	r3, #8
 8008d14:	9303      	str	r3, [sp, #12]
 8008d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d18:	4433      	add	r3, r6
 8008d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d1c:	e767      	b.n	8008bee <_svfiprintf_r+0x4e>
 8008d1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d22:	460c      	mov	r4, r1
 8008d24:	2001      	movs	r0, #1
 8008d26:	e7a5      	b.n	8008c74 <_svfiprintf_r+0xd4>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	3401      	adds	r4, #1
 8008d2c:	9305      	str	r3, [sp, #20]
 8008d2e:	4619      	mov	r1, r3
 8008d30:	f04f 0c0a 	mov.w	ip, #10
 8008d34:	4620      	mov	r0, r4
 8008d36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d3a:	3a30      	subs	r2, #48	; 0x30
 8008d3c:	2a09      	cmp	r2, #9
 8008d3e:	d903      	bls.n	8008d48 <_svfiprintf_r+0x1a8>
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d0c5      	beq.n	8008cd0 <_svfiprintf_r+0x130>
 8008d44:	9105      	str	r1, [sp, #20]
 8008d46:	e7c3      	b.n	8008cd0 <_svfiprintf_r+0x130>
 8008d48:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e7f0      	b.n	8008d34 <_svfiprintf_r+0x194>
 8008d52:	ab03      	add	r3, sp, #12
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	462a      	mov	r2, r5
 8008d58:	4b0f      	ldr	r3, [pc, #60]	; (8008d98 <_svfiprintf_r+0x1f8>)
 8008d5a:	a904      	add	r1, sp, #16
 8008d5c:	4638      	mov	r0, r7
 8008d5e:	f3af 8000 	nop.w
 8008d62:	1c42      	adds	r2, r0, #1
 8008d64:	4606      	mov	r6, r0
 8008d66:	d1d6      	bne.n	8008d16 <_svfiprintf_r+0x176>
 8008d68:	89ab      	ldrh	r3, [r5, #12]
 8008d6a:	065b      	lsls	r3, r3, #25
 8008d6c:	f53f af2c 	bmi.w	8008bc8 <_svfiprintf_r+0x28>
 8008d70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d72:	b01d      	add	sp, #116	; 0x74
 8008d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d78:	ab03      	add	r3, sp, #12
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	462a      	mov	r2, r5
 8008d7e:	4b06      	ldr	r3, [pc, #24]	; (8008d98 <_svfiprintf_r+0x1f8>)
 8008d80:	a904      	add	r1, sp, #16
 8008d82:	4638      	mov	r0, r7
 8008d84:	f000 f87a 	bl	8008e7c <_printf_i>
 8008d88:	e7eb      	b.n	8008d62 <_svfiprintf_r+0x1c2>
 8008d8a:	bf00      	nop
 8008d8c:	08009424 	.word	0x08009424
 8008d90:	0800942e 	.word	0x0800942e
 8008d94:	00000000 	.word	0x00000000
 8008d98:	08008ae9 	.word	0x08008ae9
 8008d9c:	0800942a 	.word	0x0800942a

08008da0 <_printf_common>:
 8008da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da4:	4616      	mov	r6, r2
 8008da6:	4699      	mov	r9, r3
 8008da8:	688a      	ldr	r2, [r1, #8]
 8008daa:	690b      	ldr	r3, [r1, #16]
 8008dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008db0:	4293      	cmp	r3, r2
 8008db2:	bfb8      	it	lt
 8008db4:	4613      	movlt	r3, r2
 8008db6:	6033      	str	r3, [r6, #0]
 8008db8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dbc:	4607      	mov	r7, r0
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	b10a      	cbz	r2, 8008dc6 <_printf_common+0x26>
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	6033      	str	r3, [r6, #0]
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	0699      	lsls	r1, r3, #26
 8008dca:	bf42      	ittt	mi
 8008dcc:	6833      	ldrmi	r3, [r6, #0]
 8008dce:	3302      	addmi	r3, #2
 8008dd0:	6033      	strmi	r3, [r6, #0]
 8008dd2:	6825      	ldr	r5, [r4, #0]
 8008dd4:	f015 0506 	ands.w	r5, r5, #6
 8008dd8:	d106      	bne.n	8008de8 <_printf_common+0x48>
 8008dda:	f104 0a19 	add.w	sl, r4, #25
 8008dde:	68e3      	ldr	r3, [r4, #12]
 8008de0:	6832      	ldr	r2, [r6, #0]
 8008de2:	1a9b      	subs	r3, r3, r2
 8008de4:	42ab      	cmp	r3, r5
 8008de6:	dc26      	bgt.n	8008e36 <_printf_common+0x96>
 8008de8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008dec:	1e13      	subs	r3, r2, #0
 8008dee:	6822      	ldr	r2, [r4, #0]
 8008df0:	bf18      	it	ne
 8008df2:	2301      	movne	r3, #1
 8008df4:	0692      	lsls	r2, r2, #26
 8008df6:	d42b      	bmi.n	8008e50 <_printf_common+0xb0>
 8008df8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dfc:	4649      	mov	r1, r9
 8008dfe:	4638      	mov	r0, r7
 8008e00:	47c0      	blx	r8
 8008e02:	3001      	adds	r0, #1
 8008e04:	d01e      	beq.n	8008e44 <_printf_common+0xa4>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	68e5      	ldr	r5, [r4, #12]
 8008e0a:	6832      	ldr	r2, [r6, #0]
 8008e0c:	f003 0306 	and.w	r3, r3, #6
 8008e10:	2b04      	cmp	r3, #4
 8008e12:	bf08      	it	eq
 8008e14:	1aad      	subeq	r5, r5, r2
 8008e16:	68a3      	ldr	r3, [r4, #8]
 8008e18:	6922      	ldr	r2, [r4, #16]
 8008e1a:	bf0c      	ite	eq
 8008e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e20:	2500      	movne	r5, #0
 8008e22:	4293      	cmp	r3, r2
 8008e24:	bfc4      	itt	gt
 8008e26:	1a9b      	subgt	r3, r3, r2
 8008e28:	18ed      	addgt	r5, r5, r3
 8008e2a:	2600      	movs	r6, #0
 8008e2c:	341a      	adds	r4, #26
 8008e2e:	42b5      	cmp	r5, r6
 8008e30:	d11a      	bne.n	8008e68 <_printf_common+0xc8>
 8008e32:	2000      	movs	r0, #0
 8008e34:	e008      	b.n	8008e48 <_printf_common+0xa8>
 8008e36:	2301      	movs	r3, #1
 8008e38:	4652      	mov	r2, sl
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	4638      	mov	r0, r7
 8008e3e:	47c0      	blx	r8
 8008e40:	3001      	adds	r0, #1
 8008e42:	d103      	bne.n	8008e4c <_printf_common+0xac>
 8008e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e4c:	3501      	adds	r5, #1
 8008e4e:	e7c6      	b.n	8008dde <_printf_common+0x3e>
 8008e50:	18e1      	adds	r1, r4, r3
 8008e52:	1c5a      	adds	r2, r3, #1
 8008e54:	2030      	movs	r0, #48	; 0x30
 8008e56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e5a:	4422      	add	r2, r4
 8008e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e64:	3302      	adds	r3, #2
 8008e66:	e7c7      	b.n	8008df8 <_printf_common+0x58>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	4638      	mov	r0, r7
 8008e70:	47c0      	blx	r8
 8008e72:	3001      	adds	r0, #1
 8008e74:	d0e6      	beq.n	8008e44 <_printf_common+0xa4>
 8008e76:	3601      	adds	r6, #1
 8008e78:	e7d9      	b.n	8008e2e <_printf_common+0x8e>
	...

08008e7c <_printf_i>:
 8008e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e80:	7e0f      	ldrb	r7, [r1, #24]
 8008e82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e84:	2f78      	cmp	r7, #120	; 0x78
 8008e86:	4691      	mov	r9, r2
 8008e88:	4680      	mov	r8, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	469a      	mov	sl, r3
 8008e8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e92:	d807      	bhi.n	8008ea4 <_printf_i+0x28>
 8008e94:	2f62      	cmp	r7, #98	; 0x62
 8008e96:	d80a      	bhi.n	8008eae <_printf_i+0x32>
 8008e98:	2f00      	cmp	r7, #0
 8008e9a:	f000 80d8 	beq.w	800904e <_printf_i+0x1d2>
 8008e9e:	2f58      	cmp	r7, #88	; 0x58
 8008ea0:	f000 80a3 	beq.w	8008fea <_printf_i+0x16e>
 8008ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ea8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008eac:	e03a      	b.n	8008f24 <_printf_i+0xa8>
 8008eae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008eb2:	2b15      	cmp	r3, #21
 8008eb4:	d8f6      	bhi.n	8008ea4 <_printf_i+0x28>
 8008eb6:	a101      	add	r1, pc, #4	; (adr r1, 8008ebc <_printf_i+0x40>)
 8008eb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ebc:	08008f15 	.word	0x08008f15
 8008ec0:	08008f29 	.word	0x08008f29
 8008ec4:	08008ea5 	.word	0x08008ea5
 8008ec8:	08008ea5 	.word	0x08008ea5
 8008ecc:	08008ea5 	.word	0x08008ea5
 8008ed0:	08008ea5 	.word	0x08008ea5
 8008ed4:	08008f29 	.word	0x08008f29
 8008ed8:	08008ea5 	.word	0x08008ea5
 8008edc:	08008ea5 	.word	0x08008ea5
 8008ee0:	08008ea5 	.word	0x08008ea5
 8008ee4:	08008ea5 	.word	0x08008ea5
 8008ee8:	08009035 	.word	0x08009035
 8008eec:	08008f59 	.word	0x08008f59
 8008ef0:	08009017 	.word	0x08009017
 8008ef4:	08008ea5 	.word	0x08008ea5
 8008ef8:	08008ea5 	.word	0x08008ea5
 8008efc:	08009057 	.word	0x08009057
 8008f00:	08008ea5 	.word	0x08008ea5
 8008f04:	08008f59 	.word	0x08008f59
 8008f08:	08008ea5 	.word	0x08008ea5
 8008f0c:	08008ea5 	.word	0x08008ea5
 8008f10:	0800901f 	.word	0x0800901f
 8008f14:	682b      	ldr	r3, [r5, #0]
 8008f16:	1d1a      	adds	r2, r3, #4
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	602a      	str	r2, [r5, #0]
 8008f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f24:	2301      	movs	r3, #1
 8008f26:	e0a3      	b.n	8009070 <_printf_i+0x1f4>
 8008f28:	6820      	ldr	r0, [r4, #0]
 8008f2a:	6829      	ldr	r1, [r5, #0]
 8008f2c:	0606      	lsls	r6, r0, #24
 8008f2e:	f101 0304 	add.w	r3, r1, #4
 8008f32:	d50a      	bpl.n	8008f4a <_printf_i+0xce>
 8008f34:	680e      	ldr	r6, [r1, #0]
 8008f36:	602b      	str	r3, [r5, #0]
 8008f38:	2e00      	cmp	r6, #0
 8008f3a:	da03      	bge.n	8008f44 <_printf_i+0xc8>
 8008f3c:	232d      	movs	r3, #45	; 0x2d
 8008f3e:	4276      	negs	r6, r6
 8008f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f44:	485e      	ldr	r0, [pc, #376]	; (80090c0 <_printf_i+0x244>)
 8008f46:	230a      	movs	r3, #10
 8008f48:	e019      	b.n	8008f7e <_printf_i+0x102>
 8008f4a:	680e      	ldr	r6, [r1, #0]
 8008f4c:	602b      	str	r3, [r5, #0]
 8008f4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f52:	bf18      	it	ne
 8008f54:	b236      	sxthne	r6, r6
 8008f56:	e7ef      	b.n	8008f38 <_printf_i+0xbc>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	6820      	ldr	r0, [r4, #0]
 8008f5c:	1d19      	adds	r1, r3, #4
 8008f5e:	6029      	str	r1, [r5, #0]
 8008f60:	0601      	lsls	r1, r0, #24
 8008f62:	d501      	bpl.n	8008f68 <_printf_i+0xec>
 8008f64:	681e      	ldr	r6, [r3, #0]
 8008f66:	e002      	b.n	8008f6e <_printf_i+0xf2>
 8008f68:	0646      	lsls	r6, r0, #25
 8008f6a:	d5fb      	bpl.n	8008f64 <_printf_i+0xe8>
 8008f6c:	881e      	ldrh	r6, [r3, #0]
 8008f6e:	4854      	ldr	r0, [pc, #336]	; (80090c0 <_printf_i+0x244>)
 8008f70:	2f6f      	cmp	r7, #111	; 0x6f
 8008f72:	bf0c      	ite	eq
 8008f74:	2308      	moveq	r3, #8
 8008f76:	230a      	movne	r3, #10
 8008f78:	2100      	movs	r1, #0
 8008f7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f7e:	6865      	ldr	r5, [r4, #4]
 8008f80:	60a5      	str	r5, [r4, #8]
 8008f82:	2d00      	cmp	r5, #0
 8008f84:	bfa2      	ittt	ge
 8008f86:	6821      	ldrge	r1, [r4, #0]
 8008f88:	f021 0104 	bicge.w	r1, r1, #4
 8008f8c:	6021      	strge	r1, [r4, #0]
 8008f8e:	b90e      	cbnz	r6, 8008f94 <_printf_i+0x118>
 8008f90:	2d00      	cmp	r5, #0
 8008f92:	d04d      	beq.n	8009030 <_printf_i+0x1b4>
 8008f94:	4615      	mov	r5, r2
 8008f96:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f9a:	fb03 6711 	mls	r7, r3, r1, r6
 8008f9e:	5dc7      	ldrb	r7, [r0, r7]
 8008fa0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008fa4:	4637      	mov	r7, r6
 8008fa6:	42bb      	cmp	r3, r7
 8008fa8:	460e      	mov	r6, r1
 8008faa:	d9f4      	bls.n	8008f96 <_printf_i+0x11a>
 8008fac:	2b08      	cmp	r3, #8
 8008fae:	d10b      	bne.n	8008fc8 <_printf_i+0x14c>
 8008fb0:	6823      	ldr	r3, [r4, #0]
 8008fb2:	07de      	lsls	r6, r3, #31
 8008fb4:	d508      	bpl.n	8008fc8 <_printf_i+0x14c>
 8008fb6:	6923      	ldr	r3, [r4, #16]
 8008fb8:	6861      	ldr	r1, [r4, #4]
 8008fba:	4299      	cmp	r1, r3
 8008fbc:	bfde      	ittt	le
 8008fbe:	2330      	movle	r3, #48	; 0x30
 8008fc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fc4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008fc8:	1b52      	subs	r2, r2, r5
 8008fca:	6122      	str	r2, [r4, #16]
 8008fcc:	f8cd a000 	str.w	sl, [sp]
 8008fd0:	464b      	mov	r3, r9
 8008fd2:	aa03      	add	r2, sp, #12
 8008fd4:	4621      	mov	r1, r4
 8008fd6:	4640      	mov	r0, r8
 8008fd8:	f7ff fee2 	bl	8008da0 <_printf_common>
 8008fdc:	3001      	adds	r0, #1
 8008fde:	d14c      	bne.n	800907a <_printf_i+0x1fe>
 8008fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fe4:	b004      	add	sp, #16
 8008fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fea:	4835      	ldr	r0, [pc, #212]	; (80090c0 <_printf_i+0x244>)
 8008fec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ff0:	6829      	ldr	r1, [r5, #0]
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ff8:	6029      	str	r1, [r5, #0]
 8008ffa:	061d      	lsls	r5, r3, #24
 8008ffc:	d514      	bpl.n	8009028 <_printf_i+0x1ac>
 8008ffe:	07df      	lsls	r7, r3, #31
 8009000:	bf44      	itt	mi
 8009002:	f043 0320 	orrmi.w	r3, r3, #32
 8009006:	6023      	strmi	r3, [r4, #0]
 8009008:	b91e      	cbnz	r6, 8009012 <_printf_i+0x196>
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	f023 0320 	bic.w	r3, r3, #32
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	2310      	movs	r3, #16
 8009014:	e7b0      	b.n	8008f78 <_printf_i+0xfc>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	f043 0320 	orr.w	r3, r3, #32
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	2378      	movs	r3, #120	; 0x78
 8009020:	4828      	ldr	r0, [pc, #160]	; (80090c4 <_printf_i+0x248>)
 8009022:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009026:	e7e3      	b.n	8008ff0 <_printf_i+0x174>
 8009028:	0659      	lsls	r1, r3, #25
 800902a:	bf48      	it	mi
 800902c:	b2b6      	uxthmi	r6, r6
 800902e:	e7e6      	b.n	8008ffe <_printf_i+0x182>
 8009030:	4615      	mov	r5, r2
 8009032:	e7bb      	b.n	8008fac <_printf_i+0x130>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	6826      	ldr	r6, [r4, #0]
 8009038:	6961      	ldr	r1, [r4, #20]
 800903a:	1d18      	adds	r0, r3, #4
 800903c:	6028      	str	r0, [r5, #0]
 800903e:	0635      	lsls	r5, r6, #24
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	d501      	bpl.n	8009048 <_printf_i+0x1cc>
 8009044:	6019      	str	r1, [r3, #0]
 8009046:	e002      	b.n	800904e <_printf_i+0x1d2>
 8009048:	0670      	lsls	r0, r6, #25
 800904a:	d5fb      	bpl.n	8009044 <_printf_i+0x1c8>
 800904c:	8019      	strh	r1, [r3, #0]
 800904e:	2300      	movs	r3, #0
 8009050:	6123      	str	r3, [r4, #16]
 8009052:	4615      	mov	r5, r2
 8009054:	e7ba      	b.n	8008fcc <_printf_i+0x150>
 8009056:	682b      	ldr	r3, [r5, #0]
 8009058:	1d1a      	adds	r2, r3, #4
 800905a:	602a      	str	r2, [r5, #0]
 800905c:	681d      	ldr	r5, [r3, #0]
 800905e:	6862      	ldr	r2, [r4, #4]
 8009060:	2100      	movs	r1, #0
 8009062:	4628      	mov	r0, r5
 8009064:	f7f7 f8dc 	bl	8000220 <memchr>
 8009068:	b108      	cbz	r0, 800906e <_printf_i+0x1f2>
 800906a:	1b40      	subs	r0, r0, r5
 800906c:	6060      	str	r0, [r4, #4]
 800906e:	6863      	ldr	r3, [r4, #4]
 8009070:	6123      	str	r3, [r4, #16]
 8009072:	2300      	movs	r3, #0
 8009074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009078:	e7a8      	b.n	8008fcc <_printf_i+0x150>
 800907a:	6923      	ldr	r3, [r4, #16]
 800907c:	462a      	mov	r2, r5
 800907e:	4649      	mov	r1, r9
 8009080:	4640      	mov	r0, r8
 8009082:	47d0      	blx	sl
 8009084:	3001      	adds	r0, #1
 8009086:	d0ab      	beq.n	8008fe0 <_printf_i+0x164>
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	079b      	lsls	r3, r3, #30
 800908c:	d413      	bmi.n	80090b6 <_printf_i+0x23a>
 800908e:	68e0      	ldr	r0, [r4, #12]
 8009090:	9b03      	ldr	r3, [sp, #12]
 8009092:	4298      	cmp	r0, r3
 8009094:	bfb8      	it	lt
 8009096:	4618      	movlt	r0, r3
 8009098:	e7a4      	b.n	8008fe4 <_printf_i+0x168>
 800909a:	2301      	movs	r3, #1
 800909c:	4632      	mov	r2, r6
 800909e:	4649      	mov	r1, r9
 80090a0:	4640      	mov	r0, r8
 80090a2:	47d0      	blx	sl
 80090a4:	3001      	adds	r0, #1
 80090a6:	d09b      	beq.n	8008fe0 <_printf_i+0x164>
 80090a8:	3501      	adds	r5, #1
 80090aa:	68e3      	ldr	r3, [r4, #12]
 80090ac:	9903      	ldr	r1, [sp, #12]
 80090ae:	1a5b      	subs	r3, r3, r1
 80090b0:	42ab      	cmp	r3, r5
 80090b2:	dcf2      	bgt.n	800909a <_printf_i+0x21e>
 80090b4:	e7eb      	b.n	800908e <_printf_i+0x212>
 80090b6:	2500      	movs	r5, #0
 80090b8:	f104 0619 	add.w	r6, r4, #25
 80090bc:	e7f5      	b.n	80090aa <_printf_i+0x22e>
 80090be:	bf00      	nop
 80090c0:	08009435 	.word	0x08009435
 80090c4:	08009446 	.word	0x08009446

080090c8 <_sbrk_r>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4d06      	ldr	r5, [pc, #24]	; (80090e4 <_sbrk_r+0x1c>)
 80090cc:	2300      	movs	r3, #0
 80090ce:	4604      	mov	r4, r0
 80090d0:	4608      	mov	r0, r1
 80090d2:	602b      	str	r3, [r5, #0]
 80090d4:	f7f9 fd76 	bl	8002bc4 <_sbrk>
 80090d8:	1c43      	adds	r3, r0, #1
 80090da:	d102      	bne.n	80090e2 <_sbrk_r+0x1a>
 80090dc:	682b      	ldr	r3, [r5, #0]
 80090de:	b103      	cbz	r3, 80090e2 <_sbrk_r+0x1a>
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	20004c98 	.word	0x20004c98

080090e8 <memmove>:
 80090e8:	4288      	cmp	r0, r1
 80090ea:	b510      	push	{r4, lr}
 80090ec:	eb01 0402 	add.w	r4, r1, r2
 80090f0:	d902      	bls.n	80090f8 <memmove+0x10>
 80090f2:	4284      	cmp	r4, r0
 80090f4:	4623      	mov	r3, r4
 80090f6:	d807      	bhi.n	8009108 <memmove+0x20>
 80090f8:	1e43      	subs	r3, r0, #1
 80090fa:	42a1      	cmp	r1, r4
 80090fc:	d008      	beq.n	8009110 <memmove+0x28>
 80090fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009102:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009106:	e7f8      	b.n	80090fa <memmove+0x12>
 8009108:	4402      	add	r2, r0
 800910a:	4601      	mov	r1, r0
 800910c:	428a      	cmp	r2, r1
 800910e:	d100      	bne.n	8009112 <memmove+0x2a>
 8009110:	bd10      	pop	{r4, pc}
 8009112:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009116:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800911a:	e7f7      	b.n	800910c <memmove+0x24>

0800911c <__malloc_lock>:
 800911c:	4801      	ldr	r0, [pc, #4]	; (8009124 <__malloc_lock+0x8>)
 800911e:	f000 b884 	b.w	800922a <__retarget_lock_acquire_recursive>
 8009122:	bf00      	nop
 8009124:	20004c9c 	.word	0x20004c9c

08009128 <__malloc_unlock>:
 8009128:	4801      	ldr	r0, [pc, #4]	; (8009130 <__malloc_unlock+0x8>)
 800912a:	f000 b87f 	b.w	800922c <__retarget_lock_release_recursive>
 800912e:	bf00      	nop
 8009130:	20004c9c 	.word	0x20004c9c

08009134 <_free_r>:
 8009134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009136:	2900      	cmp	r1, #0
 8009138:	d044      	beq.n	80091c4 <_free_r+0x90>
 800913a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800913e:	9001      	str	r0, [sp, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	f1a1 0404 	sub.w	r4, r1, #4
 8009146:	bfb8      	it	lt
 8009148:	18e4      	addlt	r4, r4, r3
 800914a:	f7ff ffe7 	bl	800911c <__malloc_lock>
 800914e:	4a1e      	ldr	r2, [pc, #120]	; (80091c8 <_free_r+0x94>)
 8009150:	9801      	ldr	r0, [sp, #4]
 8009152:	6813      	ldr	r3, [r2, #0]
 8009154:	b933      	cbnz	r3, 8009164 <_free_r+0x30>
 8009156:	6063      	str	r3, [r4, #4]
 8009158:	6014      	str	r4, [r2, #0]
 800915a:	b003      	add	sp, #12
 800915c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009160:	f7ff bfe2 	b.w	8009128 <__malloc_unlock>
 8009164:	42a3      	cmp	r3, r4
 8009166:	d908      	bls.n	800917a <_free_r+0x46>
 8009168:	6825      	ldr	r5, [r4, #0]
 800916a:	1961      	adds	r1, r4, r5
 800916c:	428b      	cmp	r3, r1
 800916e:	bf01      	itttt	eq
 8009170:	6819      	ldreq	r1, [r3, #0]
 8009172:	685b      	ldreq	r3, [r3, #4]
 8009174:	1949      	addeq	r1, r1, r5
 8009176:	6021      	streq	r1, [r4, #0]
 8009178:	e7ed      	b.n	8009156 <_free_r+0x22>
 800917a:	461a      	mov	r2, r3
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	b10b      	cbz	r3, 8009184 <_free_r+0x50>
 8009180:	42a3      	cmp	r3, r4
 8009182:	d9fa      	bls.n	800917a <_free_r+0x46>
 8009184:	6811      	ldr	r1, [r2, #0]
 8009186:	1855      	adds	r5, r2, r1
 8009188:	42a5      	cmp	r5, r4
 800918a:	d10b      	bne.n	80091a4 <_free_r+0x70>
 800918c:	6824      	ldr	r4, [r4, #0]
 800918e:	4421      	add	r1, r4
 8009190:	1854      	adds	r4, r2, r1
 8009192:	42a3      	cmp	r3, r4
 8009194:	6011      	str	r1, [r2, #0]
 8009196:	d1e0      	bne.n	800915a <_free_r+0x26>
 8009198:	681c      	ldr	r4, [r3, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	6053      	str	r3, [r2, #4]
 800919e:	4421      	add	r1, r4
 80091a0:	6011      	str	r1, [r2, #0]
 80091a2:	e7da      	b.n	800915a <_free_r+0x26>
 80091a4:	d902      	bls.n	80091ac <_free_r+0x78>
 80091a6:	230c      	movs	r3, #12
 80091a8:	6003      	str	r3, [r0, #0]
 80091aa:	e7d6      	b.n	800915a <_free_r+0x26>
 80091ac:	6825      	ldr	r5, [r4, #0]
 80091ae:	1961      	adds	r1, r4, r5
 80091b0:	428b      	cmp	r3, r1
 80091b2:	bf04      	itt	eq
 80091b4:	6819      	ldreq	r1, [r3, #0]
 80091b6:	685b      	ldreq	r3, [r3, #4]
 80091b8:	6063      	str	r3, [r4, #4]
 80091ba:	bf04      	itt	eq
 80091bc:	1949      	addeq	r1, r1, r5
 80091be:	6021      	streq	r1, [r4, #0]
 80091c0:	6054      	str	r4, [r2, #4]
 80091c2:	e7ca      	b.n	800915a <_free_r+0x26>
 80091c4:	b003      	add	sp, #12
 80091c6:	bd30      	pop	{r4, r5, pc}
 80091c8:	20004c90 	.word	0x20004c90

080091cc <_realloc_r>:
 80091cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d0:	4680      	mov	r8, r0
 80091d2:	4614      	mov	r4, r2
 80091d4:	460e      	mov	r6, r1
 80091d6:	b921      	cbnz	r1, 80091e2 <_realloc_r+0x16>
 80091d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091dc:	4611      	mov	r1, r2
 80091de:	f7ff bc0f 	b.w	8008a00 <_malloc_r>
 80091e2:	b92a      	cbnz	r2, 80091f0 <_realloc_r+0x24>
 80091e4:	f7ff ffa6 	bl	8009134 <_free_r>
 80091e8:	4625      	mov	r5, r4
 80091ea:	4628      	mov	r0, r5
 80091ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f0:	f000 f81d 	bl	800922e <_malloc_usable_size_r>
 80091f4:	4284      	cmp	r4, r0
 80091f6:	4607      	mov	r7, r0
 80091f8:	d802      	bhi.n	8009200 <_realloc_r+0x34>
 80091fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091fe:	d812      	bhi.n	8009226 <_realloc_r+0x5a>
 8009200:	4621      	mov	r1, r4
 8009202:	4640      	mov	r0, r8
 8009204:	f7ff fbfc 	bl	8008a00 <_malloc_r>
 8009208:	4605      	mov	r5, r0
 800920a:	2800      	cmp	r0, #0
 800920c:	d0ed      	beq.n	80091ea <_realloc_r+0x1e>
 800920e:	42bc      	cmp	r4, r7
 8009210:	4622      	mov	r2, r4
 8009212:	4631      	mov	r1, r6
 8009214:	bf28      	it	cs
 8009216:	463a      	movcs	r2, r7
 8009218:	f7ff fb2e 	bl	8008878 <memcpy>
 800921c:	4631      	mov	r1, r6
 800921e:	4640      	mov	r0, r8
 8009220:	f7ff ff88 	bl	8009134 <_free_r>
 8009224:	e7e1      	b.n	80091ea <_realloc_r+0x1e>
 8009226:	4635      	mov	r5, r6
 8009228:	e7df      	b.n	80091ea <_realloc_r+0x1e>

0800922a <__retarget_lock_acquire_recursive>:
 800922a:	4770      	bx	lr

0800922c <__retarget_lock_release_recursive>:
 800922c:	4770      	bx	lr

0800922e <_malloc_usable_size_r>:
 800922e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009232:	1f18      	subs	r0, r3, #4
 8009234:	2b00      	cmp	r3, #0
 8009236:	bfbc      	itt	lt
 8009238:	580b      	ldrlt	r3, [r1, r0]
 800923a:	18c0      	addlt	r0, r0, r3
 800923c:	4770      	bx	lr
	...

08009240 <_init>:
 8009240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009242:	bf00      	nop
 8009244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009246:	bc08      	pop	{r3}
 8009248:	469e      	mov	lr, r3
 800924a:	4770      	bx	lr

0800924c <_fini>:
 800924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924e:	bf00      	nop
 8009250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009252:	bc08      	pop	{r3}
 8009254:	469e      	mov	lr, r3
 8009256:	4770      	bx	lr
