
pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000900c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080091dc  080091dc  000191dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093dc  080093dc  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  080093dc  080093dc  000193dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093e4  080093e4  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093e4  080093e4  000193e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093e8  080093e8  000193e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080093ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf8  200000b0  0800949c  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004ca8  0800949c  00024ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ff1  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b14  00000000  00000000  000350d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00037be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  00038e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b75  00000000  00000000  00039fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016166  00000000  00000000  0005db5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d77ae  00000000  00000000  00073cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b471  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b8  00000000  00000000  0014b4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080091c4 	.word	0x080091c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	080091c4 	.word	0x080091c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <arm_fir_f32>:
void arm_fir_f32(
const arm_fir_instance_f32 * S,
float32_t * pSrc,
float32_t * pDst,
uint32_t blockSize)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b09f      	sub	sp, #124	; 0x7c
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	603b      	str	r3, [r7, #0]
   float32_t *pState = S->pState;                 /* State pointer */
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	677b      	str	r3, [r7, #116]	; 0x74
   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	61fb      	str	r3, [r7, #28]
   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient buffers */
   float32_t acc0, acc1, acc2, acc3, acc4, acc5, acc6, acc7;     /* Accumulators */
   float32_t x0, x1, x2, x3, x4, x5, x6, x7, c0;  /* Temporary variables to hold state and coefficient values */
   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	61bb      	str	r3, [r7, #24]
   uint32_t i, tapCnt, blkCnt;                    /* Loop counters */

   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
   /* pStateCurnt points to the location where the new input data should be written */
   pStateCurnt = &(S->pState[(numTaps - 1u)]);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80005ee:	3b01      	subs	r3, #1
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	673b      	str	r3, [r7, #112]	; 0x70
    *    acc0 =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0]  
    *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-numTaps-2] +...+ b[0] * x[1]  
    *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-numTaps-1] +...+ b[0] * x[2]  
    *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-numTaps]   +...+ b[0] * x[3]  
    */
   blkCnt = blockSize >> 3;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	08db      	lsrs	r3, r3, #3
 80005fa:	623b      	str	r3, [r7, #32]

   /* First part of the processing with loop unrolling.  Compute 8 outputs at a time.  
   ** a second loop below computes the remaining 1 to 7 samples. */
   while(blkCnt > 0u)
 80005fc:	f000 bc8b 	b.w	8000f16 <arm_fir_f32+0x952>
   {
      /* Copy four new input samples into the state buffer */
      *pStateCurnt++ = *pSrc++;
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	1d13      	adds	r3, r2, #4
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000608:	1d19      	adds	r1, r3, #4
 800060a:	6739      	str	r1, [r7, #112]	; 0x70
 800060c:	6812      	ldr	r2, [r2, #0]
 800060e:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	1d13      	adds	r3, r2, #4
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000618:	1d19      	adds	r1, r3, #4
 800061a:	6739      	str	r1, [r7, #112]	; 0x70
 800061c:	6812      	ldr	r2, [r2, #0]
 800061e:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000620:	68ba      	ldr	r2, [r7, #8]
 8000622:	1d13      	adds	r3, r2, #4
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000628:	1d19      	adds	r1, r3, #4
 800062a:	6739      	str	r1, [r7, #112]	; 0x70
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	1d13      	adds	r3, r2, #4
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000638:	1d19      	adds	r1, r3, #4
 800063a:	6739      	str	r1, [r7, #112]	; 0x70
 800063c:	6812      	ldr	r2, [r2, #0]
 800063e:	601a      	str	r2, [r3, #0]

      /* Set all accumulators to zero */
      acc0 = 0.0f;
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	667b      	str	r3, [r7, #100]	; 0x64
      acc1 = 0.0f;
 8000646:	f04f 0300 	mov.w	r3, #0
 800064a:	663b      	str	r3, [r7, #96]	; 0x60
      acc2 = 0.0f;
 800064c:	f04f 0300 	mov.w	r3, #0
 8000650:	65fb      	str	r3, [r7, #92]	; 0x5c
      acc3 = 0.0f;
 8000652:	f04f 0300 	mov.w	r3, #0
 8000656:	65bb      	str	r3, [r7, #88]	; 0x58
      acc4 = 0.0f;
 8000658:	f04f 0300 	mov.w	r3, #0
 800065c:	657b      	str	r3, [r7, #84]	; 0x54
      acc5 = 0.0f;
 800065e:	f04f 0300 	mov.w	r3, #0
 8000662:	653b      	str	r3, [r7, #80]	; 0x50
      acc6 = 0.0f;
 8000664:	f04f 0300 	mov.w	r3, #0
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
      acc7 = 0.0f;		
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48

      /* Initialize state pointer */
      px = pState;
 8000670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000672:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* Initialize coeff pointer */
      pb = (pCoeffs);		
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	66bb      	str	r3, [r7, #104]	; 0x68
   
      /* This is separated from the others to avoid 
       * a call to __aeabi_memmove which would be slower
       */
      *pStateCurnt++ = *pSrc++;
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	1d13      	adds	r3, r2, #4
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000680:	1d19      	adds	r1, r3, #4
 8000682:	6739      	str	r1, [r7, #112]	; 0x70
 8000684:	6812      	ldr	r2, [r2, #0]
 8000686:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	1d13      	adds	r3, r2, #4
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000690:	1d19      	adds	r1, r3, #4
 8000692:	6739      	str	r1, [r7, #112]	; 0x70
 8000694:	6812      	ldr	r2, [r2, #0]
 8000696:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	1d13      	adds	r3, r2, #4
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006a0:	1d19      	adds	r1, r3, #4
 80006a2:	6739      	str	r1, [r7, #112]	; 0x70
 80006a4:	6812      	ldr	r2, [r2, #0]
 80006a6:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	1d13      	adds	r3, r2, #4
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006b0:	1d19      	adds	r1, r3, #4
 80006b2:	6739      	str	r1, [r7, #112]	; 0x70
 80006b4:	6812      	ldr	r2, [r2, #0]
 80006b6:	601a      	str	r2, [r3, #0]

      /* Read the first seven samples from the state buffer:  x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2] */
      x0 = *px++;
 80006b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006ba:	1d1a      	adds	r2, r3, #4
 80006bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	647b      	str	r3, [r7, #68]	; 0x44
      x1 = *px++;
 80006c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006c4:	1d1a      	adds	r2, r3, #4
 80006c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
      x2 = *px++;
 80006cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006ce:	1d1a      	adds	r2, r3, #4
 80006d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	63fb      	str	r3, [r7, #60]	; 0x3c
      x3 = *px++;
 80006d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006d8:	1d1a      	adds	r2, r3, #4
 80006da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
      x4 = *px++;
 80006e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006e2:	1d1a      	adds	r2, r3, #4
 80006e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	637b      	str	r3, [r7, #52]	; 0x34
      x5 = *px++;
 80006ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006ec:	1d1a      	adds	r2, r3, #4
 80006ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
      x6 = *px++;
 80006f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006f6:	1d1a      	adds	r2, r3, #4
 80006f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Loop unrolling.  Process 8 taps at a time. */
      tapCnt = numTaps >> 3u;
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	08db      	lsrs	r3, r3, #3
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Loop over the number of taps.  Unroll by a factor of 8.  
       ** Repeat until we've computed numTaps-8 coefficients. */
      while(tapCnt > 0u)
 8000704:	e352      	b.n	8000dac <arm_fir_f32+0x7e8>
      {
         /* Read the b[numTaps-1] coefficient */
         c0 = *(pb++);
 8000706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000708:	1d1a      	adds	r2, r3, #4
 800070a:	66ba      	str	r2, [r7, #104]	; 0x68
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-3] sample */
         x7 = *(px++);
 8000710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000712:	1d1a      	adds	r2, r3, #4
 8000714:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	613b      	str	r3, [r7, #16]

         /* acc0 +=  b[numTaps-1] * x[n-numTaps] */
         acc0 += x0 * c0;
 800071a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800071e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000726:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800072a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800072e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-1] */
         acc1 += x1 * c0;
 8000732:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000736:	edd7 7a05 	vldr	s15, [r7, #20]
 800073a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000746:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-2] */
         acc2 += x2 * c0;
 800074a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800074e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000756:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800075a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800075e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-3] */
         acc3 += x3 * c0;
 8000762:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000766:	edd7 7a05 	vldr	s15, [r7, #20]
 800076a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800076e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000776:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

         /* acc4 +=  b[numTaps-1] * x[n-numTaps-4] */
         acc4 += x4 * c0;
 800077a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800077e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000786:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800078a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800078e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-5] */
         acc5 += x5 * c0;
 8000792:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000796:	edd7 7a05 	vldr	s15, [r7, #20]
 800079a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800079e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80007a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007a6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-6] */
         acc6 += x6 * c0;
 80007aa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80007ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80007b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007b6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80007ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007be:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-7] */
         acc7 += x7 * c0;
 80007c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80007c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80007ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ce:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80007d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007d6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
         
         /* Read the b[numTaps-2] coefficient */
         c0 = *(pb++);
 80007da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007dc:	1d1a      	adds	r2, r3, #4
 80007de:	66ba      	str	r2, [r7, #104]	; 0x68
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-4] sample */
         x0 = *(px++);
 80007e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007e6:	1d1a      	adds	r2, r3, #4
 80007e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	647b      	str	r3, [r7, #68]	; 0x44

         /* Perform the multiply-accumulate */
         acc0 += x1 * c0;
 80007ee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80007f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80007f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007fa:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80007fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000802:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x2 * c0;   
 8000806:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800080a:	edd7 7a05 	vldr	s15, [r7, #20]
 800080e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000812:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800081a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x3 * c0;   
 800081e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000822:	edd7 7a05 	vldr	s15, [r7, #20]
 8000826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800082a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800082e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000832:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x4 * c0;   
 8000836:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800083a:	edd7 7a05 	vldr	s15, [r7, #20]
 800083e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000842:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800084a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x5 * c0;   
 800084e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000852:	edd7 7a05 	vldr	s15, [r7, #20]
 8000856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800085a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800085e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000862:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x6 * c0;   
 8000866:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800086a:	edd7 7a05 	vldr	s15, [r7, #20]
 800086e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000872:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800087a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x7 * c0;   
 800087e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000882:	edd7 7a05 	vldr	s15, [r7, #20]
 8000886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800088a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800088e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000892:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x0 * c0;   
 8000896:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800089a:	edd7 7a05 	vldr	s15, [r7, #20]
 800089e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008a2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80008a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008aa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
         
         /* Read the b[numTaps-3] coefficient */
         c0 = *(pb++);
 80008ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008b0:	1d1a      	adds	r2, r3, #4
 80008b2:	66ba      	str	r2, [r7, #104]	; 0x68
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-5] sample */
         x1 = *(px++);
 80008b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008ba:	1d1a      	adds	r2, r3, #4
 80008bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	643b      	str	r3, [r7, #64]	; 0x40

         /* Perform the multiply-accumulates */      
         acc0 += x2 * c0;
 80008c2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80008c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80008ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ce:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80008d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008d6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x3 * c0;   
 80008da:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80008de:	edd7 7a05 	vldr	s15, [r7, #20]
 80008e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80008ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ee:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x4 * c0;   
 80008f2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80008f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80008fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008fe:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000906:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x5 * c0;   
 800090a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800090e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000916:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800091a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800091e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x6 * c0;   
 8000922:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000926:	edd7 7a05 	vldr	s15, [r7, #20]
 800092a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800092e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000936:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x7 * c0;   
 800093a:	ed97 7a04 	vldr	s14, [r7, #16]
 800093e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000946:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800094a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800094e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x0 * c0;   
 8000952:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000956:	edd7 7a05 	vldr	s15, [r7, #20]
 800095a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800095e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000966:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x1 * c0;   
 800096a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800096e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000976:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800097a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800097e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000984:	1d1a      	adds	r2, r3, #4
 8000986:	66ba      	str	r2, [r7, #104]	; 0x68
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x2 = *(px++);
 800098c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800098e:	1d1a      	adds	r2, r3, #4
 8000990:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c

         /* Perform the multiply-accumulates */      
         acc0 += x3 * c0;
 8000996:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800099a:	edd7 7a05 	vldr	s15, [r7, #20]
 800099e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009a2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80009a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009aa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x4 * c0;   
 80009ae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80009b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80009b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ba:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80009be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009c2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x5 * c0;   
 80009c6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80009ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80009ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009d2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80009d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009da:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x6 * c0;   
 80009de:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80009e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80009e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ea:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80009ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009f2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x7 * c0;   
 80009f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80009fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80009fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a02:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a0a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x0 * c0;   
 8000a0e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a12:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a1a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a22:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x1 * c0;   
 8000a26:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000a2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a32:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a3a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x2 * c0;   
 8000a3e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000a42:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a4a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a52:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000a56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a58:	1d1a      	adds	r2, r3, #4
 8000a5a:	66ba      	str	r2, [r7, #104]	; 0x68
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x3 = *(px++);
 8000a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a62:	1d1a      	adds	r2, r3, #4
 8000a64:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
         /* Perform the multiply-accumulates */      
         acc0 += x4 * c0;
 8000a6a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000a6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a76:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a7e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x5 * c0;   
 8000a82:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000a86:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a8e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a96:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x6 * c0;   
 8000a9a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000a9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aae:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x7 * c0;   
 8000ab2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ab6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000abe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ac6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x0 * c0;   
 8000aca:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000ace:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ade:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x1 * c0;   
 8000ae2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000ae6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aee:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000af6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x2 * c0;   
 8000afa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000afe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b06:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b0e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x3 * c0;   
 8000b12:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000b16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b1e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b26:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b2c:	1d1a      	adds	r2, r3, #4
 8000b2e:	66ba      	str	r2, [r7, #104]	; 0x68
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x4 = *(px++);
 8000b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b36:	1d1a      	adds	r2, r3, #4
 8000b38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	637b      	str	r3, [r7, #52]	; 0x34

         /* Perform the multiply-accumulates */      
         acc0 += x5 * c0;
 8000b3e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000b42:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b4a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b52:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x6 * c0;   
 8000b56:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000b5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b62:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b6a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x7 * c0;   
 8000b6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b72:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b7a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b82:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x0 * c0;   
 8000b86:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000b8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b92:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b9a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x1 * c0;   
 8000b9e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000ba2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000baa:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x2 * c0;   
 8000bb6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000bba:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bc2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bca:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x3 * c0;   
 8000bce:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000bd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bda:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x4 * c0;   
 8000be6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000bea:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bf2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bfa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c00:	1d1a      	adds	r2, r3, #4
 8000c02:	66ba      	str	r2, [r7, #104]	; 0x68
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x5 = *(px++);
 8000c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c0a:	1d1a      	adds	r2, r3, #4
 8000c0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30

         /* Perform the multiply-accumulates */      
         acc0 += x6 * c0;
 8000c12:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000c16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c1e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c26:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x7 * c0;   
 8000c2a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c36:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c3e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x0 * c0;   
 8000c42:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000c46:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c4e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c56:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x1 * c0;   
 8000c5a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000c5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c66:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c6e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x2 * c0;   
 8000c72:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c76:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c7e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c86:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x3 * c0;   
 8000c8a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000c8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c96:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c9e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x4 * c0;   
 8000ca2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000ca6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x5 * c0;   
 8000cba:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000cbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cce:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8000cd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000cd4:	1d1a      	adds	r2, r3, #4
 8000cd6:	66ba      	str	r2, [r7, #104]	; 0x68
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x6 = *(px++);
 8000cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cde:	1d1a      	adds	r2, r3, #4
 8000ce0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c

         /* Perform the multiply-accumulates */      
         acc0 += x7 * c0;
 8000ce6:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cea:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cf2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x0 * c0;   
 8000cfe:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000d02:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d0a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d12:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x1 * c0;   
 8000d16:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000d1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d22:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d2a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x2 * c0;   
 8000d2e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000d32:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d3a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d42:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x3 * c0;   
 8000d46:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000d4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d52:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d5a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x4 * c0;   
 8000d5e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000d62:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d6a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d72:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x5 * c0;   
 8000d76:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000d7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d82:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d8a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x6 * c0;   
 8000d8e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000d92:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d9a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         tapCnt--;
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	3b01      	subs	r3, #1
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
      while(tapCnt > 0u)
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f47f aca9 	bne.w	8000706 <arm_fir_f32+0x142>
      }

      /* If the filter length is not a multiple of 8, compute the remaining filter taps */
      tapCnt = numTaps % 0x8u;
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24

      while(tapCnt > 0u)
 8000dbc:	e07a      	b.n	8000eb4 <arm_fir_f32+0x8f0>
      {
         /* Read coefficients */
         c0 = *(pb++);
 8000dbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000dc0:	1d1a      	adds	r2, r3, #4
 8000dc2:	66ba      	str	r2, [r7, #104]	; 0x68
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	617b      	str	r3, [r7, #20]

         /* Fetch 1 state variable */
         x7 = *(px++);
 8000dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dca:	1d1a      	adds	r2, r3, #4
 8000dcc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	613b      	str	r3, [r7, #16]

         /* Perform the multiply-accumulates */      
         acc0 += x0 * c0;
 8000dd2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000dd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dde:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x1 * c0;   
 8000dea:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000dee:	edd7 7a05 	vldr	s15, [r7, #20]
 8000df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dfe:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x2 * c0;   
 8000e02:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e0e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e16:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x3 * c0;   
 8000e1a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000e1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e26:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x4 * c0;   
 8000e32:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000e36:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e3e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e46:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x5 * c0;   
 8000e4a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000e4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e56:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e5e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x6 * c0;   
 8000e62:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000e66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e6e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e76:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x7 * c0;   
 8000e7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e86:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Reuse the present sample states for next sample */
         x0 = x1;
 8000e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e94:	647b      	str	r3, [r7, #68]	; 0x44
         x1 = x2;
 8000e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e98:	643b      	str	r3, [r7, #64]	; 0x40
         x2 = x3;
 8000e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         x3 = x4;
 8000e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
         x4 = x5;
 8000ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
         x5 = x6;
 8000ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
         x6 = x7;
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c

         /* Decrement the loop counter */
         tapCnt--;
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
      while(tapCnt > 0u)
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d181      	bne.n	8000dbe <arm_fir_f32+0x7fa>
      }

      /* Advance the state pointer by 8 to process the next group of 8 samples */
      pState = pState + 8;
 8000eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ebc:	3320      	adds	r3, #32
 8000ebe:	677b      	str	r3, [r7, #116]	; 0x74

      /* The results in the 8 accumulators, store in the destination buffer. */
      *pDst++ = acc0;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1d1a      	adds	r2, r3, #4
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ec8:	601a      	str	r2, [r3, #0]
      *pDst++ = acc1;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	1d1a      	adds	r2, r3, #4
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ed2:	601a      	str	r2, [r3, #0]
      *pDst++ = acc2;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	1d1a      	adds	r2, r3, #4
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000edc:	601a      	str	r2, [r3, #0]
      *pDst++ = acc3;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	1d1a      	adds	r2, r3, #4
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000ee6:	601a      	str	r2, [r3, #0]
      *pDst++ = acc4;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	1d1a      	adds	r2, r3, #4
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ef0:	601a      	str	r2, [r3, #0]
      *pDst++ = acc5;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	1d1a      	adds	r2, r3, #4
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000efa:	601a      	str	r2, [r3, #0]
      *pDst++ = acc6;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	1d1a      	adds	r2, r3, #4
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f04:	601a      	str	r2, [r3, #0]
      *pDst++ = acc7;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	1d1a      	adds	r2, r3, #4
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f0e:	601a      	str	r2, [r3, #0]

      blkCnt--;
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	623b      	str	r3, [r7, #32]
   while(blkCnt > 0u)
 8000f16:	6a3b      	ldr	r3, [r7, #32]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f47f ab71 	bne.w	8000600 <arm_fir_f32+0x3c>
   }

   /* If the blockSize is not a multiple of 8, compute any remaining output samples here.  
   ** No loop unrolling is used. */
   blkCnt = blockSize % 0x8u;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	623b      	str	r3, [r7, #32]

   while(blkCnt > 0u)
 8000f26:	e033      	b.n	8000f90 <arm_fir_f32+0x9cc>
   {
      /* Copy one sample at a time into state buffer */
      *pStateCurnt++ = *pSrc++;
 8000f28:	68ba      	ldr	r2, [r7, #8]
 8000f2a:	1d13      	adds	r3, r2, #4
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f30:	1d19      	adds	r1, r3, #4
 8000f32:	6739      	str	r1, [r7, #112]	; 0x70
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	601a      	str	r2, [r3, #0]

      /* Set the accumulator to zero */
      acc0 = 0.0f;
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	667b      	str	r3, [r7, #100]	; 0x64

      /* Initialize state pointer */
      px = pState;
 8000f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f40:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* Initialize Coefficient pointer */
      pb = (pCoeffs);
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	66bb      	str	r3, [r7, #104]	; 0x68

      i = numTaps;
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Perform the multiply-accumulates */
      do
      {
         acc0 += *px++ * *pb++;
 8000f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f4c:	1d1a      	adds	r2, r3, #4
 8000f4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f50:	ed93 7a00 	vldr	s14, [r3]
 8000f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f56:	1d1a      	adds	r2, r3, #4
 8000f58:	66ba      	str	r2, [r7, #104]	; 0x68
 8000f5a:	edd3 7a00 	vldr	s15, [r3]
 8000f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f62:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         i--;
 8000f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f70:	3b01      	subs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28

      } while(i > 0u);
 8000f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1e7      	bne.n	8000f4a <arm_fir_f32+0x986>

      /* The result is store in the destination buffer. */
      *pDst++ = acc0;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	1d1a      	adds	r2, r3, #4
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000f82:	601a      	str	r2, [r3, #0]

      /* Advance state pointer by 1 for the next sample */
      pState = pState + 1;
 8000f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f86:	3304      	adds	r3, #4
 8000f88:	677b      	str	r3, [r7, #116]	; 0x74

      blkCnt--;
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
   while(blkCnt > 0u)
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1c8      	bne.n	8000f28 <arm_fir_f32+0x964>
   /* Processing is complete.  
   ** Now copy the last numTaps - 1 samples to the start of the state buffer.  
   ** This prepares the state buffer for the next function call. */

   /* Points to the start of the state buffer */
   pStateCurnt = S->pState;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	673b      	str	r3, [r7, #112]	; 0x70

   tapCnt = (numTaps - 1u) >> 2u;
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24

   /* copy data */
   while(tapCnt > 0u)
 8000fa4:	e022      	b.n	8000fec <arm_fir_f32+0xa28>
   {
      *pStateCurnt++ = *pState++;
 8000fa6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fa8:	1d13      	adds	r3, r2, #4
 8000faa:	677b      	str	r3, [r7, #116]	; 0x74
 8000fac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fae:	1d19      	adds	r1, r3, #4
 8000fb0:	6739      	str	r1, [r7, #112]	; 0x70
 8000fb2:	6812      	ldr	r2, [r2, #0]
 8000fb4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8000fb6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fb8:	1d13      	adds	r3, r2, #4
 8000fba:	677b      	str	r3, [r7, #116]	; 0x74
 8000fbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fbe:	1d19      	adds	r1, r3, #4
 8000fc0:	6739      	str	r1, [r7, #112]	; 0x70
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8000fc6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fc8:	1d13      	adds	r3, r2, #4
 8000fca:	677b      	str	r3, [r7, #116]	; 0x74
 8000fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fce:	1d19      	adds	r1, r3, #4
 8000fd0:	6739      	str	r1, [r7, #112]	; 0x70
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8000fd6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fd8:	1d13      	adds	r3, r2, #4
 8000fda:	677b      	str	r3, [r7, #116]	; 0x74
 8000fdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fde:	1d19      	adds	r1, r3, #4
 8000fe0:	6739      	str	r1, [r7, #112]	; 0x70
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
   while(tapCnt > 0u)
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1d9      	bne.n	8000fa6 <arm_fir_f32+0x9e2>
   }

   /* Calculate remaining number of copies */
   tapCnt = (numTaps - 1u) % 0x4u;
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24

   /* Copy the remaining q31_t data */
   while(tapCnt > 0u)
 8000ffc:	e00a      	b.n	8001014 <arm_fir_f32+0xa50>
   {
      *pStateCurnt++ = *pState++;
 8000ffe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001000:	1d13      	adds	r3, r2, #4
 8001002:	677b      	str	r3, [r7, #116]	; 0x74
 8001004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001006:	1d19      	adds	r1, r3, #4
 8001008:	6739      	str	r1, [r7, #112]	; 0x70
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	3b01      	subs	r3, #1
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
   while(tapCnt > 0u)
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f1      	bne.n	8000ffe <arm_fir_f32+0xa3a>
   }
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	377c      	adds	r7, #124	; 0x7c
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <arm_fir_init_f32>:
  arm_fir_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	460b      	mov	r3, r1
 8001036:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	897a      	ldrh	r2, [r7, #10]
 800103c:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and the size of state buffer is (blockSize + numTaps - 1) */
  memset(pState, 0, (numTaps + (blockSize - 1u)) * sizeof(float32_t));
 8001044:	897a      	ldrh	r2, [r7, #10]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4413      	add	r3, r2
 800104a:	3b01      	subs	r3, #1
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	461a      	mov	r2, r3
 8001050:	2100      	movs	r1, #0
 8001052:	6838      	ldr	r0, [r7, #0]
 8001054:	f007 fbe0 	bl	8008818 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	605a      	str	r2, [r3, #4]

}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800107c:	b2db      	uxtb	r3, r3
 800107e:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6858      	ldr	r0, [r3, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	8adb      	ldrh	r3, [r3, #22]
 8001088:	2200      	movs	r2, #0
 800108a:	4619      	mov	r1, r3
 800108c:	f002 fd0c 	bl	8003aa8 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	1cf9      	adds	r1, r7, #3
 800109a:	2201      	movs	r2, #1
 800109c:	f004 fd4d 	bl	8005b3a <HAL_SPI_Transmit>
 80010a0:	4603      	mov	r3, r0
 80010a2:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f107 010f 	add.w	r1, r7, #15
 80010b0:	2201      	movs	r2, #1
 80010b2:	f004 fe7e 	bl	8005db2 <HAL_SPI_Receive>
 80010b6:	4603      	mov	r3, r0
 80010b8:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6858      	ldr	r0, [r3, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	8adb      	ldrh	r3, [r3, #22]
 80010c2:	2201      	movs	r2, #1
 80010c4:	4619      	mov	r1, r3
 80010c6:	f002 fcef 	bl	8003aa8 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
 80010e0:	4613      	mov	r3, r2
 80010e2:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ea:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 80010ec:	78bb      	ldrb	r3, [r7, #2]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6858      	ldr	r0, [r3, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	8adb      	ldrh	r3, [r3, #22]
 8001106:	2200      	movs	r2, #0
 8001108:	4619      	mov	r1, r3
 800110a:	f002 fccd 	bl	8003aa8 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f107 010a 	add.w	r1, r7, #10
 800111a:	2202      	movs	r2, #2
 800111c:	f004 fd0d 	bl	8005b3a <HAL_SPI_Transmit>
 8001120:	4603      	mov	r3, r0
 8001122:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6858      	ldr	r0, [r3, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	8adb      	ldrh	r3, [r3, #22]
 800112c:	2201      	movs	r2, #1
 800112e:	4619      	mov	r1, r3
 8001130:	f002 fcba 	bl	8003aa8 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	4611      	mov	r1, r2
 8001148:	461a      	mov	r2, r3
 800114a:	460b      	mov	r3, r1
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	4613      	mov	r3, r2
 8001150:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6858      	ldr	r0, [r3, #4]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	8adb      	ldrh	r3, [r3, #22]
 800115e:	2200      	movs	r2, #0
 8001160:	4619      	mov	r1, r3
 8001162:	f002 fca1 	bl	8003aa8 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f107 0117 	add.w	r1, r7, #23
 8001172:	2201      	movs	r2, #1
 8001174:	f004 fce1 	bl	8005b3a <HAL_SPI_Transmit>
 8001178:	4603      	mov	r3, r0
 800117a:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 800117c:	79bb      	ldrb	r3, [r7, #6]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d108      	bne.n	8001194 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	79fa      	ldrb	r2, [r7, #7]
 8001188:	b292      	uxth	r2, r2
 800118a:	68b9      	ldr	r1, [r7, #8]
 800118c:	4618      	mov	r0, r3
 800118e:	f005 f8c3 	bl	8006318 <HAL_SPI_Transmit_DMA>
 8001192:	e012      	b.n	80011ba <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	b29a      	uxth	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	f004 fcca 	bl	8005b3a <HAL_SPI_Transmit>
 80011a6:	4603      	mov	r3, r0
 80011a8:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6858      	ldr	r0, [r3, #4]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	8adb      	ldrh	r3, [r3, #22]
 80011b2:	2201      	movs	r2, #1
 80011b4:	4619      	mov	r1, r3
 80011b6:	f002 fc77 	bl	8003aa8 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	2101      	movs	r1, #1
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff7b 	bl	80010d4 <write_register>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	2b2c      	cmp	r3, #44	; 0x2c
 80011f8:	d801      	bhi.n	80011fe <set_OCP+0x16>
    imax = 45;
 80011fa:	232d      	movs	r3, #45	; 0x2d
 80011fc:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	2bf0      	cmp	r3, #240	; 0xf0
 8001202:	d901      	bls.n	8001208 <set_OCP+0x20>
    imax = 240;
 8001204:	23f0      	movs	r3, #240	; 0xf0
 8001206:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	2b81      	cmp	r3, #129	; 0x81
 800120c:	d809      	bhi.n	8001222 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 800120e:	78fb      	ldrb	r3, [r7, #3]
 8001210:	3b2d      	subs	r3, #45	; 0x2d
 8001212:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <set_OCP+0x68>)
 8001214:	fb82 1203 	smull	r1, r2, r2, r3
 8001218:	1052      	asrs	r2, r2, #1
 800121a:	17db      	asrs	r3, r3, #31
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e008      	b.n	8001234 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	331e      	adds	r3, #30
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <set_OCP+0x68>)
 8001228:	fb82 1203 	smull	r1, r2, r2, r3
 800122c:	1092      	asrs	r2, r2, #2
 800122e:	17db      	asrs	r3, r3, #31
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	210b      	movs	r1, #11
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff47 	bl	80010d4 <write_register>
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	66666667 	.word	0x66666667

08001254 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 800125c:	211d      	movs	r1, #29
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ff01 	bl	8001066 <read_register>
 8001264:	4603      	mov	r3, r0
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	b2db      	uxtb	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2200      	movs	r2, #0
 800126e:	461c      	mov	r4, r3
 8001270:	4615      	mov	r5, r2
 8001272:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8001276:	211e      	movs	r1, #30
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fef4 	bl	8001066 <read_register>
 800127e:	4603      	mov	r3, r0
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001284:	2304      	movs	r3, #4
 8001286:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2b0a      	cmp	r3, #10
 800128c:	d908      	bls.n	80012a0 <set_low_data_rate_optimization+0x4c>
 800128e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001292:	1fd1      	subs	r1, r2, #7
 8001294:	430b      	orrs	r3, r1
 8001296:	d103      	bne.n	80012a0 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001298:	7ffb      	ldrb	r3, [r7, #31]
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 80012a0:	7ffb      	ldrb	r3, [r7, #31]
 80012a2:	461a      	mov	r2, r3
 80012a4:	2126      	movs	r1, #38	; 0x26
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ff14 	bl	80010d4 <write_register>
}
 80012ac:	bf00      	nop
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bdb0      	pop	{r4, r5, r7, pc}

080012b4 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 80012bc:	2100      	movs	r1, #0
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ff7e 	bl	80011c0 <set_mode>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 80012d4:	2101      	movs	r1, #1
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff72 	bl	80011c0 <set_mode>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80012ec:	211d      	movs	r1, #29
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff feb9 	bl	8001066 <read_register>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	f023 0301 	bic.w	r3, r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	461a      	mov	r2, r3
 8001304:	211d      	movs	r1, #29
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fee4 	bl	80010d4 <write_register>
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10e      	bne.n	8001346 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	2b0f      	cmp	r3, #15
 800132c:	d901      	bls.n	8001332 <lora_set_tx_power+0x1e>
      level = 15;
 800132e:	230f      	movs	r3, #15
 8001330:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001338:	b2db      	uxtb	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	2109      	movs	r1, #9
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fec8 	bl	80010d4 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8001344:	e02e      	b.n	80013a4 <lora_set_tx_power+0x90>
    if (level > 20) {
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	2b14      	cmp	r3, #20
 800134a:	d901      	bls.n	8001350 <lora_set_tx_power+0x3c>
      level = 20;
 800134c:	2314      	movs	r3, #20
 800134e:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d801      	bhi.n	800135a <lora_set_tx_power+0x46>
      level = 2;
 8001356:	2302      	movs	r3, #2
 8001358:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	2b11      	cmp	r3, #17
 800135e:	d90c      	bls.n	800137a <lora_set_tx_power+0x66>
      level -= 3;
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	3b03      	subs	r3, #3
 8001364:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8001366:	2287      	movs	r2, #135	; 0x87
 8001368:	214d      	movs	r1, #77	; 0x4d
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff feb2 	bl	80010d4 <write_register>
      set_OCP(lora, 140);
 8001370:	218c      	movs	r1, #140	; 0x8c
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ff38 	bl	80011e8 <set_OCP>
 8001378:	e008      	b.n	800138c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800137a:	2284      	movs	r2, #132	; 0x84
 800137c:	214d      	movs	r1, #77	; 0x4d
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fea8 	bl	80010d4 <write_register>
      set_OCP(lora, 97);
 8001384:	2161      	movs	r1, #97	; 0x61
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff2e 	bl	80011e8 <set_OCP>
    level -= 2;
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	3b02      	subs	r3, #2
 8001390:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001398:	b2db      	uxtb	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	2109      	movs	r1, #9
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff fe98 	bl	80010d4 <write_register>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 80013b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013bc:	f04f 0000 	mov.w	r0, #0
 80013c0:	f04f 0100 	mov.w	r1, #0
 80013c4:	04d9      	lsls	r1, r3, #19
 80013c6:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80013ca:	04d0      	lsls	r0, r2, #19
 80013cc:	4a19      	ldr	r2, [pc, #100]	; (8001434 <lora_set_frequency+0x88>)
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	f7fe ff75 	bl	80002c0 <__aeabi_uldivmod>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80013de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	0c02      	lsrs	r2, r0, #16
 80013ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80013f0:	0c0b      	lsrs	r3, r1, #16
 80013f2:	b2d3      	uxtb	r3, r2
 80013f4:	461a      	mov	r2, r3
 80013f6:	2106      	movs	r1, #6
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f7ff fe6b 	bl	80010d4 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80013fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	0a02      	lsrs	r2, r0, #8
 800140c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001410:	0a0b      	lsrs	r3, r1, #8
 8001412:	b2d3      	uxtb	r3, r2
 8001414:	461a      	mov	r2, r3
 8001416:	2107      	movs	r1, #7
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f7ff fe5b 	bl	80010d4 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 800141e:	7c3b      	ldrb	r3, [r7, #16]
 8001420:	461a      	mov	r2, r3
 8001422:	2108      	movs	r1, #8
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f7ff fe55 	bl	80010d4 <write_register>
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	01e84800 	.word	0x01e84800

08001438 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	2b05      	cmp	r3, #5
 8001448:	d802      	bhi.n	8001450 <lora_set_spreading_factor+0x18>
    sf = 6;
 800144a:	2306      	movs	r3, #6
 800144c:	70fb      	strb	r3, [r7, #3]
 800144e:	e004      	b.n	800145a <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	2b0c      	cmp	r3, #12
 8001454:	d901      	bls.n	800145a <lora_set_spreading_factor+0x22>
    sf = 12;
 8001456:	230c      	movs	r3, #12
 8001458:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	2b06      	cmp	r3, #6
 800145e:	d10a      	bne.n	8001476 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8001460:	22c5      	movs	r2, #197	; 0xc5
 8001462:	2131      	movs	r1, #49	; 0x31
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fe35 	bl	80010d4 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 800146a:	220c      	movs	r2, #12
 800146c:	2137      	movs	r1, #55	; 0x37
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fe30 	bl	80010d4 <write_register>
 8001474:	e009      	b.n	800148a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8001476:	22c3      	movs	r2, #195	; 0xc3
 8001478:	2131      	movs	r1, #49	; 0x31
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fe2a 	bl	80010d4 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8001480:	220a      	movs	r2, #10
 8001482:	2137      	movs	r1, #55	; 0x37
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fe25 	bl	80010d4 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800148a:	211e      	movs	r1, #30
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fdea 	bl	8001066 <read_register>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]
  mc2 |= sf << 4;
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	b25a      	sxtb	r2, r3
 800149c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	461a      	mov	r2, r3
 80014aa:	211e      	movs	r1, #30
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fe11 	bl	80010d4 <write_register>

  set_low_data_rate_optimization(lora);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fece 	bl	8001254 <set_low_data_rate_optimization>
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	2120      	movs	r1, #32
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fdfb 	bl	80010d4 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	2121      	movs	r1, #33	; 0x21
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fdf1 	bl	80010d4 <write_register>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <lora_is_transmitting>:

  return read_register(lora, REG_VERSION);
}

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8001502:	2101      	movs	r1, #1
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fdae 	bl	8001066 <read_register>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b03      	cmp	r3, #3
 8001516:	d101      	bne.n	800151c <lora_is_transmitting+0x22>
 8001518:	2305      	movs	r3, #5
 800151a:	e000      	b.n	800151e <lora_is_transmitting+0x24>
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	4611      	mov	r1, r2
 8001532:	461a      	mov	r2, r3
 8001534:	460b      	mov	r3, r1
 8001536:	71fb      	strb	r3, [r7, #7]
 8001538:	4613      	mov	r3, r2
 800153a:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f7ff ffdc 	bl	80014fa <lora_is_transmitting>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8001548:	2305      	movs	r3, #5
 800154a:	e02a      	b.n	80015a2 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 800154c:	2101      	movs	r1, #1
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f7ff fe36 	bl	80011c0 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 f83a 	bl	80015ce <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	7d1b      	ldrb	r3, [r3, #20]
 800155e:	461a      	mov	r2, r3
 8001560:	210d      	movs	r1, #13
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff fdb6 	bl	80010d4 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	7d1b      	ldrb	r3, [r3, #20]
 800156c:	461a      	mov	r2, r3
 800156e:	210e      	movs	r1, #14
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f7ff fdaf 	bl	80010d4 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	461a      	mov	r2, r3
 800157a:	2122      	movs	r1, #34	; 0x22
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f7ff fda9 	bl	80010d4 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8001582:	79bb      	ldrb	r3, [r7, #6]
 8001584:	79fa      	ldrb	r2, [r7, #7]
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7ff fdd7 	bl	800113c <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <lora_send_packet_base+0x72>
    return LORA_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	e004      	b.n	80015a2 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8001598:	2103      	movs	r1, #3
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f7ff fe10 	bl	80011c0 <set_mode>
  return LORA_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	4613      	mov	r3, r2
 80015b6:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 80015b8:	79fa      	ldrb	r2, [r7, #7]
 80015ba:	2302      	movs	r3, #2
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f7ff ffb1 	bl	8001526 <lora_send_packet_base>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 80015d6:	2208      	movs	r2, #8
 80015d8:	2112      	movs	r1, #18
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fd7a 	bl	80010d4 <write_register>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	807b      	strh	r3, [r7, #2]

  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	887a      	ldrh	r2, [r7, #2]
 8001606:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8001608:	6a3a      	ldr	r2, [r7, #32]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2201      	movs	r2, #1
 8001612:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001626:	609a      	str	r2, [r3, #8]
    return LORA_ERROR;
  }
#endif

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fe43 	bl	80012b4 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f7ff fe40 	bl	80012b4 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8001634:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f7ff feb7 	bl	80013ac <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 800163e:	2107      	movs	r1, #7
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7ff fef9 	bl	8001438 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8001646:	210a      	movs	r1, #10
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff ff39 	bl	80014c0 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f7ff fe48 	bl	80012e4 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8001654:	210c      	movs	r1, #12
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f7ff fd05 	bl	8001066 <read_register>
 800165c:	4603      	mov	r3, r0
 800165e:	75fb      	strb	r3, [r7, #23]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	f043 0303 	orr.w	r3, r3, #3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	210c      	movs	r1, #12
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f7ff fd31 	bl	80010d4 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8001672:	2204      	movs	r2, #4
 8001674:	2126      	movs	r1, #38	; 0x26
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f7ff fd2c 	bl	80010d4 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 800167c:	2111      	movs	r1, #17
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7ff fe48 	bl	8001314 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff fe21 	bl	80012cc <lora_mode_standby>

  return LORA_OK;
 800168a:	2300      	movs	r3, #0

}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t timerVal;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim,0);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a31      	ldr	r2, [pc, #196]	; (8001780 <HAL_UART_RxCpltCallback+0xd0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d15b      	bne.n	8001778 <HAL_UART_RxCpltCallback+0xc8>
		char *string;
		memset(buffStr, 0, 2048);
 80016c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016c4:	2100      	movs	r1, #0
 80016c6:	482f      	ldr	r0, [pc, #188]	; (8001784 <HAL_UART_RxCpltCallback+0xd4>)
 80016c8:	f007 f8a6 	bl	8008818 <memset>
		sprintf(buffStr, "%s", GPS_buffer);
 80016cc:	4a2e      	ldr	r2, [pc, #184]	; (8001788 <HAL_UART_RxCpltCallback+0xd8>)
 80016ce:	492f      	ldr	r1, [pc, #188]	; (800178c <HAL_UART_RxCpltCallback+0xdc>)
 80016d0:	482c      	ldr	r0, [pc, #176]	; (8001784 <HAL_UART_RxCpltCallback+0xd4>)
 80016d2:	f007 f8a9 	bl	8008828 <siprintf>
		string = strdup(buffStr);
 80016d6:	482b      	ldr	r0, [pc, #172]	; (8001784 <HAL_UART_RxCpltCallback+0xd4>)
 80016d8:	f007 f8d4 	bl	8008884 <strdup>
 80016dc:	4603      	mov	r3, r0
 80016de:	60fb      	str	r3, [r7, #12]

		char* token;
		while ((token = strsep(&string, "\n")) != NULL) {
 80016e0:	e03a      	b.n	8001758 <HAL_UART_RxCpltCallback+0xa8>
			memset(nmeaSnt, 0, 80);
 80016e2:	2250      	movs	r2, #80	; 0x50
 80016e4:	2100      	movs	r1, #0
 80016e6:	482a      	ldr	r0, [pc, #168]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 80016e8:	f007 f896 	bl	8008818 <memset>
			sprintf(nmeaSnt, "%s\n\r", token);
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	4929      	ldr	r1, [pc, #164]	; (8001794 <HAL_UART_RxCpltCallback+0xe4>)
 80016f0:	4827      	ldr	r0, [pc, #156]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 80016f2:	f007 f899 	bl	8008828 <siprintf>
			if ((strstr(nmeaSnt, "$GPGLL") != 0) && strlen(nmeaSnt) > 48 && strlen(nmeaSnt) < 65) {
 80016f6:	4928      	ldr	r1, [pc, #160]	; (8001798 <HAL_UART_RxCpltCallback+0xe8>)
 80016f8:	4825      	ldr	r0, [pc, #148]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 80016fa:	f007 f8e5 	bl	80088c8 <strstr>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d029      	beq.n	8001758 <HAL_UART_RxCpltCallback+0xa8>
 8001704:	4822      	ldr	r0, [pc, #136]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 8001706:	f7fe fd83 	bl	8000210 <strlen>
 800170a:	4603      	mov	r3, r0
 800170c:	2b30      	cmp	r3, #48	; 0x30
 800170e:	d923      	bls.n	8001758 <HAL_UART_RxCpltCallback+0xa8>
 8001710:	481f      	ldr	r0, [pc, #124]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 8001712:	f7fe fd7d 	bl	8000210 <strlen>
 8001716:	4603      	mov	r3, r0
 8001718:	2b40      	cmp	r3, #64	; 0x40
 800171a:	d81d      	bhi.n	8001758 <HAL_UART_RxCpltCallback+0xa8>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	2110      	movs	r1, #16
 8001720:	481e      	ldr	r0, [pc, #120]	; (800179c <HAL_UART_RxCpltCallback+0xec>)
 8001722:	f002 f9c1 	bl	8003aa8 <HAL_GPIO_WritePin>
				//Raw Data
				char* GPSidx = strchr(nmeaSnt, '\n');
 8001726:	210a      	movs	r1, #10
 8001728:	4819      	ldr	r0, [pc, #100]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 800172a:	f007 f89d 	bl	8008868 <strchr>
 800172e:	6138      	str	r0, [r7, #16]
				if (GPSidx){
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d004      	beq.n	8001740 <HAL_UART_RxCpltCallback+0x90>
					GPSidxint = GPSidx-nmeaSnt;
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4a15      	ldr	r2, [pc, #84]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 800173a:	1a9b      	subs	r3, r3, r2
 800173c:	4a18      	ldr	r2, [pc, #96]	; (80017a0 <HAL_UART_RxCpltCallback+0xf0>)
 800173e:	6013      	str	r3, [r2, #0]
				}
				memset(GPS_latest_data, 0, 65);
 8001740:	2241      	movs	r2, #65	; 0x41
 8001742:	2100      	movs	r1, #0
 8001744:	4817      	ldr	r0, [pc, #92]	; (80017a4 <HAL_UART_RxCpltCallback+0xf4>)
 8001746:	f007 f867 	bl	8008818 <memset>
				memcpy(GPS_latest_data, nmeaSnt, GPSidxint);
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_UART_RxCpltCallback+0xf0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	490f      	ldr	r1, [pc, #60]	; (8001790 <HAL_UART_RxCpltCallback+0xe0>)
 8001752:	4814      	ldr	r0, [pc, #80]	; (80017a4 <HAL_UART_RxCpltCallback+0xf4>)
 8001754:	f007 f852 	bl	80087fc <memcpy>
		while ((token = strsep(&string, "\n")) != NULL) {
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	4912      	ldr	r1, [pc, #72]	; (80017a8 <HAL_UART_RxCpltCallback+0xf8>)
 800175e:	4618      	mov	r0, r3
 8001760:	f007 f8ad 	bl	80088be <strsep>
 8001764:	6178      	str	r0, [r7, #20]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1ba      	bne.n	80016e2 <HAL_UART_RxCpltCallback+0x32>
			}
		}
		HAL_UART_Receive_DMA(&huart2, GPS_buffer, 2048);
 800176c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001770:	4905      	ldr	r1, [pc, #20]	; (8001788 <HAL_UART_RxCpltCallback+0xd8>)
 8001772:	4803      	ldr	r0, [pc, #12]	; (8001780 <HAL_UART_RxCpltCallback+0xd0>)
 8001774:	f005 fef9 	bl	800756a <HAL_UART_Receive_DMA>
	}
}
 8001778:	bf00      	nop
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000298 	.word	0x20000298
 8001784:	20003b74 	.word	0x20003b74
 8001788:	20003374 	.word	0x20003374
 800178c:	080091dc 	.word	0x080091dc
 8001790:	20004374 	.word	0x20004374
 8001794:	080091e0 	.word	0x080091e0
 8001798:	080091e8 	.word	0x080091e8
 800179c:	40021400 	.word	0x40021400
 80017a0:	20004408 	.word	0x20004408
 80017a4:	200043c4 	.word	0x200043c4
 80017a8:	080091f0 	.word	0x080091f0
 80017ac:	00000000 	.word	0x00000000

080017b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  _running = false;
 80017b6:	4b56      	ldr	r3, [pc, #344]	; (8001910 <main+0x160>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
  head_mov = 0;
 80017bc:	4b55      	ldr	r3, [pc, #340]	; (8001914 <main+0x164>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
  tail_mov = 1;
 80017c2:	4b55      	ldr	r3, [pc, #340]	; (8001918 <main+0x168>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
  head_full = 0;
 80017c8:	4b54      	ldr	r3, [pc, #336]	; (800191c <main+0x16c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
  tail_full = 1;
 80017ce:	4b54      	ldr	r3, [pc, #336]	; (8001920 <main+0x170>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
  moving_sum = 0;
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <main+0x174>)
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
  moving_avg = 0;
 80017dc:	4b52      	ldr	r3, [pc, #328]	; (8001928 <main+0x178>)
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
  moving_sum_left = 0;
 80017e4:	4951      	ldr	r1, [pc, #324]	; (800192c <main+0x17c>)
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	e9c1 2300 	strd	r2, r3, [r1]
  moving_avg_left = 0;
 80017f2:	4b4f      	ldr	r3, [pc, #316]	; (8001930 <main+0x180>)
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
  moving_sum_right = 0;
 80017fa:	494e      	ldr	r1, [pc, #312]	; (8001934 <main+0x184>)
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	e9c1 2300 	strd	r2, r3, [r1]
  moving_avg_right = 0;
 8001808:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <main+0x188>)
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
  counter = 0;
 8001810:	4b4a      	ldr	r3, [pc, #296]	; (800193c <main+0x18c>)
 8001812:	2200      	movs	r2, #0
 8001814:	801a      	strh	r2, [r3, #0]
  done = 0;
 8001816:	4b4a      	ldr	r3, [pc, #296]	; (8001940 <main+0x190>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
  memset(circular_buf_mov, 0, MOVING_AVG_LEN*sizeof(int16_t));
 800181c:	220a      	movs	r2, #10
 800181e:	2100      	movs	r1, #0
 8001820:	4848      	ldr	r0, [pc, #288]	; (8001944 <main+0x194>)
 8001822:	f006 fff9 	bl	8008818 <memset>
  memset(circular_buf_mov_right, 0, MOVING_AVG_LEN*sizeof(int16_t));
 8001826:	220a      	movs	r2, #10
 8001828:	2100      	movs	r1, #0
 800182a:	4847      	ldr	r0, [pc, #284]	; (8001948 <main+0x198>)
 800182c:	f006 fff4 	bl	8008818 <memset>
  memset(circular_buf_full, 0, SEND_LEN*sizeof(int16_t));
 8001830:	f241 32ec 	movw	r2, #5100	; 0x13ec
 8001834:	2100      	movs	r1, #0
 8001836:	4845      	ldr	r0, [pc, #276]	; (800194c <main+0x19c>)
 8001838:	f006 ffee 	bl	8008818 <memset>
  memset(_sampleBuffer, 0, MIC_SAMPLES_PER_PACKET*2*sizeof(int32_t));
 800183c:	f44f 52dc 	mov.w	r2, #7040	; 0x1b80
 8001840:	2100      	movs	r1, #0
 8001842:	4843      	ldr	r0, [pc, #268]	; (8001950 <main+0x1a0>)
 8001844:	f006 ffe8 	bl	8008818 <memset>
  arm_fir_init_f32(&S, FILTER_LEN, (float *) coeffs, buffer, blockSize);
 8001848:	4b42      	ldr	r3, [pc, #264]	; (8001954 <main+0x1a4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	4b42      	ldr	r3, [pc, #264]	; (8001958 <main+0x1a8>)
 8001850:	4a42      	ldr	r2, [pc, #264]	; (800195c <main+0x1ac>)
 8001852:	2165      	movs	r1, #101	; 0x65
 8001854:	4842      	ldr	r0, [pc, #264]	; (8001960 <main+0x1b0>)
 8001856:	f7ff fbe7 	bl	8001028 <arm_fir_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185a:	f001 f9e7 	bl	8002c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185e:	f000 f897 	bl	8001990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001862:	f000 fa6d 	bl	8001d40 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001866:	f000 f951 	bl	8001b0c <MX_SPI1_Init>
  MX_TIM2_Init();
 800186a:	f000 f985 	bl	8001b78 <MX_TIM2_Init>
  MX_DMA_Init();
 800186e:	f000 fa29 	bl	8001cc4 <MX_DMA_Init>
  MX_SAI1_Init();
 8001872:	f000 f901 	bl	8001a78 <MX_SAI1_Init>
  MX_USART2_UART_Init();
 8001876:	f000 f9fb 	bl	8001c70 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800187a:	f000 f9cf 	bl	8001c1c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800187e:	2108      	movs	r1, #8
 8001880:	4838      	ldr	r0, [pc, #224]	; (8001964 <main+0x1b4>)
 8001882:	f005 f81f 	bl	80068c4 <HAL_TIM_IC_Start_IT>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 8001886:	2201      	movs	r2, #1
 8001888:	2110      	movs	r1, #16
 800188a:	4837      	ldr	r0, [pc, #220]	; (8001968 <main+0x1b8>)
 800188c:	f002 f90c 	bl	8003aa8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 8001890:	2201      	movs	r2, #1
 8001892:	2108      	movs	r1, #8
 8001894:	4834      	ldr	r0, [pc, #208]	; (8001968 <main+0x1b8>)
 8001896:	f002 f907 	bl	8003aa8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2120      	movs	r1, #32
 800189e:	4832      	ldr	r0, [pc, #200]	; (8001968 <main+0x1b8>)
 80018a0:	f002 f902 	bl	8003aa8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 80018a4:	2201      	movs	r2, #1
 80018a6:	2120      	movs	r1, #32
 80018a8:	4830      	ldr	r0, [pc, #192]	; (800196c <main+0x1bc>)
 80018aa:	f002 f8fd 	bl	8003aa8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b4:	482e      	ldr	r0, [pc, #184]	; (8001970 <main+0x1c0>)
 80018b6:	f002 f8f7 	bl	8003aa8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80018ba:	2064      	movs	r0, #100	; 0x64
 80018bc:	f001 fa28 	bl	8002d10 <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c6:	482a      	ldr	r0, [pc, #168]	; (8001970 <main+0x1c0>)
 80018c8:	f002 f8ee 	bl	8003aa8 <HAL_GPIO_WritePin>
  HAL_UART_Receive_DMA(&huart2, GPS_buffer, 2048);
 80018cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018d0:	4928      	ldr	r1, [pc, #160]	; (8001974 <main+0x1c4>)
 80018d2:	4829      	ldr	r0, [pc, #164]	; (8001978 <main+0x1c8>)
 80018d4:	f005 fe49 	bl	800756a <HAL_UART_Receive_DMA>

#if LORA_TRANSMIT
  uint8_t res = lora_init(&lora, &hspi1, NSS_GPIO_Port, NSS_Pin, LORA_BASE_FREQUENCY_US);
 80018d8:	a30b      	add	r3, pc, #44	; (adr r3, 8001908 <main+0x158>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	e9cd 2300 	strd	r2, r3, [sp]
 80018e2:	2310      	movs	r3, #16
 80018e4:	4a25      	ldr	r2, [pc, #148]	; (800197c <main+0x1cc>)
 80018e6:	4926      	ldr	r1, [pc, #152]	; (8001980 <main+0x1d0>)
 80018e8:	4826      	ldr	r0, [pc, #152]	; (8001984 <main+0x1d4>)
 80018ea:	f7ff fe7d 	bl	80015e8 <lora_init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  if (res != LORA_OK) {
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <main+0x156>
	  HAL_UART_Transmit(&huart1, iterfacing_failed, sizeof(iterfacing_failed), 1000);
 80018f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fc:	2213      	movs	r2, #19
 80018fe:	4922      	ldr	r1, [pc, #136]	; (8001988 <main+0x1d8>)
 8001900:	4822      	ldr	r0, [pc, #136]	; (800198c <main+0x1dc>)
 8001902:	f005 fda0 	bl	8007446 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001906:	e7fe      	b.n	8001906 <main+0x156>
 8001908:	3689cac0 	.word	0x3689cac0
 800190c:	00000000 	.word	0x00000000
 8001910:	20003354 	.word	0x20003354
 8001914:	20001f34 	.word	0x20001f34
 8001918:	20001f38 	.word	0x20001f38
 800191c:	20003328 	.word	0x20003328
 8001920:	2000332c 	.word	0x2000332c
 8001924:	20003330 	.word	0x20003330
 8001928:	20003334 	.word	0x20003334
 800192c:	20003338 	.word	0x20003338
 8001930:	20003340 	.word	0x20003340
 8001934:	20003348 	.word	0x20003348
 8001938:	20003350 	.word	0x20003350
 800193c:	20003356 	.word	0x20003356
 8001940:	20003358 	.word	0x20003358
 8001944:	20001f1c 	.word	0x20001f1c
 8001948:	20001f28 	.word	0x20001f28
 800194c:	20001f3c 	.word	0x20001f3c
 8001950:	2000039c 	.word	0x2000039c
 8001954:	2000003c 	.word	0x2000003c
 8001958:	20004418 	.word	0x20004418
 800195c:	080091f4 	.word	0x080091f4
 8001960:	2000440c 	.word	0x2000440c
 8001964:	2000020c 	.word	0x2000020c
 8001968:	40021400 	.word	0x40021400
 800196c:	40021800 	.word	0x40021800
 8001970:	40020c00 	.word	0x40020c00
 8001974:	20003374 	.word	0x20003374
 8001978:	20000298 	.word	0x20000298
 800197c:	40020000 	.word	0x40020000
 8001980:	200001b4 	.word	0x200001b4
 8001984:	2000335c 	.word	0x2000335c
 8001988:	20000010 	.word	0x20000010
 800198c:	20000254 	.word	0x20000254

08001990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b094      	sub	sp, #80	; 0x50
 8001994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	2234      	movs	r2, #52	; 0x34
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f006 ff3a 	bl	8008818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a4:	f107 0308 	add.w	r3, r7, #8
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <SystemClock_Config+0xe0>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	4a2c      	ldr	r2, [pc, #176]	; (8001a70 <SystemClock_Config+0xe0>)
 80019be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c2:	6413      	str	r3, [r2, #64]	; 0x40
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <SystemClock_Config+0xe0>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d0:	2300      	movs	r3, #0
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <SystemClock_Config+0xe4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <SystemClock_Config+0xe4>)
 80019da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <SystemClock_Config+0xe4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019ec:	2302      	movs	r3, #2
 80019ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019f0:	2301      	movs	r3, #1
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019f4:	2310      	movs	r3, #16
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f8:	2302      	movs	r3, #2
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019fc:	2300      	movs	r3, #0
 80019fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a00:	2310      	movs	r3, #16
 8001a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001a04:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001a08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a12:	2302      	movs	r3, #2
 8001a14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 f8fe 	bl	8004c1c <HAL_RCC_OscConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a26:	f000 fdb1 	bl	800258c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a2a:	f002 f871 	bl	8003b10 <HAL_PWREx_EnableOverDrive>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001a34:	f000 fdaa 	bl	800258c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a38:	230f      	movs	r3, #15
 8001a3a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	2105      	movs	r1, #5
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 f8aa 	bl	8003bb0 <HAL_RCC_ClockConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001a62:	f000 fd93 	bl	800258c <Error_Handler>
  }
}
 8001a66:	bf00      	nop
 8001a68:	3750      	adds	r7, #80	; 0x50
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40007000 	.word	0x40007000

08001a78 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001a7c:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <MX_SAI1_Init+0x84>)
 8001a7e:	4a20      	ldr	r2, [pc, #128]	; (8001b00 <MX_SAI1_Init+0x88>)
 8001a80:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001a82:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <MX_SAI1_Init+0x84>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001a88:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <MX_SAI1_Init+0x84>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <MX_SAI1_Init+0x84>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <MX_SAI1_Init+0x84>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <MX_SAI1_Init+0x84>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <MX_SAI1_Init+0x84>)
 8001aa2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001aa6:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <MX_SAI1_Init+0x84>)
 8001aaa:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001aae:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <MX_SAI1_Init+0x84>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_SAI1_Init+0x84>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <MX_SAI1_Init+0x84>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	480c      	ldr	r0, [pc, #48]	; (8001afc <MX_SAI1_Init+0x84>)
 8001aca:	f003 fb45 	bl	8005158 <HAL_SAI_InitProtocol>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8001ad4:	f000 fd5a 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  if ((HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*) _sampleBuffer, MIC_SAMPLES_PER_PACKET * 2)) == HAL_OK) {
 8001ad8:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001adc:	4909      	ldr	r1, [pc, #36]	; (8001b04 <MX_SAI1_Init+0x8c>)
 8001ade:	4807      	ldr	r0, [pc, #28]	; (8001afc <MX_SAI1_Init+0x84>)
 8001ae0:	f003 fc96 	bl	8005410 <HAL_SAI_Receive_DMA>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <MX_SAI1_Init+0x80>
	  HAL_Delay(1000);
 8001aea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aee:	f001 f90f 	bl	8002d10 <HAL_Delay>
	  _running = true;
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <MX_SAI1_Init+0x90>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END SAI1_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200000cc 	.word	0x200000cc
 8001b00:	40015824 	.word	0x40015824
 8001b04:	2000039c 	.word	0x2000039c
 8001b08:	20003354 	.word	0x20003354

08001b0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b12:	4a18      	ldr	r2, [pc, #96]	; (8001b74 <MX_SPI1_Init+0x68>)
 8001b14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b40:	2238      	movs	r2, #56	; 0x38
 8001b42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b58:	220a      	movs	r2, #10
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_SPI1_Init+0x64>)
 8001b5e:	f003 ff63 	bl	8005a28 <HAL_SPI_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b68:	f000 fd10 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200001b4 	.word	0x200001b4
 8001b74:	40013000 	.word	0x40013000

08001b78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7e:	f107 0310 	add.w	r3, r7, #16
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b94:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <MX_TIM2_Init+0xa0>)
 8001b96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <MX_TIM2_Init+0xa0>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <MX_TIM2_Init+0xa0>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <MX_TIM2_Init+0xa0>)
 8001baa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <MX_TIM2_Init+0xa0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <MX_TIM2_Init+0xa0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001bbc:	4816      	ldr	r0, [pc, #88]	; (8001c18 <MX_TIM2_Init+0xa0>)
 8001bbe:	f004 fe31 	bl	8006824 <HAL_TIM_IC_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bc8:	f000 fce0 	bl	800258c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480f      	ldr	r0, [pc, #60]	; (8001c18 <MX_TIM2_Init+0xa0>)
 8001bdc:	f005 fb56 	bl	800728c <HAL_TIMEx_MasterConfigSynchronization>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001be6:	f000 fcd1 	bl	800258c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bea:	2300      	movs	r3, #0
 8001bec:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001bfa:	463b      	mov	r3, r7
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_TIM2_Init+0xa0>)
 8001c02:	f005 f88f 	bl	8006d24 <HAL_TIM_IC_ConfigChannel>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001c0c:	f000 fcbe 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c10:	bf00      	nop
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	2000020c 	.word	0x2000020c

08001c1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <MX_USART1_UART_Init+0x50>)
 8001c24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c42:	220c      	movs	r2, #12
 8001c44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_USART1_UART_Init+0x4c>)
 8001c54:	f005 fbaa 	bl	80073ac <HAL_UART_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c5e:	f000 fc95 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000254 	.word	0x20000254
 8001c6c:	40011000 	.word	0x40011000

08001c70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_USART2_UART_Init+0x4c>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <MX_USART2_UART_Init+0x50>)
 8001c78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <MX_USART2_UART_Init+0x4c>)
 8001c7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_USART2_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_USART2_UART_Init+0x4c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <MX_USART2_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_USART2_UART_Init+0x4c>)
 8001c96:	220c      	movs	r2, #12
 8001c98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <MX_USART2_UART_Init+0x4c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_USART2_UART_Init+0x4c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_USART2_UART_Init+0x4c>)
 8001ca8:	f005 fb80 	bl	80073ac <HAL_UART_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cb2:	f000 fc6b 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000298 	.word	0x20000298
 8001cc0:	40004400 	.word	0x40004400

08001cc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <MX_DMA_Init+0x78>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <MX_DMA_Init+0x78>)
 8001cd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <MX_DMA_Init+0x78>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <MX_DMA_Init+0x78>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <MX_DMA_Init+0x78>)
 8001cf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_DMA_Init+0x78>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	2010      	movs	r0, #16
 8001d08:	f001 f901 	bl	8002f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d0c:	2010      	movs	r0, #16
 8001d0e:	f001 f91a 	bl	8002f46 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	203c      	movs	r0, #60	; 0x3c
 8001d18:	f001 f8f9 	bl	8002f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001d1c:	203c      	movs	r0, #60	; 0x3c
 8001d1e:	f001 f912 	bl	8002f46 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	2046      	movs	r0, #70	; 0x46
 8001d28:	f001 f8f1 	bl	8002f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001d2c:	2046      	movs	r0, #70	; 0x46
 8001d2e:	f001 f90a 	bl	8002f46 <HAL_NVIC_EnableIRQ>

}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08c      	sub	sp, #48	; 0x30
 8001d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	4b59      	ldr	r3, [pc, #356]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a58      	ldr	r2, [pc, #352]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001d60:	f043 0310 	orr.w	r3, r3, #16
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b56      	ldr	r3, [pc, #344]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	4b52      	ldr	r3, [pc, #328]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a51      	ldr	r2, [pc, #324]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b4f      	ldr	r3, [pc, #316]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b4b      	ldr	r3, [pc, #300]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a4a      	ldr	r2, [pc, #296]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001d98:	f043 0320 	orr.w	r3, r3, #32
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b48      	ldr	r3, [pc, #288]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0320 	and.w	r3, r3, #32
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b44      	ldr	r3, [pc, #272]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a43      	ldr	r2, [pc, #268]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b3d      	ldr	r3, [pc, #244]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a3c      	ldr	r2, [pc, #240]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b3a      	ldr	r3, [pc, #232]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a35      	ldr	r2, [pc, #212]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001dec:	f043 0308 	orr.w	r3, r3, #8
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a2e      	ldr	r2, [pc, #184]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <MX_GPIO_Init+0x180>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2138      	movs	r1, #56	; 0x38
 8001e1e:	4829      	ldr	r0, [pc, #164]	; (8001ec4 <MX_GPIO_Init+0x184>)
 8001e20:	f001 fe42 	bl	8003aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2110      	movs	r1, #16
 8001e28:	4827      	ldr	r0, [pc, #156]	; (8001ec8 <MX_GPIO_Init+0x188>)
 8001e2a:	f001 fe3d 	bl	8003aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e34:	4825      	ldr	r0, [pc, #148]	; (8001ecc <MX_GPIO_Init+0x18c>)
 8001e36:	f001 fe37 	bl	8003aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2120      	movs	r1, #32
 8001e3e:	4824      	ldr	r0, [pc, #144]	; (8001ed0 <MX_GPIO_Init+0x190>)
 8001e40:	f001 fe32 	bl	8003aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF3 PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e44:	2338      	movs	r3, #56	; 0x38
 8001e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	481a      	ldr	r0, [pc, #104]	; (8001ec4 <MX_GPIO_Init+0x184>)
 8001e5c:	f001 fc90 	bl	8003780 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8001e60:	2310      	movs	r3, #16
 8001e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e64:	2301      	movs	r3, #1
 8001e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001e70:	f107 031c 	add.w	r3, r7, #28
 8001e74:	4619      	mov	r1, r3
 8001e76:	4814      	ldr	r0, [pc, #80]	; (8001ec8 <MX_GPIO_Init+0x188>)
 8001e78:	f001 fc82 	bl	8003780 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e82:	2301      	movs	r3, #1
 8001e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 031c 	add.w	r3, r7, #28
 8001e92:	4619      	mov	r1, r3
 8001e94:	480d      	ldr	r0, [pc, #52]	; (8001ecc <MX_GPIO_Init+0x18c>)
 8001e96:	f001 fc73 	bl	8003780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e9a:	2320      	movs	r3, #32
 8001e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <MX_GPIO_Init+0x190>)
 8001eb2:	f001 fc65 	bl	8003780 <HAL_GPIO_Init>

}
 8001eb6:	bf00      	nop
 8001eb8:	3730      	adds	r7, #48	; 0x30
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40021400 	.word	0x40021400
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	40020c00 	.word	0x40020c00
 8001ed0:	40021800 	.word	0x40021800

08001ed4 <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	sendData(_sampleBuffer);
 8001edc:	4803      	ldr	r0, [pc, #12]	; (8001eec <HAL_SAI_RxHalfCpltCallback+0x18>)
 8001ede:	f000 f815 	bl	8001f0c <sendData>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000039c 	.word	0x2000039c

08001ef0 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	sendData(&_sampleBuffer[MIC_SAMPLES_PER_PACKET]);
 8001ef8:	4803      	ldr	r0, [pc, #12]	; (8001f08 <HAL_SAI_RxCpltCallback+0x18>)
 8001efa:	f000 f807 	bl	8001f0c <sendData>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000115c 	.word	0x2000115c

08001f0c <sendData>:

void sendData(volatile int32_t *data_in) {
 8001f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f10:	f5ad 5d07 	sub.w	sp, sp, #8640	; 0x21c0
 8001f14:	b087      	sub	sp, #28
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f1c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f20:	6018      	str	r0, [r3, #0]

	float data_in_float[MIC_SAMPLES_PER_PACKET / 2];
	float filt[MIC_SAMPLES_PER_PACKET / 2];
	volatile int32_t *data_in_tmp = data_in;
 8001f22:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001f26:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001f30:	f102 020c 	add.w	r2, r2, #12
 8001f34:	6013      	str	r3, [r2, #0]
	for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8001f36:	2300      	movs	r3, #0
 8001f38:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001f3c:	f102 0210 	add.w	r2, r2, #16
 8001f40:	8013      	strh	r3, [r2, #0]
 8001f42:	e03a      	b.n	8001fba <sendData+0xae>
		int16_t tmp = (int16_t) ((data_in_tmp[0]>>8) & 0xffff);
 8001f44:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001f48:	f103 030c 	add.w	r3, r3, #12
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	121b      	asrs	r3, r3, #8
 8001f52:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001f56:	f102 023a 	add.w	r2, r2, #58	; 0x3a
 8001f5a:	8013      	strh	r3, [r2, #0]
		data_in_float[i] = (float) tmp;
 8001f5c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001f60:	f103 0310 	add.w	r3, r3, #16
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001f6a:	f102 023a 	add.w	r2, r2, #58	; 0x3a
 8001f6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f72:	ee07 2a90 	vmov	s15, r2
 8001f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7a:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001f7e:	f102 0218 	add.w	r2, r2, #24
 8001f82:	f5a2 62e0 	sub.w	r2, r2, #1792	; 0x700
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	edc3 7a00 	vstr	s15, [r3]
		data_in_tmp += 2;
 8001f8e:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001f92:	f103 030c 	add.w	r3, r3, #12
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	3308      	adds	r3, #8
 8001f9a:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001f9e:	f102 020c 	add.w	r2, r2, #12
 8001fa2:	6013      	str	r3, [r2, #0]
	for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8001fa4:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001fa8:	f103 0310 	add.w	r3, r3, #16
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001fb4:	f102 0210 	add.w	r2, r2, #16
 8001fb8:	8013      	strh	r3, [r2, #0]
 8001fba:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001fbe:	f103 0310 	add.w	r3, r3, #16
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8001fc8:	d3bc      	bcc.n	8001f44 <sendData+0x38>
	}
	arm_fir_f32(&S, data_in_float, filt, blockSize);
 8001fca:	4bca      	ldr	r3, [pc, #808]	; (80022f4 <sendData+0x3e8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f507 529f 	add.w	r2, r7, #5088	; 0x13e0
 8001fd2:	f102 0218 	add.w	r2, r2, #24
 8001fd6:	f507 51d6 	add.w	r1, r7, #6848	; 0x1ac0
 8001fda:	f101 0118 	add.w	r1, r1, #24
 8001fde:	48c6      	ldr	r0, [pc, #792]	; (80022f8 <sendData+0x3ec>)
 8001fe0:	f7fe faf0 	bl	80005c4 <arm_fir_f32>


	if (_running) {
 8001fe4:	4bc5      	ldr	r3, [pc, #788]	; (80022fc <sendData+0x3f0>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 82a8 	beq.w	800253e <sendData+0x632>
		for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8001ff4:	f102 0212 	add.w	r2, r2, #18
 8001ff8:	8013      	strh	r3, [r2, #0]
 8001ffa:	e297      	b.n	800252c <sendData+0x620>

			moving_sum += (int16_t) fabsf(filt[i]); // * abs(sample_right);
 8001ffc:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002000:	f103 0312 	add.w	r3, r3, #18
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 800200a:	f102 0218 	add.w	r2, r2, #24
 800200e:	f5a2 625e 	sub.w	r2, r2, #3552	; 0xde0
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	eef0 7ae7 	vabs.f32	s15, s15
 800201e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002022:	ee17 3a90 	vmov	r3, s15
 8002026:	b21b      	sxth	r3, r3
 8002028:	ee07 3a90 	vmov	s15, r3
 800202c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002030:	4bb3      	ldr	r3, [pc, #716]	; (8002300 <sendData+0x3f4>)
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203a:	4bb1      	ldr	r3, [pc, #708]	; (8002300 <sendData+0x3f4>)
 800203c:	edc3 7a00 	vstr	s15, [r3]
			moving_sum -= (int16_t) abs(circular_buf_mov[tail_mov]); // * abs(circular_buf_mov_right[tail_mov]);
 8002040:	4baf      	ldr	r3, [pc, #700]	; (8002300 <sendData+0x3f4>)
 8002042:	ed93 7a00 	vldr	s14, [r3]
 8002046:	4baf      	ldr	r3, [pc, #700]	; (8002304 <sendData+0x3f8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4aaf      	ldr	r2, [pc, #700]	; (8002308 <sendData+0x3fc>)
 800204c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002050:	2b00      	cmp	r3, #0
 8002052:	bfb8      	it	lt
 8002054:	425b      	neglt	r3, r3
 8002056:	b29b      	uxth	r3, r3
 8002058:	b21b      	sxth	r3, r3
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002066:	4ba6      	ldr	r3, [pc, #664]	; (8002300 <sendData+0x3f4>)
 8002068:	edc3 7a00 	vstr	s15, [r3]
			circular_buf_mov[tail_mov] = (int16_t) filt[i];
 800206c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002070:	f103 0312 	add.w	r3, r3, #18
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 800207a:	f102 0218 	add.w	r2, r2, #24
 800207e:	f5a2 625e 	sub.w	r2, r2, #3552	; 0xde0
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	edd3 7a00 	vldr	s15, [r3]
 800208a:	4b9e      	ldr	r3, [pc, #632]	; (8002304 <sendData+0x3f8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002092:	ee17 2a90 	vmov	r2, s15
 8002096:	b211      	sxth	r1, r2
 8002098:	4a9b      	ldr	r2, [pc, #620]	; (8002308 <sendData+0x3fc>)
 800209a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			circular_buf_full[tail_full] = (int16_t) filt[i];
 800209e:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80020a2:	f103 0312 	add.w	r3, r3, #18
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 80020ac:	f102 0218 	add.w	r2, r2, #24
 80020b0:	f5a2 625e 	sub.w	r2, r2, #3552	; 0xde0
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	4b93      	ldr	r3, [pc, #588]	; (800230c <sendData+0x400>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020c4:	ee17 2a90 	vmov	r2, s15
 80020c8:	b211      	sxth	r1, r2
 80020ca:	4a91      	ldr	r2, [pc, #580]	; (8002310 <sendData+0x404>)
 80020cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			moving_avg = moving_sum / MOVING_AVG_LEN;
 80020d0:	4b8b      	ldr	r3, [pc, #556]	; (8002300 <sendData+0x3f4>)
 80020d2:	ed93 7a00 	vldr	s14, [r3]
 80020d6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80020da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020de:	4b8d      	ldr	r3, [pc, #564]	; (8002314 <sendData+0x408>)
 80020e0:	edc3 7a00 	vstr	s15, [r3]

			if ((counter > 0) && (!done)){
 80020e4:	4b8c      	ldr	r3, [pc, #560]	; (8002318 <sendData+0x40c>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 81b0 	beq.w	800244e <sendData+0x542>
 80020ee:	4b8b      	ldr	r3, [pc, #556]	; (800231c <sendData+0x410>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f040 81ab 	bne.w	800244e <sendData+0x542>
				counter++;
 80020f8:	4b87      	ldr	r3, [pc, #540]	; (8002318 <sendData+0x40c>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	3301      	adds	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	4b85      	ldr	r3, [pc, #532]	; (8002318 <sendData+0x40c>)
 8002102:	801a      	strh	r2, [r3, #0]
				if (counter == (SEND_LEN/2)){ // TODO: need to change this to SEND_LEN-100;
 8002104:	4b84      	ldr	r3, [pc, #528]	; (8002318 <sendData+0x40c>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	f240 42fb 	movw	r2, #1275	; 0x4fb
 800210c:	4293      	cmp	r3, r2
 800210e:	f040 819e 	bne.w	800244e <sendData+0x542>

					for(int delay = 0; delay < NODE_DELAY; delay++); // non-blocking delay used to offset the transmissions of each node to prevent garbled transmissions
 8002112:	2300      	movs	r3, #0
 8002114:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002118:	f102 0214 	add.w	r2, r2, #20
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e00a      	b.n	8002136 <sendData+0x22a>
 8002120:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002124:	f103 0314 	add.w	r3, r3, #20
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	3301      	adds	r3, #1
 800212c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002130:	f102 0214 	add.w	r2, r2, #20
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800213a:	f103 0314 	add.w	r3, r3, #20
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	dbed      	blt.n	8002120 <sendData+0x214>

					uint8_t GPS_data_len = (uint8_t) GPSidxint; //strlen((char *) GPS_latest_data);
 8002144:	4b76      	ldr	r3, [pc, #472]	; (8002320 <sendData+0x414>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 800214c:	f102 0207 	add.w	r2, r2, #7
 8002150:	7013      	strb	r3, [r2, #0]
					uint8_t metaData[16+GPS_data_len];
 8002152:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002156:	f103 0307 	add.w	r3, r3, #7
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	f103 0110 	add.w	r1, r3, #16
 8002160:	466b      	mov	r3, sp
 8002162:	461e      	mov	r6, r3
 8002164:	1e4b      	subs	r3, r1, #1
 8002166:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	460a      	mov	r2, r1
 800216e:	2300      	movs	r3, #0
 8002170:	4614      	mov	r4, r2
 8002172:	461d      	mov	r5, r3
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	00eb      	lsls	r3, r5, #3
 800217e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002182:	00e2      	lsls	r2, r4, #3
 8002184:	460a      	mov	r2, r1
 8002186:	2300      	movs	r3, #0
 8002188:	4690      	mov	r8, r2
 800218a:	4699      	mov	r9, r3
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002198:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800219c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021a0:	460b      	mov	r3, r1
 80021a2:	3307      	adds	r3, #7
 80021a4:	08db      	lsrs	r3, r3, #3
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	ebad 0d03 	sub.w	sp, sp, r3
 80021ac:	466b      	mov	r3, sp
 80021ae:	3300      	adds	r3, #0
 80021b0:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 80021b4:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	4b5a      	ldr	r3, [pc, #360]	; (8002324 <sendData+0x418>)
 80021bc:	681a      	ldr	r2, [r3, #0]
					memcpy(metaData, &startPadding, 4);
 80021be:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80021c2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	601a      	str	r2, [r3, #0]
					memcpy(metaData+4, &timerVal, 4);
 80021ca:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80021ce:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	3304      	adds	r3, #4
 80021d6:	4a54      	ldr	r2, [pc, #336]	; (8002328 <sendData+0x41c>)
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	601a      	str	r2, [r3, #0]
					memcpy(metaData+8, &devID, 4);
 80021dc:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80021e0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3308      	adds	r3, #8
 80021e8:	4a50      	ldr	r2, [pc, #320]	; (800232c <sendData+0x420>)
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	601a      	str	r2, [r3, #0]
					memcpy(metaData+12, GPS_latest_data, GPS_data_len);
 80021ee:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 80021f2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	330c      	adds	r3, #12
 80021fa:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 80021fe:	f102 0207 	add.w	r2, r2, #7
 8002202:	7812      	ldrb	r2, [r2, #0]
 8002204:	494a      	ldr	r1, [pc, #296]	; (8002330 <sendData+0x424>)
 8002206:	4618      	mov	r0, r3
 8002208:	f006 faf8 	bl	80087fc <memcpy>
					memcpy(metaData+12+GPS_data_len, &endMetaPadding, 4);
 800220c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002210:	f103 0307 	add.w	r3, r3, #7
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	330c      	adds	r3, #12
 8002218:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 800221c:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	4413      	add	r3, r2
 8002224:	4a43      	ldr	r2, [pc, #268]	; (8002334 <sendData+0x428>)
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	601a      	str	r2, [r3, #0]

					uint8_t sendBuf[SEND_LEN*2];
					memcpy(sendBuf, &circular_buf_full[tail_full], ((SEND_LEN)-tail_full)*2);
 800222a:	4b38      	ldr	r3, [pc, #224]	; (800230c <sendData+0x400>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4a37      	ldr	r2, [pc, #220]	; (8002310 <sendData+0x404>)
 8002232:	1899      	adds	r1, r3, r2
 8002234:	4b35      	ldr	r3, [pc, #212]	; (800230c <sendData+0x400>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f5c3 631f 	rsb	r3, r3, #2544	; 0x9f0
 800223c:	3306      	adds	r3, #6
 800223e:	005a      	lsls	r2, r3, #1
 8002240:	f107 0318 	add.w	r3, r7, #24
 8002244:	3b10      	subs	r3, #16
 8002246:	4618      	mov	r0, r3
 8002248:	f006 fad8 	bl	80087fc <memcpy>
					memcpy(&sendBuf[(SEND_LEN-tail_full)*2], circular_buf_full, tail_full*2);
 800224c:	4b2f      	ldr	r3, [pc, #188]	; (800230c <sendData+0x400>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f5c3 631f 	rsb	r3, r3, #2544	; 0x9f0
 8002254:	3306      	adds	r3, #6
 8002256:	005a      	lsls	r2, r3, #1
 8002258:	f107 0318 	add.w	r3, r7, #24
 800225c:	3b10      	subs	r3, #16
 800225e:	1898      	adds	r0, r3, r2
 8002260:	4b2a      	ldr	r3, [pc, #168]	; (800230c <sendData+0x400>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	461a      	mov	r2, r3
 8002268:	4929      	ldr	r1, [pc, #164]	; (8002310 <sendData+0x404>)
 800226a:	f006 fac7 	bl	80087fc <memcpy>

#if LORA_TRANSMIT
					uint8_t packet_res = lora_send_packet(&lora, metaData, 16+GPS_data_len);
 800226e:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002272:	f103 0307 	add.w	r3, r3, #7
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	3310      	adds	r3, #16
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8002282:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002286:	6819      	ldr	r1, [r3, #0]
 8002288:	482b      	ldr	r0, [pc, #172]	; (8002338 <sendData+0x42c>)
 800228a:	f7ff f98e 	bl	80015aa <lora_send_packet>
 800228e:	4603      	mov	r3, r0
 8002290:	461a      	mov	r2, r3
 8002292:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002296:	f103 0318 	add.w	r3, r3, #24
 800229a:	f6a3 53e1 	subw	r3, r3, #3553	; 0xde1
 800229e:	701a      	strb	r2, [r3, #0]

					if (packet_res != LORA_OK) {
 80022a0:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80022a4:	f103 0318 	add.w	r3, r3, #24
 80022a8:	f6a3 53e1 	subw	r3, r3, #3553	; 0xde1
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <sendData+0x3bc>
						HAL_UART_Transmit(&huart1, &packet_res, sizeof(packet_res), 1000);
 80022b2:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 80022b6:	f101 0117 	add.w	r1, r1, #23
 80022ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022be:	2201      	movs	r2, #1
 80022c0:	481e      	ldr	r0, [pc, #120]	; (800233c <sendData+0x430>)
 80022c2:	f005 f8c0 	bl	8007446 <HAL_UART_Transmit>
 80022c6:	e006      	b.n	80022d6 <sendData+0x3ca>
					}
					else {
						HAL_UART_Transmit(&huart1, transmission_success, sizeof(transmission_success), 1000);
 80022c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022cc:	2215      	movs	r2, #21
 80022ce:	491c      	ldr	r1, [pc, #112]	; (8002340 <sendData+0x434>)
 80022d0:	481a      	ldr	r0, [pc, #104]	; (800233c <sendData+0x430>)
 80022d2:	f005 f8b8 	bl	8007446 <HAL_UART_Transmit>
					}

					while(lora_is_transmitting(&lora)); // non-blocking delay
 80022d6:	bf00      	nop
 80022d8:	4817      	ldr	r0, [pc, #92]	; (8002338 <sendData+0x42c>)
 80022da:	f7ff f90e 	bl	80014fa <lora_is_transmitting>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f9      	bne.n	80022d8 <sendData+0x3cc>
					HAL_UART_Transmit(&huart1, (uint8_t*) sendBuf, SEND_LEN*2, 1000);
#endif

#if LORA_TRANSMIT

					for(int send_loop_cnt = 0; send_loop_cnt < ((SEND_LEN*2)/255 + ((SEND_LEN*2) % 255 != 0)); send_loop_cnt++){
 80022e4:	2300      	movs	r3, #0
 80022e6:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 80022ea:	f102 0208 	add.w	r2, r2, #8
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	e074      	b.n	80023dc <sendData+0x4d0>
 80022f2:	bf00      	nop
 80022f4:	2000003c 	.word	0x2000003c
 80022f8:	2000440c 	.word	0x2000440c
 80022fc:	20003354 	.word	0x20003354
 8002300:	20003330 	.word	0x20003330
 8002304:	20001f38 	.word	0x20001f38
 8002308:	20001f1c 	.word	0x20001f1c
 800230c:	2000332c 	.word	0x2000332c
 8002310:	20001f3c 	.word	0x20001f3c
 8002314:	20003334 	.word	0x20003334
 8002318:	20003356 	.word	0x20003356
 800231c:	20003358 	.word	0x20003358
 8002320:	20004408 	.word	0x20004408
 8002324:	20000004 	.word	0x20000004
 8002328:	20004c88 	.word	0x20004c88
 800232c:	20000000 	.word	0x20000000
 8002330:	200043c4 	.word	0x200043c4
 8002334:	20000008 	.word	0x20000008
 8002338:	2000335c 	.word	0x2000335c
 800233c:	20000254 	.word	0x20000254
 8002340:	20000024 	.word	0x20000024
						packet_res = lora_send_packet(&lora, sendBuf+(255*send_loop_cnt), 255);
 8002344:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002348:	f103 0308 	add.w	r3, r3, #8
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4613      	mov	r3, r2
 8002350:	021b      	lsls	r3, r3, #8
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	461a      	mov	r2, r3
 8002356:	f107 0318 	add.w	r3, r7, #24
 800235a:	3b10      	subs	r3, #16
 800235c:	4413      	add	r3, r2
 800235e:	22ff      	movs	r2, #255	; 0xff
 8002360:	4619      	mov	r1, r3
 8002362:	487a      	ldr	r0, [pc, #488]	; (800254c <sendData+0x640>)
 8002364:	f7ff f921 	bl	80015aa <lora_send_packet>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002370:	f103 0318 	add.w	r3, r3, #24
 8002374:	f6a3 53e1 	subw	r3, r3, #3553	; 0xde1
 8002378:	701a      	strb	r2, [r3, #0]
						if (packet_res != LORA_OK) {
 800237a:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800237e:	f103 0318 	add.w	r3, r3, #24
 8002382:	f6a3 53e1 	subw	r3, r3, #3553	; 0xde1
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <sendData+0x496>
							HAL_UART_Transmit(&huart1, &packet_res, sizeof(packet_res), 1000);
 800238c:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 8002390:	f101 0117 	add.w	r1, r1, #23
 8002394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002398:	2201      	movs	r2, #1
 800239a:	486d      	ldr	r0, [pc, #436]	; (8002550 <sendData+0x644>)
 800239c:	f005 f853 	bl	8007446 <HAL_UART_Transmit>
 80023a0:	e006      	b.n	80023b0 <sendData+0x4a4>
						}
						else {
							HAL_UART_Transmit(&huart1, transmission_success, sizeof(transmission_success), 1000);
 80023a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a6:	2215      	movs	r2, #21
 80023a8:	496a      	ldr	r1, [pc, #424]	; (8002554 <sendData+0x648>)
 80023aa:	4869      	ldr	r0, [pc, #420]	; (8002550 <sendData+0x644>)
 80023ac:	f005 f84b 	bl	8007446 <HAL_UART_Transmit>
						}
						HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_3);
 80023b0:	2108      	movs	r1, #8
 80023b2:	4869      	ldr	r0, [pc, #420]	; (8002558 <sendData+0x64c>)
 80023b4:	f001 fb91 	bl	8003ada <HAL_GPIO_TogglePin>
						while(lora_is_transmitting(&lora)); // non-blocking delay
 80023b8:	bf00      	nop
 80023ba:	4864      	ldr	r0, [pc, #400]	; (800254c <sendData+0x640>)
 80023bc:	f7ff f89d 	bl	80014fa <lora_is_transmitting>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f9      	bne.n	80023ba <sendData+0x4ae>
					for(int send_loop_cnt = 0; send_loop_cnt < ((SEND_LEN*2)/255 + ((SEND_LEN*2) % 255 != 0)); send_loop_cnt++){
 80023c6:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80023ca:	f103 0308 	add.w	r3, r3, #8
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3301      	adds	r3, #1
 80023d2:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 80023d6:	f102 0208 	add.w	r2, r2, #8
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80023e0:	f103 0308 	add.w	r3, r3, #8
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b13      	cmp	r3, #19
 80023e8:	ddac      	ble.n	8002344 <sendData+0x438>
					}

					packet_res = lora_send_packet(&lora, (uint8_t *) &endPadding, 4);
 80023ea:	2204      	movs	r2, #4
 80023ec:	495b      	ldr	r1, [pc, #364]	; (800255c <sendData+0x650>)
 80023ee:	4857      	ldr	r0, [pc, #348]	; (800254c <sendData+0x640>)
 80023f0:	f7ff f8db 	bl	80015aa <lora_send_packet>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461a      	mov	r2, r3
 80023f8:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80023fc:	f103 0318 	add.w	r3, r3, #24
 8002400:	f6a3 53e1 	subw	r3, r3, #3553	; 0xde1
 8002404:	701a      	strb	r2, [r3, #0]
					if (packet_res != LORA_OK) {
 8002406:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800240a:	f103 0318 	add.w	r3, r3, #24
 800240e:	f6a3 53e1 	subw	r3, r3, #3553	; 0xde1
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <sendData+0x522>
						HAL_UART_Transmit(&huart1, &packet_res, sizeof(packet_res), 1000);
 8002418:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800241c:	f101 0117 	add.w	r1, r1, #23
 8002420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002424:	2201      	movs	r2, #1
 8002426:	484a      	ldr	r0, [pc, #296]	; (8002550 <sendData+0x644>)
 8002428:	f005 f80d 	bl	8007446 <HAL_UART_Transmit>
 800242c:	e006      	b.n	800243c <sendData+0x530>
					}
					else {
						HAL_UART_Transmit(&huart1, transmission_success, sizeof(transmission_success), 1000);
 800242e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002432:	2215      	movs	r2, #21
 8002434:	4947      	ldr	r1, [pc, #284]	; (8002554 <sendData+0x648>)
 8002436:	4846      	ldr	r0, [pc, #280]	; (8002550 <sendData+0x644>)
 8002438:	f005 f805 	bl	8007446 <HAL_UART_Transmit>
					}
#endif

					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 800243c:	2200      	movs	r2, #0
 800243e:	2108      	movs	r1, #8
 8002440:	4845      	ldr	r0, [pc, #276]	; (8002558 <sendData+0x64c>)
 8002442:	f001 fb31 	bl	8003aa8 <HAL_GPIO_WritePin>
					done = 1;
 8002446:	4b46      	ldr	r3, [pc, #280]	; (8002560 <sendData+0x654>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	46b5      	mov	sp, r6
				}
			}

			if ((moving_avg >= MOVING_AVG_THRESHOLD) && (counter == 0)){
 800244e:	4b45      	ldr	r3, [pc, #276]	; (8002564 <sendData+0x658>)
 8002450:	edd3 7a00 	vldr	s15, [r3]
 8002454:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002568 <sendData+0x65c>
 8002458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800245c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002460:	db16      	blt.n	8002490 <sendData+0x584>
 8002462:	4b42      	ldr	r3, [pc, #264]	; (800256c <sendData+0x660>)
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d112      	bne.n	8002490 <sendData+0x584>
				timerVal = TIM2->CNT;
 800246a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	4a3f      	ldr	r2, [pc, #252]	; (8002570 <sendData+0x664>)
 8002472:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8002474:	2200      	movs	r2, #0
 8002476:	2108      	movs	r1, #8
 8002478:	4837      	ldr	r0, [pc, #220]	; (8002558 <sendData+0x64c>)
 800247a:	f001 fb15 	bl	8003aa8 <HAL_GPIO_WritePin>
				counter += 1;
 800247e:	4b3b      	ldr	r3, [pc, #236]	; (800256c <sendData+0x660>)
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	3301      	adds	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	4b39      	ldr	r3, [pc, #228]	; (800256c <sendData+0x660>)
 8002488:	801a      	strh	r2, [r3, #0]
				done = 0;
 800248a:	4b35      	ldr	r3, [pc, #212]	; (8002560 <sendData+0x654>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
			}

			tail_mov = (tail_mov + 1) % (MOVING_AVG_LEN);
 8002490:	4b38      	ldr	r3, [pc, #224]	; (8002574 <sendData+0x668>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	1c59      	adds	r1, r3, #1
 8002496:	4b38      	ldr	r3, [pc, #224]	; (8002578 <sendData+0x66c>)
 8002498:	fba3 2301 	umull	r2, r3, r3, r1
 800249c:	089a      	lsrs	r2, r3, #2
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	1aca      	subs	r2, r1, r3
 80024a6:	4b33      	ldr	r3, [pc, #204]	; (8002574 <sendData+0x668>)
 80024a8:	601a      	str	r2, [r3, #0]
			head_mov = (head_mov + 1) % (MOVING_AVG_LEN);
 80024aa:	4b34      	ldr	r3, [pc, #208]	; (800257c <sendData+0x670>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	1c59      	adds	r1, r3, #1
 80024b0:	4b31      	ldr	r3, [pc, #196]	; (8002578 <sendData+0x66c>)
 80024b2:	fba3 2301 	umull	r2, r3, r3, r1
 80024b6:	089a      	lsrs	r2, r3, #2
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	1aca      	subs	r2, r1, r3
 80024c0:	4b2e      	ldr	r3, [pc, #184]	; (800257c <sendData+0x670>)
 80024c2:	601a      	str	r2, [r3, #0]

			tail_full = (tail_full + 1) % (SEND_LEN);
 80024c4:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <sendData+0x674>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	0853      	lsrs	r3, r2, #1
 80024cc:	492d      	ldr	r1, [pc, #180]	; (8002584 <sendData+0x678>)
 80024ce:	fba1 1303 	umull	r1, r3, r1, r3
 80024d2:	0a9b      	lsrs	r3, r3, #10
 80024d4:	f640 11f6 	movw	r1, #2550	; 0x9f6
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	4a28      	ldr	r2, [pc, #160]	; (8002580 <sendData+0x674>)
 80024e0:	6013      	str	r3, [r2, #0]
			head_full = (head_full + 1) % (SEND_LEN);
 80024e2:	4b29      	ldr	r3, [pc, #164]	; (8002588 <sendData+0x67c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	0853      	lsrs	r3, r2, #1
 80024ea:	4926      	ldr	r1, [pc, #152]	; (8002584 <sendData+0x678>)
 80024ec:	fba1 1303 	umull	r1, r3, r1, r3
 80024f0:	0a9b      	lsrs	r3, r3, #10
 80024f2:	f640 11f6 	movw	r1, #2550	; 0x9f6
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	4a22      	ldr	r2, [pc, #136]	; (8002588 <sendData+0x67c>)
 80024fe:	6013      	str	r3, [r2, #0]

			data_in += 2;
 8002500:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002504:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002508:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 800250c:	f5a2 72ea 	sub.w	r2, r2, #468	; 0x1d4
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	3208      	adds	r2, #8
 8002514:	601a      	str	r2, [r3, #0]
		for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8002516:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800251a:	f103 0312 	add.w	r3, r3, #18
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002526:	f102 0212 	add.w	r2, r2, #18
 800252a:	8013      	strh	r3, [r2, #0]
 800252c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8002530:	f103 0312 	add.w	r3, r3, #18
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 800253a:	f4ff ad5f 	bcc.w	8001ffc <sendData+0xf0>
		}


	}
}
 800253e:	bf00      	nop
 8002540:	f507 5707 	add.w	r7, r7, #8640	; 0x21c0
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800254c:	2000335c 	.word	0x2000335c
 8002550:	20000254 	.word	0x20000254
 8002554:	20000024 	.word	0x20000024
 8002558:	40021400 	.word	0x40021400
 800255c:	2000000c 	.word	0x2000000c
 8002560:	20003358 	.word	0x20003358
 8002564:	20003334 	.word	0x20003334
 8002568:	42c80000 	.word	0x42c80000
 800256c:	20003356 	.word	0x20003356
 8002570:	20004c88 	.word	0x20004c88
 8002574:	20001f38 	.word	0x20001f38
 8002578:	cccccccd 	.word	0xcccccccd
 800257c:	20001f34 	.word	0x20001f34
 8002580:	2000332c 	.word	0x2000332c
 8002584:	cd9a6735 	.word	0xcd9a6735
 8002588:	20003328 	.word	0x20003328

0800258c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002590:	b672      	cpsid	i
}
 8002592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002594:	e7fe      	b.n	8002594 <Error_Handler+0x8>
	...

08002598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <HAL_MspInit+0x4c>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a0f      	ldr	r2, [pc, #60]	; (80025e4 <HAL_MspInit+0x4c>)
 80025a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <HAL_MspInit+0x4c>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	603b      	str	r3, [r7, #0]
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_MspInit+0x4c>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	4a08      	ldr	r2, [pc, #32]	; (80025e4 <HAL_MspInit+0x4c>)
 80025c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_MspInit+0x4c>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800

080025e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	; 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a19      	ldr	r2, [pc, #100]	; (800266c <HAL_SPI_MspInit+0x84>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d12b      	bne.n	8002662 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	4b18      	ldr	r3, [pc, #96]	; (8002670 <HAL_SPI_MspInit+0x88>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	4a17      	ldr	r2, [pc, #92]	; (8002670 <HAL_SPI_MspInit+0x88>)
 8002614:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002618:	6453      	str	r3, [r2, #68]	; 0x44
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_SPI_MspInit+0x88>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_SPI_MspInit+0x88>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a10      	ldr	r2, [pc, #64]	; (8002670 <HAL_SPI_MspInit+0x88>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <HAL_SPI_MspInit+0x88>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002642:	23e0      	movs	r3, #224	; 0xe0
 8002644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264e:	2303      	movs	r3, #3
 8002650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002652:	2305      	movs	r3, #5
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002656:	f107 0314 	add.w	r3, r7, #20
 800265a:	4619      	mov	r1, r3
 800265c:	4805      	ldr	r0, [pc, #20]	; (8002674 <HAL_SPI_MspInit+0x8c>)
 800265e:	f001 f88f 	bl	8003780 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002662:	bf00      	nop
 8002664:	3728      	adds	r7, #40	; 0x28
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40013000 	.word	0x40013000
 8002670:	40023800 	.word	0x40023800
 8002674:	40020000 	.word	0x40020000

08002678 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	f107 0314 	add.w	r3, r7, #20
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002698:	d133      	bne.n	8002702 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_TIM_IC_MspInit+0x94>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a1a      	ldr	r2, [pc, #104]	; (800270c <HAL_TIM_IC_MspInit+0x94>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40
 80026aa:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_TIM_IC_MspInit+0x94>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <HAL_TIM_IC_MspInit+0x94>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4a13      	ldr	r2, [pc, #76]	; (800270c <HAL_TIM_IC_MspInit+0x94>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <HAL_TIM_IC_MspInit+0x94>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026d2:	2304      	movs	r3, #4
 80026d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026e2:	2301      	movs	r3, #1
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	4619      	mov	r1, r3
 80026ec:	4808      	ldr	r0, [pc, #32]	; (8002710 <HAL_TIM_IC_MspInit+0x98>)
 80026ee:	f001 f847 	bl	8003780 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026f2:	2200      	movs	r2, #0
 80026f4:	2100      	movs	r1, #0
 80026f6:	201c      	movs	r0, #28
 80026f8:	f000 fc09 	bl	8002f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026fc:	201c      	movs	r0, #28
 80026fe:	f000 fc22 	bl	8002f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002702:	bf00      	nop
 8002704:	3728      	adds	r7, #40	; 0x28
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800
 8002710:	40020000 	.word	0x40020000

08002714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	; 0x30
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	f107 031c 	add.w	r3, r7, #28
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a74      	ldr	r2, [pc, #464]	; (8002904 <HAL_UART_MspInit+0x1f0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d15b      	bne.n	80027ee <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	4b73      	ldr	r3, [pc, #460]	; (8002908 <HAL_UART_MspInit+0x1f4>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	4a72      	ldr	r2, [pc, #456]	; (8002908 <HAL_UART_MspInit+0x1f4>)
 8002740:	f043 0310 	orr.w	r3, r3, #16
 8002744:	6453      	str	r3, [r2, #68]	; 0x44
 8002746:	4b70      	ldr	r3, [pc, #448]	; (8002908 <HAL_UART_MspInit+0x1f4>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	61bb      	str	r3, [r7, #24]
 8002750:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	4b6c      	ldr	r3, [pc, #432]	; (8002908 <HAL_UART_MspInit+0x1f4>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a6b      	ldr	r2, [pc, #428]	; (8002908 <HAL_UART_MspInit+0x1f4>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b69      	ldr	r3, [pc, #420]	; (8002908 <HAL_UART_MspInit+0x1f4>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800276e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277c:	2303      	movs	r3, #3
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002780:	2307      	movs	r3, #7
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	4619      	mov	r1, r3
 800278a:	4860      	ldr	r0, [pc, #384]	; (800290c <HAL_UART_MspInit+0x1f8>)
 800278c:	f000 fff8 	bl	8003780 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002790:	4b5f      	ldr	r3, [pc, #380]	; (8002910 <HAL_UART_MspInit+0x1fc>)
 8002792:	4a60      	ldr	r2, [pc, #384]	; (8002914 <HAL_UART_MspInit+0x200>)
 8002794:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002796:	4b5e      	ldr	r3, [pc, #376]	; (8002910 <HAL_UART_MspInit+0x1fc>)
 8002798:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800279c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800279e:	4b5c      	ldr	r3, [pc, #368]	; (8002910 <HAL_UART_MspInit+0x1fc>)
 80027a0:	2240      	movs	r2, #64	; 0x40
 80027a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027a4:	4b5a      	ldr	r3, [pc, #360]	; (8002910 <HAL_UART_MspInit+0x1fc>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027aa:	4b59      	ldr	r3, [pc, #356]	; (8002910 <HAL_UART_MspInit+0x1fc>)
 80027ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027b2:	4b57      	ldr	r3, [pc, #348]	; (8002910 <HAL_UART_MspInit+0x1fc>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027b8:	4b55      	ldr	r3, [pc, #340]	; (8002910 <HAL_UART_MspInit+0x1fc>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80027be:	4b54      	ldr	r3, [pc, #336]	; (8002910 <HAL_UART_MspInit+0x1fc>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027c4:	4b52      	ldr	r3, [pc, #328]	; (8002910 <HAL_UART_MspInit+0x1fc>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027ca:	4b51      	ldr	r3, [pc, #324]	; (8002910 <HAL_UART_MspInit+0x1fc>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80027d0:	484f      	ldr	r0, [pc, #316]	; (8002910 <HAL_UART_MspInit+0x1fc>)
 80027d2:	f000 fbd3 	bl	8002f7c <HAL_DMA_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80027dc:	f7ff fed6 	bl	800258c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a4b      	ldr	r2, [pc, #300]	; (8002910 <HAL_UART_MspInit+0x1fc>)
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34
 80027e6:	4a4a      	ldr	r2, [pc, #296]	; (8002910 <HAL_UART_MspInit+0x1fc>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027ec:	e086      	b.n	80028fc <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a49      	ldr	r2, [pc, #292]	; (8002918 <HAL_UART_MspInit+0x204>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	f040 8081 	bne.w	80028fc <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	4b42      	ldr	r3, [pc, #264]	; (8002908 <HAL_UART_MspInit+0x1f4>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4a41      	ldr	r2, [pc, #260]	; (8002908 <HAL_UART_MspInit+0x1f4>)
 8002804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
 800280a:	4b3f      	ldr	r3, [pc, #252]	; (8002908 <HAL_UART_MspInit+0x1f4>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <HAL_UART_MspInit+0x1f4>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a3a      	ldr	r2, [pc, #232]	; (8002908 <HAL_UART_MspInit+0x1f4>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b38      	ldr	r3, [pc, #224]	; (8002908 <HAL_UART_MspInit+0x1f4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	4b34      	ldr	r3, [pc, #208]	; (8002908 <HAL_UART_MspInit+0x1f4>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a33      	ldr	r2, [pc, #204]	; (8002908 <HAL_UART_MspInit+0x1f4>)
 800283c:	f043 0308 	orr.w	r3, r3, #8
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b31      	ldr	r3, [pc, #196]	; (8002908 <HAL_UART_MspInit+0x1f4>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800284e:	2308      	movs	r3, #8
 8002850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	2302      	movs	r3, #2
 8002854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285a:	2303      	movs	r3, #3
 800285c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800285e:	2307      	movs	r3, #7
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002862:	f107 031c 	add.w	r3, r7, #28
 8002866:	4619      	mov	r1, r3
 8002868:	4828      	ldr	r0, [pc, #160]	; (800290c <HAL_UART_MspInit+0x1f8>)
 800286a:	f000 ff89 	bl	8003780 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800286e:	2320      	movs	r3, #32
 8002870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002872:	2302      	movs	r3, #2
 8002874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287a:	2303      	movs	r3, #3
 800287c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800287e:	2307      	movs	r3, #7
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002882:	f107 031c 	add.w	r3, r7, #28
 8002886:	4619      	mov	r1, r3
 8002888:	4824      	ldr	r0, [pc, #144]	; (800291c <HAL_UART_MspInit+0x208>)
 800288a:	f000 ff79 	bl	8003780 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_UART_MspInit+0x20c>)
 8002890:	4a24      	ldr	r2, [pc, #144]	; (8002924 <HAL_UART_MspInit+0x210>)
 8002892:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <HAL_UART_MspInit+0x20c>)
 8002896:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800289a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800289c:	4b20      	ldr	r3, [pc, #128]	; (8002920 <HAL_UART_MspInit+0x20c>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a2:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <HAL_UART_MspInit+0x20c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028a8:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <HAL_UART_MspInit+0x20c>)
 80028aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_UART_MspInit+0x20c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028b6:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <HAL_UART_MspInit+0x20c>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80028bc:	4b18      	ldr	r3, [pc, #96]	; (8002920 <HAL_UART_MspInit+0x20c>)
 80028be:	2200      	movs	r2, #0
 80028c0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80028c2:	4b17      	ldr	r3, [pc, #92]	; (8002920 <HAL_UART_MspInit+0x20c>)
 80028c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028c8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ca:	4b15      	ldr	r3, [pc, #84]	; (8002920 <HAL_UART_MspInit+0x20c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80028d0:	4813      	ldr	r0, [pc, #76]	; (8002920 <HAL_UART_MspInit+0x20c>)
 80028d2:	f000 fb53 	bl	8002f7c <HAL_DMA_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 80028dc:	f7ff fe56 	bl	800258c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a0f      	ldr	r2, [pc, #60]	; (8002920 <HAL_UART_MspInit+0x20c>)
 80028e4:	639a      	str	r2, [r3, #56]	; 0x38
 80028e6:	4a0e      	ldr	r2, [pc, #56]	; (8002920 <HAL_UART_MspInit+0x20c>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80028ec:	2200      	movs	r2, #0
 80028ee:	2100      	movs	r1, #0
 80028f0:	2026      	movs	r0, #38	; 0x26
 80028f2:	f000 fb0c 	bl	8002f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028f6:	2026      	movs	r0, #38	; 0x26
 80028f8:	f000 fb25 	bl	8002f46 <HAL_NVIC_EnableIRQ>
}
 80028fc:	bf00      	nop
 80028fe:	3730      	adds	r7, #48	; 0x30
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40011000 	.word	0x40011000
 8002908:	40023800 	.word	0x40023800
 800290c:	40020000 	.word	0x40020000
 8002910:	200002dc 	.word	0x200002dc
 8002914:	400264b8 	.word	0x400264b8
 8002918:	40004400 	.word	0x40004400
 800291c:	40020c00 	.word	0x40020c00
 8002920:	2000033c 	.word	0x2000033c
 8002924:	40026088 	.word	0x40026088

08002928 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b0a0      	sub	sp, #128	; 0x80
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002930:	f107 0310 	add.w	r3, r7, #16
 8002934:	225c      	movs	r2, #92	; 0x5c
 8002936:	2100      	movs	r1, #0
 8002938:	4618      	mov	r0, r3
 800293a:	f005 ff6d 	bl	8008818 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a4c      	ldr	r2, [pc, #304]	; (8002a74 <HAL_SAI_MspInit+0x14c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	f040 8090 	bne.w	8002a6a <HAL_SAI_MspInit+0x142>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800294a:	2304      	movs	r3, #4
 800294c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 16;
 800294e:	2310      	movs	r3, #16
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002952:	23c0      	movs	r3, #192	; 0xc0
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002956:	2302      	movs	r3, #2
 8002958:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800295a:	2302      	movs	r3, #2
 800295c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800295e:	2301      	movs	r3, #1
 8002960:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8002962:	2300      	movs	r3, #0
 8002964:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002966:	f107 0310 	add.w	r3, r7, #16
 800296a:	4618      	mov	r0, r3
 800296c:	f001 fa3a 	bl	8003de4 <HAL_RCCEx_PeriphCLKConfig>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_SAI_MspInit+0x52>
    {
      Error_Handler();
 8002976:	f7ff fe09 	bl	800258c <Error_Handler>
    }

      if (SAI1_client == 0)
 800297a:	4b3f      	ldr	r3, [pc, #252]	; (8002a78 <HAL_SAI_MspInit+0x150>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <HAL_SAI_MspInit+0x76>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b3d      	ldr	r3, [pc, #244]	; (8002a7c <HAL_SAI_MspInit+0x154>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	4a3c      	ldr	r2, [pc, #240]	; (8002a7c <HAL_SAI_MspInit+0x154>)
 800298c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002990:	6453      	str	r3, [r2, #68]	; 0x44
 8002992:	4b3a      	ldr	r3, [pc, #232]	; (8002a7c <HAL_SAI_MspInit+0x154>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800299e:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <HAL_SAI_MspInit+0x150>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	3301      	adds	r3, #1
 80029a4:	4a34      	ldr	r2, [pc, #208]	; (8002a78 <HAL_SAI_MspInit+0x150>)
 80029a6:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029a8:	2308      	movs	r3, #8
 80029aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ac:	2302      	movs	r3, #2
 80029ae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	2300      	movs	r3, #0
 80029b6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80029b8:	2306      	movs	r3, #6
 80029ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029c0:	4619      	mov	r1, r3
 80029c2:	482f      	ldr	r0, [pc, #188]	; (8002a80 <HAL_SAI_MspInit+0x158>)
 80029c4:	f000 fedc 	bl	8003780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d6:	2300      	movs	r3, #0
 80029d8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80029da:	2306      	movs	r3, #6
 80029dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029e2:	4619      	mov	r1, r3
 80029e4:	4827      	ldr	r0, [pc, #156]	; (8002a84 <HAL_SAI_MspInit+0x15c>)
 80029e6:	f000 fecb 	bl	8003780 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 80029ea:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 80029ec:	4a27      	ldr	r2, [pc, #156]	; (8002a8c <HAL_SAI_MspInit+0x164>)
 80029ee:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 80029f0:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 80029f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029f6:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029f8:	4b23      	ldr	r3, [pc, #140]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8002a04:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 8002a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a0a:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 8002a0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a12:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a14:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 8002a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a1a:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002a1c:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 8002a1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a22:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8002a24:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a2a:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a30:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 8002a32:	2203      	movs	r2, #3
 8002a34:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8002a36:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002a3c:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002a42:	4811      	ldr	r0, [pc, #68]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 8002a44:	f000 fa9a 	bl	8002f7c <HAL_DMA_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_SAI_MspInit+0x12a>
    {
      Error_Handler();
 8002a4e:	f7ff fd9d 	bl	800258c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 8002a56:	675a      	str	r2, [r3, #116]	; 0x74
 8002a58:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 8002a62:	671a      	str	r2, [r3, #112]	; 0x70
 8002a64:	4a08      	ldr	r2, [pc, #32]	; (8002a88 <HAL_SAI_MspInit+0x160>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8002a6a:	bf00      	nop
 8002a6c:	3780      	adds	r7, #128	; 0x80
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40015824 	.word	0x40015824
 8002a78:	20004c8c 	.word	0x20004c8c
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40021400 	.word	0x40021400
 8002a88:	20000154 	.word	0x20000154
 8002a8c:	40026470 	.word	0x40026470

08002a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <NMI_Handler+0x4>

08002a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a9a:	e7fe      	b.n	8002a9a <HardFault_Handler+0x4>

08002a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <MemManage_Handler+0x4>

08002aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aa6:	e7fe      	b.n	8002aa6 <BusFault_Handler+0x4>

08002aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <UsageFault_Handler+0x4>

08002aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002adc:	f000 f8f8 	bl	8002cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae0:	bf00      	nop
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <DMA1_Stream5_IRQHandler+0x10>)
 8002aea:	f000 fbdf 	bl	80032ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	2000033c 	.word	0x2000033c

08002af8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002afc:	4802      	ldr	r0, [pc, #8]	; (8002b08 <TIM2_IRQHandler+0x10>)
 8002afe:	f004 f809 	bl	8006b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	2000020c 	.word	0x2000020c

08002b0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <USART2_IRQHandler+0x10>)
 8002b12:	f004 fd5b 	bl	80075cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000298 	.word	0x20000298

08002b20 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <DMA2_Stream4_IRQHandler+0x10>)
 8002b26:	f000 fbc1 	bl	80032ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000154 	.word	0x20000154

08002b34 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002b38:	4802      	ldr	r0, [pc, #8]	; (8002b44 <DMA2_Stream7_IRQHandler+0x10>)
 8002b3a:	f000 fbb7 	bl	80032ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200002dc 	.word	0x200002dc

08002b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b50:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <_sbrk+0x5c>)
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <_sbrk+0x60>)
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b5c:	4b13      	ldr	r3, [pc, #76]	; (8002bac <_sbrk+0x64>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d102      	bne.n	8002b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <_sbrk+0x64>)
 8002b66:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <_sbrk+0x68>)
 8002b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <_sbrk+0x64>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d207      	bcs.n	8002b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b78:	f005 fe16 	bl	80087a8 <__errno>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	220c      	movs	r2, #12
 8002b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b86:	e009      	b.n	8002b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b88:	4b08      	ldr	r3, [pc, #32]	; (8002bac <_sbrk+0x64>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b8e:	4b07      	ldr	r3, [pc, #28]	; (8002bac <_sbrk+0x64>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	4a05      	ldr	r2, [pc, #20]	; (8002bac <_sbrk+0x64>)
 8002b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20020000 	.word	0x20020000
 8002ba8:	00000400 	.word	0x00000400
 8002bac:	20004c90 	.word	0x20004c90
 8002bb0:	20004ca8 	.word	0x20004ca8

08002bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <SystemInit+0x20>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbe:	4a05      	ldr	r2, [pc, #20]	; (8002bd4 <SystemInit+0x20>)
 8002bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bdc:	480d      	ldr	r0, [pc, #52]	; (8002c14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bde:	490e      	ldr	r1, [pc, #56]	; (8002c18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002be0:	4a0e      	ldr	r2, [pc, #56]	; (8002c1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002be4:	e002      	b.n	8002bec <LoopCopyDataInit>

08002be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bea:	3304      	adds	r3, #4

08002bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bf0:	d3f9      	bcc.n	8002be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bf2:	4a0b      	ldr	r2, [pc, #44]	; (8002c20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bf4:	4c0b      	ldr	r4, [pc, #44]	; (8002c24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bf8:	e001      	b.n	8002bfe <LoopFillZerobss>

08002bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bfc:	3204      	adds	r2, #4

08002bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c00:	d3fb      	bcc.n	8002bfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c02:	f7ff ffd7 	bl	8002bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c06:	f005 fdd5 	bl	80087b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c0a:	f7fe fdd1 	bl	80017b0 <main>
  bx  lr    
 8002c0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c18:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002c1c:	080093ec 	.word	0x080093ec
  ldr r2, =_sbss
 8002c20:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002c24:	20004ca8 	.word	0x20004ca8

08002c28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c28:	e7fe      	b.n	8002c28 <ADC_IRQHandler>
	...

08002c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <HAL_Init+0x40>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0d      	ldr	r2, [pc, #52]	; (8002c6c <HAL_Init+0x40>)
 8002c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <HAL_Init+0x40>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0a      	ldr	r2, [pc, #40]	; (8002c6c <HAL_Init+0x40>)
 8002c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <HAL_Init+0x40>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a07      	ldr	r2, [pc, #28]	; (8002c6c <HAL_Init+0x40>)
 8002c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c54:	2003      	movs	r0, #3
 8002c56:	f000 f94f 	bl	8002ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c5a:	200f      	movs	r0, #15
 8002c5c:	f000 f808 	bl	8002c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c60:	f7ff fc9a 	bl	8002598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40023c00 	.word	0x40023c00

08002c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c78:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <HAL_InitTick+0x54>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_InitTick+0x58>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	4619      	mov	r1, r3
 8002c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f967 	bl	8002f62 <HAL_SYSTICK_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e00e      	b.n	8002cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b0f      	cmp	r3, #15
 8002ca2:	d80a      	bhi.n	8002cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cac:	f000 f92f 	bl	8002f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cb0:	4a06      	ldr	r2, [pc, #24]	; (8002ccc <HAL_InitTick+0x5c>)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e000      	b.n	8002cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20000040 	.word	0x20000040
 8002cc8:	20000048 	.word	0x20000048
 8002ccc:	20000044 	.word	0x20000044

08002cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_IncTick+0x20>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_IncTick+0x24>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <HAL_IncTick+0x24>)
 8002ce2:	6013      	str	r3, [r2, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000048 	.word	0x20000048
 8002cf4:	20004c94 	.word	0x20004c94

08002cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <HAL_GetTick+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20004c94 	.word	0x20004c94

08002d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d18:	f7ff ffee 	bl	8002cf8 <HAL_GetTick>
 8002d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d28:	d005      	beq.n	8002d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_Delay+0x44>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d36:	bf00      	nop
 8002d38:	f7ff ffde 	bl	8002cf8 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d8f7      	bhi.n	8002d38 <HAL_Delay+0x28>
  {
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000048 	.word	0x20000048

08002d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d74:	4013      	ands	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8a:	4a04      	ldr	r2, [pc, #16]	; (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	60d3      	str	r3, [r2, #12]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <__NVIC_GetPriorityGrouping+0x18>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	f003 0307 	and.w	r3, r3, #7
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	db0b      	blt.n	8002de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	f003 021f 	and.w	r2, r3, #31
 8002dd4:	4907      	ldr	r1, [pc, #28]	; (8002df4 <__NVIC_EnableIRQ+0x38>)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	2001      	movs	r0, #1
 8002dde:	fa00 f202 	lsl.w	r2, r0, r2
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000e100 	.word	0xe000e100

08002df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	6039      	str	r1, [r7, #0]
 8002e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	db0a      	blt.n	8002e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	490c      	ldr	r1, [pc, #48]	; (8002e44 <__NVIC_SetPriority+0x4c>)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	0112      	lsls	r2, r2, #4
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e20:	e00a      	b.n	8002e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	4908      	ldr	r1, [pc, #32]	; (8002e48 <__NVIC_SetPriority+0x50>)
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	3b04      	subs	r3, #4
 8002e30:	0112      	lsls	r2, r2, #4
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	440b      	add	r3, r1
 8002e36:	761a      	strb	r2, [r3, #24]
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000e100 	.word	0xe000e100
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b089      	sub	sp, #36	; 0x24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f1c3 0307 	rsb	r3, r3, #7
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	bf28      	it	cs
 8002e6a:	2304      	movcs	r3, #4
 8002e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3304      	adds	r3, #4
 8002e72:	2b06      	cmp	r3, #6
 8002e74:	d902      	bls.n	8002e7c <NVIC_EncodePriority+0x30>
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3b03      	subs	r3, #3
 8002e7a:	e000      	b.n	8002e7e <NVIC_EncodePriority+0x32>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43da      	mvns	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	401a      	ands	r2, r3
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	43d9      	mvns	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea4:	4313      	orrs	r3, r2
         );
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3724      	adds	r7, #36	; 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ec4:	d301      	bcc.n	8002eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e00f      	b.n	8002eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <SysTick_Config+0x40>)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ed2:	210f      	movs	r1, #15
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ed8:	f7ff ff8e 	bl	8002df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <SysTick_Config+0x40>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ee2:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <SysTick_Config+0x40>)
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	e000e010 	.word	0xe000e010

08002ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff ff29 	bl	8002d58 <__NVIC_SetPriorityGrouping>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b086      	sub	sp, #24
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	4603      	mov	r3, r0
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
 8002f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f20:	f7ff ff3e 	bl	8002da0 <__NVIC_GetPriorityGrouping>
 8002f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	6978      	ldr	r0, [r7, #20]
 8002f2c:	f7ff ff8e 	bl	8002e4c <NVIC_EncodePriority>
 8002f30:	4602      	mov	r2, r0
 8002f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f36:	4611      	mov	r1, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff5d 	bl	8002df8 <__NVIC_SetPriority>
}
 8002f3e:	bf00      	nop
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff31 	bl	8002dbc <__NVIC_EnableIRQ>
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff ffa2 	bl	8002eb4 <SysTick_Config>
 8002f70:	4603      	mov	r3, r0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f88:	f7ff feb6 	bl	8002cf8 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e099      	b.n	80030cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0201 	bic.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fb8:	e00f      	b.n	8002fda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fba:	f7ff fe9d 	bl	8002cf8 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b05      	cmp	r3, #5
 8002fc6:	d908      	bls.n	8002fda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e078      	b.n	80030cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e8      	bne.n	8002fba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	4b38      	ldr	r3, [pc, #224]	; (80030d4 <HAL_DMA_Init+0x158>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003006:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003012:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800301e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	2b04      	cmp	r3, #4
 8003032:	d107      	bne.n	8003044 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	4313      	orrs	r3, r2
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f023 0307 	bic.w	r3, r3, #7
 800305a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	2b04      	cmp	r3, #4
 800306c:	d117      	bne.n	800309e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00e      	beq.n	800309e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fb01 	bl	8003688 <DMA_CheckFifoParam>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2240      	movs	r2, #64	; 0x40
 8003090:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800309a:	2301      	movs	r3, #1
 800309c:	e016      	b.n	80030cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fab8 	bl	800361c <DMA_CalcBaseAndBitshift>
 80030ac:	4603      	mov	r3, r0
 80030ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b4:	223f      	movs	r2, #63	; 0x3f
 80030b6:	409a      	lsls	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	f010803f 	.word	0xf010803f

080030d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_DMA_Start_IT+0x26>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e040      	b.n	8003180 <HAL_DMA_Start_IT+0xa8>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d12f      	bne.n	8003172 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2202      	movs	r2, #2
 8003116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 fa4a 	bl	80035c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003130:	223f      	movs	r2, #63	; 0x3f
 8003132:	409a      	lsls	r2, r3
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0216 	orr.w	r2, r2, #22
 8003146:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0208 	orr.w	r2, r2, #8
 800315e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	e005      	b.n	800317e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800317a:	2302      	movs	r3, #2
 800317c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800317e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003194:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003196:	f7ff fdaf 	bl	8002cf8 <HAL_GetTick>
 800319a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d008      	beq.n	80031ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2280      	movs	r2, #128	; 0x80
 80031ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e052      	b.n	8003260 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0216 	bic.w	r2, r2, #22
 80031c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695a      	ldr	r2, [r3, #20]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d103      	bne.n	80031ea <HAL_DMA_Abort+0x62>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0208 	bic.w	r2, r2, #8
 80031f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0201 	bic.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800320a:	e013      	b.n	8003234 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800320c:	f7ff fd74 	bl	8002cf8 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b05      	cmp	r3, #5
 8003218:	d90c      	bls.n	8003234 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2203      	movs	r2, #3
 8003224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e015      	b.n	8003260 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1e4      	bne.n	800320c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	223f      	movs	r2, #63	; 0x3f
 8003248:	409a      	lsls	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d004      	beq.n	8003286 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2280      	movs	r2, #128	; 0x80
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e00c      	b.n	80032a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2205      	movs	r2, #5
 800328a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0201 	bic.w	r2, r2, #1
 800329c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032b8:	4b8e      	ldr	r3, [pc, #568]	; (80034f4 <HAL_DMA_IRQHandler+0x248>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a8e      	ldr	r2, [pc, #568]	; (80034f8 <HAL_DMA_IRQHandler+0x24c>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	0a9b      	lsrs	r3, r3, #10
 80032c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	2208      	movs	r2, #8
 80032d8:	409a      	lsls	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d01a      	beq.n	8003318 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d013      	beq.n	8003318 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0204 	bic.w	r2, r2, #4
 80032fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	2208      	movs	r2, #8
 8003306:	409a      	lsls	r2, r3
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	f043 0201 	orr.w	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	2201      	movs	r2, #1
 800331e:	409a      	lsls	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d012      	beq.n	800334e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	2201      	movs	r2, #1
 800333c:	409a      	lsls	r2, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	f043 0202 	orr.w	r2, r3, #2
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003352:	2204      	movs	r2, #4
 8003354:	409a      	lsls	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4013      	ands	r3, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d012      	beq.n	8003384 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00b      	beq.n	8003384 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003370:	2204      	movs	r2, #4
 8003372:	409a      	lsls	r2, r3
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337c:	f043 0204 	orr.w	r2, r3, #4
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003388:	2210      	movs	r2, #16
 800338a:	409a      	lsls	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d043      	beq.n	800341c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d03c      	beq.n	800341c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a6:	2210      	movs	r2, #16
 80033a8:	409a      	lsls	r2, r3
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d018      	beq.n	80033ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d108      	bne.n	80033dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d024      	beq.n	800341c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	4798      	blx	r3
 80033da:	e01f      	b.n	800341c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01b      	beq.n	800341c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4798      	blx	r3
 80033ec:	e016      	b.n	800341c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d107      	bne.n	800340c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0208 	bic.w	r2, r2, #8
 800340a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003420:	2220      	movs	r2, #32
 8003422:	409a      	lsls	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4013      	ands	r3, r2
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 808f 	beq.w	800354c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 8087 	beq.w	800354c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003442:	2220      	movs	r2, #32
 8003444:	409a      	lsls	r2, r3
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b05      	cmp	r3, #5
 8003454:	d136      	bne.n	80034c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0216 	bic.w	r2, r2, #22
 8003464:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003474:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d103      	bne.n	8003486 <HAL_DMA_IRQHandler+0x1da>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003482:	2b00      	cmp	r3, #0
 8003484:	d007      	beq.n	8003496 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0208 	bic.w	r2, r2, #8
 8003494:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349a:	223f      	movs	r2, #63	; 0x3f
 800349c:	409a      	lsls	r2, r3
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d07e      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	4798      	blx	r3
        }
        return;
 80034c2:	e079      	b.n	80035b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d01d      	beq.n	800350e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10d      	bne.n	80034fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d031      	beq.n	800354c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4798      	blx	r3
 80034f0:	e02c      	b.n	800354c <HAL_DMA_IRQHandler+0x2a0>
 80034f2:	bf00      	nop
 80034f4:	20000040 	.word	0x20000040
 80034f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003500:	2b00      	cmp	r3, #0
 8003502:	d023      	beq.n	800354c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	4798      	blx	r3
 800350c:	e01e      	b.n	800354c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10f      	bne.n	800353c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0210 	bic.w	r2, r2, #16
 800352a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003550:	2b00      	cmp	r3, #0
 8003552:	d032      	beq.n	80035ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d022      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2205      	movs	r2, #5
 8003564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	3301      	adds	r3, #1
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	429a      	cmp	r2, r3
 8003582:	d307      	bcc.n	8003594 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f2      	bne.n	8003578 <HAL_DMA_IRQHandler+0x2cc>
 8003592:	e000      	b.n	8003596 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003594:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	4798      	blx	r3
 80035b6:	e000      	b.n	80035ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80035b8:	bf00      	nop
    }
  }
}
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d108      	bne.n	8003600 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035fe:	e007      	b.n	8003610 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	60da      	str	r2, [r3, #12]
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	3b10      	subs	r3, #16
 800362c:	4a14      	ldr	r2, [pc, #80]	; (8003680 <DMA_CalcBaseAndBitshift+0x64>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	091b      	lsrs	r3, r3, #4
 8003634:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003636:	4a13      	ldr	r2, [pc, #76]	; (8003684 <DMA_CalcBaseAndBitshift+0x68>)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b03      	cmp	r3, #3
 8003648:	d909      	bls.n	800365e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003652:	f023 0303 	bic.w	r3, r3, #3
 8003656:	1d1a      	adds	r2, r3, #4
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	659a      	str	r2, [r3, #88]	; 0x58
 800365c:	e007      	b.n	800366e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003666:	f023 0303 	bic.w	r3, r3, #3
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	aaaaaaab 	.word	0xaaaaaaab
 8003684:	080093a0 	.word	0x080093a0

08003688 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d11f      	bne.n	80036e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d856      	bhi.n	8003756 <DMA_CheckFifoParam+0xce>
 80036a8:	a201      	add	r2, pc, #4	; (adr r2, 80036b0 <DMA_CheckFifoParam+0x28>)
 80036aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ae:	bf00      	nop
 80036b0:	080036c1 	.word	0x080036c1
 80036b4:	080036d3 	.word	0x080036d3
 80036b8:	080036c1 	.word	0x080036c1
 80036bc:	08003757 	.word	0x08003757
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d046      	beq.n	800375a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d0:	e043      	b.n	800375a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036da:	d140      	bne.n	800375e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e0:	e03d      	b.n	800375e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ea:	d121      	bne.n	8003730 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d837      	bhi.n	8003762 <DMA_CheckFifoParam+0xda>
 80036f2:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <DMA_CheckFifoParam+0x70>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	08003709 	.word	0x08003709
 80036fc:	0800370f 	.word	0x0800370f
 8003700:	08003709 	.word	0x08003709
 8003704:	08003721 	.word	0x08003721
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
      break;
 800370c:	e030      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d025      	beq.n	8003766 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800371e:	e022      	b.n	8003766 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003728:	d11f      	bne.n	800376a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800372e:	e01c      	b.n	800376a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d903      	bls.n	800373e <DMA_CheckFifoParam+0xb6>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b03      	cmp	r3, #3
 800373a:	d003      	beq.n	8003744 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800373c:	e018      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
      break;
 8003742:	e015      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00e      	beq.n	800376e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
      break;
 8003754:	e00b      	b.n	800376e <DMA_CheckFifoParam+0xe6>
      break;
 8003756:	bf00      	nop
 8003758:	e00a      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
      break;
 800375a:	bf00      	nop
 800375c:	e008      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
      break;
 800375e:	bf00      	nop
 8003760:	e006      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
      break;
 8003762:	bf00      	nop
 8003764:	e004      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
      break;
 8003766:	bf00      	nop
 8003768:	e002      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
      break;   
 800376a:	bf00      	nop
 800376c:	e000      	b.n	8003770 <DMA_CheckFifoParam+0xe8>
      break;
 800376e:	bf00      	nop
    }
  } 
  
  return status; 
 8003770:	7bfb      	ldrb	r3, [r7, #15]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop

08003780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003780:	b480      	push	{r7}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003792:	2300      	movs	r3, #0
 8003794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
 800379a:	e165      	b.n	8003a68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800379c:	2201      	movs	r2, #1
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4013      	ands	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	f040 8154 	bne.w	8003a62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d005      	beq.n	80037d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d130      	bne.n	8003834 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	2203      	movs	r2, #3
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4013      	ands	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003808:	2201      	movs	r2, #1
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 0201 	and.w	r2, r3, #1
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	2b03      	cmp	r3, #3
 800383e:	d017      	beq.n	8003870 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	2203      	movs	r2, #3
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d123      	bne.n	80038c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	08da      	lsrs	r2, r3, #3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3208      	adds	r2, #8
 8003884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003888:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	220f      	movs	r2, #15
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	08da      	lsrs	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3208      	adds	r2, #8
 80038be:	69b9      	ldr	r1, [r7, #24]
 80038c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	2203      	movs	r2, #3
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 0203 	and.w	r2, r3, #3
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80ae 	beq.w	8003a62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	4b5d      	ldr	r3, [pc, #372]	; (8003a80 <HAL_GPIO_Init+0x300>)
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	4a5c      	ldr	r2, [pc, #368]	; (8003a80 <HAL_GPIO_Init+0x300>)
 8003910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003914:	6453      	str	r3, [r2, #68]	; 0x44
 8003916:	4b5a      	ldr	r3, [pc, #360]	; (8003a80 <HAL_GPIO_Init+0x300>)
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003922:	4a58      	ldr	r2, [pc, #352]	; (8003a84 <HAL_GPIO_Init+0x304>)
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	089b      	lsrs	r3, r3, #2
 8003928:	3302      	adds	r3, #2
 800392a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	220f      	movs	r2, #15
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4013      	ands	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a4f      	ldr	r2, [pc, #316]	; (8003a88 <HAL_GPIO_Init+0x308>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d025      	beq.n	800399a <HAL_GPIO_Init+0x21a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a4e      	ldr	r2, [pc, #312]	; (8003a8c <HAL_GPIO_Init+0x30c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d01f      	beq.n	8003996 <HAL_GPIO_Init+0x216>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a4d      	ldr	r2, [pc, #308]	; (8003a90 <HAL_GPIO_Init+0x310>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d019      	beq.n	8003992 <HAL_GPIO_Init+0x212>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a4c      	ldr	r2, [pc, #304]	; (8003a94 <HAL_GPIO_Init+0x314>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d013      	beq.n	800398e <HAL_GPIO_Init+0x20e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a4b      	ldr	r2, [pc, #300]	; (8003a98 <HAL_GPIO_Init+0x318>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00d      	beq.n	800398a <HAL_GPIO_Init+0x20a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a4a      	ldr	r2, [pc, #296]	; (8003a9c <HAL_GPIO_Init+0x31c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d007      	beq.n	8003986 <HAL_GPIO_Init+0x206>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a49      	ldr	r2, [pc, #292]	; (8003aa0 <HAL_GPIO_Init+0x320>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d101      	bne.n	8003982 <HAL_GPIO_Init+0x202>
 800397e:	2306      	movs	r3, #6
 8003980:	e00c      	b.n	800399c <HAL_GPIO_Init+0x21c>
 8003982:	2307      	movs	r3, #7
 8003984:	e00a      	b.n	800399c <HAL_GPIO_Init+0x21c>
 8003986:	2305      	movs	r3, #5
 8003988:	e008      	b.n	800399c <HAL_GPIO_Init+0x21c>
 800398a:	2304      	movs	r3, #4
 800398c:	e006      	b.n	800399c <HAL_GPIO_Init+0x21c>
 800398e:	2303      	movs	r3, #3
 8003990:	e004      	b.n	800399c <HAL_GPIO_Init+0x21c>
 8003992:	2302      	movs	r3, #2
 8003994:	e002      	b.n	800399c <HAL_GPIO_Init+0x21c>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <HAL_GPIO_Init+0x21c>
 800399a:	2300      	movs	r3, #0
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	f002 0203 	and.w	r2, r2, #3
 80039a2:	0092      	lsls	r2, r2, #2
 80039a4:	4093      	lsls	r3, r2
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039ac:	4935      	ldr	r1, [pc, #212]	; (8003a84 <HAL_GPIO_Init+0x304>)
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	3302      	adds	r3, #2
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039ba:	4b3a      	ldr	r3, [pc, #232]	; (8003aa4 <HAL_GPIO_Init+0x324>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039de:	4a31      	ldr	r2, [pc, #196]	; (8003aa4 <HAL_GPIO_Init+0x324>)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039e4:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <HAL_GPIO_Init+0x324>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a08:	4a26      	ldr	r2, [pc, #152]	; (8003aa4 <HAL_GPIO_Init+0x324>)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a0e:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <HAL_GPIO_Init+0x324>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a32:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <HAL_GPIO_Init+0x324>)
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a38:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <HAL_GPIO_Init+0x324>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a5c:	4a11      	ldr	r2, [pc, #68]	; (8003aa4 <HAL_GPIO_Init+0x324>)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3301      	adds	r3, #1
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b0f      	cmp	r3, #15
 8003a6c:	f67f ae96 	bls.w	800379c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	3724      	adds	r7, #36	; 0x24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40013800 	.word	0x40013800
 8003a88:	40020000 	.word	0x40020000
 8003a8c:	40020400 	.word	0x40020400
 8003a90:	40020800 	.word	0x40020800
 8003a94:	40020c00 	.word	0x40020c00
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40021400 	.word	0x40021400
 8003aa0:	40021800 	.word	0x40021800
 8003aa4:	40013c00 	.word	0x40013c00

08003aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	807b      	strh	r3, [r7, #2]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ab8:	787b      	ldrb	r3, [r7, #1]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003abe:	887a      	ldrh	r2, [r7, #2]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ac4:	e003      	b.n	8003ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ac6:	887b      	ldrh	r3, [r7, #2]
 8003ac8:	041a      	lsls	r2, r3, #16
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	619a      	str	r2, [r3, #24]
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b085      	sub	sp, #20
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003aec:	887a      	ldrh	r2, [r7, #2]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4013      	ands	r3, r2
 8003af2:	041a      	lsls	r2, r3, #16
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	43d9      	mvns	r1, r3
 8003af8:	887b      	ldrh	r3, [r7, #2]
 8003afa:	400b      	ands	r3, r1
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	619a      	str	r2, [r3, #24]
}
 8003b02:	bf00      	nop
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b28:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b36:	4b1b      	ldr	r3, [pc, #108]	; (8003ba4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b3c:	f7ff f8dc 	bl	8002cf8 <HAL_GetTick>
 8003b40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b42:	e009      	b.n	8003b58 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b44:	f7ff f8d8 	bl	8002cf8 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b52:	d901      	bls.n	8003b58 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e01f      	b.n	8003b98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b58:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b64:	d1ee      	bne.n	8003b44 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b66:	4b11      	ldr	r3, [pc, #68]	; (8003bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b6c:	f7ff f8c4 	bl	8002cf8 <HAL_GetTick>
 8003b70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b72:	e009      	b.n	8003b88 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b74:	f7ff f8c0 	bl	8002cf8 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b82:	d901      	bls.n	8003b88 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e007      	b.n	8003b98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b88:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b94:	d1ee      	bne.n	8003b74 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	420e0040 	.word	0x420e0040
 8003ba8:	40007000 	.word	0x40007000
 8003bac:	420e0044 	.word	0x420e0044

08003bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0cc      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc4:	4b68      	ldr	r3, [pc, #416]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d90c      	bls.n	8003bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd2:	4b65      	ldr	r3, [pc, #404]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	4b63      	ldr	r3, [pc, #396]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0b8      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d020      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c04:	4b59      	ldr	r3, [pc, #356]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4a58      	ldr	r2, [pc, #352]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c1c:	4b53      	ldr	r3, [pc, #332]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4a52      	ldr	r2, [pc, #328]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c28:	4b50      	ldr	r3, [pc, #320]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	494d      	ldr	r1, [pc, #308]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d044      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	4b47      	ldr	r3, [pc, #284]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d119      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e07f      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d003      	beq.n	8003c6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d107      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6e:	4b3f      	ldr	r3, [pc, #252]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e06f      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7e:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e067      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c8e:	4b37      	ldr	r3, [pc, #220]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f023 0203 	bic.w	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	4934      	ldr	r1, [pc, #208]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ca0:	f7ff f82a 	bl	8002cf8 <HAL_GetTick>
 8003ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca8:	f7ff f826 	bl	8002cf8 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e04f      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	4b2b      	ldr	r3, [pc, #172]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 020c 	and.w	r2, r3, #12
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d1eb      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d20c      	bcs.n	8003cf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cde:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce6:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d001      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e032      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d04:	4b19      	ldr	r3, [pc, #100]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4916      	ldr	r1, [pc, #88]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d22:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	490e      	ldr	r1, [pc, #56]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d36:	f000 fdc7 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	490a      	ldr	r1, [pc, #40]	; (8003d70 <HAL_RCC_ClockConfig+0x1c0>)
 8003d48:	5ccb      	ldrb	r3, [r1, r3]
 8003d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4e:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <HAL_RCC_ClockConfig+0x1c8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe ff8a 	bl	8002c70 <HAL_InitTick>

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40023c00 	.word	0x40023c00
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	08009388 	.word	0x08009388
 8003d74:	20000040 	.word	0x20000040
 8003d78:	20000044 	.word	0x20000044

08003d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d80:	4b03      	ldr	r3, [pc, #12]	; (8003d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d82:	681b      	ldr	r3, [r3, #0]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000040 	.word	0x20000040

08003d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d98:	f7ff fff0 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	0a9b      	lsrs	r3, r3, #10
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4903      	ldr	r1, [pc, #12]	; (8003db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40023800 	.word	0x40023800
 8003db8:	08009398 	.word	0x08009398

08003dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dc0:	f7ff ffdc 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	0b5b      	lsrs	r3, r3, #13
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	4903      	ldr	r1, [pc, #12]	; (8003de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd2:	5ccb      	ldrb	r3, [r1, r3]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	08009398 	.word	0x08009398

08003de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08c      	sub	sp, #48	; 0x30
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d010      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003e1c:	4b6f      	ldr	r3, [pc, #444]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e22:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	496c      	ldr	r1, [pc, #432]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d010      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003e4a:	4b64      	ldr	r3, [pc, #400]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e50:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e58:	4960      	ldr	r1, [pc, #384]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d017      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e78:	4b58      	ldr	r3, [pc, #352]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	4955      	ldr	r1, [pc, #340]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e96:	d101      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d017      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003eb4:	4b49      	ldr	r3, [pc, #292]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec2:	4946      	ldr	r1, [pc, #280]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 808a 	beq.w	8004006 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a38      	ldr	r2, [pc, #224]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6413      	str	r3, [r2, #64]	; 0x40
 8003f02:	4b36      	ldr	r3, [pc, #216]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f0e:	4b34      	ldr	r3, [pc, #208]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a33      	ldr	r2, [pc, #204]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f1a:	f7fe feed 	bl	8002cf8 <HAL_GetTick>
 8003f1e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f20:	e008      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f22:	f7fe fee9 	bl	8002cf8 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e278      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f34:	4b2a      	ldr	r3, [pc, #168]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f0      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f40:	4b26      	ldr	r3, [pc, #152]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f48:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d02f      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f58:	6a3a      	ldr	r2, [r7, #32]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d028      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f5e:	4b1f      	ldr	r3, [pc, #124]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f66:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f68:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f6e:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f74:	4a19      	ldr	r2, [pc, #100]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f7a:	4b18      	ldr	r3, [pc, #96]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d114      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f86:	f7fe feb7 	bl	8002cf8 <HAL_GetTick>
 8003f8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8c:	e00a      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7fe feb3 	bl	8002cf8 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e240      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0ee      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fbc:	d114      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003fbe:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd2:	4902      	ldr	r1, [pc, #8]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	608b      	str	r3, [r1, #8]
 8003fd8:	e00c      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003fda:	bf00      	nop
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	40007000 	.word	0x40007000
 8003fe4:	42470e40 	.word	0x42470e40
 8003fe8:	4b4a      	ldr	r3, [pc, #296]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4a49      	ldr	r2, [pc, #292]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003fee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ff2:	6093      	str	r3, [r2, #8]
 8003ff4:	4b47      	ldr	r3, [pc, #284]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ff6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004000:	4944      	ldr	r1, [pc, #272]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004002:	4313      	orrs	r3, r2
 8004004:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b00      	cmp	r3, #0
 8004010:	d004      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004018:	4b3f      	ldr	r3, [pc, #252]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800401a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004028:	4b3a      	ldr	r3, [pc, #232]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800402a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800402e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004036:	4937      	ldr	r1, [pc, #220]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800404a:	4b32      	ldr	r3, [pc, #200]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800404c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004050:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004058:	492e      	ldr	r1, [pc, #184]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004068:	2b00      	cmp	r3, #0
 800406a:	d011      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800406c:	4b29      	ldr	r3, [pc, #164]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800406e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004072:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	4926      	ldr	r1, [pc, #152]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800408a:	d101      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800408c:	2301      	movs	r3, #1
 800408e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800409c:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800409e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	491a      	ldr	r1, [pc, #104]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d011      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80040be:	4b15      	ldr	r3, [pc, #84]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040cc:	4911      	ldr	r1, [pc, #68]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040dc:	d101      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80040de:	2301      	movs	r3, #1
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80040e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d005      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f0:	f040 80ff 	bne.w	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040f4:	4b09      	ldr	r3, [pc, #36]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040fa:	f7fe fdfd 	bl	8002cf8 <HAL_GetTick>
 80040fe:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004100:	e00e      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004102:	f7fe fdf9 	bl	8002cf8 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d907      	bls.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e188      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004114:	40023800 	.word	0x40023800
 8004118:	424711e0 	.word	0x424711e0
 800411c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004120:	4b7e      	ldr	r3, [pc, #504]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1ea      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	2b00      	cmp	r3, #0
 800413e:	d009      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004148:	2b00      	cmp	r3, #0
 800414a:	d028      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004150:	2b00      	cmp	r3, #0
 8004152:	d124      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004154:	4b71      	ldr	r3, [pc, #452]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415a:	0c1b      	lsrs	r3, r3, #16
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	3301      	adds	r3, #1
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004166:	4b6d      	ldr	r3, [pc, #436]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800416c:	0e1b      	lsrs	r3, r3, #24
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	019b      	lsls	r3, r3, #6
 800417e:	431a      	orrs	r2, r3
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	3b01      	subs	r3, #1
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	431a      	orrs	r2, r3
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	061b      	lsls	r3, r3, #24
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	071b      	lsls	r3, r3, #28
 8004196:	4961      	ldr	r1, [pc, #388]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d004      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d035      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c8:	d130      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80041ca:	4b54      	ldr	r3, [pc, #336]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80041cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	3301      	adds	r3, #1
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041dc:	4b4f      	ldr	r3, [pc, #316]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80041de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e2:	0f1b      	lsrs	r3, r3, #28
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	019b      	lsls	r3, r3, #6
 80041f4:	431a      	orrs	r2, r3
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	085b      	lsrs	r3, r3, #1
 80041fa:	3b01      	subs	r3, #1
 80041fc:	041b      	lsls	r3, r3, #16
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	061b      	lsls	r3, r3, #24
 8004206:	431a      	orrs	r2, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	071b      	lsls	r3, r3, #28
 800420c:	4943      	ldr	r1, [pc, #268]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004214:	4b41      	ldr	r3, [pc, #260]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800421a:	f023 021f 	bic.w	r2, r3, #31
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	3b01      	subs	r3, #1
 8004224:	493d      	ldr	r1, [pc, #244]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004234:	2b00      	cmp	r3, #0
 8004236:	d029      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004240:	d124      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004242:	4b36      	ldr	r3, [pc, #216]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	3301      	adds	r3, #1
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004254:	4b31      	ldr	r3, [pc, #196]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425a:	0f1b      	lsrs	r3, r3, #28
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	019b      	lsls	r3, r3, #6
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	085b      	lsrs	r3, r3, #1
 8004274:	3b01      	subs	r3, #1
 8004276:	041b      	lsls	r3, r3, #16
 8004278:	431a      	orrs	r2, r3
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	061b      	lsls	r3, r3, #24
 800427e:	431a      	orrs	r2, r3
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	071b      	lsls	r3, r3, #28
 8004284:	4925      	ldr	r1, [pc, #148]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004294:	2b00      	cmp	r3, #0
 8004296:	d016      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	019b      	lsls	r3, r3, #6
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	085b      	lsrs	r3, r3, #1
 80042aa:	3b01      	subs	r3, #1
 80042ac:	041b      	lsls	r3, r3, #16
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	061b      	lsls	r3, r3, #24
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	071b      	lsls	r3, r3, #28
 80042be:	4917      	ldr	r1, [pc, #92]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042c6:	4b16      	ldr	r3, [pc, #88]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042cc:	f7fe fd14 	bl	8002cf8 <HAL_GetTick>
 80042d0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042d4:	f7fe fd10 	bl	8002cf8 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e09f      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042e6:	4b0d      	ldr	r3, [pc, #52]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	f040 8095 	bne.w	8004424 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042fa:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004300:	f7fe fcfa 	bl	8002cf8 <HAL_GetTick>
 8004304:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004306:	e00f      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004308:	f7fe fcf6 	bl	8002cf8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d908      	bls.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e085      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800
 8004320:	42470068 	.word	0x42470068
 8004324:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004328:	4b41      	ldr	r3, [pc, #260]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004334:	d0e8      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004352:	2b00      	cmp	r3, #0
 8004354:	d02b      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435a:	2b00      	cmp	r3, #0
 800435c:	d127      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800435e:	4b34      	ldr	r3, [pc, #208]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	3301      	adds	r3, #1
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699a      	ldr	r2, [r3, #24]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	019b      	lsls	r3, r3, #6
 800437a:	431a      	orrs	r2, r3
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	085b      	lsrs	r3, r3, #1
 8004380:	3b01      	subs	r3, #1
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	061b      	lsls	r3, r3, #24
 800438c:	4928      	ldr	r1, [pc, #160]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004394:	4b26      	ldr	r3, [pc, #152]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800439a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a2:	3b01      	subs	r3, #1
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	4922      	ldr	r1, [pc, #136]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01d      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043c2:	d118      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043c4:	4b1a      	ldr	r3, [pc, #104]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	0e1b      	lsrs	r3, r3, #24
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	019b      	lsls	r3, r3, #6
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	085b      	lsrs	r3, r3, #1
 80043e4:	3b01      	subs	r3, #1
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	431a      	orrs	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	061b      	lsls	r3, r3, #24
 80043ee:	4910      	ldr	r1, [pc, #64]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80043f6:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043fc:	f7fe fc7c 	bl	8002cf8 <HAL_GetTick>
 8004400:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004404:	f7fe fc78 	bl	8002cf8 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e007      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800441e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004422:	d1ef      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3730      	adds	r7, #48	; 0x30
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800
 8004434:	42470070 	.word	0x42470070

08004438 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004438:	b480      	push	{r7}
 800443a:	b089      	sub	sp, #36	; 0x24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3b01      	subs	r3, #1
 800445c:	2b07      	cmp	r3, #7
 800445e:	f200 8224 	bhi.w	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	0800466b 	.word	0x0800466b
 800446c:	08004795 	.word	0x08004795
 8004470:	080048ab 	.word	0x080048ab
 8004474:	08004489 	.word	0x08004489
 8004478:	080048ab 	.word	0x080048ab
 800447c:	080048ab 	.word	0x080048ab
 8004480:	080048ab 	.word	0x080048ab
 8004484:	08004489 	.word	0x08004489
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8004488:	4ba8      	ldr	r3, [pc, #672]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800448a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800448e:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800449e:	f000 80d6 	beq.w	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044a8:	f200 80dd 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044b2:	f000 809f 	beq.w	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044bc:	f200 80d3 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044c6:	d05b      	beq.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ce:	f200 80ca 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044d8:	f000 80b6 	beq.w	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044e2:	f200 80c0 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044ec:	f000 8082 	beq.w	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044f6:	f200 80b6 	bhi.w	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d004      	beq.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004506:	d03b      	beq.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8004508:	e0ad      	b.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800450a:	4b88      	ldr	r3, [pc, #544]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8004516:	4b85      	ldr	r3, [pc, #532]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004520:	4a83      	ldr	r2, [pc, #524]	; (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004522:	fbb2 f3f3 	udiv	r3, r2, r3
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	e008      	b.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800452a:	4b80      	ldr	r3, [pc, #512]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004534:	4a7f      	ldr	r2, [pc, #508]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004536:	fbb2 f3f3 	udiv	r3, r2, r3
 800453a:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800453c:	4b7b      	ldr	r3, [pc, #492]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004542:	0e1b      	lsrs	r3, r3, #24
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800454a:	4b78      	ldr	r3, [pc, #480]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004550:	099b      	lsrs	r3, r3, #6
 8004552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	fb03 f202 	mul.w	r2, r3, r2
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004562:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8004564:	4b71      	ldr	r3, [pc, #452]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800456a:	0a1b      	lsrs	r3, r3, #8
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	3301      	adds	r3, #1
 8004572:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	61fb      	str	r3, [r7, #28]
          break;
 800457e:	e073      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004580:	4b6a      	ldr	r3, [pc, #424]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d109      	bne.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800458c:	4b67      	ldr	r3, [pc, #412]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800458e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004592:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004596:	4a66      	ldr	r2, [pc, #408]	; (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e008      	b.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80045a0:	4b62      	ldr	r3, [pc, #392]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80045a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045aa:	4a62      	ldr	r2, [pc, #392]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80045ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b0:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80045b2:	4b5e      	ldr	r3, [pc, #376]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80045b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b8:	0e1b      	lsrs	r3, r3, #24
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80045c0:	4b5a      	ldr	r3, [pc, #360]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80045c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c6:	099b      	lsrs	r3, r3, #6
 80045c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	fb03 f202 	mul.w	r2, r3, r2
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d8:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80045da:	4b54      	ldr	r3, [pc, #336]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80045dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e0:	f003 031f 	and.w	r3, r3, #31
 80045e4:	3301      	adds	r3, #1
 80045e6:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	61fb      	str	r3, [r7, #28]
          break;
 80045f2:	e039      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80045f4:	4b4d      	ldr	r3, [pc, #308]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d108      	bne.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004600:	4b4a      	ldr	r3, [pc, #296]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004608:	4a49      	ldr	r2, [pc, #292]	; (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800460a:	fbb2 f3f3 	udiv	r3, r2, r3
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	e007      	b.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004612:	4b46      	ldr	r3, [pc, #280]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800461a:	4a46      	ldr	r2, [pc, #280]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800461c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004620:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8004622:	4b42      	ldr	r3, [pc, #264]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	0f1b      	lsrs	r3, r3, #28
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800462e:	4b3f      	ldr	r3, [pc, #252]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	099b      	lsrs	r3, r3, #6
 8004634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	fb03 f202 	mul.w	r2, r3, r2
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	61fb      	str	r3, [r7, #28]
          break;
 8004646:	e00f      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004648:	4b3b      	ldr	r3, [pc, #236]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800464a:	61fb      	str	r3, [r7, #28]
          break;
 800464c:	e00c      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800464e:	4b37      	ldr	r3, [pc, #220]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 800465a:	4b35      	ldr	r3, [pc, #212]	; (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800465c:	61fb      	str	r3, [r7, #28]
          break;
 800465e:	e003      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8004660:	4b34      	ldr	r3, [pc, #208]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004662:	61fb      	str	r3, [r7, #28]
          break;
 8004664:	e000      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8004666:	bf00      	nop
        }
      }
      break;
 8004668:	e11f      	b.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800466a:	4b30      	ldr	r3, [pc, #192]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800466c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004670:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800467c:	d079      	beq.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004684:	f200 8082 	bhi.w	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800468e:	d03c      	beq.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004696:	d879      	bhi.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d006      	beq.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046a4:	d172      	bne.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80046a6:	4b24      	ldr	r3, [pc, #144]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80046a8:	61fb      	str	r3, [r7, #28]
          break;
 80046aa:	e072      	b.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046ac:	4b1f      	ldr	r3, [pc, #124]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b8:	d109      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80046ba:	4b1c      	ldr	r3, [pc, #112]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c4:	4a1b      	ldr	r2, [pc, #108]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80046c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ca:	61bb      	str	r3, [r7, #24]
 80046cc:	e008      	b.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80046ce:	4b17      	ldr	r3, [pc, #92]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d8:	4a15      	ldr	r2, [pc, #84]	; (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046da:	fbb2 f3f3 	udiv	r3, r2, r3
 80046de:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80046e0:	4b12      	ldr	r3, [pc, #72]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e6:	099b      	lsrs	r3, r3, #6
 80046e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
 80046f2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80046f4:	4b0d      	ldr	r3, [pc, #52]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80046f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046fa:	0f1b      	lsrs	r3, r3, #28
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	fbb2 f3f3 	udiv	r3, r2, r3
 8004706:	61fb      	str	r3, [r7, #28]
          break;
 8004708:	e043      	b.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800470a:	4b08      	ldr	r3, [pc, #32]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004716:	d111      	bne.n	800473c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004718:	4b04      	ldr	r3, [pc, #16]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004720:	4a04      	ldr	r2, [pc, #16]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004722:	fbb2 f3f3 	udiv	r3, r2, r3
 8004726:	61bb      	str	r3, [r7, #24]
 8004728:	e010      	b.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800472a:	bf00      	nop
 800472c:	40023800 	.word	0x40023800
 8004730:	00f42400 	.word	0x00f42400
 8004734:	017d7840 	.word	0x017d7840
 8004738:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800473c:	4b5e      	ldr	r3, [pc, #376]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004744:	4a5d      	ldr	r2, [pc, #372]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004746:	fbb2 f3f3 	udiv	r3, r2, r3
 800474a:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800474c:	4b5a      	ldr	r3, [pc, #360]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	099b      	lsrs	r3, r3, #6
 8004752:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	fb02 f303 	mul.w	r3, r2, r3
 800475c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800475e:	4b56      	ldr	r3, [pc, #344]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	0f1b      	lsrs	r3, r3, #28
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	fbb2 f3f3 	udiv	r3, r2, r3
 800476e:	61fb      	str	r3, [r7, #28]
          break;
 8004770:	e00f      	b.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004772:	4b51      	ldr	r3, [pc, #324]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800477e:	d102      	bne.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8004780:	4b4f      	ldr	r3, [pc, #316]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004782:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004784:	e005      	b.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8004786:	4b4d      	ldr	r3, [pc, #308]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004788:	61fb      	str	r3, [r7, #28]
          break;
 800478a:	e002      	b.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	61fb      	str	r3, [r7, #28]
          break;
 8004790:	bf00      	nop
        }
      }
      break;
 8004792:	e08a      	b.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004794:	4b48      	ldr	r3, [pc, #288]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800479a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80047a6:	d06f      	beq.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80047ae:	d878      	bhi.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047b6:	d03c      	beq.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047be:	d870      	bhi.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d006      	beq.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047cc:	d169      	bne.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047ce:	4b3d      	ldr	r3, [pc, #244]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80047d0:	61fb      	str	r3, [r7, #28]
          break;
 80047d2:	e069      	b.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047d4:	4b38      	ldr	r3, [pc, #224]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047e0:	d109      	bne.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80047e2:	4b35      	ldr	r3, [pc, #212]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80047e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ec:	4a34      	ldr	r2, [pc, #208]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80047ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f2:	61bb      	str	r3, [r7, #24]
 80047f4:	e008      	b.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80047f6:	4b30      	ldr	r3, [pc, #192]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80047f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004800:	4a2e      	ldr	r2, [pc, #184]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004802:	fbb2 f3f3 	udiv	r3, r2, r3
 8004806:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004808:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800480a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480e:	099b      	lsrs	r3, r3, #6
 8004810:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800481c:	4b26      	ldr	r3, [pc, #152]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800481e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004822:	0f1b      	lsrs	r3, r3, #28
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	fbb2 f3f3 	udiv	r3, r2, r3
 800482e:	61fb      	str	r3, [r7, #28]
          break;
 8004830:	e03a      	b.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004832:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800483a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800483e:	d108      	bne.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004840:	4b1d      	ldr	r3, [pc, #116]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004848:	4a1d      	ldr	r2, [pc, #116]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800484a:	fbb2 f3f3 	udiv	r3, r2, r3
 800484e:	61bb      	str	r3, [r7, #24]
 8004850:	e007      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004852:	4b19      	ldr	r3, [pc, #100]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800485a:	4a18      	ldr	r2, [pc, #96]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004862:	4b15      	ldr	r3, [pc, #84]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	099b      	lsrs	r3, r3, #6
 8004868:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	fb02 f303 	mul.w	r3, r2, r3
 8004872:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004874:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	0f1b      	lsrs	r3, r3, #28
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	fbb2 f3f3 	udiv	r3, r2, r3
 8004884:	61fb      	str	r3, [r7, #28]
          break;
 8004886:	e00f      	b.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004888:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004894:	d102      	bne.n	800489c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8004896:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004898:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800489a:	e005      	b.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 800489c:	4b07      	ldr	r3, [pc, #28]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800489e:	61fb      	str	r3, [r7, #28]
          break;
 80048a0:	e002      	b.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	61fb      	str	r3, [r7, #28]
          break;
 80048a6:	bf00      	nop
        }
      }
      break;
 80048a8:	bf00      	nop
    }
  }
  return frequency;
 80048aa:	69fb      	ldr	r3, [r7, #28]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3724      	adds	r7, #36	; 0x24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	40023800 	.word	0x40023800
 80048bc:	00f42400 	.word	0x00f42400
 80048c0:	017d7840 	.word	0x017d7840
 80048c4:	00bb8000 	.word	0x00bb8000

080048c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048cc:	b0a6      	sub	sp, #152	; 0x98
 80048ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ee:	4bc8      	ldr	r3, [pc, #800]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x348>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	2b0c      	cmp	r3, #12
 80048f8:	f200 817e 	bhi.w	8004bf8 <HAL_RCC_GetSysClockFreq+0x330>
 80048fc:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <HAL_RCC_GetSysClockFreq+0x3c>)
 80048fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004902:	bf00      	nop
 8004904:	08004939 	.word	0x08004939
 8004908:	08004bf9 	.word	0x08004bf9
 800490c:	08004bf9 	.word	0x08004bf9
 8004910:	08004bf9 	.word	0x08004bf9
 8004914:	08004941 	.word	0x08004941
 8004918:	08004bf9 	.word	0x08004bf9
 800491c:	08004bf9 	.word	0x08004bf9
 8004920:	08004bf9 	.word	0x08004bf9
 8004924:	08004949 	.word	0x08004949
 8004928:	08004bf9 	.word	0x08004bf9
 800492c:	08004bf9 	.word	0x08004bf9
 8004930:	08004bf9 	.word	0x08004bf9
 8004934:	08004ab3 	.word	0x08004ab3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004938:	4bb6      	ldr	r3, [pc, #728]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x34c>)
 800493a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800493e:	e15f      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004940:	4bb5      	ldr	r3, [pc, #724]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x350>)
 8004942:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004946:	e15b      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004948:	4bb1      	ldr	r3, [pc, #708]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x348>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004950:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004954:	4bae      	ldr	r3, [pc, #696]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x348>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d031      	beq.n	80049c4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004960:	4bab      	ldr	r3, [pc, #684]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x348>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	099b      	lsrs	r3, r3, #6
 8004966:	2200      	movs	r2, #0
 8004968:	66bb      	str	r3, [r7, #104]	; 0x68
 800496a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800496c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800496e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004972:	663b      	str	r3, [r7, #96]	; 0x60
 8004974:	2300      	movs	r3, #0
 8004976:	667b      	str	r3, [r7, #100]	; 0x64
 8004978:	4ba7      	ldr	r3, [pc, #668]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x350>)
 800497a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800497e:	462a      	mov	r2, r5
 8004980:	fb03 f202 	mul.w	r2, r3, r2
 8004984:	2300      	movs	r3, #0
 8004986:	4621      	mov	r1, r4
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	4413      	add	r3, r2
 800498e:	4aa2      	ldr	r2, [pc, #648]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x350>)
 8004990:	4621      	mov	r1, r4
 8004992:	fba1 1202 	umull	r1, r2, r1, r2
 8004996:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004998:	460a      	mov	r2, r1
 800499a:	67ba      	str	r2, [r7, #120]	; 0x78
 800499c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800499e:	4413      	add	r3, r2
 80049a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80049a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049a6:	2200      	movs	r2, #0
 80049a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80049aa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80049ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049b0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80049b4:	f7fb fc84 	bl	80002c0 <__aeabi_uldivmod>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4613      	mov	r3, r2
 80049be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049c2:	e064      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c4:	4b92      	ldr	r3, [pc, #584]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x348>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	099b      	lsrs	r3, r3, #6
 80049ca:	2200      	movs	r2, #0
 80049cc:	653b      	str	r3, [r7, #80]	; 0x50
 80049ce:	657a      	str	r2, [r7, #84]	; 0x54
 80049d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80049d8:	2300      	movs	r3, #0
 80049da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049dc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80049e0:	4622      	mov	r2, r4
 80049e2:	462b      	mov	r3, r5
 80049e4:	f04f 0000 	mov.w	r0, #0
 80049e8:	f04f 0100 	mov.w	r1, #0
 80049ec:	0159      	lsls	r1, r3, #5
 80049ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049f2:	0150      	lsls	r0, r2, #5
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4621      	mov	r1, r4
 80049fa:	1a51      	subs	r1, r2, r1
 80049fc:	6139      	str	r1, [r7, #16]
 80049fe:	4629      	mov	r1, r5
 8004a00:	eb63 0301 	sbc.w	r3, r3, r1
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a12:	4659      	mov	r1, fp
 8004a14:	018b      	lsls	r3, r1, #6
 8004a16:	4651      	mov	r1, sl
 8004a18:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a1c:	4651      	mov	r1, sl
 8004a1e:	018a      	lsls	r2, r1, #6
 8004a20:	4651      	mov	r1, sl
 8004a22:	ebb2 0801 	subs.w	r8, r2, r1
 8004a26:	4659      	mov	r1, fp
 8004a28:	eb63 0901 	sbc.w	r9, r3, r1
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a40:	4690      	mov	r8, r2
 8004a42:	4699      	mov	r9, r3
 8004a44:	4623      	mov	r3, r4
 8004a46:	eb18 0303 	adds.w	r3, r8, r3
 8004a4a:	60bb      	str	r3, [r7, #8]
 8004a4c:	462b      	mov	r3, r5
 8004a4e:	eb49 0303 	adc.w	r3, r9, r3
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a60:	4629      	mov	r1, r5
 8004a62:	028b      	lsls	r3, r1, #10
 8004a64:	4621      	mov	r1, r4
 8004a66:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	028a      	lsls	r2, r1, #10
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4619      	mov	r1, r3
 8004a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a76:	2200      	movs	r2, #0
 8004a78:	643b      	str	r3, [r7, #64]	; 0x40
 8004a7a:	647a      	str	r2, [r7, #68]	; 0x44
 8004a7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a80:	f7fb fc1e 	bl	80002c0 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4613      	mov	r3, r2
 8004a8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a8e:	4b60      	ldr	r3, [pc, #384]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	0c1b      	lsrs	r3, r3, #16
 8004a94:	f003 0303 	and.w	r3, r3, #3
 8004a98:	3301      	adds	r3, #1
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004aa0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004ab0:	e0a6      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ab2:	4b57      	ldr	r3, [pc, #348]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004abe:	4b54      	ldr	r3, [pc, #336]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d02a      	beq.n	8004b20 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aca:	4b51      	ldr	r3, [pc, #324]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x348>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	099b      	lsrs	r3, r3, #6
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ad4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004adc:	2100      	movs	r1, #0
 8004ade:	4b4e      	ldr	r3, [pc, #312]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x350>)
 8004ae0:	fb03 f201 	mul.w	r2, r3, r1
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	fb00 f303 	mul.w	r3, r0, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	4a4a      	ldr	r2, [pc, #296]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x350>)
 8004aee:	fba0 1202 	umull	r1, r2, r0, r2
 8004af2:	677a      	str	r2, [r7, #116]	; 0x74
 8004af4:	460a      	mov	r2, r1
 8004af6:	673a      	str	r2, [r7, #112]	; 0x70
 8004af8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004afa:	4413      	add	r3, r2
 8004afc:	677b      	str	r3, [r7, #116]	; 0x74
 8004afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b02:	2200      	movs	r2, #0
 8004b04:	633b      	str	r3, [r7, #48]	; 0x30
 8004b06:	637a      	str	r2, [r7, #52]	; 0x34
 8004b08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b0c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004b10:	f7fb fbd6 	bl	80002c0 <__aeabi_uldivmod>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4613      	mov	r3, r2
 8004b1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b1e:	e05b      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b20:	4b3b      	ldr	r3, [pc, #236]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	099b      	lsrs	r3, r3, #6
 8004b26:	2200      	movs	r2, #0
 8004b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b32:	623b      	str	r3, [r7, #32]
 8004b34:	2300      	movs	r3, #0
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
 8004b38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	464b      	mov	r3, r9
 8004b40:	f04f 0000 	mov.w	r0, #0
 8004b44:	f04f 0100 	mov.w	r1, #0
 8004b48:	0159      	lsls	r1, r3, #5
 8004b4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b4e:	0150      	lsls	r0, r2, #5
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4641      	mov	r1, r8
 8004b56:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b5a:	4649      	mov	r1, r9
 8004b5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b74:	ebb2 040a 	subs.w	r4, r2, sl
 8004b78:	eb63 050b 	sbc.w	r5, r3, fp
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	00eb      	lsls	r3, r5, #3
 8004b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b8a:	00e2      	lsls	r2, r4, #3
 8004b8c:	4614      	mov	r4, r2
 8004b8e:	461d      	mov	r5, r3
 8004b90:	4643      	mov	r3, r8
 8004b92:	18e3      	adds	r3, r4, r3
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	464b      	mov	r3, r9
 8004b98:	eb45 0303 	adc.w	r3, r5, r3
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004baa:	4629      	mov	r1, r5
 8004bac:	028b      	lsls	r3, r1, #10
 8004bae:	4621      	mov	r1, r4
 8004bb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	028a      	lsls	r2, r1, #10
 8004bb8:	4610      	mov	r0, r2
 8004bba:	4619      	mov	r1, r3
 8004bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	61bb      	str	r3, [r7, #24]
 8004bc4:	61fa      	str	r2, [r7, #28]
 8004bc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bca:	f7fb fb79 	bl	80002c0 <__aeabi_uldivmod>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004bd8:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	0f1b      	lsrs	r3, r3, #28
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004be6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004bf6:	e003      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bf8:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004bfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004bfe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3798      	adds	r7, #152	; 0x98
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c0e:	bf00      	nop
 8004c10:	40023800 	.word	0x40023800
 8004c14:	00f42400 	.word	0x00f42400
 8004c18:	017d7840 	.word	0x017d7840

08004c1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e28d      	b.n	800514a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8083 	beq.w	8004d42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c3c:	4b94      	ldr	r3, [pc, #592]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 030c 	and.w	r3, r3, #12
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d019      	beq.n	8004c7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c48:	4b91      	ldr	r3, [pc, #580]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d106      	bne.n	8004c62 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c54:	4b8e      	ldr	r3, [pc, #568]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c60:	d00c      	beq.n	8004c7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c62:	4b8b      	ldr	r3, [pc, #556]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c6a:	2b0c      	cmp	r3, #12
 8004c6c:	d112      	bne.n	8004c94 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c6e:	4b88      	ldr	r3, [pc, #544]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c7a:	d10b      	bne.n	8004c94 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c7c:	4b84      	ldr	r3, [pc, #528]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d05b      	beq.n	8004d40 <HAL_RCC_OscConfig+0x124>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d157      	bne.n	8004d40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e25a      	b.n	800514a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9c:	d106      	bne.n	8004cac <HAL_RCC_OscConfig+0x90>
 8004c9e:	4b7c      	ldr	r3, [pc, #496]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a7b      	ldr	r2, [pc, #492]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e01d      	b.n	8004ce8 <HAL_RCC_OscConfig+0xcc>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0xb4>
 8004cb6:	4b76      	ldr	r3, [pc, #472]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a75      	ldr	r2, [pc, #468]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	4b73      	ldr	r3, [pc, #460]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a72      	ldr	r2, [pc, #456]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e00b      	b.n	8004ce8 <HAL_RCC_OscConfig+0xcc>
 8004cd0:	4b6f      	ldr	r3, [pc, #444]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a6e      	ldr	r2, [pc, #440]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	4b6c      	ldr	r3, [pc, #432]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a6b      	ldr	r2, [pc, #428]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d013      	beq.n	8004d18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7fe f802 	bl	8002cf8 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cf8:	f7fd fffe 	bl	8002cf8 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b64      	cmp	r3, #100	; 0x64
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e21f      	b.n	800514a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0a:	4b61      	ldr	r3, [pc, #388]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0xdc>
 8004d16:	e014      	b.n	8004d42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fd ffee 	bl	8002cf8 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d20:	f7fd ffea 	bl	8002cf8 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	; 0x64
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e20b      	b.n	800514a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d32:	4b57      	ldr	r3, [pc, #348]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x104>
 8004d3e:	e000      	b.n	8004d42 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d06f      	beq.n	8004e2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d4e:	4b50      	ldr	r3, [pc, #320]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d017      	beq.n	8004d8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d5a:	4b4d      	ldr	r3, [pc, #308]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d105      	bne.n	8004d72 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d66:	4b4a      	ldr	r3, [pc, #296]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00b      	beq.n	8004d8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d72:	4b47      	ldr	r3, [pc, #284]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d7a:	2b0c      	cmp	r3, #12
 8004d7c:	d11c      	bne.n	8004db8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d7e:	4b44      	ldr	r3, [pc, #272]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d116      	bne.n	8004db8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8a:	4b41      	ldr	r3, [pc, #260]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d005      	beq.n	8004da2 <HAL_RCC_OscConfig+0x186>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d001      	beq.n	8004da2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e1d3      	b.n	800514a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da2:	4b3b      	ldr	r3, [pc, #236]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	4937      	ldr	r1, [pc, #220]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004db6:	e03a      	b.n	8004e2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d020      	beq.n	8004e02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc0:	4b34      	ldr	r3, [pc, #208]	; (8004e94 <HAL_RCC_OscConfig+0x278>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc6:	f7fd ff97 	bl	8002cf8 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dce:	f7fd ff93 	bl	8002cf8 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e1b4      	b.n	800514a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de0:	4b2b      	ldr	r3, [pc, #172]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f0      	beq.n	8004dce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dec:	4b28      	ldr	r3, [pc, #160]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	4925      	ldr	r1, [pc, #148]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	600b      	str	r3, [r1, #0]
 8004e00:	e015      	b.n	8004e2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e02:	4b24      	ldr	r3, [pc, #144]	; (8004e94 <HAL_RCC_OscConfig+0x278>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fd ff76 	bl	8002cf8 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e10:	f7fd ff72 	bl	8002cf8 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e193      	b.n	800514a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e22:	4b1b      	ldr	r3, [pc, #108]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d036      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d016      	beq.n	8004e70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e42:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <HAL_RCC_OscConfig+0x27c>)
 8004e44:	2201      	movs	r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e48:	f7fd ff56 	bl	8002cf8 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e50:	f7fd ff52 	bl	8002cf8 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e173      	b.n	800514a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e62:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCC_OscConfig+0x234>
 8004e6e:	e01b      	b.n	8004ea8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e70:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <HAL_RCC_OscConfig+0x27c>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e76:	f7fd ff3f 	bl	8002cf8 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e7c:	e00e      	b.n	8004e9c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e7e:	f7fd ff3b 	bl	8002cf8 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d907      	bls.n	8004e9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e15c      	b.n	800514a <HAL_RCC_OscConfig+0x52e>
 8004e90:	40023800 	.word	0x40023800
 8004e94:	42470000 	.word	0x42470000
 8004e98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e9c:	4b8a      	ldr	r3, [pc, #552]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1ea      	bne.n	8004e7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 8097 	beq.w	8004fe4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eba:	4b83      	ldr	r3, [pc, #524]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10f      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	4b7f      	ldr	r3, [pc, #508]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	4a7e      	ldr	r2, [pc, #504]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ed6:	4b7c      	ldr	r3, [pc, #496]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ede:	60bb      	str	r3, [r7, #8]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee6:	4b79      	ldr	r3, [pc, #484]	; (80050cc <HAL_RCC_OscConfig+0x4b0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d118      	bne.n	8004f24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ef2:	4b76      	ldr	r3, [pc, #472]	; (80050cc <HAL_RCC_OscConfig+0x4b0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a75      	ldr	r2, [pc, #468]	; (80050cc <HAL_RCC_OscConfig+0x4b0>)
 8004ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004efe:	f7fd fefb 	bl	8002cf8 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f06:	f7fd fef7 	bl	8002cf8 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e118      	b.n	800514a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f18:	4b6c      	ldr	r3, [pc, #432]	; (80050cc <HAL_RCC_OscConfig+0x4b0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0f0      	beq.n	8004f06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d106      	bne.n	8004f3a <HAL_RCC_OscConfig+0x31e>
 8004f2c:	4b66      	ldr	r3, [pc, #408]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f30:	4a65      	ldr	r2, [pc, #404]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004f32:	f043 0301 	orr.w	r3, r3, #1
 8004f36:	6713      	str	r3, [r2, #112]	; 0x70
 8004f38:	e01c      	b.n	8004f74 <HAL_RCC_OscConfig+0x358>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2b05      	cmp	r3, #5
 8004f40:	d10c      	bne.n	8004f5c <HAL_RCC_OscConfig+0x340>
 8004f42:	4b61      	ldr	r3, [pc, #388]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f46:	4a60      	ldr	r2, [pc, #384]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004f48:	f043 0304 	orr.w	r3, r3, #4
 8004f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f4e:	4b5e      	ldr	r3, [pc, #376]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	4a5d      	ldr	r2, [pc, #372]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004f54:	f043 0301 	orr.w	r3, r3, #1
 8004f58:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5a:	e00b      	b.n	8004f74 <HAL_RCC_OscConfig+0x358>
 8004f5c:	4b5a      	ldr	r3, [pc, #360]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f60:	4a59      	ldr	r2, [pc, #356]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004f62:	f023 0301 	bic.w	r3, r3, #1
 8004f66:	6713      	str	r3, [r2, #112]	; 0x70
 8004f68:	4b57      	ldr	r3, [pc, #348]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6c:	4a56      	ldr	r2, [pc, #344]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004f6e:	f023 0304 	bic.w	r3, r3, #4
 8004f72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d015      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7c:	f7fd febc 	bl	8002cf8 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f82:	e00a      	b.n	8004f9a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f84:	f7fd feb8 	bl	8002cf8 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e0d7      	b.n	800514a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f9a:	4b4b      	ldr	r3, [pc, #300]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0ee      	beq.n	8004f84 <HAL_RCC_OscConfig+0x368>
 8004fa6:	e014      	b.n	8004fd2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa8:	f7fd fea6 	bl	8002cf8 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fae:	e00a      	b.n	8004fc6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fb0:	f7fd fea2 	bl	8002cf8 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e0c1      	b.n	800514a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc6:	4b40      	ldr	r3, [pc, #256]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1ee      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fd2:	7dfb      	ldrb	r3, [r7, #23]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d105      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd8:	4b3b      	ldr	r3, [pc, #236]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	4a3a      	ldr	r2, [pc, #232]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 80ad 	beq.w	8005148 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fee:	4b36      	ldr	r3, [pc, #216]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 030c 	and.w	r3, r3, #12
 8004ff6:	2b08      	cmp	r3, #8
 8004ff8:	d060      	beq.n	80050bc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d145      	bne.n	800508e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005002:	4b33      	ldr	r3, [pc, #204]	; (80050d0 <HAL_RCC_OscConfig+0x4b4>)
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005008:	f7fd fe76 	bl	8002cf8 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005010:	f7fd fe72 	bl	8002cf8 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e093      	b.n	800514a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005022:	4b29      	ldr	r3, [pc, #164]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f0      	bne.n	8005010 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69da      	ldr	r2, [r3, #28]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	019b      	lsls	r3, r3, #6
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005044:	085b      	lsrs	r3, r3, #1
 8005046:	3b01      	subs	r3, #1
 8005048:	041b      	lsls	r3, r3, #16
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005050:	061b      	lsls	r3, r3, #24
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	071b      	lsls	r3, r3, #28
 800505a:	491b      	ldr	r1, [pc, #108]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 800505c:	4313      	orrs	r3, r2
 800505e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005060:	4b1b      	ldr	r3, [pc, #108]	; (80050d0 <HAL_RCC_OscConfig+0x4b4>)
 8005062:	2201      	movs	r2, #1
 8005064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005066:	f7fd fe47 	bl	8002cf8 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800506c:	e008      	b.n	8005080 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800506e:	f7fd fe43 	bl	8002cf8 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e064      	b.n	800514a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005080:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0f0      	beq.n	800506e <HAL_RCC_OscConfig+0x452>
 800508c:	e05c      	b.n	8005148 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800508e:	4b10      	ldr	r3, [pc, #64]	; (80050d0 <HAL_RCC_OscConfig+0x4b4>)
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005094:	f7fd fe30 	bl	8002cf8 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800509c:	f7fd fe2c 	bl	8002cf8 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e04d      	b.n	800514a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ae:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <HAL_RCC_OscConfig+0x4ac>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0x480>
 80050ba:	e045      	b.n	8005148 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d107      	bne.n	80050d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e040      	b.n	800514a <HAL_RCC_OscConfig+0x52e>
 80050c8:	40023800 	.word	0x40023800
 80050cc:	40007000 	.word	0x40007000
 80050d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050d4:	4b1f      	ldr	r3, [pc, #124]	; (8005154 <HAL_RCC_OscConfig+0x538>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d030      	beq.n	8005144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d129      	bne.n	8005144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d122      	bne.n	8005144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005104:	4013      	ands	r3, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800510a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800510c:	4293      	cmp	r3, r2
 800510e:	d119      	bne.n	8005144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	085b      	lsrs	r3, r3, #1
 800511c:	3b01      	subs	r3, #1
 800511e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d10f      	bne.n	8005144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005130:	429a      	cmp	r2, r3
 8005132:	d107      	bne.n	8005144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005140:	429a      	cmp	r2, r3
 8005142:	d001      	beq.n	8005148 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800

08005158 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b02      	cmp	r3, #2
 800516e:	d904      	bls.n	800517a <HAL_SAI_InitProtocol+0x22>
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	3b03      	subs	r3, #3
 8005174:	2b01      	cmp	r3, #1
 8005176:	d812      	bhi.n	800519e <HAL_SAI_InitProtocol+0x46>
 8005178:	e008      	b.n	800518c <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	68b9      	ldr	r1, [r7, #8]
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f9dd 	bl	8005540 <SAI_InitI2S>
 8005186:	4603      	mov	r3, r0
 8005188:	75fb      	strb	r3, [r7, #23]
      break;
 800518a:	e00b      	b.n	80051a4 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 fa82 	bl	800569c <SAI_InitPCM>
 8005198:	4603      	mov	r3, r0
 800519a:	75fb      	strb	r3, [r7, #23]
      break;
 800519c:	e002      	b.n	80051a4 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	75fb      	strb	r3, [r7, #23]
      break;
 80051a2:	bf00      	nop
  }

  if (status == HAL_OK)
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d104      	bne.n	80051b4 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f808 	bl	80051c0 <HAL_SAI_Init>
 80051b0:	4603      	mov	r3, r0
 80051b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80051b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e10c      	b.n	80053fc <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fd fb96 	bl	8002928 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 faff 	bl	8005808 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fba6 	bl	800595c <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d030      	beq.n	800527a <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fbe3 	bl	80059e4 <SAI_GetInputClock>
 800521e:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	4613      	mov	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	461a      	mov	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	025b      	lsls	r3, r3, #9
 8005232:	fbb2 f3f3 	udiv	r3, r2, r3
 8005236:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4a72      	ldr	r2, [pc, #456]	; (8005404 <HAL_SAI_Init+0x244>)
 800523c:	fba2 2303 	umull	r2, r3, r2, r3
 8005240:	08da      	lsrs	r2, r3, #3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8005246:	68f9      	ldr	r1, [r7, #12]
 8005248:	4b6e      	ldr	r3, [pc, #440]	; (8005404 <HAL_SAI_Init+0x244>)
 800524a:	fba3 2301 	umull	r2, r3, r3, r1
 800524e:	08da      	lsrs	r2, r3, #3
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	1aca      	subs	r2, r1, r3
 800525a:	2a08      	cmp	r2, #8
 800525c:	d904      	bls.n	8005268 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526c:	2b04      	cmp	r3, #4
 800526e:	d104      	bne.n	800527a <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	085a      	lsrs	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_SAI_Init+0xca>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d109      	bne.n	800529e <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_SAI_Init+0xd6>
 8005292:	2300      	movs	r3, #0
 8005294:	e001      	b.n	800529a <HAL_SAI_Init+0xda>
 8005296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	e008      	b.n	80052b0 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d102      	bne.n	80052ac <HAL_SAI_Init+0xec>
 80052a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052aa:	e000      	b.n	80052ae <HAL_SAI_Init+0xee>
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d811      	bhi.n	80052dc <HAL_SAI_Init+0x11c>
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d20b      	bcs.n	80052d4 <HAL_SAI_Init+0x114>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <HAL_SAI_Init+0x106>
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d003      	beq.n	80052cc <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 80052c4:	e00a      	b.n	80052dc <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	613b      	str	r3, [r7, #16]
    break;
 80052ca:	e008      	b.n	80052de <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80052cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052d0:	613b      	str	r3, [r7, #16]
    break;
 80052d2:	e004      	b.n	80052de <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80052d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052d8:	613b      	str	r3, [r7, #16]
    break;
 80052da:	e000      	b.n	80052de <HAL_SAI_Init+0x11e>
      break;
 80052dc:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6819      	ldr	r1, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	4b47      	ldr	r3, [pc, #284]	; (8005408 <HAL_SAI_Init+0x248>)
 80052ea:	400b      	ands	r3, r1
 80052ec:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6819      	ldr	r1, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005302:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	431a      	orrs	r2, r3
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8005316:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005322:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	051b      	lsls	r3, r3, #20
 800532a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005342:	f023 030f 	bic.w	r3, r3, #15
 8005346:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6859      	ldr	r1, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6899      	ldr	r1, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4b26      	ldr	r3, [pc, #152]	; (800540c <HAL_SAI_Init+0x24c>)
 8005372:	400b      	ands	r3, r1
 8005374:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6899      	ldr	r1, [r3, #8]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005380:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005386:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 800538c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 8005392:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005398:	3b01      	subs	r3, #1
 800539a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800539c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68d9      	ldr	r1, [r3, #12]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	f24f 0320 	movw	r3, #61472	; 0xf020
 80053b4:	400b      	ands	r3, r1
 80053b6:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68d9      	ldr	r1, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c6:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053cc:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80053ce:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d4:	3b01      	subs	r3, #1
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	cccccccd 	.word	0xcccccccd
 8005408:	ff05c010 	.word	0xff05c010
 800540c:	fff88000 	.word	0xfff88000

08005410 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	4613      	mov	r3, r2
 800541c:	80fb      	strh	r3, [r7, #6]
  if ((pData == NULL) || (Size == 0))
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <HAL_SAI_Receive_DMA+0x1a>
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e074      	b.n	8005518 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b01      	cmp	r3, #1
 8005438:	d16d      	bne.n	8005516 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_SAI_Receive_DMA+0x38>
 8005444:	2302      	movs	r3, #2
 8005446:	e067      	b.n	8005518 <HAL_SAI_Receive_DMA+0x108>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hsai->pBuffPtr = pData;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	669a      	str	r2, [r3, #104]	; 0x68
    hsai->XferSize = Size;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	88fa      	ldrh	r2, [r7, #6]
 800545a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    hsai->XferCount = Size;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	88fa      	ldrh	r2, [r7, #6]
 8005462:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2222      	movs	r2, #34	; 0x22
 8005472:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800547a:	4a29      	ldr	r2, [pc, #164]	; (8005520 <HAL_SAI_Receive_DMA+0x110>)
 800547c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005482:	4a28      	ldr	r2, [pc, #160]	; (8005524 <HAL_SAI_Receive_DMA+0x114>)
 8005484:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800548a:	4a27      	ldr	r2, [pc, #156]	; (8005528 <HAL_SAI_Receive_DMA+0x118>)
 800548c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005492:	2200      	movs	r2, #0
 8005494:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	331c      	adds	r3, #28
 80054a0:	4619      	mov	r1, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054a6:	461a      	mov	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80054ae:	f7fd fe13 	bl	80030d8 <HAL_DMA_Start_IT>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return  HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e029      	b.n	8005518 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80054c4:	2100      	movs	r1, #0
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 f968 	bl	800579c <SAI_InterruptFlag>
 80054cc:	4601      	mov	r1, r0
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80054ea:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d107      	bne.n	800550a <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005508:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	e000      	b.n	8005518 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8005516:	2302      	movs	r3, #2
  }
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	080058d9 	.word	0x080058d9
 8005524:	08005879 	.word	0x08005879
 8005528:	080058f5 	.word	0x080058f5

0800552c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <SAI_InitI2S+0x2a>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d103      	bne.n	8005572 <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	641a      	str	r2, [r3, #64]	; 0x40
 8005570:	e002      	b.n	8005578 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800557e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005586:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	661a      	str	r2, [r3, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e076      	b.n	8005690 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d107      	bne.n	80055b8 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80055b4:	655a      	str	r2, [r3, #84]	; 0x54
 80055b6:	e006      	b.n	80055c6 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055be:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Frame definition */
  switch (datasize)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d84f      	bhi.n	800566c <SAI_InitI2S+0x12c>
 80055cc:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <SAI_InitI2S+0x94>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	080055e5 	.word	0x080055e5
 80055d8:	08005607 	.word	0x08005607
 80055dc:	08005629 	.word	0x08005629
 80055e0:	0800564b 	.word	0x0800564b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2280      	movs	r2, #128	; 0x80
 80055e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	085b      	lsrs	r3, r3, #1
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	085b      	lsrs	r3, r3, #1
 80055f8:	011a      	lsls	r2, r3, #4
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2240      	movs	r2, #64	; 0x40
 8005602:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005604:	e034      	b.n	8005670 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2280      	movs	r2, #128	; 0x80
 800560a:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	085b      	lsrs	r3, r3, #1
 8005610:	019a      	lsls	r2, r3, #6
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	085b      	lsrs	r3, r3, #1
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2280      	movs	r2, #128	; 0x80
 8005624:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005626:	e023      	b.n	8005670 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	22c0      	movs	r2, #192	; 0xc0
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	019a      	lsls	r2, r3, #6
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	085b      	lsrs	r3, r3, #1
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2280      	movs	r2, #128	; 0x80
 8005646:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005648:	e012      	b.n	8005670 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	22e0      	movs	r2, #224	; 0xe0
 800564e:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	085b      	lsrs	r3, r3, #1
 8005654:	019a      	lsls	r2, r3, #6
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	085b      	lsrs	r3, r3, #1
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2280      	movs	r2, #128	; 0x80
 8005668:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800566a:	e001      	b.n	8005670 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e00f      	b.n	8005690 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d10b      	bne.n	800568e <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d102      	bne.n	8005682 <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2210      	movs	r2, #16
 8005680:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b02      	cmp	r3, #2
 8005686:	d102      	bne.n	800568e <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2208      	movs	r2, #8
 800568c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <SAI_InitPCM+0x2a>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d103      	bne.n	80056ce <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40
 80056cc:	e002      	b.n	80056d4 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056e0:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80056e8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056fc:	665a      	str	r2, [r3, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b04      	cmp	r3, #4
 8005702:	d103      	bne.n	800570c <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	649a      	str	r2, [r3, #72]	; 0x48
 800570a:	e002      	b.n	8005712 <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	220d      	movs	r2, #13
 8005710:	649a      	str	r2, [r3, #72]	; 0x48
  }

  switch (datasize)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b03      	cmp	r3, #3
 8005716:	d837      	bhi.n	8005788 <SAI_InitPCM+0xec>
 8005718:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <SAI_InitPCM+0x84>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005731 	.word	0x08005731
 8005724:	08005747 	.word	0x08005747
 8005728:	0800575d 	.word	0x0800575d
 800572c:	08005773 	.word	0x08005773
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2280      	movs	r2, #128	; 0x80
 8005734:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	011a      	lsls	r2, r3, #4
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2240      	movs	r2, #64	; 0x40
 8005742:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005744:	e022      	b.n	800578c <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2280      	movs	r2, #128	; 0x80
 800574a:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2280      	movs	r2, #128	; 0x80
 8005758:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800575a:	e017      	b.n	800578c <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	22c0      	movs	r2, #192	; 0xc0
 8005760:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2280      	movs	r2, #128	; 0x80
 800576e:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005770:	e00c      	b.n	800578c <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	22e0      	movs	r2, #224	; 0xe0
 8005776:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2280      	movs	r2, #128	; 0x80
 8005784:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8005786:	e001      	b.n	800578c <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop

0800579c <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d103      	bne.n	80057b8 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f043 0308 	orr.w	r3, r3, #8
 80057b6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d10b      	bne.n	80057d8 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d003      	beq.n	80057d0 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d103      	bne.n	80057d8 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f043 0310 	orr.w	r3, r3, #16
 80057d6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d003      	beq.n	80057e8 <SAI_InterruptFlag+0x4c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d104      	bne.n	80057f2 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	e003      	b.n	80057fa <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f043 0304 	orr.w	r3, r3, #4
 80057f8:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80057fa:	68fb      	ldr	r3, [r7, #12]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005810:	4b17      	ldr	r3, [pc, #92]	; (8005870 <SAI_Disable+0x68>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a17      	ldr	r2, [pc, #92]	; (8005874 <SAI_Disable+0x6c>)
 8005816:	fba2 2303 	umull	r2, r3, r2, r3
 800581a:	0b1b      	lsrs	r3, r3, #12
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005832:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	1e5a      	subs	r2, r3, #1
 8005838:	60fa      	str	r2, [r7, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10a      	bne.n	8005854 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005844:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	72fb      	strb	r3, [r7, #11]
      break;
 8005852:	e006      	b.n	8005862 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e8      	bne.n	8005834 <SAI_Disable+0x2c>

  return status;
 8005862:	7afb      	ldrb	r3, [r7, #11]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	20000040 	.word	0x20000040
 8005874:	95cbec1b 	.word	0x95cbec1b

08005878 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800588e:	d01c      	beq.n	80058ca <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800589e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80058a8:	2100      	movs	r1, #0
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f7ff ff76 	bl	800579c <SAI_InterruptFlag>
 80058b0:	4603      	mov	r3, r0
 80058b2:	43d9      	mvns	r1, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691a      	ldr	r2, [r3, #16]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	400a      	ands	r2, r1
 80058c0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f7fc fb10 	bl	8001ef0 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80058d0:	bf00      	nop
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f7fc faf4 	bl	8001ed4 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80058ec:	bf00      	nop
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005908:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005918:	2b01      	cmp	r3, #1
 800591a:	d004      	beq.n	8005926 <SAI_DMAError+0x32>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	2b01      	cmp	r3, #1
 8005924:	d112      	bne.n	800594c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005934:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f7ff ff66 	bl	8005808 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f7ff fded 	bl	800552c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005952:	bf00      	nop
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d00c      	beq.n	8005986 <SAI_BlockSynchroConfig+0x2a>
 800596c:	2b02      	cmp	r3, #2
 800596e:	d80d      	bhi.n	800598c <SAI_BlockSynchroConfig+0x30>
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <SAI_BlockSynchroConfig+0x1e>
 8005974:	2b01      	cmp	r3, #1
 8005976:	d003      	beq.n	8005980 <SAI_BlockSynchroConfig+0x24>
 8005978:	e008      	b.n	800598c <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
      break;
 800597e:	e008      	b.n	8005992 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005980:	2310      	movs	r3, #16
 8005982:	60fb      	str	r3, [r7, #12]
      break;
 8005984:	e005      	b.n	8005992 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005986:	2320      	movs	r3, #32
 8005988:	60fb      	str	r3, [r7, #12]
      break;
 800598a:	e002      	b.n	8005992 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]
      break;
 8005990:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b03      	cmp	r3, #3
 8005998:	d103      	bne.n	80059a2 <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a0b      	ldr	r2, [pc, #44]	; (80059d4 <SAI_BlockSynchroConfig+0x78>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d004      	beq.n	80059b6 <SAI_BlockSynchroConfig+0x5a>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a09      	ldr	r2, [pc, #36]	; (80059d8 <SAI_BlockSynchroConfig+0x7c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d103      	bne.n	80059be <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 80059b6:	4a09      	ldr	r2, [pc, #36]	; (80059dc <SAI_BlockSynchroConfig+0x80>)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	e003      	b.n	80059c6 <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80059be:	4a08      	ldr	r2, [pc, #32]	; (80059e0 <SAI_BlockSynchroConfig+0x84>)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	40015804 	.word	0x40015804
 80059d8:	40015824 	.word	0x40015824
 80059dc:	40015800 	.word	0x40015800
 80059e0:	40015c00 	.word	0x40015c00

080059e4 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a0a      	ldr	r2, [pc, #40]	; (8005a20 <SAI_GetInputClock+0x3c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d004      	beq.n	8005a04 <SAI_GetInputClock+0x20>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a09      	ldr	r2, [pc, #36]	; (8005a24 <SAI_GetInputClock+0x40>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d104      	bne.n	8005a0e <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005a04:	2004      	movs	r0, #4
 8005a06:	f7fe fd17 	bl	8004438 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	e003      	b.n	8005a16 <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005a0e:	2008      	movs	r0, #8
 8005a10:	f7fe fd12 	bl	8004438 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a14:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8005a16:	68fb      	ldr	r3, [r7, #12]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	40015804 	.word	0x40015804
 8005a24:	40015824 	.word	0x40015824

08005a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e07b      	b.n	8005b32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d108      	bne.n	8005a54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a4a:	d009      	beq.n	8005a60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	61da      	str	r2, [r3, #28]
 8005a52:	e005      	b.n	8005a60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d106      	bne.n	8005a80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fc fdb4 	bl	80025e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae4:	ea42 0103 	orr.w	r1, r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	0c1b      	lsrs	r3, r3, #16
 8005afe:	f003 0104 	and.w	r1, r3, #4
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	f003 0210 	and.w	r2, r3, #16
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69da      	ldr	r2, [r3, #28]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b088      	sub	sp, #32
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	603b      	str	r3, [r7, #0]
 8005b46:	4613      	mov	r3, r2
 8005b48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_SPI_Transmit+0x22>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e126      	b.n	8005daa <HAL_SPI_Transmit+0x270>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b64:	f7fd f8c8 	bl	8002cf8 <HAL_GetTick>
 8005b68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b6a:	88fb      	ldrh	r3, [r7, #6]
 8005b6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d002      	beq.n	8005b80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b7e:	e10b      	b.n	8005d98 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <HAL_SPI_Transmit+0x52>
 8005b86:	88fb      	ldrh	r3, [r7, #6]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b90:	e102      	b.n	8005d98 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2203      	movs	r2, #3
 8005b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	88fa      	ldrh	r2, [r7, #6]
 8005baa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	88fa      	ldrh	r2, [r7, #6]
 8005bb0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd8:	d10f      	bne.n	8005bfa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005be8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c04:	2b40      	cmp	r3, #64	; 0x40
 8005c06:	d007      	beq.n	8005c18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c20:	d14b      	bne.n	8005cba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <HAL_SPI_Transmit+0xf6>
 8005c2a:	8afb      	ldrh	r3, [r7, #22]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d13e      	bne.n	8005cae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	881a      	ldrh	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	1c9a      	adds	r2, r3, #2
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c54:	e02b      	b.n	8005cae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d112      	bne.n	8005c8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c68:	881a      	ldrh	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c74:	1c9a      	adds	r2, r3, #2
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c88:	e011      	b.n	8005cae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c8a:	f7fd f835 	bl	8002cf8 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d803      	bhi.n	8005ca2 <HAL_SPI_Transmit+0x168>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ca0:	d102      	bne.n	8005ca8 <HAL_SPI_Transmit+0x16e>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d102      	bne.n	8005cae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cac:	e074      	b.n	8005d98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1ce      	bne.n	8005c56 <HAL_SPI_Transmit+0x11c>
 8005cb8:	e04c      	b.n	8005d54 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_SPI_Transmit+0x18e>
 8005cc2:	8afb      	ldrh	r3, [r7, #22]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d140      	bne.n	8005d4a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	330c      	adds	r3, #12
 8005cd2:	7812      	ldrb	r2, [r2, #0]
 8005cd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005cee:	e02c      	b.n	8005d4a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d113      	bne.n	8005d26 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	330c      	adds	r3, #12
 8005d08:	7812      	ldrb	r2, [r2, #0]
 8005d0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d24:	e011      	b.n	8005d4a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d26:	f7fc ffe7 	bl	8002cf8 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d803      	bhi.n	8005d3e <HAL_SPI_Transmit+0x204>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d3c:	d102      	bne.n	8005d44 <HAL_SPI_Transmit+0x20a>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d102      	bne.n	8005d4a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d48:	e026      	b.n	8005d98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1cd      	bne.n	8005cf0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 fd21 	bl	80067a0 <SPI_EndRxTxTransaction>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2220      	movs	r2, #32
 8005d68:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10a      	bne.n	8005d88 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	613b      	str	r3, [r7, #16]
 8005d86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	77fb      	strb	r3, [r7, #31]
 8005d94:	e000      	b.n	8005d98 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005d96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005da8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3720      	adds	r7, #32
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b088      	sub	sp, #32
 8005db6:	af02      	add	r7, sp, #8
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	603b      	str	r3, [r7, #0]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dce:	d112      	bne.n	8005df6 <HAL_SPI_Receive+0x44>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10e      	bne.n	8005df6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2204      	movs	r2, #4
 8005ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005de0:	88fa      	ldrh	r2, [r7, #6]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	4613      	mov	r3, r2
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	68b9      	ldr	r1, [r7, #8]
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f8f1 	bl	8005fd4 <HAL_SPI_TransmitReceive>
 8005df2:	4603      	mov	r3, r0
 8005df4:	e0ea      	b.n	8005fcc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d101      	bne.n	8005e04 <HAL_SPI_Receive+0x52>
 8005e00:	2302      	movs	r3, #2
 8005e02:	e0e3      	b.n	8005fcc <HAL_SPI_Receive+0x21a>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e0c:	f7fc ff74 	bl	8002cf8 <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d002      	beq.n	8005e24 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005e1e:	2302      	movs	r3, #2
 8005e20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e22:	e0ca      	b.n	8005fba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <HAL_SPI_Receive+0x7e>
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d102      	bne.n	8005e36 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e34:	e0c1      	b.n	8005fba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2204      	movs	r2, #4
 8005e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	88fa      	ldrh	r2, [r7, #6]
 8005e4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	88fa      	ldrh	r2, [r7, #6]
 8005e54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e7c:	d10f      	bne.n	8005e9e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e9c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea8:	2b40      	cmp	r3, #64	; 0x40
 8005eaa:	d007      	beq.n	8005ebc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d162      	bne.n	8005f8a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005ec4:	e02e      	b.n	8005f24 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d115      	bne.n	8005f00 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f103 020c 	add.w	r2, r3, #12
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	7812      	ldrb	r2, [r2, #0]
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005efe:	e011      	b.n	8005f24 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f00:	f7fc fefa 	bl	8002cf8 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d803      	bhi.n	8005f18 <HAL_SPI_Receive+0x166>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f16:	d102      	bne.n	8005f1e <HAL_SPI_Receive+0x16c>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d102      	bne.n	8005f24 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f22:	e04a      	b.n	8005fba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1cb      	bne.n	8005ec6 <HAL_SPI_Receive+0x114>
 8005f2e:	e031      	b.n	8005f94 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d113      	bne.n	8005f66 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	b292      	uxth	r2, r2
 8005f4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	1c9a      	adds	r2, r3, #2
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f64:	e011      	b.n	8005f8a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f66:	f7fc fec7 	bl	8002cf8 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d803      	bhi.n	8005f7e <HAL_SPI_Receive+0x1cc>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f7c:	d102      	bne.n	8005f84 <HAL_SPI_Receive+0x1d2>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f88:	e017      	b.n	8005fba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1cd      	bne.n	8005f30 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	6839      	ldr	r1, [r7, #0]
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 fb9b 	bl	80066d4 <SPI_EndRxTransaction>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	75fb      	strb	r3, [r7, #23]
 8005fb6:	e000      	b.n	8005fba <HAL_SPI_Receive+0x208>
  }

error :
 8005fb8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08c      	sub	sp, #48	; 0x30
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_SPI_TransmitReceive+0x26>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e18a      	b.n	8006310 <HAL_SPI_TransmitReceive+0x33c>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006002:	f7fc fe79 	bl	8002cf8 <HAL_GetTick>
 8006006:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800600e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006018:	887b      	ldrh	r3, [r7, #2]
 800601a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800601c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006020:	2b01      	cmp	r3, #1
 8006022:	d00f      	beq.n	8006044 <HAL_SPI_TransmitReceive+0x70>
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800602a:	d107      	bne.n	800603c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d103      	bne.n	800603c <HAL_SPI_TransmitReceive+0x68>
 8006034:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006038:	2b04      	cmp	r3, #4
 800603a:	d003      	beq.n	8006044 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800603c:	2302      	movs	r3, #2
 800603e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006042:	e15b      	b.n	80062fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <HAL_SPI_TransmitReceive+0x82>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <HAL_SPI_TransmitReceive+0x82>
 8006050:	887b      	ldrh	r3, [r7, #2]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d103      	bne.n	800605e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800605c:	e14e      	b.n	80062fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b04      	cmp	r3, #4
 8006068:	d003      	beq.n	8006072 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2205      	movs	r2, #5
 800606e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	887a      	ldrh	r2, [r7, #2]
 8006082:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	887a      	ldrh	r2, [r7, #2]
 8006088:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	887a      	ldrh	r2, [r7, #2]
 8006094:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	887a      	ldrh	r2, [r7, #2]
 800609a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b2:	2b40      	cmp	r3, #64	; 0x40
 80060b4:	d007      	beq.n	80060c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ce:	d178      	bne.n	80061c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <HAL_SPI_TransmitReceive+0x10a>
 80060d8:	8b7b      	ldrh	r3, [r7, #26]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d166      	bne.n	80061ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e2:	881a      	ldrh	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ee:	1c9a      	adds	r2, r3, #2
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006102:	e053      	b.n	80061ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b02      	cmp	r3, #2
 8006110:	d11b      	bne.n	800614a <HAL_SPI_TransmitReceive+0x176>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d016      	beq.n	800614a <HAL_SPI_TransmitReceive+0x176>
 800611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611e:	2b01      	cmp	r3, #1
 8006120:	d113      	bne.n	800614a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	881a      	ldrh	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006132:	1c9a      	adds	r2, r3, #2
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b01      	cmp	r3, #1
 8006156:	d119      	bne.n	800618c <HAL_SPI_TransmitReceive+0x1b8>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d014      	beq.n	800618c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68da      	ldr	r2, [r3, #12]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	b292      	uxth	r2, r2
 800616e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	1c9a      	adds	r2, r3, #2
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006188:	2301      	movs	r3, #1
 800618a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800618c:	f7fc fdb4 	bl	8002cf8 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006198:	429a      	cmp	r2, r3
 800619a:	d807      	bhi.n	80061ac <HAL_SPI_TransmitReceive+0x1d8>
 800619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061a2:	d003      	beq.n	80061ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80061aa:	e0a7      	b.n	80062fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1a6      	bne.n	8006104 <HAL_SPI_TransmitReceive+0x130>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1a1      	bne.n	8006104 <HAL_SPI_TransmitReceive+0x130>
 80061c0:	e07c      	b.n	80062bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d002      	beq.n	80061d0 <HAL_SPI_TransmitReceive+0x1fc>
 80061ca:	8b7b      	ldrh	r3, [r7, #26]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d16b      	bne.n	80062a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	330c      	adds	r3, #12
 80061da:	7812      	ldrb	r2, [r2, #0]
 80061dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061f6:	e057      	b.n	80062a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b02      	cmp	r3, #2
 8006204:	d11c      	bne.n	8006240 <HAL_SPI_TransmitReceive+0x26c>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d017      	beq.n	8006240 <HAL_SPI_TransmitReceive+0x26c>
 8006210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006212:	2b01      	cmp	r3, #1
 8006214:	d114      	bne.n	8006240 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	330c      	adds	r3, #12
 8006220:	7812      	ldrb	r2, [r2, #0]
 8006222:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006232:	b29b      	uxth	r3, r3
 8006234:	3b01      	subs	r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b01      	cmp	r3, #1
 800624c:	d119      	bne.n	8006282 <HAL_SPI_TransmitReceive+0x2ae>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006252:	b29b      	uxth	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d014      	beq.n	8006282 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	b2d2      	uxtb	r2, r2
 8006264:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800627e:	2301      	movs	r3, #1
 8006280:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006282:	f7fc fd39 	bl	8002cf8 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800628e:	429a      	cmp	r2, r3
 8006290:	d803      	bhi.n	800629a <HAL_SPI_TransmitReceive+0x2c6>
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006298:	d102      	bne.n	80062a0 <HAL_SPI_TransmitReceive+0x2cc>
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	2b00      	cmp	r3, #0
 800629e:	d103      	bne.n	80062a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80062a6:	e029      	b.n	80062fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1a2      	bne.n	80061f8 <HAL_SPI_TransmitReceive+0x224>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d19d      	bne.n	80061f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 fa6d 	bl	80067a0 <SPI_EndRxTxTransaction>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d006      	beq.n	80062da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2220      	movs	r2, #32
 80062d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80062d8:	e010      	b.n	80062fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10b      	bne.n	80062fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062e2:	2300      	movs	r3, #0
 80062e4:	617b      	str	r3, [r7, #20]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	e000      	b.n	80062fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80062fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800630c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006310:	4618      	mov	r0, r3
 8006312:	3730      	adds	r7, #48	; 0x30
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	4613      	mov	r3, r2
 8006324:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_SPI_Transmit_DMA+0x20>
 8006334:	2302      	movs	r3, #2
 8006336:	e09b      	b.n	8006470 <HAL_SPI_Transmit_DMA+0x158>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b01      	cmp	r3, #1
 800634a:	d002      	beq.n	8006352 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800634c:	2302      	movs	r3, #2
 800634e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006350:	e089      	b.n	8006466 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <HAL_SPI_Transmit_DMA+0x46>
 8006358:	88fb      	ldrh	r3, [r7, #6]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d102      	bne.n	8006364 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006362:	e080      	b.n	8006466 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2203      	movs	r2, #3
 8006368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	88fa      	ldrh	r2, [r7, #6]
 800637c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	88fa      	ldrh	r2, [r7, #6]
 8006382:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063aa:	d10f      	bne.n	80063cc <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d0:	4a29      	ldr	r2, [pc, #164]	; (8006478 <HAL_SPI_Transmit_DMA+0x160>)
 80063d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d8:	4a28      	ldr	r2, [pc, #160]	; (800647c <HAL_SPI_Transmit_DMA+0x164>)
 80063da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e0:	4a27      	ldr	r2, [pc, #156]	; (8006480 <HAL_SPI_Transmit_DMA+0x168>)
 80063e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e8:	2200      	movs	r2, #0
 80063ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	4619      	mov	r1, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	330c      	adds	r3, #12
 80063fc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006402:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006404:	f7fc fe68 	bl	80030d8 <HAL_DMA_Start_IT>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00c      	beq.n	8006428 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006412:	f043 0210 	orr.w	r2, r3, #16
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006426:	e01e      	b.n	8006466 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006432:	2b40      	cmp	r3, #64	; 0x40
 8006434:	d007      	beq.n	8006446 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006444:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f042 0220 	orr.w	r2, r2, #32
 8006454:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f042 0202 	orr.w	r2, r2, #2
 8006464:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800646e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3718      	adds	r7, #24
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	08006569 	.word	0x08006569
 800647c:	080064c1 	.word	0x080064c1
 8006480:	08006585 	.word	0x08006585

08006484 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064ce:	f7fc fc13 	bl	8002cf8 <HAL_GetTick>
 80064d2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e2:	d03b      	beq.n	800655c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0220 	bic.w	r2, r2, #32
 80064f2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0202 	bic.w	r2, r2, #2
 8006502:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	2164      	movs	r1, #100	; 0x64
 8006508:	6978      	ldr	r0, [r7, #20]
 800650a:	f000 f949 	bl	80067a0 <SPI_EndRxTxTransaction>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d005      	beq.n	8006520 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006518:	f043 0220 	orr.w	r2, r3, #32
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10a      	bne.n	800653e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2200      	movs	r2, #0
 8006542:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006554:	6978      	ldr	r0, [r7, #20]
 8006556:	f7ff ffa9 	bl	80064ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800655a:	e002      	b.n	8006562 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800655c:	6978      	ldr	r0, [r7, #20]
 800655e:	f7ff ff91 	bl	8006484 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006574:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f7ff ff8e 	bl	8006498 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800657c:	bf00      	nop
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006590:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0203 	bic.w	r2, r2, #3
 80065a0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a6:	f043 0210 	orr.w	r2, r3, #16
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7ff ff78 	bl	80064ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80065bc:	bf00      	nop
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065d4:	f7fc fb90 	bl	8002cf8 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	1a9b      	subs	r3, r3, r2
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	4413      	add	r3, r2
 80065e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065e4:	f7fc fb88 	bl	8002cf8 <HAL_GetTick>
 80065e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065ea:	4b39      	ldr	r3, [pc, #228]	; (80066d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	015b      	lsls	r3, r3, #5
 80065f0:	0d1b      	lsrs	r3, r3, #20
 80065f2:	69fa      	ldr	r2, [r7, #28]
 80065f4:	fb02 f303 	mul.w	r3, r2, r3
 80065f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065fa:	e054      	b.n	80066a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006602:	d050      	beq.n	80066a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006604:	f7fc fb78 	bl	8002cf8 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	429a      	cmp	r2, r3
 8006612:	d902      	bls.n	800661a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d13d      	bne.n	8006696 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006628:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006632:	d111      	bne.n	8006658 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800663c:	d004      	beq.n	8006648 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006646:	d107      	bne.n	8006658 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006656:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006660:	d10f      	bne.n	8006682 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006680:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e017      	b.n	80066c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4013      	ands	r3, r2
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	bf0c      	ite	eq
 80066b6:	2301      	moveq	r3, #1
 80066b8:	2300      	movne	r3, #0
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	79fb      	ldrb	r3, [r7, #7]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d19b      	bne.n	80065fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3720      	adds	r7, #32
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000040 	.word	0x20000040

080066d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af02      	add	r7, sp, #8
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066e8:	d111      	bne.n	800670e <SPI_EndRxTransaction+0x3a>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066f2:	d004      	beq.n	80066fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066fc:	d107      	bne.n	800670e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800670c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006716:	d12a      	bne.n	800676e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006720:	d012      	beq.n	8006748 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2200      	movs	r2, #0
 800672a:	2180      	movs	r1, #128	; 0x80
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f7ff ff49 	bl	80065c4 <SPI_WaitFlagStateUntilTimeout>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d02d      	beq.n	8006794 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673c:	f043 0220 	orr.w	r2, r3, #32
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e026      	b.n	8006796 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2200      	movs	r2, #0
 8006750:	2101      	movs	r1, #1
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff ff36 	bl	80065c4 <SPI_WaitFlagStateUntilTimeout>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d01a      	beq.n	8006794 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006762:	f043 0220 	orr.w	r2, r3, #32
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e013      	b.n	8006796 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2200      	movs	r2, #0
 8006776:	2101      	movs	r1, #1
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7ff ff23 	bl	80065c4 <SPI_WaitFlagStateUntilTimeout>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d007      	beq.n	8006794 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006788:	f043 0220 	orr.w	r2, r3, #32
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e000      	b.n	8006796 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af02      	add	r7, sp, #8
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067ac:	4b1b      	ldr	r3, [pc, #108]	; (800681c <SPI_EndRxTxTransaction+0x7c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a1b      	ldr	r2, [pc, #108]	; (8006820 <SPI_EndRxTxTransaction+0x80>)
 80067b2:	fba2 2303 	umull	r2, r3, r2, r3
 80067b6:	0d5b      	lsrs	r3, r3, #21
 80067b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067bc:	fb02 f303 	mul.w	r3, r2, r3
 80067c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ca:	d112      	bne.n	80067f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2200      	movs	r2, #0
 80067d4:	2180      	movs	r1, #128	; 0x80
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f7ff fef4 	bl	80065c4 <SPI_WaitFlagStateUntilTimeout>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d016      	beq.n	8006810 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	f043 0220 	orr.w	r2, r3, #32
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e00f      	b.n	8006812 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006808:	2b80      	cmp	r3, #128	; 0x80
 800680a:	d0f2      	beq.n	80067f2 <SPI_EndRxTxTransaction+0x52>
 800680c:	e000      	b.n	8006810 <SPI_EndRxTxTransaction+0x70>
        break;
 800680e:	bf00      	nop
  }

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000040 	.word	0x20000040
 8006820:	165e9f81 	.word	0x165e9f81

08006824 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e041      	b.n	80068ba <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d106      	bne.n	8006850 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7fb ff14 	bl	8002678 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	3304      	adds	r3, #4
 8006860:	4619      	mov	r1, r3
 8006862:	4610      	mov	r0, r2
 8006864:	f000 fb22 	bl	8006eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d104      	bne.n	80068e2 <HAL_TIM_IC_Start_IT+0x1e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	e013      	b.n	800690a <HAL_TIM_IC_Start_IT+0x46>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b04      	cmp	r3, #4
 80068e6:	d104      	bne.n	80068f2 <HAL_TIM_IC_Start_IT+0x2e>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	e00b      	b.n	800690a <HAL_TIM_IC_Start_IT+0x46>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d104      	bne.n	8006902 <HAL_TIM_IC_Start_IT+0x3e>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	e003      	b.n	800690a <HAL_TIM_IC_Start_IT+0x46>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006908:	b2db      	uxtb	r3, r3
 800690a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d104      	bne.n	800691c <HAL_TIM_IC_Start_IT+0x58>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006918:	b2db      	uxtb	r3, r3
 800691a:	e013      	b.n	8006944 <HAL_TIM_IC_Start_IT+0x80>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2b04      	cmp	r3, #4
 8006920:	d104      	bne.n	800692c <HAL_TIM_IC_Start_IT+0x68>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006928:	b2db      	uxtb	r3, r3
 800692a:	e00b      	b.n	8006944 <HAL_TIM_IC_Start_IT+0x80>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b08      	cmp	r3, #8
 8006930:	d104      	bne.n	800693c <HAL_TIM_IC_Start_IT+0x78>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006938:	b2db      	uxtb	r3, r3
 800693a:	e003      	b.n	8006944 <HAL_TIM_IC_Start_IT+0x80>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006942:	b2db      	uxtb	r3, r3
 8006944:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006946:	7bbb      	ldrb	r3, [r7, #14]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d102      	bne.n	8006952 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800694c:	7b7b      	ldrb	r3, [r7, #13]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d001      	beq.n	8006956 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e0cc      	b.n	8006af0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d104      	bne.n	8006966 <HAL_TIM_IC_Start_IT+0xa2>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006964:	e013      	b.n	800698e <HAL_TIM_IC_Start_IT+0xca>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b04      	cmp	r3, #4
 800696a:	d104      	bne.n	8006976 <HAL_TIM_IC_Start_IT+0xb2>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006974:	e00b      	b.n	800698e <HAL_TIM_IC_Start_IT+0xca>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b08      	cmp	r3, #8
 800697a:	d104      	bne.n	8006986 <HAL_TIM_IC_Start_IT+0xc2>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006984:	e003      	b.n	800698e <HAL_TIM_IC_Start_IT+0xca>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2202      	movs	r2, #2
 800698a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d104      	bne.n	800699e <HAL_TIM_IC_Start_IT+0xda>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800699c:	e013      	b.n	80069c6 <HAL_TIM_IC_Start_IT+0x102>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	d104      	bne.n	80069ae <HAL_TIM_IC_Start_IT+0xea>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069ac:	e00b      	b.n	80069c6 <HAL_TIM_IC_Start_IT+0x102>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d104      	bne.n	80069be <HAL_TIM_IC_Start_IT+0xfa>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069bc:	e003      	b.n	80069c6 <HAL_TIM_IC_Start_IT+0x102>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2202      	movs	r2, #2
 80069c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b0c      	cmp	r3, #12
 80069ca:	d841      	bhi.n	8006a50 <HAL_TIM_IC_Start_IT+0x18c>
 80069cc:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <HAL_TIM_IC_Start_IT+0x110>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	08006a09 	.word	0x08006a09
 80069d8:	08006a51 	.word	0x08006a51
 80069dc:	08006a51 	.word	0x08006a51
 80069e0:	08006a51 	.word	0x08006a51
 80069e4:	08006a1b 	.word	0x08006a1b
 80069e8:	08006a51 	.word	0x08006a51
 80069ec:	08006a51 	.word	0x08006a51
 80069f0:	08006a51 	.word	0x08006a51
 80069f4:	08006a2d 	.word	0x08006a2d
 80069f8:	08006a51 	.word	0x08006a51
 80069fc:	08006a51 	.word	0x08006a51
 8006a00:	08006a51 	.word	0x08006a51
 8006a04:	08006a3f 	.word	0x08006a3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0202 	orr.w	r2, r2, #2
 8006a16:	60da      	str	r2, [r3, #12]
      break;
 8006a18:	e01d      	b.n	8006a56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0204 	orr.w	r2, r2, #4
 8006a28:	60da      	str	r2, [r3, #12]
      break;
 8006a2a:	e014      	b.n	8006a56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0208 	orr.w	r2, r2, #8
 8006a3a:	60da      	str	r2, [r3, #12]
      break;
 8006a3c:	e00b      	b.n	8006a56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0210 	orr.w	r2, r2, #16
 8006a4c:	60da      	str	r2, [r3, #12]
      break;
 8006a4e:	e002      	b.n	8006a56 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
      break;
 8006a54:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d148      	bne.n	8006aee <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2201      	movs	r2, #1
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fbeb 	bl	8007240 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a22      	ldr	r2, [pc, #136]	; (8006af8 <HAL_TIM_IC_Start_IT+0x234>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d022      	beq.n	8006aba <HAL_TIM_IC_Start_IT+0x1f6>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7c:	d01d      	beq.n	8006aba <HAL_TIM_IC_Start_IT+0x1f6>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1e      	ldr	r2, [pc, #120]	; (8006afc <HAL_TIM_IC_Start_IT+0x238>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d018      	beq.n	8006aba <HAL_TIM_IC_Start_IT+0x1f6>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a1c      	ldr	r2, [pc, #112]	; (8006b00 <HAL_TIM_IC_Start_IT+0x23c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_TIM_IC_Start_IT+0x1f6>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1b      	ldr	r2, [pc, #108]	; (8006b04 <HAL_TIM_IC_Start_IT+0x240>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00e      	beq.n	8006aba <HAL_TIM_IC_Start_IT+0x1f6>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a19      	ldr	r2, [pc, #100]	; (8006b08 <HAL_TIM_IC_Start_IT+0x244>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d009      	beq.n	8006aba <HAL_TIM_IC_Start_IT+0x1f6>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a18      	ldr	r2, [pc, #96]	; (8006b0c <HAL_TIM_IC_Start_IT+0x248>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d004      	beq.n	8006aba <HAL_TIM_IC_Start_IT+0x1f6>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a16      	ldr	r2, [pc, #88]	; (8006b10 <HAL_TIM_IC_Start_IT+0x24c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d111      	bne.n	8006ade <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b06      	cmp	r3, #6
 8006aca:	d010      	beq.n	8006aee <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 0201 	orr.w	r2, r2, #1
 8006ada:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006adc:	e007      	b.n	8006aee <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f042 0201 	orr.w	r2, r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40010000 	.word	0x40010000
 8006afc:	40000400 	.word	0x40000400
 8006b00:	40000800 	.word	0x40000800
 8006b04:	40000c00 	.word	0x40000c00
 8006b08:	40010400 	.word	0x40010400
 8006b0c:	40014000 	.word	0x40014000
 8006b10:	40001800 	.word	0x40001800

08006b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d122      	bne.n	8006b70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d11b      	bne.n	8006b70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f06f 0202 	mvn.w	r2, #2
 8006b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fa fd9c 	bl	8001694 <HAL_TIM_IC_CaptureCallback>
 8006b5c:	e005      	b.n	8006b6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f986 	bl	8006e70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f98d 	bl	8006e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f003 0304 	and.w	r3, r3, #4
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	d122      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	d11b      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0204 	mvn.w	r2, #4
 8006b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7fa fd72 	bl	8001694 <HAL_TIM_IC_CaptureCallback>
 8006bb0:	e005      	b.n	8006bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f95c 	bl	8006e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f963 	bl	8006e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f003 0308 	and.w	r3, r3, #8
 8006bce:	2b08      	cmp	r3, #8
 8006bd0:	d122      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d11b      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f06f 0208 	mvn.w	r2, #8
 8006be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2204      	movs	r2, #4
 8006bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7fa fd48 	bl	8001694 <HAL_TIM_IC_CaptureCallback>
 8006c04:	e005      	b.n	8006c12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f932 	bl	8006e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f939 	bl	8006e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	f003 0310 	and.w	r3, r3, #16
 8006c22:	2b10      	cmp	r3, #16
 8006c24:	d122      	bne.n	8006c6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f003 0310 	and.w	r3, r3, #16
 8006c30:	2b10      	cmp	r3, #16
 8006c32:	d11b      	bne.n	8006c6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f06f 0210 	mvn.w	r2, #16
 8006c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2208      	movs	r2, #8
 8006c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7fa fd1e 	bl	8001694 <HAL_TIM_IC_CaptureCallback>
 8006c58:	e005      	b.n	8006c66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f908 	bl	8006e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f90f 	bl	8006e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d10e      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d107      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f06f 0201 	mvn.w	r2, #1
 8006c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f8e2 	bl	8006e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca2:	2b80      	cmp	r3, #128	; 0x80
 8006ca4:	d10e      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb0:	2b80      	cmp	r3, #128	; 0x80
 8006cb2:	d107      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fb6a 	bl	8007398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cce:	2b40      	cmp	r3, #64	; 0x40
 8006cd0:	d10e      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cdc:	2b40      	cmp	r3, #64	; 0x40
 8006cde:	d107      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f8d4 	bl	8006e98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f003 0320 	and.w	r3, r3, #32
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	d10e      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f003 0320 	and.w	r3, r3, #32
 8006d08:	2b20      	cmp	r3, #32
 8006d0a:	d107      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f06f 0220 	mvn.w	r2, #32
 8006d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fb34 	bl	8007384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d1c:	bf00      	nop
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d101      	bne.n	8006d42 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006d3e:	2302      	movs	r3, #2
 8006d40:	e088      	b.n	8006e54 <HAL_TIM_IC_ConfigChannel+0x130>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d11b      	bne.n	8006d88 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6818      	ldr	r0, [r3, #0]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	6819      	ldr	r1, [r3, #0]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f000 f944 	bl	8006fec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	699a      	ldr	r2, [r3, #24]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 020c 	bic.w	r2, r2, #12
 8006d72:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6999      	ldr	r1, [r3, #24]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	689a      	ldr	r2, [r3, #8]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	619a      	str	r2, [r3, #24]
 8006d86:	e060      	b.n	8006e4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d11c      	bne.n	8006dc8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	6819      	ldr	r1, [r3, #0]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f000 f999 	bl	80070d4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	699a      	ldr	r2, [r3, #24]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006db0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6999      	ldr	r1, [r3, #24]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	021a      	lsls	r2, r3, #8
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	619a      	str	r2, [r3, #24]
 8006dc6:	e040      	b.n	8006e4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b08      	cmp	r3, #8
 8006dcc:	d11b      	bne.n	8006e06 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6819      	ldr	r1, [r3, #0]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f000 f9b6 	bl	800714e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69da      	ldr	r2, [r3, #28]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 020c 	bic.w	r2, r2, #12
 8006df0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	69d9      	ldr	r1, [r3, #28]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	61da      	str	r2, [r3, #28]
 8006e04:	e021      	b.n	8006e4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b0c      	cmp	r3, #12
 8006e0a:	d11c      	bne.n	8006e46 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	6819      	ldr	r1, [r3, #0]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f000 f9d3 	bl	80071c6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	69da      	ldr	r2, [r3, #28]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006e2e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69d9      	ldr	r1, [r3, #28]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	021a      	lsls	r2, r3, #8
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	61da      	str	r2, [r3, #28]
 8006e44:	e001      	b.n	8006e4a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3718      	adds	r7, #24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a40      	ldr	r2, [pc, #256]	; (8006fc0 <TIM_Base_SetConfig+0x114>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d013      	beq.n	8006eec <TIM_Base_SetConfig+0x40>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eca:	d00f      	beq.n	8006eec <TIM_Base_SetConfig+0x40>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a3d      	ldr	r2, [pc, #244]	; (8006fc4 <TIM_Base_SetConfig+0x118>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00b      	beq.n	8006eec <TIM_Base_SetConfig+0x40>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a3c      	ldr	r2, [pc, #240]	; (8006fc8 <TIM_Base_SetConfig+0x11c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d007      	beq.n	8006eec <TIM_Base_SetConfig+0x40>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a3b      	ldr	r2, [pc, #236]	; (8006fcc <TIM_Base_SetConfig+0x120>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d003      	beq.n	8006eec <TIM_Base_SetConfig+0x40>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a3a      	ldr	r2, [pc, #232]	; (8006fd0 <TIM_Base_SetConfig+0x124>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d108      	bne.n	8006efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a2f      	ldr	r2, [pc, #188]	; (8006fc0 <TIM_Base_SetConfig+0x114>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d02b      	beq.n	8006f5e <TIM_Base_SetConfig+0xb2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0c:	d027      	beq.n	8006f5e <TIM_Base_SetConfig+0xb2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a2c      	ldr	r2, [pc, #176]	; (8006fc4 <TIM_Base_SetConfig+0x118>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d023      	beq.n	8006f5e <TIM_Base_SetConfig+0xb2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a2b      	ldr	r2, [pc, #172]	; (8006fc8 <TIM_Base_SetConfig+0x11c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d01f      	beq.n	8006f5e <TIM_Base_SetConfig+0xb2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a2a      	ldr	r2, [pc, #168]	; (8006fcc <TIM_Base_SetConfig+0x120>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d01b      	beq.n	8006f5e <TIM_Base_SetConfig+0xb2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a29      	ldr	r2, [pc, #164]	; (8006fd0 <TIM_Base_SetConfig+0x124>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d017      	beq.n	8006f5e <TIM_Base_SetConfig+0xb2>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a28      	ldr	r2, [pc, #160]	; (8006fd4 <TIM_Base_SetConfig+0x128>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d013      	beq.n	8006f5e <TIM_Base_SetConfig+0xb2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a27      	ldr	r2, [pc, #156]	; (8006fd8 <TIM_Base_SetConfig+0x12c>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00f      	beq.n	8006f5e <TIM_Base_SetConfig+0xb2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a26      	ldr	r2, [pc, #152]	; (8006fdc <TIM_Base_SetConfig+0x130>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d00b      	beq.n	8006f5e <TIM_Base_SetConfig+0xb2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a25      	ldr	r2, [pc, #148]	; (8006fe0 <TIM_Base_SetConfig+0x134>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d007      	beq.n	8006f5e <TIM_Base_SetConfig+0xb2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a24      	ldr	r2, [pc, #144]	; (8006fe4 <TIM_Base_SetConfig+0x138>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d003      	beq.n	8006f5e <TIM_Base_SetConfig+0xb2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a23      	ldr	r2, [pc, #140]	; (8006fe8 <TIM_Base_SetConfig+0x13c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d108      	bne.n	8006f70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a0a      	ldr	r2, [pc, #40]	; (8006fc0 <TIM_Base_SetConfig+0x114>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d003      	beq.n	8006fa4 <TIM_Base_SetConfig+0xf8>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a0c      	ldr	r2, [pc, #48]	; (8006fd0 <TIM_Base_SetConfig+0x124>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d103      	bne.n	8006fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	691a      	ldr	r2, [r3, #16]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	615a      	str	r2, [r3, #20]
}
 8006fb2:	bf00      	nop
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	40010000 	.word	0x40010000
 8006fc4:	40000400 	.word	0x40000400
 8006fc8:	40000800 	.word	0x40000800
 8006fcc:	40000c00 	.word	0x40000c00
 8006fd0:	40010400 	.word	0x40010400
 8006fd4:	40014000 	.word	0x40014000
 8006fd8:	40014400 	.word	0x40014400
 8006fdc:	40014800 	.word	0x40014800
 8006fe0:	40001800 	.word	0x40001800
 8006fe4:	40001c00 	.word	0x40001c00
 8006fe8:	40002000 	.word	0x40002000

08006fec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
 8006ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	f023 0201 	bic.w	r2, r3, #1
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4a28      	ldr	r2, [pc, #160]	; (80070b8 <TIM_TI1_SetConfig+0xcc>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d01b      	beq.n	8007052 <TIM_TI1_SetConfig+0x66>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007020:	d017      	beq.n	8007052 <TIM_TI1_SetConfig+0x66>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	4a25      	ldr	r2, [pc, #148]	; (80070bc <TIM_TI1_SetConfig+0xd0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d013      	beq.n	8007052 <TIM_TI1_SetConfig+0x66>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	4a24      	ldr	r2, [pc, #144]	; (80070c0 <TIM_TI1_SetConfig+0xd4>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00f      	beq.n	8007052 <TIM_TI1_SetConfig+0x66>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	4a23      	ldr	r2, [pc, #140]	; (80070c4 <TIM_TI1_SetConfig+0xd8>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d00b      	beq.n	8007052 <TIM_TI1_SetConfig+0x66>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4a22      	ldr	r2, [pc, #136]	; (80070c8 <TIM_TI1_SetConfig+0xdc>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d007      	beq.n	8007052 <TIM_TI1_SetConfig+0x66>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4a21      	ldr	r2, [pc, #132]	; (80070cc <TIM_TI1_SetConfig+0xe0>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d003      	beq.n	8007052 <TIM_TI1_SetConfig+0x66>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	4a20      	ldr	r2, [pc, #128]	; (80070d0 <TIM_TI1_SetConfig+0xe4>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d101      	bne.n	8007056 <TIM_TI1_SetConfig+0x6a>
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <TIM_TI1_SetConfig+0x6c>
 8007056:	2300      	movs	r3, #0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d008      	beq.n	800706e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f023 0303 	bic.w	r3, r3, #3
 8007062:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4313      	orrs	r3, r2
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	e003      	b.n	8007076 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f043 0301 	orr.w	r3, r3, #1
 8007074:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800707c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	011b      	lsls	r3, r3, #4
 8007082:	b2db      	uxtb	r3, r3
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f023 030a 	bic.w	r3, r3, #10
 8007090:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	f003 030a 	and.w	r3, r3, #10
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	621a      	str	r2, [r3, #32]
}
 80070aa:	bf00      	nop
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	40010000 	.word	0x40010000
 80070bc:	40000400 	.word	0x40000400
 80070c0:	40000800 	.word	0x40000800
 80070c4:	40000c00 	.word	0x40000c00
 80070c8:	40010400 	.word	0x40010400
 80070cc:	40014000 	.word	0x40014000
 80070d0:	40001800 	.word	0x40001800

080070d4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f023 0210 	bic.w	r2, r3, #16
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007100:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	021b      	lsls	r3, r3, #8
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007112:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	031b      	lsls	r3, r3, #12
 8007118:	b29b      	uxth	r3, r3
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	4313      	orrs	r3, r2
 800711e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007126:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	011b      	lsls	r3, r3, #4
 800712c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	4313      	orrs	r3, r2
 8007134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	621a      	str	r2, [r3, #32]
}
 8007142:	bf00      	nop
 8007144:	371c      	adds	r7, #28
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800714e:	b480      	push	{r7}
 8007150:	b087      	sub	sp, #28
 8007152:	af00      	add	r7, sp, #0
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	60b9      	str	r1, [r7, #8]
 8007158:	607a      	str	r2, [r7, #4]
 800715a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f023 0303 	bic.w	r3, r3, #3
 800717a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4313      	orrs	r3, r2
 8007182:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800718a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	011b      	lsls	r3, r3, #4
 8007190:	b2db      	uxtb	r3, r3
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	4313      	orrs	r3, r2
 8007196:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800719e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	021b      	lsls	r3, r3, #8
 80071a4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	621a      	str	r2, [r3, #32]
}
 80071ba:	bf00      	nop
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b087      	sub	sp, #28
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	607a      	str	r2, [r7, #4]
 80071d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	69db      	ldr	r3, [r3, #28]
 80071e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	021b      	lsls	r3, r3, #8
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007204:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	031b      	lsls	r3, r3, #12
 800720a:	b29b      	uxth	r3, r3
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	4313      	orrs	r3, r2
 8007210:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007218:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	031b      	lsls	r3, r3, #12
 800721e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4313      	orrs	r3, r2
 8007226:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	621a      	str	r2, [r3, #32]
}
 8007234:	bf00      	nop
 8007236:	371c      	adds	r7, #28
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007240:	b480      	push	{r7}
 8007242:	b087      	sub	sp, #28
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f003 031f 	and.w	r3, r3, #31
 8007252:	2201      	movs	r2, #1
 8007254:	fa02 f303 	lsl.w	r3, r2, r3
 8007258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a1a      	ldr	r2, [r3, #32]
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	43db      	mvns	r3, r3
 8007262:	401a      	ands	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6a1a      	ldr	r2, [r3, #32]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f003 031f 	and.w	r3, r3, #31
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	fa01 f303 	lsl.w	r3, r1, r3
 8007278:	431a      	orrs	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	621a      	str	r2, [r3, #32]
}
 800727e:	bf00      	nop
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
	...

0800728c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e05a      	b.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a21      	ldr	r2, [pc, #132]	; (8007368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d022      	beq.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f0:	d01d      	beq.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a1d      	ldr	r2, [pc, #116]	; (800736c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d018      	beq.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a1b      	ldr	r2, [pc, #108]	; (8007370 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d013      	beq.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a1a      	ldr	r2, [pc, #104]	; (8007374 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d00e      	beq.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a18      	ldr	r2, [pc, #96]	; (8007378 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d009      	beq.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a17      	ldr	r2, [pc, #92]	; (800737c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d004      	beq.n	800732e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a15      	ldr	r2, [pc, #84]	; (8007380 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d10c      	bne.n	8007348 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007334:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	4313      	orrs	r3, r2
 800733e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	40010000 	.word	0x40010000
 800736c:	40000400 	.word	0x40000400
 8007370:	40000800 	.word	0x40000800
 8007374:	40000c00 	.word	0x40000c00
 8007378:	40010400 	.word	0x40010400
 800737c:	40014000 	.word	0x40014000
 8007380:	40001800 	.word	0x40001800

08007384 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e03f      	b.n	800743e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d106      	bne.n	80073d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7fb f99e 	bl	8002714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2224      	movs	r2, #36	; 0x24
 80073dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 ff65 	bl	80082c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	691a      	ldr	r2, [r3, #16]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	695a      	ldr	r2, [r3, #20]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007414:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68da      	ldr	r2, [r3, #12]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007424:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2220      	movs	r2, #32
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2220      	movs	r2, #32
 8007438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b08a      	sub	sp, #40	; 0x28
 800744a:	af02      	add	r7, sp, #8
 800744c:	60f8      	str	r0, [r7, #12]
 800744e:	60b9      	str	r1, [r7, #8]
 8007450:	603b      	str	r3, [r7, #0]
 8007452:	4613      	mov	r3, r2
 8007454:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b20      	cmp	r3, #32
 8007464:	d17c      	bne.n	8007560 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d002      	beq.n	8007472 <HAL_UART_Transmit+0x2c>
 800746c:	88fb      	ldrh	r3, [r7, #6]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e075      	b.n	8007562 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800747c:	2b01      	cmp	r3, #1
 800747e:	d101      	bne.n	8007484 <HAL_UART_Transmit+0x3e>
 8007480:	2302      	movs	r3, #2
 8007482:	e06e      	b.n	8007562 <HAL_UART_Transmit+0x11c>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2221      	movs	r2, #33	; 0x21
 8007496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800749a:	f7fb fc2d 	bl	8002cf8 <HAL_GetTick>
 800749e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	88fa      	ldrh	r2, [r7, #6]
 80074a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	88fa      	ldrh	r2, [r7, #6]
 80074aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b4:	d108      	bne.n	80074c8 <HAL_UART_Transmit+0x82>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d104      	bne.n	80074c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80074be:	2300      	movs	r3, #0
 80074c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	61bb      	str	r3, [r7, #24]
 80074c6:	e003      	b.n	80074d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074cc:	2300      	movs	r3, #0
 80074ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80074d8:	e02a      	b.n	8007530 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	2200      	movs	r2, #0
 80074e2:	2180      	movs	r1, #128	; 0x80
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f000 fc21 	bl	8007d2c <UART_WaitOnFlagUntilTimeout>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e036      	b.n	8007562 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10b      	bne.n	8007512 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007508:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	3302      	adds	r3, #2
 800750e:	61bb      	str	r3, [r7, #24]
 8007510:	e007      	b.n	8007522 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	781a      	ldrb	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	3301      	adds	r3, #1
 8007520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007526:	b29b      	uxth	r3, r3
 8007528:	3b01      	subs	r3, #1
 800752a:	b29a      	uxth	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007534:	b29b      	uxth	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1cf      	bne.n	80074da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2200      	movs	r2, #0
 8007542:	2140      	movs	r1, #64	; 0x40
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fbf1 	bl	8007d2c <UART_WaitOnFlagUntilTimeout>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e006      	b.n	8007562 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2220      	movs	r2, #32
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	e000      	b.n	8007562 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007560:	2302      	movs	r3, #2
  }
}
 8007562:	4618      	mov	r0, r3
 8007564:	3720      	adds	r7, #32
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	60f8      	str	r0, [r7, #12]
 8007572:	60b9      	str	r1, [r7, #8]
 8007574:	4613      	mov	r3, r2
 8007576:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b20      	cmp	r3, #32
 8007582:	d11d      	bne.n	80075c0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <HAL_UART_Receive_DMA+0x26>
 800758a:	88fb      	ldrh	r3, [r7, #6]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e016      	b.n	80075c2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800759a:	2b01      	cmp	r3, #1
 800759c:	d101      	bne.n	80075a2 <HAL_UART_Receive_DMA+0x38>
 800759e:	2302      	movs	r3, #2
 80075a0:	e00f      	b.n	80075c2 <HAL_UART_Receive_DMA+0x58>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80075b0:	88fb      	ldrh	r3, [r7, #6]
 80075b2:	461a      	mov	r2, r3
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 fc26 	bl	8007e08 <UART_Start_Receive_DMA>
 80075bc:	4603      	mov	r3, r0
 80075be:	e000      	b.n	80075c2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80075c0:	2302      	movs	r3, #2
  }
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b0ba      	sub	sp, #232	; 0xe8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80075fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800760a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10f      	bne.n	8007632 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b00      	cmp	r3, #0
 800761c:	d009      	beq.n	8007632 <HAL_UART_IRQHandler+0x66>
 800761e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007622:	f003 0320 	and.w	r3, r3, #32
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fd8d 	bl	800814a <UART_Receive_IT>
      return;
 8007630:	e256      	b.n	8007ae0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 80de 	beq.w	80077f8 <HAL_UART_IRQHandler+0x22c>
 800763c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d106      	bne.n	8007656 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800764c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 80d1 	beq.w	80077f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <HAL_UART_IRQHandler+0xae>
 8007662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	f043 0201 	orr.w	r2, r3, #1
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800767a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767e:	f003 0304 	and.w	r3, r3, #4
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00b      	beq.n	800769e <HAL_UART_IRQHandler+0xd2>
 8007686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007696:	f043 0202 	orr.w	r2, r3, #2
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800769e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00b      	beq.n	80076c2 <HAL_UART_IRQHandler+0xf6>
 80076aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d005      	beq.n	80076c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	f043 0204 	orr.w	r2, r3, #4
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80076c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c6:	f003 0308 	and.w	r3, r3, #8
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d011      	beq.n	80076f2 <HAL_UART_IRQHandler+0x126>
 80076ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d2:	f003 0320 	and.w	r3, r3, #32
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d105      	bne.n	80076e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80076da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d005      	beq.n	80076f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	f043 0208 	orr.w	r2, r3, #8
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 81ed 	beq.w	8007ad6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007700:	f003 0320 	and.w	r3, r3, #32
 8007704:	2b00      	cmp	r3, #0
 8007706:	d008      	beq.n	800771a <HAL_UART_IRQHandler+0x14e>
 8007708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fd18 	bl	800814a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007724:	2b40      	cmp	r3, #64	; 0x40
 8007726:	bf0c      	ite	eq
 8007728:	2301      	moveq	r3, #1
 800772a:	2300      	movne	r3, #0
 800772c:	b2db      	uxtb	r3, r3
 800772e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	f003 0308 	and.w	r3, r3, #8
 800773a:	2b00      	cmp	r3, #0
 800773c:	d103      	bne.n	8007746 <HAL_UART_IRQHandler+0x17a>
 800773e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007742:	2b00      	cmp	r3, #0
 8007744:	d04f      	beq.n	80077e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fc20 	bl	8007f8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007756:	2b40      	cmp	r3, #64	; 0x40
 8007758:	d141      	bne.n	80077de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3314      	adds	r3, #20
 8007760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007768:	e853 3f00 	ldrex	r3, [r3]
 800776c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007770:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3314      	adds	r3, #20
 8007782:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007786:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800778a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007792:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800779e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1d9      	bne.n	800775a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d013      	beq.n	80077d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b2:	4a7d      	ldr	r2, [pc, #500]	; (80079a8 <HAL_UART_IRQHandler+0x3dc>)
 80077b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fb fd54 	bl	8003268 <HAL_DMA_Abort_IT>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d016      	beq.n	80077f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077d0:	4610      	mov	r0, r2
 80077d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d4:	e00e      	b.n	80077f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f99a 	bl	8007b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077dc:	e00a      	b.n	80077f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f996 	bl	8007b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e4:	e006      	b.n	80077f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f992 	bl	8007b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80077f2:	e170      	b.n	8007ad6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f4:	bf00      	nop
    return;
 80077f6:	e16e      	b.n	8007ad6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	f040 814a 	bne.w	8007a96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007806:	f003 0310 	and.w	r3, r3, #16
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 8143 	beq.w	8007a96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007814:	f003 0310 	and.w	r3, r3, #16
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 813c 	beq.w	8007a96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800781e:	2300      	movs	r3, #0
 8007820:	60bb      	str	r3, [r7, #8]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	60bb      	str	r3, [r7, #8]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	60bb      	str	r3, [r7, #8]
 8007832:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783e:	2b40      	cmp	r3, #64	; 0x40
 8007840:	f040 80b4 	bne.w	80079ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007850:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 8140 	beq.w	8007ada <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800785e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007862:	429a      	cmp	r2, r3
 8007864:	f080 8139 	bcs.w	8007ada <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800786e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800787a:	f000 8088 	beq.w	800798e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	330c      	adds	r3, #12
 8007884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800789c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	330c      	adds	r3, #12
 80078a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80078aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078ba:	e841 2300 	strex	r3, r2, [r1]
 80078be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1d9      	bne.n	800787e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3314      	adds	r3, #20
 80078d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078d4:	e853 3f00 	ldrex	r3, [r3]
 80078d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078dc:	f023 0301 	bic.w	r3, r3, #1
 80078e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3314      	adds	r3, #20
 80078ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80078f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e1      	bne.n	80078ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3314      	adds	r3, #20
 800790c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007910:	e853 3f00 	ldrex	r3, [r3]
 8007914:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800791c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3314      	adds	r3, #20
 8007926:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800792a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800792c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007930:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007932:	e841 2300 	strex	r3, r2, [r1]
 8007936:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1e3      	bne.n	8007906 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2220      	movs	r2, #32
 8007942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	330c      	adds	r3, #12
 8007952:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007956:	e853 3f00 	ldrex	r3, [r3]
 800795a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800795c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800795e:	f023 0310 	bic.w	r3, r3, #16
 8007962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	330c      	adds	r3, #12
 800796c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007970:	65ba      	str	r2, [r7, #88]	; 0x58
 8007972:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007974:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007976:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007978:	e841 2300 	strex	r3, r2, [r1]
 800797c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800797e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1e3      	bne.n	800794c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007988:	4618      	mov	r0, r3
 800798a:	f7fb fbfd 	bl	8003188 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007996:	b29b      	uxth	r3, r3
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	b29b      	uxth	r3, r3
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f8c0 	bl	8007b24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079a4:	e099      	b.n	8007ada <HAL_UART_IRQHandler+0x50e>
 80079a6:	bf00      	nop
 80079a8:	08008053 	.word	0x08008053
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 808b 	beq.w	8007ade <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80079c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 8086 	beq.w	8007ade <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	330c      	adds	r3, #12
 80079d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	330c      	adds	r3, #12
 80079f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80079f6:	647a      	str	r2, [r7, #68]	; 0x44
 80079f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e3      	bne.n	80079d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3314      	adds	r3, #20
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	623b      	str	r3, [r7, #32]
   return(result);
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	f023 0301 	bic.w	r3, r3, #1
 8007a20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3314      	adds	r3, #20
 8007a2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a2e:	633a      	str	r2, [r7, #48]	; 0x30
 8007a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e3      	bne.n	8007a0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	330c      	adds	r3, #12
 8007a56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	e853 3f00 	ldrex	r3, [r3]
 8007a5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0310 	bic.w	r3, r3, #16
 8007a66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	330c      	adds	r3, #12
 8007a70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a74:	61fa      	str	r2, [r7, #28]
 8007a76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	69b9      	ldr	r1, [r7, #24]
 8007a7a:	69fa      	ldr	r2, [r7, #28]
 8007a7c:	e841 2300 	strex	r3, r2, [r1]
 8007a80:	617b      	str	r3, [r7, #20]
   return(result);
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1e3      	bne.n	8007a50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f848 	bl	8007b24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a94:	e023      	b.n	8007ade <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d009      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x4ea>
 8007aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fae3 	bl	800807a <UART_Transmit_IT>
    return;
 8007ab4:	e014      	b.n	8007ae0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00e      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x514>
 8007ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d008      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fb23 	bl	800811a <UART_EndTransmit_IT>
    return;
 8007ad4:	e004      	b.n	8007ae0 <HAL_UART_IRQHandler+0x514>
    return;
 8007ad6:	bf00      	nop
 8007ad8:	e002      	b.n	8007ae0 <HAL_UART_IRQHandler+0x514>
      return;
 8007ada:	bf00      	nop
 8007adc:	e000      	b.n	8007ae0 <HAL_UART_IRQHandler+0x514>
      return;
 8007ade:	bf00      	nop
  }
}
 8007ae0:	37e8      	adds	r7, #232	; 0xe8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop

08007ae8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b09c      	sub	sp, #112	; 0x70
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d172      	bne.n	8007c3e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	330c      	adds	r3, #12
 8007b64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b74:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	330c      	adds	r3, #12
 8007b7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b80:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b86:	e841 2300 	strex	r3, r2, [r1]
 8007b8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e5      	bne.n	8007b5e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3314      	adds	r3, #20
 8007b98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9c:	e853 3f00 	ldrex	r3, [r3]
 8007ba0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba4:	f023 0301 	bic.w	r3, r3, #1
 8007ba8:	667b      	str	r3, [r7, #100]	; 0x64
 8007baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3314      	adds	r3, #20
 8007bb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007bb2:	647a      	str	r2, [r7, #68]	; 0x44
 8007bb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bba:	e841 2300 	strex	r3, r2, [r1]
 8007bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e5      	bne.n	8007b92 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3314      	adds	r3, #20
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	e853 3f00 	ldrex	r3, [r3]
 8007bd4:	623b      	str	r3, [r7, #32]
   return(result);
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bdc:	663b      	str	r3, [r7, #96]	; 0x60
 8007bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3314      	adds	r3, #20
 8007be4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007be6:	633a      	str	r2, [r7, #48]	; 0x30
 8007be8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bee:	e841 2300 	strex	r3, r2, [r1]
 8007bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1e5      	bne.n	8007bc6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d119      	bne.n	8007c3e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	330c      	adds	r3, #12
 8007c10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	e853 3f00 	ldrex	r3, [r3]
 8007c18:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f023 0310 	bic.w	r3, r3, #16
 8007c20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	330c      	adds	r3, #12
 8007c28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c2a:	61fa      	str	r2, [r7, #28]
 8007c2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	69b9      	ldr	r1, [r7, #24]
 8007c30:	69fa      	ldr	r2, [r7, #28]
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	617b      	str	r3, [r7, #20]
   return(result);
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1e5      	bne.n	8007c0a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d106      	bne.n	8007c54 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c4e:	f7ff ff69 	bl	8007b24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c52:	e002      	b.n	8007c5a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007c54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c56:	f7f9 fd2b 	bl	80016b0 <HAL_UART_RxCpltCallback>
}
 8007c5a:	bf00      	nop
 8007c5c:	3770      	adds	r7, #112	; 0x70
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d108      	bne.n	8007c8a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c7c:	085b      	lsrs	r3, r3, #1
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	4619      	mov	r1, r3
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f7ff ff4e 	bl	8007b24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c88:	e002      	b.n	8007c90 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f7ff ff36 	bl	8007afc <HAL_UART_RxHalfCpltCallback>
}
 8007c90:	bf00      	nop
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb4:	2b80      	cmp	r3, #128	; 0x80
 8007cb6:	bf0c      	ite	eq
 8007cb8:	2301      	moveq	r3, #1
 8007cba:	2300      	movne	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b21      	cmp	r3, #33	; 0x21
 8007cca:	d108      	bne.n	8007cde <UART_DMAError+0x46>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d005      	beq.n	8007cde <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007cd8:	68b8      	ldr	r0, [r7, #8]
 8007cda:	f000 f92f 	bl	8007f3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce8:	2b40      	cmp	r3, #64	; 0x40
 8007cea:	bf0c      	ite	eq
 8007cec:	2301      	moveq	r3, #1
 8007cee:	2300      	movne	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b22      	cmp	r3, #34	; 0x22
 8007cfe:	d108      	bne.n	8007d12 <UART_DMAError+0x7a>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d005      	beq.n	8007d12 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007d0c:	68b8      	ldr	r0, [r7, #8]
 8007d0e:	f000 f93d 	bl	8007f8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	f043 0210 	orr.w	r2, r3, #16
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d1e:	68b8      	ldr	r0, [r7, #8]
 8007d20:	f7ff fef6 	bl	8007b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d24:	bf00      	nop
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b090      	sub	sp, #64	; 0x40
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d3c:	e050      	b.n	8007de0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d44:	d04c      	beq.n	8007de0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d007      	beq.n	8007d5c <UART_WaitOnFlagUntilTimeout+0x30>
 8007d4c:	f7fa ffd4 	bl	8002cf8 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d241      	bcs.n	8007de0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	330c      	adds	r3, #12
 8007d62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	330c      	adds	r3, #12
 8007d7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d7c:	637a      	str	r2, [r7, #52]	; 0x34
 8007d7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e5      	bne.n	8007d5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3314      	adds	r3, #20
 8007d96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	f023 0301 	bic.w	r3, r3, #1
 8007da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3314      	adds	r3, #20
 8007dae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007db0:	623a      	str	r2, [r7, #32]
 8007db2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db4:	69f9      	ldr	r1, [r7, #28]
 8007db6:	6a3a      	ldr	r2, [r7, #32]
 8007db8:	e841 2300 	strex	r3, r2, [r1]
 8007dbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1e5      	bne.n	8007d90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e00f      	b.n	8007e00 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	4013      	ands	r3, r2
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	bf0c      	ite	eq
 8007df0:	2301      	moveq	r3, #1
 8007df2:	2300      	movne	r3, #0
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	461a      	mov	r2, r3
 8007df8:	79fb      	ldrb	r3, [r7, #7]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d09f      	beq.n	8007d3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3740      	adds	r7, #64	; 0x40
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b098      	sub	sp, #96	; 0x60
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	4613      	mov	r3, r2
 8007e14:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	88fa      	ldrh	r2, [r7, #6]
 8007e20:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2222      	movs	r2, #34	; 0x22
 8007e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e34:	4a3e      	ldr	r2, [pc, #248]	; (8007f30 <UART_Start_Receive_DMA+0x128>)
 8007e36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3c:	4a3d      	ldr	r2, [pc, #244]	; (8007f34 <UART_Start_Receive_DMA+0x12c>)
 8007e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e44:	4a3c      	ldr	r2, [pc, #240]	; (8007f38 <UART_Start_Receive_DMA+0x130>)
 8007e46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007e50:	f107 0308 	add.w	r3, r7, #8
 8007e54:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	4619      	mov	r1, r3
 8007e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	88fb      	ldrh	r3, [r7, #6]
 8007e68:	f7fb f936 	bl	80030d8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	613b      	str	r3, [r7, #16]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	613b      	str	r3, [r7, #16]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	613b      	str	r3, [r7, #16]
 8007e80:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	330c      	adds	r3, #12
 8007e90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e94:	e853 3f00 	ldrex	r3, [r3]
 8007e98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ea0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	330c      	adds	r3, #12
 8007ea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007eaa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007eac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007eb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007eb2:	e841 2300 	strex	r3, r2, [r1]
 8007eb6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e5      	bne.n	8007e8a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3314      	adds	r3, #20
 8007ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec8:	e853 3f00 	ldrex	r3, [r3]
 8007ecc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed0:	f043 0301 	orr.w	r3, r3, #1
 8007ed4:	657b      	str	r3, [r7, #84]	; 0x54
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3314      	adds	r3, #20
 8007edc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ede:	63ba      	str	r2, [r7, #56]	; 0x38
 8007ee0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ee6:	e841 2300 	strex	r3, r2, [r1]
 8007eea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1e5      	bne.n	8007ebe <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3314      	adds	r3, #20
 8007ef8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	617b      	str	r3, [r7, #20]
   return(result);
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f08:	653b      	str	r3, [r7, #80]	; 0x50
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3314      	adds	r3, #20
 8007f10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f12:	627a      	str	r2, [r7, #36]	; 0x24
 8007f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f16:	6a39      	ldr	r1, [r7, #32]
 8007f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f1a:	e841 2300 	strex	r3, r2, [r1]
 8007f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1e5      	bne.n	8007ef2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3760      	adds	r7, #96	; 0x60
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	08007b3d 	.word	0x08007b3d
 8007f34:	08007c63 	.word	0x08007c63
 8007f38:	08007c99 	.word	0x08007c99

08007f3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b089      	sub	sp, #36	; 0x24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	330c      	adds	r3, #12
 8007f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	e853 3f00 	ldrex	r3, [r3]
 8007f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f5a:	61fb      	str	r3, [r7, #28]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	330c      	adds	r3, #12
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	61ba      	str	r2, [r7, #24]
 8007f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	6979      	ldr	r1, [r7, #20]
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	e841 2300 	strex	r3, r2, [r1]
 8007f70:	613b      	str	r3, [r7, #16]
   return(result);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e5      	bne.n	8007f44 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007f80:	bf00      	nop
 8007f82:	3724      	adds	r7, #36	; 0x24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b095      	sub	sp, #84	; 0x54
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	330c      	adds	r3, #12
 8007f9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	330c      	adds	r3, #12
 8007fb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fb4:	643a      	str	r2, [r7, #64]	; 0x40
 8007fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fbc:	e841 2300 	strex	r3, r2, [r1]
 8007fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e5      	bne.n	8007f94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3314      	adds	r3, #20
 8007fce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	f023 0301 	bic.w	r3, r3, #1
 8007fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3314      	adds	r3, #20
 8007fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fe8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ff0:	e841 2300 	strex	r3, r2, [r1]
 8007ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e5      	bne.n	8007fc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008000:	2b01      	cmp	r3, #1
 8008002:	d119      	bne.n	8008038 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	330c      	adds	r3, #12
 800800a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	60bb      	str	r3, [r7, #8]
   return(result);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f023 0310 	bic.w	r3, r3, #16
 800801a:	647b      	str	r3, [r7, #68]	; 0x44
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	330c      	adds	r3, #12
 8008022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008024:	61ba      	str	r2, [r7, #24]
 8008026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008028:	6979      	ldr	r1, [r7, #20]
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	e841 2300 	strex	r3, r2, [r1]
 8008030:	613b      	str	r3, [r7, #16]
   return(result);
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e5      	bne.n	8008004 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2220      	movs	r2, #32
 800803c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008046:	bf00      	nop
 8008048:	3754      	adds	r7, #84	; 0x54
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f7ff fd4f 	bl	8007b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008072:	bf00      	nop
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800807a:	b480      	push	{r7}
 800807c:	b085      	sub	sp, #20
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b21      	cmp	r3, #33	; 0x21
 800808c:	d13e      	bne.n	800810c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008096:	d114      	bne.n	80080c2 <UART_Transmit_IT+0x48>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d110      	bne.n	80080c2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a1b      	ldr	r3, [r3, #32]
 80080a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	1c9a      	adds	r2, r3, #2
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	621a      	str	r2, [r3, #32]
 80080c0:	e008      	b.n	80080d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	1c59      	adds	r1, r3, #1
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6211      	str	r1, [r2, #32]
 80080cc:	781a      	ldrb	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080d8:	b29b      	uxth	r3, r3
 80080da:	3b01      	subs	r3, #1
 80080dc:	b29b      	uxth	r3, r3
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	4619      	mov	r1, r3
 80080e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10f      	bne.n	8008108 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68da      	ldr	r2, [r3, #12]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008106:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	e000      	b.n	800810e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800810c:	2302      	movs	r3, #2
  }
}
 800810e:	4618      	mov	r0, r3
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008130:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2220      	movs	r2, #32
 8008136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7ff fcd4 	bl	8007ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b08c      	sub	sp, #48	; 0x30
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b22      	cmp	r3, #34	; 0x22
 800815c:	f040 80ab 	bne.w	80082b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008168:	d117      	bne.n	800819a <UART_Receive_IT+0x50>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d113      	bne.n	800819a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008172:	2300      	movs	r3, #0
 8008174:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	b29b      	uxth	r3, r3
 8008184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008188:	b29a      	uxth	r2, r3
 800818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008192:	1c9a      	adds	r2, r3, #2
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	629a      	str	r2, [r3, #40]	; 0x28
 8008198:	e026      	b.n	80081e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80081a0:	2300      	movs	r3, #0
 80081a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ac:	d007      	beq.n	80081be <UART_Receive_IT+0x74>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10a      	bne.n	80081cc <UART_Receive_IT+0x82>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d106      	bne.n	80081cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c8:	701a      	strb	r2, [r3, #0]
 80081ca:	e008      	b.n	80081de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e2:	1c5a      	adds	r2, r3, #1
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	3b01      	subs	r3, #1
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	4619      	mov	r1, r3
 80081f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d15a      	bne.n	80082b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0220 	bic.w	r2, r2, #32
 800820a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800821a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	695a      	ldr	r2, [r3, #20]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0201 	bic.w	r2, r2, #1
 800822a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2220      	movs	r2, #32
 8008230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008238:	2b01      	cmp	r3, #1
 800823a:	d135      	bne.n	80082a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	330c      	adds	r3, #12
 8008248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	613b      	str	r3, [r7, #16]
   return(result);
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f023 0310 	bic.w	r3, r3, #16
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	330c      	adds	r3, #12
 8008260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008262:	623a      	str	r2, [r7, #32]
 8008264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	69f9      	ldr	r1, [r7, #28]
 8008268:	6a3a      	ldr	r2, [r7, #32]
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e5      	bne.n	8008242 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0310 	and.w	r3, r3, #16
 8008280:	2b10      	cmp	r3, #16
 8008282:	d10a      	bne.n	800829a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008284:	2300      	movs	r3, #0
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	60fb      	str	r3, [r7, #12]
 8008298:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7ff fc3f 	bl	8007b24 <HAL_UARTEx_RxEventCallback>
 80082a6:	e002      	b.n	80082ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7f9 fa01 	bl	80016b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	e002      	b.n	80082b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	e000      	b.n	80082b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80082b6:	2302      	movs	r3, #2
  }
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3730      	adds	r7, #48	; 0x30
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082c4:	b0c0      	sub	sp, #256	; 0x100
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082dc:	68d9      	ldr	r1, [r3, #12]
 80082de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	ea40 0301 	orr.w	r3, r0, r1
 80082e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	431a      	orrs	r2, r3
 80082f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	431a      	orrs	r2, r3
 8008300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	4313      	orrs	r3, r2
 8008308:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800830c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008318:	f021 010c 	bic.w	r1, r1, #12
 800831c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008326:	430b      	orrs	r3, r1
 8008328:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800832a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800833a:	6999      	ldr	r1, [r3, #24]
 800833c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	ea40 0301 	orr.w	r3, r0, r1
 8008346:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	4b8f      	ldr	r3, [pc, #572]	; (800858c <UART_SetConfig+0x2cc>)
 8008350:	429a      	cmp	r2, r3
 8008352:	d005      	beq.n	8008360 <UART_SetConfig+0xa0>
 8008354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	4b8d      	ldr	r3, [pc, #564]	; (8008590 <UART_SetConfig+0x2d0>)
 800835c:	429a      	cmp	r2, r3
 800835e:	d104      	bne.n	800836a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008360:	f7fb fd2c 	bl	8003dbc <HAL_RCC_GetPCLK2Freq>
 8008364:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008368:	e003      	b.n	8008372 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800836a:	f7fb fd13 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 800836e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800837c:	f040 810c 	bne.w	8008598 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008384:	2200      	movs	r2, #0
 8008386:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800838a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800838e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008392:	4622      	mov	r2, r4
 8008394:	462b      	mov	r3, r5
 8008396:	1891      	adds	r1, r2, r2
 8008398:	65b9      	str	r1, [r7, #88]	; 0x58
 800839a:	415b      	adcs	r3, r3
 800839c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800839e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80083a2:	4621      	mov	r1, r4
 80083a4:	eb12 0801 	adds.w	r8, r2, r1
 80083a8:	4629      	mov	r1, r5
 80083aa:	eb43 0901 	adc.w	r9, r3, r1
 80083ae:	f04f 0200 	mov.w	r2, #0
 80083b2:	f04f 0300 	mov.w	r3, #0
 80083b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083c2:	4690      	mov	r8, r2
 80083c4:	4699      	mov	r9, r3
 80083c6:	4623      	mov	r3, r4
 80083c8:	eb18 0303 	adds.w	r3, r8, r3
 80083cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083d0:	462b      	mov	r3, r5
 80083d2:	eb49 0303 	adc.w	r3, r9, r3
 80083d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80083ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80083ee:	460b      	mov	r3, r1
 80083f0:	18db      	adds	r3, r3, r3
 80083f2:	653b      	str	r3, [r7, #80]	; 0x50
 80083f4:	4613      	mov	r3, r2
 80083f6:	eb42 0303 	adc.w	r3, r2, r3
 80083fa:	657b      	str	r3, [r7, #84]	; 0x54
 80083fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008400:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008404:	f7f7 ff5c 	bl	80002c0 <__aeabi_uldivmod>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	4b61      	ldr	r3, [pc, #388]	; (8008594 <UART_SetConfig+0x2d4>)
 800840e:	fba3 2302 	umull	r2, r3, r3, r2
 8008412:	095b      	lsrs	r3, r3, #5
 8008414:	011c      	lsls	r4, r3, #4
 8008416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800841a:	2200      	movs	r2, #0
 800841c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008420:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008424:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008428:	4642      	mov	r2, r8
 800842a:	464b      	mov	r3, r9
 800842c:	1891      	adds	r1, r2, r2
 800842e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008430:	415b      	adcs	r3, r3
 8008432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008434:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008438:	4641      	mov	r1, r8
 800843a:	eb12 0a01 	adds.w	sl, r2, r1
 800843e:	4649      	mov	r1, r9
 8008440:	eb43 0b01 	adc.w	fp, r3, r1
 8008444:	f04f 0200 	mov.w	r2, #0
 8008448:	f04f 0300 	mov.w	r3, #0
 800844c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008450:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008458:	4692      	mov	sl, r2
 800845a:	469b      	mov	fp, r3
 800845c:	4643      	mov	r3, r8
 800845e:	eb1a 0303 	adds.w	r3, sl, r3
 8008462:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008466:	464b      	mov	r3, r9
 8008468:	eb4b 0303 	adc.w	r3, fp, r3
 800846c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800847c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008480:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008484:	460b      	mov	r3, r1
 8008486:	18db      	adds	r3, r3, r3
 8008488:	643b      	str	r3, [r7, #64]	; 0x40
 800848a:	4613      	mov	r3, r2
 800848c:	eb42 0303 	adc.w	r3, r2, r3
 8008490:	647b      	str	r3, [r7, #68]	; 0x44
 8008492:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008496:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800849a:	f7f7 ff11 	bl	80002c0 <__aeabi_uldivmod>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4611      	mov	r1, r2
 80084a4:	4b3b      	ldr	r3, [pc, #236]	; (8008594 <UART_SetConfig+0x2d4>)
 80084a6:	fba3 2301 	umull	r2, r3, r3, r1
 80084aa:	095b      	lsrs	r3, r3, #5
 80084ac:	2264      	movs	r2, #100	; 0x64
 80084ae:	fb02 f303 	mul.w	r3, r2, r3
 80084b2:	1acb      	subs	r3, r1, r3
 80084b4:	00db      	lsls	r3, r3, #3
 80084b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80084ba:	4b36      	ldr	r3, [pc, #216]	; (8008594 <UART_SetConfig+0x2d4>)
 80084bc:	fba3 2302 	umull	r2, r3, r3, r2
 80084c0:	095b      	lsrs	r3, r3, #5
 80084c2:	005b      	lsls	r3, r3, #1
 80084c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084c8:	441c      	add	r4, r3
 80084ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084ce:	2200      	movs	r2, #0
 80084d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80084d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80084dc:	4642      	mov	r2, r8
 80084de:	464b      	mov	r3, r9
 80084e0:	1891      	adds	r1, r2, r2
 80084e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80084e4:	415b      	adcs	r3, r3
 80084e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80084ec:	4641      	mov	r1, r8
 80084ee:	1851      	adds	r1, r2, r1
 80084f0:	6339      	str	r1, [r7, #48]	; 0x30
 80084f2:	4649      	mov	r1, r9
 80084f4:	414b      	adcs	r3, r1
 80084f6:	637b      	str	r3, [r7, #52]	; 0x34
 80084f8:	f04f 0200 	mov.w	r2, #0
 80084fc:	f04f 0300 	mov.w	r3, #0
 8008500:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008504:	4659      	mov	r1, fp
 8008506:	00cb      	lsls	r3, r1, #3
 8008508:	4651      	mov	r1, sl
 800850a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800850e:	4651      	mov	r1, sl
 8008510:	00ca      	lsls	r2, r1, #3
 8008512:	4610      	mov	r0, r2
 8008514:	4619      	mov	r1, r3
 8008516:	4603      	mov	r3, r0
 8008518:	4642      	mov	r2, r8
 800851a:	189b      	adds	r3, r3, r2
 800851c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008520:	464b      	mov	r3, r9
 8008522:	460a      	mov	r2, r1
 8008524:	eb42 0303 	adc.w	r3, r2, r3
 8008528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800852c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008538:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800853c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008540:	460b      	mov	r3, r1
 8008542:	18db      	adds	r3, r3, r3
 8008544:	62bb      	str	r3, [r7, #40]	; 0x28
 8008546:	4613      	mov	r3, r2
 8008548:	eb42 0303 	adc.w	r3, r2, r3
 800854c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800854e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008552:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008556:	f7f7 feb3 	bl	80002c0 <__aeabi_uldivmod>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	4b0d      	ldr	r3, [pc, #52]	; (8008594 <UART_SetConfig+0x2d4>)
 8008560:	fba3 1302 	umull	r1, r3, r3, r2
 8008564:	095b      	lsrs	r3, r3, #5
 8008566:	2164      	movs	r1, #100	; 0x64
 8008568:	fb01 f303 	mul.w	r3, r1, r3
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	3332      	adds	r3, #50	; 0x32
 8008572:	4a08      	ldr	r2, [pc, #32]	; (8008594 <UART_SetConfig+0x2d4>)
 8008574:	fba2 2303 	umull	r2, r3, r2, r3
 8008578:	095b      	lsrs	r3, r3, #5
 800857a:	f003 0207 	and.w	r2, r3, #7
 800857e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4422      	add	r2, r4
 8008586:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008588:	e105      	b.n	8008796 <UART_SetConfig+0x4d6>
 800858a:	bf00      	nop
 800858c:	40011000 	.word	0x40011000
 8008590:	40011400 	.word	0x40011400
 8008594:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800859c:	2200      	movs	r2, #0
 800859e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80085a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80085a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80085aa:	4642      	mov	r2, r8
 80085ac:	464b      	mov	r3, r9
 80085ae:	1891      	adds	r1, r2, r2
 80085b0:	6239      	str	r1, [r7, #32]
 80085b2:	415b      	adcs	r3, r3
 80085b4:	627b      	str	r3, [r7, #36]	; 0x24
 80085b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085ba:	4641      	mov	r1, r8
 80085bc:	1854      	adds	r4, r2, r1
 80085be:	4649      	mov	r1, r9
 80085c0:	eb43 0501 	adc.w	r5, r3, r1
 80085c4:	f04f 0200 	mov.w	r2, #0
 80085c8:	f04f 0300 	mov.w	r3, #0
 80085cc:	00eb      	lsls	r3, r5, #3
 80085ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085d2:	00e2      	lsls	r2, r4, #3
 80085d4:	4614      	mov	r4, r2
 80085d6:	461d      	mov	r5, r3
 80085d8:	4643      	mov	r3, r8
 80085da:	18e3      	adds	r3, r4, r3
 80085dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80085e0:	464b      	mov	r3, r9
 80085e2:	eb45 0303 	adc.w	r3, r5, r3
 80085e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80085ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80085f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80085fa:	f04f 0200 	mov.w	r2, #0
 80085fe:	f04f 0300 	mov.w	r3, #0
 8008602:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008606:	4629      	mov	r1, r5
 8008608:	008b      	lsls	r3, r1, #2
 800860a:	4621      	mov	r1, r4
 800860c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008610:	4621      	mov	r1, r4
 8008612:	008a      	lsls	r2, r1, #2
 8008614:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008618:	f7f7 fe52 	bl	80002c0 <__aeabi_uldivmod>
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	4b60      	ldr	r3, [pc, #384]	; (80087a4 <UART_SetConfig+0x4e4>)
 8008622:	fba3 2302 	umull	r2, r3, r3, r2
 8008626:	095b      	lsrs	r3, r3, #5
 8008628:	011c      	lsls	r4, r3, #4
 800862a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800862e:	2200      	movs	r2, #0
 8008630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008634:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008638:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800863c:	4642      	mov	r2, r8
 800863e:	464b      	mov	r3, r9
 8008640:	1891      	adds	r1, r2, r2
 8008642:	61b9      	str	r1, [r7, #24]
 8008644:	415b      	adcs	r3, r3
 8008646:	61fb      	str	r3, [r7, #28]
 8008648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800864c:	4641      	mov	r1, r8
 800864e:	1851      	adds	r1, r2, r1
 8008650:	6139      	str	r1, [r7, #16]
 8008652:	4649      	mov	r1, r9
 8008654:	414b      	adcs	r3, r1
 8008656:	617b      	str	r3, [r7, #20]
 8008658:	f04f 0200 	mov.w	r2, #0
 800865c:	f04f 0300 	mov.w	r3, #0
 8008660:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008664:	4659      	mov	r1, fp
 8008666:	00cb      	lsls	r3, r1, #3
 8008668:	4651      	mov	r1, sl
 800866a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800866e:	4651      	mov	r1, sl
 8008670:	00ca      	lsls	r2, r1, #3
 8008672:	4610      	mov	r0, r2
 8008674:	4619      	mov	r1, r3
 8008676:	4603      	mov	r3, r0
 8008678:	4642      	mov	r2, r8
 800867a:	189b      	adds	r3, r3, r2
 800867c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008680:	464b      	mov	r3, r9
 8008682:	460a      	mov	r2, r1
 8008684:	eb42 0303 	adc.w	r3, r2, r3
 8008688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800868c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	67bb      	str	r3, [r7, #120]	; 0x78
 8008696:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008698:	f04f 0200 	mov.w	r2, #0
 800869c:	f04f 0300 	mov.w	r3, #0
 80086a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80086a4:	4649      	mov	r1, r9
 80086a6:	008b      	lsls	r3, r1, #2
 80086a8:	4641      	mov	r1, r8
 80086aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086ae:	4641      	mov	r1, r8
 80086b0:	008a      	lsls	r2, r1, #2
 80086b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80086b6:	f7f7 fe03 	bl	80002c0 <__aeabi_uldivmod>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	4b39      	ldr	r3, [pc, #228]	; (80087a4 <UART_SetConfig+0x4e4>)
 80086c0:	fba3 1302 	umull	r1, r3, r3, r2
 80086c4:	095b      	lsrs	r3, r3, #5
 80086c6:	2164      	movs	r1, #100	; 0x64
 80086c8:	fb01 f303 	mul.w	r3, r1, r3
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	011b      	lsls	r3, r3, #4
 80086d0:	3332      	adds	r3, #50	; 0x32
 80086d2:	4a34      	ldr	r2, [pc, #208]	; (80087a4 <UART_SetConfig+0x4e4>)
 80086d4:	fba2 2303 	umull	r2, r3, r2, r3
 80086d8:	095b      	lsrs	r3, r3, #5
 80086da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086de:	441c      	add	r4, r3
 80086e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086e4:	2200      	movs	r2, #0
 80086e6:	673b      	str	r3, [r7, #112]	; 0x70
 80086e8:	677a      	str	r2, [r7, #116]	; 0x74
 80086ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80086ee:	4642      	mov	r2, r8
 80086f0:	464b      	mov	r3, r9
 80086f2:	1891      	adds	r1, r2, r2
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	415b      	adcs	r3, r3
 80086f8:	60fb      	str	r3, [r7, #12]
 80086fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086fe:	4641      	mov	r1, r8
 8008700:	1851      	adds	r1, r2, r1
 8008702:	6039      	str	r1, [r7, #0]
 8008704:	4649      	mov	r1, r9
 8008706:	414b      	adcs	r3, r1
 8008708:	607b      	str	r3, [r7, #4]
 800870a:	f04f 0200 	mov.w	r2, #0
 800870e:	f04f 0300 	mov.w	r3, #0
 8008712:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008716:	4659      	mov	r1, fp
 8008718:	00cb      	lsls	r3, r1, #3
 800871a:	4651      	mov	r1, sl
 800871c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008720:	4651      	mov	r1, sl
 8008722:	00ca      	lsls	r2, r1, #3
 8008724:	4610      	mov	r0, r2
 8008726:	4619      	mov	r1, r3
 8008728:	4603      	mov	r3, r0
 800872a:	4642      	mov	r2, r8
 800872c:	189b      	adds	r3, r3, r2
 800872e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008730:	464b      	mov	r3, r9
 8008732:	460a      	mov	r2, r1
 8008734:	eb42 0303 	adc.w	r3, r2, r3
 8008738:	66fb      	str	r3, [r7, #108]	; 0x6c
 800873a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	663b      	str	r3, [r7, #96]	; 0x60
 8008744:	667a      	str	r2, [r7, #100]	; 0x64
 8008746:	f04f 0200 	mov.w	r2, #0
 800874a:	f04f 0300 	mov.w	r3, #0
 800874e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008752:	4649      	mov	r1, r9
 8008754:	008b      	lsls	r3, r1, #2
 8008756:	4641      	mov	r1, r8
 8008758:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800875c:	4641      	mov	r1, r8
 800875e:	008a      	lsls	r2, r1, #2
 8008760:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008764:	f7f7 fdac 	bl	80002c0 <__aeabi_uldivmod>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4b0d      	ldr	r3, [pc, #52]	; (80087a4 <UART_SetConfig+0x4e4>)
 800876e:	fba3 1302 	umull	r1, r3, r3, r2
 8008772:	095b      	lsrs	r3, r3, #5
 8008774:	2164      	movs	r1, #100	; 0x64
 8008776:	fb01 f303 	mul.w	r3, r1, r3
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	011b      	lsls	r3, r3, #4
 800877e:	3332      	adds	r3, #50	; 0x32
 8008780:	4a08      	ldr	r2, [pc, #32]	; (80087a4 <UART_SetConfig+0x4e4>)
 8008782:	fba2 2303 	umull	r2, r3, r2, r3
 8008786:	095b      	lsrs	r3, r3, #5
 8008788:	f003 020f 	and.w	r2, r3, #15
 800878c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4422      	add	r2, r4
 8008794:	609a      	str	r2, [r3, #8]
}
 8008796:	bf00      	nop
 8008798:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800879c:	46bd      	mov	sp, r7
 800879e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087a2:	bf00      	nop
 80087a4:	51eb851f 	.word	0x51eb851f

080087a8 <__errno>:
 80087a8:	4b01      	ldr	r3, [pc, #4]	; (80087b0 <__errno+0x8>)
 80087aa:	6818      	ldr	r0, [r3, #0]
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	2000004c 	.word	0x2000004c

080087b4 <__libc_init_array>:
 80087b4:	b570      	push	{r4, r5, r6, lr}
 80087b6:	4d0d      	ldr	r5, [pc, #52]	; (80087ec <__libc_init_array+0x38>)
 80087b8:	4c0d      	ldr	r4, [pc, #52]	; (80087f0 <__libc_init_array+0x3c>)
 80087ba:	1b64      	subs	r4, r4, r5
 80087bc:	10a4      	asrs	r4, r4, #2
 80087be:	2600      	movs	r6, #0
 80087c0:	42a6      	cmp	r6, r4
 80087c2:	d109      	bne.n	80087d8 <__libc_init_array+0x24>
 80087c4:	4d0b      	ldr	r5, [pc, #44]	; (80087f4 <__libc_init_array+0x40>)
 80087c6:	4c0c      	ldr	r4, [pc, #48]	; (80087f8 <__libc_init_array+0x44>)
 80087c8:	f000 fcfc 	bl	80091c4 <_init>
 80087cc:	1b64      	subs	r4, r4, r5
 80087ce:	10a4      	asrs	r4, r4, #2
 80087d0:	2600      	movs	r6, #0
 80087d2:	42a6      	cmp	r6, r4
 80087d4:	d105      	bne.n	80087e2 <__libc_init_array+0x2e>
 80087d6:	bd70      	pop	{r4, r5, r6, pc}
 80087d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087dc:	4798      	blx	r3
 80087de:	3601      	adds	r6, #1
 80087e0:	e7ee      	b.n	80087c0 <__libc_init_array+0xc>
 80087e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e6:	4798      	blx	r3
 80087e8:	3601      	adds	r6, #1
 80087ea:	e7f2      	b.n	80087d2 <__libc_init_array+0x1e>
 80087ec:	080093e4 	.word	0x080093e4
 80087f0:	080093e4 	.word	0x080093e4
 80087f4:	080093e4 	.word	0x080093e4
 80087f8:	080093e8 	.word	0x080093e8

080087fc <memcpy>:
 80087fc:	440a      	add	r2, r1
 80087fe:	4291      	cmp	r1, r2
 8008800:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008804:	d100      	bne.n	8008808 <memcpy+0xc>
 8008806:	4770      	bx	lr
 8008808:	b510      	push	{r4, lr}
 800880a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800880e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008812:	4291      	cmp	r1, r2
 8008814:	d1f9      	bne.n	800880a <memcpy+0xe>
 8008816:	bd10      	pop	{r4, pc}

08008818 <memset>:
 8008818:	4402      	add	r2, r0
 800881a:	4603      	mov	r3, r0
 800881c:	4293      	cmp	r3, r2
 800881e:	d100      	bne.n	8008822 <memset+0xa>
 8008820:	4770      	bx	lr
 8008822:	f803 1b01 	strb.w	r1, [r3], #1
 8008826:	e7f9      	b.n	800881c <memset+0x4>

08008828 <siprintf>:
 8008828:	b40e      	push	{r1, r2, r3}
 800882a:	b500      	push	{lr}
 800882c:	b09c      	sub	sp, #112	; 0x70
 800882e:	ab1d      	add	r3, sp, #116	; 0x74
 8008830:	9002      	str	r0, [sp, #8]
 8008832:	9006      	str	r0, [sp, #24]
 8008834:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008838:	4809      	ldr	r0, [pc, #36]	; (8008860 <siprintf+0x38>)
 800883a:	9107      	str	r1, [sp, #28]
 800883c:	9104      	str	r1, [sp, #16]
 800883e:	4909      	ldr	r1, [pc, #36]	; (8008864 <siprintf+0x3c>)
 8008840:	f853 2b04 	ldr.w	r2, [r3], #4
 8008844:	9105      	str	r1, [sp, #20]
 8008846:	6800      	ldr	r0, [r0, #0]
 8008848:	9301      	str	r3, [sp, #4]
 800884a:	a902      	add	r1, sp, #8
 800884c:	f000 f96a 	bl	8008b24 <_svfiprintf_r>
 8008850:	9b02      	ldr	r3, [sp, #8]
 8008852:	2200      	movs	r2, #0
 8008854:	701a      	strb	r2, [r3, #0]
 8008856:	b01c      	add	sp, #112	; 0x70
 8008858:	f85d eb04 	ldr.w	lr, [sp], #4
 800885c:	b003      	add	sp, #12
 800885e:	4770      	bx	lr
 8008860:	2000004c 	.word	0x2000004c
 8008864:	ffff0208 	.word	0xffff0208

08008868 <strchr>:
 8008868:	b2c9      	uxtb	r1, r1
 800886a:	4603      	mov	r3, r0
 800886c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008870:	b11a      	cbz	r2, 800887a <strchr+0x12>
 8008872:	428a      	cmp	r2, r1
 8008874:	d1f9      	bne.n	800886a <strchr+0x2>
 8008876:	4618      	mov	r0, r3
 8008878:	4770      	bx	lr
 800887a:	2900      	cmp	r1, #0
 800887c:	bf18      	it	ne
 800887e:	2300      	movne	r3, #0
 8008880:	e7f9      	b.n	8008876 <strchr+0xe>
	...

08008884 <strdup>:
 8008884:	4b02      	ldr	r3, [pc, #8]	; (8008890 <strdup+0xc>)
 8008886:	4601      	mov	r1, r0
 8008888:	6818      	ldr	r0, [r3, #0]
 800888a:	f000 b803 	b.w	8008894 <_strdup_r>
 800888e:	bf00      	nop
 8008890:	2000004c 	.word	0x2000004c

08008894 <_strdup_r>:
 8008894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008896:	4604      	mov	r4, r0
 8008898:	4608      	mov	r0, r1
 800889a:	460d      	mov	r5, r1
 800889c:	f7f7 fcb8 	bl	8000210 <strlen>
 80088a0:	1c42      	adds	r2, r0, #1
 80088a2:	4611      	mov	r1, r2
 80088a4:	4620      	mov	r0, r4
 80088a6:	9201      	str	r2, [sp, #4]
 80088a8:	f000 f86c 	bl	8008984 <_malloc_r>
 80088ac:	4604      	mov	r4, r0
 80088ae:	b118      	cbz	r0, 80088b8 <_strdup_r+0x24>
 80088b0:	9a01      	ldr	r2, [sp, #4]
 80088b2:	4629      	mov	r1, r5
 80088b4:	f7ff ffa2 	bl	80087fc <memcpy>
 80088b8:	4620      	mov	r0, r4
 80088ba:	b003      	add	sp, #12
 80088bc:	bd30      	pop	{r4, r5, pc}

080088be <strsep>:
 80088be:	4602      	mov	r2, r0
 80088c0:	2300      	movs	r3, #0
 80088c2:	6800      	ldr	r0, [r0, #0]
 80088c4:	f000 b816 	b.w	80088f4 <__strtok_r>

080088c8 <strstr>:
 80088c8:	780a      	ldrb	r2, [r1, #0]
 80088ca:	b570      	push	{r4, r5, r6, lr}
 80088cc:	b96a      	cbnz	r2, 80088ea <strstr+0x22>
 80088ce:	bd70      	pop	{r4, r5, r6, pc}
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d109      	bne.n	80088e8 <strstr+0x20>
 80088d4:	460c      	mov	r4, r1
 80088d6:	4605      	mov	r5, r0
 80088d8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0f6      	beq.n	80088ce <strstr+0x6>
 80088e0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80088e4:	429e      	cmp	r6, r3
 80088e6:	d0f7      	beq.n	80088d8 <strstr+0x10>
 80088e8:	3001      	adds	r0, #1
 80088ea:	7803      	ldrb	r3, [r0, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1ef      	bne.n	80088d0 <strstr+0x8>
 80088f0:	4618      	mov	r0, r3
 80088f2:	e7ec      	b.n	80088ce <strstr+0x6>

080088f4 <__strtok_r>:
 80088f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088f6:	b908      	cbnz	r0, 80088fc <__strtok_r+0x8>
 80088f8:	6810      	ldr	r0, [r2, #0]
 80088fa:	b188      	cbz	r0, 8008920 <__strtok_r+0x2c>
 80088fc:	4604      	mov	r4, r0
 80088fe:	4620      	mov	r0, r4
 8008900:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008904:	460f      	mov	r7, r1
 8008906:	f817 6b01 	ldrb.w	r6, [r7], #1
 800890a:	b91e      	cbnz	r6, 8008914 <__strtok_r+0x20>
 800890c:	b965      	cbnz	r5, 8008928 <__strtok_r+0x34>
 800890e:	6015      	str	r5, [r2, #0]
 8008910:	4628      	mov	r0, r5
 8008912:	e005      	b.n	8008920 <__strtok_r+0x2c>
 8008914:	42b5      	cmp	r5, r6
 8008916:	d1f6      	bne.n	8008906 <__strtok_r+0x12>
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1f0      	bne.n	80088fe <__strtok_r+0xa>
 800891c:	6014      	str	r4, [r2, #0]
 800891e:	7003      	strb	r3, [r0, #0]
 8008920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008922:	461c      	mov	r4, r3
 8008924:	e00c      	b.n	8008940 <__strtok_r+0x4c>
 8008926:	b915      	cbnz	r5, 800892e <__strtok_r+0x3a>
 8008928:	f814 3b01 	ldrb.w	r3, [r4], #1
 800892c:	460e      	mov	r6, r1
 800892e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008932:	42ab      	cmp	r3, r5
 8008934:	d1f7      	bne.n	8008926 <__strtok_r+0x32>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0f3      	beq.n	8008922 <__strtok_r+0x2e>
 800893a:	2300      	movs	r3, #0
 800893c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008940:	6014      	str	r4, [r2, #0]
 8008942:	e7ed      	b.n	8008920 <__strtok_r+0x2c>

08008944 <sbrk_aligned>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	4e0e      	ldr	r6, [pc, #56]	; (8008980 <sbrk_aligned+0x3c>)
 8008948:	460c      	mov	r4, r1
 800894a:	6831      	ldr	r1, [r6, #0]
 800894c:	4605      	mov	r5, r0
 800894e:	b911      	cbnz	r1, 8008956 <sbrk_aligned+0x12>
 8008950:	f000 fb7c 	bl	800904c <_sbrk_r>
 8008954:	6030      	str	r0, [r6, #0]
 8008956:	4621      	mov	r1, r4
 8008958:	4628      	mov	r0, r5
 800895a:	f000 fb77 	bl	800904c <_sbrk_r>
 800895e:	1c43      	adds	r3, r0, #1
 8008960:	d00a      	beq.n	8008978 <sbrk_aligned+0x34>
 8008962:	1cc4      	adds	r4, r0, #3
 8008964:	f024 0403 	bic.w	r4, r4, #3
 8008968:	42a0      	cmp	r0, r4
 800896a:	d007      	beq.n	800897c <sbrk_aligned+0x38>
 800896c:	1a21      	subs	r1, r4, r0
 800896e:	4628      	mov	r0, r5
 8008970:	f000 fb6c 	bl	800904c <_sbrk_r>
 8008974:	3001      	adds	r0, #1
 8008976:	d101      	bne.n	800897c <sbrk_aligned+0x38>
 8008978:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800897c:	4620      	mov	r0, r4
 800897e:	bd70      	pop	{r4, r5, r6, pc}
 8008980:	20004c9c 	.word	0x20004c9c

08008984 <_malloc_r>:
 8008984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008988:	1ccd      	adds	r5, r1, #3
 800898a:	f025 0503 	bic.w	r5, r5, #3
 800898e:	3508      	adds	r5, #8
 8008990:	2d0c      	cmp	r5, #12
 8008992:	bf38      	it	cc
 8008994:	250c      	movcc	r5, #12
 8008996:	2d00      	cmp	r5, #0
 8008998:	4607      	mov	r7, r0
 800899a:	db01      	blt.n	80089a0 <_malloc_r+0x1c>
 800899c:	42a9      	cmp	r1, r5
 800899e:	d905      	bls.n	80089ac <_malloc_r+0x28>
 80089a0:	230c      	movs	r3, #12
 80089a2:	603b      	str	r3, [r7, #0]
 80089a4:	2600      	movs	r6, #0
 80089a6:	4630      	mov	r0, r6
 80089a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ac:	4e2e      	ldr	r6, [pc, #184]	; (8008a68 <_malloc_r+0xe4>)
 80089ae:	f000 fb77 	bl	80090a0 <__malloc_lock>
 80089b2:	6833      	ldr	r3, [r6, #0]
 80089b4:	461c      	mov	r4, r3
 80089b6:	bb34      	cbnz	r4, 8008a06 <_malloc_r+0x82>
 80089b8:	4629      	mov	r1, r5
 80089ba:	4638      	mov	r0, r7
 80089bc:	f7ff ffc2 	bl	8008944 <sbrk_aligned>
 80089c0:	1c43      	adds	r3, r0, #1
 80089c2:	4604      	mov	r4, r0
 80089c4:	d14d      	bne.n	8008a62 <_malloc_r+0xde>
 80089c6:	6834      	ldr	r4, [r6, #0]
 80089c8:	4626      	mov	r6, r4
 80089ca:	2e00      	cmp	r6, #0
 80089cc:	d140      	bne.n	8008a50 <_malloc_r+0xcc>
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	4631      	mov	r1, r6
 80089d2:	4638      	mov	r0, r7
 80089d4:	eb04 0803 	add.w	r8, r4, r3
 80089d8:	f000 fb38 	bl	800904c <_sbrk_r>
 80089dc:	4580      	cmp	r8, r0
 80089de:	d13a      	bne.n	8008a56 <_malloc_r+0xd2>
 80089e0:	6821      	ldr	r1, [r4, #0]
 80089e2:	3503      	adds	r5, #3
 80089e4:	1a6d      	subs	r5, r5, r1
 80089e6:	f025 0503 	bic.w	r5, r5, #3
 80089ea:	3508      	adds	r5, #8
 80089ec:	2d0c      	cmp	r5, #12
 80089ee:	bf38      	it	cc
 80089f0:	250c      	movcc	r5, #12
 80089f2:	4629      	mov	r1, r5
 80089f4:	4638      	mov	r0, r7
 80089f6:	f7ff ffa5 	bl	8008944 <sbrk_aligned>
 80089fa:	3001      	adds	r0, #1
 80089fc:	d02b      	beq.n	8008a56 <_malloc_r+0xd2>
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	442b      	add	r3, r5
 8008a02:	6023      	str	r3, [r4, #0]
 8008a04:	e00e      	b.n	8008a24 <_malloc_r+0xa0>
 8008a06:	6822      	ldr	r2, [r4, #0]
 8008a08:	1b52      	subs	r2, r2, r5
 8008a0a:	d41e      	bmi.n	8008a4a <_malloc_r+0xc6>
 8008a0c:	2a0b      	cmp	r2, #11
 8008a0e:	d916      	bls.n	8008a3e <_malloc_r+0xba>
 8008a10:	1961      	adds	r1, r4, r5
 8008a12:	42a3      	cmp	r3, r4
 8008a14:	6025      	str	r5, [r4, #0]
 8008a16:	bf18      	it	ne
 8008a18:	6059      	strne	r1, [r3, #4]
 8008a1a:	6863      	ldr	r3, [r4, #4]
 8008a1c:	bf08      	it	eq
 8008a1e:	6031      	streq	r1, [r6, #0]
 8008a20:	5162      	str	r2, [r4, r5]
 8008a22:	604b      	str	r3, [r1, #4]
 8008a24:	4638      	mov	r0, r7
 8008a26:	f104 060b 	add.w	r6, r4, #11
 8008a2a:	f000 fb3f 	bl	80090ac <__malloc_unlock>
 8008a2e:	f026 0607 	bic.w	r6, r6, #7
 8008a32:	1d23      	adds	r3, r4, #4
 8008a34:	1af2      	subs	r2, r6, r3
 8008a36:	d0b6      	beq.n	80089a6 <_malloc_r+0x22>
 8008a38:	1b9b      	subs	r3, r3, r6
 8008a3a:	50a3      	str	r3, [r4, r2]
 8008a3c:	e7b3      	b.n	80089a6 <_malloc_r+0x22>
 8008a3e:	6862      	ldr	r2, [r4, #4]
 8008a40:	42a3      	cmp	r3, r4
 8008a42:	bf0c      	ite	eq
 8008a44:	6032      	streq	r2, [r6, #0]
 8008a46:	605a      	strne	r2, [r3, #4]
 8008a48:	e7ec      	b.n	8008a24 <_malloc_r+0xa0>
 8008a4a:	4623      	mov	r3, r4
 8008a4c:	6864      	ldr	r4, [r4, #4]
 8008a4e:	e7b2      	b.n	80089b6 <_malloc_r+0x32>
 8008a50:	4634      	mov	r4, r6
 8008a52:	6876      	ldr	r6, [r6, #4]
 8008a54:	e7b9      	b.n	80089ca <_malloc_r+0x46>
 8008a56:	230c      	movs	r3, #12
 8008a58:	603b      	str	r3, [r7, #0]
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	f000 fb26 	bl	80090ac <__malloc_unlock>
 8008a60:	e7a1      	b.n	80089a6 <_malloc_r+0x22>
 8008a62:	6025      	str	r5, [r4, #0]
 8008a64:	e7de      	b.n	8008a24 <_malloc_r+0xa0>
 8008a66:	bf00      	nop
 8008a68:	20004c98 	.word	0x20004c98

08008a6c <__ssputs_r>:
 8008a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a70:	688e      	ldr	r6, [r1, #8]
 8008a72:	429e      	cmp	r6, r3
 8008a74:	4682      	mov	sl, r0
 8008a76:	460c      	mov	r4, r1
 8008a78:	4690      	mov	r8, r2
 8008a7a:	461f      	mov	r7, r3
 8008a7c:	d838      	bhi.n	8008af0 <__ssputs_r+0x84>
 8008a7e:	898a      	ldrh	r2, [r1, #12]
 8008a80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a84:	d032      	beq.n	8008aec <__ssputs_r+0x80>
 8008a86:	6825      	ldr	r5, [r4, #0]
 8008a88:	6909      	ldr	r1, [r1, #16]
 8008a8a:	eba5 0901 	sub.w	r9, r5, r1
 8008a8e:	6965      	ldr	r5, [r4, #20]
 8008a90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a98:	3301      	adds	r3, #1
 8008a9a:	444b      	add	r3, r9
 8008a9c:	106d      	asrs	r5, r5, #1
 8008a9e:	429d      	cmp	r5, r3
 8008aa0:	bf38      	it	cc
 8008aa2:	461d      	movcc	r5, r3
 8008aa4:	0553      	lsls	r3, r2, #21
 8008aa6:	d531      	bpl.n	8008b0c <__ssputs_r+0xa0>
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	f7ff ff6b 	bl	8008984 <_malloc_r>
 8008aae:	4606      	mov	r6, r0
 8008ab0:	b950      	cbnz	r0, 8008ac8 <__ssputs_r+0x5c>
 8008ab2:	230c      	movs	r3, #12
 8008ab4:	f8ca 3000 	str.w	r3, [sl]
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008abe:	81a3      	strh	r3, [r4, #12]
 8008ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac8:	6921      	ldr	r1, [r4, #16]
 8008aca:	464a      	mov	r2, r9
 8008acc:	f7ff fe96 	bl	80087fc <memcpy>
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ada:	81a3      	strh	r3, [r4, #12]
 8008adc:	6126      	str	r6, [r4, #16]
 8008ade:	6165      	str	r5, [r4, #20]
 8008ae0:	444e      	add	r6, r9
 8008ae2:	eba5 0509 	sub.w	r5, r5, r9
 8008ae6:	6026      	str	r6, [r4, #0]
 8008ae8:	60a5      	str	r5, [r4, #8]
 8008aea:	463e      	mov	r6, r7
 8008aec:	42be      	cmp	r6, r7
 8008aee:	d900      	bls.n	8008af2 <__ssputs_r+0x86>
 8008af0:	463e      	mov	r6, r7
 8008af2:	6820      	ldr	r0, [r4, #0]
 8008af4:	4632      	mov	r2, r6
 8008af6:	4641      	mov	r1, r8
 8008af8:	f000 fab8 	bl	800906c <memmove>
 8008afc:	68a3      	ldr	r3, [r4, #8]
 8008afe:	1b9b      	subs	r3, r3, r6
 8008b00:	60a3      	str	r3, [r4, #8]
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	4433      	add	r3, r6
 8008b06:	6023      	str	r3, [r4, #0]
 8008b08:	2000      	movs	r0, #0
 8008b0a:	e7db      	b.n	8008ac4 <__ssputs_r+0x58>
 8008b0c:	462a      	mov	r2, r5
 8008b0e:	f000 fb1f 	bl	8009150 <_realloc_r>
 8008b12:	4606      	mov	r6, r0
 8008b14:	2800      	cmp	r0, #0
 8008b16:	d1e1      	bne.n	8008adc <__ssputs_r+0x70>
 8008b18:	6921      	ldr	r1, [r4, #16]
 8008b1a:	4650      	mov	r0, sl
 8008b1c:	f000 facc 	bl	80090b8 <_free_r>
 8008b20:	e7c7      	b.n	8008ab2 <__ssputs_r+0x46>
	...

08008b24 <_svfiprintf_r>:
 8008b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b28:	4698      	mov	r8, r3
 8008b2a:	898b      	ldrh	r3, [r1, #12]
 8008b2c:	061b      	lsls	r3, r3, #24
 8008b2e:	b09d      	sub	sp, #116	; 0x74
 8008b30:	4607      	mov	r7, r0
 8008b32:	460d      	mov	r5, r1
 8008b34:	4614      	mov	r4, r2
 8008b36:	d50e      	bpl.n	8008b56 <_svfiprintf_r+0x32>
 8008b38:	690b      	ldr	r3, [r1, #16]
 8008b3a:	b963      	cbnz	r3, 8008b56 <_svfiprintf_r+0x32>
 8008b3c:	2140      	movs	r1, #64	; 0x40
 8008b3e:	f7ff ff21 	bl	8008984 <_malloc_r>
 8008b42:	6028      	str	r0, [r5, #0]
 8008b44:	6128      	str	r0, [r5, #16]
 8008b46:	b920      	cbnz	r0, 8008b52 <_svfiprintf_r+0x2e>
 8008b48:	230c      	movs	r3, #12
 8008b4a:	603b      	str	r3, [r7, #0]
 8008b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b50:	e0d1      	b.n	8008cf6 <_svfiprintf_r+0x1d2>
 8008b52:	2340      	movs	r3, #64	; 0x40
 8008b54:	616b      	str	r3, [r5, #20]
 8008b56:	2300      	movs	r3, #0
 8008b58:	9309      	str	r3, [sp, #36]	; 0x24
 8008b5a:	2320      	movs	r3, #32
 8008b5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b60:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b64:	2330      	movs	r3, #48	; 0x30
 8008b66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d10 <_svfiprintf_r+0x1ec>
 8008b6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b6e:	f04f 0901 	mov.w	r9, #1
 8008b72:	4623      	mov	r3, r4
 8008b74:	469a      	mov	sl, r3
 8008b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b7a:	b10a      	cbz	r2, 8008b80 <_svfiprintf_r+0x5c>
 8008b7c:	2a25      	cmp	r2, #37	; 0x25
 8008b7e:	d1f9      	bne.n	8008b74 <_svfiprintf_r+0x50>
 8008b80:	ebba 0b04 	subs.w	fp, sl, r4
 8008b84:	d00b      	beq.n	8008b9e <_svfiprintf_r+0x7a>
 8008b86:	465b      	mov	r3, fp
 8008b88:	4622      	mov	r2, r4
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	4638      	mov	r0, r7
 8008b8e:	f7ff ff6d 	bl	8008a6c <__ssputs_r>
 8008b92:	3001      	adds	r0, #1
 8008b94:	f000 80aa 	beq.w	8008cec <_svfiprintf_r+0x1c8>
 8008b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b9a:	445a      	add	r2, fp
 8008b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 80a2 	beq.w	8008cec <_svfiprintf_r+0x1c8>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bb2:	f10a 0a01 	add.w	sl, sl, #1
 8008bb6:	9304      	str	r3, [sp, #16]
 8008bb8:	9307      	str	r3, [sp, #28]
 8008bba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bbe:	931a      	str	r3, [sp, #104]	; 0x68
 8008bc0:	4654      	mov	r4, sl
 8008bc2:	2205      	movs	r2, #5
 8008bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bc8:	4851      	ldr	r0, [pc, #324]	; (8008d10 <_svfiprintf_r+0x1ec>)
 8008bca:	f7f7 fb29 	bl	8000220 <memchr>
 8008bce:	9a04      	ldr	r2, [sp, #16]
 8008bd0:	b9d8      	cbnz	r0, 8008c0a <_svfiprintf_r+0xe6>
 8008bd2:	06d0      	lsls	r0, r2, #27
 8008bd4:	bf44      	itt	mi
 8008bd6:	2320      	movmi	r3, #32
 8008bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bdc:	0711      	lsls	r1, r2, #28
 8008bde:	bf44      	itt	mi
 8008be0:	232b      	movmi	r3, #43	; 0x2b
 8008be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008be6:	f89a 3000 	ldrb.w	r3, [sl]
 8008bea:	2b2a      	cmp	r3, #42	; 0x2a
 8008bec:	d015      	beq.n	8008c1a <_svfiprintf_r+0xf6>
 8008bee:	9a07      	ldr	r2, [sp, #28]
 8008bf0:	4654      	mov	r4, sl
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	f04f 0c0a 	mov.w	ip, #10
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bfe:	3b30      	subs	r3, #48	; 0x30
 8008c00:	2b09      	cmp	r3, #9
 8008c02:	d94e      	bls.n	8008ca2 <_svfiprintf_r+0x17e>
 8008c04:	b1b0      	cbz	r0, 8008c34 <_svfiprintf_r+0x110>
 8008c06:	9207      	str	r2, [sp, #28]
 8008c08:	e014      	b.n	8008c34 <_svfiprintf_r+0x110>
 8008c0a:	eba0 0308 	sub.w	r3, r0, r8
 8008c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8008c12:	4313      	orrs	r3, r2
 8008c14:	9304      	str	r3, [sp, #16]
 8008c16:	46a2      	mov	sl, r4
 8008c18:	e7d2      	b.n	8008bc0 <_svfiprintf_r+0x9c>
 8008c1a:	9b03      	ldr	r3, [sp, #12]
 8008c1c:	1d19      	adds	r1, r3, #4
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	9103      	str	r1, [sp, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	bfbb      	ittet	lt
 8008c26:	425b      	neglt	r3, r3
 8008c28:	f042 0202 	orrlt.w	r2, r2, #2
 8008c2c:	9307      	strge	r3, [sp, #28]
 8008c2e:	9307      	strlt	r3, [sp, #28]
 8008c30:	bfb8      	it	lt
 8008c32:	9204      	strlt	r2, [sp, #16]
 8008c34:	7823      	ldrb	r3, [r4, #0]
 8008c36:	2b2e      	cmp	r3, #46	; 0x2e
 8008c38:	d10c      	bne.n	8008c54 <_svfiprintf_r+0x130>
 8008c3a:	7863      	ldrb	r3, [r4, #1]
 8008c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c3e:	d135      	bne.n	8008cac <_svfiprintf_r+0x188>
 8008c40:	9b03      	ldr	r3, [sp, #12]
 8008c42:	1d1a      	adds	r2, r3, #4
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	9203      	str	r2, [sp, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	bfb8      	it	lt
 8008c4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008c50:	3402      	adds	r4, #2
 8008c52:	9305      	str	r3, [sp, #20]
 8008c54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d20 <_svfiprintf_r+0x1fc>
 8008c58:	7821      	ldrb	r1, [r4, #0]
 8008c5a:	2203      	movs	r2, #3
 8008c5c:	4650      	mov	r0, sl
 8008c5e:	f7f7 fadf 	bl	8000220 <memchr>
 8008c62:	b140      	cbz	r0, 8008c76 <_svfiprintf_r+0x152>
 8008c64:	2340      	movs	r3, #64	; 0x40
 8008c66:	eba0 000a 	sub.w	r0, r0, sl
 8008c6a:	fa03 f000 	lsl.w	r0, r3, r0
 8008c6e:	9b04      	ldr	r3, [sp, #16]
 8008c70:	4303      	orrs	r3, r0
 8008c72:	3401      	adds	r4, #1
 8008c74:	9304      	str	r3, [sp, #16]
 8008c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c7a:	4826      	ldr	r0, [pc, #152]	; (8008d14 <_svfiprintf_r+0x1f0>)
 8008c7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c80:	2206      	movs	r2, #6
 8008c82:	f7f7 facd 	bl	8000220 <memchr>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	d038      	beq.n	8008cfc <_svfiprintf_r+0x1d8>
 8008c8a:	4b23      	ldr	r3, [pc, #140]	; (8008d18 <_svfiprintf_r+0x1f4>)
 8008c8c:	bb1b      	cbnz	r3, 8008cd6 <_svfiprintf_r+0x1b2>
 8008c8e:	9b03      	ldr	r3, [sp, #12]
 8008c90:	3307      	adds	r3, #7
 8008c92:	f023 0307 	bic.w	r3, r3, #7
 8008c96:	3308      	adds	r3, #8
 8008c98:	9303      	str	r3, [sp, #12]
 8008c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c9c:	4433      	add	r3, r6
 8008c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8008ca0:	e767      	b.n	8008b72 <_svfiprintf_r+0x4e>
 8008ca2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	2001      	movs	r0, #1
 8008caa:	e7a5      	b.n	8008bf8 <_svfiprintf_r+0xd4>
 8008cac:	2300      	movs	r3, #0
 8008cae:	3401      	adds	r4, #1
 8008cb0:	9305      	str	r3, [sp, #20]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	f04f 0c0a 	mov.w	ip, #10
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cbe:	3a30      	subs	r2, #48	; 0x30
 8008cc0:	2a09      	cmp	r2, #9
 8008cc2:	d903      	bls.n	8008ccc <_svfiprintf_r+0x1a8>
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d0c5      	beq.n	8008c54 <_svfiprintf_r+0x130>
 8008cc8:	9105      	str	r1, [sp, #20]
 8008cca:	e7c3      	b.n	8008c54 <_svfiprintf_r+0x130>
 8008ccc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e7f0      	b.n	8008cb8 <_svfiprintf_r+0x194>
 8008cd6:	ab03      	add	r3, sp, #12
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	462a      	mov	r2, r5
 8008cdc:	4b0f      	ldr	r3, [pc, #60]	; (8008d1c <_svfiprintf_r+0x1f8>)
 8008cde:	a904      	add	r1, sp, #16
 8008ce0:	4638      	mov	r0, r7
 8008ce2:	f3af 8000 	nop.w
 8008ce6:	1c42      	adds	r2, r0, #1
 8008ce8:	4606      	mov	r6, r0
 8008cea:	d1d6      	bne.n	8008c9a <_svfiprintf_r+0x176>
 8008cec:	89ab      	ldrh	r3, [r5, #12]
 8008cee:	065b      	lsls	r3, r3, #25
 8008cf0:	f53f af2c 	bmi.w	8008b4c <_svfiprintf_r+0x28>
 8008cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cf6:	b01d      	add	sp, #116	; 0x74
 8008cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfc:	ab03      	add	r3, sp, #12
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	462a      	mov	r2, r5
 8008d02:	4b06      	ldr	r3, [pc, #24]	; (8008d1c <_svfiprintf_r+0x1f8>)
 8008d04:	a904      	add	r1, sp, #16
 8008d06:	4638      	mov	r0, r7
 8008d08:	f000 f87a 	bl	8008e00 <_printf_i>
 8008d0c:	e7eb      	b.n	8008ce6 <_svfiprintf_r+0x1c2>
 8008d0e:	bf00      	nop
 8008d10:	080093a8 	.word	0x080093a8
 8008d14:	080093b2 	.word	0x080093b2
 8008d18:	00000000 	.word	0x00000000
 8008d1c:	08008a6d 	.word	0x08008a6d
 8008d20:	080093ae 	.word	0x080093ae

08008d24 <_printf_common>:
 8008d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d28:	4616      	mov	r6, r2
 8008d2a:	4699      	mov	r9, r3
 8008d2c:	688a      	ldr	r2, [r1, #8]
 8008d2e:	690b      	ldr	r3, [r1, #16]
 8008d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d34:	4293      	cmp	r3, r2
 8008d36:	bfb8      	it	lt
 8008d38:	4613      	movlt	r3, r2
 8008d3a:	6033      	str	r3, [r6, #0]
 8008d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d40:	4607      	mov	r7, r0
 8008d42:	460c      	mov	r4, r1
 8008d44:	b10a      	cbz	r2, 8008d4a <_printf_common+0x26>
 8008d46:	3301      	adds	r3, #1
 8008d48:	6033      	str	r3, [r6, #0]
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	0699      	lsls	r1, r3, #26
 8008d4e:	bf42      	ittt	mi
 8008d50:	6833      	ldrmi	r3, [r6, #0]
 8008d52:	3302      	addmi	r3, #2
 8008d54:	6033      	strmi	r3, [r6, #0]
 8008d56:	6825      	ldr	r5, [r4, #0]
 8008d58:	f015 0506 	ands.w	r5, r5, #6
 8008d5c:	d106      	bne.n	8008d6c <_printf_common+0x48>
 8008d5e:	f104 0a19 	add.w	sl, r4, #25
 8008d62:	68e3      	ldr	r3, [r4, #12]
 8008d64:	6832      	ldr	r2, [r6, #0]
 8008d66:	1a9b      	subs	r3, r3, r2
 8008d68:	42ab      	cmp	r3, r5
 8008d6a:	dc26      	bgt.n	8008dba <_printf_common+0x96>
 8008d6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d70:	1e13      	subs	r3, r2, #0
 8008d72:	6822      	ldr	r2, [r4, #0]
 8008d74:	bf18      	it	ne
 8008d76:	2301      	movne	r3, #1
 8008d78:	0692      	lsls	r2, r2, #26
 8008d7a:	d42b      	bmi.n	8008dd4 <_printf_common+0xb0>
 8008d7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d80:	4649      	mov	r1, r9
 8008d82:	4638      	mov	r0, r7
 8008d84:	47c0      	blx	r8
 8008d86:	3001      	adds	r0, #1
 8008d88:	d01e      	beq.n	8008dc8 <_printf_common+0xa4>
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	68e5      	ldr	r5, [r4, #12]
 8008d8e:	6832      	ldr	r2, [r6, #0]
 8008d90:	f003 0306 	and.w	r3, r3, #6
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	bf08      	it	eq
 8008d98:	1aad      	subeq	r5, r5, r2
 8008d9a:	68a3      	ldr	r3, [r4, #8]
 8008d9c:	6922      	ldr	r2, [r4, #16]
 8008d9e:	bf0c      	ite	eq
 8008da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008da4:	2500      	movne	r5, #0
 8008da6:	4293      	cmp	r3, r2
 8008da8:	bfc4      	itt	gt
 8008daa:	1a9b      	subgt	r3, r3, r2
 8008dac:	18ed      	addgt	r5, r5, r3
 8008dae:	2600      	movs	r6, #0
 8008db0:	341a      	adds	r4, #26
 8008db2:	42b5      	cmp	r5, r6
 8008db4:	d11a      	bne.n	8008dec <_printf_common+0xc8>
 8008db6:	2000      	movs	r0, #0
 8008db8:	e008      	b.n	8008dcc <_printf_common+0xa8>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	4652      	mov	r2, sl
 8008dbe:	4649      	mov	r1, r9
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	47c0      	blx	r8
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	d103      	bne.n	8008dd0 <_printf_common+0xac>
 8008dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dd0:	3501      	adds	r5, #1
 8008dd2:	e7c6      	b.n	8008d62 <_printf_common+0x3e>
 8008dd4:	18e1      	adds	r1, r4, r3
 8008dd6:	1c5a      	adds	r2, r3, #1
 8008dd8:	2030      	movs	r0, #48	; 0x30
 8008dda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dde:	4422      	add	r2, r4
 8008de0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008de4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008de8:	3302      	adds	r3, #2
 8008dea:	e7c7      	b.n	8008d7c <_printf_common+0x58>
 8008dec:	2301      	movs	r3, #1
 8008dee:	4622      	mov	r2, r4
 8008df0:	4649      	mov	r1, r9
 8008df2:	4638      	mov	r0, r7
 8008df4:	47c0      	blx	r8
 8008df6:	3001      	adds	r0, #1
 8008df8:	d0e6      	beq.n	8008dc8 <_printf_common+0xa4>
 8008dfa:	3601      	adds	r6, #1
 8008dfc:	e7d9      	b.n	8008db2 <_printf_common+0x8e>
	...

08008e00 <_printf_i>:
 8008e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e04:	7e0f      	ldrb	r7, [r1, #24]
 8008e06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e08:	2f78      	cmp	r7, #120	; 0x78
 8008e0a:	4691      	mov	r9, r2
 8008e0c:	4680      	mov	r8, r0
 8008e0e:	460c      	mov	r4, r1
 8008e10:	469a      	mov	sl, r3
 8008e12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e16:	d807      	bhi.n	8008e28 <_printf_i+0x28>
 8008e18:	2f62      	cmp	r7, #98	; 0x62
 8008e1a:	d80a      	bhi.n	8008e32 <_printf_i+0x32>
 8008e1c:	2f00      	cmp	r7, #0
 8008e1e:	f000 80d8 	beq.w	8008fd2 <_printf_i+0x1d2>
 8008e22:	2f58      	cmp	r7, #88	; 0x58
 8008e24:	f000 80a3 	beq.w	8008f6e <_printf_i+0x16e>
 8008e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e30:	e03a      	b.n	8008ea8 <_printf_i+0xa8>
 8008e32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e36:	2b15      	cmp	r3, #21
 8008e38:	d8f6      	bhi.n	8008e28 <_printf_i+0x28>
 8008e3a:	a101      	add	r1, pc, #4	; (adr r1, 8008e40 <_printf_i+0x40>)
 8008e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e40:	08008e99 	.word	0x08008e99
 8008e44:	08008ead 	.word	0x08008ead
 8008e48:	08008e29 	.word	0x08008e29
 8008e4c:	08008e29 	.word	0x08008e29
 8008e50:	08008e29 	.word	0x08008e29
 8008e54:	08008e29 	.word	0x08008e29
 8008e58:	08008ead 	.word	0x08008ead
 8008e5c:	08008e29 	.word	0x08008e29
 8008e60:	08008e29 	.word	0x08008e29
 8008e64:	08008e29 	.word	0x08008e29
 8008e68:	08008e29 	.word	0x08008e29
 8008e6c:	08008fb9 	.word	0x08008fb9
 8008e70:	08008edd 	.word	0x08008edd
 8008e74:	08008f9b 	.word	0x08008f9b
 8008e78:	08008e29 	.word	0x08008e29
 8008e7c:	08008e29 	.word	0x08008e29
 8008e80:	08008fdb 	.word	0x08008fdb
 8008e84:	08008e29 	.word	0x08008e29
 8008e88:	08008edd 	.word	0x08008edd
 8008e8c:	08008e29 	.word	0x08008e29
 8008e90:	08008e29 	.word	0x08008e29
 8008e94:	08008fa3 	.word	0x08008fa3
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	1d1a      	adds	r2, r3, #4
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	602a      	str	r2, [r5, #0]
 8008ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e0a3      	b.n	8008ff4 <_printf_i+0x1f4>
 8008eac:	6820      	ldr	r0, [r4, #0]
 8008eae:	6829      	ldr	r1, [r5, #0]
 8008eb0:	0606      	lsls	r6, r0, #24
 8008eb2:	f101 0304 	add.w	r3, r1, #4
 8008eb6:	d50a      	bpl.n	8008ece <_printf_i+0xce>
 8008eb8:	680e      	ldr	r6, [r1, #0]
 8008eba:	602b      	str	r3, [r5, #0]
 8008ebc:	2e00      	cmp	r6, #0
 8008ebe:	da03      	bge.n	8008ec8 <_printf_i+0xc8>
 8008ec0:	232d      	movs	r3, #45	; 0x2d
 8008ec2:	4276      	negs	r6, r6
 8008ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ec8:	485e      	ldr	r0, [pc, #376]	; (8009044 <_printf_i+0x244>)
 8008eca:	230a      	movs	r3, #10
 8008ecc:	e019      	b.n	8008f02 <_printf_i+0x102>
 8008ece:	680e      	ldr	r6, [r1, #0]
 8008ed0:	602b      	str	r3, [r5, #0]
 8008ed2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ed6:	bf18      	it	ne
 8008ed8:	b236      	sxthne	r6, r6
 8008eda:	e7ef      	b.n	8008ebc <_printf_i+0xbc>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	6820      	ldr	r0, [r4, #0]
 8008ee0:	1d19      	adds	r1, r3, #4
 8008ee2:	6029      	str	r1, [r5, #0]
 8008ee4:	0601      	lsls	r1, r0, #24
 8008ee6:	d501      	bpl.n	8008eec <_printf_i+0xec>
 8008ee8:	681e      	ldr	r6, [r3, #0]
 8008eea:	e002      	b.n	8008ef2 <_printf_i+0xf2>
 8008eec:	0646      	lsls	r6, r0, #25
 8008eee:	d5fb      	bpl.n	8008ee8 <_printf_i+0xe8>
 8008ef0:	881e      	ldrh	r6, [r3, #0]
 8008ef2:	4854      	ldr	r0, [pc, #336]	; (8009044 <_printf_i+0x244>)
 8008ef4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ef6:	bf0c      	ite	eq
 8008ef8:	2308      	moveq	r3, #8
 8008efa:	230a      	movne	r3, #10
 8008efc:	2100      	movs	r1, #0
 8008efe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f02:	6865      	ldr	r5, [r4, #4]
 8008f04:	60a5      	str	r5, [r4, #8]
 8008f06:	2d00      	cmp	r5, #0
 8008f08:	bfa2      	ittt	ge
 8008f0a:	6821      	ldrge	r1, [r4, #0]
 8008f0c:	f021 0104 	bicge.w	r1, r1, #4
 8008f10:	6021      	strge	r1, [r4, #0]
 8008f12:	b90e      	cbnz	r6, 8008f18 <_printf_i+0x118>
 8008f14:	2d00      	cmp	r5, #0
 8008f16:	d04d      	beq.n	8008fb4 <_printf_i+0x1b4>
 8008f18:	4615      	mov	r5, r2
 8008f1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f1e:	fb03 6711 	mls	r7, r3, r1, r6
 8008f22:	5dc7      	ldrb	r7, [r0, r7]
 8008f24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f28:	4637      	mov	r7, r6
 8008f2a:	42bb      	cmp	r3, r7
 8008f2c:	460e      	mov	r6, r1
 8008f2e:	d9f4      	bls.n	8008f1a <_printf_i+0x11a>
 8008f30:	2b08      	cmp	r3, #8
 8008f32:	d10b      	bne.n	8008f4c <_printf_i+0x14c>
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	07de      	lsls	r6, r3, #31
 8008f38:	d508      	bpl.n	8008f4c <_printf_i+0x14c>
 8008f3a:	6923      	ldr	r3, [r4, #16]
 8008f3c:	6861      	ldr	r1, [r4, #4]
 8008f3e:	4299      	cmp	r1, r3
 8008f40:	bfde      	ittt	le
 8008f42:	2330      	movle	r3, #48	; 0x30
 8008f44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f48:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008f4c:	1b52      	subs	r2, r2, r5
 8008f4e:	6122      	str	r2, [r4, #16]
 8008f50:	f8cd a000 	str.w	sl, [sp]
 8008f54:	464b      	mov	r3, r9
 8008f56:	aa03      	add	r2, sp, #12
 8008f58:	4621      	mov	r1, r4
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	f7ff fee2 	bl	8008d24 <_printf_common>
 8008f60:	3001      	adds	r0, #1
 8008f62:	d14c      	bne.n	8008ffe <_printf_i+0x1fe>
 8008f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f68:	b004      	add	sp, #16
 8008f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f6e:	4835      	ldr	r0, [pc, #212]	; (8009044 <_printf_i+0x244>)
 8008f70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f74:	6829      	ldr	r1, [r5, #0]
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f7c:	6029      	str	r1, [r5, #0]
 8008f7e:	061d      	lsls	r5, r3, #24
 8008f80:	d514      	bpl.n	8008fac <_printf_i+0x1ac>
 8008f82:	07df      	lsls	r7, r3, #31
 8008f84:	bf44      	itt	mi
 8008f86:	f043 0320 	orrmi.w	r3, r3, #32
 8008f8a:	6023      	strmi	r3, [r4, #0]
 8008f8c:	b91e      	cbnz	r6, 8008f96 <_printf_i+0x196>
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	f023 0320 	bic.w	r3, r3, #32
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	2310      	movs	r3, #16
 8008f98:	e7b0      	b.n	8008efc <_printf_i+0xfc>
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	f043 0320 	orr.w	r3, r3, #32
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	2378      	movs	r3, #120	; 0x78
 8008fa4:	4828      	ldr	r0, [pc, #160]	; (8009048 <_printf_i+0x248>)
 8008fa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008faa:	e7e3      	b.n	8008f74 <_printf_i+0x174>
 8008fac:	0659      	lsls	r1, r3, #25
 8008fae:	bf48      	it	mi
 8008fb0:	b2b6      	uxthmi	r6, r6
 8008fb2:	e7e6      	b.n	8008f82 <_printf_i+0x182>
 8008fb4:	4615      	mov	r5, r2
 8008fb6:	e7bb      	b.n	8008f30 <_printf_i+0x130>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	6826      	ldr	r6, [r4, #0]
 8008fbc:	6961      	ldr	r1, [r4, #20]
 8008fbe:	1d18      	adds	r0, r3, #4
 8008fc0:	6028      	str	r0, [r5, #0]
 8008fc2:	0635      	lsls	r5, r6, #24
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	d501      	bpl.n	8008fcc <_printf_i+0x1cc>
 8008fc8:	6019      	str	r1, [r3, #0]
 8008fca:	e002      	b.n	8008fd2 <_printf_i+0x1d2>
 8008fcc:	0670      	lsls	r0, r6, #25
 8008fce:	d5fb      	bpl.n	8008fc8 <_printf_i+0x1c8>
 8008fd0:	8019      	strh	r1, [r3, #0]
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	6123      	str	r3, [r4, #16]
 8008fd6:	4615      	mov	r5, r2
 8008fd8:	e7ba      	b.n	8008f50 <_printf_i+0x150>
 8008fda:	682b      	ldr	r3, [r5, #0]
 8008fdc:	1d1a      	adds	r2, r3, #4
 8008fde:	602a      	str	r2, [r5, #0]
 8008fe0:	681d      	ldr	r5, [r3, #0]
 8008fe2:	6862      	ldr	r2, [r4, #4]
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	f7f7 f91a 	bl	8000220 <memchr>
 8008fec:	b108      	cbz	r0, 8008ff2 <_printf_i+0x1f2>
 8008fee:	1b40      	subs	r0, r0, r5
 8008ff0:	6060      	str	r0, [r4, #4]
 8008ff2:	6863      	ldr	r3, [r4, #4]
 8008ff4:	6123      	str	r3, [r4, #16]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ffc:	e7a8      	b.n	8008f50 <_printf_i+0x150>
 8008ffe:	6923      	ldr	r3, [r4, #16]
 8009000:	462a      	mov	r2, r5
 8009002:	4649      	mov	r1, r9
 8009004:	4640      	mov	r0, r8
 8009006:	47d0      	blx	sl
 8009008:	3001      	adds	r0, #1
 800900a:	d0ab      	beq.n	8008f64 <_printf_i+0x164>
 800900c:	6823      	ldr	r3, [r4, #0]
 800900e:	079b      	lsls	r3, r3, #30
 8009010:	d413      	bmi.n	800903a <_printf_i+0x23a>
 8009012:	68e0      	ldr	r0, [r4, #12]
 8009014:	9b03      	ldr	r3, [sp, #12]
 8009016:	4298      	cmp	r0, r3
 8009018:	bfb8      	it	lt
 800901a:	4618      	movlt	r0, r3
 800901c:	e7a4      	b.n	8008f68 <_printf_i+0x168>
 800901e:	2301      	movs	r3, #1
 8009020:	4632      	mov	r2, r6
 8009022:	4649      	mov	r1, r9
 8009024:	4640      	mov	r0, r8
 8009026:	47d0      	blx	sl
 8009028:	3001      	adds	r0, #1
 800902a:	d09b      	beq.n	8008f64 <_printf_i+0x164>
 800902c:	3501      	adds	r5, #1
 800902e:	68e3      	ldr	r3, [r4, #12]
 8009030:	9903      	ldr	r1, [sp, #12]
 8009032:	1a5b      	subs	r3, r3, r1
 8009034:	42ab      	cmp	r3, r5
 8009036:	dcf2      	bgt.n	800901e <_printf_i+0x21e>
 8009038:	e7eb      	b.n	8009012 <_printf_i+0x212>
 800903a:	2500      	movs	r5, #0
 800903c:	f104 0619 	add.w	r6, r4, #25
 8009040:	e7f5      	b.n	800902e <_printf_i+0x22e>
 8009042:	bf00      	nop
 8009044:	080093b9 	.word	0x080093b9
 8009048:	080093ca 	.word	0x080093ca

0800904c <_sbrk_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4d06      	ldr	r5, [pc, #24]	; (8009068 <_sbrk_r+0x1c>)
 8009050:	2300      	movs	r3, #0
 8009052:	4604      	mov	r4, r0
 8009054:	4608      	mov	r0, r1
 8009056:	602b      	str	r3, [r5, #0]
 8009058:	f7f9 fd76 	bl	8002b48 <_sbrk>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_sbrk_r+0x1a>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	b103      	cbz	r3, 8009066 <_sbrk_r+0x1a>
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	20004ca0 	.word	0x20004ca0

0800906c <memmove>:
 800906c:	4288      	cmp	r0, r1
 800906e:	b510      	push	{r4, lr}
 8009070:	eb01 0402 	add.w	r4, r1, r2
 8009074:	d902      	bls.n	800907c <memmove+0x10>
 8009076:	4284      	cmp	r4, r0
 8009078:	4623      	mov	r3, r4
 800907a:	d807      	bhi.n	800908c <memmove+0x20>
 800907c:	1e43      	subs	r3, r0, #1
 800907e:	42a1      	cmp	r1, r4
 8009080:	d008      	beq.n	8009094 <memmove+0x28>
 8009082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009086:	f803 2f01 	strb.w	r2, [r3, #1]!
 800908a:	e7f8      	b.n	800907e <memmove+0x12>
 800908c:	4402      	add	r2, r0
 800908e:	4601      	mov	r1, r0
 8009090:	428a      	cmp	r2, r1
 8009092:	d100      	bne.n	8009096 <memmove+0x2a>
 8009094:	bd10      	pop	{r4, pc}
 8009096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800909a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800909e:	e7f7      	b.n	8009090 <memmove+0x24>

080090a0 <__malloc_lock>:
 80090a0:	4801      	ldr	r0, [pc, #4]	; (80090a8 <__malloc_lock+0x8>)
 80090a2:	f000 b884 	b.w	80091ae <__retarget_lock_acquire_recursive>
 80090a6:	bf00      	nop
 80090a8:	20004ca4 	.word	0x20004ca4

080090ac <__malloc_unlock>:
 80090ac:	4801      	ldr	r0, [pc, #4]	; (80090b4 <__malloc_unlock+0x8>)
 80090ae:	f000 b87f 	b.w	80091b0 <__retarget_lock_release_recursive>
 80090b2:	bf00      	nop
 80090b4:	20004ca4 	.word	0x20004ca4

080090b8 <_free_r>:
 80090b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090ba:	2900      	cmp	r1, #0
 80090bc:	d044      	beq.n	8009148 <_free_r+0x90>
 80090be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090c2:	9001      	str	r0, [sp, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f1a1 0404 	sub.w	r4, r1, #4
 80090ca:	bfb8      	it	lt
 80090cc:	18e4      	addlt	r4, r4, r3
 80090ce:	f7ff ffe7 	bl	80090a0 <__malloc_lock>
 80090d2:	4a1e      	ldr	r2, [pc, #120]	; (800914c <_free_r+0x94>)
 80090d4:	9801      	ldr	r0, [sp, #4]
 80090d6:	6813      	ldr	r3, [r2, #0]
 80090d8:	b933      	cbnz	r3, 80090e8 <_free_r+0x30>
 80090da:	6063      	str	r3, [r4, #4]
 80090dc:	6014      	str	r4, [r2, #0]
 80090de:	b003      	add	sp, #12
 80090e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090e4:	f7ff bfe2 	b.w	80090ac <__malloc_unlock>
 80090e8:	42a3      	cmp	r3, r4
 80090ea:	d908      	bls.n	80090fe <_free_r+0x46>
 80090ec:	6825      	ldr	r5, [r4, #0]
 80090ee:	1961      	adds	r1, r4, r5
 80090f0:	428b      	cmp	r3, r1
 80090f2:	bf01      	itttt	eq
 80090f4:	6819      	ldreq	r1, [r3, #0]
 80090f6:	685b      	ldreq	r3, [r3, #4]
 80090f8:	1949      	addeq	r1, r1, r5
 80090fa:	6021      	streq	r1, [r4, #0]
 80090fc:	e7ed      	b.n	80090da <_free_r+0x22>
 80090fe:	461a      	mov	r2, r3
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	b10b      	cbz	r3, 8009108 <_free_r+0x50>
 8009104:	42a3      	cmp	r3, r4
 8009106:	d9fa      	bls.n	80090fe <_free_r+0x46>
 8009108:	6811      	ldr	r1, [r2, #0]
 800910a:	1855      	adds	r5, r2, r1
 800910c:	42a5      	cmp	r5, r4
 800910e:	d10b      	bne.n	8009128 <_free_r+0x70>
 8009110:	6824      	ldr	r4, [r4, #0]
 8009112:	4421      	add	r1, r4
 8009114:	1854      	adds	r4, r2, r1
 8009116:	42a3      	cmp	r3, r4
 8009118:	6011      	str	r1, [r2, #0]
 800911a:	d1e0      	bne.n	80090de <_free_r+0x26>
 800911c:	681c      	ldr	r4, [r3, #0]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	6053      	str	r3, [r2, #4]
 8009122:	4421      	add	r1, r4
 8009124:	6011      	str	r1, [r2, #0]
 8009126:	e7da      	b.n	80090de <_free_r+0x26>
 8009128:	d902      	bls.n	8009130 <_free_r+0x78>
 800912a:	230c      	movs	r3, #12
 800912c:	6003      	str	r3, [r0, #0]
 800912e:	e7d6      	b.n	80090de <_free_r+0x26>
 8009130:	6825      	ldr	r5, [r4, #0]
 8009132:	1961      	adds	r1, r4, r5
 8009134:	428b      	cmp	r3, r1
 8009136:	bf04      	itt	eq
 8009138:	6819      	ldreq	r1, [r3, #0]
 800913a:	685b      	ldreq	r3, [r3, #4]
 800913c:	6063      	str	r3, [r4, #4]
 800913e:	bf04      	itt	eq
 8009140:	1949      	addeq	r1, r1, r5
 8009142:	6021      	streq	r1, [r4, #0]
 8009144:	6054      	str	r4, [r2, #4]
 8009146:	e7ca      	b.n	80090de <_free_r+0x26>
 8009148:	b003      	add	sp, #12
 800914a:	bd30      	pop	{r4, r5, pc}
 800914c:	20004c98 	.word	0x20004c98

08009150 <_realloc_r>:
 8009150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009154:	4680      	mov	r8, r0
 8009156:	4614      	mov	r4, r2
 8009158:	460e      	mov	r6, r1
 800915a:	b921      	cbnz	r1, 8009166 <_realloc_r+0x16>
 800915c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009160:	4611      	mov	r1, r2
 8009162:	f7ff bc0f 	b.w	8008984 <_malloc_r>
 8009166:	b92a      	cbnz	r2, 8009174 <_realloc_r+0x24>
 8009168:	f7ff ffa6 	bl	80090b8 <_free_r>
 800916c:	4625      	mov	r5, r4
 800916e:	4628      	mov	r0, r5
 8009170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009174:	f000 f81d 	bl	80091b2 <_malloc_usable_size_r>
 8009178:	4284      	cmp	r4, r0
 800917a:	4607      	mov	r7, r0
 800917c:	d802      	bhi.n	8009184 <_realloc_r+0x34>
 800917e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009182:	d812      	bhi.n	80091aa <_realloc_r+0x5a>
 8009184:	4621      	mov	r1, r4
 8009186:	4640      	mov	r0, r8
 8009188:	f7ff fbfc 	bl	8008984 <_malloc_r>
 800918c:	4605      	mov	r5, r0
 800918e:	2800      	cmp	r0, #0
 8009190:	d0ed      	beq.n	800916e <_realloc_r+0x1e>
 8009192:	42bc      	cmp	r4, r7
 8009194:	4622      	mov	r2, r4
 8009196:	4631      	mov	r1, r6
 8009198:	bf28      	it	cs
 800919a:	463a      	movcs	r2, r7
 800919c:	f7ff fb2e 	bl	80087fc <memcpy>
 80091a0:	4631      	mov	r1, r6
 80091a2:	4640      	mov	r0, r8
 80091a4:	f7ff ff88 	bl	80090b8 <_free_r>
 80091a8:	e7e1      	b.n	800916e <_realloc_r+0x1e>
 80091aa:	4635      	mov	r5, r6
 80091ac:	e7df      	b.n	800916e <_realloc_r+0x1e>

080091ae <__retarget_lock_acquire_recursive>:
 80091ae:	4770      	bx	lr

080091b0 <__retarget_lock_release_recursive>:
 80091b0:	4770      	bx	lr

080091b2 <_malloc_usable_size_r>:
 80091b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b6:	1f18      	subs	r0, r3, #4
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	bfbc      	itt	lt
 80091bc:	580b      	ldrlt	r3, [r1, r0]
 80091be:	18c0      	addlt	r0, r0, r3
 80091c0:	4770      	bx	lr
	...

080091c4 <_init>:
 80091c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c6:	bf00      	nop
 80091c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ca:	bc08      	pop	{r3}
 80091cc:	469e      	mov	lr, r3
 80091ce:	4770      	bx	lr

080091d0 <_fini>:
 80091d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d2:	bf00      	nop
 80091d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d6:	bc08      	pop	{r3}
 80091d8:	469e      	mov	lr, r3
 80091da:	4770      	bx	lr
