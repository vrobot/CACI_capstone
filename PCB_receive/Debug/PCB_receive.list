
PCB_receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006bb8  08006bb8  00016bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c24  08006c24  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c2c  08006c2c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c2c  08006c2c  00016c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b8  2000008c  08006cc0  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001344  08006cc0  00021344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001236e  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e5  00000000  00000000  0003242a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00034910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00035978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ad2  00000000  00000000  000368f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a3c  00000000  00000000  000593ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3864  00000000  00000000  0006be06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013f66a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a38  00000000  00000000  0013f6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006ba0 	.word	0x08006ba0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	08006ba0 	.word	0x08006ba0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 80005d4:	78fb      	ldrb	r3, [r7, #3]
 80005d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6858      	ldr	r0, [r3, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	8adb      	ldrh	r3, [r3, #22]
 80005e6:	2200      	movs	r2, #0
 80005e8:	4619      	mov	r1, r3
 80005ea:	f002 f905 	bl	80027f8 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	1cf9      	adds	r1, r7, #3
 80005f8:	2201      	movs	r2, #1
 80005fa:	f002 ff52 	bl	80034a2 <HAL_SPI_Transmit>
 80005fe:	4603      	mov	r3, r0
 8000600:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	f107 010f 	add.w	r1, r7, #15
 800060e:	2201      	movs	r2, #1
 8000610:	f003 f883 	bl	800371a <HAL_SPI_Receive>
 8000614:	4603      	mov	r3, r0
 8000616:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6858      	ldr	r0, [r3, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	8adb      	ldrh	r3, [r3, #22]
 8000620:	2201      	movs	r2, #1
 8000622:	4619      	mov	r1, r3
 8000624:	f002 f8e8 	bl	80027f8 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b084      	sub	sp, #16
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
 800063a:	460b      	mov	r3, r1
 800063c:	70fb      	strb	r3, [r7, #3]
 800063e:	4613      	mov	r3, r2
 8000640:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8000642:	78fb      	ldrb	r3, [r7, #3]
 8000644:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000648:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 800064a:	78bb      	ldrb	r3, [r7, #2]
 800064c:	021b      	lsls	r3, r3, #8
 800064e:	b21a      	sxth	r2, r3
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	b21b      	sxth	r3, r3
 8000654:	4313      	orrs	r3, r2
 8000656:	b21b      	sxth	r3, r3
 8000658:	b29b      	uxth	r3, r3
 800065a:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6858      	ldr	r0, [r3, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	8adb      	ldrh	r3, [r3, #22]
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	f002 f8c6 	bl	80027f8 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	f107 010a 	add.w	r1, r7, #10
 8000678:	2202      	movs	r2, #2
 800067a:	f002 ff12 	bl	80034a2 <HAL_SPI_Transmit>
 800067e:	4603      	mov	r3, r0
 8000680:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6858      	ldr	r0, [r3, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	8adb      	ldrh	r3, [r3, #22]
 800068a:	2201      	movs	r2, #1
 800068c:	4619      	mov	r1, r3
 800068e:	f002 f8b3 	bl	80027f8 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <read_fifo>:
  }
}

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b088      	sub	sp, #32
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	4611      	mov	r1, r2
 80006a6:	461a      	mov	r2, r3
 80006a8:	460b      	mov	r3, r1
 80006aa:	71fb      	strb	r3, [r7, #7]
 80006ac:	4613      	mov	r3, r2
 80006ae:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 80006b0:	2300      	movs	r3, #0
 80006b2:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	6858      	ldr	r0, [r3, #4]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	8adb      	ldrh	r3, [r3, #22]
 80006bc:	2200      	movs	r2, #0
 80006be:	4619      	mov	r1, r3
 80006c0:	f002 f89a 	bl	80027f8 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	f107 0117 	add.w	r1, r7, #23
 80006d0:	2201      	movs	r2, #1
 80006d2:	f002 fee6 	bl	80034a2 <HAL_SPI_Transmit>
 80006d6:	4603      	mov	r3, r0
 80006d8:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d10a      	bne.n	80006f6 <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	79fa      	ldrb	r2, [r7, #7]
 80006e6:	b292      	uxth	r2, r2
 80006e8:	68b9      	ldr	r1, [r7, #8]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 fac8 	bl	8003c80 <HAL_SPI_Receive_DMA>
 80006f0:	4603      	mov	r3, r0
 80006f2:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 80006f4:	e012      	b.n	800071c <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	68b9      	ldr	r1, [r7, #8]
 8000704:	f003 f809 	bl	800371a <HAL_SPI_Receive>
 8000708:	4603      	mov	r3, r0
 800070a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	6858      	ldr	r0, [r3, #4]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	8adb      	ldrh	r3, [r3, #22]
 8000714:	2201      	movs	r2, #1
 8000716:	4619      	mov	r1, r3
 8000718:	f002 f86e 	bl	80027f8 <HAL_GPIO_WritePin>
}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8000730:	78fb      	ldrb	r3, [r7, #3]
 8000732:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000736:	b2db      	uxtb	r3, r3
 8000738:	461a      	mov	r2, r3
 800073a:	2101      	movs	r1, #1
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ff78 	bl	8000632 <write_register>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	2b2c      	cmp	r3, #44	; 0x2c
 800075c:	d801      	bhi.n	8000762 <set_OCP+0x16>
    imax = 45;
 800075e:	232d      	movs	r3, #45	; 0x2d
 8000760:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8000762:	78fb      	ldrb	r3, [r7, #3]
 8000764:	2bf0      	cmp	r3, #240	; 0xf0
 8000766:	d901      	bls.n	800076c <set_OCP+0x20>
    imax = 240;
 8000768:	23f0      	movs	r3, #240	; 0xf0
 800076a:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	2b81      	cmp	r3, #129	; 0x81
 8000770:	d809      	bhi.n	8000786 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	3b2d      	subs	r3, #45	; 0x2d
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <set_OCP+0x68>)
 8000778:	fb82 1203 	smull	r1, r2, r2, r3
 800077c:	1052      	asrs	r2, r2, #1
 800077e:	17db      	asrs	r3, r3, #31
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	73fb      	strb	r3, [r7, #15]
 8000784:	e008      	b.n	8000798 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8000786:	78fb      	ldrb	r3, [r7, #3]
 8000788:	331e      	adds	r3, #30
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <set_OCP+0x68>)
 800078c:	fb82 1203 	smull	r1, r2, r2, r3
 8000790:	1092      	asrs	r2, r2, #2
 8000792:	17db      	asrs	r3, r3, #31
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	f043 0320 	orr.w	r3, r3, #32
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	461a      	mov	r2, r3
 80007a2:	210b      	movs	r1, #11
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff44 	bl	8000632 <write_register>
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	66666667 	.word	0x66666667

080007b8 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 80007b8:	b5b0      	push	{r4, r5, r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 80007c0:	211d      	movs	r1, #29
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff fefe 	bl	80005c4 <read_register>
 80007c8:	4603      	mov	r3, r0
 80007ca:	091b      	lsrs	r3, r3, #4
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2200      	movs	r2, #0
 80007d2:	461c      	mov	r4, r3
 80007d4:	4615      	mov	r5, r2
 80007d6:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 80007da:	211e      	movs	r1, #30
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff fef1 	bl	80005c4 <read_register>
 80007e2:	4603      	mov	r3, r0
 80007e4:	091b      	lsrs	r3, r3, #4
 80007e6:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 80007e8:	2304      	movs	r3, #4
 80007ea:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	2b0a      	cmp	r3, #10
 80007f0:	d908      	bls.n	8000804 <set_low_data_rate_optimization+0x4c>
 80007f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80007f6:	1fd1      	subs	r1, r2, #7
 80007f8:	430b      	orrs	r3, r1
 80007fa:	d103      	bne.n	8000804 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 80007fc:	7ffb      	ldrb	r3, [r7, #31]
 80007fe:	f043 0308 	orr.w	r3, r3, #8
 8000802:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8000804:	7ffb      	ldrb	r3, [r7, #31]
 8000806:	461a      	mov	r2, r3
 8000808:	2126      	movs	r1, #38	; 0x26
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ff11 	bl	8000632 <write_register>
}
 8000810:	bf00      	nop
 8000812:	3720      	adds	r7, #32
 8000814:	46bd      	mov	sp, r7
 8000816:	bdb0      	pop	{r4, r5, r7, pc}

08000818 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8000820:	2100      	movs	r1, #0
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff ff7e 	bl	8000724 <set_mode>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <lora_mode_receive_continuous>:

void lora_mode_receive_continuous(lora_sx1276 *lora)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	7d5b      	ldrb	r3, [r3, #21]
 800083c:	461a      	mov	r2, r3
 800083e:	210f      	movs	r1, #15
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fef6 	bl	8000632 <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8000846:	22f0      	movs	r2, #240	; 0xf0
 8000848:	2112      	movs	r1, #18
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff fef1 	bl	8000632 <write_register>

  set_mode(lora, OPMODE_RX_CONTINUOUS);
 8000850:	2105      	movs	r1, #5
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ff66 	bl	8000724 <set_mode>
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8000868:	2101      	movs	r1, #1
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ff5a 	bl	8000724 <set_mode>
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8000880:	211d      	movs	r1, #29
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff fe9e 	bl	80005c4 <read_register>
 8000888:	4603      	mov	r3, r0
 800088a:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	f023 0301 	bic.w	r3, r3, #1
 8000892:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	461a      	mov	r2, r3
 8000898:	211d      	movs	r1, #29
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff fec9 	bl	8000632 <write_register>
}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	691b      	ldr	r3, [r3, #16]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d10e      	bne.n	80008da <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	2b0f      	cmp	r3, #15
 80008c0:	d901      	bls.n	80008c6 <lora_set_tx_power+0x1e>
      level = 15;
 80008c2:	230f      	movs	r3, #15
 80008c4:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80008c6:	78fb      	ldrb	r3, [r7, #3]
 80008c8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	461a      	mov	r2, r3
 80008d0:	2109      	movs	r1, #9
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff fead 	bl	8000632 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 80008d8:	e02e      	b.n	8000938 <lora_set_tx_power+0x90>
    if (level > 20) {
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	2b14      	cmp	r3, #20
 80008de:	d901      	bls.n	80008e4 <lora_set_tx_power+0x3c>
      level = 20;
 80008e0:	2314      	movs	r3, #20
 80008e2:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 80008e4:	78fb      	ldrb	r3, [r7, #3]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d801      	bhi.n	80008ee <lora_set_tx_power+0x46>
      level = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 80008ee:	78fb      	ldrb	r3, [r7, #3]
 80008f0:	2b11      	cmp	r3, #17
 80008f2:	d90c      	bls.n	800090e <lora_set_tx_power+0x66>
      level -= 3;
 80008f4:	78fb      	ldrb	r3, [r7, #3]
 80008f6:	3b03      	subs	r3, #3
 80008f8:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80008fa:	2287      	movs	r2, #135	; 0x87
 80008fc:	214d      	movs	r1, #77	; 0x4d
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff fe97 	bl	8000632 <write_register>
      set_OCP(lora, 140);
 8000904:	218c      	movs	r1, #140	; 0x8c
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff ff20 	bl	800074c <set_OCP>
 800090c:	e008      	b.n	8000920 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800090e:	2284      	movs	r2, #132	; 0x84
 8000910:	214d      	movs	r1, #77	; 0x4d
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff fe8d 	bl	8000632 <write_register>
      set_OCP(lora, 97);
 8000918:	2161      	movs	r1, #97	; 0x61
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff ff16 	bl	800074c <set_OCP>
    level -= 2;
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	3b02      	subs	r3, #2
 8000924:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8000926:	78fb      	ldrb	r3, [r7, #3]
 8000928:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800092c:	b2db      	uxtb	r3, r3
 800092e:	461a      	mov	r2, r3
 8000930:	2109      	movs	r1, #9
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fe7d 	bl	8000632 <write_register>
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 800094c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000950:	f04f 0000 	mov.w	r0, #0
 8000954:	f04f 0100 	mov.w	r1, #0
 8000958:	04d9      	lsls	r1, r3, #19
 800095a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800095e:	04d0      	lsls	r0, r2, #19
 8000960:	4a19      	ldr	r2, [pc, #100]	; (80009c8 <lora_set_frequency+0x88>)
 8000962:	f04f 0300 	mov.w	r3, #0
 8000966:	f7ff fcab 	bl	80002c0 <__aeabi_uldivmod>
 800096a:	4602      	mov	r2, r0
 800096c:	460b      	mov	r3, r1
 800096e:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8000972:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000976:	f04f 0200 	mov.w	r2, #0
 800097a:	f04f 0300 	mov.w	r3, #0
 800097e:	0c02      	lsrs	r2, r0, #16
 8000980:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000984:	0c0b      	lsrs	r3, r1, #16
 8000986:	b2d3      	uxtb	r3, r2
 8000988:	461a      	mov	r2, r3
 800098a:	2106      	movs	r1, #6
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f7ff fe50 	bl	8000632 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8000992:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000996:	f04f 0200 	mov.w	r2, #0
 800099a:	f04f 0300 	mov.w	r3, #0
 800099e:	0a02      	lsrs	r2, r0, #8
 80009a0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80009a4:	0a0b      	lsrs	r3, r1, #8
 80009a6:	b2d3      	uxtb	r3, r2
 80009a8:	461a      	mov	r2, r3
 80009aa:	2107      	movs	r1, #7
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f7ff fe40 	bl	8000632 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80009b2:	7c3b      	ldrb	r3, [r7, #16]
 80009b4:	461a      	mov	r2, r3
 80009b6:	2108      	movs	r1, #8
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	f7ff fe3a 	bl	8000632 <write_register>
}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	01e84800 	.word	0x01e84800

080009cc <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80009d8:	78fb      	ldrb	r3, [r7, #3]
 80009da:	2b05      	cmp	r3, #5
 80009dc:	d802      	bhi.n	80009e4 <lora_set_spreading_factor+0x18>
    sf = 6;
 80009de:	2306      	movs	r3, #6
 80009e0:	70fb      	strb	r3, [r7, #3]
 80009e2:	e004      	b.n	80009ee <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	2b0c      	cmp	r3, #12
 80009e8:	d901      	bls.n	80009ee <lora_set_spreading_factor+0x22>
    sf = 12;
 80009ea:	230c      	movs	r3, #12
 80009ec:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80009ee:	78fb      	ldrb	r3, [r7, #3]
 80009f0:	2b06      	cmp	r3, #6
 80009f2:	d10a      	bne.n	8000a0a <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80009f4:	22c5      	movs	r2, #197	; 0xc5
 80009f6:	2131      	movs	r1, #49	; 0x31
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff fe1a 	bl	8000632 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80009fe:	220c      	movs	r2, #12
 8000a00:	2137      	movs	r1, #55	; 0x37
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff fe15 	bl	8000632 <write_register>
 8000a08:	e009      	b.n	8000a1e <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8000a0a:	22c3      	movs	r2, #195	; 0xc3
 8000a0c:	2131      	movs	r1, #49	; 0x31
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff fe0f 	bl	8000632 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000a14:	220a      	movs	r2, #10
 8000a16:	2137      	movs	r1, #55	; 0x37
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff fe0a 	bl	8000632 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8000a1e:	211e      	movs	r1, #30
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff fdcf 	bl	80005c4 <read_register>
 8000a26:	4603      	mov	r3, r0
 8000a28:	73fb      	strb	r3, [r7, #15]
  mc2 |= sf << 4;
 8000a2a:	78fb      	ldrb	r3, [r7, #3]
 8000a2c:	011b      	lsls	r3, r3, #4
 8000a2e:	b25a      	sxtb	r2, r3
 8000a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	b25b      	sxtb	r3, r3
 8000a38:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	211e      	movs	r1, #30
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff fdf6 	bl	8000632 <write_register>

  set_low_data_rate_optimization(lora);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff feb6 	bl	80007b8 <set_low_data_rate_optimization>
}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8000a60:	887b      	ldrh	r3, [r7, #2]
 8000a62:	0a1b      	lsrs	r3, r3, #8
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	461a      	mov	r2, r3
 8000a6a:	2120      	movs	r1, #32
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff fde0 	bl	8000632 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8000a72:	887b      	ldrh	r3, [r7, #2]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	2121      	movs	r1, #33	; 0x21
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff fdd6 	bl	8000632 <write_register>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8000a96:	2142      	movs	r1, #66	; 0x42
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff fd93 	bl	80005c4 <read_register>
 8000a9e:	4603      	mov	r3, r0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 8000ab0:	2112      	movs	r1, #18
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff fd86 	bl	80005c4 <read_register>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ac2:	b2db      	uxtb	r3, r3
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 8000ad4:	211d      	movs	r1, #29
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff fd74 	bl	80005c4 <read_register>
 8000adc:	4603      	mov	r3, r0
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 8000ae4:	7bbb      	ldrb	r3, [r7, #14]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d006      	beq.n	8000af8 <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 8000aea:	2122      	movs	r1, #34	; 0x22
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fd69 	bl	80005c4 <read_register>
 8000af2:	4603      	mov	r3, r0
 8000af4:	73fb      	strb	r3, [r7, #15]
 8000af6:	e005      	b.n	8000b04 <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 8000af8:	2113      	movs	r1, #19
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff fd62 	bl	80005c4 <read_register>
 8000b00:	4603      	mov	r3, r0
 8000b02:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 8000b1e:	2306      	movs	r3, #6
 8000b20:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 8000b26:	2112      	movs	r1, #18
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	f7ff fd4b 	bl	80005c4 <read_register>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8000b32:	22f0      	movs	r2, #240	; 0xf0
 8000b34:	2112      	movs	r1, #18
 8000b36:	68f8      	ldr	r0, [r7, #12]
 8000b38:	f7ff fd7b 	bl	8000632 <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 8000b3c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	da02      	bge.n	8000b4a <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 8000b44:	2302      	movs	r3, #2
 8000b46:	75fb      	strb	r3, [r7, #23]
    goto done;
 8000b48:	e030      	b.n	8000bac <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 8000b4a:	7d7b      	ldrb	r3, [r7, #21]
 8000b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d02a      	beq.n	8000baa <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 8000b54:	7d7b      	ldrb	r3, [r7, #21]
 8000b56:	f003 0310 	and.w	r3, r3, #16
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d102      	bne.n	8000b64 <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	75fb      	strb	r3, [r7, #23]
      goto done;
 8000b62:	e023      	b.n	8000bac <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 8000b64:	7d7b      	ldrb	r3, [r7, #21]
 8000b66:	f003 0320 	and.w	r3, r3, #32
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	75fb      	strb	r3, [r7, #23]
      goto done;
 8000b72:	e01b      	b.n	8000bac <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f7ff ffa9 	bl	8000acc <lora_pending_packet_length>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 8000b7e:	2110      	movs	r1, #16
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f7ff fd1f 	bl	80005c4 <read_register>
 8000b86:	4603      	mov	r3, r0
 8000b88:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 8000b8a:	7d3b      	ldrb	r3, [r7, #20]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	210d      	movs	r1, #13
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f7ff fd4e 	bl	8000632 <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 8000b96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b9a:	7dba      	ldrb	r2, [r7, #22]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f7ff fd7b 	bl	800069a <read_fifo>
    res = LORA_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	75fb      	strb	r3, [r7, #23]
 8000ba8:	e000      	b.n	8000bac <lora_receive_packet_base+0x9e>
  }

done:
 8000baa:	bf00      	nop
  if (error) {
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d002      	beq.n	8000bb8 <lora_receive_packet_base+0xaa>
    *error = res;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	7dfa      	ldrb	r2, [r7, #23]
 8000bb6:	701a      	strb	r2, [r3, #0]
  }

  return len;
 8000bb8:	7dbb      	ldrb	r3, [r7, #22]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af02      	add	r7, sp, #8
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 8000bd2:	79fa      	ldrb	r2, [r7, #7]
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68b9      	ldr	r1, [r7, #8]
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f7ff ff96 	bl	8000b0e <lora_receive_packet_base>
 8000be2:	4603      	mov	r3, r0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 8000c00:	e00b      	b.n	8000c1a <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f7ff ff50 	bl	8000aa8 <lora_is_packet_available>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10a      	bne.n	8000c24 <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f000 ff26 	bl	8001a60 <HAL_Delay>
    elapsed++;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3301      	adds	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d3ef      	bcc.n	8000c02 <lora_receive_packet_blocking+0x16>
 8000c22:	e000      	b.n	8000c26 <lora_receive_packet_blocking+0x3a>
      break;
 8000c24:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 8000c26:	79fa      	ldrb	r2, [r7, #7]
 8000c28:	6a3b      	ldr	r3, [r7, #32]
 8000c2a:	68b9      	ldr	r1, [r7, #8]
 8000c2c:	68f8      	ldr	r0, [r7, #12]
 8000c2e:	f7ff ffc8 	bl	8000bc2 <lora_receive_packet>
 8000c32:	4603      	mov	r3, r0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
 8000c48:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	68ba      	ldr	r2, [r7, #8]
 8000c4e:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	887a      	ldrh	r2, [r7, #2]
 8000c5a:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000c5c:	6a3a      	ldr	r2, [r7, #32]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2201      	movs	r2, #1
 8000c66:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2200      	movs	r2, #0
 8000c72:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c7a:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8000c7c:	68f8      	ldr	r0, [r7, #12]
 8000c7e:	f7ff ff06 	bl	8000a8e <lora_version>
 8000c82:	4603      	mov	r3, r0
 8000c84:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8000c86:	7dfb      	ldrb	r3, [r7, #23]
 8000c88:	2b12      	cmp	r3, #18
 8000c8a:	d001      	beq.n	8000c90 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	e031      	b.n	8000cf4 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000c90:	68f8      	ldr	r0, [r7, #12]
 8000c92:	f7ff fdc1 	bl	8000818 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000c96:	68f8      	ldr	r0, [r7, #12]
 8000c98:	f7ff fdbe 	bl	8000818 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000c9c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	f7ff fe4d 	bl	8000940 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000ca6:	2107      	movs	r1, #7
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f7ff fe8f 	bl	80009cc <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000cae:	210a      	movs	r1, #10
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f7ff fecf 	bl	8000a54 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000cb6:	68f8      	ldr	r0, [r7, #12]
 8000cb8:	f7ff fdde 	bl	8000878 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000cbc:	210c      	movs	r1, #12
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f7ff fc80 	bl	80005c4 <read_register>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000cc8:	7dbb      	ldrb	r3, [r7, #22]
 8000cca:	f043 0303 	orr.w	r3, r3, #3
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	210c      	movs	r1, #12
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f7ff fcac 	bl	8000632 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000cda:	2204      	movs	r2, #4
 8000cdc:	2126      	movs	r1, #38	; 0x26
 8000cde:	68f8      	ldr	r0, [r7, #12]
 8000ce0:	f7ff fca7 	bl	8000632 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000ce4:	2111      	movs	r1, #17
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f7ff fdde 	bl	80008a8 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000cec:	68f8      	ldr	r0, [r7, #12]
 8000cee:	f7ff fdb7 	bl	8000860 <lora_mode_standby>

  return LORA_OK;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t iterfacing_success[] = "Interfacing SUCCESS";
uint8_t iterfacing_failed[] = "Interfacing FAILED";

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a33      	ldr	r2, [pc, #204]	; (8000dd4 <HAL_UART_RxCpltCallback+0xd8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d15e      	bne.n	8000dca <HAL_UART_RxCpltCallback+0xce>
		char *string;
		memset(buffStr, 0, 2048);
 8000d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d10:	2100      	movs	r1, #0
 8000d12:	4831      	ldr	r0, [pc, #196]	; (8000dd8 <HAL_UART_RxCpltCallback+0xdc>)
 8000d14:	f005 fa6e 	bl	80061f4 <memset>
		sprintf(buffStr, "%s", GPS_buffer);
 8000d18:	4a30      	ldr	r2, [pc, #192]	; (8000ddc <HAL_UART_RxCpltCallback+0xe0>)
 8000d1a:	4931      	ldr	r1, [pc, #196]	; (8000de0 <HAL_UART_RxCpltCallback+0xe4>)
 8000d1c:	482e      	ldr	r0, [pc, #184]	; (8000dd8 <HAL_UART_RxCpltCallback+0xdc>)
 8000d1e:	f005 fa71 	bl	8006204 <siprintf>
		string = strdup(buffStr);
 8000d22:	482d      	ldr	r0, [pc, #180]	; (8000dd8 <HAL_UART_RxCpltCallback+0xdc>)
 8000d24:	f005 fa9c 	bl	8006260 <strdup>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60fb      	str	r3, [r7, #12]

		char* token;
		while ((token = strsep(&string, "\n")) != NULL) {
 8000d2c:	e03d      	b.n	8000daa <HAL_UART_RxCpltCallback+0xae>
			memset(nmeaSnt, 0, 80);
 8000d2e:	2250      	movs	r2, #80	; 0x50
 8000d30:	2100      	movs	r1, #0
 8000d32:	482c      	ldr	r0, [pc, #176]	; (8000de4 <HAL_UART_RxCpltCallback+0xe8>)
 8000d34:	f005 fa5e 	bl	80061f4 <memset>
			sprintf(nmeaSnt, "%s\n\r", token);
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	492b      	ldr	r1, [pc, #172]	; (8000de8 <HAL_UART_RxCpltCallback+0xec>)
 8000d3c:	4829      	ldr	r0, [pc, #164]	; (8000de4 <HAL_UART_RxCpltCallback+0xe8>)
 8000d3e:	f005 fa61 	bl	8006204 <siprintf>
			if ((strstr(nmeaSnt, "$GPGLL") != 0) && strlen(nmeaSnt) > 48 && strlen(nmeaSnt) < 65) {
 8000d42:	492a      	ldr	r1, [pc, #168]	; (8000dec <HAL_UART_RxCpltCallback+0xf0>)
 8000d44:	4827      	ldr	r0, [pc, #156]	; (8000de4 <HAL_UART_RxCpltCallback+0xe8>)
 8000d46:	f005 faad 	bl	80062a4 <strstr>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d02c      	beq.n	8000daa <HAL_UART_RxCpltCallback+0xae>
 8000d50:	4824      	ldr	r0, [pc, #144]	; (8000de4 <HAL_UART_RxCpltCallback+0xe8>)
 8000d52:	f7ff fa5d 	bl	8000210 <strlen>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b30      	cmp	r3, #48	; 0x30
 8000d5a:	d926      	bls.n	8000daa <HAL_UART_RxCpltCallback+0xae>
 8000d5c:	4821      	ldr	r0, [pc, #132]	; (8000de4 <HAL_UART_RxCpltCallback+0xe8>)
 8000d5e:	f7ff fa57 	bl	8000210 <strlen>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b40      	cmp	r3, #64	; 0x40
 8000d66:	d820      	bhi.n	8000daa <HAL_UART_RxCpltCallback+0xae>
				//Raw Data
				char* GPSidx = strchr(nmeaSnt, '\n');
 8000d68:	210a      	movs	r1, #10
 8000d6a:	481e      	ldr	r0, [pc, #120]	; (8000de4 <HAL_UART_RxCpltCallback+0xe8>)
 8000d6c:	f005 fa6a 	bl	8006244 <strchr>
 8000d70:	6138      	str	r0, [r7, #16]
				if (GPSidx){
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d004      	beq.n	8000d82 <HAL_UART_RxCpltCallback+0x86>
					GPSidxint = GPSidx-nmeaSnt;
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4a1a      	ldr	r2, [pc, #104]	; (8000de4 <HAL_UART_RxCpltCallback+0xe8>)
 8000d7c:	1a9b      	subs	r3, r3, r2
 8000d7e:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <HAL_UART_RxCpltCallback+0xf4>)
 8000d80:	6013      	str	r3, [r2, #0]
				}
				memset(GPS_latest_data, 0, 65);
 8000d82:	2241      	movs	r2, #65	; 0x41
 8000d84:	2100      	movs	r1, #0
 8000d86:	481b      	ldr	r0, [pc, #108]	; (8000df4 <HAL_UART_RxCpltCallback+0xf8>)
 8000d88:	f005 fa34 	bl	80061f4 <memset>
				memcpy(GPS_latest_data, nmeaSnt, GPSidxint);
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <HAL_UART_RxCpltCallback+0xf4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4914      	ldr	r1, [pc, #80]	; (8000de4 <HAL_UART_RxCpltCallback+0xe8>)
 8000d94:	4817      	ldr	r0, [pc, #92]	; (8000df4 <HAL_UART_RxCpltCallback+0xf8>)
 8000d96:	f005 fa1f 	bl	80061d8 <memcpy>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2110      	movs	r1, #16
 8000d9e:	4816      	ldr	r0, [pc, #88]	; (8000df8 <HAL_UART_RxCpltCallback+0xfc>)
 8000da0:	f001 fd2a 	bl	80027f8 <HAL_GPIO_WritePin>
				GPS_ready = 1;
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_UART_RxCpltCallback+0x100>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
		while ((token = strsep(&string, "\n")) != NULL) {
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4914      	ldr	r1, [pc, #80]	; (8000e00 <HAL_UART_RxCpltCallback+0x104>)
 8000db0:	4618      	mov	r0, r3
 8000db2:	f005 fa72 	bl	800629a <strsep>
 8000db6:	6178      	str	r0, [r7, #20]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1b7      	bne.n	8000d2e <HAL_UART_RxCpltCallback+0x32>

			}
		}
		HAL_UART_Receive_DMA(&huart2, GPS_buffer, 2048);
 8000dbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dc2:	4906      	ldr	r1, [pc, #24]	; (8000ddc <HAL_UART_RxCpltCallback+0xe0>)
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <HAL_UART_RxCpltCallback+0xd8>)
 8000dc6:	f004 f8be 	bl	8004f46 <HAL_UART_Receive_DMA>
	}
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000018c 	.word	0x2000018c
 8000dd8:	20000a90 	.word	0x20000a90
 8000ddc:	20000290 	.word	0x20000290
 8000de0:	08006bb8 	.word	0x08006bb8
 8000de4:	20001290 	.word	0x20001290
 8000de8:	08006bbc 	.word	0x08006bbc
 8000dec:	08006bc4 	.word	0x08006bc4
 8000df0:	20001324 	.word	0x20001324
 8000df4:	200012e0 	.word	0x200012e0
 8000df8:	40021400 	.word	0x40021400
 8000dfc:	20001328 	.word	0x20001328
 8000e00:	08006bcc 	.word	0x08006bcc
 8000e04:	00000000 	.word	0x00000000

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e0c:	b0cc      	sub	sp, #304	; 0x130
 8000e0e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e10:	f000 fdb4 	bl	800197c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e14:	f000 f8de 	bl	8000fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e18:	f000 fa62 	bl	80012e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e1c:	f000 f94e 	bl	80010bc <MX_SPI1_Init>
  MX_TIM2_Init();
 8000e20:	f000 f982 	bl	8001128 <MX_TIM2_Init>
  MX_DMA_Init();
 8000e24:	f000 fa26 	bl	8001274 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e28:	f000 f9fa 	bl	8001220 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000e2c:	f000 f9ce 	bl	80011cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2110      	movs	r1, #16
 8000e34:	485a      	ldr	r0, [pc, #360]	; (8000fa0 <main+0x198>)
 8000e36:	f001 fcdf 	bl	80027f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2108      	movs	r1, #8
 8000e3e:	4858      	ldr	r0, [pc, #352]	; (8000fa0 <main+0x198>)
 8000e40:	f001 fcda 	bl	80027f8 <HAL_GPIO_WritePin>
  HAL_UART_Receive_DMA(&huart2, GPS_buffer, 2048);
 8000e44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e48:	4956      	ldr	r1, [pc, #344]	; (8000fa4 <main+0x19c>)
 8000e4a:	4857      	ldr	r0, [pc, #348]	; (8000fa8 <main+0x1a0>)
 8000e4c:	f004 f87b 	bl	8004f46 <HAL_UART_Receive_DMA>

  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e56:	4855      	ldr	r0, [pc, #340]	; (8000fac <main+0x1a4>)
 8000e58:	f001 fcce 	bl	80027f8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000e5c:	2064      	movs	r0, #100	; 0x64
 8000e5e:	f000 fdff 	bl	8001a60 <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e68:	4850      	ldr	r0, [pc, #320]	; (8000fac <main+0x1a4>)
 8000e6a:	f001 fcc5 	bl	80027f8 <HAL_GPIO_WritePin>
  lora_sx1276 lora;

  uint8_t res = lora_init(&lora, &hspi1, NSS_GPIO_Port, NSS_Pin, LORA_BASE_FREQUENCY_US);
 8000e6e:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8000e72:	a349      	add	r3, pc, #292	; (adr r3, 8000f98 <main+0x190>)
 8000e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e78:	e9cd 2300 	strd	r2, r3, [sp]
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	4a4c      	ldr	r2, [pc, #304]	; (8000fb0 <main+0x1a8>)
 8000e80:	494c      	ldr	r1, [pc, #304]	; (8000fb4 <main+0x1ac>)
 8000e82:	f7ff fedb 	bl	8000c3c <lora_init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
  if (res != LORA_OK) {
 8000e8c:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d006      	beq.n	8000ea2 <main+0x9a>
	  HAL_UART_Transmit(&huart1, iterfacing_failed, sizeof(iterfacing_failed), 1000);
 8000e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e98:	2213      	movs	r2, #19
 8000e9a:	4947      	ldr	r1, [pc, #284]	; (8000fb8 <main+0x1b0>)
 8000e9c:	4847      	ldr	r0, [pc, #284]	; (8000fbc <main+0x1b4>)
 8000e9e:	f003 ffc0 	bl	8004e22 <HAL_UART_Transmit>
  }
  // Receive buffer
  uint8_t buffer[255];
  // Put LoRa modem into continuous receive mode
  lora_mode_receive_continuous(&lora);
 8000ea2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fcc2 	bl	8000830 <lora_mode_receive_continuous>
  // Wait for packet up to 4 sec

  while (!GPS_ready);
 8000eac:	bf00      	nop
 8000eae:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <main+0x1b8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0fb      	beq.n	8000eae <main+0xa6>
  uint8_t GPS_data_len = (uint8_t) GPSidxint;
 8000eb6:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <main+0x1bc>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  uint8_t metaData[8+GPS_data_len];
 8000ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000ec2:	f103 0108 	add.w	r1, r3, #8
 8000ec6:	1e4b      	subs	r3, r1, #1
 8000ec8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000ecc:	460a      	mov	r2, r1
 8000ece:	2300      	movs	r3, #0
 8000ed0:	4690      	mov	r8, r2
 8000ed2:	4699      	mov	r9, r3
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ee0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ee4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ee8:	460a      	mov	r2, r1
 8000eea:	2300      	movs	r3, #0
 8000eec:	4614      	mov	r4, r2
 8000eee:	461d      	mov	r5, r3
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	f04f 0300 	mov.w	r3, #0
 8000ef8:	00eb      	lsls	r3, r5, #3
 8000efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000efe:	00e2      	lsls	r2, r4, #3
 8000f00:	460b      	mov	r3, r1
 8000f02:	3307      	adds	r3, #7
 8000f04:	08db      	lsrs	r3, r3, #3
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	ebad 0d03 	sub.w	sp, sp, r3
 8000f0c:	ab02      	add	r3, sp, #8
 8000f0e:	3300      	adds	r3, #0
 8000f10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000f14:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <main+0x1c0>)
 8000f16:	681a      	ldr	r2, [r3, #0]
  memcpy(metaData, &startGPSPadding, 4);
 8000f18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000f1c:	601a      	str	r2, [r3, #0]
  memcpy(metaData+4, GPS_latest_data, GPS_data_len);
 8000f1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000f22:	3304      	adds	r3, #4
 8000f24:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8000f28:	4928      	ldr	r1, [pc, #160]	; (8000fcc <main+0x1c4>)
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f005 f954 	bl	80061d8 <memcpy>
  memcpy(metaData+4+GPS_data_len, &endGPSPadding, 4);
 8000f30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000f34:	3304      	adds	r3, #4
 8000f36:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a24      	ldr	r2, [pc, #144]	; (8000fd0 <main+0x1c8>)
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, metaData, 8+GPS_data_len, 1000);
 8000f42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	3308      	adds	r3, #8
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f50:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8000f54:	4819      	ldr	r0, [pc, #100]	; (8000fbc <main+0x1b4>)
 8000f56:	f003 ff64 	bl	8004e22 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t len = lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 4000, &res);
 8000f5a:	4639      	mov	r1, r7
 8000f5c:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8000f60:	f107 03ff 	add.w	r3, r7, #255	; 0xff
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000f6a:	22ff      	movs	r2, #255	; 0xff
 8000f6c:	f7ff fe3e 	bl	8000bec <lora_receive_packet_blocking>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	  if (res == LORA_OK) {
 8000f76:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1ed      	bne.n	8000f5a <main+0x152>
		  HAL_UART_Transmit(&huart1, buffer, len, 1000);
 8000f7e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4639      	mov	r1, r7
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	480c      	ldr	r0, [pc, #48]	; (8000fbc <main+0x1b4>)
 8000f8c:	f003 ff49 	bl	8004e22 <HAL_UART_Transmit>
  {
 8000f90:	e7e3      	b.n	8000f5a <main+0x152>
 8000f92:	bf00      	nop
 8000f94:	f3af 8000 	nop.w
 8000f98:	3689cac0 	.word	0x3689cac0
 8000f9c:	00000000 	.word	0x00000000
 8000fa0:	40021400 	.word	0x40021400
 8000fa4:	20000290 	.word	0x20000290
 8000fa8:	2000018c 	.word	0x2000018c
 8000fac:	40020c00 	.word	0x40020c00
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	200000a8 	.word	0x200000a8
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000148 	.word	0x20000148
 8000fc0:	20001328 	.word	0x20001328
 8000fc4:	20001324 	.word	0x20001324
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	200012e0 	.word	0x200012e0
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b094      	sub	sp, #80	; 0x50
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	2234      	movs	r2, #52	; 0x34
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f005 f906 	bl	80061f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <SystemClock_Config+0xe0>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	4a2c      	ldr	r2, [pc, #176]	; (80010b4 <SystemClock_Config+0xe0>)
 8001002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001006:	6413      	str	r3, [r2, #64]	; 0x40
 8001008:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <SystemClock_Config+0xe0>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001014:	2300      	movs	r3, #0
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <SystemClock_Config+0xe4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <SystemClock_Config+0xe4>)
 800101e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <SystemClock_Config+0xe4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001030:	2302      	movs	r3, #2
 8001032:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001034:	2301      	movs	r3, #1
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001038:	2310      	movs	r3, #16
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103c:	2302      	movs	r3, #2
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001040:	2300      	movs	r3, #0
 8001042:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001044:	2310      	movs	r3, #16
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001048:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800104c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800104e:	2304      	movs	r3, #4
 8001050:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001052:	2302      	movs	r3, #2
 8001054:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001056:	2302      	movs	r3, #2
 8001058:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4618      	mov	r0, r3
 8001060:	f001 fef8 	bl	8002e54 <HAL_RCC_OscConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800106a:	f000 f9f5 	bl	8001458 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800106e:	f001 fbdd 	bl	800282c <HAL_PWREx_EnableOverDrive>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001078:	f000 f9ee 	bl	8001458 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8001080:	2303      	movs	r3, #3
 8001082:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001088:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800108c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800108e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001092:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	2105      	movs	r1, #5
 800109a:	4618      	mov	r0, r3
 800109c:	f001 fc16 	bl	80028cc <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80010a6:	f000 f9d7 	bl	8001458 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3750      	adds	r7, #80	; 0x50
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000

080010bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_SPI1_Init+0x64>)
 80010c2:	4a18      	ldr	r2, [pc, #96]	; (8001124 <MX_SPI1_Init+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_SPI1_Init+0x64>)
 80010c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_SPI1_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <MX_SPI1_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_SPI1_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_SPI1_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_SPI1_Init+0x64>)
 80010e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_SPI1_Init+0x64>)
 80010f0:	2238      	movs	r2, #56	; 0x38
 80010f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <MX_SPI1_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_SPI1_Init+0x64>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <MX_SPI1_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_SPI1_Init+0x64>)
 8001108:	220a      	movs	r2, #10
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_SPI1_Init+0x64>)
 800110e:	f002 f93f 	bl	8003390 <HAL_SPI_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001118:	f000 f99e 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200000a8 	.word	0x200000a8
 8001124:	40013000 	.word	0x40013000

08001128 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001138:	463b      	mov	r3, r7
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001144:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <MX_TIM2_Init+0xa0>)
 8001146:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_TIM2_Init+0xa0>)
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_TIM2_Init+0xa0>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_TIM2_Init+0xa0>)
 800115a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800115e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <MX_TIM2_Init+0xa0>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_TIM2_Init+0xa0>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800116c:	4816      	ldr	r0, [pc, #88]	; (80011c8 <MX_TIM2_Init+0xa0>)
 800116e:	f003 f98b 	bl	8004488 <HAL_TIM_IC_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001178:	f000 f96e 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	4619      	mov	r1, r3
 800118a:	480f      	ldr	r0, [pc, #60]	; (80011c8 <MX_TIM2_Init+0xa0>)
 800118c:	f003 fd6c 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001196:	f000 f95f 	bl	8001458 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800119e:	2301      	movs	r3, #1
 80011a0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	2208      	movs	r2, #8
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_TIM2_Init+0xa0>)
 80011b2:	f003 fac0 	bl	8004736 <HAL_TIM_IC_ConfigChannel>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80011bc:	f000 f94c 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000100 	.word	0x20000100

080011cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <MX_USART1_UART_Init+0x50>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 8001204:	f003 fdc0 	bl	8004d88 <HAL_UART_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800120e:	f000 f923 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000148 	.word	0x20000148
 800121c:	40011000 	.word	0x40011000

08001220 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <MX_USART2_UART_Init+0x50>)
 8001228:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_USART2_UART_Init+0x4c>)
 800122c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001230:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_USART2_UART_Init+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001258:	f003 fd96 	bl	8004d88 <HAL_UART_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001262:	f000 f8f9 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000018c 	.word	0x2000018c
 8001270:	40004400 	.word	0x40004400

08001274 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_DMA_Init+0x68>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a16      	ldr	r2, [pc, #88]	; (80012dc <MX_DMA_Init+0x68>)
 8001284:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_DMA_Init+0x68>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_DMA_Init+0x68>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <MX_DMA_Init+0x68>)
 80012a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <MX_DMA_Init+0x68>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	2010      	movs	r0, #16
 80012b8:	f000 fcd1 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012bc:	2010      	movs	r0, #16
 80012be:	f000 fcea 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2046      	movs	r0, #70	; 0x46
 80012c8:	f000 fcc9 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80012cc:	2046      	movs	r0, #70	; 0x46
 80012ce:	f000 fce2 	bl	8001c96 <HAL_NVIC_EnableIRQ>

}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800

080012e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	; 0x30
 80012e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	4b52      	ldr	r3, [pc, #328]	; (8001444 <MX_GPIO_Init+0x164>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a51      	ldr	r2, [pc, #324]	; (8001444 <MX_GPIO_Init+0x164>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b4f      	ldr	r3, [pc, #316]	; (8001444 <MX_GPIO_Init+0x164>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	4b4b      	ldr	r3, [pc, #300]	; (8001444 <MX_GPIO_Init+0x164>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a4a      	ldr	r2, [pc, #296]	; (8001444 <MX_GPIO_Init+0x164>)
 800131c:	f043 0320 	orr.w	r3, r3, #32
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b48      	ldr	r3, [pc, #288]	; (8001444 <MX_GPIO_Init+0x164>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0320 	and.w	r3, r3, #32
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b44      	ldr	r3, [pc, #272]	; (8001444 <MX_GPIO_Init+0x164>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a43      	ldr	r2, [pc, #268]	; (8001444 <MX_GPIO_Init+0x164>)
 8001338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b41      	ldr	r3, [pc, #260]	; (8001444 <MX_GPIO_Init+0x164>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <MX_GPIO_Init+0x164>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a3c      	ldr	r2, [pc, #240]	; (8001444 <MX_GPIO_Init+0x164>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <MX_GPIO_Init+0x164>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b36      	ldr	r3, [pc, #216]	; (8001444 <MX_GPIO_Init+0x164>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a35      	ldr	r2, [pc, #212]	; (8001444 <MX_GPIO_Init+0x164>)
 8001370:	f043 0308 	orr.w	r3, r3, #8
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b33      	ldr	r3, [pc, #204]	; (8001444 <MX_GPIO_Init+0x164>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <MX_GPIO_Init+0x164>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a2e      	ldr	r2, [pc, #184]	; (8001444 <MX_GPIO_Init+0x164>)
 800138c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <MX_GPIO_Init+0x164>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	2138      	movs	r1, #56	; 0x38
 80013a2:	4829      	ldr	r0, [pc, #164]	; (8001448 <MX_GPIO_Init+0x168>)
 80013a4:	f001 fa28 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2110      	movs	r1, #16
 80013ac:	4827      	ldr	r0, [pc, #156]	; (800144c <MX_GPIO_Init+0x16c>)
 80013ae:	f001 fa23 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b8:	4825      	ldr	r0, [pc, #148]	; (8001450 <MX_GPIO_Init+0x170>)
 80013ba:	f001 fa1d 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2120      	movs	r1, #32
 80013c2:	4824      	ldr	r0, [pc, #144]	; (8001454 <MX_GPIO_Init+0x174>)
 80013c4:	f001 fa18 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF3 PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80013c8:	2338      	movs	r3, #56	; 0x38
 80013ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	481a      	ldr	r0, [pc, #104]	; (8001448 <MX_GPIO_Init+0x168>)
 80013e0:	f001 f876 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80013e4:	2310      	movs	r3, #16
 80013e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	4619      	mov	r1, r3
 80013fa:	4814      	ldr	r0, [pc, #80]	; (800144c <MX_GPIO_Init+0x16c>)
 80013fc:	f001 f868 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001400:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	480d      	ldr	r0, [pc, #52]	; (8001450 <MX_GPIO_Init+0x170>)
 800141a:	f001 f859 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800141e:	2320      	movs	r3, #32
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <MX_GPIO_Init+0x174>)
 8001436:	f001 f84b 	bl	80024d0 <HAL_GPIO_Init>

}
 800143a:	bf00      	nop
 800143c:	3730      	adds	r7, #48	; 0x30
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40021400 	.word	0x40021400
 800144c:	40020000 	.word	0x40020000
 8001450:	40020c00 	.word	0x40020c00
 8001454:	40021800 	.word	0x40021800

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001460:	e7fe      	b.n	8001460 <Error_Handler+0x8>
	...

08001464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_MspInit+0x4c>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <HAL_MspInit+0x4c>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <HAL_MspInit+0x4c>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_MspInit+0x4c>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_MspInit+0x4c>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_MspInit+0x4c>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800

080014b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <HAL_SPI_MspInit+0x84>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d12b      	bne.n	800152e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_SPI_MspInit+0x88>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a17      	ldr	r2, [pc, #92]	; (800153c <HAL_SPI_MspInit+0x88>)
 80014e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_SPI_MspInit+0x88>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_SPI_MspInit+0x88>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a10      	ldr	r2, [pc, #64]	; (800153c <HAL_SPI_MspInit+0x88>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_SPI_MspInit+0x88>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800150e:	23e0      	movs	r3, #224	; 0xe0
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800151e:	2305      	movs	r3, #5
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <HAL_SPI_MspInit+0x8c>)
 800152a:	f000 ffd1 	bl	80024d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40013000 	.word	0x40013000
 800153c:	40023800 	.word	0x40023800
 8001540:	40020000 	.word	0x40020000

08001544 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001564:	d133      	bne.n	80015ce <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_TIM_IC_MspInit+0x94>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <HAL_TIM_IC_MspInit+0x94>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_TIM_IC_MspInit+0x94>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_TIM_IC_MspInit+0x94>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <HAL_TIM_IC_MspInit+0x94>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_TIM_IC_MspInit+0x94>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800159e:	2304      	movs	r3, #4
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015ae:	2301      	movs	r3, #1
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4808      	ldr	r0, [pc, #32]	; (80015dc <HAL_TIM_IC_MspInit+0x98>)
 80015ba:	f000 ff89 	bl	80024d0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	201c      	movs	r0, #28
 80015c4:	f000 fb4b 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015c8:	201c      	movs	r0, #28
 80015ca:	f000 fb64 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000

080015e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08c      	sub	sp, #48	; 0x30
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a74      	ldr	r2, [pc, #464]	; (80017d0 <HAL_UART_MspInit+0x1f0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d15b      	bne.n	80016ba <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	4b73      	ldr	r3, [pc, #460]	; (80017d4 <HAL_UART_MspInit+0x1f4>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a72      	ldr	r2, [pc, #456]	; (80017d4 <HAL_UART_MspInit+0x1f4>)
 800160c:	f043 0310 	orr.w	r3, r3, #16
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b70      	ldr	r3, [pc, #448]	; (80017d4 <HAL_UART_MspInit+0x1f4>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	4b6c      	ldr	r3, [pc, #432]	; (80017d4 <HAL_UART_MspInit+0x1f4>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a6b      	ldr	r2, [pc, #428]	; (80017d4 <HAL_UART_MspInit+0x1f4>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b69      	ldr	r3, [pc, #420]	; (80017d4 <HAL_UART_MspInit+0x1f4>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800163a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800164c:	2307      	movs	r3, #7
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4619      	mov	r1, r3
 8001656:	4860      	ldr	r0, [pc, #384]	; (80017d8 <HAL_UART_MspInit+0x1f8>)
 8001658:	f000 ff3a 	bl	80024d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800165c:	4b5f      	ldr	r3, [pc, #380]	; (80017dc <HAL_UART_MspInit+0x1fc>)
 800165e:	4a60      	ldr	r2, [pc, #384]	; (80017e0 <HAL_UART_MspInit+0x200>)
 8001660:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001662:	4b5e      	ldr	r3, [pc, #376]	; (80017dc <HAL_UART_MspInit+0x1fc>)
 8001664:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001668:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800166a:	4b5c      	ldr	r3, [pc, #368]	; (80017dc <HAL_UART_MspInit+0x1fc>)
 800166c:	2240      	movs	r2, #64	; 0x40
 800166e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001670:	4b5a      	ldr	r3, [pc, #360]	; (80017dc <HAL_UART_MspInit+0x1fc>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001676:	4b59      	ldr	r3, [pc, #356]	; (80017dc <HAL_UART_MspInit+0x1fc>)
 8001678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800167c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800167e:	4b57      	ldr	r3, [pc, #348]	; (80017dc <HAL_UART_MspInit+0x1fc>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001684:	4b55      	ldr	r3, [pc, #340]	; (80017dc <HAL_UART_MspInit+0x1fc>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800168a:	4b54      	ldr	r3, [pc, #336]	; (80017dc <HAL_UART_MspInit+0x1fc>)
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001690:	4b52      	ldr	r3, [pc, #328]	; (80017dc <HAL_UART_MspInit+0x1fc>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001696:	4b51      	ldr	r3, [pc, #324]	; (80017dc <HAL_UART_MspInit+0x1fc>)
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800169c:	484f      	ldr	r0, [pc, #316]	; (80017dc <HAL_UART_MspInit+0x1fc>)
 800169e:	f000 fb15 	bl	8001ccc <HAL_DMA_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80016a8:	f7ff fed6 	bl	8001458 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a4b      	ldr	r2, [pc, #300]	; (80017dc <HAL_UART_MspInit+0x1fc>)
 80016b0:	635a      	str	r2, [r3, #52]	; 0x34
 80016b2:	4a4a      	ldr	r2, [pc, #296]	; (80017dc <HAL_UART_MspInit+0x1fc>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016b8:	e086      	b.n	80017c8 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a49      	ldr	r2, [pc, #292]	; (80017e4 <HAL_UART_MspInit+0x204>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	f040 8081 	bne.w	80017c8 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b42      	ldr	r3, [pc, #264]	; (80017d4 <HAL_UART_MspInit+0x1f4>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a41      	ldr	r2, [pc, #260]	; (80017d4 <HAL_UART_MspInit+0x1f4>)
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b3f      	ldr	r3, [pc, #252]	; (80017d4 <HAL_UART_MspInit+0x1f4>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <HAL_UART_MspInit+0x1f4>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a3a      	ldr	r2, [pc, #232]	; (80017d4 <HAL_UART_MspInit+0x1f4>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <HAL_UART_MspInit+0x1f4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <HAL_UART_MspInit+0x1f4>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a33      	ldr	r2, [pc, #204]	; (80017d4 <HAL_UART_MspInit+0x1f4>)
 8001708:	f043 0308 	orr.w	r3, r3, #8
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <HAL_UART_MspInit+0x1f4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800171a:	2308      	movs	r3, #8
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800172a:	2307      	movs	r3, #7
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 031c 	add.w	r3, r7, #28
 8001732:	4619      	mov	r1, r3
 8001734:	4828      	ldr	r0, [pc, #160]	; (80017d8 <HAL_UART_MspInit+0x1f8>)
 8001736:	f000 fecb 	bl	80024d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800173a:	2320      	movs	r3, #32
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800174a:	2307      	movs	r3, #7
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	4824      	ldr	r0, [pc, #144]	; (80017e8 <HAL_UART_MspInit+0x208>)
 8001756:	f000 febb 	bl	80024d0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800175a:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_UART_MspInit+0x20c>)
 800175c:	4a24      	ldr	r2, [pc, #144]	; (80017f0 <HAL_UART_MspInit+0x210>)
 800175e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HAL_UART_MspInit+0x20c>)
 8001762:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001766:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001768:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_UART_MspInit+0x20c>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800176e:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <HAL_UART_MspInit+0x20c>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <HAL_UART_MspInit+0x20c>)
 8001776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800177a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_UART_MspInit+0x20c>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001782:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <HAL_UART_MspInit+0x20c>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_UART_MspInit+0x20c>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_UART_MspInit+0x20c>)
 8001790:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001794:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_UART_MspInit+0x20c>)
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800179c:	4813      	ldr	r0, [pc, #76]	; (80017ec <HAL_UART_MspInit+0x20c>)
 800179e:	f000 fa95 	bl	8001ccc <HAL_DMA_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 80017a8:	f7ff fe56 	bl	8001458 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <HAL_UART_MspInit+0x20c>)
 80017b0:	639a      	str	r2, [r3, #56]	; 0x38
 80017b2:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <HAL_UART_MspInit+0x20c>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2100      	movs	r1, #0
 80017bc:	2026      	movs	r0, #38	; 0x26
 80017be:	f000 fa4e 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017c2:	2026      	movs	r0, #38	; 0x26
 80017c4:	f000 fa67 	bl	8001c96 <HAL_NVIC_EnableIRQ>
}
 80017c8:	bf00      	nop
 80017ca:	3730      	adds	r7, #48	; 0x30
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40011000 	.word	0x40011000
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020000 	.word	0x40020000
 80017dc:	200001d0 	.word	0x200001d0
 80017e0:	400264b8 	.word	0x400264b8
 80017e4:	40004400 	.word	0x40004400
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	20000230 	.word	0x20000230
 80017f0:	40026088 	.word	0x40026088

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <NMI_Handler+0x4>

080017fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <MemManage_Handler+0x4>

08001806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <UsageFault_Handler+0x4>

08001812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001840:	f000 f8ee 	bl	8001a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}

08001848 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <DMA1_Stream5_IRQHandler+0x10>)
 800184e:	f000 fbd5 	bl	8001ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000230 	.word	0x20000230

0800185c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <TIM2_IRQHandler+0x10>)
 8001862:	f002 fe60 	bl	8004526 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000100 	.word	0x20000100

08001870 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <USART2_IRQHandler+0x10>)
 8001876:	f003 fb97 	bl	8004fa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	2000018c 	.word	0x2000018c

08001884 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <DMA2_Stream7_IRQHandler+0x10>)
 800188a:	f000 fbb7 	bl	8001ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200001d0 	.word	0x200001d0

08001898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <_sbrk+0x5c>)
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <_sbrk+0x60>)
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <_sbrk+0x64>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <_sbrk+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d207      	bcs.n	80018d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c8:	f004 fc5c 	bl	8006184 <__errno>
 80018cc:	4603      	mov	r3, r0
 80018ce:	220c      	movs	r2, #12
 80018d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018d6:	e009      	b.n	80018ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <_sbrk+0x64>)
 80018e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20020000 	.word	0x20020000
 80018f8:	00000400 	.word	0x00000400
 80018fc:	2000132c 	.word	0x2000132c
 8001900:	20001348 	.word	0x20001348

08001904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <SystemInit+0x20>)
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800190e:	4a05      	ldr	r2, [pc, #20]	; (8001924 <SystemInit+0x20>)
 8001910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001960 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800192e:	490e      	ldr	r1, [pc, #56]	; (8001968 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001944:	4c0b      	ldr	r4, [pc, #44]	; (8001974 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001952:	f7ff ffd7 	bl	8001904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001956:	f004 fc1b 	bl	8006190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195a:	f7ff fa55 	bl	8000e08 <main>
  bx  lr    
 800195e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800196c:	08006c34 	.word	0x08006c34
  ldr r2, =_sbss
 8001970:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001974:	20001344 	.word	0x20001344

08001978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC_IRQHandler>
	...

0800197c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_Init+0x40>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <HAL_Init+0x40>)
 8001986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <HAL_Init+0x40>)
 8001992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a07      	ldr	r2, [pc, #28]	; (80019bc <HAL_Init+0x40>)
 800199e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 f94f 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019aa:	200f      	movs	r0, #15
 80019ac:	f000 f808 	bl	80019c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b0:	f7ff fd58 	bl	8001464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023c00 	.word	0x40023c00

080019c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_InitTick+0x54>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_InitTick+0x58>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f967 	bl	8001cb2 <HAL_SYSTICK_Config>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00e      	b.n	8001a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d80a      	bhi.n	8001a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f4:	2200      	movs	r2, #0
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019fc:	f000 f92f 	bl	8001c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a00:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <HAL_InitTick+0x5c>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e000      	b.n	8001a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	2000001c 	.word	0x2000001c
 8001a18:	20000024 	.word	0x20000024
 8001a1c:	20000020 	.word	0x20000020

08001a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x20>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x24>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_IncTick+0x24>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000024 	.word	0x20000024
 8001a44:	20001330 	.word	0x20001330

08001a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_GetTick+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20001330 	.word	0x20001330

08001a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff ffee 	bl	8001a48 <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a78:	d005      	beq.n	8001a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_Delay+0x44>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a86:	bf00      	nop
 8001a88:	f7ff ffde 	bl	8001a48 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d8f7      	bhi.n	8001a88 <HAL_Delay+0x28>
  {
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000024 	.word	0x20000024

08001aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ada:	4a04      	ldr	r2, [pc, #16]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	60d3      	str	r3, [r2, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <__NVIC_GetPriorityGrouping+0x18>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	f003 0307 	and.w	r3, r3, #7
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	db0b      	blt.n	8001b36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f003 021f 	and.w	r2, r3, #31
 8001b24:	4907      	ldr	r1, [pc, #28]	; (8001b44 <__NVIC_EnableIRQ+0x38>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	; (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	; (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f1c3 0307 	rsb	r3, r3, #7
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	bf28      	it	cs
 8001bba:	2304      	movcs	r3, #4
 8001bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d902      	bls.n	8001bcc <NVIC_EncodePriority+0x30>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	e000      	b.n	8001bce <NVIC_EncodePriority+0x32>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	4313      	orrs	r3, r2
         );
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	; 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c14:	d301      	bcc.n	8001c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00f      	b.n	8001c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <SysTick_Config+0x40>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c22:	210f      	movs	r1, #15
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c28:	f7ff ff8e 	bl	8001b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <SysTick_Config+0x40>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <SysTick_Config+0x40>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	e000e010 	.word	0xe000e010

08001c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff29 	bl	8001aa8 <__NVIC_SetPriorityGrouping>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c70:	f7ff ff3e 	bl	8001af0 <__NVIC_GetPriorityGrouping>
 8001c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff ff8e 	bl	8001b9c <NVIC_EncodePriority>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff5d 	bl	8001b48 <__NVIC_SetPriority>
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff31 	bl	8001b0c <__NVIC_EnableIRQ>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffa2 	bl	8001c04 <SysTick_Config>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff feb6 	bl	8001a48 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e099      	b.n	8001e1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d08:	e00f      	b.n	8001d2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d0a:	f7ff fe9d 	bl	8001a48 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b05      	cmp	r3, #5
 8001d16:	d908      	bls.n	8001d2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2203      	movs	r2, #3
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e078      	b.n	8001e1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e8      	bne.n	8001d0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <HAL_DMA_Init+0x158>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d107      	bne.n	8001d94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f023 0307 	bic.w	r3, r3, #7
 8001daa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d117      	bne.n	8001dee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00e      	beq.n	8001dee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fb01 	bl	80023d8 <DMA_CheckFifoParam>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2240      	movs	r2, #64	; 0x40
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001dea:	2301      	movs	r3, #1
 8001dec:	e016      	b.n	8001e1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fab8 	bl	800236c <DMA_CalcBaseAndBitshift>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e04:	223f      	movs	r2, #63	; 0x3f
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	f010803f 	.word	0xf010803f

08001e28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_DMA_Start_IT+0x26>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e040      	b.n	8001ed0 <HAL_DMA_Start_IT+0xa8>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d12f      	bne.n	8001ec2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2202      	movs	r2, #2
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 fa4a 	bl	8002310 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	223f      	movs	r2, #63	; 0x3f
 8001e82:	409a      	lsls	r2, r3
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0216 	orr.w	r2, r2, #22
 8001e96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0208 	orr.w	r2, r2, #8
 8001eae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	e005      	b.n	8001ece <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ee6:	f7ff fdaf 	bl	8001a48 <HAL_GetTick>
 8001eea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d008      	beq.n	8001f0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e052      	b.n	8001fb0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0216 	bic.w	r2, r2, #22
 8001f18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	695a      	ldr	r2, [r3, #20]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d103      	bne.n	8001f3a <HAL_DMA_Abort+0x62>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d007      	beq.n	8001f4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0208 	bic.w	r2, r2, #8
 8001f48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0201 	bic.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f5a:	e013      	b.n	8001f84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f5c:	f7ff fd74 	bl	8001a48 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b05      	cmp	r3, #5
 8001f68:	d90c      	bls.n	8001f84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2203      	movs	r2, #3
 8001f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e015      	b.n	8001fb0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1e4      	bne.n	8001f5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f96:	223f      	movs	r2, #63	; 0x3f
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d004      	beq.n	8001fd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00c      	b.n	8001ff0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2205      	movs	r2, #5
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0201 	bic.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002008:	4b8e      	ldr	r3, [pc, #568]	; (8002244 <HAL_DMA_IRQHandler+0x248>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a8e      	ldr	r2, [pc, #568]	; (8002248 <HAL_DMA_IRQHandler+0x24c>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	0a9b      	lsrs	r3, r3, #10
 8002014:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002026:	2208      	movs	r2, #8
 8002028:	409a      	lsls	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01a      	beq.n	8002068 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d013      	beq.n	8002068 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0204 	bic.w	r2, r2, #4
 800204e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002054:	2208      	movs	r2, #8
 8002056:	409a      	lsls	r2, r3
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002060:	f043 0201 	orr.w	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	2201      	movs	r2, #1
 800206e:	409a      	lsls	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d012      	beq.n	800209e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	2201      	movs	r2, #1
 800208c:	409a      	lsls	r2, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002096:	f043 0202 	orr.w	r2, r3, #2
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a2:	2204      	movs	r2, #4
 80020a4:	409a      	lsls	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d012      	beq.n	80020d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00b      	beq.n	80020d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c0:	2204      	movs	r2, #4
 80020c2:	409a      	lsls	r2, r3
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020cc:	f043 0204 	orr.w	r2, r3, #4
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	2210      	movs	r2, #16
 80020da:	409a      	lsls	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d043      	beq.n	800216c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d03c      	beq.n	800216c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f6:	2210      	movs	r2, #16
 80020f8:	409a      	lsls	r2, r3
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d018      	beq.n	800213e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d108      	bne.n	800212c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d024      	beq.n	800216c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
 800212a:	e01f      	b.n	800216c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01b      	beq.n	800216c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
 800213c:	e016      	b.n	800216c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d107      	bne.n	800215c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0208 	bic.w	r2, r2, #8
 800215a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	2220      	movs	r2, #32
 8002172:	409a      	lsls	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 808f 	beq.w	800229c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 8087 	beq.w	800229c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	2220      	movs	r2, #32
 8002194:	409a      	lsls	r2, r3
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b05      	cmp	r3, #5
 80021a4:	d136      	bne.n	8002214 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0216 	bic.w	r2, r2, #22
 80021b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d103      	bne.n	80021d6 <HAL_DMA_IRQHandler+0x1da>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0208 	bic.w	r2, r2, #8
 80021e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	223f      	movs	r2, #63	; 0x3f
 80021ec:	409a      	lsls	r2, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002206:	2b00      	cmp	r3, #0
 8002208:	d07e      	beq.n	8002308 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4798      	blx	r3
        }
        return;
 8002212:	e079      	b.n	8002308 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d01d      	beq.n	800225e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10d      	bne.n	800224c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	2b00      	cmp	r3, #0
 8002236:	d031      	beq.n	800229c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	4798      	blx	r3
 8002240:	e02c      	b.n	800229c <HAL_DMA_IRQHandler+0x2a0>
 8002242:	bf00      	nop
 8002244:	2000001c 	.word	0x2000001c
 8002248:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d023      	beq.n	800229c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
 800225c:	e01e      	b.n	800229c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10f      	bne.n	800228c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0210 	bic.w	r2, r2, #16
 800227a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d032      	beq.n	800230a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d022      	beq.n	80022f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2205      	movs	r2, #5
 80022b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0201 	bic.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	3301      	adds	r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d307      	bcc.n	80022e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f2      	bne.n	80022c8 <HAL_DMA_IRQHandler+0x2cc>
 80022e2:	e000      	b.n	80022e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	4798      	blx	r3
 8002306:	e000      	b.n	800230a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002308:	bf00      	nop
    }
  }
}
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800232c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b40      	cmp	r3, #64	; 0x40
 800233c:	d108      	bne.n	8002350 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800234e:	e007      	b.n	8002360 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	60da      	str	r2, [r3, #12]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	3b10      	subs	r3, #16
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <DMA_CalcBaseAndBitshift+0x64>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002386:	4a13      	ldr	r2, [pc, #76]	; (80023d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4413      	add	r3, r2
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b03      	cmp	r3, #3
 8002398:	d909      	bls.n	80023ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023a2:	f023 0303 	bic.w	r3, r3, #3
 80023a6:	1d1a      	adds	r2, r3, #4
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	659a      	str	r2, [r3, #88]	; 0x58
 80023ac:	e007      	b.n	80023be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023b6:	f023 0303 	bic.w	r3, r3, #3
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	aaaaaaab 	.word	0xaaaaaaab
 80023d4:	08006be8 	.word	0x08006be8

080023d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d11f      	bne.n	8002432 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d856      	bhi.n	80024a6 <DMA_CheckFifoParam+0xce>
 80023f8:	a201      	add	r2, pc, #4	; (adr r2, 8002400 <DMA_CheckFifoParam+0x28>)
 80023fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fe:	bf00      	nop
 8002400:	08002411 	.word	0x08002411
 8002404:	08002423 	.word	0x08002423
 8002408:	08002411 	.word	0x08002411
 800240c:	080024a7 	.word	0x080024a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d046      	beq.n	80024aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002420:	e043      	b.n	80024aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800242a:	d140      	bne.n	80024ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002430:	e03d      	b.n	80024ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243a:	d121      	bne.n	8002480 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b03      	cmp	r3, #3
 8002440:	d837      	bhi.n	80024b2 <DMA_CheckFifoParam+0xda>
 8002442:	a201      	add	r2, pc, #4	; (adr r2, 8002448 <DMA_CheckFifoParam+0x70>)
 8002444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002448:	08002459 	.word	0x08002459
 800244c:	0800245f 	.word	0x0800245f
 8002450:	08002459 	.word	0x08002459
 8002454:	08002471 	.word	0x08002471
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
      break;
 800245c:	e030      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d025      	beq.n	80024b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800246e:	e022      	b.n	80024b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002478:	d11f      	bne.n	80024ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800247e:	e01c      	b.n	80024ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d903      	bls.n	800248e <DMA_CheckFifoParam+0xb6>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d003      	beq.n	8002494 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800248c:	e018      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
      break;
 8002492:	e015      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00e      	beq.n	80024be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      break;
 80024a4:	e00b      	b.n	80024be <DMA_CheckFifoParam+0xe6>
      break;
 80024a6:	bf00      	nop
 80024a8:	e00a      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
      break;
 80024aa:	bf00      	nop
 80024ac:	e008      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
      break;
 80024ae:	bf00      	nop
 80024b0:	e006      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
      break;
 80024b2:	bf00      	nop
 80024b4:	e004      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
      break;
 80024b6:	bf00      	nop
 80024b8:	e002      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80024ba:	bf00      	nop
 80024bc:	e000      	b.n	80024c0 <DMA_CheckFifoParam+0xe8>
      break;
 80024be:	bf00      	nop
    }
  } 
  
  return status; 
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop

080024d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	e165      	b.n	80027b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024ec:	2201      	movs	r2, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	429a      	cmp	r2, r3
 8002506:	f040 8154 	bne.w	80027b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d005      	beq.n	8002522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800251e:	2b02      	cmp	r3, #2
 8002520:	d130      	bne.n	8002584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002558:	2201      	movs	r2, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 0201 	and.w	r2, r3, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b03      	cmp	r3, #3
 800258e:	d017      	beq.n	80025c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d123      	bne.n	8002614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	08da      	lsrs	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3208      	adds	r2, #8
 80025d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	220f      	movs	r2, #15
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	08da      	lsrs	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3208      	adds	r2, #8
 800260e:	69b9      	ldr	r1, [r7, #24]
 8002610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0203 	and.w	r2, r3, #3
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80ae 	beq.w	80027b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b5d      	ldr	r3, [pc, #372]	; (80027d0 <HAL_GPIO_Init+0x300>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a5c      	ldr	r2, [pc, #368]	; (80027d0 <HAL_GPIO_Init+0x300>)
 8002660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b5a      	ldr	r3, [pc, #360]	; (80027d0 <HAL_GPIO_Init+0x300>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002672:	4a58      	ldr	r2, [pc, #352]	; (80027d4 <HAL_GPIO_Init+0x304>)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	3302      	adds	r3, #2
 800267a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	220f      	movs	r2, #15
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4f      	ldr	r2, [pc, #316]	; (80027d8 <HAL_GPIO_Init+0x308>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d025      	beq.n	80026ea <HAL_GPIO_Init+0x21a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4e      	ldr	r2, [pc, #312]	; (80027dc <HAL_GPIO_Init+0x30c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d01f      	beq.n	80026e6 <HAL_GPIO_Init+0x216>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4d      	ldr	r2, [pc, #308]	; (80027e0 <HAL_GPIO_Init+0x310>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d019      	beq.n	80026e2 <HAL_GPIO_Init+0x212>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4c      	ldr	r2, [pc, #304]	; (80027e4 <HAL_GPIO_Init+0x314>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d013      	beq.n	80026de <HAL_GPIO_Init+0x20e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4b      	ldr	r2, [pc, #300]	; (80027e8 <HAL_GPIO_Init+0x318>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00d      	beq.n	80026da <HAL_GPIO_Init+0x20a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4a      	ldr	r2, [pc, #296]	; (80027ec <HAL_GPIO_Init+0x31c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d007      	beq.n	80026d6 <HAL_GPIO_Init+0x206>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a49      	ldr	r2, [pc, #292]	; (80027f0 <HAL_GPIO_Init+0x320>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d101      	bne.n	80026d2 <HAL_GPIO_Init+0x202>
 80026ce:	2306      	movs	r3, #6
 80026d0:	e00c      	b.n	80026ec <HAL_GPIO_Init+0x21c>
 80026d2:	2307      	movs	r3, #7
 80026d4:	e00a      	b.n	80026ec <HAL_GPIO_Init+0x21c>
 80026d6:	2305      	movs	r3, #5
 80026d8:	e008      	b.n	80026ec <HAL_GPIO_Init+0x21c>
 80026da:	2304      	movs	r3, #4
 80026dc:	e006      	b.n	80026ec <HAL_GPIO_Init+0x21c>
 80026de:	2303      	movs	r3, #3
 80026e0:	e004      	b.n	80026ec <HAL_GPIO_Init+0x21c>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e002      	b.n	80026ec <HAL_GPIO_Init+0x21c>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_GPIO_Init+0x21c>
 80026ea:	2300      	movs	r3, #0
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	f002 0203 	and.w	r2, r2, #3
 80026f2:	0092      	lsls	r2, r2, #2
 80026f4:	4093      	lsls	r3, r2
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026fc:	4935      	ldr	r1, [pc, #212]	; (80027d4 <HAL_GPIO_Init+0x304>)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	089b      	lsrs	r3, r3, #2
 8002702:	3302      	adds	r3, #2
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800270a:	4b3a      	ldr	r3, [pc, #232]	; (80027f4 <HAL_GPIO_Init+0x324>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800272e:	4a31      	ldr	r2, [pc, #196]	; (80027f4 <HAL_GPIO_Init+0x324>)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002734:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <HAL_GPIO_Init+0x324>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002758:	4a26      	ldr	r2, [pc, #152]	; (80027f4 <HAL_GPIO_Init+0x324>)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800275e:	4b25      	ldr	r3, [pc, #148]	; (80027f4 <HAL_GPIO_Init+0x324>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002782:	4a1c      	ldr	r2, [pc, #112]	; (80027f4 <HAL_GPIO_Init+0x324>)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002788:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <HAL_GPIO_Init+0x324>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027ac:	4a11      	ldr	r2, [pc, #68]	; (80027f4 <HAL_GPIO_Init+0x324>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3301      	adds	r3, #1
 80027b6:	61fb      	str	r3, [r7, #28]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	2b0f      	cmp	r3, #15
 80027bc:	f67f ae96 	bls.w	80024ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3724      	adds	r7, #36	; 0x24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40013800 	.word	0x40013800
 80027d8:	40020000 	.word	0x40020000
 80027dc:	40020400 	.word	0x40020400
 80027e0:	40020800 	.word	0x40020800
 80027e4:	40020c00 	.word	0x40020c00
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40021400 	.word	0x40021400
 80027f0:	40021800 	.word	0x40021800
 80027f4:	40013c00 	.word	0x40013c00

080027f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
 8002804:	4613      	mov	r3, r2
 8002806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002808:	787b      	ldrb	r3, [r7, #1]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002814:	e003      	b.n	800281e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	041a      	lsls	r2, r3, #16
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	619a      	str	r2, [r3, #24]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_PWREx_EnableOverDrive+0x90>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a1f      	ldr	r2, [pc, #124]	; (80028bc <HAL_PWREx_EnableOverDrive+0x90>)
 8002840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <HAL_PWREx_EnableOverDrive+0x90>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002858:	f7ff f8f6 	bl	8001a48 <HAL_GetTick>
 800285c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800285e:	e009      	b.n	8002874 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002860:	f7ff f8f2 	bl	8001a48 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800286e:	d901      	bls.n	8002874 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e01f      	b.n	80028b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002880:	d1ee      	bne.n	8002860 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002884:	2201      	movs	r2, #1
 8002886:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002888:	f7ff f8de 	bl	8001a48 <HAL_GetTick>
 800288c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800288e:	e009      	b.n	80028a4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002890:	f7ff f8da 	bl	8001a48 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800289e:	d901      	bls.n	80028a4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e007      	b.n	80028b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_PWREx_EnableOverDrive+0x98>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028b0:	d1ee      	bne.n	8002890 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40023800 	.word	0x40023800
 80028c0:	420e0040 	.word	0x420e0040
 80028c4:	40007000 	.word	0x40007000
 80028c8:	420e0044 	.word	0x420e0044

080028cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0cc      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e0:	4b68      	ldr	r3, [pc, #416]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d90c      	bls.n	8002908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b65      	ldr	r3, [pc, #404]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0b8      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d020      	beq.n	8002956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002920:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4a58      	ldr	r2, [pc, #352]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800292a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002938:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4a52      	ldr	r2, [pc, #328]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002944:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	494d      	ldr	r1, [pc, #308]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d044      	beq.n	80029ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d119      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e07f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d003      	beq.n	800298a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002986:	2b03      	cmp	r3, #3
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298a:	4b3f      	ldr	r3, [pc, #252]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e06f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299a:	4b3b      	ldr	r3, [pc, #236]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e067      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029aa:	4b37      	ldr	r3, [pc, #220]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f023 0203 	bic.w	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4934      	ldr	r1, [pc, #208]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029bc:	f7ff f844 	bl	8001a48 <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	e00a      	b.n	80029da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c4:	f7ff f840 	bl	8001a48 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e04f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 020c 	and.w	r2, r3, #12
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d1eb      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ec:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d20c      	bcs.n	8002a14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_RCC_ClockConfig+0x1b8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e032      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4916      	ldr	r1, [pc, #88]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	490e      	ldr	r1, [pc, #56]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a52:	f000 f855 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 8002a56:	4602      	mov	r2, r0
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	490a      	ldr	r1, [pc, #40]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 8002a64:	5ccb      	ldrb	r3, [r1, r3]
 8002a66:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6a:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe ffa4 	bl	80019c0 <HAL_InitTick>

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023c00 	.word	0x40023c00
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	08006bd0 	.word	0x08006bd0
 8002a90:	2000001c 	.word	0x2000001c
 8002a94:	20000020 	.word	0x20000020

08002a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_RCC_GetHCLKFreq+0x14>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	2000001c 	.word	0x2000001c

08002ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ab4:	f7ff fff0 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	0a9b      	lsrs	r3, r3, #10
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	4903      	ldr	r1, [pc, #12]	; (8002ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac6:	5ccb      	ldrb	r3, [r1, r3]
 8002ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	08006be0 	.word	0x08006be0

08002ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002adc:	f7ff ffdc 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	0b5b      	lsrs	r3, r3, #13
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	4903      	ldr	r1, [pc, #12]	; (8002afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aee:	5ccb      	ldrb	r3, [r1, r3]
 8002af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40023800 	.word	0x40023800
 8002afc:	08006be0 	.word	0x08006be0

08002b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b04:	b0a6      	sub	sp, #152	; 0x98
 8002b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b26:	4bc8      	ldr	r3, [pc, #800]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b0c      	cmp	r3, #12
 8002b30:	f200 817e 	bhi.w	8002e30 <HAL_RCC_GetSysClockFreq+0x330>
 8002b34:	a201      	add	r2, pc, #4	; (adr r2, 8002b3c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3a:	bf00      	nop
 8002b3c:	08002b71 	.word	0x08002b71
 8002b40:	08002e31 	.word	0x08002e31
 8002b44:	08002e31 	.word	0x08002e31
 8002b48:	08002e31 	.word	0x08002e31
 8002b4c:	08002b79 	.word	0x08002b79
 8002b50:	08002e31 	.word	0x08002e31
 8002b54:	08002e31 	.word	0x08002e31
 8002b58:	08002e31 	.word	0x08002e31
 8002b5c:	08002b81 	.word	0x08002b81
 8002b60:	08002e31 	.word	0x08002e31
 8002b64:	08002e31 	.word	0x08002e31
 8002b68:	08002e31 	.word	0x08002e31
 8002b6c:	08002ceb 	.word	0x08002ceb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b70:	4bb6      	ldr	r3, [pc, #728]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002b72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002b76:	e15f      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b78:	4bb5      	ldr	r3, [pc, #724]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002b7e:	e15b      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b80:	4bb1      	ldr	r3, [pc, #708]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b8c:	4bae      	ldr	r3, [pc, #696]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d031      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b98:	4bab      	ldr	r3, [pc, #684]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	099b      	lsrs	r3, r3, #6
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ba2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002baa:	663b      	str	r3, [r7, #96]	; 0x60
 8002bac:	2300      	movs	r3, #0
 8002bae:	667b      	str	r3, [r7, #100]	; 0x64
 8002bb0:	4ba7      	ldr	r3, [pc, #668]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x350>)
 8002bb2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002bb6:	462a      	mov	r2, r5
 8002bb8:	fb03 f202 	mul.w	r2, r3, r2
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	4aa2      	ldr	r2, [pc, #648]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x350>)
 8002bc8:	4621      	mov	r1, r4
 8002bca:	fba1 1202 	umull	r1, r2, r1, r2
 8002bce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	67ba      	str	r2, [r7, #120]	; 0x78
 8002bd4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002bd6:	4413      	add	r3, r2
 8002bd8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bde:	2200      	movs	r2, #0
 8002be0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002be2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002be4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002be8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002bec:	f7fd fb68 	bl	80002c0 <__aeabi_uldivmod>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002bfa:	e064      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfc:	4b92      	ldr	r3, [pc, #584]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	099b      	lsrs	r3, r3, #6
 8002c02:	2200      	movs	r2, #0
 8002c04:	653b      	str	r3, [r7, #80]	; 0x50
 8002c06:	657a      	str	r2, [r7, #84]	; 0x54
 8002c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c10:	2300      	movs	r3, #0
 8002c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c14:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002c18:	4622      	mov	r2, r4
 8002c1a:	462b      	mov	r3, r5
 8002c1c:	f04f 0000 	mov.w	r0, #0
 8002c20:	f04f 0100 	mov.w	r1, #0
 8002c24:	0159      	lsls	r1, r3, #5
 8002c26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c2a:	0150      	lsls	r0, r2, #5
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4621      	mov	r1, r4
 8002c32:	1a51      	subs	r1, r2, r1
 8002c34:	6139      	str	r1, [r7, #16]
 8002c36:	4629      	mov	r1, r5
 8002c38:	eb63 0301 	sbc.w	r3, r3, r1
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c4a:	4659      	mov	r1, fp
 8002c4c:	018b      	lsls	r3, r1, #6
 8002c4e:	4651      	mov	r1, sl
 8002c50:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c54:	4651      	mov	r1, sl
 8002c56:	018a      	lsls	r2, r1, #6
 8002c58:	4651      	mov	r1, sl
 8002c5a:	ebb2 0801 	subs.w	r8, r2, r1
 8002c5e:	4659      	mov	r1, fp
 8002c60:	eb63 0901 	sbc.w	r9, r3, r1
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c78:	4690      	mov	r8, r2
 8002c7a:	4699      	mov	r9, r3
 8002c7c:	4623      	mov	r3, r4
 8002c7e:	eb18 0303 	adds.w	r3, r8, r3
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	462b      	mov	r3, r5
 8002c86:	eb49 0303 	adc.w	r3, r9, r3
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c98:	4629      	mov	r1, r5
 8002c9a:	028b      	lsls	r3, r1, #10
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	028a      	lsls	r2, r1, #10
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cae:	2200      	movs	r2, #0
 8002cb0:	643b      	str	r3, [r7, #64]	; 0x40
 8002cb2:	647a      	str	r2, [r7, #68]	; 0x44
 8002cb4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cb8:	f7fd fb02 	bl	80002c0 <__aeabi_uldivmod>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cc6:	4b60      	ldr	r3, [pc, #384]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	0c1b      	lsrs	r3, r3, #16
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002cd8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002ce8:	e0a6      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cea:	4b57      	ldr	r3, [pc, #348]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cf6:	4b54      	ldr	r3, [pc, #336]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d02a      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d02:	4b51      	ldr	r3, [pc, #324]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	099b      	lsrs	r3, r3, #6
 8002d08:	2200      	movs	r2, #0
 8002d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d14:	2100      	movs	r1, #0
 8002d16:	4b4e      	ldr	r3, [pc, #312]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d18:	fb03 f201 	mul.w	r2, r3, r1
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	fb00 f303 	mul.w	r3, r0, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	4a4a      	ldr	r2, [pc, #296]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d26:	fba0 1202 	umull	r1, r2, r0, r2
 8002d2a:	677a      	str	r2, [r7, #116]	; 0x74
 8002d2c:	460a      	mov	r2, r1
 8002d2e:	673a      	str	r2, [r7, #112]	; 0x70
 8002d30:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d32:	4413      	add	r3, r2
 8002d34:	677b      	str	r3, [r7, #116]	; 0x74
 8002d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d3e:	637a      	str	r2, [r7, #52]	; 0x34
 8002d40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d44:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002d48:	f7fd faba 	bl	80002c0 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4613      	mov	r3, r2
 8002d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d56:	e05b      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d58:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	099b      	lsrs	r3, r3, #6
 8002d5e:	2200      	movs	r2, #0
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d6a:	623b      	str	r3, [r7, #32]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d74:	4642      	mov	r2, r8
 8002d76:	464b      	mov	r3, r9
 8002d78:	f04f 0000 	mov.w	r0, #0
 8002d7c:	f04f 0100 	mov.w	r1, #0
 8002d80:	0159      	lsls	r1, r3, #5
 8002d82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d86:	0150      	lsls	r0, r2, #5
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4641      	mov	r1, r8
 8002d8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d92:	4649      	mov	r1, r9
 8002d94:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002da4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002da8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dac:	ebb2 040a 	subs.w	r4, r2, sl
 8002db0:	eb63 050b 	sbc.w	r5, r3, fp
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	00eb      	lsls	r3, r5, #3
 8002dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dc2:	00e2      	lsls	r2, r4, #3
 8002dc4:	4614      	mov	r4, r2
 8002dc6:	461d      	mov	r5, r3
 8002dc8:	4643      	mov	r3, r8
 8002dca:	18e3      	adds	r3, r4, r3
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	464b      	mov	r3, r9
 8002dd0:	eb45 0303 	adc.w	r3, r5, r3
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002de2:	4629      	mov	r1, r5
 8002de4:	028b      	lsls	r3, r1, #10
 8002de6:	4621      	mov	r1, r4
 8002de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dec:	4621      	mov	r1, r4
 8002dee:	028a      	lsls	r2, r1, #10
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002df8:	2200      	movs	r2, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	61fa      	str	r2, [r7, #28]
 8002dfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e02:	f7fd fa5d 	bl	80002c0 <__aeabi_uldivmod>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e10:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	0f1b      	lsrs	r3, r3, #28
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002e1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002e2e:	e003      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002e32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002e36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3798      	adds	r7, #152	; 0x98
 8002e40:	46bd      	mov	sp, r7
 8002e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	00f42400 	.word	0x00f42400
 8002e50:	017d7840 	.word	0x017d7840

08002e54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e28d      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8083 	beq.w	8002f7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e74:	4b94      	ldr	r3, [pc, #592]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d019      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e80:	4b91      	ldr	r3, [pc, #580]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e8c:	4b8e      	ldr	r3, [pc, #568]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e98:	d00c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e9a:	4b8b      	ldr	r3, [pc, #556]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	d112      	bne.n	8002ecc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea6:	4b88      	ldr	r3, [pc, #544]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb2:	d10b      	bne.n	8002ecc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	4b84      	ldr	r3, [pc, #528]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d05b      	beq.n	8002f78 <HAL_RCC_OscConfig+0x124>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d157      	bne.n	8002f78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e25a      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed4:	d106      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x90>
 8002ed6:	4b7c      	ldr	r3, [pc, #496]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a7b      	ldr	r2, [pc, #492]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e01d      	b.n	8002f20 <HAL_RCC_OscConfig+0xcc>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0xb4>
 8002eee:	4b76      	ldr	r3, [pc, #472]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a75      	ldr	r2, [pc, #468]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b73      	ldr	r3, [pc, #460]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a72      	ldr	r2, [pc, #456]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e00b      	b.n	8002f20 <HAL_RCC_OscConfig+0xcc>
 8002f08:	4b6f      	ldr	r3, [pc, #444]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a6e      	ldr	r2, [pc, #440]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b6c      	ldr	r3, [pc, #432]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a6b      	ldr	r2, [pc, #428]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe fd8e 	bl	8001a48 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f30:	f7fe fd8a 	bl	8001a48 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	; 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e21f      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	4b61      	ldr	r3, [pc, #388]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0xdc>
 8002f4e:	e014      	b.n	8002f7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe fd7a 	bl	8001a48 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe fd76 	bl	8001a48 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e20b      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	4b57      	ldr	r3, [pc, #348]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x104>
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d06f      	beq.n	8003066 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f86:	4b50      	ldr	r3, [pc, #320]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d017      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f92:	4b4d      	ldr	r3, [pc, #308]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d105      	bne.n	8002faa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f9e:	4b4a      	ldr	r3, [pc, #296]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00b      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002faa:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fb2:	2b0c      	cmp	r3, #12
 8002fb4:	d11c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fb6:	4b44      	ldr	r3, [pc, #272]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d116      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc2:	4b41      	ldr	r3, [pc, #260]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d005      	beq.n	8002fda <HAL_RCC_OscConfig+0x186>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d001      	beq.n	8002fda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e1d3      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fda:	4b3b      	ldr	r3, [pc, #236]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4937      	ldr	r1, [pc, #220]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fee:	e03a      	b.n	8003066 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d020      	beq.n	800303a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff8:	4b34      	ldr	r3, [pc, #208]	; (80030cc <HAL_RCC_OscConfig+0x278>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f7fe fd23 	bl	8001a48 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003006:	f7fe fd1f 	bl	8001a48 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e1b4      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003018:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003024:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4925      	ldr	r1, [pc, #148]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 8003034:	4313      	orrs	r3, r2
 8003036:	600b      	str	r3, [r1, #0]
 8003038:	e015      	b.n	8003066 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303a:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_RCC_OscConfig+0x278>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe fd02 	bl	8001a48 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003048:	f7fe fcfe 	bl	8001a48 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e193      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305a:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d036      	beq.n	80030e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d016      	beq.n	80030a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <HAL_RCC_OscConfig+0x27c>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7fe fce2 	bl	8001a48 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003088:	f7fe fcde 	bl	8001a48 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e173      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 800309c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x234>
 80030a6:	e01b      	b.n	80030e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a8:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <HAL_RCC_OscConfig+0x27c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ae:	f7fe fccb 	bl	8001a48 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b4:	e00e      	b.n	80030d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b6:	f7fe fcc7 	bl	8001a48 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d907      	bls.n	80030d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e15c      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
 80030c8:	40023800 	.word	0x40023800
 80030cc:	42470000 	.word	0x42470000
 80030d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d4:	4b8a      	ldr	r3, [pc, #552]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 80030d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ea      	bne.n	80030b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 8097 	beq.w	800321c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f2:	4b83      	ldr	r3, [pc, #524]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10f      	bne.n	800311e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	4b7f      	ldr	r3, [pc, #508]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	4a7e      	ldr	r2, [pc, #504]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310c:	6413      	str	r3, [r2, #64]	; 0x40
 800310e:	4b7c      	ldr	r3, [pc, #496]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311a:	2301      	movs	r3, #1
 800311c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	4b79      	ldr	r3, [pc, #484]	; (8003304 <HAL_RCC_OscConfig+0x4b0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d118      	bne.n	800315c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800312a:	4b76      	ldr	r3, [pc, #472]	; (8003304 <HAL_RCC_OscConfig+0x4b0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a75      	ldr	r2, [pc, #468]	; (8003304 <HAL_RCC_OscConfig+0x4b0>)
 8003130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003136:	f7fe fc87 	bl	8001a48 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313e:	f7fe fc83 	bl	8001a48 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e118      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	4b6c      	ldr	r3, [pc, #432]	; (8003304 <HAL_RCC_OscConfig+0x4b0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d106      	bne.n	8003172 <HAL_RCC_OscConfig+0x31e>
 8003164:	4b66      	ldr	r3, [pc, #408]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4a65      	ldr	r2, [pc, #404]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
 8003170:	e01c      	b.n	80031ac <HAL_RCC_OscConfig+0x358>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b05      	cmp	r3, #5
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x340>
 800317a:	4b61      	ldr	r3, [pc, #388]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317e:	4a60      	ldr	r2, [pc, #384]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003180:	f043 0304 	orr.w	r3, r3, #4
 8003184:	6713      	str	r3, [r2, #112]	; 0x70
 8003186:	4b5e      	ldr	r3, [pc, #376]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	4a5d      	ldr	r2, [pc, #372]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	6713      	str	r3, [r2, #112]	; 0x70
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0x358>
 8003194:	4b5a      	ldr	r3, [pc, #360]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	4a59      	ldr	r2, [pc, #356]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 800319a:	f023 0301 	bic.w	r3, r3, #1
 800319e:	6713      	str	r3, [r2, #112]	; 0x70
 80031a0:	4b57      	ldr	r3, [pc, #348]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	4a56      	ldr	r2, [pc, #344]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 80031a6:	f023 0304 	bic.w	r3, r3, #4
 80031aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d015      	beq.n	80031e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe fc48 	bl	8001a48 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031bc:	f7fe fc44 	bl	8001a48 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e0d7      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d2:	4b4b      	ldr	r3, [pc, #300]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0ee      	beq.n	80031bc <HAL_RCC_OscConfig+0x368>
 80031de:	e014      	b.n	800320a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fe fc32 	bl	8001a48 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e8:	f7fe fc2e 	bl	8001a48 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0c1      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fe:	4b40      	ldr	r3, [pc, #256]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1ee      	bne.n	80031e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800320a:	7dfb      	ldrb	r3, [r7, #23]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d105      	bne.n	800321c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003210:	4b3b      	ldr	r3, [pc, #236]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	4a3a      	ldr	r2, [pc, #232]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800321a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80ad 	beq.w	8003380 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003226:	4b36      	ldr	r3, [pc, #216]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b08      	cmp	r3, #8
 8003230:	d060      	beq.n	80032f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d145      	bne.n	80032c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323a:	4b33      	ldr	r3, [pc, #204]	; (8003308 <HAL_RCC_OscConfig+0x4b4>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe fc02 	bl	8001a48 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003248:	f7fe fbfe 	bl	8001a48 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e093      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325a:	4b29      	ldr	r3, [pc, #164]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	019b      	lsls	r3, r3, #6
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	3b01      	subs	r3, #1
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	061b      	lsls	r3, r3, #24
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	071b      	lsls	r3, r3, #28
 8003292:	491b      	ldr	r1, [pc, #108]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 8003294:	4313      	orrs	r3, r2
 8003296:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003298:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <HAL_RCC_OscConfig+0x4b4>)
 800329a:	2201      	movs	r2, #1
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329e:	f7fe fbd3 	bl	8001a48 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a6:	f7fe fbcf 	bl	8001a48 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e064      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b8:	4b11      	ldr	r3, [pc, #68]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x452>
 80032c4:	e05c      	b.n	8003380 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c6:	4b10      	ldr	r3, [pc, #64]	; (8003308 <HAL_RCC_OscConfig+0x4b4>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe fbbc 	bl	8001a48 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d4:	f7fe fbb8 	bl	8001a48 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e04d      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RCC_OscConfig+0x4ac>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x480>
 80032f2:	e045      	b.n	8003380 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d107      	bne.n	800330c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e040      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
 8003300:	40023800 	.word	0x40023800
 8003304:	40007000 	.word	0x40007000
 8003308:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800330c:	4b1f      	ldr	r3, [pc, #124]	; (800338c <HAL_RCC_OscConfig+0x538>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d030      	beq.n	800337c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003324:	429a      	cmp	r2, r3
 8003326:	d129      	bne.n	800337c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003332:	429a      	cmp	r2, r3
 8003334:	d122      	bne.n	800337c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800333c:	4013      	ands	r3, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003342:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003344:	4293      	cmp	r3, r2
 8003346:	d119      	bne.n	800337c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	3b01      	subs	r3, #1
 8003356:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003358:	429a      	cmp	r2, r3
 800335a:	d10f      	bne.n	800337c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d107      	bne.n	800337c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800

08003390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e07b      	b.n	800349a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d108      	bne.n	80033bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033b2:	d009      	beq.n	80033c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	61da      	str	r2, [r3, #28]
 80033ba:	e005      	b.n	80033c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fe f866 	bl	80014b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344c:	ea42 0103 	orr.w	r1, r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	f003 0104 	and.w	r1, r3, #4
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	f003 0210 	and.w	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69da      	ldr	r2, [r3, #28]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003488:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b088      	sub	sp, #32
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	4613      	mov	r3, r2
 80034b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_SPI_Transmit+0x22>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e126      	b.n	8003712 <HAL_SPI_Transmit+0x270>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034cc:	f7fe fabc 	bl	8001a48 <HAL_GetTick>
 80034d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d002      	beq.n	80034e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034e2:	2302      	movs	r3, #2
 80034e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034e6:	e10b      	b.n	8003700 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_SPI_Transmit+0x52>
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034f8:	e102      	b.n	8003700 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2203      	movs	r2, #3
 80034fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	88fa      	ldrh	r2, [r7, #6]
 8003512:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	88fa      	ldrh	r2, [r7, #6]
 8003518:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003540:	d10f      	bne.n	8003562 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003550:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003560:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356c:	2b40      	cmp	r3, #64	; 0x40
 800356e:	d007      	beq.n	8003580 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800357e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003588:	d14b      	bne.n	8003622 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_SPI_Transmit+0xf6>
 8003592:	8afb      	ldrh	r3, [r7, #22]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d13e      	bne.n	8003616 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	881a      	ldrh	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	1c9a      	adds	r2, r3, #2
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035bc:	e02b      	b.n	8003616 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d112      	bne.n	80035f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	881a      	ldrh	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	1c9a      	adds	r2, r3, #2
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80035f0:	e011      	b.n	8003616 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035f2:	f7fe fa29 	bl	8001a48 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d803      	bhi.n	800360a <HAL_SPI_Transmit+0x168>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003608:	d102      	bne.n	8003610 <HAL_SPI_Transmit+0x16e>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d102      	bne.n	8003616 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003614:	e074      	b.n	8003700 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1ce      	bne.n	80035be <HAL_SPI_Transmit+0x11c>
 8003620:	e04c      	b.n	80036bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_SPI_Transmit+0x18e>
 800362a:	8afb      	ldrh	r3, [r7, #22]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d140      	bne.n	80036b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	7812      	ldrb	r2, [r2, #0]
 800363c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003656:	e02c      	b.n	80036b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b02      	cmp	r3, #2
 8003664:	d113      	bne.n	800368e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	330c      	adds	r3, #12
 8003670:	7812      	ldrb	r2, [r2, #0]
 8003672:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	86da      	strh	r2, [r3, #54]	; 0x36
 800368c:	e011      	b.n	80036b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800368e:	f7fe f9db 	bl	8001a48 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d803      	bhi.n	80036a6 <HAL_SPI_Transmit+0x204>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036a4:	d102      	bne.n	80036ac <HAL_SPI_Transmit+0x20a>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036b0:	e026      	b.n	8003700 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1cd      	bne.n	8003658 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	6839      	ldr	r1, [r7, #0]
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fe9f 	bl	8004404 <SPI_EndRxTxTransaction>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e000      	b.n	8003700 <HAL_SPI_Transmit+0x25e>
  }

error:
 80036fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003710:	7ffb      	ldrb	r3, [r7, #31]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b088      	sub	sp, #32
 800371e:	af02      	add	r7, sp, #8
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	603b      	str	r3, [r7, #0]
 8003726:	4613      	mov	r3, r2
 8003728:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003736:	d112      	bne.n	800375e <HAL_SPI_Receive+0x44>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10e      	bne.n	800375e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2204      	movs	r2, #4
 8003744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003748:	88fa      	ldrh	r2, [r7, #6]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	68b9      	ldr	r1, [r7, #8]
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f8f1 	bl	800393c <HAL_SPI_TransmitReceive>
 800375a:	4603      	mov	r3, r0
 800375c:	e0ea      	b.n	8003934 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_SPI_Receive+0x52>
 8003768:	2302      	movs	r3, #2
 800376a:	e0e3      	b.n	8003934 <HAL_SPI_Receive+0x21a>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003774:	f7fe f968 	bl	8001a48 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d002      	beq.n	800378c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003786:	2302      	movs	r3, #2
 8003788:	75fb      	strb	r3, [r7, #23]
    goto error;
 800378a:	e0ca      	b.n	8003922 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_SPI_Receive+0x7e>
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d102      	bne.n	800379e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800379c:	e0c1      	b.n	8003922 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2204      	movs	r2, #4
 80037a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	88fa      	ldrh	r2, [r7, #6]
 80037b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	88fa      	ldrh	r2, [r7, #6]
 80037bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e4:	d10f      	bne.n	8003806 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003804:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d007      	beq.n	8003824 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003822:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d162      	bne.n	80038f2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800382c:	e02e      	b.n	800388c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b01      	cmp	r3, #1
 800383a:	d115      	bne.n	8003868 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f103 020c 	add.w	r2, r3, #12
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	7812      	ldrb	r2, [r2, #0]
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800385c:	b29b      	uxth	r3, r3
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003866:	e011      	b.n	800388c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003868:	f7fe f8ee 	bl	8001a48 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d803      	bhi.n	8003880 <HAL_SPI_Receive+0x166>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800387e:	d102      	bne.n	8003886 <HAL_SPI_Receive+0x16c>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d102      	bne.n	800388c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	75fb      	strb	r3, [r7, #23]
          goto error;
 800388a:	e04a      	b.n	8003922 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1cb      	bne.n	800382e <HAL_SPI_Receive+0x114>
 8003896:	e031      	b.n	80038fc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d113      	bne.n	80038ce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	b292      	uxth	r2, r2
 80038b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038cc:	e011      	b.n	80038f2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ce:	f7fe f8bb 	bl	8001a48 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d803      	bhi.n	80038e6 <HAL_SPI_Receive+0x1cc>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038e4:	d102      	bne.n	80038ec <HAL_SPI_Receive+0x1d2>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d102      	bne.n	80038f2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038f0:	e017      	b.n	8003922 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1cd      	bne.n	8003898 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	6839      	ldr	r1, [r7, #0]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 fd19 	bl	8004338 <SPI_EndRxTransaction>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	75fb      	strb	r3, [r7, #23]
 800391e:	e000      	b.n	8003922 <HAL_SPI_Receive+0x208>
  }

error :
 8003920:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003932:	7dfb      	ldrb	r3, [r7, #23]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08c      	sub	sp, #48	; 0x30
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800394a:	2301      	movs	r3, #1
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <HAL_SPI_TransmitReceive+0x26>
 800395e:	2302      	movs	r3, #2
 8003960:	e18a      	b.n	8003c78 <HAL_SPI_TransmitReceive+0x33c>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800396a:	f7fe f86d 	bl	8001a48 <HAL_GetTick>
 800396e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003980:	887b      	ldrh	r3, [r7, #2]
 8003982:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003984:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003988:	2b01      	cmp	r3, #1
 800398a:	d00f      	beq.n	80039ac <HAL_SPI_TransmitReceive+0x70>
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003992:	d107      	bne.n	80039a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d103      	bne.n	80039a4 <HAL_SPI_TransmitReceive+0x68>
 800399c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d003      	beq.n	80039ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
 80039a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039aa:	e15b      	b.n	8003c64 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <HAL_SPI_TransmitReceive+0x82>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_SPI_TransmitReceive+0x82>
 80039b8:	887b      	ldrh	r3, [r7, #2]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d103      	bne.n	80039c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039c4:	e14e      	b.n	8003c64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d003      	beq.n	80039da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2205      	movs	r2, #5
 80039d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	887a      	ldrh	r2, [r7, #2]
 80039ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	887a      	ldrh	r2, [r7, #2]
 80039f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	887a      	ldrh	r2, [r7, #2]
 80039fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	887a      	ldrh	r2, [r7, #2]
 8003a02:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	2b40      	cmp	r3, #64	; 0x40
 8003a1c:	d007      	beq.n	8003a2e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a36:	d178      	bne.n	8003b2a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <HAL_SPI_TransmitReceive+0x10a>
 8003a40:	8b7b      	ldrh	r3, [r7, #26]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d166      	bne.n	8003b14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	881a      	ldrh	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	1c9a      	adds	r2, r3, #2
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a6a:	e053      	b.n	8003b14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d11b      	bne.n	8003ab2 <HAL_SPI_TransmitReceive+0x176>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d016      	beq.n	8003ab2 <HAL_SPI_TransmitReceive+0x176>
 8003a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d113      	bne.n	8003ab2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	881a      	ldrh	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	1c9a      	adds	r2, r3, #2
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d119      	bne.n	8003af4 <HAL_SPI_TransmitReceive+0x1b8>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d014      	beq.n	8003af4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	b292      	uxth	r2, r2
 8003ad6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	1c9a      	adds	r2, r3, #2
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003af0:	2301      	movs	r3, #1
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003af4:	f7fd ffa8 	bl	8001a48 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d807      	bhi.n	8003b14 <HAL_SPI_TransmitReceive+0x1d8>
 8003b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b0a:	d003      	beq.n	8003b14 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b12:	e0a7      	b.n	8003c64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1a6      	bne.n	8003a6c <HAL_SPI_TransmitReceive+0x130>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1a1      	bne.n	8003a6c <HAL_SPI_TransmitReceive+0x130>
 8003b28:	e07c      	b.n	8003c24 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_SPI_TransmitReceive+0x1fc>
 8003b32:	8b7b      	ldrh	r3, [r7, #26]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d16b      	bne.n	8003c10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	330c      	adds	r3, #12
 8003b42:	7812      	ldrb	r2, [r2, #0]
 8003b44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b5e:	e057      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d11c      	bne.n	8003ba8 <HAL_SPI_TransmitReceive+0x26c>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d017      	beq.n	8003ba8 <HAL_SPI_TransmitReceive+0x26c>
 8003b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d114      	bne.n	8003ba8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	330c      	adds	r3, #12
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d119      	bne.n	8003bea <HAL_SPI_TransmitReceive+0x2ae>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d014      	beq.n	8003bea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003be6:	2301      	movs	r3, #1
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bea:	f7fd ff2d 	bl	8001a48 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d803      	bhi.n	8003c02 <HAL_SPI_TransmitReceive+0x2c6>
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c00:	d102      	bne.n	8003c08 <HAL_SPI_TransmitReceive+0x2cc>
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d103      	bne.n	8003c10 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c0e:	e029      	b.n	8003c64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1a2      	bne.n	8003b60 <HAL_SPI_TransmitReceive+0x224>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d19d      	bne.n	8003b60 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fbeb 	bl	8004404 <SPI_EndRxTxTransaction>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d006      	beq.n	8003c42 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c40:	e010      	b.n	8003c64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10b      	bne.n	8003c62 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	e000      	b.n	8003c64 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003c62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3730      	adds	r7, #48	; 0x30
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d110      	bne.n	8003cbc <HAL_SPI_Receive_DMA+0x3c>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ca2:	d10b      	bne.n	8003cbc <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f8ac 	bl	8003e10 <HAL_SPI_TransmitReceive_DMA>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	e09f      	b.n	8003dfc <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_SPI_Receive_DMA+0x4a>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e098      	b.n	8003dfc <HAL_SPI_Receive_DMA+0x17c>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d002      	beq.n	8003ce4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ce2:	e086      	b.n	8003df2 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_SPI_Receive_DMA+0x70>
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cf4:	e07d      	b.n	8003df2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2204      	movs	r2, #4
 8003cfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	88fa      	ldrh	r2, [r7, #6]
 8003d0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	88fa      	ldrh	r2, [r7, #6]
 8003d14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d36:	d10f      	bne.n	8003d58 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5c:	4a29      	ldr	r2, [pc, #164]	; (8003e04 <HAL_SPI_Receive_DMA+0x184>)
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d64:	4a28      	ldr	r2, [pc, #160]	; (8003e08 <HAL_SPI_Receive_DMA+0x188>)
 8003d66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6c:	4a27      	ldr	r2, [pc, #156]	; (8003e0c <HAL_SPI_Receive_DMA+0x18c>)
 8003d6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d74:	2200      	movs	r2, #0
 8003d76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	330c      	adds	r3, #12
 8003d82:	4619      	mov	r1, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003d90:	f7fe f84a 	bl	8001e28 <HAL_DMA_Start_IT>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00c      	beq.n	8003db4 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9e:	f043 0210 	orr.w	r2, r3, #16
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003db2:	e01e      	b.n	8003df2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d007      	beq.n	8003dd2 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dd0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0220 	orr.w	r2, r2, #32
 8003de0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	080041b1 	.word	0x080041b1
 8003e08:	08004079 	.word	0x08004079
 8003e0c:	080041e9 	.word	0x080041e9

08003e10 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e0e3      	b.n	8003ff8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e3e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003e46:	7dbb      	ldrb	r3, [r7, #22]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d00d      	beq.n	8003e68 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e52:	d106      	bne.n	8003e62 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <HAL_SPI_TransmitReceive_DMA+0x52>
 8003e5c:	7dbb      	ldrb	r3, [r7, #22]
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d002      	beq.n	8003e68 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
 8003e64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e66:	e0c2      	b.n	8003fee <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003e74:	887b      	ldrh	r3, [r7, #2]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d102      	bne.n	8003e80 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e7e:	e0b6      	b.n	8003fee <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d003      	beq.n	8003e94 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2205      	movs	r2, #5
 8003e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	887a      	ldrh	r2, [r7, #2]
 8003ea4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	887a      	ldrh	r2, [r7, #2]
 8003eaa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	887a      	ldrh	r2, [r7, #2]
 8003eb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	887a      	ldrh	r2, [r7, #2]
 8003ebc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d108      	bne.n	8003ee8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eda:	4a49      	ldr	r2, [pc, #292]	; (8004000 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003edc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee2:	4a48      	ldr	r2, [pc, #288]	; (8004004 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003ee4:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ee6:	e007      	b.n	8003ef8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eec:	4a46      	ldr	r2, [pc, #280]	; (8004008 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef4:	4a45      	ldr	r2, [pc, #276]	; (800400c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003ef6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efc:	4a44      	ldr	r2, [pc, #272]	; (8004010 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003efe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f04:	2200      	movs	r2, #0
 8003f06:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	4619      	mov	r1, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003f20:	f7fd ff82 	bl	8001e28 <HAL_DMA_Start_IT>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00c      	beq.n	8003f44 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	f043 0210 	orr.w	r2, r3, #16
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003f42:	e054      	b.n	8003fee <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f58:	2200      	movs	r2, #0
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f60:	2200      	movs	r2, #0
 8003f62:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f68:	2200      	movs	r2, #0
 8003f6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f70:	2200      	movs	r2, #0
 8003f72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	330c      	adds	r3, #12
 8003f84:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f8a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003f8c:	f7fd ff4c 	bl	8001e28 <HAL_DMA_Start_IT>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00c      	beq.n	8003fb0 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9a:	f043 0210 	orr.w	r2, r3, #16
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003fae:	e01e      	b.n	8003fee <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fba:	2b40      	cmp	r3, #64	; 0x40
 8003fbc:	d007      	beq.n	8003fce <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fcc:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0220 	orr.w	r2, r2, #32
 8003fdc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f042 0202 	orr.w	r2, r2, #2
 8003fec:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	080041b1 	.word	0x080041b1
 8004004:	08004079 	.word	0x08004079
 8004008:	080041cd 	.word	0x080041cd
 800400c:	08004121 	.word	0x08004121
 8004010:	080041e9 	.word	0x080041e9

08004014 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004086:	f7fd fcdf 	bl	8001a48 <HAL_GetTick>
 800408a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409a:	d03b      	beq.n	8004114 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0220 	bic.w	r2, r2, #32
 80040aa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10d      	bne.n	80040d0 <SPI_DMAReceiveCplt+0x58>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040bc:	d108      	bne.n	80040d0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0203 	bic.w	r2, r2, #3
 80040cc:	605a      	str	r2, [r3, #4]
 80040ce:	e007      	b.n	80040e0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0201 	bic.w	r2, r2, #1
 80040de:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	2164      	movs	r1, #100	; 0x64
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f927 	bl	8004338 <SPI_EndRxTransaction>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f7ff ffa9 	bl	8004064 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004112:	e002      	b.n	800411a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f7ff ff7d 	bl	8004014 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800412e:	f7fd fc8b 	bl	8001a48 <HAL_GetTick>
 8004132:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004142:	d02f      	beq.n	80041a4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0220 	bic.w	r2, r2, #32
 8004152:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	2164      	movs	r1, #100	; 0x64
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f953 	bl	8004404 <SPI_EndRxTxTransaction>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004168:	f043 0220 	orr.w	r2, r3, #32
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0203 	bic.w	r2, r2, #3
 800417e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f7ff ff61 	bl	8004064 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80041a2:	e002      	b.n	80041aa <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7ff ff3f 	bl	8004028 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f7ff ff3c 	bl	800403c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f7ff ff38 	bl	8004050 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0203 	bic.w	r2, r2, #3
 8004204:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	f043 0210 	orr.w	r2, r3, #16
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f7ff ff22 	bl	8004064 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004238:	f7fd fc06 	bl	8001a48 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	4413      	add	r3, r2
 8004246:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004248:	f7fd fbfe 	bl	8001a48 <HAL_GetTick>
 800424c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800424e:	4b39      	ldr	r3, [pc, #228]	; (8004334 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	015b      	lsls	r3, r3, #5
 8004254:	0d1b      	lsrs	r3, r3, #20
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800425e:	e054      	b.n	800430a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004266:	d050      	beq.n	800430a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004268:	f7fd fbee 	bl	8001a48 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	429a      	cmp	r2, r3
 8004276:	d902      	bls.n	800427e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d13d      	bne.n	80042fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800428c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004296:	d111      	bne.n	80042bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a0:	d004      	beq.n	80042ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042aa:	d107      	bne.n	80042bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c4:	d10f      	bne.n	80042e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e017      	b.n	800432a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	3b01      	subs	r3, #1
 8004308:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4013      	ands	r3, r2
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	429a      	cmp	r2, r3
 8004318:	bf0c      	ite	eq
 800431a:	2301      	moveq	r3, #1
 800431c:	2300      	movne	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	429a      	cmp	r2, r3
 8004326:	d19b      	bne.n	8004260 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3720      	adds	r7, #32
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	2000001c 	.word	0x2000001c

08004338 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af02      	add	r7, sp, #8
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800434c:	d111      	bne.n	8004372 <SPI_EndRxTransaction+0x3a>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004356:	d004      	beq.n	8004362 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004360:	d107      	bne.n	8004372 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004370:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800437a:	d12a      	bne.n	80043d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004384:	d012      	beq.n	80043ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2200      	movs	r2, #0
 800438e:	2180      	movs	r1, #128	; 0x80
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f7ff ff49 	bl	8004228 <SPI_WaitFlagStateUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d02d      	beq.n	80043f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a0:	f043 0220 	orr.w	r2, r3, #32
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e026      	b.n	80043fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2200      	movs	r2, #0
 80043b4:	2101      	movs	r1, #1
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f7ff ff36 	bl	8004228 <SPI_WaitFlagStateUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01a      	beq.n	80043f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	f043 0220 	orr.w	r2, r3, #32
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e013      	b.n	80043fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2200      	movs	r2, #0
 80043da:	2101      	movs	r1, #1
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f7ff ff23 	bl	8004228 <SPI_WaitFlagStateUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d007      	beq.n	80043f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ec:	f043 0220 	orr.w	r2, r3, #32
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e000      	b.n	80043fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004410:	4b1b      	ldr	r3, [pc, #108]	; (8004480 <SPI_EndRxTxTransaction+0x7c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a1b      	ldr	r2, [pc, #108]	; (8004484 <SPI_EndRxTxTransaction+0x80>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	0d5b      	lsrs	r3, r3, #21
 800441c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004420:	fb02 f303 	mul.w	r3, r2, r3
 8004424:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800442e:	d112      	bne.n	8004456 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2200      	movs	r2, #0
 8004438:	2180      	movs	r1, #128	; 0x80
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f7ff fef4 	bl	8004228 <SPI_WaitFlagStateUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d016      	beq.n	8004474 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444a:	f043 0220 	orr.w	r2, r3, #32
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e00f      	b.n	8004476 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	3b01      	subs	r3, #1
 8004460:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446c:	2b80      	cmp	r3, #128	; 0x80
 800446e:	d0f2      	beq.n	8004456 <SPI_EndRxTxTransaction+0x52>
 8004470:	e000      	b.n	8004474 <SPI_EndRxTxTransaction+0x70>
        break;
 8004472:	bf00      	nop
  }

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	2000001c 	.word	0x2000001c
 8004484:	165e9f81 	.word	0x165e9f81

08004488 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e041      	b.n	800451e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fd f848 	bl	8001544 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3304      	adds	r3, #4
 80044c4:	4619      	mov	r1, r3
 80044c6:	4610      	mov	r0, r2
 80044c8:	f000 fa04 	bl	80048d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b02      	cmp	r3, #2
 800453a:	d122      	bne.n	8004582 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b02      	cmp	r3, #2
 8004548:	d11b      	bne.n	8004582 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f06f 0202 	mvn.w	r2, #2
 8004552:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f994 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 800456e:	e005      	b.n	800457c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f986 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f997 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b04      	cmp	r3, #4
 800458e:	d122      	bne.n	80045d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b04      	cmp	r3, #4
 800459c:	d11b      	bne.n	80045d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f06f 0204 	mvn.w	r2, #4
 80045a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f96a 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 80045c2:	e005      	b.n	80045d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f95c 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f96d 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d122      	bne.n	800462a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d11b      	bne.n	800462a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f06f 0208 	mvn.w	r2, #8
 80045fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2204      	movs	r2, #4
 8004600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f940 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 8004616:	e005      	b.n	8004624 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f932 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f943 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b10      	cmp	r3, #16
 8004636:	d122      	bne.n	800467e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b10      	cmp	r3, #16
 8004644:	d11b      	bne.n	800467e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f06f 0210 	mvn.w	r2, #16
 800464e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2208      	movs	r2, #8
 8004654:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f916 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 800466a:	e005      	b.n	8004678 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f908 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f919 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b01      	cmp	r3, #1
 800468a:	d10e      	bne.n	80046aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b01      	cmp	r3, #1
 8004698:	d107      	bne.n	80046aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f06f 0201 	mvn.w	r2, #1
 80046a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f8e2 	bl	800486e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b4:	2b80      	cmp	r3, #128	; 0x80
 80046b6:	d10e      	bne.n	80046d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c2:	2b80      	cmp	r3, #128	; 0x80
 80046c4:	d107      	bne.n	80046d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fb4f 	bl	8004d74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b40      	cmp	r3, #64	; 0x40
 80046e2:	d10e      	bne.n	8004702 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d107      	bne.n	8004702 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f8de 	bl	80048be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b20      	cmp	r3, #32
 800470e:	d10e      	bne.n	800472e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b20      	cmp	r3, #32
 800471c:	d107      	bne.n	800472e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f06f 0220 	mvn.w	r2, #32
 8004726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 fb19 	bl	8004d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800472e:	bf00      	nop
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b086      	sub	sp, #24
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004750:	2302      	movs	r3, #2
 8004752:	e088      	b.n	8004866 <HAL_TIM_IC_ConfigChannel+0x130>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d11b      	bne.n	800479a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6819      	ldr	r1, [r3, #0]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f000 f94f 	bl	8004a14 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699a      	ldr	r2, [r3, #24]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 020c 	bic.w	r2, r2, #12
 8004784:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6999      	ldr	r1, [r3, #24]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	619a      	str	r2, [r3, #24]
 8004798:	e060      	b.n	800485c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b04      	cmp	r3, #4
 800479e:	d11c      	bne.n	80047da <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	6819      	ldr	r1, [r3, #0]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f000 f9a4 	bl	8004afc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047c2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6999      	ldr	r1, [r3, #24]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	021a      	lsls	r2, r3, #8
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	619a      	str	r2, [r3, #24]
 80047d8:	e040      	b.n	800485c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d11b      	bne.n	8004818 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	6819      	ldr	r1, [r3, #0]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f000 f9c1 	bl	8004b76 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69da      	ldr	r2, [r3, #28]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 020c 	bic.w	r2, r2, #12
 8004802:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69d9      	ldr	r1, [r3, #28]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	61da      	str	r2, [r3, #28]
 8004816:	e021      	b.n	800485c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b0c      	cmp	r3, #12
 800481c:	d11c      	bne.n	8004858 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	6819      	ldr	r1, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f000 f9de 	bl	8004bee <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69da      	ldr	r2, [r3, #28]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004840:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69d9      	ldr	r1, [r3, #28]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	021a      	lsls	r2, r3, #8
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	61da      	str	r2, [r3, #28]
 8004856:	e001      	b.n	800485c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004864:	7dfb      	ldrb	r3, [r7, #23]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a40      	ldr	r2, [pc, #256]	; (80049e8 <TIM_Base_SetConfig+0x114>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d013      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f2:	d00f      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a3d      	ldr	r2, [pc, #244]	; (80049ec <TIM_Base_SetConfig+0x118>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00b      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3c      	ldr	r2, [pc, #240]	; (80049f0 <TIM_Base_SetConfig+0x11c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d007      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a3b      	ldr	r2, [pc, #236]	; (80049f4 <TIM_Base_SetConfig+0x120>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d003      	beq.n	8004914 <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3a      	ldr	r2, [pc, #232]	; (80049f8 <TIM_Base_SetConfig+0x124>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d108      	bne.n	8004926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2f      	ldr	r2, [pc, #188]	; (80049e8 <TIM_Base_SetConfig+0x114>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d02b      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004934:	d027      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a2c      	ldr	r2, [pc, #176]	; (80049ec <TIM_Base_SetConfig+0x118>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d023      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2b      	ldr	r2, [pc, #172]	; (80049f0 <TIM_Base_SetConfig+0x11c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d01f      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2a      	ldr	r2, [pc, #168]	; (80049f4 <TIM_Base_SetConfig+0x120>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d01b      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a29      	ldr	r2, [pc, #164]	; (80049f8 <TIM_Base_SetConfig+0x124>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d017      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a28      	ldr	r2, [pc, #160]	; (80049fc <TIM_Base_SetConfig+0x128>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a27      	ldr	r2, [pc, #156]	; (8004a00 <TIM_Base_SetConfig+0x12c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00f      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a26      	ldr	r2, [pc, #152]	; (8004a04 <TIM_Base_SetConfig+0x130>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00b      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a25      	ldr	r2, [pc, #148]	; (8004a08 <TIM_Base_SetConfig+0x134>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d007      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a24      	ldr	r2, [pc, #144]	; (8004a0c <TIM_Base_SetConfig+0x138>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d003      	beq.n	8004986 <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a23      	ldr	r2, [pc, #140]	; (8004a10 <TIM_Base_SetConfig+0x13c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d108      	bne.n	8004998 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a0a      	ldr	r2, [pc, #40]	; (80049e8 <TIM_Base_SetConfig+0x114>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_Base_SetConfig+0xf8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a0c      	ldr	r2, [pc, #48]	; (80049f8 <TIM_Base_SetConfig+0x124>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d103      	bne.n	80049d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	615a      	str	r2, [r3, #20]
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40010000 	.word	0x40010000
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40000800 	.word	0x40000800
 80049f4:	40000c00 	.word	0x40000c00
 80049f8:	40010400 	.word	0x40010400
 80049fc:	40014000 	.word	0x40014000
 8004a00:	40014400 	.word	0x40014400
 8004a04:	40014800 	.word	0x40014800
 8004a08:	40001800 	.word	0x40001800
 8004a0c:	40001c00 	.word	0x40001c00
 8004a10:	40002000 	.word	0x40002000

08004a14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f023 0201 	bic.w	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4a28      	ldr	r2, [pc, #160]	; (8004ae0 <TIM_TI1_SetConfig+0xcc>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d01b      	beq.n	8004a7a <TIM_TI1_SetConfig+0x66>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a48:	d017      	beq.n	8004a7a <TIM_TI1_SetConfig+0x66>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4a25      	ldr	r2, [pc, #148]	; (8004ae4 <TIM_TI1_SetConfig+0xd0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d013      	beq.n	8004a7a <TIM_TI1_SetConfig+0x66>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4a24      	ldr	r2, [pc, #144]	; (8004ae8 <TIM_TI1_SetConfig+0xd4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00f      	beq.n	8004a7a <TIM_TI1_SetConfig+0x66>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4a23      	ldr	r2, [pc, #140]	; (8004aec <TIM_TI1_SetConfig+0xd8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00b      	beq.n	8004a7a <TIM_TI1_SetConfig+0x66>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4a22      	ldr	r2, [pc, #136]	; (8004af0 <TIM_TI1_SetConfig+0xdc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d007      	beq.n	8004a7a <TIM_TI1_SetConfig+0x66>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4a21      	ldr	r2, [pc, #132]	; (8004af4 <TIM_TI1_SetConfig+0xe0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d003      	beq.n	8004a7a <TIM_TI1_SetConfig+0x66>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4a20      	ldr	r2, [pc, #128]	; (8004af8 <TIM_TI1_SetConfig+0xe4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d101      	bne.n	8004a7e <TIM_TI1_SetConfig+0x6a>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <TIM_TI1_SetConfig+0x6c>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0303 	bic.w	r3, r3, #3
 8004a8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	e003      	b.n	8004a9e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f023 030a 	bic.w	r3, r3, #10
 8004ab8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f003 030a 	and.w	r3, r3, #10
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	621a      	str	r2, [r3, #32]
}
 8004ad2:	bf00      	nop
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40010000 	.word	0x40010000
 8004ae4:	40000400 	.word	0x40000400
 8004ae8:	40000800 	.word	0x40000800
 8004aec:	40000c00 	.word	0x40000c00
 8004af0:	40010400 	.word	0x40010400
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40001800 	.word	0x40001800

08004afc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f023 0210 	bic.w	r2, r3, #16
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	021b      	lsls	r3, r3, #8
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	031b      	lsls	r3, r3, #12
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b087      	sub	sp, #28
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
 8004b82:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bb2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004bc6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	621a      	str	r2, [r3, #32]
}
 8004be2:	bf00      	nop
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b087      	sub	sp, #28
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	021b      	lsls	r3, r3, #8
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	031b      	lsls	r3, r3, #12
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004c40:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	031b      	lsls	r3, r3, #12
 8004c46:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	621a      	str	r2, [r3, #32]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e05a      	b.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a21      	ldr	r2, [pc, #132]	; (8004d44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d022      	beq.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ccc:	d01d      	beq.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a1d      	ldr	r2, [pc, #116]	; (8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d018      	beq.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a1b      	ldr	r2, [pc, #108]	; (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a1a      	ldr	r2, [pc, #104]	; (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00e      	beq.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a18      	ldr	r2, [pc, #96]	; (8004d54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d009      	beq.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a17      	ldr	r2, [pc, #92]	; (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d004      	beq.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a15      	ldr	r2, [pc, #84]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d10c      	bne.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40010000 	.word	0x40010000
 8004d48:	40000400 	.word	0x40000400
 8004d4c:	40000800 	.word	0x40000800
 8004d50:	40000c00 	.word	0x40000c00
 8004d54:	40010400 	.word	0x40010400
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40001800 	.word	0x40001800

08004d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e03f      	b.n	8004e1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fc fc16 	bl	80015e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2224      	movs	r2, #36	; 0x24
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 ff65 	bl	8005c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004de0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695a      	ldr	r2, [r3, #20]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004df0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b08a      	sub	sp, #40	; 0x28
 8004e26:	af02      	add	r7, sp, #8
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	603b      	str	r3, [r7, #0]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	d17c      	bne.n	8004f3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <HAL_UART_Transmit+0x2c>
 8004e48:	88fb      	ldrh	r3, [r7, #6]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e075      	b.n	8004f3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_UART_Transmit+0x3e>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e06e      	b.n	8004f3e <HAL_UART_Transmit+0x11c>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2221      	movs	r2, #33	; 0x21
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e76:	f7fc fde7 	bl	8001a48 <HAL_GetTick>
 8004e7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	88fa      	ldrh	r2, [r7, #6]
 8004e80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	88fa      	ldrh	r2, [r7, #6]
 8004e86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e90:	d108      	bne.n	8004ea4 <HAL_UART_Transmit+0x82>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d104      	bne.n	8004ea4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	e003      	b.n	8004eac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004eb4:	e02a      	b.n	8004f0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2180      	movs	r1, #128	; 0x80
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 fc21 	bl	8005708 <UART_WaitOnFlagUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e036      	b.n	8004f3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10b      	bne.n	8004eee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ee4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	3302      	adds	r3, #2
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	e007      	b.n	8004efe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	781a      	ldrb	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	3301      	adds	r3, #1
 8004efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1cf      	bne.n	8004eb6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2140      	movs	r1, #64	; 0x40
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 fbf1 	bl	8005708 <UART_WaitOnFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e006      	b.n	8004f3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e000      	b.n	8004f3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f3c:	2302      	movs	r3, #2
  }
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3720      	adds	r7, #32
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	4613      	mov	r3, r2
 8004f52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d11d      	bne.n	8004f9c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_UART_Receive_DMA+0x26>
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e016      	b.n	8004f9e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Receive_DMA+0x38>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e00f      	b.n	8004f9e <HAL_UART_Receive_DMA+0x58>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004f8c:	88fb      	ldrh	r3, [r7, #6]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	68b9      	ldr	r1, [r7, #8]
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fc26 	bl	80057e4 <UART_Start_Receive_DMA>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	e000      	b.n	8004f9e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
  }
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b0ba      	sub	sp, #232	; 0xe8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004fe6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10f      	bne.n	800500e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d009      	beq.n	800500e <HAL_UART_IRQHandler+0x66>
 8004ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fd8d 	bl	8005b26 <UART_Receive_IT>
      return;
 800500c:	e256      	b.n	80054bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800500e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 80de 	beq.w	80051d4 <HAL_UART_IRQHandler+0x22c>
 8005018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	d106      	bne.n	8005032 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005028:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 80d1 	beq.w	80051d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00b      	beq.n	8005056 <HAL_UART_IRQHandler+0xae>
 800503e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d005      	beq.n	8005056 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	f043 0201 	orr.w	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00b      	beq.n	800507a <HAL_UART_IRQHandler+0xd2>
 8005062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f043 0202 	orr.w	r2, r3, #2
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800507a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00b      	beq.n	800509e <HAL_UART_IRQHandler+0xf6>
 8005086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d005      	beq.n	800509e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f043 0204 	orr.w	r2, r3, #4
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800509e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d011      	beq.n	80050ce <HAL_UART_IRQHandler+0x126>
 80050aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d105      	bne.n	80050c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	f043 0208 	orr.w	r2, r3, #8
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 81ed 	beq.w	80054b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d008      	beq.n	80050f6 <HAL_UART_IRQHandler+0x14e>
 80050e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 fd18 	bl	8005b26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005100:	2b40      	cmp	r3, #64	; 0x40
 8005102:	bf0c      	ite	eq
 8005104:	2301      	moveq	r3, #1
 8005106:	2300      	movne	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b00      	cmp	r3, #0
 8005118:	d103      	bne.n	8005122 <HAL_UART_IRQHandler+0x17a>
 800511a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800511e:	2b00      	cmp	r3, #0
 8005120:	d04f      	beq.n	80051c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fc20 	bl	8005968 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d141      	bne.n	80051ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3314      	adds	r3, #20
 800513c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005140:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800514c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3314      	adds	r3, #20
 800515e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005162:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800516e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800517a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1d9      	bne.n	8005136 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	2b00      	cmp	r3, #0
 8005188:	d013      	beq.n	80051b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518e:	4a7d      	ldr	r2, [pc, #500]	; (8005384 <HAL_UART_IRQHandler+0x3dc>)
 8005190:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	4618      	mov	r0, r3
 8005198:	f7fc ff0e 	bl	8001fb8 <HAL_DMA_Abort_IT>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d016      	beq.n	80051d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051ac:	4610      	mov	r0, r2
 80051ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b0:	e00e      	b.n	80051d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f99a 	bl	80054ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b8:	e00a      	b.n	80051d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f996 	bl	80054ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c0:	e006      	b.n	80051d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f992 	bl	80054ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80051ce:	e170      	b.n	80054b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d0:	bf00      	nop
    return;
 80051d2:	e16e      	b.n	80054b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	2b01      	cmp	r3, #1
 80051da:	f040 814a 	bne.w	8005472 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 8143 	beq.w	8005472 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 813c 	beq.w	8005472 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051fa:	2300      	movs	r3, #0
 80051fc:	60bb      	str	r3, [r7, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	60bb      	str	r3, [r7, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521a:	2b40      	cmp	r3, #64	; 0x40
 800521c:	f040 80b4 	bne.w	8005388 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800522c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8140 	beq.w	80054b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800523a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800523e:	429a      	cmp	r2, r3
 8005240:	f080 8139 	bcs.w	80054b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800524a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005256:	f000 8088 	beq.w	800536a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	330c      	adds	r3, #12
 8005260:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005270:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	330c      	adds	r3, #12
 8005282:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005286:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800528a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005292:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800529e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1d9      	bne.n	800525a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3314      	adds	r3, #20
 80052ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3314      	adds	r3, #20
 80052c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052d6:	e841 2300 	strex	r3, r2, [r1]
 80052da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e1      	bne.n	80052a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3314      	adds	r3, #20
 80052e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3314      	adds	r3, #20
 8005302:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005306:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005308:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800530c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1e3      	bne.n	80052e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	330c      	adds	r3, #12
 800532e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005332:	e853 3f00 	ldrex	r3, [r3]
 8005336:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800533a:	f023 0310 	bic.w	r3, r3, #16
 800533e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	330c      	adds	r3, #12
 8005348:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800534c:	65ba      	str	r2, [r7, #88]	; 0x58
 800534e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005350:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005352:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005354:	e841 2300 	strex	r3, r2, [r1]
 8005358:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800535a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e3      	bne.n	8005328 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	4618      	mov	r0, r3
 8005366:	f7fc fdb7 	bl	8001ed8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005372:	b29b      	uxth	r3, r3
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	b29b      	uxth	r3, r3
 8005378:	4619      	mov	r1, r3
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f8c0 	bl	8005500 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005380:	e099      	b.n	80054b6 <HAL_UART_IRQHandler+0x50e>
 8005382:	bf00      	nop
 8005384:	08005a2f 	.word	0x08005a2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005390:	b29b      	uxth	r3, r3
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 808b 	beq.w	80054ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80053a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 8086 	beq.w	80054ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	330c      	adds	r3, #12
 80053b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	330c      	adds	r3, #12
 80053ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053d2:	647a      	str	r2, [r7, #68]	; 0x44
 80053d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e3      	bne.n	80053ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3314      	adds	r3, #20
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	623b      	str	r3, [r7, #32]
   return(result);
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	f023 0301 	bic.w	r3, r3, #1
 80053fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3314      	adds	r3, #20
 8005406:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800540a:	633a      	str	r2, [r7, #48]	; 0x30
 800540c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e3      	bne.n	80053e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	330c      	adds	r3, #12
 8005432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	60fb      	str	r3, [r7, #12]
   return(result);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0310 	bic.w	r3, r3, #16
 8005442:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	330c      	adds	r3, #12
 800544c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005450:	61fa      	str	r2, [r7, #28]
 8005452:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	69b9      	ldr	r1, [r7, #24]
 8005456:	69fa      	ldr	r2, [r7, #28]
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	617b      	str	r3, [r7, #20]
   return(result);
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e3      	bne.n	800542c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005464:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005468:	4619      	mov	r1, r3
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f848 	bl	8005500 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005470:	e023      	b.n	80054ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <HAL_UART_IRQHandler+0x4ea>
 800547e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fae3 	bl	8005a56 <UART_Transmit_IT>
    return;
 8005490:	e014      	b.n	80054bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00e      	beq.n	80054bc <HAL_UART_IRQHandler+0x514>
 800549e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d008      	beq.n	80054bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fb23 	bl	8005af6 <UART_EndTransmit_IT>
    return;
 80054b0:	e004      	b.n	80054bc <HAL_UART_IRQHandler+0x514>
    return;
 80054b2:	bf00      	nop
 80054b4:	e002      	b.n	80054bc <HAL_UART_IRQHandler+0x514>
      return;
 80054b6:	bf00      	nop
 80054b8:	e000      	b.n	80054bc <HAL_UART_IRQHandler+0x514>
      return;
 80054ba:	bf00      	nop
  }
}
 80054bc:	37e8      	adds	r7, #232	; 0xe8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop

080054c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b09c      	sub	sp, #112	; 0x70
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005530:	2b00      	cmp	r3, #0
 8005532:	d172      	bne.n	800561a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005536:	2200      	movs	r2, #0
 8005538:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800553a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	330c      	adds	r3, #12
 8005540:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800554a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800554c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005550:	66bb      	str	r3, [r7, #104]	; 0x68
 8005552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	330c      	adds	r3, #12
 8005558:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800555a:	65ba      	str	r2, [r7, #88]	; 0x58
 800555c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005560:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1e5      	bne.n	800553a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3314      	adds	r3, #20
 8005574:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800557e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005580:	f023 0301 	bic.w	r3, r3, #1
 8005584:	667b      	str	r3, [r7, #100]	; 0x64
 8005586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3314      	adds	r3, #20
 800558c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800558e:	647a      	str	r2, [r7, #68]	; 0x44
 8005590:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800559c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e5      	bne.n	800556e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3314      	adds	r3, #20
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	623b      	str	r3, [r7, #32]
   return(result);
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b8:	663b      	str	r3, [r7, #96]	; 0x60
 80055ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3314      	adds	r3, #20
 80055c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055c2:	633a      	str	r2, [r7, #48]	; 0x30
 80055c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1e5      	bne.n	80055a2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d8:	2220      	movs	r2, #32
 80055da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d119      	bne.n	800561a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	330c      	adds	r3, #12
 80055ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f023 0310 	bic.w	r3, r3, #16
 80055fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	330c      	adds	r3, #12
 8005604:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005606:	61fa      	str	r2, [r7, #28]
 8005608:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	69b9      	ldr	r1, [r7, #24]
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	617b      	str	r3, [r7, #20]
   return(result);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e5      	bne.n	80055e6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800561a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	2b01      	cmp	r3, #1
 8005620:	d106      	bne.n	8005630 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005624:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005626:	4619      	mov	r1, r3
 8005628:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800562a:	f7ff ff69 	bl	8005500 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800562e:	e002      	b.n	8005636 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005630:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005632:	f7fb fb63 	bl	8000cfc <HAL_UART_RxCpltCallback>
}
 8005636:	bf00      	nop
 8005638:	3770      	adds	r7, #112	; 0x70
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	2b01      	cmp	r3, #1
 8005652:	d108      	bne.n	8005666 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	b29b      	uxth	r3, r3
 800565c:	4619      	mov	r1, r3
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f7ff ff4e 	bl	8005500 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005664:	e002      	b.n	800566c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f7ff ff36 	bl	80054d8 <HAL_UART_RxHalfCpltCallback>
}
 800566c:	bf00      	nop
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005684:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005690:	2b80      	cmp	r3, #128	; 0x80
 8005692:	bf0c      	ite	eq
 8005694:	2301      	moveq	r3, #1
 8005696:	2300      	movne	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b21      	cmp	r3, #33	; 0x21
 80056a6:	d108      	bne.n	80056ba <UART_DMAError+0x46>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d005      	beq.n	80056ba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2200      	movs	r2, #0
 80056b2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80056b4:	68b8      	ldr	r0, [r7, #8]
 80056b6:	f000 f92f 	bl	8005918 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c4:	2b40      	cmp	r3, #64	; 0x40
 80056c6:	bf0c      	ite	eq
 80056c8:	2301      	moveq	r3, #1
 80056ca:	2300      	movne	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b22      	cmp	r3, #34	; 0x22
 80056da:	d108      	bne.n	80056ee <UART_DMAError+0x7a>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d005      	beq.n	80056ee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2200      	movs	r2, #0
 80056e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80056e8:	68b8      	ldr	r0, [r7, #8]
 80056ea:	f000 f93d 	bl	8005968 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f043 0210 	orr.w	r2, r3, #16
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056fa:	68b8      	ldr	r0, [r7, #8]
 80056fc:	f7ff fef6 	bl	80054ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b090      	sub	sp, #64	; 0x40
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	4613      	mov	r3, r2
 8005716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005718:	e050      	b.n	80057bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800571a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800571c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005720:	d04c      	beq.n	80057bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005724:	2b00      	cmp	r3, #0
 8005726:	d007      	beq.n	8005738 <UART_WaitOnFlagUntilTimeout+0x30>
 8005728:	f7fc f98e 	bl	8001a48 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005734:	429a      	cmp	r2, r3
 8005736:	d241      	bcs.n	80057bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	330c      	adds	r3, #12
 800573e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800574e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005758:	637a      	str	r2, [r7, #52]	; 0x34
 800575a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800575e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e5      	bne.n	8005738 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3314      	adds	r3, #20
 8005772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	613b      	str	r3, [r7, #16]
   return(result);
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f023 0301 	bic.w	r3, r3, #1
 8005782:	63bb      	str	r3, [r7, #56]	; 0x38
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3314      	adds	r3, #20
 800578a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800578c:	623a      	str	r2, [r7, #32]
 800578e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005790:	69f9      	ldr	r1, [r7, #28]
 8005792:	6a3a      	ldr	r2, [r7, #32]
 8005794:	e841 2300 	strex	r3, r2, [r1]
 8005798:	61bb      	str	r3, [r7, #24]
   return(result);
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e5      	bne.n	800576c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e00f      	b.n	80057dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	4013      	ands	r3, r2
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	bf0c      	ite	eq
 80057cc:	2301      	moveq	r3, #1
 80057ce:	2300      	movne	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	461a      	mov	r2, r3
 80057d4:	79fb      	ldrb	r3, [r7, #7]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d09f      	beq.n	800571a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3740      	adds	r7, #64	; 0x40
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b098      	sub	sp, #96	; 0x60
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	4613      	mov	r3, r2
 80057f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	88fa      	ldrh	r2, [r7, #6]
 80057fc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2222      	movs	r2, #34	; 0x22
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	4a3e      	ldr	r2, [pc, #248]	; (800590c <UART_Start_Receive_DMA+0x128>)
 8005812:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	4a3d      	ldr	r2, [pc, #244]	; (8005910 <UART_Start_Receive_DMA+0x12c>)
 800581a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005820:	4a3c      	ldr	r2, [pc, #240]	; (8005914 <UART_Start_Receive_DMA+0x130>)
 8005822:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	2200      	movs	r2, #0
 800582a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800582c:	f107 0308 	add.w	r3, r7, #8
 8005830:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3304      	adds	r3, #4
 800583c:	4619      	mov	r1, r3
 800583e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	88fb      	ldrh	r3, [r7, #6]
 8005844:	f7fc faf0 	bl	8001e28 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005848:	2300      	movs	r3, #0
 800584a:	613b      	str	r3, [r7, #16]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	330c      	adds	r3, #12
 800586c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800587c:	65bb      	str	r3, [r7, #88]	; 0x58
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	330c      	adds	r3, #12
 8005884:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005886:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005888:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800588c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e5      	bne.n	8005866 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3314      	adds	r3, #20
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	657b      	str	r3, [r7, #84]	; 0x54
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3314      	adds	r3, #20
 80058b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058ba:	63ba      	str	r2, [r7, #56]	; 0x38
 80058bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e5      	bne.n	800589a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3314      	adds	r3, #20
 80058d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	e853 3f00 	ldrex	r3, [r3]
 80058dc:	617b      	str	r3, [r7, #20]
   return(result);
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e4:	653b      	str	r3, [r7, #80]	; 0x50
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3314      	adds	r3, #20
 80058ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058ee:	627a      	str	r2, [r7, #36]	; 0x24
 80058f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	6a39      	ldr	r1, [r7, #32]
 80058f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f6:	e841 2300 	strex	r3, r2, [r1]
 80058fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1e5      	bne.n	80058ce <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3760      	adds	r7, #96	; 0x60
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	08005519 	.word	0x08005519
 8005910:	0800563f 	.word	0x0800563f
 8005914:	08005675 	.word	0x08005675

08005918 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005918:	b480      	push	{r7}
 800591a:	b089      	sub	sp, #36	; 0x24
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	330c      	adds	r3, #12
 8005926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	e853 3f00 	ldrex	r3, [r3]
 800592e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005936:	61fb      	str	r3, [r7, #28]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	330c      	adds	r3, #12
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	61ba      	str	r2, [r7, #24]
 8005942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005944:	6979      	ldr	r1, [r7, #20]
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	e841 2300 	strex	r3, r2, [r1]
 800594c:	613b      	str	r3, [r7, #16]
   return(result);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1e5      	bne.n	8005920 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800595c:	bf00      	nop
 800595e:	3724      	adds	r7, #36	; 0x24
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005968:	b480      	push	{r7}
 800596a:	b095      	sub	sp, #84	; 0x54
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	330c      	adds	r3, #12
 8005976:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	e853 3f00 	ldrex	r3, [r3]
 800597e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	330c      	adds	r3, #12
 800598e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005990:	643a      	str	r2, [r7, #64]	; 0x40
 8005992:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005998:	e841 2300 	strex	r3, r2, [r1]
 800599c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e5      	bne.n	8005970 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3314      	adds	r3, #20
 80059aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	f023 0301 	bic.w	r3, r3, #1
 80059ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3314      	adds	r3, #20
 80059c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e5      	bne.n	80059a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d119      	bne.n	8005a14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f023 0310 	bic.w	r3, r3, #16
 80059f6:	647b      	str	r3, [r7, #68]	; 0x44
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a00:	61ba      	str	r2, [r7, #24]
 8005a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	6979      	ldr	r1, [r7, #20]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e5      	bne.n	80059e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a22:	bf00      	nop
 8005a24:	3754      	adds	r7, #84	; 0x54
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f7ff fd4f 	bl	80054ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a4e:	bf00      	nop
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b21      	cmp	r3, #33	; 0x21
 8005a68:	d13e      	bne.n	8005ae8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a72:	d114      	bne.n	8005a9e <UART_Transmit_IT+0x48>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d110      	bne.n	8005a9e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	1c9a      	adds	r2, r3, #2
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	621a      	str	r2, [r3, #32]
 8005a9c:	e008      	b.n	8005ab0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	1c59      	adds	r1, r3, #1
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6211      	str	r1, [r2, #32]
 8005aa8:	781a      	ldrb	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	4619      	mov	r1, r3
 8005abe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10f      	bne.n	8005ae4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ad2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ae2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e000      	b.n	8005aea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ae8:	2302      	movs	r3, #2
  }
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7ff fcd4 	bl	80054c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b08c      	sub	sp, #48	; 0x30
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b22      	cmp	r3, #34	; 0x22
 8005b38:	f040 80ab 	bne.w	8005c92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b44:	d117      	bne.n	8005b76 <UART_Receive_IT+0x50>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d113      	bne.n	8005b76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	1c9a      	adds	r2, r3, #2
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	629a      	str	r2, [r3, #40]	; 0x28
 8005b74:	e026      	b.n	8005bc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b88:	d007      	beq.n	8005b9a <UART_Receive_IT+0x74>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <UART_Receive_IT+0x82>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	e008      	b.n	8005bba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d15a      	bne.n	8005c8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0220 	bic.w	r2, r2, #32
 8005be6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695a      	ldr	r2, [r3, #20]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0201 	bic.w	r2, r2, #1
 8005c06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d135      	bne.n	8005c84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	330c      	adds	r3, #12
 8005c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f023 0310 	bic.w	r3, r3, #16
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3e:	623a      	str	r2, [r7, #32]
 8005c40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	69f9      	ldr	r1, [r7, #28]
 8005c44:	6a3a      	ldr	r2, [r7, #32]
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e5      	bne.n	8005c1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b10      	cmp	r3, #16
 8005c5e:	d10a      	bne.n	8005c76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff fc3f 	bl	8005500 <HAL_UARTEx_RxEventCallback>
 8005c82:	e002      	b.n	8005c8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7fb f839 	bl	8000cfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e002      	b.n	8005c94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e000      	b.n	8005c94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c92:	2302      	movs	r3, #2
  }
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3730      	adds	r7, #48	; 0x30
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ca0:	b0c0      	sub	sp, #256	; 0x100
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb8:	68d9      	ldr	r1, [r3, #12]
 8005cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	ea40 0301 	orr.w	r3, r0, r1
 8005cc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005cf4:	f021 010c 	bic.w	r1, r1, #12
 8005cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d02:	430b      	orrs	r3, r1
 8005d04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d16:	6999      	ldr	r1, [r3, #24]
 8005d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	ea40 0301 	orr.w	r3, r0, r1
 8005d22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	4b8f      	ldr	r3, [pc, #572]	; (8005f68 <UART_SetConfig+0x2cc>)
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d005      	beq.n	8005d3c <UART_SetConfig+0xa0>
 8005d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	4b8d      	ldr	r3, [pc, #564]	; (8005f6c <UART_SetConfig+0x2d0>)
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d104      	bne.n	8005d46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d3c:	f7fc fecc 	bl	8002ad8 <HAL_RCC_GetPCLK2Freq>
 8005d40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d44:	e003      	b.n	8005d4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d46:	f7fc feb3 	bl	8002ab0 <HAL_RCC_GetPCLK1Freq>
 8005d4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d58:	f040 810c 	bne.w	8005f74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d60:	2200      	movs	r2, #0
 8005d62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d6e:	4622      	mov	r2, r4
 8005d70:	462b      	mov	r3, r5
 8005d72:	1891      	adds	r1, r2, r2
 8005d74:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d76:	415b      	adcs	r3, r3
 8005d78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d7e:	4621      	mov	r1, r4
 8005d80:	eb12 0801 	adds.w	r8, r2, r1
 8005d84:	4629      	mov	r1, r5
 8005d86:	eb43 0901 	adc.w	r9, r3, r1
 8005d8a:	f04f 0200 	mov.w	r2, #0
 8005d8e:	f04f 0300 	mov.w	r3, #0
 8005d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d9e:	4690      	mov	r8, r2
 8005da0:	4699      	mov	r9, r3
 8005da2:	4623      	mov	r3, r4
 8005da4:	eb18 0303 	adds.w	r3, r8, r3
 8005da8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dac:	462b      	mov	r3, r5
 8005dae:	eb49 0303 	adc.w	r3, r9, r3
 8005db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005dc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005dca:	460b      	mov	r3, r1
 8005dcc:	18db      	adds	r3, r3, r3
 8005dce:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	eb42 0303 	adc.w	r3, r2, r3
 8005dd6:	657b      	str	r3, [r7, #84]	; 0x54
 8005dd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ddc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005de0:	f7fa fa6e 	bl	80002c0 <__aeabi_uldivmod>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	4b61      	ldr	r3, [pc, #388]	; (8005f70 <UART_SetConfig+0x2d4>)
 8005dea:	fba3 2302 	umull	r2, r3, r3, r2
 8005dee:	095b      	lsrs	r3, r3, #5
 8005df0:	011c      	lsls	r4, r3, #4
 8005df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e04:	4642      	mov	r2, r8
 8005e06:	464b      	mov	r3, r9
 8005e08:	1891      	adds	r1, r2, r2
 8005e0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e0c:	415b      	adcs	r3, r3
 8005e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e14:	4641      	mov	r1, r8
 8005e16:	eb12 0a01 	adds.w	sl, r2, r1
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	eb43 0b01 	adc.w	fp, r3, r1
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e34:	4692      	mov	sl, r2
 8005e36:	469b      	mov	fp, r3
 8005e38:	4643      	mov	r3, r8
 8005e3a:	eb1a 0303 	adds.w	r3, sl, r3
 8005e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e42:	464b      	mov	r3, r9
 8005e44:	eb4b 0303 	adc.w	r3, fp, r3
 8005e48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e60:	460b      	mov	r3, r1
 8005e62:	18db      	adds	r3, r3, r3
 8005e64:	643b      	str	r3, [r7, #64]	; 0x40
 8005e66:	4613      	mov	r3, r2
 8005e68:	eb42 0303 	adc.w	r3, r2, r3
 8005e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e76:	f7fa fa23 	bl	80002c0 <__aeabi_uldivmod>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4611      	mov	r1, r2
 8005e80:	4b3b      	ldr	r3, [pc, #236]	; (8005f70 <UART_SetConfig+0x2d4>)
 8005e82:	fba3 2301 	umull	r2, r3, r3, r1
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	2264      	movs	r2, #100	; 0x64
 8005e8a:	fb02 f303 	mul.w	r3, r2, r3
 8005e8e:	1acb      	subs	r3, r1, r3
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e96:	4b36      	ldr	r3, [pc, #216]	; (8005f70 <UART_SetConfig+0x2d4>)
 8005e98:	fba3 2302 	umull	r2, r3, r3, r2
 8005e9c:	095b      	lsrs	r3, r3, #5
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ea4:	441c      	add	r4, r3
 8005ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005eb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005eb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005eb8:	4642      	mov	r2, r8
 8005eba:	464b      	mov	r3, r9
 8005ebc:	1891      	adds	r1, r2, r2
 8005ebe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ec0:	415b      	adcs	r3, r3
 8005ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ec8:	4641      	mov	r1, r8
 8005eca:	1851      	adds	r1, r2, r1
 8005ecc:	6339      	str	r1, [r7, #48]	; 0x30
 8005ece:	4649      	mov	r1, r9
 8005ed0:	414b      	adcs	r3, r1
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ee0:	4659      	mov	r1, fp
 8005ee2:	00cb      	lsls	r3, r1, #3
 8005ee4:	4651      	mov	r1, sl
 8005ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eea:	4651      	mov	r1, sl
 8005eec:	00ca      	lsls	r2, r1, #3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	4642      	mov	r2, r8
 8005ef6:	189b      	adds	r3, r3, r2
 8005ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005efc:	464b      	mov	r3, r9
 8005efe:	460a      	mov	r2, r1
 8005f00:	eb42 0303 	adc.w	r3, r2, r3
 8005f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	18db      	adds	r3, r3, r3
 8005f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f22:	4613      	mov	r3, r2
 8005f24:	eb42 0303 	adc.w	r3, r2, r3
 8005f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f32:	f7fa f9c5 	bl	80002c0 <__aeabi_uldivmod>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4b0d      	ldr	r3, [pc, #52]	; (8005f70 <UART_SetConfig+0x2d4>)
 8005f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	2164      	movs	r1, #100	; 0x64
 8005f44:	fb01 f303 	mul.w	r3, r1, r3
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	3332      	adds	r3, #50	; 0x32
 8005f4e:	4a08      	ldr	r2, [pc, #32]	; (8005f70 <UART_SetConfig+0x2d4>)
 8005f50:	fba2 2303 	umull	r2, r3, r2, r3
 8005f54:	095b      	lsrs	r3, r3, #5
 8005f56:	f003 0207 	and.w	r2, r3, #7
 8005f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4422      	add	r2, r4
 8005f62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f64:	e105      	b.n	8006172 <UART_SetConfig+0x4d6>
 8005f66:	bf00      	nop
 8005f68:	40011000 	.word	0x40011000
 8005f6c:	40011400 	.word	0x40011400
 8005f70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f86:	4642      	mov	r2, r8
 8005f88:	464b      	mov	r3, r9
 8005f8a:	1891      	adds	r1, r2, r2
 8005f8c:	6239      	str	r1, [r7, #32]
 8005f8e:	415b      	adcs	r3, r3
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
 8005f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f96:	4641      	mov	r1, r8
 8005f98:	1854      	adds	r4, r2, r1
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	eb43 0501 	adc.w	r5, r3, r1
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	f04f 0300 	mov.w	r3, #0
 8005fa8:	00eb      	lsls	r3, r5, #3
 8005faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fae:	00e2      	lsls	r2, r4, #3
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	461d      	mov	r5, r3
 8005fb4:	4643      	mov	r3, r8
 8005fb6:	18e3      	adds	r3, r4, r3
 8005fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	eb45 0303 	adc.w	r3, r5, r3
 8005fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fd6:	f04f 0200 	mov.w	r2, #0
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	008b      	lsls	r3, r1, #2
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fec:	4621      	mov	r1, r4
 8005fee:	008a      	lsls	r2, r1, #2
 8005ff0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ff4:	f7fa f964 	bl	80002c0 <__aeabi_uldivmod>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4b60      	ldr	r3, [pc, #384]	; (8006180 <UART_SetConfig+0x4e4>)
 8005ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	011c      	lsls	r4, r3, #4
 8006006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800600a:	2200      	movs	r2, #0
 800600c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006010:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006014:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006018:	4642      	mov	r2, r8
 800601a:	464b      	mov	r3, r9
 800601c:	1891      	adds	r1, r2, r2
 800601e:	61b9      	str	r1, [r7, #24]
 8006020:	415b      	adcs	r3, r3
 8006022:	61fb      	str	r3, [r7, #28]
 8006024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006028:	4641      	mov	r1, r8
 800602a:	1851      	adds	r1, r2, r1
 800602c:	6139      	str	r1, [r7, #16]
 800602e:	4649      	mov	r1, r9
 8006030:	414b      	adcs	r3, r1
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006040:	4659      	mov	r1, fp
 8006042:	00cb      	lsls	r3, r1, #3
 8006044:	4651      	mov	r1, sl
 8006046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800604a:	4651      	mov	r1, sl
 800604c:	00ca      	lsls	r2, r1, #3
 800604e:	4610      	mov	r0, r2
 8006050:	4619      	mov	r1, r3
 8006052:	4603      	mov	r3, r0
 8006054:	4642      	mov	r2, r8
 8006056:	189b      	adds	r3, r3, r2
 8006058:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800605c:	464b      	mov	r3, r9
 800605e:	460a      	mov	r2, r1
 8006060:	eb42 0303 	adc.w	r3, r2, r3
 8006064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	67bb      	str	r3, [r7, #120]	; 0x78
 8006072:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006080:	4649      	mov	r1, r9
 8006082:	008b      	lsls	r3, r1, #2
 8006084:	4641      	mov	r1, r8
 8006086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800608a:	4641      	mov	r1, r8
 800608c:	008a      	lsls	r2, r1, #2
 800608e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006092:	f7fa f915 	bl	80002c0 <__aeabi_uldivmod>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4b39      	ldr	r3, [pc, #228]	; (8006180 <UART_SetConfig+0x4e4>)
 800609c:	fba3 1302 	umull	r1, r3, r3, r2
 80060a0:	095b      	lsrs	r3, r3, #5
 80060a2:	2164      	movs	r1, #100	; 0x64
 80060a4:	fb01 f303 	mul.w	r3, r1, r3
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	3332      	adds	r3, #50	; 0x32
 80060ae:	4a34      	ldr	r2, [pc, #208]	; (8006180 <UART_SetConfig+0x4e4>)
 80060b0:	fba2 2303 	umull	r2, r3, r2, r3
 80060b4:	095b      	lsrs	r3, r3, #5
 80060b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060ba:	441c      	add	r4, r3
 80060bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060c0:	2200      	movs	r2, #0
 80060c2:	673b      	str	r3, [r7, #112]	; 0x70
 80060c4:	677a      	str	r2, [r7, #116]	; 0x74
 80060c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80060ca:	4642      	mov	r2, r8
 80060cc:	464b      	mov	r3, r9
 80060ce:	1891      	adds	r1, r2, r2
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	415b      	adcs	r3, r3
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060da:	4641      	mov	r1, r8
 80060dc:	1851      	adds	r1, r2, r1
 80060de:	6039      	str	r1, [r7, #0]
 80060e0:	4649      	mov	r1, r9
 80060e2:	414b      	adcs	r3, r1
 80060e4:	607b      	str	r3, [r7, #4]
 80060e6:	f04f 0200 	mov.w	r2, #0
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060f2:	4659      	mov	r1, fp
 80060f4:	00cb      	lsls	r3, r1, #3
 80060f6:	4651      	mov	r1, sl
 80060f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060fc:	4651      	mov	r1, sl
 80060fe:	00ca      	lsls	r2, r1, #3
 8006100:	4610      	mov	r0, r2
 8006102:	4619      	mov	r1, r3
 8006104:	4603      	mov	r3, r0
 8006106:	4642      	mov	r2, r8
 8006108:	189b      	adds	r3, r3, r2
 800610a:	66bb      	str	r3, [r7, #104]	; 0x68
 800610c:	464b      	mov	r3, r9
 800610e:	460a      	mov	r2, r1
 8006110:	eb42 0303 	adc.w	r3, r2, r3
 8006114:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	663b      	str	r3, [r7, #96]	; 0x60
 8006120:	667a      	str	r2, [r7, #100]	; 0x64
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800612e:	4649      	mov	r1, r9
 8006130:	008b      	lsls	r3, r1, #2
 8006132:	4641      	mov	r1, r8
 8006134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006138:	4641      	mov	r1, r8
 800613a:	008a      	lsls	r2, r1, #2
 800613c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006140:	f7fa f8be 	bl	80002c0 <__aeabi_uldivmod>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4b0d      	ldr	r3, [pc, #52]	; (8006180 <UART_SetConfig+0x4e4>)
 800614a:	fba3 1302 	umull	r1, r3, r3, r2
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	2164      	movs	r1, #100	; 0x64
 8006152:	fb01 f303 	mul.w	r3, r1, r3
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	3332      	adds	r3, #50	; 0x32
 800615c:	4a08      	ldr	r2, [pc, #32]	; (8006180 <UART_SetConfig+0x4e4>)
 800615e:	fba2 2303 	umull	r2, r3, r2, r3
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	f003 020f 	and.w	r2, r3, #15
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4422      	add	r2, r4
 8006170:	609a      	str	r2, [r3, #8]
}
 8006172:	bf00      	nop
 8006174:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006178:	46bd      	mov	sp, r7
 800617a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800617e:	bf00      	nop
 8006180:	51eb851f 	.word	0x51eb851f

08006184 <__errno>:
 8006184:	4b01      	ldr	r3, [pc, #4]	; (800618c <__errno+0x8>)
 8006186:	6818      	ldr	r0, [r3, #0]
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	20000028 	.word	0x20000028

08006190 <__libc_init_array>:
 8006190:	b570      	push	{r4, r5, r6, lr}
 8006192:	4d0d      	ldr	r5, [pc, #52]	; (80061c8 <__libc_init_array+0x38>)
 8006194:	4c0d      	ldr	r4, [pc, #52]	; (80061cc <__libc_init_array+0x3c>)
 8006196:	1b64      	subs	r4, r4, r5
 8006198:	10a4      	asrs	r4, r4, #2
 800619a:	2600      	movs	r6, #0
 800619c:	42a6      	cmp	r6, r4
 800619e:	d109      	bne.n	80061b4 <__libc_init_array+0x24>
 80061a0:	4d0b      	ldr	r5, [pc, #44]	; (80061d0 <__libc_init_array+0x40>)
 80061a2:	4c0c      	ldr	r4, [pc, #48]	; (80061d4 <__libc_init_array+0x44>)
 80061a4:	f000 fcfc 	bl	8006ba0 <_init>
 80061a8:	1b64      	subs	r4, r4, r5
 80061aa:	10a4      	asrs	r4, r4, #2
 80061ac:	2600      	movs	r6, #0
 80061ae:	42a6      	cmp	r6, r4
 80061b0:	d105      	bne.n	80061be <__libc_init_array+0x2e>
 80061b2:	bd70      	pop	{r4, r5, r6, pc}
 80061b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80061b8:	4798      	blx	r3
 80061ba:	3601      	adds	r6, #1
 80061bc:	e7ee      	b.n	800619c <__libc_init_array+0xc>
 80061be:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c2:	4798      	blx	r3
 80061c4:	3601      	adds	r6, #1
 80061c6:	e7f2      	b.n	80061ae <__libc_init_array+0x1e>
 80061c8:	08006c2c 	.word	0x08006c2c
 80061cc:	08006c2c 	.word	0x08006c2c
 80061d0:	08006c2c 	.word	0x08006c2c
 80061d4:	08006c30 	.word	0x08006c30

080061d8 <memcpy>:
 80061d8:	440a      	add	r2, r1
 80061da:	4291      	cmp	r1, r2
 80061dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80061e0:	d100      	bne.n	80061e4 <memcpy+0xc>
 80061e2:	4770      	bx	lr
 80061e4:	b510      	push	{r4, lr}
 80061e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061ee:	4291      	cmp	r1, r2
 80061f0:	d1f9      	bne.n	80061e6 <memcpy+0xe>
 80061f2:	bd10      	pop	{r4, pc}

080061f4 <memset>:
 80061f4:	4402      	add	r2, r0
 80061f6:	4603      	mov	r3, r0
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d100      	bne.n	80061fe <memset+0xa>
 80061fc:	4770      	bx	lr
 80061fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006202:	e7f9      	b.n	80061f8 <memset+0x4>

08006204 <siprintf>:
 8006204:	b40e      	push	{r1, r2, r3}
 8006206:	b500      	push	{lr}
 8006208:	b09c      	sub	sp, #112	; 0x70
 800620a:	ab1d      	add	r3, sp, #116	; 0x74
 800620c:	9002      	str	r0, [sp, #8]
 800620e:	9006      	str	r0, [sp, #24]
 8006210:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006214:	4809      	ldr	r0, [pc, #36]	; (800623c <siprintf+0x38>)
 8006216:	9107      	str	r1, [sp, #28]
 8006218:	9104      	str	r1, [sp, #16]
 800621a:	4909      	ldr	r1, [pc, #36]	; (8006240 <siprintf+0x3c>)
 800621c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006220:	9105      	str	r1, [sp, #20]
 8006222:	6800      	ldr	r0, [r0, #0]
 8006224:	9301      	str	r3, [sp, #4]
 8006226:	a902      	add	r1, sp, #8
 8006228:	f000 f96a 	bl	8006500 <_svfiprintf_r>
 800622c:	9b02      	ldr	r3, [sp, #8]
 800622e:	2200      	movs	r2, #0
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	b01c      	add	sp, #112	; 0x70
 8006234:	f85d eb04 	ldr.w	lr, [sp], #4
 8006238:	b003      	add	sp, #12
 800623a:	4770      	bx	lr
 800623c:	20000028 	.word	0x20000028
 8006240:	ffff0208 	.word	0xffff0208

08006244 <strchr>:
 8006244:	b2c9      	uxtb	r1, r1
 8006246:	4603      	mov	r3, r0
 8006248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800624c:	b11a      	cbz	r2, 8006256 <strchr+0x12>
 800624e:	428a      	cmp	r2, r1
 8006250:	d1f9      	bne.n	8006246 <strchr+0x2>
 8006252:	4618      	mov	r0, r3
 8006254:	4770      	bx	lr
 8006256:	2900      	cmp	r1, #0
 8006258:	bf18      	it	ne
 800625a:	2300      	movne	r3, #0
 800625c:	e7f9      	b.n	8006252 <strchr+0xe>
	...

08006260 <strdup>:
 8006260:	4b02      	ldr	r3, [pc, #8]	; (800626c <strdup+0xc>)
 8006262:	4601      	mov	r1, r0
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	f000 b803 	b.w	8006270 <_strdup_r>
 800626a:	bf00      	nop
 800626c:	20000028 	.word	0x20000028

08006270 <_strdup_r>:
 8006270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006272:	4604      	mov	r4, r0
 8006274:	4608      	mov	r0, r1
 8006276:	460d      	mov	r5, r1
 8006278:	f7f9 ffca 	bl	8000210 <strlen>
 800627c:	1c42      	adds	r2, r0, #1
 800627e:	4611      	mov	r1, r2
 8006280:	4620      	mov	r0, r4
 8006282:	9201      	str	r2, [sp, #4]
 8006284:	f000 f86c 	bl	8006360 <_malloc_r>
 8006288:	4604      	mov	r4, r0
 800628a:	b118      	cbz	r0, 8006294 <_strdup_r+0x24>
 800628c:	9a01      	ldr	r2, [sp, #4]
 800628e:	4629      	mov	r1, r5
 8006290:	f7ff ffa2 	bl	80061d8 <memcpy>
 8006294:	4620      	mov	r0, r4
 8006296:	b003      	add	sp, #12
 8006298:	bd30      	pop	{r4, r5, pc}

0800629a <strsep>:
 800629a:	4602      	mov	r2, r0
 800629c:	2300      	movs	r3, #0
 800629e:	6800      	ldr	r0, [r0, #0]
 80062a0:	f000 b816 	b.w	80062d0 <__strtok_r>

080062a4 <strstr>:
 80062a4:	780a      	ldrb	r2, [r1, #0]
 80062a6:	b570      	push	{r4, r5, r6, lr}
 80062a8:	b96a      	cbnz	r2, 80062c6 <strstr+0x22>
 80062aa:	bd70      	pop	{r4, r5, r6, pc}
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d109      	bne.n	80062c4 <strstr+0x20>
 80062b0:	460c      	mov	r4, r1
 80062b2:	4605      	mov	r5, r0
 80062b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0f6      	beq.n	80062aa <strstr+0x6>
 80062bc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80062c0:	429e      	cmp	r6, r3
 80062c2:	d0f7      	beq.n	80062b4 <strstr+0x10>
 80062c4:	3001      	adds	r0, #1
 80062c6:	7803      	ldrb	r3, [r0, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1ef      	bne.n	80062ac <strstr+0x8>
 80062cc:	4618      	mov	r0, r3
 80062ce:	e7ec      	b.n	80062aa <strstr+0x6>

080062d0 <__strtok_r>:
 80062d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062d2:	b908      	cbnz	r0, 80062d8 <__strtok_r+0x8>
 80062d4:	6810      	ldr	r0, [r2, #0]
 80062d6:	b188      	cbz	r0, 80062fc <__strtok_r+0x2c>
 80062d8:	4604      	mov	r4, r0
 80062da:	4620      	mov	r0, r4
 80062dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80062e0:	460f      	mov	r7, r1
 80062e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80062e6:	b91e      	cbnz	r6, 80062f0 <__strtok_r+0x20>
 80062e8:	b965      	cbnz	r5, 8006304 <__strtok_r+0x34>
 80062ea:	6015      	str	r5, [r2, #0]
 80062ec:	4628      	mov	r0, r5
 80062ee:	e005      	b.n	80062fc <__strtok_r+0x2c>
 80062f0:	42b5      	cmp	r5, r6
 80062f2:	d1f6      	bne.n	80062e2 <__strtok_r+0x12>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1f0      	bne.n	80062da <__strtok_r+0xa>
 80062f8:	6014      	str	r4, [r2, #0]
 80062fa:	7003      	strb	r3, [r0, #0]
 80062fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062fe:	461c      	mov	r4, r3
 8006300:	e00c      	b.n	800631c <__strtok_r+0x4c>
 8006302:	b915      	cbnz	r5, 800630a <__strtok_r+0x3a>
 8006304:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006308:	460e      	mov	r6, r1
 800630a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800630e:	42ab      	cmp	r3, r5
 8006310:	d1f7      	bne.n	8006302 <__strtok_r+0x32>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0f3      	beq.n	80062fe <__strtok_r+0x2e>
 8006316:	2300      	movs	r3, #0
 8006318:	f804 3c01 	strb.w	r3, [r4, #-1]
 800631c:	6014      	str	r4, [r2, #0]
 800631e:	e7ed      	b.n	80062fc <__strtok_r+0x2c>

08006320 <sbrk_aligned>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	4e0e      	ldr	r6, [pc, #56]	; (800635c <sbrk_aligned+0x3c>)
 8006324:	460c      	mov	r4, r1
 8006326:	6831      	ldr	r1, [r6, #0]
 8006328:	4605      	mov	r5, r0
 800632a:	b911      	cbnz	r1, 8006332 <sbrk_aligned+0x12>
 800632c:	f000 fb7c 	bl	8006a28 <_sbrk_r>
 8006330:	6030      	str	r0, [r6, #0]
 8006332:	4621      	mov	r1, r4
 8006334:	4628      	mov	r0, r5
 8006336:	f000 fb77 	bl	8006a28 <_sbrk_r>
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	d00a      	beq.n	8006354 <sbrk_aligned+0x34>
 800633e:	1cc4      	adds	r4, r0, #3
 8006340:	f024 0403 	bic.w	r4, r4, #3
 8006344:	42a0      	cmp	r0, r4
 8006346:	d007      	beq.n	8006358 <sbrk_aligned+0x38>
 8006348:	1a21      	subs	r1, r4, r0
 800634a:	4628      	mov	r0, r5
 800634c:	f000 fb6c 	bl	8006a28 <_sbrk_r>
 8006350:	3001      	adds	r0, #1
 8006352:	d101      	bne.n	8006358 <sbrk_aligned+0x38>
 8006354:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006358:	4620      	mov	r0, r4
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	20001338 	.word	0x20001338

08006360 <_malloc_r>:
 8006360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006364:	1ccd      	adds	r5, r1, #3
 8006366:	f025 0503 	bic.w	r5, r5, #3
 800636a:	3508      	adds	r5, #8
 800636c:	2d0c      	cmp	r5, #12
 800636e:	bf38      	it	cc
 8006370:	250c      	movcc	r5, #12
 8006372:	2d00      	cmp	r5, #0
 8006374:	4607      	mov	r7, r0
 8006376:	db01      	blt.n	800637c <_malloc_r+0x1c>
 8006378:	42a9      	cmp	r1, r5
 800637a:	d905      	bls.n	8006388 <_malloc_r+0x28>
 800637c:	230c      	movs	r3, #12
 800637e:	603b      	str	r3, [r7, #0]
 8006380:	2600      	movs	r6, #0
 8006382:	4630      	mov	r0, r6
 8006384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006388:	4e2e      	ldr	r6, [pc, #184]	; (8006444 <_malloc_r+0xe4>)
 800638a:	f000 fb77 	bl	8006a7c <__malloc_lock>
 800638e:	6833      	ldr	r3, [r6, #0]
 8006390:	461c      	mov	r4, r3
 8006392:	bb34      	cbnz	r4, 80063e2 <_malloc_r+0x82>
 8006394:	4629      	mov	r1, r5
 8006396:	4638      	mov	r0, r7
 8006398:	f7ff ffc2 	bl	8006320 <sbrk_aligned>
 800639c:	1c43      	adds	r3, r0, #1
 800639e:	4604      	mov	r4, r0
 80063a0:	d14d      	bne.n	800643e <_malloc_r+0xde>
 80063a2:	6834      	ldr	r4, [r6, #0]
 80063a4:	4626      	mov	r6, r4
 80063a6:	2e00      	cmp	r6, #0
 80063a8:	d140      	bne.n	800642c <_malloc_r+0xcc>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	4631      	mov	r1, r6
 80063ae:	4638      	mov	r0, r7
 80063b0:	eb04 0803 	add.w	r8, r4, r3
 80063b4:	f000 fb38 	bl	8006a28 <_sbrk_r>
 80063b8:	4580      	cmp	r8, r0
 80063ba:	d13a      	bne.n	8006432 <_malloc_r+0xd2>
 80063bc:	6821      	ldr	r1, [r4, #0]
 80063be:	3503      	adds	r5, #3
 80063c0:	1a6d      	subs	r5, r5, r1
 80063c2:	f025 0503 	bic.w	r5, r5, #3
 80063c6:	3508      	adds	r5, #8
 80063c8:	2d0c      	cmp	r5, #12
 80063ca:	bf38      	it	cc
 80063cc:	250c      	movcc	r5, #12
 80063ce:	4629      	mov	r1, r5
 80063d0:	4638      	mov	r0, r7
 80063d2:	f7ff ffa5 	bl	8006320 <sbrk_aligned>
 80063d6:	3001      	adds	r0, #1
 80063d8:	d02b      	beq.n	8006432 <_malloc_r+0xd2>
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	442b      	add	r3, r5
 80063de:	6023      	str	r3, [r4, #0]
 80063e0:	e00e      	b.n	8006400 <_malloc_r+0xa0>
 80063e2:	6822      	ldr	r2, [r4, #0]
 80063e4:	1b52      	subs	r2, r2, r5
 80063e6:	d41e      	bmi.n	8006426 <_malloc_r+0xc6>
 80063e8:	2a0b      	cmp	r2, #11
 80063ea:	d916      	bls.n	800641a <_malloc_r+0xba>
 80063ec:	1961      	adds	r1, r4, r5
 80063ee:	42a3      	cmp	r3, r4
 80063f0:	6025      	str	r5, [r4, #0]
 80063f2:	bf18      	it	ne
 80063f4:	6059      	strne	r1, [r3, #4]
 80063f6:	6863      	ldr	r3, [r4, #4]
 80063f8:	bf08      	it	eq
 80063fa:	6031      	streq	r1, [r6, #0]
 80063fc:	5162      	str	r2, [r4, r5]
 80063fe:	604b      	str	r3, [r1, #4]
 8006400:	4638      	mov	r0, r7
 8006402:	f104 060b 	add.w	r6, r4, #11
 8006406:	f000 fb3f 	bl	8006a88 <__malloc_unlock>
 800640a:	f026 0607 	bic.w	r6, r6, #7
 800640e:	1d23      	adds	r3, r4, #4
 8006410:	1af2      	subs	r2, r6, r3
 8006412:	d0b6      	beq.n	8006382 <_malloc_r+0x22>
 8006414:	1b9b      	subs	r3, r3, r6
 8006416:	50a3      	str	r3, [r4, r2]
 8006418:	e7b3      	b.n	8006382 <_malloc_r+0x22>
 800641a:	6862      	ldr	r2, [r4, #4]
 800641c:	42a3      	cmp	r3, r4
 800641e:	bf0c      	ite	eq
 8006420:	6032      	streq	r2, [r6, #0]
 8006422:	605a      	strne	r2, [r3, #4]
 8006424:	e7ec      	b.n	8006400 <_malloc_r+0xa0>
 8006426:	4623      	mov	r3, r4
 8006428:	6864      	ldr	r4, [r4, #4]
 800642a:	e7b2      	b.n	8006392 <_malloc_r+0x32>
 800642c:	4634      	mov	r4, r6
 800642e:	6876      	ldr	r6, [r6, #4]
 8006430:	e7b9      	b.n	80063a6 <_malloc_r+0x46>
 8006432:	230c      	movs	r3, #12
 8006434:	603b      	str	r3, [r7, #0]
 8006436:	4638      	mov	r0, r7
 8006438:	f000 fb26 	bl	8006a88 <__malloc_unlock>
 800643c:	e7a1      	b.n	8006382 <_malloc_r+0x22>
 800643e:	6025      	str	r5, [r4, #0]
 8006440:	e7de      	b.n	8006400 <_malloc_r+0xa0>
 8006442:	bf00      	nop
 8006444:	20001334 	.word	0x20001334

08006448 <__ssputs_r>:
 8006448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800644c:	688e      	ldr	r6, [r1, #8]
 800644e:	429e      	cmp	r6, r3
 8006450:	4682      	mov	sl, r0
 8006452:	460c      	mov	r4, r1
 8006454:	4690      	mov	r8, r2
 8006456:	461f      	mov	r7, r3
 8006458:	d838      	bhi.n	80064cc <__ssputs_r+0x84>
 800645a:	898a      	ldrh	r2, [r1, #12]
 800645c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006460:	d032      	beq.n	80064c8 <__ssputs_r+0x80>
 8006462:	6825      	ldr	r5, [r4, #0]
 8006464:	6909      	ldr	r1, [r1, #16]
 8006466:	eba5 0901 	sub.w	r9, r5, r1
 800646a:	6965      	ldr	r5, [r4, #20]
 800646c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006470:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006474:	3301      	adds	r3, #1
 8006476:	444b      	add	r3, r9
 8006478:	106d      	asrs	r5, r5, #1
 800647a:	429d      	cmp	r5, r3
 800647c:	bf38      	it	cc
 800647e:	461d      	movcc	r5, r3
 8006480:	0553      	lsls	r3, r2, #21
 8006482:	d531      	bpl.n	80064e8 <__ssputs_r+0xa0>
 8006484:	4629      	mov	r1, r5
 8006486:	f7ff ff6b 	bl	8006360 <_malloc_r>
 800648a:	4606      	mov	r6, r0
 800648c:	b950      	cbnz	r0, 80064a4 <__ssputs_r+0x5c>
 800648e:	230c      	movs	r3, #12
 8006490:	f8ca 3000 	str.w	r3, [sl]
 8006494:	89a3      	ldrh	r3, [r4, #12]
 8006496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800649a:	81a3      	strh	r3, [r4, #12]
 800649c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a4:	6921      	ldr	r1, [r4, #16]
 80064a6:	464a      	mov	r2, r9
 80064a8:	f7ff fe96 	bl	80061d8 <memcpy>
 80064ac:	89a3      	ldrh	r3, [r4, #12]
 80064ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b6:	81a3      	strh	r3, [r4, #12]
 80064b8:	6126      	str	r6, [r4, #16]
 80064ba:	6165      	str	r5, [r4, #20]
 80064bc:	444e      	add	r6, r9
 80064be:	eba5 0509 	sub.w	r5, r5, r9
 80064c2:	6026      	str	r6, [r4, #0]
 80064c4:	60a5      	str	r5, [r4, #8]
 80064c6:	463e      	mov	r6, r7
 80064c8:	42be      	cmp	r6, r7
 80064ca:	d900      	bls.n	80064ce <__ssputs_r+0x86>
 80064cc:	463e      	mov	r6, r7
 80064ce:	6820      	ldr	r0, [r4, #0]
 80064d0:	4632      	mov	r2, r6
 80064d2:	4641      	mov	r1, r8
 80064d4:	f000 fab8 	bl	8006a48 <memmove>
 80064d8:	68a3      	ldr	r3, [r4, #8]
 80064da:	1b9b      	subs	r3, r3, r6
 80064dc:	60a3      	str	r3, [r4, #8]
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	4433      	add	r3, r6
 80064e2:	6023      	str	r3, [r4, #0]
 80064e4:	2000      	movs	r0, #0
 80064e6:	e7db      	b.n	80064a0 <__ssputs_r+0x58>
 80064e8:	462a      	mov	r2, r5
 80064ea:	f000 fb1f 	bl	8006b2c <_realloc_r>
 80064ee:	4606      	mov	r6, r0
 80064f0:	2800      	cmp	r0, #0
 80064f2:	d1e1      	bne.n	80064b8 <__ssputs_r+0x70>
 80064f4:	6921      	ldr	r1, [r4, #16]
 80064f6:	4650      	mov	r0, sl
 80064f8:	f000 facc 	bl	8006a94 <_free_r>
 80064fc:	e7c7      	b.n	800648e <__ssputs_r+0x46>
	...

08006500 <_svfiprintf_r>:
 8006500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006504:	4698      	mov	r8, r3
 8006506:	898b      	ldrh	r3, [r1, #12]
 8006508:	061b      	lsls	r3, r3, #24
 800650a:	b09d      	sub	sp, #116	; 0x74
 800650c:	4607      	mov	r7, r0
 800650e:	460d      	mov	r5, r1
 8006510:	4614      	mov	r4, r2
 8006512:	d50e      	bpl.n	8006532 <_svfiprintf_r+0x32>
 8006514:	690b      	ldr	r3, [r1, #16]
 8006516:	b963      	cbnz	r3, 8006532 <_svfiprintf_r+0x32>
 8006518:	2140      	movs	r1, #64	; 0x40
 800651a:	f7ff ff21 	bl	8006360 <_malloc_r>
 800651e:	6028      	str	r0, [r5, #0]
 8006520:	6128      	str	r0, [r5, #16]
 8006522:	b920      	cbnz	r0, 800652e <_svfiprintf_r+0x2e>
 8006524:	230c      	movs	r3, #12
 8006526:	603b      	str	r3, [r7, #0]
 8006528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800652c:	e0d1      	b.n	80066d2 <_svfiprintf_r+0x1d2>
 800652e:	2340      	movs	r3, #64	; 0x40
 8006530:	616b      	str	r3, [r5, #20]
 8006532:	2300      	movs	r3, #0
 8006534:	9309      	str	r3, [sp, #36]	; 0x24
 8006536:	2320      	movs	r3, #32
 8006538:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800653c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006540:	2330      	movs	r3, #48	; 0x30
 8006542:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80066ec <_svfiprintf_r+0x1ec>
 8006546:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800654a:	f04f 0901 	mov.w	r9, #1
 800654e:	4623      	mov	r3, r4
 8006550:	469a      	mov	sl, r3
 8006552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006556:	b10a      	cbz	r2, 800655c <_svfiprintf_r+0x5c>
 8006558:	2a25      	cmp	r2, #37	; 0x25
 800655a:	d1f9      	bne.n	8006550 <_svfiprintf_r+0x50>
 800655c:	ebba 0b04 	subs.w	fp, sl, r4
 8006560:	d00b      	beq.n	800657a <_svfiprintf_r+0x7a>
 8006562:	465b      	mov	r3, fp
 8006564:	4622      	mov	r2, r4
 8006566:	4629      	mov	r1, r5
 8006568:	4638      	mov	r0, r7
 800656a:	f7ff ff6d 	bl	8006448 <__ssputs_r>
 800656e:	3001      	adds	r0, #1
 8006570:	f000 80aa 	beq.w	80066c8 <_svfiprintf_r+0x1c8>
 8006574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006576:	445a      	add	r2, fp
 8006578:	9209      	str	r2, [sp, #36]	; 0x24
 800657a:	f89a 3000 	ldrb.w	r3, [sl]
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 80a2 	beq.w	80066c8 <_svfiprintf_r+0x1c8>
 8006584:	2300      	movs	r3, #0
 8006586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800658a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800658e:	f10a 0a01 	add.w	sl, sl, #1
 8006592:	9304      	str	r3, [sp, #16]
 8006594:	9307      	str	r3, [sp, #28]
 8006596:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800659a:	931a      	str	r3, [sp, #104]	; 0x68
 800659c:	4654      	mov	r4, sl
 800659e:	2205      	movs	r2, #5
 80065a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a4:	4851      	ldr	r0, [pc, #324]	; (80066ec <_svfiprintf_r+0x1ec>)
 80065a6:	f7f9 fe3b 	bl	8000220 <memchr>
 80065aa:	9a04      	ldr	r2, [sp, #16]
 80065ac:	b9d8      	cbnz	r0, 80065e6 <_svfiprintf_r+0xe6>
 80065ae:	06d0      	lsls	r0, r2, #27
 80065b0:	bf44      	itt	mi
 80065b2:	2320      	movmi	r3, #32
 80065b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065b8:	0711      	lsls	r1, r2, #28
 80065ba:	bf44      	itt	mi
 80065bc:	232b      	movmi	r3, #43	; 0x2b
 80065be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065c2:	f89a 3000 	ldrb.w	r3, [sl]
 80065c6:	2b2a      	cmp	r3, #42	; 0x2a
 80065c8:	d015      	beq.n	80065f6 <_svfiprintf_r+0xf6>
 80065ca:	9a07      	ldr	r2, [sp, #28]
 80065cc:	4654      	mov	r4, sl
 80065ce:	2000      	movs	r0, #0
 80065d0:	f04f 0c0a 	mov.w	ip, #10
 80065d4:	4621      	mov	r1, r4
 80065d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065da:	3b30      	subs	r3, #48	; 0x30
 80065dc:	2b09      	cmp	r3, #9
 80065de:	d94e      	bls.n	800667e <_svfiprintf_r+0x17e>
 80065e0:	b1b0      	cbz	r0, 8006610 <_svfiprintf_r+0x110>
 80065e2:	9207      	str	r2, [sp, #28]
 80065e4:	e014      	b.n	8006610 <_svfiprintf_r+0x110>
 80065e6:	eba0 0308 	sub.w	r3, r0, r8
 80065ea:	fa09 f303 	lsl.w	r3, r9, r3
 80065ee:	4313      	orrs	r3, r2
 80065f0:	9304      	str	r3, [sp, #16]
 80065f2:	46a2      	mov	sl, r4
 80065f4:	e7d2      	b.n	800659c <_svfiprintf_r+0x9c>
 80065f6:	9b03      	ldr	r3, [sp, #12]
 80065f8:	1d19      	adds	r1, r3, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	9103      	str	r1, [sp, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bfbb      	ittet	lt
 8006602:	425b      	neglt	r3, r3
 8006604:	f042 0202 	orrlt.w	r2, r2, #2
 8006608:	9307      	strge	r3, [sp, #28]
 800660a:	9307      	strlt	r3, [sp, #28]
 800660c:	bfb8      	it	lt
 800660e:	9204      	strlt	r2, [sp, #16]
 8006610:	7823      	ldrb	r3, [r4, #0]
 8006612:	2b2e      	cmp	r3, #46	; 0x2e
 8006614:	d10c      	bne.n	8006630 <_svfiprintf_r+0x130>
 8006616:	7863      	ldrb	r3, [r4, #1]
 8006618:	2b2a      	cmp	r3, #42	; 0x2a
 800661a:	d135      	bne.n	8006688 <_svfiprintf_r+0x188>
 800661c:	9b03      	ldr	r3, [sp, #12]
 800661e:	1d1a      	adds	r2, r3, #4
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	9203      	str	r2, [sp, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	bfb8      	it	lt
 8006628:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800662c:	3402      	adds	r4, #2
 800662e:	9305      	str	r3, [sp, #20]
 8006630:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80066fc <_svfiprintf_r+0x1fc>
 8006634:	7821      	ldrb	r1, [r4, #0]
 8006636:	2203      	movs	r2, #3
 8006638:	4650      	mov	r0, sl
 800663a:	f7f9 fdf1 	bl	8000220 <memchr>
 800663e:	b140      	cbz	r0, 8006652 <_svfiprintf_r+0x152>
 8006640:	2340      	movs	r3, #64	; 0x40
 8006642:	eba0 000a 	sub.w	r0, r0, sl
 8006646:	fa03 f000 	lsl.w	r0, r3, r0
 800664a:	9b04      	ldr	r3, [sp, #16]
 800664c:	4303      	orrs	r3, r0
 800664e:	3401      	adds	r4, #1
 8006650:	9304      	str	r3, [sp, #16]
 8006652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006656:	4826      	ldr	r0, [pc, #152]	; (80066f0 <_svfiprintf_r+0x1f0>)
 8006658:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800665c:	2206      	movs	r2, #6
 800665e:	f7f9 fddf 	bl	8000220 <memchr>
 8006662:	2800      	cmp	r0, #0
 8006664:	d038      	beq.n	80066d8 <_svfiprintf_r+0x1d8>
 8006666:	4b23      	ldr	r3, [pc, #140]	; (80066f4 <_svfiprintf_r+0x1f4>)
 8006668:	bb1b      	cbnz	r3, 80066b2 <_svfiprintf_r+0x1b2>
 800666a:	9b03      	ldr	r3, [sp, #12]
 800666c:	3307      	adds	r3, #7
 800666e:	f023 0307 	bic.w	r3, r3, #7
 8006672:	3308      	adds	r3, #8
 8006674:	9303      	str	r3, [sp, #12]
 8006676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006678:	4433      	add	r3, r6
 800667a:	9309      	str	r3, [sp, #36]	; 0x24
 800667c:	e767      	b.n	800654e <_svfiprintf_r+0x4e>
 800667e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006682:	460c      	mov	r4, r1
 8006684:	2001      	movs	r0, #1
 8006686:	e7a5      	b.n	80065d4 <_svfiprintf_r+0xd4>
 8006688:	2300      	movs	r3, #0
 800668a:	3401      	adds	r4, #1
 800668c:	9305      	str	r3, [sp, #20]
 800668e:	4619      	mov	r1, r3
 8006690:	f04f 0c0a 	mov.w	ip, #10
 8006694:	4620      	mov	r0, r4
 8006696:	f810 2b01 	ldrb.w	r2, [r0], #1
 800669a:	3a30      	subs	r2, #48	; 0x30
 800669c:	2a09      	cmp	r2, #9
 800669e:	d903      	bls.n	80066a8 <_svfiprintf_r+0x1a8>
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0c5      	beq.n	8006630 <_svfiprintf_r+0x130>
 80066a4:	9105      	str	r1, [sp, #20]
 80066a6:	e7c3      	b.n	8006630 <_svfiprintf_r+0x130>
 80066a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80066ac:	4604      	mov	r4, r0
 80066ae:	2301      	movs	r3, #1
 80066b0:	e7f0      	b.n	8006694 <_svfiprintf_r+0x194>
 80066b2:	ab03      	add	r3, sp, #12
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	462a      	mov	r2, r5
 80066b8:	4b0f      	ldr	r3, [pc, #60]	; (80066f8 <_svfiprintf_r+0x1f8>)
 80066ba:	a904      	add	r1, sp, #16
 80066bc:	4638      	mov	r0, r7
 80066be:	f3af 8000 	nop.w
 80066c2:	1c42      	adds	r2, r0, #1
 80066c4:	4606      	mov	r6, r0
 80066c6:	d1d6      	bne.n	8006676 <_svfiprintf_r+0x176>
 80066c8:	89ab      	ldrh	r3, [r5, #12]
 80066ca:	065b      	lsls	r3, r3, #25
 80066cc:	f53f af2c 	bmi.w	8006528 <_svfiprintf_r+0x28>
 80066d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066d2:	b01d      	add	sp, #116	; 0x74
 80066d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d8:	ab03      	add	r3, sp, #12
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	462a      	mov	r2, r5
 80066de:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <_svfiprintf_r+0x1f8>)
 80066e0:	a904      	add	r1, sp, #16
 80066e2:	4638      	mov	r0, r7
 80066e4:	f000 f87a 	bl	80067dc <_printf_i>
 80066e8:	e7eb      	b.n	80066c2 <_svfiprintf_r+0x1c2>
 80066ea:	bf00      	nop
 80066ec:	08006bf0 	.word	0x08006bf0
 80066f0:	08006bfa 	.word	0x08006bfa
 80066f4:	00000000 	.word	0x00000000
 80066f8:	08006449 	.word	0x08006449
 80066fc:	08006bf6 	.word	0x08006bf6

08006700 <_printf_common>:
 8006700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006704:	4616      	mov	r6, r2
 8006706:	4699      	mov	r9, r3
 8006708:	688a      	ldr	r2, [r1, #8]
 800670a:	690b      	ldr	r3, [r1, #16]
 800670c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006710:	4293      	cmp	r3, r2
 8006712:	bfb8      	it	lt
 8006714:	4613      	movlt	r3, r2
 8006716:	6033      	str	r3, [r6, #0]
 8006718:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800671c:	4607      	mov	r7, r0
 800671e:	460c      	mov	r4, r1
 8006720:	b10a      	cbz	r2, 8006726 <_printf_common+0x26>
 8006722:	3301      	adds	r3, #1
 8006724:	6033      	str	r3, [r6, #0]
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	0699      	lsls	r1, r3, #26
 800672a:	bf42      	ittt	mi
 800672c:	6833      	ldrmi	r3, [r6, #0]
 800672e:	3302      	addmi	r3, #2
 8006730:	6033      	strmi	r3, [r6, #0]
 8006732:	6825      	ldr	r5, [r4, #0]
 8006734:	f015 0506 	ands.w	r5, r5, #6
 8006738:	d106      	bne.n	8006748 <_printf_common+0x48>
 800673a:	f104 0a19 	add.w	sl, r4, #25
 800673e:	68e3      	ldr	r3, [r4, #12]
 8006740:	6832      	ldr	r2, [r6, #0]
 8006742:	1a9b      	subs	r3, r3, r2
 8006744:	42ab      	cmp	r3, r5
 8006746:	dc26      	bgt.n	8006796 <_printf_common+0x96>
 8006748:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800674c:	1e13      	subs	r3, r2, #0
 800674e:	6822      	ldr	r2, [r4, #0]
 8006750:	bf18      	it	ne
 8006752:	2301      	movne	r3, #1
 8006754:	0692      	lsls	r2, r2, #26
 8006756:	d42b      	bmi.n	80067b0 <_printf_common+0xb0>
 8006758:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800675c:	4649      	mov	r1, r9
 800675e:	4638      	mov	r0, r7
 8006760:	47c0      	blx	r8
 8006762:	3001      	adds	r0, #1
 8006764:	d01e      	beq.n	80067a4 <_printf_common+0xa4>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	68e5      	ldr	r5, [r4, #12]
 800676a:	6832      	ldr	r2, [r6, #0]
 800676c:	f003 0306 	and.w	r3, r3, #6
 8006770:	2b04      	cmp	r3, #4
 8006772:	bf08      	it	eq
 8006774:	1aad      	subeq	r5, r5, r2
 8006776:	68a3      	ldr	r3, [r4, #8]
 8006778:	6922      	ldr	r2, [r4, #16]
 800677a:	bf0c      	ite	eq
 800677c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006780:	2500      	movne	r5, #0
 8006782:	4293      	cmp	r3, r2
 8006784:	bfc4      	itt	gt
 8006786:	1a9b      	subgt	r3, r3, r2
 8006788:	18ed      	addgt	r5, r5, r3
 800678a:	2600      	movs	r6, #0
 800678c:	341a      	adds	r4, #26
 800678e:	42b5      	cmp	r5, r6
 8006790:	d11a      	bne.n	80067c8 <_printf_common+0xc8>
 8006792:	2000      	movs	r0, #0
 8006794:	e008      	b.n	80067a8 <_printf_common+0xa8>
 8006796:	2301      	movs	r3, #1
 8006798:	4652      	mov	r2, sl
 800679a:	4649      	mov	r1, r9
 800679c:	4638      	mov	r0, r7
 800679e:	47c0      	blx	r8
 80067a0:	3001      	adds	r0, #1
 80067a2:	d103      	bne.n	80067ac <_printf_common+0xac>
 80067a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ac:	3501      	adds	r5, #1
 80067ae:	e7c6      	b.n	800673e <_printf_common+0x3e>
 80067b0:	18e1      	adds	r1, r4, r3
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	2030      	movs	r0, #48	; 0x30
 80067b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067ba:	4422      	add	r2, r4
 80067bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067c4:	3302      	adds	r3, #2
 80067c6:	e7c7      	b.n	8006758 <_printf_common+0x58>
 80067c8:	2301      	movs	r3, #1
 80067ca:	4622      	mov	r2, r4
 80067cc:	4649      	mov	r1, r9
 80067ce:	4638      	mov	r0, r7
 80067d0:	47c0      	blx	r8
 80067d2:	3001      	adds	r0, #1
 80067d4:	d0e6      	beq.n	80067a4 <_printf_common+0xa4>
 80067d6:	3601      	adds	r6, #1
 80067d8:	e7d9      	b.n	800678e <_printf_common+0x8e>
	...

080067dc <_printf_i>:
 80067dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067e0:	7e0f      	ldrb	r7, [r1, #24]
 80067e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067e4:	2f78      	cmp	r7, #120	; 0x78
 80067e6:	4691      	mov	r9, r2
 80067e8:	4680      	mov	r8, r0
 80067ea:	460c      	mov	r4, r1
 80067ec:	469a      	mov	sl, r3
 80067ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067f2:	d807      	bhi.n	8006804 <_printf_i+0x28>
 80067f4:	2f62      	cmp	r7, #98	; 0x62
 80067f6:	d80a      	bhi.n	800680e <_printf_i+0x32>
 80067f8:	2f00      	cmp	r7, #0
 80067fa:	f000 80d8 	beq.w	80069ae <_printf_i+0x1d2>
 80067fe:	2f58      	cmp	r7, #88	; 0x58
 8006800:	f000 80a3 	beq.w	800694a <_printf_i+0x16e>
 8006804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006808:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800680c:	e03a      	b.n	8006884 <_printf_i+0xa8>
 800680e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006812:	2b15      	cmp	r3, #21
 8006814:	d8f6      	bhi.n	8006804 <_printf_i+0x28>
 8006816:	a101      	add	r1, pc, #4	; (adr r1, 800681c <_printf_i+0x40>)
 8006818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800681c:	08006875 	.word	0x08006875
 8006820:	08006889 	.word	0x08006889
 8006824:	08006805 	.word	0x08006805
 8006828:	08006805 	.word	0x08006805
 800682c:	08006805 	.word	0x08006805
 8006830:	08006805 	.word	0x08006805
 8006834:	08006889 	.word	0x08006889
 8006838:	08006805 	.word	0x08006805
 800683c:	08006805 	.word	0x08006805
 8006840:	08006805 	.word	0x08006805
 8006844:	08006805 	.word	0x08006805
 8006848:	08006995 	.word	0x08006995
 800684c:	080068b9 	.word	0x080068b9
 8006850:	08006977 	.word	0x08006977
 8006854:	08006805 	.word	0x08006805
 8006858:	08006805 	.word	0x08006805
 800685c:	080069b7 	.word	0x080069b7
 8006860:	08006805 	.word	0x08006805
 8006864:	080068b9 	.word	0x080068b9
 8006868:	08006805 	.word	0x08006805
 800686c:	08006805 	.word	0x08006805
 8006870:	0800697f 	.word	0x0800697f
 8006874:	682b      	ldr	r3, [r5, #0]
 8006876:	1d1a      	adds	r2, r3, #4
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	602a      	str	r2, [r5, #0]
 800687c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006884:	2301      	movs	r3, #1
 8006886:	e0a3      	b.n	80069d0 <_printf_i+0x1f4>
 8006888:	6820      	ldr	r0, [r4, #0]
 800688a:	6829      	ldr	r1, [r5, #0]
 800688c:	0606      	lsls	r6, r0, #24
 800688e:	f101 0304 	add.w	r3, r1, #4
 8006892:	d50a      	bpl.n	80068aa <_printf_i+0xce>
 8006894:	680e      	ldr	r6, [r1, #0]
 8006896:	602b      	str	r3, [r5, #0]
 8006898:	2e00      	cmp	r6, #0
 800689a:	da03      	bge.n	80068a4 <_printf_i+0xc8>
 800689c:	232d      	movs	r3, #45	; 0x2d
 800689e:	4276      	negs	r6, r6
 80068a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068a4:	485e      	ldr	r0, [pc, #376]	; (8006a20 <_printf_i+0x244>)
 80068a6:	230a      	movs	r3, #10
 80068a8:	e019      	b.n	80068de <_printf_i+0x102>
 80068aa:	680e      	ldr	r6, [r1, #0]
 80068ac:	602b      	str	r3, [r5, #0]
 80068ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068b2:	bf18      	it	ne
 80068b4:	b236      	sxthne	r6, r6
 80068b6:	e7ef      	b.n	8006898 <_printf_i+0xbc>
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	6820      	ldr	r0, [r4, #0]
 80068bc:	1d19      	adds	r1, r3, #4
 80068be:	6029      	str	r1, [r5, #0]
 80068c0:	0601      	lsls	r1, r0, #24
 80068c2:	d501      	bpl.n	80068c8 <_printf_i+0xec>
 80068c4:	681e      	ldr	r6, [r3, #0]
 80068c6:	e002      	b.n	80068ce <_printf_i+0xf2>
 80068c8:	0646      	lsls	r6, r0, #25
 80068ca:	d5fb      	bpl.n	80068c4 <_printf_i+0xe8>
 80068cc:	881e      	ldrh	r6, [r3, #0]
 80068ce:	4854      	ldr	r0, [pc, #336]	; (8006a20 <_printf_i+0x244>)
 80068d0:	2f6f      	cmp	r7, #111	; 0x6f
 80068d2:	bf0c      	ite	eq
 80068d4:	2308      	moveq	r3, #8
 80068d6:	230a      	movne	r3, #10
 80068d8:	2100      	movs	r1, #0
 80068da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068de:	6865      	ldr	r5, [r4, #4]
 80068e0:	60a5      	str	r5, [r4, #8]
 80068e2:	2d00      	cmp	r5, #0
 80068e4:	bfa2      	ittt	ge
 80068e6:	6821      	ldrge	r1, [r4, #0]
 80068e8:	f021 0104 	bicge.w	r1, r1, #4
 80068ec:	6021      	strge	r1, [r4, #0]
 80068ee:	b90e      	cbnz	r6, 80068f4 <_printf_i+0x118>
 80068f0:	2d00      	cmp	r5, #0
 80068f2:	d04d      	beq.n	8006990 <_printf_i+0x1b4>
 80068f4:	4615      	mov	r5, r2
 80068f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80068fa:	fb03 6711 	mls	r7, r3, r1, r6
 80068fe:	5dc7      	ldrb	r7, [r0, r7]
 8006900:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006904:	4637      	mov	r7, r6
 8006906:	42bb      	cmp	r3, r7
 8006908:	460e      	mov	r6, r1
 800690a:	d9f4      	bls.n	80068f6 <_printf_i+0x11a>
 800690c:	2b08      	cmp	r3, #8
 800690e:	d10b      	bne.n	8006928 <_printf_i+0x14c>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	07de      	lsls	r6, r3, #31
 8006914:	d508      	bpl.n	8006928 <_printf_i+0x14c>
 8006916:	6923      	ldr	r3, [r4, #16]
 8006918:	6861      	ldr	r1, [r4, #4]
 800691a:	4299      	cmp	r1, r3
 800691c:	bfde      	ittt	le
 800691e:	2330      	movle	r3, #48	; 0x30
 8006920:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006924:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006928:	1b52      	subs	r2, r2, r5
 800692a:	6122      	str	r2, [r4, #16]
 800692c:	f8cd a000 	str.w	sl, [sp]
 8006930:	464b      	mov	r3, r9
 8006932:	aa03      	add	r2, sp, #12
 8006934:	4621      	mov	r1, r4
 8006936:	4640      	mov	r0, r8
 8006938:	f7ff fee2 	bl	8006700 <_printf_common>
 800693c:	3001      	adds	r0, #1
 800693e:	d14c      	bne.n	80069da <_printf_i+0x1fe>
 8006940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006944:	b004      	add	sp, #16
 8006946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694a:	4835      	ldr	r0, [pc, #212]	; (8006a20 <_printf_i+0x244>)
 800694c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006950:	6829      	ldr	r1, [r5, #0]
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	f851 6b04 	ldr.w	r6, [r1], #4
 8006958:	6029      	str	r1, [r5, #0]
 800695a:	061d      	lsls	r5, r3, #24
 800695c:	d514      	bpl.n	8006988 <_printf_i+0x1ac>
 800695e:	07df      	lsls	r7, r3, #31
 8006960:	bf44      	itt	mi
 8006962:	f043 0320 	orrmi.w	r3, r3, #32
 8006966:	6023      	strmi	r3, [r4, #0]
 8006968:	b91e      	cbnz	r6, 8006972 <_printf_i+0x196>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	f023 0320 	bic.w	r3, r3, #32
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	2310      	movs	r3, #16
 8006974:	e7b0      	b.n	80068d8 <_printf_i+0xfc>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	f043 0320 	orr.w	r3, r3, #32
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	2378      	movs	r3, #120	; 0x78
 8006980:	4828      	ldr	r0, [pc, #160]	; (8006a24 <_printf_i+0x248>)
 8006982:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006986:	e7e3      	b.n	8006950 <_printf_i+0x174>
 8006988:	0659      	lsls	r1, r3, #25
 800698a:	bf48      	it	mi
 800698c:	b2b6      	uxthmi	r6, r6
 800698e:	e7e6      	b.n	800695e <_printf_i+0x182>
 8006990:	4615      	mov	r5, r2
 8006992:	e7bb      	b.n	800690c <_printf_i+0x130>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	6826      	ldr	r6, [r4, #0]
 8006998:	6961      	ldr	r1, [r4, #20]
 800699a:	1d18      	adds	r0, r3, #4
 800699c:	6028      	str	r0, [r5, #0]
 800699e:	0635      	lsls	r5, r6, #24
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	d501      	bpl.n	80069a8 <_printf_i+0x1cc>
 80069a4:	6019      	str	r1, [r3, #0]
 80069a6:	e002      	b.n	80069ae <_printf_i+0x1d2>
 80069a8:	0670      	lsls	r0, r6, #25
 80069aa:	d5fb      	bpl.n	80069a4 <_printf_i+0x1c8>
 80069ac:	8019      	strh	r1, [r3, #0]
 80069ae:	2300      	movs	r3, #0
 80069b0:	6123      	str	r3, [r4, #16]
 80069b2:	4615      	mov	r5, r2
 80069b4:	e7ba      	b.n	800692c <_printf_i+0x150>
 80069b6:	682b      	ldr	r3, [r5, #0]
 80069b8:	1d1a      	adds	r2, r3, #4
 80069ba:	602a      	str	r2, [r5, #0]
 80069bc:	681d      	ldr	r5, [r3, #0]
 80069be:	6862      	ldr	r2, [r4, #4]
 80069c0:	2100      	movs	r1, #0
 80069c2:	4628      	mov	r0, r5
 80069c4:	f7f9 fc2c 	bl	8000220 <memchr>
 80069c8:	b108      	cbz	r0, 80069ce <_printf_i+0x1f2>
 80069ca:	1b40      	subs	r0, r0, r5
 80069cc:	6060      	str	r0, [r4, #4]
 80069ce:	6863      	ldr	r3, [r4, #4]
 80069d0:	6123      	str	r3, [r4, #16]
 80069d2:	2300      	movs	r3, #0
 80069d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d8:	e7a8      	b.n	800692c <_printf_i+0x150>
 80069da:	6923      	ldr	r3, [r4, #16]
 80069dc:	462a      	mov	r2, r5
 80069de:	4649      	mov	r1, r9
 80069e0:	4640      	mov	r0, r8
 80069e2:	47d0      	blx	sl
 80069e4:	3001      	adds	r0, #1
 80069e6:	d0ab      	beq.n	8006940 <_printf_i+0x164>
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	079b      	lsls	r3, r3, #30
 80069ec:	d413      	bmi.n	8006a16 <_printf_i+0x23a>
 80069ee:	68e0      	ldr	r0, [r4, #12]
 80069f0:	9b03      	ldr	r3, [sp, #12]
 80069f2:	4298      	cmp	r0, r3
 80069f4:	bfb8      	it	lt
 80069f6:	4618      	movlt	r0, r3
 80069f8:	e7a4      	b.n	8006944 <_printf_i+0x168>
 80069fa:	2301      	movs	r3, #1
 80069fc:	4632      	mov	r2, r6
 80069fe:	4649      	mov	r1, r9
 8006a00:	4640      	mov	r0, r8
 8006a02:	47d0      	blx	sl
 8006a04:	3001      	adds	r0, #1
 8006a06:	d09b      	beq.n	8006940 <_printf_i+0x164>
 8006a08:	3501      	adds	r5, #1
 8006a0a:	68e3      	ldr	r3, [r4, #12]
 8006a0c:	9903      	ldr	r1, [sp, #12]
 8006a0e:	1a5b      	subs	r3, r3, r1
 8006a10:	42ab      	cmp	r3, r5
 8006a12:	dcf2      	bgt.n	80069fa <_printf_i+0x21e>
 8006a14:	e7eb      	b.n	80069ee <_printf_i+0x212>
 8006a16:	2500      	movs	r5, #0
 8006a18:	f104 0619 	add.w	r6, r4, #25
 8006a1c:	e7f5      	b.n	8006a0a <_printf_i+0x22e>
 8006a1e:	bf00      	nop
 8006a20:	08006c01 	.word	0x08006c01
 8006a24:	08006c12 	.word	0x08006c12

08006a28 <_sbrk_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4d06      	ldr	r5, [pc, #24]	; (8006a44 <_sbrk_r+0x1c>)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4604      	mov	r4, r0
 8006a30:	4608      	mov	r0, r1
 8006a32:	602b      	str	r3, [r5, #0]
 8006a34:	f7fa ff30 	bl	8001898 <_sbrk>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d102      	bne.n	8006a42 <_sbrk_r+0x1a>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	b103      	cbz	r3, 8006a42 <_sbrk_r+0x1a>
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	2000133c 	.word	0x2000133c

08006a48 <memmove>:
 8006a48:	4288      	cmp	r0, r1
 8006a4a:	b510      	push	{r4, lr}
 8006a4c:	eb01 0402 	add.w	r4, r1, r2
 8006a50:	d902      	bls.n	8006a58 <memmove+0x10>
 8006a52:	4284      	cmp	r4, r0
 8006a54:	4623      	mov	r3, r4
 8006a56:	d807      	bhi.n	8006a68 <memmove+0x20>
 8006a58:	1e43      	subs	r3, r0, #1
 8006a5a:	42a1      	cmp	r1, r4
 8006a5c:	d008      	beq.n	8006a70 <memmove+0x28>
 8006a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a66:	e7f8      	b.n	8006a5a <memmove+0x12>
 8006a68:	4402      	add	r2, r0
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	428a      	cmp	r2, r1
 8006a6e:	d100      	bne.n	8006a72 <memmove+0x2a>
 8006a70:	bd10      	pop	{r4, pc}
 8006a72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a7a:	e7f7      	b.n	8006a6c <memmove+0x24>

08006a7c <__malloc_lock>:
 8006a7c:	4801      	ldr	r0, [pc, #4]	; (8006a84 <__malloc_lock+0x8>)
 8006a7e:	f000 b884 	b.w	8006b8a <__retarget_lock_acquire_recursive>
 8006a82:	bf00      	nop
 8006a84:	20001340 	.word	0x20001340

08006a88 <__malloc_unlock>:
 8006a88:	4801      	ldr	r0, [pc, #4]	; (8006a90 <__malloc_unlock+0x8>)
 8006a8a:	f000 b87f 	b.w	8006b8c <__retarget_lock_release_recursive>
 8006a8e:	bf00      	nop
 8006a90:	20001340 	.word	0x20001340

08006a94 <_free_r>:
 8006a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a96:	2900      	cmp	r1, #0
 8006a98:	d044      	beq.n	8006b24 <_free_r+0x90>
 8006a9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a9e:	9001      	str	r0, [sp, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f1a1 0404 	sub.w	r4, r1, #4
 8006aa6:	bfb8      	it	lt
 8006aa8:	18e4      	addlt	r4, r4, r3
 8006aaa:	f7ff ffe7 	bl	8006a7c <__malloc_lock>
 8006aae:	4a1e      	ldr	r2, [pc, #120]	; (8006b28 <_free_r+0x94>)
 8006ab0:	9801      	ldr	r0, [sp, #4]
 8006ab2:	6813      	ldr	r3, [r2, #0]
 8006ab4:	b933      	cbnz	r3, 8006ac4 <_free_r+0x30>
 8006ab6:	6063      	str	r3, [r4, #4]
 8006ab8:	6014      	str	r4, [r2, #0]
 8006aba:	b003      	add	sp, #12
 8006abc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ac0:	f7ff bfe2 	b.w	8006a88 <__malloc_unlock>
 8006ac4:	42a3      	cmp	r3, r4
 8006ac6:	d908      	bls.n	8006ada <_free_r+0x46>
 8006ac8:	6825      	ldr	r5, [r4, #0]
 8006aca:	1961      	adds	r1, r4, r5
 8006acc:	428b      	cmp	r3, r1
 8006ace:	bf01      	itttt	eq
 8006ad0:	6819      	ldreq	r1, [r3, #0]
 8006ad2:	685b      	ldreq	r3, [r3, #4]
 8006ad4:	1949      	addeq	r1, r1, r5
 8006ad6:	6021      	streq	r1, [r4, #0]
 8006ad8:	e7ed      	b.n	8006ab6 <_free_r+0x22>
 8006ada:	461a      	mov	r2, r3
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	b10b      	cbz	r3, 8006ae4 <_free_r+0x50>
 8006ae0:	42a3      	cmp	r3, r4
 8006ae2:	d9fa      	bls.n	8006ada <_free_r+0x46>
 8006ae4:	6811      	ldr	r1, [r2, #0]
 8006ae6:	1855      	adds	r5, r2, r1
 8006ae8:	42a5      	cmp	r5, r4
 8006aea:	d10b      	bne.n	8006b04 <_free_r+0x70>
 8006aec:	6824      	ldr	r4, [r4, #0]
 8006aee:	4421      	add	r1, r4
 8006af0:	1854      	adds	r4, r2, r1
 8006af2:	42a3      	cmp	r3, r4
 8006af4:	6011      	str	r1, [r2, #0]
 8006af6:	d1e0      	bne.n	8006aba <_free_r+0x26>
 8006af8:	681c      	ldr	r4, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	6053      	str	r3, [r2, #4]
 8006afe:	4421      	add	r1, r4
 8006b00:	6011      	str	r1, [r2, #0]
 8006b02:	e7da      	b.n	8006aba <_free_r+0x26>
 8006b04:	d902      	bls.n	8006b0c <_free_r+0x78>
 8006b06:	230c      	movs	r3, #12
 8006b08:	6003      	str	r3, [r0, #0]
 8006b0a:	e7d6      	b.n	8006aba <_free_r+0x26>
 8006b0c:	6825      	ldr	r5, [r4, #0]
 8006b0e:	1961      	adds	r1, r4, r5
 8006b10:	428b      	cmp	r3, r1
 8006b12:	bf04      	itt	eq
 8006b14:	6819      	ldreq	r1, [r3, #0]
 8006b16:	685b      	ldreq	r3, [r3, #4]
 8006b18:	6063      	str	r3, [r4, #4]
 8006b1a:	bf04      	itt	eq
 8006b1c:	1949      	addeq	r1, r1, r5
 8006b1e:	6021      	streq	r1, [r4, #0]
 8006b20:	6054      	str	r4, [r2, #4]
 8006b22:	e7ca      	b.n	8006aba <_free_r+0x26>
 8006b24:	b003      	add	sp, #12
 8006b26:	bd30      	pop	{r4, r5, pc}
 8006b28:	20001334 	.word	0x20001334

08006b2c <_realloc_r>:
 8006b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b30:	4680      	mov	r8, r0
 8006b32:	4614      	mov	r4, r2
 8006b34:	460e      	mov	r6, r1
 8006b36:	b921      	cbnz	r1, 8006b42 <_realloc_r+0x16>
 8006b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	f7ff bc0f 	b.w	8006360 <_malloc_r>
 8006b42:	b92a      	cbnz	r2, 8006b50 <_realloc_r+0x24>
 8006b44:	f7ff ffa6 	bl	8006a94 <_free_r>
 8006b48:	4625      	mov	r5, r4
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b50:	f000 f81d 	bl	8006b8e <_malloc_usable_size_r>
 8006b54:	4284      	cmp	r4, r0
 8006b56:	4607      	mov	r7, r0
 8006b58:	d802      	bhi.n	8006b60 <_realloc_r+0x34>
 8006b5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b5e:	d812      	bhi.n	8006b86 <_realloc_r+0x5a>
 8006b60:	4621      	mov	r1, r4
 8006b62:	4640      	mov	r0, r8
 8006b64:	f7ff fbfc 	bl	8006360 <_malloc_r>
 8006b68:	4605      	mov	r5, r0
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d0ed      	beq.n	8006b4a <_realloc_r+0x1e>
 8006b6e:	42bc      	cmp	r4, r7
 8006b70:	4622      	mov	r2, r4
 8006b72:	4631      	mov	r1, r6
 8006b74:	bf28      	it	cs
 8006b76:	463a      	movcs	r2, r7
 8006b78:	f7ff fb2e 	bl	80061d8 <memcpy>
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	4640      	mov	r0, r8
 8006b80:	f7ff ff88 	bl	8006a94 <_free_r>
 8006b84:	e7e1      	b.n	8006b4a <_realloc_r+0x1e>
 8006b86:	4635      	mov	r5, r6
 8006b88:	e7df      	b.n	8006b4a <_realloc_r+0x1e>

08006b8a <__retarget_lock_acquire_recursive>:
 8006b8a:	4770      	bx	lr

08006b8c <__retarget_lock_release_recursive>:
 8006b8c:	4770      	bx	lr

08006b8e <_malloc_usable_size_r>:
 8006b8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b92:	1f18      	subs	r0, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	bfbc      	itt	lt
 8006b98:	580b      	ldrlt	r3, [r1, r0]
 8006b9a:	18c0      	addlt	r0, r0, r3
 8006b9c:	4770      	bx	lr
	...

08006ba0 <_init>:
 8006ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba2:	bf00      	nop
 8006ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba6:	bc08      	pop	{r3}
 8006ba8:	469e      	mov	lr, r3
 8006baa:	4770      	bx	lr

08006bac <_fini>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	bf00      	nop
 8006bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb2:	bc08      	pop	{r3}
 8006bb4:	469e      	mov	lr, r3
 8006bb6:	4770      	bx	lr
