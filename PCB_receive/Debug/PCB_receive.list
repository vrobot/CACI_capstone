
PCB_receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d98  08003d98  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08003d98  08003d98  00013d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003da0  08003da0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000020  08003dc8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003dc8  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bee1  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b66  00000000  00000000  0002bf31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002da98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002e4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ace  00000000  00000000  0002eeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3eb  00000000  00000000  0004f97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6cd1  00000000  00000000  0005bd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122a3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a68  00000000  00000000  00122a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000020 	.word	0x20000020
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003d68 	.word	0x08003d68

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000024 	.word	0x20000024
 8000204:	08003d68 	.word	0x08003d68

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 800051c:	78fb      	ldrb	r3, [r7, #3]
 800051e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000522:	b2db      	uxtb	r3, r3
 8000524:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6858      	ldr	r0, [r3, #4]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	8adb      	ldrh	r3, [r3, #22]
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	f001 fa33 	bl	800199c <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6818      	ldr	r0, [r3, #0]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	1cf9      	adds	r1, r7, #3
 8000540:	2201      	movs	r2, #1
 8000542:	f002 f830 	bl	80025a6 <HAL_SPI_Transmit>
 8000546:	4603      	mov	r3, r0
 8000548:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6818      	ldr	r0, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	f107 010f 	add.w	r1, r7, #15
 8000556:	2201      	movs	r2, #1
 8000558:	f002 f961 	bl	800281e <HAL_SPI_Receive>
 800055c:	4603      	mov	r3, r0
 800055e:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	6858      	ldr	r0, [r3, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	8adb      	ldrh	r3, [r3, #22]
 8000568:	2201      	movs	r2, #1
 800056a:	4619      	mov	r1, r3
 800056c:	f001 fa16 	bl	800199c <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000570:	7bfb      	ldrb	r3, [r7, #15]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	b084      	sub	sp, #16
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	460b      	mov	r3, r1
 8000584:	70fb      	strb	r3, [r7, #3]
 8000586:	4613      	mov	r3, r2
 8000588:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800058a:	78fb      	ldrb	r3, [r7, #3]
 800058c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000590:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000592:	78bb      	ldrb	r3, [r7, #2]
 8000594:	021b      	lsls	r3, r3, #8
 8000596:	b21a      	sxth	r2, r3
 8000598:	78fb      	ldrb	r3, [r7, #3]
 800059a:	b21b      	sxth	r3, r3
 800059c:	4313      	orrs	r3, r2
 800059e:	b21b      	sxth	r3, r3
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6858      	ldr	r0, [r3, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	8adb      	ldrh	r3, [r3, #22]
 80005ac:	2200      	movs	r2, #0
 80005ae:	4619      	mov	r1, r3
 80005b0:	f001 f9f4 	bl	800199c <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6818      	ldr	r0, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	f107 010a 	add.w	r1, r7, #10
 80005c0:	2202      	movs	r2, #2
 80005c2:	f001 fff0 	bl	80025a6 <HAL_SPI_Transmit>
 80005c6:	4603      	mov	r3, r0
 80005c8:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6858      	ldr	r0, [r3, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	8adb      	ldrh	r3, [r3, #22]
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	f001 f9e1 	bl	800199c <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <read_fifo>:
  }
}

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b088      	sub	sp, #32
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	4611      	mov	r1, r2
 80005ee:	461a      	mov	r2, r3
 80005f0:	460b      	mov	r3, r1
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 80005f8:	2300      	movs	r3, #0
 80005fa:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	6858      	ldr	r0, [r3, #4]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	8adb      	ldrh	r3, [r3, #22]
 8000604:	2200      	movs	r2, #0
 8000606:	4619      	mov	r1, r3
 8000608:	f001 f9c8 	bl	800199c <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	6818      	ldr	r0, [r3, #0]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	f107 0117 	add.w	r1, r7, #23
 8000618:	2201      	movs	r2, #1
 800061a:	f001 ffc4 	bl	80025a6 <HAL_SPI_Transmit>
 800061e:	4603      	mov	r3, r0
 8000620:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 8000622:	79bb      	ldrb	r3, [r7, #6]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d10a      	bne.n	800063e <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	79fa      	ldrb	r2, [r7, #7]
 800062e:	b292      	uxth	r2, r2
 8000630:	68b9      	ldr	r1, [r7, #8]
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fba6 	bl	8002d84 <HAL_SPI_Receive_DMA>
 8000638:	4603      	mov	r3, r0
 800063a:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 800063c:	e012      	b.n	8000664 <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	b29a      	uxth	r2, r3
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	68b9      	ldr	r1, [r7, #8]
 800064c:	f002 f8e7 	bl	800281e <HAL_SPI_Receive>
 8000650:	4603      	mov	r3, r0
 8000652:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	6858      	ldr	r0, [r3, #4]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	8adb      	ldrh	r3, [r3, #22]
 800065c:	2201      	movs	r2, #1
 800065e:	4619      	mov	r1, r3
 8000660:	f001 f99c 	bl	800199c <HAL_GPIO_WritePin>
}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8000678:	78fb      	ldrb	r3, [r7, #3]
 800067a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800067e:	b2db      	uxtb	r3, r3
 8000680:	461a      	mov	r2, r3
 8000682:	2101      	movs	r1, #1
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f7ff ff78 	bl	800057a <write_register>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 80006a0:	78fb      	ldrb	r3, [r7, #3]
 80006a2:	2b2c      	cmp	r3, #44	; 0x2c
 80006a4:	d801      	bhi.n	80006aa <set_OCP+0x16>
    imax = 45;
 80006a6:	232d      	movs	r3, #45	; 0x2d
 80006a8:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 80006aa:	78fb      	ldrb	r3, [r7, #3]
 80006ac:	2bf0      	cmp	r3, #240	; 0xf0
 80006ae:	d901      	bls.n	80006b4 <set_OCP+0x20>
    imax = 240;
 80006b0:	23f0      	movs	r3, #240	; 0xf0
 80006b2:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	2b81      	cmp	r3, #129	; 0x81
 80006b8:	d809      	bhi.n	80006ce <set_OCP+0x3a>
    value = (imax - 45) / 5;
 80006ba:	78fb      	ldrb	r3, [r7, #3]
 80006bc:	3b2d      	subs	r3, #45	; 0x2d
 80006be:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <set_OCP+0x68>)
 80006c0:	fb82 1203 	smull	r1, r2, r2, r3
 80006c4:	1052      	asrs	r2, r2, #1
 80006c6:	17db      	asrs	r3, r3, #31
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	73fb      	strb	r3, [r7, #15]
 80006cc:	e008      	b.n	80006e0 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	331e      	adds	r3, #30
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <set_OCP+0x68>)
 80006d4:	fb82 1203 	smull	r1, r2, r2, r3
 80006d8:	1092      	asrs	r2, r2, #2
 80006da:	17db      	asrs	r3, r3, #31
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	f043 0320 	orr.w	r3, r3, #32
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	210b      	movs	r1, #11
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f7ff ff44 	bl	800057a <write_register>
}
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	66666667 	.word	0x66666667

08000700 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8000700:	b5b0      	push	{r4, r5, r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8000708:	211d      	movs	r1, #29
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff fefe 	bl	800050c <read_register>
 8000710:	4603      	mov	r3, r0
 8000712:	091b      	lsrs	r3, r3, #4
 8000714:	b2db      	uxtb	r3, r3
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2200      	movs	r2, #0
 800071a:	461c      	mov	r4, r3
 800071c:	4615      	mov	r5, r2
 800071e:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8000722:	211e      	movs	r1, #30
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff fef1 	bl	800050c <read_register>
 800072a:	4603      	mov	r3, r0
 800072c:	091b      	lsrs	r3, r3, #4
 800072e:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8000730:	2304      	movs	r3, #4
 8000732:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2b0a      	cmp	r3, #10
 8000738:	d908      	bls.n	800074c <set_low_data_rate_optimization+0x4c>
 800073a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800073e:	1fd1      	subs	r1, r2, #7
 8000740:	430b      	orrs	r3, r1
 8000742:	d103      	bne.n	800074c <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8000744:	7ffb      	ldrb	r3, [r7, #31]
 8000746:	f043 0308 	orr.w	r3, r3, #8
 800074a:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 800074c:	7ffb      	ldrb	r3, [r7, #31]
 800074e:	461a      	mov	r2, r3
 8000750:	2126      	movs	r1, #38	; 0x26
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f7ff ff11 	bl	800057a <write_register>
}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bdb0      	pop	{r4, r5, r7, pc}

08000760 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8000768:	2100      	movs	r1, #0
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff ff7e 	bl	800066c <set_mode>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <lora_mode_receive_continuous>:

void lora_mode_receive_continuous(lora_sx1276 *lora)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7d5b      	ldrb	r3, [r3, #21]
 8000784:	461a      	mov	r2, r3
 8000786:	210f      	movs	r1, #15
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff fef6 	bl	800057a <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 800078e:	22f0      	movs	r2, #240	; 0xf0
 8000790:	2112      	movs	r1, #18
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff fef1 	bl	800057a <write_register>

  set_mode(lora, OPMODE_RX_CONTINUOUS);
 8000798:	2105      	movs	r1, #5
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff ff66 	bl	800066c <set_mode>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 80007b0:	2101      	movs	r1, #1
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff ff5a 	bl	800066c <set_mode>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80007c8:	211d      	movs	r1, #29
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff fe9e 	bl	800050c <read_register>
 80007d0:	4603      	mov	r3, r0
 80007d2:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	f023 0301 	bic.w	r3, r3, #1
 80007da:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	461a      	mov	r2, r3
 80007e0:	211d      	movs	r1, #29
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff fec9 	bl	800057a <write_register>
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	691b      	ldr	r3, [r3, #16]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d10e      	bne.n	8000822 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	2b0f      	cmp	r3, #15
 8000808:	d901      	bls.n	800080e <lora_set_tx_power+0x1e>
      level = 15;
 800080a:	230f      	movs	r3, #15
 800080c:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 800080e:	78fb      	ldrb	r3, [r7, #3]
 8000810:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000814:	b2db      	uxtb	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	2109      	movs	r1, #9
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff fead 	bl	800057a <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8000820:	e02e      	b.n	8000880 <lora_set_tx_power+0x90>
    if (level > 20) {
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	2b14      	cmp	r3, #20
 8000826:	d901      	bls.n	800082c <lora_set_tx_power+0x3c>
      level = 20;
 8000828:	2314      	movs	r3, #20
 800082a:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d801      	bhi.n	8000836 <lora_set_tx_power+0x46>
      level = 2;
 8000832:	2302      	movs	r3, #2
 8000834:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	2b11      	cmp	r3, #17
 800083a:	d90c      	bls.n	8000856 <lora_set_tx_power+0x66>
      level -= 3;
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	3b03      	subs	r3, #3
 8000840:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8000842:	2287      	movs	r2, #135	; 0x87
 8000844:	214d      	movs	r1, #77	; 0x4d
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff fe97 	bl	800057a <write_register>
      set_OCP(lora, 140);
 800084c:	218c      	movs	r1, #140	; 0x8c
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff ff20 	bl	8000694 <set_OCP>
 8000854:	e008      	b.n	8000868 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8000856:	2284      	movs	r2, #132	; 0x84
 8000858:	214d      	movs	r1, #77	; 0x4d
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff fe8d 	bl	800057a <write_register>
      set_OCP(lora, 97);
 8000860:	2161      	movs	r1, #97	; 0x61
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ff16 	bl	8000694 <set_OCP>
    level -= 2;
 8000868:	78fb      	ldrb	r3, [r7, #3]
 800086a:	3b02      	subs	r3, #2
 800086c:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 800086e:	78fb      	ldrb	r3, [r7, #3]
 8000870:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000874:	b2db      	uxtb	r3, r3
 8000876:	461a      	mov	r2, r3
 8000878:	2109      	movs	r1, #9
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff fe7d 	bl	800057a <write_register>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8000894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	f04f 0100 	mov.w	r1, #0
 80008a0:	04d9      	lsls	r1, r3, #19
 80008a2:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80008a6:	04d0      	lsls	r0, r2, #19
 80008a8:	4a19      	ldr	r2, [pc, #100]	; (8000910 <lora_set_frequency+0x88>)
 80008aa:	f04f 0300 	mov.w	r3, #0
 80008ae:	f7ff fcab 	bl	8000208 <__aeabi_uldivmod>
 80008b2:	4602      	mov	r2, r0
 80008b4:	460b      	mov	r3, r1
 80008b6:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80008ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80008be:	f04f 0200 	mov.w	r2, #0
 80008c2:	f04f 0300 	mov.w	r3, #0
 80008c6:	0c02      	lsrs	r2, r0, #16
 80008c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008cc:	0c0b      	lsrs	r3, r1, #16
 80008ce:	b2d3      	uxtb	r3, r2
 80008d0:	461a      	mov	r2, r3
 80008d2:	2106      	movs	r1, #6
 80008d4:	68f8      	ldr	r0, [r7, #12]
 80008d6:	f7ff fe50 	bl	800057a <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80008da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80008de:	f04f 0200 	mov.w	r2, #0
 80008e2:	f04f 0300 	mov.w	r3, #0
 80008e6:	0a02      	lsrs	r2, r0, #8
 80008e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80008ec:	0a0b      	lsrs	r3, r1, #8
 80008ee:	b2d3      	uxtb	r3, r2
 80008f0:	461a      	mov	r2, r3
 80008f2:	2107      	movs	r1, #7
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff fe40 	bl	800057a <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80008fa:	7c3b      	ldrb	r3, [r7, #16]
 80008fc:	461a      	mov	r2, r3
 80008fe:	2108      	movs	r1, #8
 8000900:	68f8      	ldr	r0, [r7, #12]
 8000902:	f7ff fe3a 	bl	800057a <write_register>
}
 8000906:	bf00      	nop
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	01e84800 	.word	0x01e84800

08000914 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	2b05      	cmp	r3, #5
 8000924:	d802      	bhi.n	800092c <lora_set_spreading_factor+0x18>
    sf = 6;
 8000926:	2306      	movs	r3, #6
 8000928:	70fb      	strb	r3, [r7, #3]
 800092a:	e004      	b.n	8000936 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 800092c:	78fb      	ldrb	r3, [r7, #3]
 800092e:	2b0c      	cmp	r3, #12
 8000930:	d901      	bls.n	8000936 <lora_set_spreading_factor+0x22>
    sf = 12;
 8000932:	230c      	movs	r3, #12
 8000934:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	2b06      	cmp	r3, #6
 800093a:	d10a      	bne.n	8000952 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 800093c:	22c5      	movs	r2, #197	; 0xc5
 800093e:	2131      	movs	r1, #49	; 0x31
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fe1a 	bl	800057a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8000946:	220c      	movs	r2, #12
 8000948:	2137      	movs	r1, #55	; 0x37
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff fe15 	bl	800057a <write_register>
 8000950:	e009      	b.n	8000966 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8000952:	22c3      	movs	r2, #195	; 0xc3
 8000954:	2131      	movs	r1, #49	; 0x31
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff fe0f 	bl	800057a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 800095c:	220a      	movs	r2, #10
 800095e:	2137      	movs	r1, #55	; 0x37
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff fe0a 	bl	800057a <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8000966:	211e      	movs	r1, #30
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff fdcf 	bl	800050c <read_register>
 800096e:	4603      	mov	r3, r0
 8000970:	73fb      	strb	r3, [r7, #15]
  mc2 |= sf << 4;
 8000972:	78fb      	ldrb	r3, [r7, #3]
 8000974:	011b      	lsls	r3, r3, #4
 8000976:	b25a      	sxtb	r2, r3
 8000978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800097c:	4313      	orrs	r3, r2
 800097e:	b25b      	sxtb	r3, r3
 8000980:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	461a      	mov	r2, r3
 8000986:	211e      	movs	r1, #30
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff fdf6 	bl	800057a <write_register>

  set_low_data_rate_optimization(lora);
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff feb6 	bl	8000700 <set_low_data_rate_optimization>
}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 80009a8:	887b      	ldrh	r3, [r7, #2]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	461a      	mov	r2, r3
 80009b2:	2120      	movs	r1, #32
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff fde0 	bl	800057a <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80009ba:	887b      	ldrh	r3, [r7, #2]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	461a      	mov	r2, r3
 80009c6:	2121      	movs	r1, #33	; 0x21
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fdd6 	bl	800057a <write_register>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 80009de:	2142      	movs	r1, #66	; 0x42
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff fd93 	bl	800050c <read_register>
 80009e6:	4603      	mov	r3, r0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 80009f8:	2112      	movs	r1, #18
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff fd86 	bl	800050c <read_register>
 8000a00:	4603      	mov	r3, r0
 8000a02:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a0a:	b2db      	uxtb	r3, r3
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 8000a1c:	211d      	movs	r1, #29
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fd74 	bl	800050c <read_register>
 8000a24:	4603      	mov	r3, r0
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 8000a2c:	7bbb      	ldrb	r3, [r7, #14]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d006      	beq.n	8000a40 <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 8000a32:	2122      	movs	r1, #34	; 0x22
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff fd69 	bl	800050c <read_register>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	73fb      	strb	r3, [r7, #15]
 8000a3e:	e005      	b.n	8000a4c <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 8000a40:	2113      	movs	r1, #19
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fd62 	bl	800050c <read_register>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	4613      	mov	r3, r2
 8000a64:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 8000a66:	2306      	movs	r3, #6
 8000a68:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 8000a6e:	2112      	movs	r1, #18
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff fd4b 	bl	800050c <read_register>
 8000a76:	4603      	mov	r3, r0
 8000a78:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8000a7a:	22f0      	movs	r2, #240	; 0xf0
 8000a7c:	2112      	movs	r1, #18
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f7ff fd7b 	bl	800057a <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 8000a84:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	da02      	bge.n	8000a92 <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	75fb      	strb	r3, [r7, #23]
    goto done;
 8000a90:	e030      	b.n	8000af4 <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 8000a92:	7d7b      	ldrb	r3, [r7, #21]
 8000a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d02a      	beq.n	8000af2 <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 8000a9c:	7d7b      	ldrb	r3, [r7, #21]
 8000a9e:	f003 0310 	and.w	r3, r3, #16
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d102      	bne.n	8000aac <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	75fb      	strb	r3, [r7, #23]
      goto done;
 8000aaa:	e023      	b.n	8000af4 <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 8000aac:	7d7b      	ldrb	r3, [r7, #21]
 8000aae:	f003 0320 	and.w	r3, r3, #32
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	75fb      	strb	r3, [r7, #23]
      goto done;
 8000aba:	e01b      	b.n	8000af4 <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	f7ff ffa9 	bl	8000a14 <lora_pending_packet_length>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f7ff fd1f 	bl	800050c <read_register>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 8000ad2:	7d3b      	ldrb	r3, [r7, #20]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	210d      	movs	r1, #13
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff fd4e 	bl	800057a <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 8000ade:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ae2:	7dba      	ldrb	r2, [r7, #22]
 8000ae4:	68b9      	ldr	r1, [r7, #8]
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f7ff fd7b 	bl	80005e2 <read_fifo>
    res = LORA_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	75fb      	strb	r3, [r7, #23]
 8000af0:	e000      	b.n	8000af4 <lora_receive_packet_base+0x9e>
  }

done:
 8000af2:	bf00      	nop
  if (error) {
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d002      	beq.n	8000b00 <lora_receive_packet_base+0xaa>
    *error = res;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	7dfa      	ldrb	r2, [r7, #23]
 8000afe:	701a      	strb	r2, [r3, #0]
  }

  return len;
 8000b00:	7dbb      	ldrb	r3, [r7, #22]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af02      	add	r7, sp, #8
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4613      	mov	r3, r2
 8000b18:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 8000b1a:	79fa      	ldrb	r2, [r7, #7]
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	68b9      	ldr	r1, [r7, #8]
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f7ff ff96 	bl	8000a56 <lora_receive_packet_base>
 8000b2a:	4603      	mov	r3, r0
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	4613      	mov	r3, r2
 8000b42:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 8000b48:	e00b      	b.n	8000b62 <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	f7ff ff50 	bl	80009f0 <lora_is_packet_available>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10a      	bne.n	8000b6c <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 8000b56:	2001      	movs	r0, #1
 8000b58:	f000 fbfc 	bl	8001354 <HAL_Delay>
    elapsed++;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 8000b62:	697a      	ldr	r2, [r7, #20]
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d3ef      	bcc.n	8000b4a <lora_receive_packet_blocking+0x16>
 8000b6a:	e000      	b.n	8000b6e <lora_receive_packet_blocking+0x3a>
      break;
 8000b6c:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 8000b6e:	79fa      	ldrb	r2, [r7, #7]
 8000b70:	6a3b      	ldr	r3, [r7, #32]
 8000b72:	68b9      	ldr	r1, [r7, #8]
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f7ff ffc8 	bl	8000b0a <lora_receive_packet>
 8000b7a:	4603      	mov	r3, r0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	68ba      	ldr	r2, [r7, #8]
 8000b96:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	887a      	ldrh	r2, [r7, #2]
 8000ba2:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000ba4:	6a3a      	ldr	r2, [r7, #32]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2201      	movs	r2, #1
 8000bae:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bc2:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f7ff ff06 	bl	80009d6 <lora_version>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8000bce:	7dfb      	ldrb	r3, [r7, #23]
 8000bd0:	2b12      	cmp	r3, #18
 8000bd2:	d001      	beq.n	8000bd8 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	e031      	b.n	8000c3c <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f7ff fdc1 	bl	8000760 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	f7ff fdbe 	bl	8000760 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000be4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f7ff fe4d 	bl	8000888 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000bee:	2107      	movs	r1, #7
 8000bf0:	68f8      	ldr	r0, [r7, #12]
 8000bf2:	f7ff fe8f 	bl	8000914 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000bf6:	210a      	movs	r1, #10
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f7ff fecf 	bl	800099c <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f7ff fdde 	bl	80007c0 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000c04:	210c      	movs	r1, #12
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	f7ff fc80 	bl	800050c <read_register>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000c10:	7dbb      	ldrb	r3, [r7, #22]
 8000c12:	f043 0303 	orr.w	r3, r3, #3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	461a      	mov	r2, r3
 8000c1a:	210c      	movs	r1, #12
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	f7ff fcac 	bl	800057a <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000c22:	2204      	movs	r2, #4
 8000c24:	2126      	movs	r1, #38	; 0x26
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f7ff fca7 	bl	800057a <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000c2c:	2111      	movs	r1, #17
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f7ff fdde 	bl	80007f0 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f7ff fdb7 	bl	80007a8 <lora_mode_standby>

  return LORA_OK;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	0000      	movs	r0, r0
	...

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0ca      	sub	sp, #296	; 0x128
 8000c4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4e:	f000 fb0f 	bl	8001270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c52:	f000 f85f 	bl	8000d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c56:	f000 f92b 	bl	8000eb0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c5a:	f000 f8c9 	bl	8000df0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c5e:	f000 f8fd 	bl	8000e5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c68:	4825      	ldr	r0, [pc, #148]	; (8000d00 <main+0xb8>)
 8000c6a:	f000 fe97 	bl	800199c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000c6e:	2064      	movs	r0, #100	; 0x64
 8000c70:	f000 fb70 	bl	8001354 <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c7a:	4821      	ldr	r0, [pc, #132]	; (8000d00 <main+0xb8>)
 8000c7c:	f000 fe8e 	bl	800199c <HAL_GPIO_WritePin>
  lora_sx1276 lora;

  uint8_t res = lora_init(&lora, &hspi1, NSS_GPIO_Port, NSS_Pin, LORA_BASE_FREQUENCY_US);
 8000c80:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8000c84:	a31c      	add	r3, pc, #112	; (adr r3, 8000cf8 <main+0xb0>)
 8000c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8a:	e9cd 2300 	strd	r2, r3, [sp]
 8000c8e:	2310      	movs	r3, #16
 8000c90:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <main+0xbc>)
 8000c92:	491d      	ldr	r1, [pc, #116]	; (8000d08 <main+0xc0>)
 8000c94:	f7ff ff76 	bl	8000b84 <lora_init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
  if (res != LORA_OK) {
 8000c9e:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d006      	beq.n	8000cb4 <main+0x6c>
	  HAL_UART_Transmit(&huart1, iterfacing_failed, sizeof(iterfacing_failed), 1000);
 8000ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000caa:	2213      	movs	r2, #19
 8000cac:	4917      	ldr	r1, [pc, #92]	; (8000d0c <main+0xc4>)
 8000cae:	4818      	ldr	r0, [pc, #96]	; (8000d10 <main+0xc8>)
 8000cb0:	f002 fcb9 	bl	8003626 <HAL_UART_Transmit>
  }
  // Receive buffer
  uint8_t buffer[255];
  // Put LoRa modem into continuous receive mode
  lora_mode_receive_continuous(&lora);
 8000cb4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fd5d 	bl	8000778 <lora_mode_receive_continuous>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t len = lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 4000, &res);
 8000cbe:	1d39      	adds	r1, r7, #4
 8000cc0:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8000cc4:	f207 1303 	addw	r3, r7, #259	; 0x103
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000cce:	22ff      	movs	r2, #255	; 0xff
 8000cd0:	f7ff ff30 	bl	8000b34 <lora_receive_packet_blocking>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  if (res == LORA_OK) {
 8000cda:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1ed      	bne.n	8000cbe <main+0x76>
		  HAL_UART_Transmit(&huart1, buffer, len, 1000);
 8000ce2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	1d39      	adds	r1, r7, #4
 8000cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cee:	4808      	ldr	r0, [pc, #32]	; (8000d10 <main+0xc8>)
 8000cf0:	f002 fc99 	bl	8003626 <HAL_UART_Transmit>
  {
 8000cf4:	e7e3      	b.n	8000cbe <main+0x76>
 8000cf6:	bf00      	nop
 8000cf8:	3689cac0 	.word	0x3689cac0
 8000cfc:	00000000 	.word	0x00000000
 8000d00:	40020c00 	.word	0x40020c00
 8000d04:	40020000 	.word	0x40020000
 8000d08:	2000003c 	.word	0x2000003c
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000094 	.word	0x20000094

08000d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b094      	sub	sp, #80	; 0x50
 8000d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	2234      	movs	r2, #52	; 0x34
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 f818 	bl	8003d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <SystemClock_Config+0xd4>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	4a29      	ldr	r2, [pc, #164]	; (8000de8 <SystemClock_Config+0xd4>)
 8000d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d46:	6413      	str	r3, [r2, #64]	; 0x40
 8000d48:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <SystemClock_Config+0xd4>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d54:	2300      	movs	r3, #0
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <SystemClock_Config+0xd8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d60:	4a22      	ldr	r2, [pc, #136]	; (8000dec <SystemClock_Config+0xd8>)
 8000d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	4b20      	ldr	r3, [pc, #128]	; (8000dec <SystemClock_Config+0xd8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d7c:	2310      	movs	r3, #16
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d80:	2302      	movs	r3, #2
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d84:	2300      	movs	r3, #0
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d88:	2310      	movs	r3, #16
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d8c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d92:	2304      	movs	r3, #4
 8000d94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 f8d8 	bl	8001f58 <HAL_RCC_OscConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000dae:	f000 f93b 	bl	8001028 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db2:	230f      	movs	r3, #15
 8000db4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db6:	2302      	movs	r3, #2
 8000db8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	2102      	movs	r1, #2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 fdfe 	bl	80019d0 <HAL_RCC_ClockConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000dda:	f000 f925 	bl	8001028 <Error_Handler>
  }
}
 8000dde:	bf00      	nop
 8000de0:	3750      	adds	r7, #80	; 0x50
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40007000 	.word	0x40007000

08000df0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000df6:	4a18      	ldr	r2, [pc, #96]	; (8000e58 <MX_SPI1_Init+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000dfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e24:	2238      	movs	r2, #56	; 0x38
 8000e26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e3c:	220a      	movs	r2, #10
 8000e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e42:	f001 fb27 	bl	8002494 <HAL_SPI_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e4c:	f000 f8ec 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000003c 	.word	0x2000003c
 8000e58:	40013000 	.word	0x40013000

08000e5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <MX_USART1_UART_Init+0x50>)
 8000e64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e82:	220c      	movs	r2, #12
 8000e84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e94:	f002 fb7a 	bl	800358c <HAL_UART_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e9e:	f000 f8c3 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000094 	.word	0x20000094
 8000eac:	40011000 	.word	0x40011000

08000eb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	4b52      	ldr	r3, [pc, #328]	; (8001014 <MX_GPIO_Init+0x164>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a51      	ldr	r2, [pc, #324]	; (8001014 <MX_GPIO_Init+0x164>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b4f      	ldr	r3, [pc, #316]	; (8001014 <MX_GPIO_Init+0x164>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	61bb      	str	r3, [r7, #24]
 8000ee0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	4b4b      	ldr	r3, [pc, #300]	; (8001014 <MX_GPIO_Init+0x164>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a4a      	ldr	r2, [pc, #296]	; (8001014 <MX_GPIO_Init+0x164>)
 8000eec:	f043 0320 	orr.w	r3, r3, #32
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b48      	ldr	r3, [pc, #288]	; (8001014 <MX_GPIO_Init+0x164>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0320 	and.w	r3, r3, #32
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b44      	ldr	r3, [pc, #272]	; (8001014 <MX_GPIO_Init+0x164>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a43      	ldr	r2, [pc, #268]	; (8001014 <MX_GPIO_Init+0x164>)
 8000f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b41      	ldr	r3, [pc, #260]	; (8001014 <MX_GPIO_Init+0x164>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b3d      	ldr	r3, [pc, #244]	; (8001014 <MX_GPIO_Init+0x164>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a3c      	ldr	r2, [pc, #240]	; (8001014 <MX_GPIO_Init+0x164>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b3a      	ldr	r3, [pc, #232]	; (8001014 <MX_GPIO_Init+0x164>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b36      	ldr	r3, [pc, #216]	; (8001014 <MX_GPIO_Init+0x164>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a35      	ldr	r2, [pc, #212]	; (8001014 <MX_GPIO_Init+0x164>)
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b33      	ldr	r3, [pc, #204]	; (8001014 <MX_GPIO_Init+0x164>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <MX_GPIO_Init+0x164>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a2e      	ldr	r2, [pc, #184]	; (8001014 <MX_GPIO_Init+0x164>)
 8000f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <MX_GPIO_Init+0x164>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2138      	movs	r1, #56	; 0x38
 8000f72:	4829      	ldr	r0, [pc, #164]	; (8001018 <MX_GPIO_Init+0x168>)
 8000f74:	f000 fd12 	bl	800199c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	4827      	ldr	r0, [pc, #156]	; (800101c <MX_GPIO_Init+0x16c>)
 8000f7e:	f000 fd0d 	bl	800199c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f88:	4825      	ldr	r0, [pc, #148]	; (8001020 <MX_GPIO_Init+0x170>)
 8000f8a:	f000 fd07 	bl	800199c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2120      	movs	r1, #32
 8000f92:	4824      	ldr	r0, [pc, #144]	; (8001024 <MX_GPIO_Init+0x174>)
 8000f94:	f000 fd02 	bl	800199c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF3 PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f98:	2338      	movs	r3, #56	; 0x38
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	481a      	ldr	r0, [pc, #104]	; (8001018 <MX_GPIO_Init+0x168>)
 8000fb0:	f000 fb60 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4814      	ldr	r0, [pc, #80]	; (800101c <MX_GPIO_Init+0x16c>)
 8000fcc:	f000 fb52 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <MX_GPIO_Init+0x170>)
 8000fea:	f000 fb43 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fee:	2320      	movs	r3, #32
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4807      	ldr	r0, [pc, #28]	; (8001024 <MX_GPIO_Init+0x174>)
 8001006:	f000 fb35 	bl	8001674 <HAL_GPIO_Init>

}
 800100a:	bf00      	nop
 800100c:	3730      	adds	r7, #48	; 0x30
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40021400 	.word	0x40021400
 800101c:	40020000 	.word	0x40020000
 8001020:	40020c00 	.word	0x40020c00
 8001024:	40021800 	.word	0x40021800

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_MspInit+0x4c>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <HAL_MspInit+0x4c>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_MspInit+0x4c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_MspInit+0x4c>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_MspInit+0x4c>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_MspInit+0x4c>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a19      	ldr	r2, [pc, #100]	; (8001108 <HAL_SPI_MspInit+0x84>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d12b      	bne.n	80010fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <HAL_SPI_MspInit+0x88>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a17      	ldr	r2, [pc, #92]	; (800110c <HAL_SPI_MspInit+0x88>)
 80010b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <HAL_SPI_MspInit+0x88>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_SPI_MspInit+0x88>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <HAL_SPI_MspInit+0x88>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_SPI_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010de:	23e0      	movs	r3, #224	; 0xe0
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ee:	2305      	movs	r3, #5
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <HAL_SPI_MspInit+0x8c>)
 80010fa:	f000 fabb 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	; 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40013000 	.word	0x40013000
 800110c:	40023800 	.word	0x40023800
 8001110:	40020000 	.word	0x40020000

08001114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a19      	ldr	r2, [pc, #100]	; (8001198 <HAL_UART_MspInit+0x84>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d12c      	bne.n	8001190 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_UART_MspInit+0x88>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a17      	ldr	r2, [pc, #92]	; (800119c <HAL_UART_MspInit+0x88>)
 8001140:	f043 0310 	orr.w	r3, r3, #16
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_UART_MspInit+0x88>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_UART_MspInit+0x88>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a10      	ldr	r2, [pc, #64]	; (800119c <HAL_UART_MspInit+0x88>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_UART_MspInit+0x88>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800116e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001180:	2307      	movs	r3, #7
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_UART_MspInit+0x8c>)
 800118c:	f000 fa72 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	3728      	adds	r7, #40	; 0x28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40011000 	.word	0x40011000
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <NMI_Handler+0x4>

080011aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <MemManage_Handler+0x4>

080011b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f0:	f000 f890 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <SystemInit+0x20>)
 80011fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <SystemInit+0x20>)
 8001204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800121c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001254 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001222:	490e      	ldr	r1, [pc, #56]	; (800125c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001224:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001228:	e002      	b.n	8001230 <LoopCopyDataInit>

0800122a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800122c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122e:	3304      	adds	r3, #4

08001230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001234:	d3f9      	bcc.n	800122a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001238:	4c0b      	ldr	r4, [pc, #44]	; (8001268 <LoopFillZerobss+0x26>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800123c:	e001      	b.n	8001242 <LoopFillZerobss>

0800123e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001240:	3204      	adds	r2, #4

08001242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001244:	d3fb      	bcc.n	800123e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001246:	f7ff ffd7 	bl	80011f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800124a:	f002 fd61 	bl	8003d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124e:	f7ff fcfb 	bl	8000c48 <main>
  bx  lr    
 8001252:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001254:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800125c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001260:	08003da8 	.word	0x08003da8
  ldr r2, =_sbss
 8001264:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001268:	200000dc 	.word	0x200000dc

0800126c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC_IRQHandler>
	...

08001270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <HAL_Init+0x40>)
 800127a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <HAL_Init+0x40>)
 8001286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800128a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_Init+0x40>)
 8001292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 f931 	bl	8001500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129e:	200f      	movs	r0, #15
 80012a0:	f000 f808 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a4:	f7ff fec6 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023c00 	.word	0x40023c00

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x54>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f93b 	bl	800154e <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012f0:	f000 f911 	bl	8001516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_InitTick+0x5c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000014 	.word	0x20000014
 800130c:	2000001c 	.word	0x2000001c
 8001310:	20000018 	.word	0x20000018

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	2000001c 	.word	0x2000001c
 8001338:	200000d8 	.word	0x200000d8

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	200000d8 	.word	0x200000d8

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff ffee 	bl	800133c <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_Delay+0x44>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800137a:	bf00      	nop
 800137c:	f7ff ffde 	bl	800133c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000001c 	.word	0x2000001c

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	60d3      	str	r3, [r2, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	; (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014cc:	d301      	bcc.n	80014d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00f      	b.n	80014f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <SysTick_Config+0x40>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014da:	210f      	movs	r1, #15
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014e0:	f7ff ff8e 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <SysTick_Config+0x40>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <SysTick_Config+0x40>)
 80014ec:	2207      	movs	r2, #7
 80014ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	e000e010 	.word	0xe000e010

08001500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff47 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001528:	f7ff ff5c 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 800152c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff ff8e 	bl	8001454 <NVIC_EncodePriority>
 8001538:	4602      	mov	r2, r0
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff5d 	bl	8001400 <__NVIC_SetPriority>
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffb0 	bl	80014bc <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <HAL_DMA_Start_IT+0x26>
 8001588:	2302      	movs	r3, #2
 800158a:	e040      	b.n	800160e <HAL_DMA_Start_IT+0xa8>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b01      	cmp	r3, #1
 800159e:	d12f      	bne.n	8001600 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2202      	movs	r2, #2
 80015a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2200      	movs	r2, #0
 80015ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	68b9      	ldr	r1, [r7, #8]
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f000 f82e 	bl	8001616 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015be:	223f      	movs	r2, #63	; 0x3f
 80015c0:	409a      	lsls	r2, r3
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 0216 	orr.w	r2, r2, #22
 80015d4:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d007      	beq.n	80015ee <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f042 0208 	orr.w	r2, r2, #8
 80015ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 0201 	orr.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	e005      	b.n	800160c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001608:	2302      	movs	r3, #2
 800160a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800160c:	7dfb      	ldrb	r3, [r7, #23]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001616:	b480      	push	{r7}
 8001618:	b085      	sub	sp, #20
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001632:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b40      	cmp	r3, #64	; 0x40
 8001642:	d108      	bne.n	8001656 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001654:	e007      	b.n	8001666 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	60da      	str	r2, [r3, #12]
}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	e165      	b.n	800195c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001690:	2201      	movs	r2, #1
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	f040 8154 	bne.w	8001956 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d005      	beq.n	80016c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d130      	bne.n	8001728 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	2203      	movs	r2, #3
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016fc:	2201      	movs	r2, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 0201 	and.w	r2, r3, #1
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b03      	cmp	r3, #3
 8001732:	d017      	beq.n	8001764 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d123      	bne.n	80017b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	08da      	lsrs	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3208      	adds	r2, #8
 8001778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	220f      	movs	r2, #15
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	08da      	lsrs	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3208      	adds	r2, #8
 80017b2:	69b9      	ldr	r1, [r7, #24]
 80017b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	2203      	movs	r2, #3
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0203 	and.w	r2, r3, #3
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80ae 	beq.w	8001956 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b5d      	ldr	r3, [pc, #372]	; (8001974 <HAL_GPIO_Init+0x300>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	4a5c      	ldr	r2, [pc, #368]	; (8001974 <HAL_GPIO_Init+0x300>)
 8001804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001808:	6453      	str	r3, [r2, #68]	; 0x44
 800180a:	4b5a      	ldr	r3, [pc, #360]	; (8001974 <HAL_GPIO_Init+0x300>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001816:	4a58      	ldr	r2, [pc, #352]	; (8001978 <HAL_GPIO_Init+0x304>)
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3302      	adds	r3, #2
 800181e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	220f      	movs	r2, #15
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4f      	ldr	r2, [pc, #316]	; (800197c <HAL_GPIO_Init+0x308>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d025      	beq.n	800188e <HAL_GPIO_Init+0x21a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4e      	ldr	r2, [pc, #312]	; (8001980 <HAL_GPIO_Init+0x30c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d01f      	beq.n	800188a <HAL_GPIO_Init+0x216>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4d      	ldr	r2, [pc, #308]	; (8001984 <HAL_GPIO_Init+0x310>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d019      	beq.n	8001886 <HAL_GPIO_Init+0x212>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4c      	ldr	r2, [pc, #304]	; (8001988 <HAL_GPIO_Init+0x314>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d013      	beq.n	8001882 <HAL_GPIO_Init+0x20e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4b      	ldr	r2, [pc, #300]	; (800198c <HAL_GPIO_Init+0x318>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d00d      	beq.n	800187e <HAL_GPIO_Init+0x20a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4a      	ldr	r2, [pc, #296]	; (8001990 <HAL_GPIO_Init+0x31c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d007      	beq.n	800187a <HAL_GPIO_Init+0x206>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a49      	ldr	r2, [pc, #292]	; (8001994 <HAL_GPIO_Init+0x320>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d101      	bne.n	8001876 <HAL_GPIO_Init+0x202>
 8001872:	2306      	movs	r3, #6
 8001874:	e00c      	b.n	8001890 <HAL_GPIO_Init+0x21c>
 8001876:	2307      	movs	r3, #7
 8001878:	e00a      	b.n	8001890 <HAL_GPIO_Init+0x21c>
 800187a:	2305      	movs	r3, #5
 800187c:	e008      	b.n	8001890 <HAL_GPIO_Init+0x21c>
 800187e:	2304      	movs	r3, #4
 8001880:	e006      	b.n	8001890 <HAL_GPIO_Init+0x21c>
 8001882:	2303      	movs	r3, #3
 8001884:	e004      	b.n	8001890 <HAL_GPIO_Init+0x21c>
 8001886:	2302      	movs	r3, #2
 8001888:	e002      	b.n	8001890 <HAL_GPIO_Init+0x21c>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_GPIO_Init+0x21c>
 800188e:	2300      	movs	r3, #0
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	f002 0203 	and.w	r2, r2, #3
 8001896:	0092      	lsls	r2, r2, #2
 8001898:	4093      	lsls	r3, r2
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a0:	4935      	ldr	r1, [pc, #212]	; (8001978 <HAL_GPIO_Init+0x304>)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ae:	4b3a      	ldr	r3, [pc, #232]	; (8001998 <HAL_GPIO_Init+0x324>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018d2:	4a31      	ldr	r2, [pc, #196]	; (8001998 <HAL_GPIO_Init+0x324>)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018d8:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <HAL_GPIO_Init+0x324>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018fc:	4a26      	ldr	r2, [pc, #152]	; (8001998 <HAL_GPIO_Init+0x324>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001902:	4b25      	ldr	r3, [pc, #148]	; (8001998 <HAL_GPIO_Init+0x324>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001926:	4a1c      	ldr	r2, [pc, #112]	; (8001998 <HAL_GPIO_Init+0x324>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <HAL_GPIO_Init+0x324>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001950:	4a11      	ldr	r2, [pc, #68]	; (8001998 <HAL_GPIO_Init+0x324>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3301      	adds	r3, #1
 800195a:	61fb      	str	r3, [r7, #28]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	2b0f      	cmp	r3, #15
 8001960:	f67f ae96 	bls.w	8001690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3724      	adds	r7, #36	; 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	40013800 	.word	0x40013800
 800197c:	40020000 	.word	0x40020000
 8001980:	40020400 	.word	0x40020400
 8001984:	40020800 	.word	0x40020800
 8001988:	40020c00 	.word	0x40020c00
 800198c:	40021000 	.word	0x40021000
 8001990:	40021400 	.word	0x40021400
 8001994:	40021800 	.word	0x40021800
 8001998:	40013c00 	.word	0x40013c00

0800199c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
 80019a8:	4613      	mov	r3, r2
 80019aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019ac:	787b      	ldrb	r3, [r7, #1]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019b8:	e003      	b.n	80019c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ba:	887b      	ldrh	r3, [r7, #2]
 80019bc:	041a      	lsls	r2, r3, #16
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	619a      	str	r2, [r3, #24]
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0cc      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e4:	4b68      	ldr	r3, [pc, #416]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d90c      	bls.n	8001a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b65      	ldr	r3, [pc, #404]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b63      	ldr	r3, [pc, #396]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0b8      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d020      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a24:	4b59      	ldr	r3, [pc, #356]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4a58      	ldr	r2, [pc, #352]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a3c:	4b53      	ldr	r3, [pc, #332]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4a52      	ldr	r2, [pc, #328]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a48:	4b50      	ldr	r3, [pc, #320]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	494d      	ldr	r1, [pc, #308]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d044      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	4b47      	ldr	r3, [pc, #284]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d119      	bne.n	8001aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e07f      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d003      	beq.n	8001a8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8e:	4b3f      	ldr	r3, [pc, #252]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d109      	bne.n	8001aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e06f      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9e:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e067      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f023 0203 	bic.w	r2, r3, #3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4934      	ldr	r1, [pc, #208]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac0:	f7ff fc3c 	bl	800133c <HAL_GetTick>
 8001ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac8:	f7ff fc38 	bl	800133c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e04f      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 020c 	and.w	r2, r3, #12
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d1eb      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 030f 	and.w	r3, r3, #15
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d20c      	bcs.n	8001b18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e032      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4916      	ldr	r1, [pc, #88]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	490e      	ldr	r1, [pc, #56]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b56:	f000 f855 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	490a      	ldr	r1, [pc, #40]	; (8001b90 <HAL_RCC_ClockConfig+0x1c0>)
 8001b68:	5ccb      	ldrb	r3, [r1, r3]
 8001b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6e:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fb9c 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023c00 	.word	0x40023c00
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	08003d80 	.word	0x08003d80
 8001b94:	20000014 	.word	0x20000014
 8001b98:	20000018 	.word	0x20000018

08001b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000014 	.word	0x20000014

08001bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bb8:	f7ff fff0 	bl	8001b9c <HAL_RCC_GetHCLKFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	0a9b      	lsrs	r3, r3, #10
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	4903      	ldr	r1, [pc, #12]	; (8001bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	08003d90 	.word	0x08003d90

08001bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001be0:	f7ff ffdc 	bl	8001b9c <HAL_RCC_GetHCLKFreq>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	0b5b      	lsrs	r3, r3, #13
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	4903      	ldr	r1, [pc, #12]	; (8001c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bf2:	5ccb      	ldrb	r3, [r1, r3]
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	08003d90 	.word	0x08003d90

08001c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c08:	b0a6      	sub	sp, #152	; 0x98
 8001c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c2a:	4bc8      	ldr	r3, [pc, #800]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b0c      	cmp	r3, #12
 8001c34:	f200 817e 	bhi.w	8001f34 <HAL_RCC_GetSysClockFreq+0x330>
 8001c38:	a201      	add	r2, pc, #4	; (adr r2, 8001c40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3e:	bf00      	nop
 8001c40:	08001c75 	.word	0x08001c75
 8001c44:	08001f35 	.word	0x08001f35
 8001c48:	08001f35 	.word	0x08001f35
 8001c4c:	08001f35 	.word	0x08001f35
 8001c50:	08001c7d 	.word	0x08001c7d
 8001c54:	08001f35 	.word	0x08001f35
 8001c58:	08001f35 	.word	0x08001f35
 8001c5c:	08001f35 	.word	0x08001f35
 8001c60:	08001c85 	.word	0x08001c85
 8001c64:	08001f35 	.word	0x08001f35
 8001c68:	08001f35 	.word	0x08001f35
 8001c6c:	08001f35 	.word	0x08001f35
 8001c70:	08001def 	.word	0x08001def
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c74:	4bb6      	ldr	r3, [pc, #728]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001c76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001c7a:	e15f      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c7c:	4bb5      	ldr	r3, [pc, #724]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x350>)
 8001c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001c82:	e15b      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c84:	4bb1      	ldr	r3, [pc, #708]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c90:	4bae      	ldr	r3, [pc, #696]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d031      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9c:	4bab      	ldr	r3, [pc, #684]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	099b      	lsrs	r3, r3, #6
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ca6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ca8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cae:	663b      	str	r3, [r7, #96]	; 0x60
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	667b      	str	r3, [r7, #100]	; 0x64
 8001cb4:	4ba7      	ldr	r3, [pc, #668]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x350>)
 8001cb6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001cba:	462a      	mov	r2, r5
 8001cbc:	fb03 f202 	mul.w	r2, r3, r2
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	4aa2      	ldr	r2, [pc, #648]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ccc:	4621      	mov	r1, r4
 8001cce:	fba1 1202 	umull	r1, r2, r1, r2
 8001cd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001cd4:	460a      	mov	r2, r1
 8001cd6:	67ba      	str	r2, [r7, #120]	; 0x78
 8001cd8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001cda:	4413      	add	r3, r2
 8001cdc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ce6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001ce8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001cf0:	f7fe fa8a 	bl	8000208 <__aeabi_uldivmod>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001cfe:	e064      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d00:	4b92      	ldr	r3, [pc, #584]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	099b      	lsrs	r3, r3, #6
 8001d06:	2200      	movs	r2, #0
 8001d08:	653b      	str	r3, [r7, #80]	; 0x50
 8001d0a:	657a      	str	r2, [r7, #84]	; 0x54
 8001d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d14:	2300      	movs	r3, #0
 8001d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d18:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001d1c:	4622      	mov	r2, r4
 8001d1e:	462b      	mov	r3, r5
 8001d20:	f04f 0000 	mov.w	r0, #0
 8001d24:	f04f 0100 	mov.w	r1, #0
 8001d28:	0159      	lsls	r1, r3, #5
 8001d2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d2e:	0150      	lsls	r0, r2, #5
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4621      	mov	r1, r4
 8001d36:	1a51      	subs	r1, r2, r1
 8001d38:	6139      	str	r1, [r7, #16]
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	eb63 0301 	sbc.w	r3, r3, r1
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d4e:	4659      	mov	r1, fp
 8001d50:	018b      	lsls	r3, r1, #6
 8001d52:	4651      	mov	r1, sl
 8001d54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d58:	4651      	mov	r1, sl
 8001d5a:	018a      	lsls	r2, r1, #6
 8001d5c:	4651      	mov	r1, sl
 8001d5e:	ebb2 0801 	subs.w	r8, r2, r1
 8001d62:	4659      	mov	r1, fp
 8001d64:	eb63 0901 	sbc.w	r9, r3, r1
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d7c:	4690      	mov	r8, r2
 8001d7e:	4699      	mov	r9, r3
 8001d80:	4623      	mov	r3, r4
 8001d82:	eb18 0303 	adds.w	r3, r8, r3
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	462b      	mov	r3, r5
 8001d8a:	eb49 0303 	adc.w	r3, r9, r3
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	028b      	lsls	r3, r1, #10
 8001da0:	4621      	mov	r1, r4
 8001da2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001da6:	4621      	mov	r1, r4
 8001da8:	028a      	lsls	r2, r1, #10
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001db2:	2200      	movs	r2, #0
 8001db4:	643b      	str	r3, [r7, #64]	; 0x40
 8001db6:	647a      	str	r2, [r7, #68]	; 0x44
 8001db8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001dbc:	f7fe fa24 	bl	8000208 <__aeabi_uldivmod>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dca:	4b60      	ldr	r3, [pc, #384]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	0c1b      	lsrs	r3, r3, #16
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001ddc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001dec:	e0a6      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dee:	4b57      	ldr	r3, [pc, #348]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001df6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dfa:	4b54      	ldr	r3, [pc, #336]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d02a      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e06:	4b51      	ldr	r3, [pc, #324]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	099b      	lsrs	r3, r3, #6
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4b4e      	ldr	r3, [pc, #312]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e1c:	fb03 f201 	mul.w	r2, r3, r1
 8001e20:	2300      	movs	r3, #0
 8001e22:	fb00 f303 	mul.w	r3, r0, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	4a4a      	ldr	r2, [pc, #296]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e2a:	fba0 1202 	umull	r1, r2, r0, r2
 8001e2e:	677a      	str	r2, [r7, #116]	; 0x74
 8001e30:	460a      	mov	r2, r1
 8001e32:	673a      	str	r2, [r7, #112]	; 0x70
 8001e34:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001e36:	4413      	add	r3, r2
 8001e38:	677b      	str	r3, [r7, #116]	; 0x74
 8001e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e3e:	2200      	movs	r2, #0
 8001e40:	633b      	str	r3, [r7, #48]	; 0x30
 8001e42:	637a      	str	r2, [r7, #52]	; 0x34
 8001e44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e48:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001e4c:	f7fe f9dc 	bl	8000208 <__aeabi_uldivmod>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4613      	mov	r3, r2
 8001e56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e5a:	e05b      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5c:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	099b      	lsrs	r3, r3, #6
 8001e62:	2200      	movs	r2, #0
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e6e:	623b      	str	r3, [r7, #32]
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
 8001e74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e78:	4642      	mov	r2, r8
 8001e7a:	464b      	mov	r3, r9
 8001e7c:	f04f 0000 	mov.w	r0, #0
 8001e80:	f04f 0100 	mov.w	r1, #0
 8001e84:	0159      	lsls	r1, r3, #5
 8001e86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e8a:	0150      	lsls	r0, r2, #5
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4641      	mov	r1, r8
 8001e92:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e96:	4649      	mov	r1, r9
 8001e98:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ea8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001eac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eb0:	ebb2 040a 	subs.w	r4, r2, sl
 8001eb4:	eb63 050b 	sbc.w	r5, r3, fp
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	00eb      	lsls	r3, r5, #3
 8001ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ec6:	00e2      	lsls	r2, r4, #3
 8001ec8:	4614      	mov	r4, r2
 8001eca:	461d      	mov	r5, r3
 8001ecc:	4643      	mov	r3, r8
 8001ece:	18e3      	adds	r3, r4, r3
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	464b      	mov	r3, r9
 8001ed4:	eb45 0303 	adc.w	r3, r5, r3
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	028b      	lsls	r3, r1, #10
 8001eea:	4621      	mov	r1, r4
 8001eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	028a      	lsls	r2, r1, #10
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001efc:	2200      	movs	r2, #0
 8001efe:	61bb      	str	r3, [r7, #24]
 8001f00:	61fa      	str	r2, [r7, #28]
 8001f02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f06:	f7fe f97f 	bl	8000208 <__aeabi_uldivmod>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4613      	mov	r3, r2
 8001f10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f14:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	0f1b      	lsrs	r3, r3, #28
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001f22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001f32:	e003      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001f3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3798      	adds	r7, #152	; 0x98
 8001f44:	46bd      	mov	sp, r7
 8001f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	00f42400 	.word	0x00f42400
 8001f54:	017d7840 	.word	0x017d7840

08001f58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e28d      	b.n	8002486 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8083 	beq.w	800207e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f78:	4b94      	ldr	r3, [pc, #592]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 030c 	and.w	r3, r3, #12
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d019      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f84:	4b91      	ldr	r3, [pc, #580]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f90:	4b8e      	ldr	r3, [pc, #568]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f9c:	d00c      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9e:	4b8b      	ldr	r3, [pc, #556]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fa6:	2b0c      	cmp	r3, #12
 8001fa8:	d112      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001faa:	4b88      	ldr	r3, [pc, #544]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb6:	d10b      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb8:	4b84      	ldr	r3, [pc, #528]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d05b      	beq.n	800207c <HAL_RCC_OscConfig+0x124>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d157      	bne.n	800207c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e25a      	b.n	8002486 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd8:	d106      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x90>
 8001fda:	4b7c      	ldr	r3, [pc, #496]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a7b      	ldr	r2, [pc, #492]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e01d      	b.n	8002024 <HAL_RCC_OscConfig+0xcc>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0xb4>
 8001ff2:	4b76      	ldr	r3, [pc, #472]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a75      	ldr	r2, [pc, #468]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8001ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b73      	ldr	r3, [pc, #460]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a72      	ldr	r2, [pc, #456]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e00b      	b.n	8002024 <HAL_RCC_OscConfig+0xcc>
 800200c:	4b6f      	ldr	r3, [pc, #444]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a6e      	ldr	r2, [pc, #440]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8002012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b6c      	ldr	r3, [pc, #432]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a6b      	ldr	r2, [pc, #428]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 800201e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7ff f986 	bl	800133c <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff f982 	bl	800133c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e21f      	b.n	8002486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	4b61      	ldr	r3, [pc, #388]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0xdc>
 8002052:	e014      	b.n	800207e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7ff f972 	bl	800133c <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff f96e 	bl	800133c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e20b      	b.n	8002486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	4b57      	ldr	r3, [pc, #348]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x104>
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d06f      	beq.n	800216a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800208a:	4b50      	ldr	r3, [pc, #320]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b00      	cmp	r3, #0
 8002094:	d017      	beq.n	80020c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002096:	4b4d      	ldr	r3, [pc, #308]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d105      	bne.n	80020ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020a2:	4b4a      	ldr	r3, [pc, #296]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ae:	4b47      	ldr	r3, [pc, #284]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020b6:	2b0c      	cmp	r3, #12
 80020b8:	d11c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ba:	4b44      	ldr	r3, [pc, #272]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d116      	bne.n	80020f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	4b41      	ldr	r3, [pc, #260]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_RCC_OscConfig+0x186>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e1d3      	b.n	8002486 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020de:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4937      	ldr	r1, [pc, #220]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	e03a      	b.n	800216a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020fc:	4b34      	ldr	r3, [pc, #208]	; (80021d0 <HAL_RCC_OscConfig+0x278>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002102:	f7ff f91b 	bl	800133c <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800210a:	f7ff f917 	bl	800133c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e1b4      	b.n	8002486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	4b2b      	ldr	r3, [pc, #172]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002128:	4b28      	ldr	r3, [pc, #160]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4925      	ldr	r1, [pc, #148]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]
 800213c:	e015      	b.n	800216a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213e:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <HAL_RCC_OscConfig+0x278>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7ff f8fa 	bl	800133c <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800214c:	f7ff f8f6 	bl	800133c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e193      	b.n	8002486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d036      	beq.n	80021e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d016      	beq.n	80021ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <HAL_RCC_OscConfig+0x27c>)
 8002180:	2201      	movs	r2, #1
 8002182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002184:	f7ff f8da 	bl	800133c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800218c:	f7ff f8d6 	bl	800133c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e173      	b.n	8002486 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 80021a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x234>
 80021aa:	e01b      	b.n	80021e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_OscConfig+0x27c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b2:	f7ff f8c3 	bl	800133c <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b8:	e00e      	b.n	80021d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ba:	f7ff f8bf 	bl	800133c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d907      	bls.n	80021d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e15c      	b.n	8002486 <HAL_RCC_OscConfig+0x52e>
 80021cc:	40023800 	.word	0x40023800
 80021d0:	42470000 	.word	0x42470000
 80021d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d8:	4b8a      	ldr	r3, [pc, #552]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 80021da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1ea      	bne.n	80021ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8097 	beq.w	8002320 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f6:	4b83      	ldr	r3, [pc, #524]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10f      	bne.n	8002222 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	4b7f      	ldr	r3, [pc, #508]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a7e      	ldr	r2, [pc, #504]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b7c      	ldr	r3, [pc, #496]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221e:	2301      	movs	r3, #1
 8002220:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	4b79      	ldr	r3, [pc, #484]	; (8002408 <HAL_RCC_OscConfig+0x4b0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d118      	bne.n	8002260 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222e:	4b76      	ldr	r3, [pc, #472]	; (8002408 <HAL_RCC_OscConfig+0x4b0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a75      	ldr	r2, [pc, #468]	; (8002408 <HAL_RCC_OscConfig+0x4b0>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223a:	f7ff f87f 	bl	800133c <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7ff f87b 	bl	800133c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e118      	b.n	8002486 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4b6c      	ldr	r3, [pc, #432]	; (8002408 <HAL_RCC_OscConfig+0x4b0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x31e>
 8002268:	4b66      	ldr	r3, [pc, #408]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 800226a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226c:	4a65      	ldr	r2, [pc, #404]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6713      	str	r3, [r2, #112]	; 0x70
 8002274:	e01c      	b.n	80022b0 <HAL_RCC_OscConfig+0x358>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b05      	cmp	r3, #5
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x340>
 800227e:	4b61      	ldr	r3, [pc, #388]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002282:	4a60      	ldr	r2, [pc, #384]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6713      	str	r3, [r2, #112]	; 0x70
 800228a:	4b5e      	ldr	r3, [pc, #376]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228e:	4a5d      	ldr	r2, [pc, #372]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6713      	str	r3, [r2, #112]	; 0x70
 8002296:	e00b      	b.n	80022b0 <HAL_RCC_OscConfig+0x358>
 8002298:	4b5a      	ldr	r3, [pc, #360]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	4a59      	ldr	r2, [pc, #356]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 800229e:	f023 0301 	bic.w	r3, r3, #1
 80022a2:	6713      	str	r3, [r2, #112]	; 0x70
 80022a4:	4b57      	ldr	r3, [pc, #348]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	4a56      	ldr	r2, [pc, #344]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 80022aa:	f023 0304 	bic.w	r3, r3, #4
 80022ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d015      	beq.n	80022e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b8:	f7ff f840 	bl	800133c <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c0:	f7ff f83c 	bl	800133c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e0d7      	b.n	8002486 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d6:	4b4b      	ldr	r3, [pc, #300]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0ee      	beq.n	80022c0 <HAL_RCC_OscConfig+0x368>
 80022e2:	e014      	b.n	800230e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7ff f82a 	bl	800133c <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ec:	f7ff f826 	bl	800133c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e0c1      	b.n	8002486 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002302:	4b40      	ldr	r3, [pc, #256]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1ee      	bne.n	80022ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d105      	bne.n	8002320 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002314:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	4a3a      	ldr	r2, [pc, #232]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 800231a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80ad 	beq.w	8002484 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800232a:	4b36      	ldr	r3, [pc, #216]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	2b08      	cmp	r3, #8
 8002334:	d060      	beq.n	80023f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d145      	bne.n	80023ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233e:	4b33      	ldr	r3, [pc, #204]	; (800240c <HAL_RCC_OscConfig+0x4b4>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe fffa 	bl	800133c <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe fff6 	bl	800133c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e093      	b.n	8002486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235e:	4b29      	ldr	r3, [pc, #164]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69da      	ldr	r2, [r3, #28]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	019b      	lsls	r3, r3, #6
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	085b      	lsrs	r3, r3, #1
 8002382:	3b01      	subs	r3, #1
 8002384:	041b      	lsls	r3, r3, #16
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	061b      	lsls	r3, r3, #24
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	071b      	lsls	r3, r3, #28
 8002396:	491b      	ldr	r1, [pc, #108]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_RCC_OscConfig+0x4b4>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a2:	f7fe ffcb 	bl	800133c <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023aa:	f7fe ffc7 	bl	800133c <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e064      	b.n	8002486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x452>
 80023c8:	e05c      	b.n	8002484 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <HAL_RCC_OscConfig+0x4b4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe ffb4 	bl	800133c <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d8:	f7fe ffb0 	bl	800133c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e04d      	b.n	8002486 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_RCC_OscConfig+0x4ac>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x480>
 80023f6:	e045      	b.n	8002484 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d107      	bne.n	8002410 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e040      	b.n	8002486 <HAL_RCC_OscConfig+0x52e>
 8002404:	40023800 	.word	0x40023800
 8002408:	40007000 	.word	0x40007000
 800240c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002410:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <HAL_RCC_OscConfig+0x538>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d030      	beq.n	8002480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002428:	429a      	cmp	r2, r3
 800242a:	d129      	bne.n	8002480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	429a      	cmp	r2, r3
 8002438:	d122      	bne.n	8002480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002440:	4013      	ands	r3, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002448:	4293      	cmp	r3, r2
 800244a:	d119      	bne.n	8002480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	085b      	lsrs	r3, r3, #1
 8002458:	3b01      	subs	r3, #1
 800245a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d10f      	bne.n	8002480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d107      	bne.n	8002480 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800

08002494 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e07b      	b.n	800259e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d108      	bne.n	80024c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024b6:	d009      	beq.n	80024cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	61da      	str	r2, [r3, #28]
 80024be:	e005      	b.n	80024cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d106      	bne.n	80024ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fe fdcc 	bl	8001084 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002502:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002550:	ea42 0103 	orr.w	r1, r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	f003 0104 	and.w	r1, r3, #4
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	f003 0210 	and.w	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69da      	ldr	r2, [r3, #28]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800258c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b088      	sub	sp, #32
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	603b      	str	r3, [r7, #0]
 80025b2:	4613      	mov	r3, r2
 80025b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_SPI_Transmit+0x22>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e126      	b.n	8002816 <HAL_SPI_Transmit+0x270>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025d0:	f7fe feb4 	bl	800133c <HAL_GetTick>
 80025d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d002      	beq.n	80025ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80025e6:	2302      	movs	r3, #2
 80025e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025ea:	e10b      	b.n	8002804 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <HAL_SPI_Transmit+0x52>
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d102      	bne.n	80025fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025fc:	e102      	b.n	8002804 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2203      	movs	r2, #3
 8002602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	88fa      	ldrh	r2, [r7, #6]
 8002616:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	88fa      	ldrh	r2, [r7, #6]
 800261c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002644:	d10f      	bne.n	8002666 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002654:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002664:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	d007      	beq.n	8002684 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002682:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800268c:	d14b      	bne.n	8002726 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_SPI_Transmit+0xf6>
 8002696:	8afb      	ldrh	r3, [r7, #22]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d13e      	bne.n	800271a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	881a      	ldrh	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	1c9a      	adds	r2, r3, #2
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026c0:	e02b      	b.n	800271a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d112      	bne.n	80026f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	881a      	ldrh	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	1c9a      	adds	r2, r3, #2
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80026f4:	e011      	b.n	800271a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026f6:	f7fe fe21 	bl	800133c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d803      	bhi.n	800270e <HAL_SPI_Transmit+0x168>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800270c:	d102      	bne.n	8002714 <HAL_SPI_Transmit+0x16e>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002718:	e074      	b.n	8002804 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1ce      	bne.n	80026c2 <HAL_SPI_Transmit+0x11c>
 8002724:	e04c      	b.n	80027c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_SPI_Transmit+0x18e>
 800272e:	8afb      	ldrh	r3, [r7, #22]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d140      	bne.n	80027b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	330c      	adds	r3, #12
 800273e:	7812      	ldrb	r2, [r2, #0]
 8002740:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800275a:	e02c      	b.n	80027b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b02      	cmp	r3, #2
 8002768:	d113      	bne.n	8002792 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	330c      	adds	r3, #12
 8002774:	7812      	ldrb	r2, [r2, #0]
 8002776:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002790:	e011      	b.n	80027b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002792:	f7fe fdd3 	bl	800133c <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d803      	bhi.n	80027aa <HAL_SPI_Transmit+0x204>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027a8:	d102      	bne.n	80027b0 <HAL_SPI_Transmit+0x20a>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027b4:	e026      	b.n	8002804 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1cd      	bne.n	800275c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	6839      	ldr	r1, [r7, #0]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 fe9f 	bl	8003508 <SPI_EndRxTxTransaction>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10a      	bne.n	80027f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	77fb      	strb	r3, [r7, #31]
 8002800:	e000      	b.n	8002804 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002802:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002814:	7ffb      	ldrb	r3, [r7, #31]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b088      	sub	sp, #32
 8002822:	af02      	add	r7, sp, #8
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	4613      	mov	r3, r2
 800282c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800283a:	d112      	bne.n	8002862 <HAL_SPI_Receive+0x44>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10e      	bne.n	8002862 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2204      	movs	r2, #4
 8002848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800284c:	88fa      	ldrh	r2, [r7, #6]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	4613      	mov	r3, r2
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f8f1 	bl	8002a40 <HAL_SPI_TransmitReceive>
 800285e:	4603      	mov	r3, r0
 8002860:	e0ea      	b.n	8002a38 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_SPI_Receive+0x52>
 800286c:	2302      	movs	r3, #2
 800286e:	e0e3      	b.n	8002a38 <HAL_SPI_Receive+0x21a>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002878:	f7fe fd60 	bl	800133c <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d002      	beq.n	8002890 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800288a:	2302      	movs	r3, #2
 800288c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800288e:	e0ca      	b.n	8002a26 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_SPI_Receive+0x7e>
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028a0:	e0c1      	b.n	8002a26 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2204      	movs	r2, #4
 80028a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	88fa      	ldrh	r2, [r7, #6]
 80028ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	88fa      	ldrh	r2, [r7, #6]
 80028c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e8:	d10f      	bne.n	800290a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002908:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002914:	2b40      	cmp	r3, #64	; 0x40
 8002916:	d007      	beq.n	8002928 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002926:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d162      	bne.n	80029f6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002930:	e02e      	b.n	8002990 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b01      	cmp	r3, #1
 800293e:	d115      	bne.n	800296c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f103 020c 	add.w	r2, r3, #12
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	7812      	ldrb	r2, [r2, #0]
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	87da      	strh	r2, [r3, #62]	; 0x3e
 800296a:	e011      	b.n	8002990 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800296c:	f7fe fce6 	bl	800133c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d803      	bhi.n	8002984 <HAL_SPI_Receive+0x166>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002982:	d102      	bne.n	800298a <HAL_SPI_Receive+0x16c>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d102      	bne.n	8002990 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800298e:	e04a      	b.n	8002a26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1cb      	bne.n	8002932 <HAL_SPI_Receive+0x114>
 800299a:	e031      	b.n	8002a00 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d113      	bne.n	80029d2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b4:	b292      	uxth	r2, r2
 80029b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029bc:	1c9a      	adds	r2, r3, #2
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029d0:	e011      	b.n	80029f6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029d2:	f7fe fcb3 	bl	800133c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d803      	bhi.n	80029ea <HAL_SPI_Receive+0x1cc>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e8:	d102      	bne.n	80029f0 <HAL_SPI_Receive+0x1d2>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d102      	bne.n	80029f6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80029f4:	e017      	b.n	8002a26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1cd      	bne.n	800299c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	6839      	ldr	r1, [r7, #0]
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fd19 	bl	800343c <SPI_EndRxTransaction>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	75fb      	strb	r3, [r7, #23]
 8002a22:	e000      	b.n	8002a26 <HAL_SPI_Receive+0x208>
  }

error :
 8002a24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08c      	sub	sp, #48	; 0x30
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_SPI_TransmitReceive+0x26>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e18a      	b.n	8002d7c <HAL_SPI_TransmitReceive+0x33c>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a6e:	f7fe fc65 	bl	800133c <HAL_GetTick>
 8002a72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a84:	887b      	ldrh	r3, [r7, #2]
 8002a86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d00f      	beq.n	8002ab0 <HAL_SPI_TransmitReceive+0x70>
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a96:	d107      	bne.n	8002aa8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d103      	bne.n	8002aa8 <HAL_SPI_TransmitReceive+0x68>
 8002aa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d003      	beq.n	8002ab0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002aae:	e15b      	b.n	8002d68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_SPI_TransmitReceive+0x82>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_SPI_TransmitReceive+0x82>
 8002abc:	887b      	ldrh	r3, [r7, #2]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d103      	bne.n	8002aca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ac8:	e14e      	b.n	8002d68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d003      	beq.n	8002ade <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2205      	movs	r2, #5
 8002ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	887a      	ldrh	r2, [r7, #2]
 8002aee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	887a      	ldrh	r2, [r7, #2]
 8002af4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	887a      	ldrh	r2, [r7, #2]
 8002b00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	887a      	ldrh	r2, [r7, #2]
 8002b06:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1e:	2b40      	cmp	r3, #64	; 0x40
 8002b20:	d007      	beq.n	8002b32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b3a:	d178      	bne.n	8002c2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <HAL_SPI_TransmitReceive+0x10a>
 8002b44:	8b7b      	ldrh	r3, [r7, #26]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d166      	bne.n	8002c18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	881a      	ldrh	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	1c9a      	adds	r2, r3, #2
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b6e:	e053      	b.n	8002c18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d11b      	bne.n	8002bb6 <HAL_SPI_TransmitReceive+0x176>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d016      	beq.n	8002bb6 <HAL_SPI_TransmitReceive+0x176>
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d113      	bne.n	8002bb6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	881a      	ldrh	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	1c9a      	adds	r2, r3, #2
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d119      	bne.n	8002bf8 <HAL_SPI_TransmitReceive+0x1b8>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d014      	beq.n	8002bf8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	b292      	uxth	r2, r2
 8002bda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be0:	1c9a      	adds	r2, r3, #2
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bf8:	f7fe fba0 	bl	800133c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d807      	bhi.n	8002c18 <HAL_SPI_TransmitReceive+0x1d8>
 8002c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c0e:	d003      	beq.n	8002c18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c16:	e0a7      	b.n	8002d68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1a6      	bne.n	8002b70 <HAL_SPI_TransmitReceive+0x130>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1a1      	bne.n	8002b70 <HAL_SPI_TransmitReceive+0x130>
 8002c2c:	e07c      	b.n	8002d28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_SPI_TransmitReceive+0x1fc>
 8002c36:	8b7b      	ldrh	r3, [r7, #26]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d16b      	bne.n	8002d14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	330c      	adds	r3, #12
 8002c46:	7812      	ldrb	r2, [r2, #0]
 8002c48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c62:	e057      	b.n	8002d14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d11c      	bne.n	8002cac <HAL_SPI_TransmitReceive+0x26c>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d017      	beq.n	8002cac <HAL_SPI_TransmitReceive+0x26c>
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d114      	bne.n	8002cac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	7812      	ldrb	r2, [r2, #0]
 8002c8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d119      	bne.n	8002cee <HAL_SPI_TransmitReceive+0x2ae>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d014      	beq.n	8002cee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cea:	2301      	movs	r3, #1
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cee:	f7fe fb25 	bl	800133c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d803      	bhi.n	8002d06 <HAL_SPI_TransmitReceive+0x2c6>
 8002cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d04:	d102      	bne.n	8002d0c <HAL_SPI_TransmitReceive+0x2cc>
 8002d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d103      	bne.n	8002d14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d12:	e029      	b.n	8002d68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1a2      	bne.n	8002c64 <HAL_SPI_TransmitReceive+0x224>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d19d      	bne.n	8002c64 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 fbeb 	bl	8003508 <SPI_EndRxTxTransaction>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d006      	beq.n	8002d46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d44:	e010      	b.n	8002d68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10b      	bne.n	8002d66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	e000      	b.n	8002d68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002d66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3730      	adds	r7, #48	; 0x30
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d110      	bne.n	8002dc0 <HAL_SPI_Receive_DMA+0x3c>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002da6:	d10b      	bne.n	8002dc0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2204      	movs	r2, #4
 8002dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f8ac 	bl	8002f14 <HAL_SPI_TransmitReceive_DMA>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	e09f      	b.n	8002f00 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_SPI_Receive_DMA+0x4a>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e098      	b.n	8002f00 <HAL_SPI_Receive_DMA+0x17c>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d002      	beq.n	8002de8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8002de2:	2302      	movs	r3, #2
 8002de4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002de6:	e086      	b.n	8002ef6 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_SPI_Receive_DMA+0x70>
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002df8:	e07d      	b.n	8002ef6 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	88fa      	ldrh	r2, [r7, #6]
 8002e12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	88fa      	ldrh	r2, [r7, #6]
 8002e18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3a:	d10f      	bne.n	8002e5c <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e60:	4a29      	ldr	r2, [pc, #164]	; (8002f08 <HAL_SPI_Receive_DMA+0x184>)
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e68:	4a28      	ldr	r2, [pc, #160]	; (8002f0c <HAL_SPI_Receive_DMA+0x188>)
 8002e6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e70:	4a27      	ldr	r2, [pc, #156]	; (8002f10 <HAL_SPI_Receive_DMA+0x18c>)
 8002e72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e78:	2200      	movs	r2, #0
 8002e7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	330c      	adds	r3, #12
 8002e86:	4619      	mov	r1, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e92:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002e94:	f7fe fb67 	bl	8001566 <HAL_DMA_Start_IT>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00c      	beq.n	8002eb8 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea2:	f043 0210 	orr.w	r2, r3, #16
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002eb6:	e01e      	b.n	8002ef6 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d007      	beq.n	8002ed6 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ed4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0220 	orr.w	r2, r2, #32
 8002ee4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	080032b5 	.word	0x080032b5
 8002f0c:	0800317d 	.word	0x0800317d
 8002f10:	080032ed 	.word	0x080032ed

08002f14 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_SPI_TransmitReceive_DMA+0x20>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e0e3      	b.n	80030fc <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f42:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002f4a:	7dbb      	ldrb	r3, [r7, #22]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d00d      	beq.n	8002f6c <HAL_SPI_TransmitReceive_DMA+0x58>
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f56:	d106      	bne.n	8002f66 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <HAL_SPI_TransmitReceive_DMA+0x52>
 8002f60:	7dbb      	ldrb	r3, [r7, #22]
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d002      	beq.n	8002f6c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002f66:	2302      	movs	r3, #2
 8002f68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f6a:	e0c2      	b.n	80030f2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d005      	beq.n	8002f7e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002f78:	887b      	ldrh	r3, [r7, #2]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d102      	bne.n	8002f84 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f82:	e0b6      	b.n	80030f2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d003      	beq.n	8002f98 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2205      	movs	r2, #5
 8002f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	887a      	ldrh	r2, [r7, #2]
 8002fa8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	887a      	ldrh	r2, [r7, #2]
 8002fae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	887a      	ldrh	r2, [r7, #2]
 8002fba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	887a      	ldrh	r2, [r7, #2]
 8002fc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d108      	bne.n	8002fec <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fde:	4a49      	ldr	r2, [pc, #292]	; (8003104 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe6:	4a48      	ldr	r2, [pc, #288]	; (8003108 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8002fe8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fea:	e007      	b.n	8002ffc <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff0:	4a46      	ldr	r2, [pc, #280]	; (800310c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff8:	4a45      	ldr	r2, [pc, #276]	; (8003110 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8002ffa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003000:	4a44      	ldr	r2, [pc, #272]	; (8003114 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003002:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003008:	2200      	movs	r2, #0
 800300a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	330c      	adds	r3, #12
 8003016:	4619      	mov	r1, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003022:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003024:	f7fe fa9f 	bl	8001566 <HAL_DMA_Start_IT>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00c      	beq.n	8003048 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	f043 0210 	orr.w	r2, r3, #16
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003046:	e054      	b.n	80030f2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305c:	2200      	movs	r2, #0
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003064:	2200      	movs	r2, #0
 8003066:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306c:	2200      	movs	r2, #0
 800306e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003074:	2200      	movs	r2, #0
 8003076:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	4619      	mov	r1, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	330c      	adds	r3, #12
 8003088:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800308e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003090:	f7fe fa69 	bl	8001566 <HAL_DMA_Start_IT>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00c      	beq.n	80030b4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309e:	f043 0210 	orr.w	r2, r3, #16
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80030b2:	e01e      	b.n	80030f2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b40      	cmp	r3, #64	; 0x40
 80030c0:	d007      	beq.n	80030d2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030d0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0220 	orr.w	r2, r2, #32
 80030e0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0202 	orr.w	r2, r2, #2
 80030f0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	080032b5 	.word	0x080032b5
 8003108:	0800317d 	.word	0x0800317d
 800310c:	080032d1 	.word	0x080032d1
 8003110:	08003225 	.word	0x08003225
 8003114:	080032ed 	.word	0x080032ed

08003118 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003188:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800318a:	f7fe f8d7 	bl	800133c <HAL_GetTick>
 800318e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319e:	d03b      	beq.n	8003218 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0220 	bic.w	r2, r2, #32
 80031ae:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10d      	bne.n	80031d4 <SPI_DMAReceiveCplt+0x58>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031c0:	d108      	bne.n	80031d4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0203 	bic.w	r2, r2, #3
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	e007      	b.n	80031e4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	2164      	movs	r1, #100	; 0x64
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f927 	bl	800343c <SPI_EndRxTransaction>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f7ff ffa9 	bl	8003168 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003216:	e002      	b.n	800321e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f7ff ff7d 	bl	8003118 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003232:	f7fe f883 	bl	800133c <HAL_GetTick>
 8003236:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003246:	d02f      	beq.n	80032a8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0220 	bic.w	r2, r2, #32
 8003256:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	2164      	movs	r1, #100	; 0x64
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f953 	bl	8003508 <SPI_EndRxTxTransaction>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0203 	bic.w	r2, r2, #3
 8003282:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f7ff ff61 	bl	8003168 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80032a6:	e002      	b.n	80032ae <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f7ff ff3f 	bl	800312c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f7ff ff3c 	bl	8003140 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f7ff ff38 	bl	8003154 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032e4:	bf00      	nop
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0203 	bic.w	r2, r2, #3
 8003308:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330e:	f043 0210 	orr.w	r2, r3, #16
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f7ff ff22 	bl	8003168 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	4613      	mov	r3, r2
 800333a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800333c:	f7fd fffe 	bl	800133c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	4413      	add	r3, r2
 800334a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800334c:	f7fd fff6 	bl	800133c <HAL_GetTick>
 8003350:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003352:	4b39      	ldr	r3, [pc, #228]	; (8003438 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	015b      	lsls	r3, r3, #5
 8003358:	0d1b      	lsrs	r3, r3, #20
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	fb02 f303 	mul.w	r3, r2, r3
 8003360:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003362:	e054      	b.n	800340e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800336a:	d050      	beq.n	800340e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800336c:	f7fd ffe6 	bl	800133c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	429a      	cmp	r2, r3
 800337a:	d902      	bls.n	8003382 <SPI_WaitFlagStateUntilTimeout+0x56>
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d13d      	bne.n	80033fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003390:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800339a:	d111      	bne.n	80033c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a4:	d004      	beq.n	80033b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ae:	d107      	bne.n	80033c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c8:	d10f      	bne.n	80033ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e017      	b.n	800342e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	3b01      	subs	r3, #1
 800340c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	4013      	ands	r3, r2
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	429a      	cmp	r2, r3
 800341c:	bf0c      	ite	eq
 800341e:	2301      	moveq	r3, #1
 8003420:	2300      	movne	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	429a      	cmp	r2, r3
 800342a:	d19b      	bne.n	8003364 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3720      	adds	r7, #32
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000014 	.word	0x20000014

0800343c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003450:	d111      	bne.n	8003476 <SPI_EndRxTransaction+0x3a>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800345a:	d004      	beq.n	8003466 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003464:	d107      	bne.n	8003476 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003474:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800347e:	d12a      	bne.n	80034d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003488:	d012      	beq.n	80034b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2200      	movs	r2, #0
 8003492:	2180      	movs	r1, #128	; 0x80
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7ff ff49 	bl	800332c <SPI_WaitFlagStateUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d02d      	beq.n	80034fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a4:	f043 0220 	orr.w	r2, r3, #32
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e026      	b.n	80034fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2200      	movs	r2, #0
 80034b8:	2101      	movs	r1, #1
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7ff ff36 	bl	800332c <SPI_WaitFlagStateUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d01a      	beq.n	80034fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ca:	f043 0220 	orr.w	r2, r3, #32
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e013      	b.n	80034fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2200      	movs	r2, #0
 80034de:	2101      	movs	r1, #1
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff ff23 	bl	800332c <SPI_WaitFlagStateUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	f043 0220 	orr.w	r2, r3, #32
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e000      	b.n	80034fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af02      	add	r7, sp, #8
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003514:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <SPI_EndRxTxTransaction+0x7c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1b      	ldr	r2, [pc, #108]	; (8003588 <SPI_EndRxTxTransaction+0x80>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	0d5b      	lsrs	r3, r3, #21
 8003520:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003524:	fb02 f303 	mul.w	r3, r2, r3
 8003528:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003532:	d112      	bne.n	800355a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2200      	movs	r2, #0
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7ff fef4 	bl	800332c <SPI_WaitFlagStateUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d016      	beq.n	8003578 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354e:	f043 0220 	orr.w	r2, r3, #32
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e00f      	b.n	800357a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	3b01      	subs	r3, #1
 8003564:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003570:	2b80      	cmp	r3, #128	; 0x80
 8003572:	d0f2      	beq.n	800355a <SPI_EndRxTxTransaction+0x52>
 8003574:	e000      	b.n	8003578 <SPI_EndRxTxTransaction+0x70>
        break;
 8003576:	bf00      	nop
  }

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000014 	.word	0x20000014
 8003588:	165e9f81 	.word	0x165e9f81

0800358c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e03f      	b.n	800361e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd fdae 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2224      	movs	r2, #36	; 0x24
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f929 	bl	8003828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695a      	ldr	r2, [r3, #20]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003604:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b08a      	sub	sp, #40	; 0x28
 800362a:	af02      	add	r7, sp, #8
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	603b      	str	r3, [r7, #0]
 8003632:	4613      	mov	r3, r2
 8003634:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b20      	cmp	r3, #32
 8003644:	d17c      	bne.n	8003740 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_UART_Transmit+0x2c>
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e075      	b.n	8003742 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_UART_Transmit+0x3e>
 8003660:	2302      	movs	r3, #2
 8003662:	e06e      	b.n	8003742 <HAL_UART_Transmit+0x11c>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2221      	movs	r2, #33	; 0x21
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800367a:	f7fd fe5f 	bl	800133c <HAL_GetTick>
 800367e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	88fa      	ldrh	r2, [r7, #6]
 8003684:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	88fa      	ldrh	r2, [r7, #6]
 800368a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003694:	d108      	bne.n	80036a8 <HAL_UART_Transmit+0x82>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d104      	bne.n	80036a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	61bb      	str	r3, [r7, #24]
 80036a6:	e003      	b.n	80036b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036b8:	e02a      	b.n	8003710 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2200      	movs	r2, #0
 80036c2:	2180      	movs	r1, #128	; 0x80
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f840 	bl	800374a <UART_WaitOnFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e036      	b.n	8003742 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10b      	bne.n	80036f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	3302      	adds	r3, #2
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	e007      	b.n	8003702 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	781a      	ldrb	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	3301      	adds	r3, #1
 8003700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1cf      	bne.n	80036ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2200      	movs	r2, #0
 8003722:	2140      	movs	r1, #64	; 0x40
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f810 	bl	800374a <UART_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e006      	b.n	8003742 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003740:	2302      	movs	r3, #2
  }
}
 8003742:	4618      	mov	r0, r3
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b090      	sub	sp, #64	; 0x40
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800375a:	e050      	b.n	80037fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800375c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003762:	d04c      	beq.n	80037fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003766:	2b00      	cmp	r3, #0
 8003768:	d007      	beq.n	800377a <UART_WaitOnFlagUntilTimeout+0x30>
 800376a:	f7fd fde7 	bl	800133c <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003776:	429a      	cmp	r2, r3
 8003778:	d241      	bcs.n	80037fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	330c      	adds	r3, #12
 8003780:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	e853 3f00 	ldrex	r3, [r3]
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	330c      	adds	r3, #12
 8003798:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800379a:	637a      	str	r2, [r7, #52]	; 0x34
 800379c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037a2:	e841 2300 	strex	r3, r2, [r1]
 80037a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e5      	bne.n	800377a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3314      	adds	r3, #20
 80037b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	613b      	str	r3, [r7, #16]
   return(result);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3314      	adds	r3, #20
 80037cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037ce:	623a      	str	r2, [r7, #32]
 80037d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	69f9      	ldr	r1, [r7, #28]
 80037d4:	6a3a      	ldr	r2, [r7, #32]
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	61bb      	str	r3, [r7, #24]
   return(result);
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e5      	bne.n	80037ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e00f      	b.n	800381e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4013      	ands	r3, r2
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	bf0c      	ite	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	2300      	movne	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	429a      	cmp	r2, r3
 800381a:	d09f      	beq.n	800375c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3740      	adds	r7, #64	; 0x40
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800382c:	b0c0      	sub	sp, #256	; 0x100
 800382e:	af00      	add	r7, sp, #0
 8003830:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003844:	68d9      	ldr	r1, [r3, #12]
 8003846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	ea40 0301 	orr.w	r3, r0, r1
 8003850:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	431a      	orrs	r2, r3
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	431a      	orrs	r2, r3
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003880:	f021 010c 	bic.w	r1, r1, #12
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800388e:	430b      	orrs	r3, r1
 8003890:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a2:	6999      	ldr	r1, [r3, #24]
 80038a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	ea40 0301 	orr.w	r3, r0, r1
 80038ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	4b8f      	ldr	r3, [pc, #572]	; (8003af4 <UART_SetConfig+0x2cc>)
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d005      	beq.n	80038c8 <UART_SetConfig+0xa0>
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	4b8d      	ldr	r3, [pc, #564]	; (8003af8 <UART_SetConfig+0x2d0>)
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d104      	bne.n	80038d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038c8:	f7fe f988 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 80038cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038d0:	e003      	b.n	80038da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038d2:	f7fe f96f 	bl	8001bb4 <HAL_RCC_GetPCLK1Freq>
 80038d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e4:	f040 810c 	bne.w	8003b00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ec:	2200      	movs	r2, #0
 80038ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80038fa:	4622      	mov	r2, r4
 80038fc:	462b      	mov	r3, r5
 80038fe:	1891      	adds	r1, r2, r2
 8003900:	65b9      	str	r1, [r7, #88]	; 0x58
 8003902:	415b      	adcs	r3, r3
 8003904:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003906:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800390a:	4621      	mov	r1, r4
 800390c:	eb12 0801 	adds.w	r8, r2, r1
 8003910:	4629      	mov	r1, r5
 8003912:	eb43 0901 	adc.w	r9, r3, r1
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800392a:	4690      	mov	r8, r2
 800392c:	4699      	mov	r9, r3
 800392e:	4623      	mov	r3, r4
 8003930:	eb18 0303 	adds.w	r3, r8, r3
 8003934:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003938:	462b      	mov	r3, r5
 800393a:	eb49 0303 	adc.w	r3, r9, r3
 800393e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800394e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003952:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003956:	460b      	mov	r3, r1
 8003958:	18db      	adds	r3, r3, r3
 800395a:	653b      	str	r3, [r7, #80]	; 0x50
 800395c:	4613      	mov	r3, r2
 800395e:	eb42 0303 	adc.w	r3, r2, r3
 8003962:	657b      	str	r3, [r7, #84]	; 0x54
 8003964:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003968:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800396c:	f7fc fc4c 	bl	8000208 <__aeabi_uldivmod>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4b61      	ldr	r3, [pc, #388]	; (8003afc <UART_SetConfig+0x2d4>)
 8003976:	fba3 2302 	umull	r2, r3, r3, r2
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	011c      	lsls	r4, r3, #4
 800397e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003982:	2200      	movs	r2, #0
 8003984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003988:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800398c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003990:	4642      	mov	r2, r8
 8003992:	464b      	mov	r3, r9
 8003994:	1891      	adds	r1, r2, r2
 8003996:	64b9      	str	r1, [r7, #72]	; 0x48
 8003998:	415b      	adcs	r3, r3
 800399a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800399c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039a0:	4641      	mov	r1, r8
 80039a2:	eb12 0a01 	adds.w	sl, r2, r1
 80039a6:	4649      	mov	r1, r9
 80039a8:	eb43 0b01 	adc.w	fp, r3, r1
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039c0:	4692      	mov	sl, r2
 80039c2:	469b      	mov	fp, r3
 80039c4:	4643      	mov	r3, r8
 80039c6:	eb1a 0303 	adds.w	r3, sl, r3
 80039ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039ce:	464b      	mov	r3, r9
 80039d0:	eb4b 0303 	adc.w	r3, fp, r3
 80039d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80039e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039ec:	460b      	mov	r3, r1
 80039ee:	18db      	adds	r3, r3, r3
 80039f0:	643b      	str	r3, [r7, #64]	; 0x40
 80039f2:	4613      	mov	r3, r2
 80039f4:	eb42 0303 	adc.w	r3, r2, r3
 80039f8:	647b      	str	r3, [r7, #68]	; 0x44
 80039fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a02:	f7fc fc01 	bl	8000208 <__aeabi_uldivmod>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4b3b      	ldr	r3, [pc, #236]	; (8003afc <UART_SetConfig+0x2d4>)
 8003a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	2264      	movs	r2, #100	; 0x64
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	1acb      	subs	r3, r1, r3
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a22:	4b36      	ldr	r3, [pc, #216]	; (8003afc <UART_SetConfig+0x2d4>)
 8003a24:	fba3 2302 	umull	r2, r3, r3, r2
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a30:	441c      	add	r4, r3
 8003a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a44:	4642      	mov	r2, r8
 8003a46:	464b      	mov	r3, r9
 8003a48:	1891      	adds	r1, r2, r2
 8003a4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a4c:	415b      	adcs	r3, r3
 8003a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a54:	4641      	mov	r1, r8
 8003a56:	1851      	adds	r1, r2, r1
 8003a58:	6339      	str	r1, [r7, #48]	; 0x30
 8003a5a:	4649      	mov	r1, r9
 8003a5c:	414b      	adcs	r3, r1
 8003a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a6c:	4659      	mov	r1, fp
 8003a6e:	00cb      	lsls	r3, r1, #3
 8003a70:	4651      	mov	r1, sl
 8003a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a76:	4651      	mov	r1, sl
 8003a78:	00ca      	lsls	r2, r1, #3
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4642      	mov	r2, r8
 8003a82:	189b      	adds	r3, r3, r2
 8003a84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a88:	464b      	mov	r3, r9
 8003a8a:	460a      	mov	r2, r1
 8003a8c:	eb42 0303 	adc.w	r3, r2, r3
 8003a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003aa0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003aa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	18db      	adds	r3, r3, r3
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aae:	4613      	mov	r3, r2
 8003ab0:	eb42 0303 	adc.w	r3, r2, r3
 8003ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003abe:	f7fc fba3 	bl	8000208 <__aeabi_uldivmod>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <UART_SetConfig+0x2d4>)
 8003ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	2164      	movs	r1, #100	; 0x64
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	3332      	adds	r3, #50	; 0x32
 8003ada:	4a08      	ldr	r2, [pc, #32]	; (8003afc <UART_SetConfig+0x2d4>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	f003 0207 	and.w	r2, r3, #7
 8003ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4422      	add	r2, r4
 8003aee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003af0:	e105      	b.n	8003cfe <UART_SetConfig+0x4d6>
 8003af2:	bf00      	nop
 8003af4:	40011000 	.word	0x40011000
 8003af8:	40011400 	.word	0x40011400
 8003afc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b12:	4642      	mov	r2, r8
 8003b14:	464b      	mov	r3, r9
 8003b16:	1891      	adds	r1, r2, r2
 8003b18:	6239      	str	r1, [r7, #32]
 8003b1a:	415b      	adcs	r3, r3
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b22:	4641      	mov	r1, r8
 8003b24:	1854      	adds	r4, r2, r1
 8003b26:	4649      	mov	r1, r9
 8003b28:	eb43 0501 	adc.w	r5, r3, r1
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	00eb      	lsls	r3, r5, #3
 8003b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b3a:	00e2      	lsls	r2, r4, #3
 8003b3c:	4614      	mov	r4, r2
 8003b3e:	461d      	mov	r5, r3
 8003b40:	4643      	mov	r3, r8
 8003b42:	18e3      	adds	r3, r4, r3
 8003b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b48:	464b      	mov	r3, r9
 8003b4a:	eb45 0303 	adc.w	r3, r5, r3
 8003b4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b6e:	4629      	mov	r1, r5
 8003b70:	008b      	lsls	r3, r1, #2
 8003b72:	4621      	mov	r1, r4
 8003b74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b78:	4621      	mov	r1, r4
 8003b7a:	008a      	lsls	r2, r1, #2
 8003b7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b80:	f7fc fb42 	bl	8000208 <__aeabi_uldivmod>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4b60      	ldr	r3, [pc, #384]	; (8003d0c <UART_SetConfig+0x4e4>)
 8003b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	011c      	lsls	r4, r3, #4
 8003b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b96:	2200      	movs	r2, #0
 8003b98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ba0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ba4:	4642      	mov	r2, r8
 8003ba6:	464b      	mov	r3, r9
 8003ba8:	1891      	adds	r1, r2, r2
 8003baa:	61b9      	str	r1, [r7, #24]
 8003bac:	415b      	adcs	r3, r3
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bb4:	4641      	mov	r1, r8
 8003bb6:	1851      	adds	r1, r2, r1
 8003bb8:	6139      	str	r1, [r7, #16]
 8003bba:	4649      	mov	r1, r9
 8003bbc:	414b      	adcs	r3, r1
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bcc:	4659      	mov	r1, fp
 8003bce:	00cb      	lsls	r3, r1, #3
 8003bd0:	4651      	mov	r1, sl
 8003bd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	00ca      	lsls	r2, r1, #3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4603      	mov	r3, r0
 8003be0:	4642      	mov	r2, r8
 8003be2:	189b      	adds	r3, r3, r2
 8003be4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003be8:	464b      	mov	r3, r9
 8003bea:	460a      	mov	r2, r1
 8003bec:	eb42 0303 	adc.w	r3, r2, r3
 8003bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bfe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c0c:	4649      	mov	r1, r9
 8003c0e:	008b      	lsls	r3, r1, #2
 8003c10:	4641      	mov	r1, r8
 8003c12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c16:	4641      	mov	r1, r8
 8003c18:	008a      	lsls	r2, r1, #2
 8003c1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c1e:	f7fc faf3 	bl	8000208 <__aeabi_uldivmod>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4b39      	ldr	r3, [pc, #228]	; (8003d0c <UART_SetConfig+0x4e4>)
 8003c28:	fba3 1302 	umull	r1, r3, r3, r2
 8003c2c:	095b      	lsrs	r3, r3, #5
 8003c2e:	2164      	movs	r1, #100	; 0x64
 8003c30:	fb01 f303 	mul.w	r3, r1, r3
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	3332      	adds	r3, #50	; 0x32
 8003c3a:	4a34      	ldr	r2, [pc, #208]	; (8003d0c <UART_SetConfig+0x4e4>)
 8003c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c46:	441c      	add	r4, r3
 8003c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	673b      	str	r3, [r7, #112]	; 0x70
 8003c50:	677a      	str	r2, [r7, #116]	; 0x74
 8003c52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c56:	4642      	mov	r2, r8
 8003c58:	464b      	mov	r3, r9
 8003c5a:	1891      	adds	r1, r2, r2
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	415b      	adcs	r3, r3
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c66:	4641      	mov	r1, r8
 8003c68:	1851      	adds	r1, r2, r1
 8003c6a:	6039      	str	r1, [r7, #0]
 8003c6c:	4649      	mov	r1, r9
 8003c6e:	414b      	adcs	r3, r1
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c7e:	4659      	mov	r1, fp
 8003c80:	00cb      	lsls	r3, r1, #3
 8003c82:	4651      	mov	r1, sl
 8003c84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c88:	4651      	mov	r1, sl
 8003c8a:	00ca      	lsls	r2, r1, #3
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4603      	mov	r3, r0
 8003c92:	4642      	mov	r2, r8
 8003c94:	189b      	adds	r3, r3, r2
 8003c96:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c98:	464b      	mov	r3, r9
 8003c9a:	460a      	mov	r2, r1
 8003c9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ca0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	663b      	str	r3, [r7, #96]	; 0x60
 8003cac:	667a      	str	r2, [r7, #100]	; 0x64
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cba:	4649      	mov	r1, r9
 8003cbc:	008b      	lsls	r3, r1, #2
 8003cbe:	4641      	mov	r1, r8
 8003cc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	008a      	lsls	r2, r1, #2
 8003cc8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ccc:	f7fc fa9c 	bl	8000208 <__aeabi_uldivmod>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <UART_SetConfig+0x4e4>)
 8003cd6:	fba3 1302 	umull	r1, r3, r3, r2
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	2164      	movs	r1, #100	; 0x64
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	3332      	adds	r3, #50	; 0x32
 8003ce8:	4a08      	ldr	r2, [pc, #32]	; (8003d0c <UART_SetConfig+0x4e4>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	f003 020f 	and.w	r2, r3, #15
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4422      	add	r2, r4
 8003cfc:	609a      	str	r2, [r3, #8]
}
 8003cfe:	bf00      	nop
 8003d00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d04:	46bd      	mov	sp, r7
 8003d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d0a:	bf00      	nop
 8003d0c:	51eb851f 	.word	0x51eb851f

08003d10 <__libc_init_array>:
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	4d0d      	ldr	r5, [pc, #52]	; (8003d48 <__libc_init_array+0x38>)
 8003d14:	4c0d      	ldr	r4, [pc, #52]	; (8003d4c <__libc_init_array+0x3c>)
 8003d16:	1b64      	subs	r4, r4, r5
 8003d18:	10a4      	asrs	r4, r4, #2
 8003d1a:	2600      	movs	r6, #0
 8003d1c:	42a6      	cmp	r6, r4
 8003d1e:	d109      	bne.n	8003d34 <__libc_init_array+0x24>
 8003d20:	4d0b      	ldr	r5, [pc, #44]	; (8003d50 <__libc_init_array+0x40>)
 8003d22:	4c0c      	ldr	r4, [pc, #48]	; (8003d54 <__libc_init_array+0x44>)
 8003d24:	f000 f820 	bl	8003d68 <_init>
 8003d28:	1b64      	subs	r4, r4, r5
 8003d2a:	10a4      	asrs	r4, r4, #2
 8003d2c:	2600      	movs	r6, #0
 8003d2e:	42a6      	cmp	r6, r4
 8003d30:	d105      	bne.n	8003d3e <__libc_init_array+0x2e>
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d38:	4798      	blx	r3
 8003d3a:	3601      	adds	r6, #1
 8003d3c:	e7ee      	b.n	8003d1c <__libc_init_array+0xc>
 8003d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d42:	4798      	blx	r3
 8003d44:	3601      	adds	r6, #1
 8003d46:	e7f2      	b.n	8003d2e <__libc_init_array+0x1e>
 8003d48:	08003da0 	.word	0x08003da0
 8003d4c:	08003da0 	.word	0x08003da0
 8003d50:	08003da0 	.word	0x08003da0
 8003d54:	08003da4 	.word	0x08003da4

08003d58 <memset>:
 8003d58:	4402      	add	r2, r0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d100      	bne.n	8003d62 <memset+0xa>
 8003d60:	4770      	bx	lr
 8003d62:	f803 1b01 	strb.w	r1, [r3], #1
 8003d66:	e7f9      	b.n	8003d5c <memset+0x4>

08003d68 <_init>:
 8003d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6a:	bf00      	nop
 8003d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6e:	bc08      	pop	{r3}
 8003d70:	469e      	mov	lr, r3
 8003d72:	4770      	bx	lr

08003d74 <_fini>:
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d76:	bf00      	nop
 8003d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7a:	bc08      	pop	{r3}
 8003d7c:	469e      	mov	lr, r3
 8003d7e:	4770      	bx	lr
