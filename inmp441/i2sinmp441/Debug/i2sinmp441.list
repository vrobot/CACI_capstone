
i2sinmp441.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005170  08005170  00015170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b8  080051b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080051b8  080051b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051c0  080051c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051c0  080051c0  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051c4  080051c4  000151c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000904  20000070  08005238  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  08005238  00020974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbd2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bb8  00000000  00000000  0002cc72  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ac8  00000000  00000000  0002e830  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f8  00000000  00000000  0002f2f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026622  00000000  00000000  0002fcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008fad  00000000  00000000  00056312  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec073  00000000  00000000  0005f2bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b332  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd8  00000000  00000000  0014b3b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005158 	.word	0x08005158

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005158 	.word	0x08005158

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	_running = false;
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <main+0x24>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fbd3 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f80b 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f921 	bl	8000720 <MX_GPIO_Init>
  MX_DMA_Init();
 80004de:	f000 f901 	bl	80006e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e2:	f000 f8cf 	bl	8000684 <MX_USART2_UART_Init>
  MX_SAI1_Init();
 80004e6:	f000 f88b 	bl	8000600 <MX_SAI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <main+0x22>
 80004ec:	20000864 	.word	0x20000864

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b0b8      	sub	sp, #224	; 0xe0
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004fa:	2244      	movs	r2, #68	; 0x44
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f004 fd7a 	bl	8004ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000514:	463b      	mov	r3, r7
 8000516:	2288      	movs	r2, #136	; 0x88
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f004 fd6c 	bl	8004ff8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000520:	2302      	movs	r3, #2
 8000522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800052a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052e:	2310      	movs	r3, #16
 8000530:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000534:	2302      	movs	r3, #2
 8000536:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053a:	2302      	movs	r3, #2
 800053c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000546:	230a      	movs	r3, #10
 8000548:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800054c:	2307      	movs	r3, #7
 800054e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000552:	2302      	movs	r3, #2
 8000554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000558:	2302      	movs	r3, #2
 800055a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000562:	4618      	mov	r0, r3
 8000564:	f001 f9b2 	bl	80018cc <HAL_RCC_OscConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800056e:	f000 f9bd 	bl	80008ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000572:	230f      	movs	r3, #15
 8000574:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000578:	2303      	movs	r3, #3
 800057a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000590:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000594:	2104      	movs	r1, #4
 8000596:	4618      	mov	r0, r3
 8000598:	f001 fd7e 	bl	8002098 <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005a2:	f000 f9a3 	bl	80008ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_SAI1;
 80005a6:	f640 0302 	movw	r3, #2050	; 0x802
 80005aa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80005bc:	2308      	movs	r3, #8
 80005be:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005c0:	2307      	movs	r3, #7
 80005c2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80005cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d2:	463b      	mov	r3, r7
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 ff63 	bl	80024a0 <HAL_RCCEx_PeriphCLKConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80005e0:	f000 f984 	bl	80008ec <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e8:	f001 f91a 	bl	8001820 <HAL_PWREx_ControlVoltageScaling>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x106>
  {
    Error_Handler();
 80005f2:	f000 f97b 	bl	80008ec <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	37e0      	adds	r7, #224	; 0xe0
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_SAI1_Init+0x74>)
 8000606:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <MX_SAI1_Init+0x78>)
 8000608:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_SAI1_Init+0x74>)
 800060c:	2201      	movs	r2, #1
 800060e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_SAI1_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_SAI1_Init+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_SAI1_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_SAI1_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_8K;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_SAI1_Init+0x74>)
 800062a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800062e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_SAI1_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_SAI1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <MX_SAI1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8000642:	2302      	movs	r3, #2
 8000644:	2202      	movs	r2, #2
 8000646:	2100      	movs	r1, #0
 8000648:	480a      	ldr	r0, [pc, #40]	; (8000674 <MX_SAI1_Init+0x74>)
 800064a:	f003 f94f 	bl	80038ec <HAL_SAI_InitProtocol>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_SAI1_Init+0x58>
  {
    Error_Handler();
 8000654:	f000 f94a 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  if ((HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*) _sampleBuffer, MIC_SAMPLES_PER_PACKET * 2)) == HAL_OK) {
 8000658:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800065c:	4907      	ldr	r1, [pc, #28]	; (800067c <MX_SAI1_Init+0x7c>)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_SAI1_Init+0x74>)
 8000660:	f003 fb54 	bl	8003d0c <HAL_SAI_Receive_DMA>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d102      	bne.n	8000670 <MX_SAI1_Init+0x70>
	  _running = true;
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <MX_SAI1_Init+0x80>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END SAI1_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000868 	.word	0x20000868
 8000678:	40015404 	.word	0x40015404
 800067c:	200001dc 	.word	0x200001dc
 8000680:	20000864 	.word	0x20000864

08000684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_USART2_UART_Init+0x58>)
 800068a:	4a15      	ldr	r2, [pc, #84]	; (80006e0 <MX_USART2_UART_Init+0x5c>)
 800068c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_USART2_UART_Init+0x58>)
 8000690:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_USART2_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_USART2_UART_Init+0x58>)
 80006c8:	f003 ff9f 	bl	800460a <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006d2:	f000 f90b 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200008ec 	.word	0x200008ec
 80006e0:	40004400 	.word	0x40004400

080006e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_DMA_Init+0x38>)
 80006ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <MX_DMA_Init+0x38>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6493      	str	r3, [r2, #72]	; 0x48
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_DMA_Init+0x38>)
 80006f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2038      	movs	r0, #56	; 0x38
 8000708:	f000 fc0f 	bl	8000f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800070c:	2038      	movs	r0, #56	; 0x38
 800070e:	f000 fc28 	bl	8000f62 <HAL_NVIC_EnableIRQ>

}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b2b      	ldr	r3, [pc, #172]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a2a      	ldr	r2, [pc, #168]	; (80007e4 <MX_GPIO_Init+0xc4>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <MX_GPIO_Init+0xc4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a1e      	ldr	r2, [pc, #120]	; (80007e4 <MX_GPIO_Init+0xc4>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <MX_GPIO_Init+0xc4>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_GPIO_Init+0xc4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079e:	f001 f819 	bl	80017d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_GPIO_Init+0xc8>)
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	480d      	ldr	r0, [pc, #52]	; (80007ec <MX_GPIO_Init+0xcc>)
 80007b8:	f000 fe64 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007bc:	2320      	movs	r3, #32
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f000 fe55 	bl	8001484 <HAL_GPIO_Init>

}
 80007da:	bf00      	nop
 80007dc:	3728      	adds	r7, #40	; 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000
 80007e8:	10210000 	.word	0x10210000
 80007ec:	48000800 	.word	0x48000800

080007f0 <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	sendData(_sampleBuffer, _sendBuffer);
 80007f8:	4903      	ldr	r1, [pc, #12]	; (8000808 <HAL_SAI_RxHalfCpltCallback+0x18>)
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <HAL_SAI_RxHalfCpltCallback+0x1c>)
 80007fc:	f000 f818 	bl	8000830 <sendData>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000009c 	.word	0x2000009c
 800080c:	200001dc 	.word	0x200001dc

08000810 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	sendData(&_sampleBuffer[MIC_SAMPLES_PER_PACKET], &_sendBuffer[MIC_SAMPLES_PER_PACKET / 2]);
 8000818:	4903      	ldr	r1, [pc, #12]	; (8000828 <HAL_SAI_RxCpltCallback+0x18>)
 800081a:	4804      	ldr	r0, [pc, #16]	; (800082c <HAL_SAI_RxCpltCallback+0x1c>)
 800081c:	f000 f808 	bl	8000830 <sendData>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000013c 	.word	0x2000013c
 800082c:	2000045c 	.word	0x2000045c

08000830 <sendData>:

void sendData(volatile int32_t *data_in, int16_t *data_out) {
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b087      	sub	sp, #28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]

  if (_running) {
 800083a:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <sendData+0xb0>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d04a      	beq.n	80008d8 <sendData+0xa8>

      int16_t *dest = _processBuffer;
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <sendData+0xb4>)
 8000844:	617b      	str	r3, [r7, #20]

      for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8000846:	2300      	movs	r3, #0
 8000848:	827b      	strh	r3, [r7, #18]
 800084a:	e01f      	b.n	800088c <sendData+0x5c>

        // dither the LSB with a random bit

        int16_t sample = (data_in[0] & 0xfffffffe) | (rand() & 1);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	b29b      	uxth	r3, r3
 8000852:	f023 0301 	bic.w	r3, r3, #1
 8000856:	b29c      	uxth	r4, r3
 8000858:	f004 fbd6 	bl	8005008 <rand>
 800085c:	4603      	mov	r3, r0
 800085e:	b29b      	uxth	r3, r3
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	b29b      	uxth	r3, r3
 8000866:	4323      	orrs	r3, r4
 8000868:	b29b      	uxth	r3, r3
 800086a:	813b      	strh	r3, [r7, #8]

        *dest++ = sample;     // left channel has data
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	1c9a      	adds	r2, r3, #2
 8000870:	617a      	str	r2, [r7, #20]
 8000872:	893a      	ldrh	r2, [r7, #8]
 8000874:	801a      	strh	r2, [r3, #0]
        *dest++ = sample;     // right channel is duplicated from the left
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	1c9a      	adds	r2, r3, #2
 800087a:	617a      	str	r2, [r7, #20]
 800087c:	893a      	ldrh	r2, [r7, #8]
 800087e:	801a      	strh	r2, [r3, #0]
        data_in += 2;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3308      	adds	r3, #8
 8000884:	607b      	str	r3, [r7, #4]
      for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 8000886:	8a7b      	ldrh	r3, [r7, #18]
 8000888:	3301      	adds	r3, #1
 800088a:	827b      	strh	r3, [r7, #18]
 800088c:	8a7b      	ldrh	r3, [r7, #18]
 800088e:	2b4f      	cmp	r3, #79	; 0x4f
 8000890:	d9dc      	bls.n	800084c <sendData+0x1c>
      }

      int16_t *src = _processBuffer;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <sendData+0xb4>)
 8000894:	60fb      	str	r3, [r7, #12]
      dest = data_out;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	617b      	str	r3, [r7, #20]

      for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 800089a:	2300      	movs	r3, #0
 800089c:	817b      	strh	r3, [r7, #10]
 800089e:	e00c      	b.n	80008ba <sendData+0x8a>
        *dest++ = *src;
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	1c9a      	adds	r2, r3, #2
 80008a4:	617a      	str	r2, [r7, #20]
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80008ac:	801a      	strh	r2, [r3, #0]
        src += 2;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3304      	adds	r3, #4
 80008b2:	60fb      	str	r3, [r7, #12]
      for (uint16_t i = 0; i < MIC_SAMPLES_PER_PACKET / 2; i++) {
 80008b4:	897b      	ldrh	r3, [r7, #10]
 80008b6:	3301      	adds	r3, #1
 80008b8:	817b      	strh	r3, [r7, #10]
 80008ba:	897b      	ldrh	r3, [r7, #10]
 80008bc:	2b4f      	cmp	r3, #79	; 0x4f
 80008be:	d9ef      	bls.n	80008a0 <sendData+0x70>
      }


    // send the adjusted data to the host

    if ((HAL_UART_Transmit(&huart2, (uint8_t *) data_out, MIC_SAMPLES_PER_PACKET, HAL_MAX_DELAY)) != HAL_OK){
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008c4:	22a0      	movs	r2, #160	; 0xa0
 80008c6:	6839      	ldr	r1, [r7, #0]
 80008c8:	4807      	ldr	r0, [pc, #28]	; (80008e8 <sendData+0xb8>)
 80008ca:	f003 feec 	bl	80046a6 <HAL_UART_Transmit>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <sendData+0xa8>
      Error_Handler();
 80008d4:	f000 f80a 	bl	80008ec <Error_Handler>
    }
  }
}
 80008d8:	bf00      	nop
 80008da:	371c      	adds	r7, #28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd90      	pop	{r4, r7, pc}
 80008e0:	20000864 	.word	0x20000864
 80008e4:	200006dc 	.word	0x200006dc
 80008e8:	200008ec 	.word	0x200008ec

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <Error_Handler+0x6>

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_MspInit+0x44>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_MspInit+0x44>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6613      	str	r3, [r2, #96]	; 0x60
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_MspInit+0x44>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_MspInit+0x44>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <HAL_MspInit+0x44>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091c:	6593      	str	r3, [r2, #88]	; 0x58
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_MspInit+0x44>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <HAL_UART_MspInit+0x7c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d128      	bne.n	80009b0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <HAL_UART_MspInit+0x80>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	4a16      	ldr	r2, [pc, #88]	; (80009bc <HAL_UART_MspInit+0x80>)
 8000964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000968:	6593      	str	r3, [r2, #88]	; 0x58
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_UART_MspInit+0x80>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <HAL_UART_MspInit+0x80>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a10      	ldr	r2, [pc, #64]	; (80009bc <HAL_UART_MspInit+0x80>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_UART_MspInit+0x80>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800098e:	230c      	movs	r3, #12
 8000990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800099e:	2307      	movs	r3, #7
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ac:	f000 fd6a 	bl	8001484 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40004400 	.word	0x40004400
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a3a      	ldr	r2, [pc, #232]	; (8000ab8 <HAL_SAI_MspInit+0xf8>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d16e      	bne.n	8000ab0 <HAL_SAI_MspInit+0xf0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80009d2:	4b3a      	ldr	r3, [pc, #232]	; (8000abc <HAL_SAI_MspInit+0xfc>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d113      	bne.n	8000a02 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80009da:	4b39      	ldr	r3, [pc, #228]	; (8000ac0 <HAL_SAI_MspInit+0x100>)
 80009dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009de:	4a38      	ldr	r2, [pc, #224]	; (8000ac0 <HAL_SAI_MspInit+0x100>)
 80009e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e4:	6613      	str	r3, [r2, #96]	; 0x60
 80009e6:	4b36      	ldr	r3, [pc, #216]	; (8000ac0 <HAL_SAI_MspInit+0x100>)
 80009e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	204a      	movs	r0, #74	; 0x4a
 80009f8:	f000 fa97 	bl	8000f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 80009fc:	204a      	movs	r0, #74	; 0x4a
 80009fe:	f000 fab0 	bl	8000f62 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8000a02:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <HAL_SAI_MspInit+0xfc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	4a2c      	ldr	r2, [pc, #176]	; (8000abc <HAL_SAI_MspInit+0xfc>)
 8000a0a:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC3     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    PB9     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a1c:	230d      	movs	r3, #13
 8000a1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	4619      	mov	r1, r3
 8000a26:	4827      	ldr	r0, [pc, #156]	; (8000ac4 <HAL_SAI_MspInit+0x104>)
 8000a28:	f000 fd2c 	bl	8001484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000a2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a3e:	230d      	movs	r3, #13
 8000a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	4619      	mov	r1, r3
 8000a48:	481f      	ldr	r0, [pc, #124]	; (8000ac8 <HAL_SAI_MspInit+0x108>)
 8000a4a:	f000 fd1b 	bl	8001484 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Channel1;
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <HAL_SAI_MspInit+0x10c>)
 8000a50:	4a1f      	ldr	r2, [pc, #124]	; (8000ad0 <HAL_SAI_MspInit+0x110>)
 8000a52:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <HAL_SAI_MspInit+0x10c>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <HAL_SAI_MspInit+0x10c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <HAL_SAI_MspInit+0x10c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_SAI_MspInit+0x10c>)
 8000a68:	2280      	movs	r2, #128	; 0x80
 8000a6a:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <HAL_SAI_MspInit+0x10c>)
 8000a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a72:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_SAI_MspInit+0x10c>)
 8000a76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a7a:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <HAL_SAI_MspInit+0x10c>)
 8000a7e:	2220      	movs	r2, #32
 8000a80:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8000a82:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_SAI_MspInit+0x10c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8000a88:	4810      	ldr	r0, [pc, #64]	; (8000acc <HAL_SAI_MspInit+0x10c>)
 8000a8a:	f000 fa85 	bl	8000f98 <HAL_DMA_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_SAI_MspInit+0xd8>
    {
      Error_Handler();
 8000a94:	f7ff ff2a 	bl	80008ec <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a0c      	ldr	r2, [pc, #48]	; (8000acc <HAL_SAI_MspInit+0x10c>)
 8000a9c:	671a      	str	r2, [r3, #112]	; 0x70
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <HAL_SAI_MspInit+0x10c>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6293      	str	r3, [r2, #40]	; 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a09      	ldr	r2, [pc, #36]	; (8000acc <HAL_SAI_MspInit+0x10c>)
 8000aa8:	66da      	str	r2, [r3, #108]	; 0x6c
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_SAI_MspInit+0x10c>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6293      	str	r3, [r2, #40]	; 0x28

    }
}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40015404 	.word	0x40015404
 8000abc:	2000008c 	.word	0x2000008c
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	48000800 	.word	0x48000800
 8000ac8:	48000400 	.word	0x48000400
 8000acc:	2000081c 	.word	0x2000081c
 8000ad0:	40020408 	.word	0x40020408

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 f908 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <DMA2_Channel1_IRQHandler+0x10>)
 8000b2e:	f000 fbca 	bl	80012c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2000081c 	.word	0x2000081c

08000b3c <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <SAI1_IRQHandler+0x10>)
 8000b42:	f003 f971 	bl	8003e28 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000868 	.word	0x20000868

08000b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b58:	4a14      	ldr	r2, [pc, #80]	; (8000bac <_sbrk+0x5c>)
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <_sbrk+0x60>)
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d102      	bne.n	8000b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <_sbrk+0x64>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <_sbrk+0x68>)
 8000b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d207      	bcs.n	8000b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b80:	f004 fa10 	bl	8004fa4 <__errno>
 8000b84:	4602      	mov	r2, r0
 8000b86:	230c      	movs	r3, #12
 8000b88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b8e:	e009      	b.n	8000ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <_sbrk+0x64>)
 8000ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20018000 	.word	0x20018000
 8000bb0:	00000400 	.word	0x00000400
 8000bb4:	20000090 	.word	0x20000090
 8000bb8:	20000978 	.word	0x20000978

08000bbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <SystemInit+0x64>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a16      	ldr	r2, [pc, #88]	; (8000c20 <SystemInit+0x64>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <SystemInit+0x68>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <SystemInit+0x68>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <SystemInit+0x68>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <SystemInit+0x68>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <SystemInit+0x68>)
 8000be8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000bec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000bf0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <SystemInit+0x68>)
 8000bf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bf8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <SystemInit+0x68>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a09      	ldr	r2, [pc, #36]	; (8000c24 <SystemInit+0x68>)
 8000c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <SystemInit+0x68>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SystemInit+0x64>)
 8000c0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c12:	609a      	str	r2, [r3, #8]
#endif
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00
 8000c24:	40021000 	.word	0x40021000

08000c28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c2c:	f7ff ffc6 	bl	8000bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c32:	e003      	b.n	8000c3c <LoopCopyDataInit>

08000c34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c3a:	3104      	adds	r1, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c3c:	480a      	ldr	r0, [pc, #40]	; (8000c68 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c44:	d3f6      	bcc.n	8000c34 <CopyDataInit>
	ldr	r2, =_sbss
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c48:	e002      	b.n	8000c50 <LoopFillZerobss>

08000c4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c4c:	f842 3b04 	str.w	r3, [r2], #4

08000c50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <LoopForever+0x16>)
	cmp	r2, r3
 8000c52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c54:	d3f9      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c56:	f004 f9ab 	bl	8004fb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c5a:	f7ff fc35 	bl	80004c8 <main>

08000c5e <LoopForever>:

LoopForever:
    b LoopForever
 8000c5e:	e7fe      	b.n	8000c5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c60:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c64:	080051c8 	.word	0x080051c8
	ldr	r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c6c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000c70:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000c74:	20000974 	.word	0x20000974

08000c78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC1_2_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_Init+0x3c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <HAL_Init+0x3c>)
 8000c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c90:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c92:	2003      	movs	r0, #3
 8000c94:	f000 f93e 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f000 f80f 	bl	8000cbc <HAL_InitTick>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	71fb      	strb	r3, [r7, #7]
 8000ca8:	e001      	b.n	8000cae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000caa:	f7ff fe23 	bl	80008f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cae:	79fb      	ldrb	r3, [r7, #7]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40022000 	.word	0x40022000

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <HAL_InitTick+0x6c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d023      	beq.n	8000d18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_InitTick+0x70>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_InitTick+0x6c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f949 	bl	8000f7e <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10f      	bne.n	8000d12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	d809      	bhi.n	8000d0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d00:	f000 f913 	bl	8000f2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d04:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <HAL_InitTick+0x74>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	e007      	b.n	8000d1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
 8000d10:	e004      	b.n	8000d1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e001      	b.n	8000d1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008
 8000d58:	2000096c 	.word	0x2000096c

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	2000096c 	.word	0x2000096c

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	; (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	; (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	; (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	; 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee0:	d301      	bcc.n	8000ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00f      	b.n	8000f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <SysTick_Config+0x40>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eee:	210f      	movs	r1, #15
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef4:	f7ff ff8e 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <SysTick_Config+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <SysTick_Config+0x40>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff29 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3c:	f7ff ff3e 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	6978      	ldr	r0, [r7, #20]
 8000f48:	f7ff ff8e 	bl	8000e68 <NVIC_EncodePriority>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff5d 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff31 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffa2 	bl	8000ed0 <SysTick_Config>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e098      	b.n	80010dc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4b4d      	ldr	r3, [pc, #308]	; (80010e8 <HAL_DMA_Init+0x150>)
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d80f      	bhi.n	8000fd6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b4b      	ldr	r3, [pc, #300]	; (80010ec <HAL_DMA_Init+0x154>)
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a4b      	ldr	r2, [pc, #300]	; (80010f0 <HAL_DMA_Init+0x158>)
 8000fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc6:	091b      	lsrs	r3, r3, #4
 8000fc8:	009a      	lsls	r2, r3, #2
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a48      	ldr	r2, [pc, #288]	; (80010f4 <HAL_DMA_Init+0x15c>)
 8000fd2:	641a      	str	r2, [r3, #64]	; 0x40
 8000fd4:	e00e      	b.n	8000ff4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b46      	ldr	r3, [pc, #280]	; (80010f8 <HAL_DMA_Init+0x160>)
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a43      	ldr	r2, [pc, #268]	; (80010f0 <HAL_DMA_Init+0x158>)
 8000fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe6:	091b      	lsrs	r3, r3, #4
 8000fe8:	009a      	lsls	r2, r3, #2
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a42      	ldr	r2, [pc, #264]	; (80010fc <HAL_DMA_Init+0x164>)
 8000ff2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800100a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800100e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001018:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001024:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001030:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800104e:	d039      	beq.n	80010c4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <HAL_DMA_Init+0x15c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d11a      	bne.n	8001090 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800105a:	4b29      	ldr	r3, [pc, #164]	; (8001100 <HAL_DMA_Init+0x168>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f003 031c 	and.w	r3, r3, #28
 8001066:	210f      	movs	r1, #15
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	4924      	ldr	r1, [pc, #144]	; (8001100 <HAL_DMA_Init+0x168>)
 8001070:	4013      	ands	r3, r2
 8001072:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <HAL_DMA_Init+0x168>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6859      	ldr	r1, [r3, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001080:	f003 031c 	and.w	r3, r3, #28
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	491d      	ldr	r1, [pc, #116]	; (8001100 <HAL_DMA_Init+0x168>)
 800108a:	4313      	orrs	r3, r2
 800108c:	600b      	str	r3, [r1, #0]
 800108e:	e019      	b.n	80010c4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001090:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <HAL_DMA_Init+0x16c>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001098:	f003 031c 	and.w	r3, r3, #28
 800109c:	210f      	movs	r1, #15
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	4917      	ldr	r1, [pc, #92]	; (8001104 <HAL_DMA_Init+0x16c>)
 80010a6:	4013      	ands	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <HAL_DMA_Init+0x16c>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6859      	ldr	r1, [r3, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f003 031c 	and.w	r3, r3, #28
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	4911      	ldr	r1, [pc, #68]	; (8001104 <HAL_DMA_Init+0x16c>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	40020407 	.word	0x40020407
 80010ec:	bffdfff8 	.word	0xbffdfff8
 80010f0:	cccccccd 	.word	0xcccccccd
 80010f4:	40020000 	.word	0x40020000
 80010f8:	bffdfbf8 	.word	0xbffdfbf8
 80010fc:	40020400 	.word	0x40020400
 8001100:	400200a8 	.word	0x400200a8
 8001104:	400204a8 	.word	0x400204a8

08001108 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001120:	2b01      	cmp	r3, #1
 8001122:	d101      	bne.n	8001128 <HAL_DMA_Start_IT+0x20>
 8001124:	2302      	movs	r3, #2
 8001126:	e04b      	b.n	80011c0 <HAL_DMA_Start_IT+0xb8>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b01      	cmp	r3, #1
 800113a:	d13a      	bne.n	80011b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2202      	movs	r2, #2
 8001140:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f022 0201 	bic.w	r2, r2, #1
 8001158:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f000 f95f 	bl	8001424 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	2b00      	cmp	r3, #0
 800116c:	d008      	beq.n	8001180 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 020e 	orr.w	r2, r2, #14
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e00f      	b.n	80011a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0204 	bic.w	r2, r2, #4
 800118e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 020a 	orr.w	r2, r2, #10
 800119e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0201 	orr.w	r2, r2, #1
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	e005      	b.n	80011be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80011ba:	2302      	movs	r3, #2
 80011bc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80011be:	7dfb      	ldrb	r3, [r7, #23]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d008      	beq.n	80011f2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2204      	movs	r2, #4
 80011e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e022      	b.n	8001238 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 020e 	bic.w	r2, r2, #14
 8001200:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0201 	bic.w	r2, r2, #1
 8001210:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f003 021c 	and.w	r2, r3, #28
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	2101      	movs	r1, #1
 8001220:	fa01 f202 	lsl.w	r2, r1, r2
 8001224:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d005      	beq.n	8001268 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2204      	movs	r2, #4
 8001260:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	e029      	b.n	80012bc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 020e 	bic.w	r2, r2, #14
 8001276:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0201 	bic.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128c:	f003 021c 	and.w	r2, r3, #28
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	2101      	movs	r1, #1
 8001296:	fa01 f202 	lsl.w	r2, r1, r2
 800129a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	4798      	blx	r3
    }
  }
  return status;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f003 031c 	and.w	r3, r3, #28
 80012e6:	2204      	movs	r2, #4
 80012e8:	409a      	lsls	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d026      	beq.n	8001340 <HAL_DMA_IRQHandler+0x7a>
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d021      	beq.n	8001340 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0320 	and.w	r3, r3, #32
 8001306:	2b00      	cmp	r3, #0
 8001308:	d107      	bne.n	800131a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0204 	bic.w	r2, r2, #4
 8001318:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f003 021c 	and.w	r2, r3, #28
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	2104      	movs	r1, #4
 8001328:	fa01 f202 	lsl.w	r2, r1, r2
 800132c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	2b00      	cmp	r3, #0
 8001334:	d071      	beq.n	800141a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800133e:	e06c      	b.n	800141a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001344:	f003 031c 	and.w	r3, r3, #28
 8001348:	2202      	movs	r2, #2
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d02e      	beq.n	80013b2 <HAL_DMA_IRQHandler+0xec>
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d029      	beq.n	80013b2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0320 	and.w	r3, r3, #32
 8001368:	2b00      	cmp	r3, #0
 800136a:	d10b      	bne.n	8001384 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 020a 	bic.w	r2, r2, #10
 800137a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	f003 021c 	and.w	r2, r3, #28
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	2102      	movs	r1, #2
 8001392:	fa01 f202 	lsl.w	r2, r1, r2
 8001396:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d038      	beq.n	800141a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013b0:	e033      	b.n	800141a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f003 031c 	and.w	r3, r3, #28
 80013ba:	2208      	movs	r2, #8
 80013bc:	409a      	lsls	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d02a      	beq.n	800141c <HAL_DMA_IRQHandler+0x156>
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d025      	beq.n	800141c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 020e 	bic.w	r2, r2, #14
 80013de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	f003 021c 	and.w	r2, r3, #28
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	2101      	movs	r1, #1
 80013ee:	fa01 f202 	lsl.w	r2, r1, r2
 80013f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140e:	2b00      	cmp	r3, #0
 8001410:	d004      	beq.n	800141c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800141a:	bf00      	nop
 800141c:	bf00      	nop
}
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	f003 021c 	and.w	r2, r3, #28
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	2101      	movs	r1, #1
 8001440:	fa01 f202 	lsl.w	r2, r1, r2
 8001444:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2b10      	cmp	r3, #16
 8001454:	d108      	bne.n	8001468 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001466:	e007      	b.n	8001478 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68ba      	ldr	r2, [r7, #8]
 800146e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	60da      	str	r2, [r3, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001492:	e17f      	b.n	8001794 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	2101      	movs	r1, #1
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	4013      	ands	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 8171 	beq.w	800178e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d00b      	beq.n	80014cc <HAL_GPIO_Init+0x48>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d007      	beq.n	80014cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014c0:	2b11      	cmp	r3, #17
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b12      	cmp	r3, #18
 80014ca:	d130      	bne.n	800152e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001502:	2201      	movs	r2, #1
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	f003 0201 	and.w	r2, r3, #1
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b03      	cmp	r3, #3
 8001538:	d118      	bne.n	800156c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001540:	2201      	movs	r2, #1
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	f003 0201 	and.w	r2, r3, #1
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2203      	movs	r2, #3
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x128>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b12      	cmp	r3, #18
 80015aa:	d123      	bne.n	80015f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	220f      	movs	r2, #15
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	6939      	ldr	r1, [r7, #16]
 80015f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0203 	and.w	r2, r3, #3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80ac 	beq.w	800178e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	4b5e      	ldr	r3, [pc, #376]	; (80017b0 <HAL_GPIO_Init+0x32c>)
 8001638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163a:	4a5d      	ldr	r2, [pc, #372]	; (80017b0 <HAL_GPIO_Init+0x32c>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6613      	str	r3, [r2, #96]	; 0x60
 8001642:	4b5b      	ldr	r3, [pc, #364]	; (80017b0 <HAL_GPIO_Init+0x32c>)
 8001644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800164e:	4a59      	ldr	r2, [pc, #356]	; (80017b4 <HAL_GPIO_Init+0x330>)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	3302      	adds	r3, #2
 8001656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	220f      	movs	r2, #15
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001678:	d025      	beq.n	80016c6 <HAL_GPIO_Init+0x242>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a4e      	ldr	r2, [pc, #312]	; (80017b8 <HAL_GPIO_Init+0x334>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d01f      	beq.n	80016c2 <HAL_GPIO_Init+0x23e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4d      	ldr	r2, [pc, #308]	; (80017bc <HAL_GPIO_Init+0x338>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d019      	beq.n	80016be <HAL_GPIO_Init+0x23a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4c      	ldr	r2, [pc, #304]	; (80017c0 <HAL_GPIO_Init+0x33c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0x236>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4b      	ldr	r2, [pc, #300]	; (80017c4 <HAL_GPIO_Init+0x340>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00d      	beq.n	80016b6 <HAL_GPIO_Init+0x232>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4a      	ldr	r2, [pc, #296]	; (80017c8 <HAL_GPIO_Init+0x344>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d007      	beq.n	80016b2 <HAL_GPIO_Init+0x22e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a49      	ldr	r2, [pc, #292]	; (80017cc <HAL_GPIO_Init+0x348>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_GPIO_Init+0x22a>
 80016aa:	2306      	movs	r3, #6
 80016ac:	e00c      	b.n	80016c8 <HAL_GPIO_Init+0x244>
 80016ae:	2307      	movs	r3, #7
 80016b0:	e00a      	b.n	80016c8 <HAL_GPIO_Init+0x244>
 80016b2:	2305      	movs	r3, #5
 80016b4:	e008      	b.n	80016c8 <HAL_GPIO_Init+0x244>
 80016b6:	2304      	movs	r3, #4
 80016b8:	e006      	b.n	80016c8 <HAL_GPIO_Init+0x244>
 80016ba:	2303      	movs	r3, #3
 80016bc:	e004      	b.n	80016c8 <HAL_GPIO_Init+0x244>
 80016be:	2302      	movs	r3, #2
 80016c0:	e002      	b.n	80016c8 <HAL_GPIO_Init+0x244>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <HAL_GPIO_Init+0x244>
 80016c6:	2300      	movs	r3, #0
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	f002 0203 	and.w	r2, r2, #3
 80016ce:	0092      	lsls	r2, r2, #2
 80016d0:	4093      	lsls	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016d8:	4936      	ldr	r1, [pc, #216]	; (80017b4 <HAL_GPIO_Init+0x330>)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	089b      	lsrs	r3, r3, #2
 80016de:	3302      	adds	r3, #2
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016e6:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <HAL_GPIO_Init+0x34c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800170a:	4a31      	ldr	r2, [pc, #196]	; (80017d0 <HAL_GPIO_Init+0x34c>)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001710:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <HAL_GPIO_Init+0x34c>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001734:	4a26      	ldr	r2, [pc, #152]	; (80017d0 <HAL_GPIO_Init+0x34c>)
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800173a:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <HAL_GPIO_Init+0x34c>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800175e:	4a1c      	ldr	r2, [pc, #112]	; (80017d0 <HAL_GPIO_Init+0x34c>)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <HAL_GPIO_Init+0x34c>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001788:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <HAL_GPIO_Init+0x34c>)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3301      	adds	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa22 f303 	lsr.w	r3, r2, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f47f ae78 	bne.w	8001494 <HAL_GPIO_Init+0x10>
  }
}
 80017a4:	bf00      	nop
 80017a6:	371c      	adds	r7, #28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010000 	.word	0x40010000
 80017b8:	48000400 	.word	0x48000400
 80017bc:	48000800 	.word	0x48000800
 80017c0:	48000c00 	.word	0x48000c00
 80017c4:	48001000 	.word	0x48001000
 80017c8:	48001400 	.word	0x48001400
 80017cc:	48001800 	.word	0x48001800
 80017d0:	40010400 	.word	0x40010400

080017d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
 80017e0:	4613      	mov	r3, r2
 80017e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e4:	787b      	ldrb	r3, [r7, #1]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ea:	887a      	ldrh	r2, [r7, #2]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <HAL_PWREx_GetVoltageRange+0x18>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40007000 	.word	0x40007000

08001820 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800182e:	d130      	bne.n	8001892 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800183c:	d038      	beq.n	80018b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001846:	4a1e      	ldr	r2, [pc, #120]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2232      	movs	r2, #50	; 0x32
 8001854:	fb02 f303 	mul.w	r3, r2, r3
 8001858:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	0c9b      	lsrs	r3, r3, #18
 8001860:	3301      	adds	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001864:	e002      	b.n	800186c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	3b01      	subs	r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001878:	d102      	bne.n	8001880 <HAL_PWREx_ControlVoltageScaling+0x60>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f2      	bne.n	8001866 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188c:	d110      	bne.n	80018b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e00f      	b.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800189a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800189e:	d007      	beq.n	80018b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a8:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40007000 	.word	0x40007000
 80018c4:	20000000 	.word	0x20000000
 80018c8:	431bde83 	.word	0x431bde83

080018cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e3d4      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018de:	4ba1      	ldr	r3, [pc, #644]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018e8:	4b9e      	ldr	r3, [pc, #632]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80e4 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d007      	beq.n	8001916 <HAL_RCC_OscConfig+0x4a>
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b0c      	cmp	r3, #12
 800190a:	f040 808b 	bne.w	8001a24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2b01      	cmp	r3, #1
 8001912:	f040 8087 	bne.w	8001a24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001916:	4b93      	ldr	r3, [pc, #588]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <HAL_RCC_OscConfig+0x62>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e3ac      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1a      	ldr	r2, [r3, #32]
 8001932:	4b8c      	ldr	r3, [pc, #560]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d004      	beq.n	8001948 <HAL_RCC_OscConfig+0x7c>
 800193e:	4b89      	ldr	r3, [pc, #548]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001946:	e005      	b.n	8001954 <HAL_RCC_OscConfig+0x88>
 8001948:	4b86      	ldr	r3, [pc, #536]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 800194a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001954:	4293      	cmp	r3, r2
 8001956:	d223      	bcs.n	80019a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	4618      	mov	r0, r3
 800195e:	f000 fd3f 	bl	80023e0 <RCC_SetFlashLatencyFromMSIRange>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e38d      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800196c:	4b7d      	ldr	r3, [pc, #500]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a7c      	ldr	r2, [pc, #496]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001972:	f043 0308 	orr.w	r3, r3, #8
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b7a      	ldr	r3, [pc, #488]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4977      	ldr	r1, [pc, #476]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800198a:	4b76      	ldr	r3, [pc, #472]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	4972      	ldr	r1, [pc, #456]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 800199a:	4313      	orrs	r3, r2
 800199c:	604b      	str	r3, [r1, #4]
 800199e:	e025      	b.n	80019ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a0:	4b70      	ldr	r3, [pc, #448]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a6f      	ldr	r2, [pc, #444]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 80019a6:	f043 0308 	orr.w	r3, r3, #8
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b6d      	ldr	r3, [pc, #436]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	496a      	ldr	r1, [pc, #424]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019be:	4b69      	ldr	r3, [pc, #420]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	4965      	ldr	r1, [pc, #404]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d109      	bne.n	80019ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 fcff 	bl	80023e0 <RCC_SetFlashLatencyFromMSIRange>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e34d      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ec:	f000 fc36 	bl	800225c <HAL_RCC_GetSysClockFreq>
 80019f0:	4601      	mov	r1, r0
 80019f2:	4b5c      	ldr	r3, [pc, #368]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	4a5a      	ldr	r2, [pc, #360]	; (8001b68 <HAL_RCC_OscConfig+0x29c>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	fa21 f303 	lsr.w	r3, r1, r3
 8001a08:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <HAL_RCC_OscConfig+0x2a0>)
 8001a0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a0c:	4b58      	ldr	r3, [pc, #352]	; (8001b70 <HAL_RCC_OscConfig+0x2a4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f953 	bl	8000cbc <HAL_InitTick>
 8001a16:	4603      	mov	r3, r0
 8001a18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d052      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	e331      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d032      	beq.n	8001a92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a2c:	4b4d      	ldr	r3, [pc, #308]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a4c      	ldr	r2, [pc, #304]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a38:	f7ff f990 	bl	8000d5c <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a40:	f7ff f98c 	bl	8000d5c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e31a      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a52:	4b44      	ldr	r3, [pc, #272]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a5e:	4b41      	ldr	r3, [pc, #260]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a40      	ldr	r2, [pc, #256]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001a64:	f043 0308 	orr.w	r3, r3, #8
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b3e      	ldr	r3, [pc, #248]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	493b      	ldr	r1, [pc, #236]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a7c:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	4936      	ldr	r1, [pc, #216]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
 8001a90:	e01a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a92:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a33      	ldr	r2, [pc, #204]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff f95d 	bl	8000d5c <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aa6:	f7ff f959 	bl	8000d5c <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e2e7      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f0      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x1da>
 8001ac4:	e000      	b.n	8001ac8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ac6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d074      	beq.n	8001bbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d005      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x21a>
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	2b0c      	cmp	r3, #12
 8001ade:	d10e      	bne.n	8001afe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d10b      	bne.n	8001afe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d064      	beq.n	8001bbc <HAL_RCC_OscConfig+0x2f0>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d160      	bne.n	8001bbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e2c4      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x24a>
 8001b08:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a15      	ldr	r2, [pc, #84]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	e01d      	b.n	8001b52 <HAL_RCC_OscConfig+0x286>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b1e:	d10c      	bne.n	8001b3a <HAL_RCC_OscConfig+0x26e>
 8001b20:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001b26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0c      	ldr	r2, [pc, #48]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	e00b      	b.n	8001b52 <HAL_RCC_OscConfig+0x286>
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <HAL_RCC_OscConfig+0x298>)
 8001b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d01c      	beq.n	8001b94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5a:	f7ff f8ff 	bl	8000d5c <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b60:	e011      	b.n	8001b86 <HAL_RCC_OscConfig+0x2ba>
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	08005170 	.word	0x08005170
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff f8f2 	bl	8000d5c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	; 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e280      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b86:	4baf      	ldr	r3, [pc, #700]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x2a8>
 8001b92:	e014      	b.n	8001bbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff f8e2 	bl	8000d5c <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff f8de 	bl	8000d5c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e26c      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bae:	4ba5      	ldr	r3, [pc, #660]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x2d0>
 8001bba:	e000      	b.n	8001bbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d060      	beq.n	8001c8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_OscConfig+0x310>
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d119      	bne.n	8001c0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d116      	bne.n	8001c0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bdc:	4b99      	ldr	r3, [pc, #612]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x328>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e249      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf4:	4b93      	ldr	r3, [pc, #588]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	061b      	lsls	r3, r3, #24
 8001c02:	4990      	ldr	r1, [pc, #576]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c08:	e040      	b.n	8001c8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d023      	beq.n	8001c5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c12:	4b8c      	ldr	r3, [pc, #560]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a8b      	ldr	r2, [pc, #556]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1e:	f7ff f89d 	bl	8000d5c <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c26:	f7ff f899 	bl	8000d5c <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e227      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c38:	4b82      	ldr	r3, [pc, #520]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b7f      	ldr	r3, [pc, #508]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	497c      	ldr	r1, [pc, #496]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
 8001c58:	e018      	b.n	8001c8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5a:	4b7a      	ldr	r3, [pc, #488]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a79      	ldr	r2, [pc, #484]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c66:	f7ff f879 	bl	8000d5c <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6e:	f7ff f875 	bl	8000d5c <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e203      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c80:	4b70      	ldr	r3, [pc, #448]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f0      	bne.n	8001c6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d03c      	beq.n	8001d12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01c      	beq.n	8001cda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca0:	4b68      	ldr	r3, [pc, #416]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca6:	4a67      	ldr	r2, [pc, #412]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb0:	f7ff f854 	bl	8000d5c <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb8:	f7ff f850 	bl	8000d5c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e1de      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cca:	4b5e      	ldr	r3, [pc, #376]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0ef      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x3ec>
 8001cd8:	e01b      	b.n	8001d12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cda:	4b5a      	ldr	r3, [pc, #360]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce0:	4a58      	ldr	r2, [pc, #352]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001ce2:	f023 0301 	bic.w	r3, r3, #1
 8001ce6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cea:	f7ff f837 	bl	8000d5c <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf2:	f7ff f833 	bl	8000d5c <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e1c1      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d04:	4b4f      	ldr	r3, [pc, #316]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1ef      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 80a6 	beq.w	8001e6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d20:	2300      	movs	r3, #0
 8001d22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d24:	4b47      	ldr	r3, [pc, #284]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10d      	bne.n	8001d4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d30:	4b44      	ldr	r3, [pc, #272]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d34:	4a43      	ldr	r2, [pc, #268]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d3c:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4c:	4b3e      	ldr	r3, [pc, #248]	; (8001e48 <HAL_RCC_OscConfig+0x57c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d118      	bne.n	8001d8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d58:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <HAL_RCC_OscConfig+0x57c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a3a      	ldr	r2, [pc, #232]	; (8001e48 <HAL_RCC_OscConfig+0x57c>)
 8001d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d64:	f7fe fffa 	bl	8000d5c <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6c:	f7fe fff6 	bl	8000d5c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e184      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7e:	4b32      	ldr	r3, [pc, #200]	; (8001e48 <HAL_RCC_OscConfig+0x57c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d108      	bne.n	8001da4 <HAL_RCC_OscConfig+0x4d8>
 8001d92:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d98:	4a2a      	ldr	r2, [pc, #168]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da2:	e024      	b.n	8001dee <HAL_RCC_OscConfig+0x522>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b05      	cmp	r3, #5
 8001daa:	d110      	bne.n	8001dce <HAL_RCC_OscConfig+0x502>
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db2:	4a24      	ldr	r2, [pc, #144]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dbc:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc2:	4a20      	ldr	r2, [pc, #128]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dcc:	e00f      	b.n	8001dee <HAL_RCC_OscConfig+0x522>
 8001dce:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd4:	4a1b      	ldr	r2, [pc, #108]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de4:	4a17      	ldr	r2, [pc, #92]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001de6:	f023 0304 	bic.w	r3, r3, #4
 8001dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d016      	beq.n	8001e24 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df6:	f7fe ffb1 	bl	8000d5c <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfc:	e00a      	b.n	8001e14 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7fe ffad 	bl	8000d5c <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e139      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCC_OscConfig+0x578>)
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0ed      	beq.n	8001dfe <HAL_RCC_OscConfig+0x532>
 8001e22:	e01a      	b.n	8001e5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e24:	f7fe ff9a 	bl	8000d5c <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e2a:	e00f      	b.n	8001e4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7fe ff96 	bl	8000d5c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d906      	bls.n	8001e4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e122      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e4c:	4b90      	ldr	r3, [pc, #576]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1e8      	bne.n	8001e2c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e5a:	7ffb      	ldrb	r3, [r7, #31]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d105      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e60:	4b8b      	ldr	r3, [pc, #556]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	4a8a      	ldr	r2, [pc, #552]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 8108 	beq.w	8002086 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	f040 80d0 	bne.w	8002020 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e80:	4b83      	ldr	r3, [pc, #524]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f003 0203 	and.w	r2, r3, #3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d130      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d127      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d11f      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ec0:	2a07      	cmp	r2, #7
 8001ec2:	bf14      	ite	ne
 8001ec4:	2201      	movne	r2, #1
 8001ec6:	2200      	moveq	r2, #0
 8001ec8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d113      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed8:	085b      	lsrs	r3, r3, #1
 8001eda:	3b01      	subs	r3, #1
 8001edc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d109      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	085b      	lsrs	r3, r3, #1
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d06e      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2b0c      	cmp	r3, #12
 8001efa:	d069      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001efc:	4b64      	ldr	r3, [pc, #400]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f08:	4b61      	ldr	r3, [pc, #388]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0b7      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f18:	4b5d      	ldr	r3, [pc, #372]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a5c      	ldr	r2, [pc, #368]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f24:	f7fe ff1a 	bl	8000d5c <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7fe ff16 	bl	8000d5c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e0a4      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f3e:	4b54      	ldr	r3, [pc, #336]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f4a:	4b51      	ldr	r3, [pc, #324]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	4b51      	ldr	r3, [pc, #324]	; (8002094 <HAL_RCC_OscConfig+0x7c8>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f5a:	3a01      	subs	r2, #1
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f64:	0212      	lsls	r2, r2, #8
 8001f66:	4311      	orrs	r1, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f6c:	0852      	lsrs	r2, r2, #1
 8001f6e:	3a01      	subs	r2, #1
 8001f70:	0552      	lsls	r2, r2, #21
 8001f72:	4311      	orrs	r1, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f78:	0852      	lsrs	r2, r2, #1
 8001f7a:	3a01      	subs	r2, #1
 8001f7c:	0652      	lsls	r2, r2, #25
 8001f7e:	4311      	orrs	r1, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f84:	0912      	lsrs	r2, r2, #4
 8001f86:	0452      	lsls	r2, r2, #17
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	4941      	ldr	r1, [pc, #260]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f90:	4b3f      	ldr	r3, [pc, #252]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a3e      	ldr	r2, [pc, #248]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f9c:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4a3b      	ldr	r2, [pc, #236]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fa8:	f7fe fed8 	bl	8000d5c <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7fe fed4 	bl	8000d5c <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e062      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc2:	4b33      	ldr	r3, [pc, #204]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fce:	e05a      	b.n	8002086 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e059      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd4:	4b2e      	ldr	r3, [pc, #184]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d152      	bne.n	8002086 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a2a      	ldr	r2, [pc, #168]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fec:	4b28      	ldr	r3, [pc, #160]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a27      	ldr	r2, [pc, #156]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8001ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ff6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ff8:	f7fe feb0 	bl	8000d5c <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002000:	f7fe feac 	bl	8000d5c <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e03a      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002012:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x734>
 800201e:	e032      	b.n	8002086 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d02d      	beq.n	8002082 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a19      	ldr	r2, [pc, #100]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 800202c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002030:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002032:	4b17      	ldr	r3, [pc, #92]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d105      	bne.n	800204a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	4a13      	ldr	r2, [pc, #76]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8002044:	f023 0303 	bic.w	r3, r3, #3
 8002048:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8002050:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002058:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205a:	f7fe fe7f 	bl	8000d5c <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002062:	f7fe fe7b 	bl	8000d5c <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e009      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_RCC_OscConfig+0x7c4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f0      	bne.n	8002062 <HAL_RCC_OscConfig+0x796>
 8002080:	e001      	b.n	8002086 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3720      	adds	r7, #32
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40021000 	.word	0x40021000
 8002094:	f99d808c 	.word	0xf99d808c

08002098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0c8      	b.n	800223e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020ac:	4b66      	ldr	r3, [pc, #408]	; (8002248 <HAL_RCC_ClockConfig+0x1b0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d910      	bls.n	80020dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b63      	ldr	r3, [pc, #396]	; (8002248 <HAL_RCC_ClockConfig+0x1b0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 0207 	bic.w	r2, r3, #7
 80020c2:	4961      	ldr	r1, [pc, #388]	; (8002248 <HAL_RCC_ClockConfig+0x1b0>)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	4b5f      	ldr	r3, [pc, #380]	; (8002248 <HAL_RCC_ClockConfig+0x1b0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0b0      	b.n	800223e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d04c      	beq.n	8002182 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f0:	4b56      	ldr	r3, [pc, #344]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d121      	bne.n	8002140 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e09e      	b.n	800223e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d107      	bne.n	8002118 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002108:	4b50      	ldr	r3, [pc, #320]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d115      	bne.n	8002140 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e092      	b.n	800223e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d107      	bne.n	8002130 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002120:	4b4a      	ldr	r3, [pc, #296]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e086      	b.n	800223e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002130:	4b46      	ldr	r3, [pc, #280]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e07e      	b.n	800223e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002140:	4b42      	ldr	r3, [pc, #264]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f023 0203 	bic.w	r2, r3, #3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	493f      	ldr	r1, [pc, #252]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002152:	f7fe fe03 	bl	8000d5c <HAL_GetTick>
 8002156:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002158:	e00a      	b.n	8002170 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215a:	f7fe fdff 	bl	8000d5c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	; 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e066      	b.n	800223e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002170:	4b36      	ldr	r3, [pc, #216]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 020c 	and.w	r2, r3, #12
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	429a      	cmp	r2, r3
 8002180:	d1eb      	bne.n	800215a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d008      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218e:	4b2f      	ldr	r3, [pc, #188]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	492c      	ldr	r1, [pc, #176]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 800219c:	4313      	orrs	r3, r2
 800219e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <HAL_RCC_ClockConfig+0x1b0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d210      	bcs.n	80021d0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b26      	ldr	r3, [pc, #152]	; (8002248 <HAL_RCC_ClockConfig+0x1b0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 0207 	bic.w	r2, r3, #7
 80021b6:	4924      	ldr	r1, [pc, #144]	; (8002248 <HAL_RCC_ClockConfig+0x1b0>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <HAL_RCC_ClockConfig+0x1b0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e036      	b.n	800223e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021dc:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4918      	ldr	r1, [pc, #96]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4910      	ldr	r1, [pc, #64]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800220e:	f000 f825 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8002212:	4601      	mov	r1, r0
 8002214:	4b0d      	ldr	r3, [pc, #52]	; (800224c <HAL_RCC_ClockConfig+0x1b4>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	4a0c      	ldr	r2, [pc, #48]	; (8002250 <HAL_RCC_ClockConfig+0x1b8>)
 8002220:	5cd3      	ldrb	r3, [r2, r3]
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	fa21 f303 	lsr.w	r3, r1, r3
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fd42 	bl	8000cbc <HAL_InitTick>
 8002238:	4603      	mov	r3, r0
 800223a:	72fb      	strb	r3, [r7, #11]

  return status;
 800223c:	7afb      	ldrb	r3, [r7, #11]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40022000 	.word	0x40022000
 800224c:	40021000 	.word	0x40021000
 8002250:	08005170 	.word	0x08005170
 8002254:	20000000 	.word	0x20000000
 8002258:	20000004 	.word	0x20000004

0800225c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800226a:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002274:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x34>
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b0c      	cmp	r3, #12
 8002288:	d121      	bne.n	80022ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d11e      	bne.n	80022ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002290:	4b33      	ldr	r3, [pc, #204]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d107      	bne.n	80022ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800229c:	4b30      	ldr	r3, [pc, #192]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 800229e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	e005      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022ac:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022b8:	4a2a      	ldr	r2, [pc, #168]	; (8002364 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10d      	bne.n	80022e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d102      	bne.n	80022da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022d4:	4b24      	ldr	r3, [pc, #144]	; (8002368 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022d6:	61bb      	str	r3, [r7, #24]
 80022d8:	e004      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022e0:	4b22      	ldr	r3, [pc, #136]	; (800236c <HAL_RCC_GetSysClockFreq+0x110>)
 80022e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d133      	bne.n	8002352 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d002      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0xa4>
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0xaa>
 80022fe:	e005      	b.n	800230c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002302:	617b      	str	r3, [r7, #20]
      break;
 8002304:	e005      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_RCC_GetSysClockFreq+0x110>)
 8002308:	617b      	str	r3, [r7, #20]
      break;
 800230a:	e002      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	617b      	str	r3, [r7, #20]
      break;
 8002310:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002312:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	3301      	adds	r3, #1
 800231e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	fb02 f203 	mul.w	r2, r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	fbb2 f3f3 	udiv	r3, r2, r3
 8002336:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_RCC_GetSysClockFreq+0x104>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	0e5b      	lsrs	r3, r3, #25
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	3301      	adds	r3, #1
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002352:	69bb      	ldr	r3, [r7, #24]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3724      	adds	r7, #36	; 0x24
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40021000 	.word	0x40021000
 8002364:	08005188 	.word	0x08005188
 8002368:	00f42400 	.word	0x00f42400
 800236c:	007a1200 	.word	0x007a1200

08002370 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <HAL_RCC_GetHCLKFreq+0x14>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000000 	.word	0x20000000

08002388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800238c:	f7ff fff0 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 8002390:	4601      	mov	r1, r0
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800239e:	5cd3      	ldrb	r3, [r2, r3]
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	08005180 	.word	0x08005180

080023b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023b8:	f7ff ffda 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 80023bc:	4601      	mov	r1, r0
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	0adb      	lsrs	r3, r3, #11
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	08005180 	.word	0x08005180

080023e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023ec:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023f8:	f7ff fa04 	bl	8001804 <HAL_PWREx_GetVoltageRange>
 80023fc:	6178      	str	r0, [r7, #20]
 80023fe:	e014      	b.n	800242a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	4b25      	ldr	r3, [pc, #148]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	4a24      	ldr	r2, [pc, #144]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240a:	6593      	str	r3, [r2, #88]	; 0x58
 800240c:	4b22      	ldr	r3, [pc, #136]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002418:	f7ff f9f4 	bl	8001804 <HAL_PWREx_GetVoltageRange>
 800241c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002428:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002430:	d10b      	bne.n	800244a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b80      	cmp	r3, #128	; 0x80
 8002436:	d919      	bls.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2ba0      	cmp	r3, #160	; 0xa0
 800243c:	d902      	bls.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800243e:	2302      	movs	r3, #2
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	e013      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002444:	2301      	movs	r3, #1
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	e010      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b80      	cmp	r3, #128	; 0x80
 800244e:	d902      	bls.n	8002456 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002450:	2303      	movs	r3, #3
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	e00a      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b80      	cmp	r3, #128	; 0x80
 800245a:	d102      	bne.n	8002462 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800245c:	2302      	movs	r3, #2
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	e004      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b70      	cmp	r3, #112	; 0x70
 8002466:	d101      	bne.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002468:	2301      	movs	r3, #1
 800246a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 0207 	bic.w	r2, r3, #7
 8002474:	4909      	ldr	r1, [pc, #36]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	429a      	cmp	r2, r3
 8002488:	d001      	beq.n	800248e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	40022000 	.word	0x40022000

080024a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024a8:	2300      	movs	r3, #0
 80024aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024ac:	2300      	movs	r3, #0
 80024ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d03f      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c4:	d01c      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80024c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ca:	d802      	bhi.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00e      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80024d0:	e01f      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80024d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024d6:	d003      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80024d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024dc:	d01c      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80024de:	e018      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024e0:	4b85      	ldr	r3, [pc, #532]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4a84      	ldr	r2, [pc, #528]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024ec:	e015      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3304      	adds	r3, #4
 80024f2:	2100      	movs	r1, #0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 ff3f 	bl	8003378 <RCCEx_PLLSAI1_Config>
 80024fa:	4603      	mov	r3, r0
 80024fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024fe:	e00c      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3320      	adds	r3, #32
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f001 f826 	bl	8003558 <RCCEx_PLLSAI2_Config>
 800250c:	4603      	mov	r3, r0
 800250e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002510:	e003      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	74fb      	strb	r3, [r7, #19]
      break;
 8002516:	e000      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10b      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002520:	4b75      	ldr	r3, [pc, #468]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002526:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800252e:	4972      	ldr	r1, [pc, #456]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002530:	4313      	orrs	r3, r2
 8002532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002536:	e001      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d03f      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800254c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002550:	d01c      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002552:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002556:	d802      	bhi.n	800255e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00e      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800255c:	e01f      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800255e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002562:	d003      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002564:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002568:	d01c      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800256a:	e018      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800256c:	4b62      	ldr	r3, [pc, #392]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a61      	ldr	r2, [pc, #388]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002576:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002578:	e015      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3304      	adds	r3, #4
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f000 fef9 	bl	8003378 <RCCEx_PLLSAI1_Config>
 8002586:	4603      	mov	r3, r0
 8002588:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800258a:	e00c      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3320      	adds	r3, #32
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f000 ffe0 	bl	8003558 <RCCEx_PLLSAI2_Config>
 8002598:	4603      	mov	r3, r0
 800259a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800259c:	e003      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	74fb      	strb	r3, [r7, #19]
      break;
 80025a2:	e000      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80025a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10b      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025ac:	4b52      	ldr	r3, [pc, #328]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025ba:	494f      	ldr	r1, [pc, #316]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025c2:	e001      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 80a0 	beq.w	8002716 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025da:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80025ea:	2300      	movs	r3, #0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00d      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f0:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	4a40      	ldr	r2, [pc, #256]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fa:	6593      	str	r3, [r2, #88]	; 0x58
 80025fc:	4b3e      	ldr	r3, [pc, #248]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002608:	2301      	movs	r3, #1
 800260a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800260c:	4b3b      	ldr	r3, [pc, #236]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a3a      	ldr	r2, [pc, #232]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002616:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002618:	f7fe fba0 	bl	8000d5c <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800261e:	e009      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002620:	f7fe fb9c 	bl	8000d5c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d902      	bls.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	74fb      	strb	r3, [r7, #19]
        break;
 8002632:	e005      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002634:	4b31      	ldr	r3, [pc, #196]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ef      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002640:	7cfb      	ldrb	r3, [r7, #19]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d15c      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002646:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002650:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01f      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	429a      	cmp	r2, r3
 8002662:	d019      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800266e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002670:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002676:	4a20      	ldr	r2, [pc, #128]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002680:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002686:	4a1c      	ldr	r2, [pc, #112]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002690:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d016      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7fe fb5b 	bl	8000d5c <HAL_GetTick>
 80026a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a8:	e00b      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7fe fb57 	bl	8000d5c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d902      	bls.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	74fb      	strb	r3, [r7, #19]
            break;
 80026c0:	e006      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ec      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80026d0:	7cfb      	ldrb	r3, [r7, #19]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e6:	4904      	ldr	r1, [pc, #16]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026ee:	e009      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	74bb      	strb	r3, [r7, #18]
 80026f4:	e006      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002700:	7cfb      	ldrb	r3, [r7, #19]
 8002702:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002704:	7c7b      	ldrb	r3, [r7, #17]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d105      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270a:	4b9e      	ldr	r3, [pc, #632]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270e:	4a9d      	ldr	r2, [pc, #628]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002714:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002722:	4b98      	ldr	r3, [pc, #608]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002728:	f023 0203 	bic.w	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002730:	4994      	ldr	r1, [pc, #592]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002744:	4b8f      	ldr	r3, [pc, #572]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274a:	f023 020c 	bic.w	r2, r3, #12
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	498c      	ldr	r1, [pc, #560]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002766:	4b87      	ldr	r3, [pc, #540]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	4983      	ldr	r1, [pc, #524]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002788:	4b7e      	ldr	r3, [pc, #504]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	497b      	ldr	r1, [pc, #492]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027aa:	4b76      	ldr	r3, [pc, #472]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b8:	4972      	ldr	r1, [pc, #456]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027cc:	4b6d      	ldr	r3, [pc, #436]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	496a      	ldr	r1, [pc, #424]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027ee:	4b65      	ldr	r3, [pc, #404]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	4961      	ldr	r1, [pc, #388]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002810:	4b5c      	ldr	r3, [pc, #368]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281e:	4959      	ldr	r1, [pc, #356]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002832:	4b54      	ldr	r3, [pc, #336]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002838:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002840:	4950      	ldr	r1, [pc, #320]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002854:	4b4b      	ldr	r3, [pc, #300]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002862:	4948      	ldr	r1, [pc, #288]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002876:	4b43      	ldr	r3, [pc, #268]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002884:	493f      	ldr	r1, [pc, #252]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d028      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002898:	4b3a      	ldr	r3, [pc, #232]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028a6:	4937      	ldr	r1, [pc, #220]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028b6:	d106      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028b8:	4b32      	ldr	r3, [pc, #200]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	4a31      	ldr	r2, [pc, #196]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028c2:	60d3      	str	r3, [r2, #12]
 80028c4:	e011      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028ce:	d10c      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3304      	adds	r3, #4
 80028d4:	2101      	movs	r1, #1
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fd4e 	bl	8003378 <RCCEx_PLLSAI1_Config>
 80028dc:	4603      	mov	r3, r0
 80028de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80028e6:	7cfb      	ldrb	r3, [r7, #19]
 80028e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d028      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028f6:	4b23      	ldr	r3, [pc, #140]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	491f      	ldr	r1, [pc, #124]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002914:	d106      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002916:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	4a1a      	ldr	r2, [pc, #104]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800291c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002920:	60d3      	str	r3, [r2, #12]
 8002922:	e011      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800292c:	d10c      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3304      	adds	r3, #4
 8002932:	2101      	movs	r1, #1
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fd1f 	bl	8003378 <RCCEx_PLLSAI1_Config>
 800293a:	4603      	mov	r3, r0
 800293c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800293e:	7cfb      	ldrb	r3, [r7, #19]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002944:	7cfb      	ldrb	r3, [r7, #19]
 8002946:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d02b      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002962:	4908      	ldr	r1, [pc, #32]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002972:	d109      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4a02      	ldr	r2, [pc, #8]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800297a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800297e:	60d3      	str	r3, [r2, #12]
 8002980:	e014      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002990:	d10c      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3304      	adds	r3, #4
 8002996:	2101      	movs	r1, #1
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fced 	bl	8003378 <RCCEx_PLLSAI1_Config>
 800299e:	4603      	mov	r3, r0
 80029a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029a2:	7cfb      	ldrb	r3, [r7, #19]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80029a8:	7cfb      	ldrb	r3, [r7, #19]
 80029aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d02f      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029b8:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029c6:	4928      	ldr	r1, [pc, #160]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029d6:	d10d      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3304      	adds	r3, #4
 80029dc:	2102      	movs	r1, #2
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fcca 	bl	8003378 <RCCEx_PLLSAI1_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d014      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80029ee:	7cfb      	ldrb	r3, [r7, #19]
 80029f0:	74bb      	strb	r3, [r7, #18]
 80029f2:	e011      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3320      	adds	r3, #32
 8002a02:	2102      	movs	r1, #2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fda7 	bl	8003558 <RCCEx_PLLSAI2_Config>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a0e:	7cfb      	ldrb	r3, [r7, #19]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a24:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a32:	490d      	ldr	r1, [pc, #52]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00b      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a56:	4904      	ldr	r1, [pc, #16]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000

08002a6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a7e:	d137      	bne.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002a80:	4bb8      	ldr	r3, [pc, #736]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a92:	d014      	beq.n	8002abe <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8002a94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a98:	d01e      	beq.n	8002ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8002a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8002aa0:	f000 bc60 	b.w	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002aa4:	4baf      	ldr	r3, [pc, #700]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	f040 8453 	bne.w	800335a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
        frequency = LSE_VALUE;
 8002ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ab8:	61fb      	str	r3, [r7, #28]
      break;
 8002aba:	f000 bc4e 	b.w	800335a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002abe:	4ba9      	ldr	r3, [pc, #676]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	f040 8448 	bne.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = LSI_VALUE;
 8002ace:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002ad2:	61fb      	str	r3, [r7, #28]
      break;
 8002ad4:	f000 bc43 	b.w	800335e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002ad8:	4ba2      	ldr	r3, [pc, #648]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ae4:	f040 843d 	bne.w	8003362 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
        frequency = HSE_VALUE / 32U;
 8002ae8:	4b9f      	ldr	r3, [pc, #636]	; (8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8002aea:	61fb      	str	r3, [r7, #28]
      break;
 8002aec:	f000 bc39 	b.w	8003362 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002af0:	4b9c      	ldr	r3, [pc, #624]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d023      	beq.n	8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d02e      	beq.n	8002b62 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d139      	bne.n	8002b7c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002b08:	4b96      	ldr	r3, [pc, #600]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d116      	bne.n	8002b42 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002b14:	4b93      	ldr	r3, [pc, #588]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8002b20:	4b90      	ldr	r3, [pc, #576]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	e005      	b.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8002b2c:	4b8d      	ldr	r3, [pc, #564]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	4a8c      	ldr	r2, [pc, #560]	; (8002d6c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002b40:	e01f      	b.n	8002b82 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
      break;
 8002b46:	e01c      	b.n	8002b82 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b48:	4b86      	ldr	r3, [pc, #536]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b54:	d102      	bne.n	8002b5c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8002b56:	4b86      	ldr	r3, [pc, #536]	; (8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8002b58:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002b5a:	e012      	b.n	8002b82 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61bb      	str	r3, [r7, #24]
      break;
 8002b60:	e00f      	b.n	8002b82 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b62:	4b80      	ldr	r3, [pc, #512]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b6e:	d102      	bne.n	8002b76 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8002b70:	4b80      	ldr	r3, [pc, #512]	; (8002d74 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8002b72:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8002b74:	e005      	b.n	8002b82 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
      break;
 8002b7a:	e002      	b.n	8002b82 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61bb      	str	r3, [r7, #24]
      break;
 8002b80:	bf00      	nop
    }

    switch(PeriphClk)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b88:	f000 8345 	beq.w	8003216 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 8002b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b90:	d825      	bhi.n	8002bde <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8002b92:	2b10      	cmp	r3, #16
 8002b94:	f000 81df 	beq.w	8002f56 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8002b98:	2b10      	cmp	r3, #16
 8002b9a:	d80f      	bhi.n	8002bbc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	f000 8128 	beq.w	8002df2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d803      	bhi.n	8002bae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	f000 80ec 	beq.w	8002d84 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8002bac:	e3da      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	f000 8169 	beq.w	8002e86 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	f000 819a 	beq.w	8002eee <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 8002bba:	e3d3      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8002bbc:	2b40      	cmp	r3, #64	; 0x40
 8002bbe:	f000 82c1 	beq.w	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8002bc2:	2b40      	cmp	r3, #64	; 0x40
 8002bc4:	d803      	bhi.n	8002bce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	f000 81fd 	beq.w	8002fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8002bcc:	e3ca      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8002bce:	2b80      	cmp	r3, #128	; 0x80
 8002bd0:	f000 82db 	beq.w	800318a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
 8002bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd8:	f000 82fa 	beq.w	80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
      break;
 8002bdc:	e3c2      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8002bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002be2:	f000 822d 	beq.w	8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8002be6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bea:	d811      	bhi.n	8002c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8002bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bf0:	d021      	beq.n	8002c36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8002bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bf6:	d804      	bhi.n	8002c02 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8002bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfc:	f000 834c 	beq.w	8003298 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      break;
 8002c00:	e3b0      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8002c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c06:	d01d      	beq.n	8002c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8002c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0c:	d021      	beq.n	8002c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8002c0e:	e3a9      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	f000 8285 	beq.w	8003122 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8002c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1c:	d804      	bhi.n	8002c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8002c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c22:	f000 837e 	beq.w	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
      break;
 8002c26:	e39d      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8002c28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c2c:	d011      	beq.n	8002c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8002c2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c32:	d00e      	beq.n	8002c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8002c34:	e396      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8002c36:	69b9      	ldr	r1, [r7, #24]
 8002c38:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c3c:	f000 fd66 	bl	800370c <RCCEx_GetSAIxPeriphCLKFreq>
 8002c40:	61f8      	str	r0, [r7, #28]
      break;
 8002c42:	e38f      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8002c44:	69b9      	ldr	r1, [r7, #24]
 8002c46:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c4a:	f000 fd5f 	bl	800370c <RCCEx_GetSAIxPeriphCLKFreq>
 8002c4e:	61f8      	str	r0, [r7, #28]
      break;
 8002c50:	e388      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8002c52:	4b44      	ldr	r3, [pc, #272]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c58:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8002c5c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c64:	d023      	beq.n	8002cae <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8002c66:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002c6a:	d003      	beq.n	8002c74 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8002c6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c70:	d04a      	beq.n	8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8002c72:	e086      	b.n	8002d82 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002c74:	4b3b      	ldr	r3, [pc, #236]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d17b      	bne.n	8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002c80:	4b38      	ldr	r3, [pc, #224]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8002c8c:	4b35      	ldr	r3, [pc, #212]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	e005      	b.n	8002ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8002c98:	4b32      	ldr	r3, [pc, #200]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	4a31      	ldr	r2, [pc, #196]	; (8002d6c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8002ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002caa:	61fb      	str	r3, [r7, #28]
          break;
 8002cac:	e064      	b.n	8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002cae:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cba:	d15f      	bne.n	8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002cbc:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cc8:	d158      	bne.n	8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002cca:	4b26      	ldr	r3, [pc, #152]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cd4:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	fb02 f203 	mul.w	r2, r2, r3
 8002cde:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	091b      	lsrs	r3, r3, #4
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	3301      	adds	r3, #1
 8002cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cee:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002cf0:	4b1c      	ldr	r3, [pc, #112]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	0d5b      	lsrs	r3, r3, #21
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	61fb      	str	r3, [r7, #28]
          break;
 8002d06:	e039      	b.n	8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8002d08:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d14:	d134      	bne.n	8002d80 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8002d16:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d22:	d12d      	bne.n	8002d80 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d2e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	fb02 f203 	mul.w	r2, r2, r3
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	3301      	adds	r3, #1
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	0d5b      	lsrs	r3, r3, #21
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	3301      	adds	r3, #1
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	61fb      	str	r3, [r7, #28]
          break;
 8002d60:	e00e      	b.n	8002d80 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8002d62:	bf00      	nop
 8002d64:	40021000 	.word	0x40021000
 8002d68:	0003d090 	.word	0x0003d090
 8002d6c:	08005188 	.word	0x08005188
 8002d70:	00f42400 	.word	0x00f42400
 8002d74:	007a1200 	.word	0x007a1200
          break;
 8002d78:	bf00      	nop
 8002d7a:	e2f3      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8002d7c:	bf00      	nop
 8002d7e:	e2f1      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8002d80:	bf00      	nop
        break;
 8002d82:	e2ef      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002d84:	4bac      	ldr	r3, [pc, #688]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d827      	bhi.n	8002de6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8002d96:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002dad 	.word	0x08002dad
 8002da0:	08002db5 	.word	0x08002db5
 8002da4:	08002dbd 	.word	0x08002dbd
 8002da8:	08002dd1 	.word	0x08002dd1
          frequency = HAL_RCC_GetPCLK2Freq();
 8002dac:	f7ff fb02 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 8002db0:	61f8      	str	r0, [r7, #28]
          break;
 8002db2:	e01d      	b.n	8002df0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8002db4:	f7ff fa52 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8002db8:	61f8      	str	r0, [r7, #28]
          break;
 8002dba:	e019      	b.n	8002df0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002dbc:	4b9e      	ldr	r3, [pc, #632]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc8:	d10f      	bne.n	8002dea <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 8002dca:	4b9c      	ldr	r3, [pc, #624]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8002dcc:	61fb      	str	r3, [r7, #28]
          break;
 8002dce:	e00c      	b.n	8002dea <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002dd0:	4b99      	ldr	r3, [pc, #612]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d107      	bne.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8002dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002de2:	61fb      	str	r3, [r7, #28]
          break;
 8002de4:	e003      	b.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 8002de6:	bf00      	nop
 8002de8:	e2bc      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8002dea:	bf00      	nop
 8002dec:	e2ba      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8002dee:	bf00      	nop
        break;
 8002df0:	e2b8      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002df2:	4b91      	ldr	r3, [pc, #580]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b0c      	cmp	r3, #12
 8002e02:	d83a      	bhi.n	8002e7a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8002e04:	a201      	add	r2, pc, #4	; (adr r2, 8002e0c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8002e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0a:	bf00      	nop
 8002e0c:	08002e41 	.word	0x08002e41
 8002e10:	08002e7b 	.word	0x08002e7b
 8002e14:	08002e7b 	.word	0x08002e7b
 8002e18:	08002e7b 	.word	0x08002e7b
 8002e1c:	08002e49 	.word	0x08002e49
 8002e20:	08002e7b 	.word	0x08002e7b
 8002e24:	08002e7b 	.word	0x08002e7b
 8002e28:	08002e7b 	.word	0x08002e7b
 8002e2c:	08002e51 	.word	0x08002e51
 8002e30:	08002e7b 	.word	0x08002e7b
 8002e34:	08002e7b 	.word	0x08002e7b
 8002e38:	08002e7b 	.word	0x08002e7b
 8002e3c:	08002e65 	.word	0x08002e65
          frequency = HAL_RCC_GetPCLK1Freq();
 8002e40:	f7ff faa2 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8002e44:	61f8      	str	r0, [r7, #28]
          break;
 8002e46:	e01d      	b.n	8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8002e48:	f7ff fa08 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8002e4c:	61f8      	str	r0, [r7, #28]
          break;
 8002e4e:	e019      	b.n	8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e50:	4b79      	ldr	r3, [pc, #484]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5c:	d10f      	bne.n	8002e7e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 8002e5e:	4b77      	ldr	r3, [pc, #476]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8002e60:	61fb      	str	r3, [r7, #28]
          break;
 8002e62:	e00c      	b.n	8002e7e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002e64:	4b74      	ldr	r3, [pc, #464]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d107      	bne.n	8002e82 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 8002e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e76:	61fb      	str	r3, [r7, #28]
          break;
 8002e78:	e003      	b.n	8002e82 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 8002e7a:	bf00      	nop
 8002e7c:	e272      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8002e7e:	bf00      	nop
 8002e80:	e270      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8002e82:	bf00      	nop
        break;
 8002e84:	e26e      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002e86:	4b6c      	ldr	r3, [pc, #432]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e90:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d00d      	beq.n	8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8002e98:	2b10      	cmp	r3, #16
 8002e9a:	d802      	bhi.n	8002ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8002ea0:	e024      	b.n	8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8002ea6:	2b30      	cmp	r3, #48	; 0x30
 8002ea8:	d012      	beq.n	8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 8002eaa:	e01f      	b.n	8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002eac:	f7ff fa6c 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8002eb0:	61f8      	str	r0, [r7, #28]
          break;
 8002eb2:	e01b      	b.n	8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8002eb4:	f7ff f9d2 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8002eb8:	61f8      	str	r0, [r7, #28]
          break;
 8002eba:	e017      	b.n	8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ebc:	4b5e      	ldr	r3, [pc, #376]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec8:	d10d      	bne.n	8002ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 8002eca:	4b5c      	ldr	r3, [pc, #368]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8002ecc:	61fb      	str	r3, [r7, #28]
          break;
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002ed0:	4b59      	ldr	r3, [pc, #356]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d105      	bne.n	8002eea <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 8002ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ee2:	61fb      	str	r3, [r7, #28]
          break;
 8002ee4:	e001      	b.n	8002eea <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8002ee6:	bf00      	nop
 8002ee8:	e23c      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8002eea:	bf00      	nop
        break;
 8002eec:	e23a      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002eee:	4b52      	ldr	r3, [pc, #328]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ef8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d00d      	beq.n	8002f1c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d802      	bhi.n	8002f0a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 8002f08:	e024      	b.n	8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 8002f0a:	2b80      	cmp	r3, #128	; 0x80
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8002f0e:	2bc0      	cmp	r3, #192	; 0xc0
 8002f10:	d012      	beq.n	8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 8002f12:	e01f      	b.n	8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f14:	f7ff fa38 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8002f18:	61f8      	str	r0, [r7, #28]
          break;
 8002f1a:	e01b      	b.n	8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f1c:	f7ff f99e 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8002f20:	61f8      	str	r0, [r7, #28]
          break;
 8002f22:	e017      	b.n	8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f24:	4b44      	ldr	r3, [pc, #272]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f30:	d10d      	bne.n	8002f4e <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 8002f32:	4b42      	ldr	r3, [pc, #264]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8002f34:	61fb      	str	r3, [r7, #28]
          break;
 8002f36:	e00a      	b.n	8002f4e <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002f38:	4b3f      	ldr	r3, [pc, #252]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d105      	bne.n	8002f52 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 8002f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f4a:	61fb      	str	r3, [r7, #28]
          break;
 8002f4c:	e001      	b.n	8002f52 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 8002f4e:	bf00      	nop
 8002f50:	e208      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8002f52:	bf00      	nop
        break;
 8002f54:	e206      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8002f56:	4b38      	ldr	r3, [pc, #224]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f60:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f68:	d010      	beq.n	8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8002f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6e:	d802      	bhi.n	8002f76 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 8002f74:	e026      	b.n	8002fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 8002f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f7a:	d00b      	beq.n	8002f94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8002f7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f80:	d012      	beq.n	8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 8002f82:	e01f      	b.n	8002fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f84:	f7ff fa00 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8002f88:	61f8      	str	r0, [r7, #28]
          break;
 8002f8a:	e01b      	b.n	8002fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 8002f8c:	f7ff f966 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8002f90:	61f8      	str	r0, [r7, #28]
          break;
 8002f92:	e017      	b.n	8002fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f94:	4b28      	ldr	r3, [pc, #160]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa0:	d10d      	bne.n	8002fbe <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 8002fa2:	4b26      	ldr	r3, [pc, #152]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8002fa4:	61fb      	str	r3, [r7, #28]
          break;
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002fa8:	4b23      	ldr	r3, [pc, #140]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d105      	bne.n	8002fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 8002fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fba:	61fb      	str	r3, [r7, #28]
          break;
 8002fbc:	e001      	b.n	8002fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 8002fbe:	bf00      	nop
 8002fc0:	e1d0      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8002fc2:	bf00      	nop
        break;
 8002fc4:	e1ce      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fd0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd8:	d010      	beq.n	8002ffc <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8002fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fde:	d802      	bhi.n	8002fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d007      	beq.n	8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8002fe4:	e026      	b.n	8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 8002fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fea:	d00b      	beq.n	8003004 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8002fec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff0:	d012      	beq.n	8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 8002ff2:	e01f      	b.n	8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002ff4:	f7ff f9c8 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8002ff8:	61f8      	str	r0, [r7, #28]
          break;
 8002ffa:	e01b      	b.n	8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8002ffc:	f7ff f92e 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8003000:	61f8      	str	r0, [r7, #28]
          break;
 8003002:	e017      	b.n	8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003010:	d10d      	bne.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8003014:	61fb      	str	r3, [r7, #28]
          break;
 8003016:	e00a      	b.n	800302e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003018:	4b07      	ldr	r3, [pc, #28]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b02      	cmp	r3, #2
 8003024:	d105      	bne.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 8003026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800302a:	61fb      	str	r3, [r7, #28]
          break;
 800302c:	e001      	b.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 800302e:	bf00      	nop
 8003030:	e198      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8003032:	bf00      	nop
        break;
 8003034:	e196      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003040:	4bad      	ldr	r3, [pc, #692]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800304a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003052:	d036      	beq.n	80030c2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 8003054:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003058:	d003      	beq.n	8003062 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800305a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800305e:	d004      	beq.n	800306a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 8003060:	e05e      	b.n	8003120 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetSysClockFreq();
 8003062:	f7ff f8fb 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8003066:	61f8      	str	r0, [r7, #28]
          break;
 8003068:	e05a      	b.n	8003120 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800306a:	4ba3      	ldr	r3, [pc, #652]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003072:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003076:	d150      	bne.n	800311a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8003078:	4b9f      	ldr	r3, [pc, #636]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d04a      	beq.n	800311a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003084:	4b9c      	ldr	r3, [pc, #624]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800308e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	fb02 f203 	mul.w	r2, r2, r3
 8003098:	4b97      	ldr	r3, [pc, #604]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	3301      	adds	r3, #1
 80030a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80030aa:	4b93      	ldr	r3, [pc, #588]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	0e5b      	lsrs	r3, r3, #25
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	3301      	adds	r3, #1
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	61fb      	str	r3, [r7, #28]
          break;
 80030c0:	e02b      	b.n	800311a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80030c2:	4b8d      	ldr	r3, [pc, #564]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030ce:	d126      	bne.n	800311e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 80030d0:	4b89      	ldr	r3, [pc, #548]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d020      	beq.n	800311e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80030dc:	4b86      	ldr	r3, [pc, #536]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	0a1b      	lsrs	r3, r3, #8
 80030e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030e6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	fb02 f203 	mul.w	r2, r2, r3
 80030f0:	4b81      	ldr	r3, [pc, #516]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	3301      	adds	r3, #1
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8003102:	4b7d      	ldr	r3, [pc, #500]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	0e5b      	lsrs	r3, r3, #25
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	3301      	adds	r3, #1
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	fbb2 f3f3 	udiv	r3, r2, r3
 8003116:	61fb      	str	r3, [r7, #28]
          break;
 8003118:	e001      	b.n	800311e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
          break;
 800311a:	bf00      	nop
 800311c:	e122      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800311e:	bf00      	nop
        break;
 8003120:	e120      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8003122:	4b75      	ldr	r3, [pc, #468]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800312c:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d103      	bne.n	800313c <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
          frequency = HAL_RCC_GetPCLK2Freq();
 8003134:	f7ff f93e 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 8003138:	61f8      	str	r0, [r7, #28]
        break;
 800313a:	e113      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = HAL_RCC_GetSysClockFreq();
 800313c:	f7ff f88e 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8003140:	61f8      	str	r0, [r7, #28]
        break;
 8003142:	e10f      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003144:	4b6c      	ldr	r3, [pc, #432]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800314e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003156:	d009      	beq.n	800316c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8003158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 800315e:	2b00      	cmp	r3, #0
 8003160:	d000      	beq.n	8003164 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          break;
 8003162:	e011      	b.n	8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003164:	f7ff f910 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8003168:	61f8      	str	r0, [r7, #28]
          break;
 800316a:	e00d      	b.n	8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetSysClockFreq();
 800316c:	f7ff f876 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8003170:	61f8      	str	r0, [r7, #28]
          break;
 8003172:	e009      	b.n	8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003174:	4b60      	ldr	r3, [pc, #384]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003180:	d101      	bne.n	8003186 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
            frequency = HSI_VALUE;
 8003182:	4b5e      	ldr	r3, [pc, #376]	; (80032fc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8003184:	61fb      	str	r3, [r7, #28]
          break;
 8003186:	bf00      	nop
        break;
 8003188:	e0ec      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800318a:	4b5b      	ldr	r3, [pc, #364]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003190:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003194:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800319c:	d009      	beq.n	80031b2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800319e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a2:	d00a      	beq.n	80031ba <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d000      	beq.n	80031aa <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
          break;
 80031a8:	e011      	b.n	80031ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetPCLK1Freq();
 80031aa:	f7ff f8ed 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 80031ae:	61f8      	str	r0, [r7, #28]
          break;
 80031b0:	e00d      	b.n	80031ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetSysClockFreq();
 80031b2:	f7ff f853 	bl	800225c <HAL_RCC_GetSysClockFreq>
 80031b6:	61f8      	str	r0, [r7, #28]
          break;
 80031b8:	e009      	b.n	80031ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80031ba:	4b4f      	ldr	r3, [pc, #316]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c6:	d101      	bne.n	80031cc <HAL_RCCEx_GetPeriphCLKFreq+0x760>
            frequency = HSI_VALUE;
 80031c8:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80031ca:	61fb      	str	r3, [r7, #28]
          break;
 80031cc:	bf00      	nop
        break;
 80031ce:	e0c9      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80031d0:	4b49      	ldr	r3, [pc, #292]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031da:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e2:	d009      	beq.n	80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80031e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d000      	beq.n	80031f0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
          break;
 80031ee:	e011      	b.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80031f0:	f7ff f8ca 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 80031f4:	61f8      	str	r0, [r7, #28]
          break;
 80031f6:	e00d      	b.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetSysClockFreq();
 80031f8:	f7ff f830 	bl	800225c <HAL_RCC_GetSysClockFreq>
 80031fc:	61f8      	str	r0, [r7, #28]
          break;
 80031fe:	e009      	b.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003200:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320c:	d101      	bne.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            frequency = HSI_VALUE;
 800320e:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8003210:	61fb      	str	r3, [r7, #28]
          break;
 8003212:	bf00      	nop
        break;
 8003214:	e0a6      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003216:	4b38      	ldr	r3, [pc, #224]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003220:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003228:	d010      	beq.n	800324c <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
 800322a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800322e:	d802      	bhi.n	8003236 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
          break;
 8003234:	e02f      	b.n	8003296 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
        switch(srcclk)
 8003236:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800323a:	d012      	beq.n	8003262 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 800323c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003240:	d019      	beq.n	8003276 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          break;
 8003242:	e028      	b.n	8003296 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003244:	f7ff f8a0 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8003248:	61f8      	str	r0, [r7, #28]
          break;
 800324a:	e024      	b.n	8003296 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800324c:	4b2a      	ldr	r3, [pc, #168]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800324e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b02      	cmp	r3, #2
 8003258:	d118      	bne.n	800328c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
              frequency = LSI_VALUE;
 800325a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800325e:	61fb      	str	r3, [r7, #28]
          break;
 8003260:	e014      	b.n	800328c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003262:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326e:	d10f      	bne.n	8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
            frequency = HSI_VALUE;
 8003270:	4b22      	ldr	r3, [pc, #136]	; (80032fc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8003272:	61fb      	str	r3, [r7, #28]
          break;
 8003274:	e00c      	b.n	8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003276:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8003278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b02      	cmp	r3, #2
 8003282:	d107      	bne.n	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
            frequency = LSE_VALUE;
 8003284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003288:	61fb      	str	r3, [r7, #28]
          break;
 800328a:	e003      	b.n	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 800328c:	bf00      	nop
 800328e:	e069      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8003290:	bf00      	nop
 8003292:	e067      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8003294:	bf00      	nop
        break;
 8003296:	e065      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003298:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80032a2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032aa:	d010      	beq.n	80032ce <HAL_RCCEx_GetPeriphCLKFreq+0x862>
 80032ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b0:	d802      	bhi.n	80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          break;
 80032b6:	e033      	b.n	8003320 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        switch(srcclk)
 80032b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032bc:	d012      	beq.n	80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 80032be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032c2:	d01d      	beq.n	8003300 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          break;
 80032c4:	e02c      	b.n	8003320 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80032c6:	f7ff f85f 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 80032ca:	61f8      	str	r0, [r7, #28]
          break;
 80032cc:	e028      	b.n	8003320 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80032ce:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80032d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d11c      	bne.n	8003316 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
              frequency = LSI_VALUE;
 80032dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80032e0:	61fb      	str	r3, [r7, #28]
          break;
 80032e2:	e018      	b.n	8003316 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f0:	d113      	bne.n	800331a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
            frequency = HSI_VALUE;
 80032f2:	4b02      	ldr	r3, [pc, #8]	; (80032fc <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80032f4:	61fb      	str	r3, [r7, #28]
          break;
 80032f6:	e010      	b.n	800331a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80032f8:	40021000 	.word	0x40021000
 80032fc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 8003302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b02      	cmp	r3, #2
 800330c:	d107      	bne.n	800331e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
            frequency = LSE_VALUE;
 800330e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003312:	61fb      	str	r3, [r7, #28]
          break;
 8003314:	e003      	b.n	800331e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          break;
 8003316:	bf00      	nop
 8003318:	e024      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800331a:	bf00      	nop
 800331c:	e022      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800331e:	bf00      	nop
        break;
 8003320:	e020      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003322:	4b13      	ldr	r3, [pc, #76]	; (8003370 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 8003324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003328:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800332c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8003334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003338:	d004      	beq.n	8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          break;
 800333a:	e00d      	b.n	8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800333c:	f7ff f824 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8003340:	61f8      	str	r0, [r7, #28]
          break;
 8003342:	e009      	b.n	8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003350:	d101      	bne.n	8003356 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            frequency = HSI_VALUE;
 8003352:	4b08      	ldr	r3, [pc, #32]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
 8003354:	61fb      	str	r3, [r7, #28]
          break;
 8003356:	bf00      	nop
        break;
 8003358:	e004      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 800335a:	bf00      	nop
 800335c:	e002      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 800335e:	bf00      	nop
 8003360:	e000      	b.n	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 8003362:	bf00      	nop
    }
  }

  return(frequency);
 8003364:	69fb      	ldr	r3, [r7, #28]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3720      	adds	r7, #32
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	00f42400 	.word	0x00f42400

08003378 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003386:	4b73      	ldr	r3, [pc, #460]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d018      	beq.n	80033c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003392:	4b70      	ldr	r3, [pc, #448]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0203 	and.w	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d10d      	bne.n	80033be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
       ||
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033aa:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
       ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d044      	beq.n	8003448 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
 80033c2:	e041      	b.n	8003448 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d00c      	beq.n	80033e6 <RCCEx_PLLSAI1_Config+0x6e>
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d013      	beq.n	80033f8 <RCCEx_PLLSAI1_Config+0x80>
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d120      	bne.n	8003416 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033d4:	4b5f      	ldr	r3, [pc, #380]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d11d      	bne.n	800341c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e4:	e01a      	b.n	800341c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033e6:	4b5b      	ldr	r3, [pc, #364]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d116      	bne.n	8003420 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f6:	e013      	b.n	8003420 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033f8:	4b56      	ldr	r3, [pc, #344]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10f      	bne.n	8003424 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003404:	4b53      	ldr	r3, [pc, #332]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d109      	bne.n	8003424 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003414:	e006      	b.n	8003424 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
      break;
 800341a:	e004      	b.n	8003426 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800341c:	bf00      	nop
 800341e:	e002      	b.n	8003426 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003420:	bf00      	nop
 8003422:	e000      	b.n	8003426 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003424:	bf00      	nop
    }

    if(status == HAL_OK)
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10d      	bne.n	8003448 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800342c:	4b49      	ldr	r3, [pc, #292]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6819      	ldr	r1, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	3b01      	subs	r3, #1
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	430b      	orrs	r3, r1
 8003442:	4944      	ldr	r1, [pc, #272]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003444:	4313      	orrs	r3, r2
 8003446:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d17d      	bne.n	800354a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800344e:	4b41      	ldr	r3, [pc, #260]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a40      	ldr	r2, [pc, #256]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003454:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003458:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800345a:	f7fd fc7f 	bl	8000d5c <HAL_GetTick>
 800345e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003460:	e009      	b.n	8003476 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003462:	f7fd fc7b 	bl	8000d5c <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d902      	bls.n	8003476 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	73fb      	strb	r3, [r7, #15]
        break;
 8003474:	e005      	b.n	8003482 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003476:	4b37      	ldr	r3, [pc, #220]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1ef      	bne.n	8003462 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d160      	bne.n	800354a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d111      	bne.n	80034b2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800348e:	4b31      	ldr	r3, [pc, #196]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6892      	ldr	r2, [r2, #8]
 800349e:	0211      	lsls	r1, r2, #8
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	68d2      	ldr	r2, [r2, #12]
 80034a4:	0912      	lsrs	r2, r2, #4
 80034a6:	0452      	lsls	r2, r2, #17
 80034a8:	430a      	orrs	r2, r1
 80034aa:	492a      	ldr	r1, [pc, #168]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	610b      	str	r3, [r1, #16]
 80034b0:	e027      	b.n	8003502 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d112      	bne.n	80034de <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034b8:	4b26      	ldr	r3, [pc, #152]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80034c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6892      	ldr	r2, [r2, #8]
 80034c8:	0211      	lsls	r1, r2, #8
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6912      	ldr	r2, [r2, #16]
 80034ce:	0852      	lsrs	r2, r2, #1
 80034d0:	3a01      	subs	r2, #1
 80034d2:	0552      	lsls	r2, r2, #21
 80034d4:	430a      	orrs	r2, r1
 80034d6:	491f      	ldr	r1, [pc, #124]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	610b      	str	r3, [r1, #16]
 80034dc:	e011      	b.n	8003502 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034de:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6892      	ldr	r2, [r2, #8]
 80034ee:	0211      	lsls	r1, r2, #8
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6952      	ldr	r2, [r2, #20]
 80034f4:	0852      	lsrs	r2, r2, #1
 80034f6:	3a01      	subs	r2, #1
 80034f8:	0652      	lsls	r2, r2, #25
 80034fa:	430a      	orrs	r2, r1
 80034fc:	4915      	ldr	r1, [pc, #84]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003502:	4b14      	ldr	r3, [pc, #80]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a13      	ldr	r2, [pc, #76]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003508:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800350c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350e:	f7fd fc25 	bl	8000d5c <HAL_GetTick>
 8003512:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003514:	e009      	b.n	800352a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003516:	f7fd fc21 	bl	8000d5c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d902      	bls.n	800352a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	73fb      	strb	r3, [r7, #15]
          break;
 8003528:	e005      	b.n	8003536 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800352a:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0ef      	beq.n	8003516 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d106      	bne.n	800354a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	4903      	ldr	r1, [pc, #12]	; (8003554 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003546:	4313      	orrs	r3, r2
 8003548:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800354a:	7bfb      	ldrb	r3, [r7, #15]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40021000 	.word	0x40021000

08003558 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003566:	4b68      	ldr	r3, [pc, #416]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d018      	beq.n	80035a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003572:	4b65      	ldr	r3, [pc, #404]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0203 	and.w	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d10d      	bne.n	800359e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
       ||
 8003586:	2b00      	cmp	r3, #0
 8003588:	d009      	beq.n	800359e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800358a:	4b5f      	ldr	r3, [pc, #380]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
       ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d044      	beq.n	8003628 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
 80035a2:	e041      	b.n	8003628 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d00c      	beq.n	80035c6 <RCCEx_PLLSAI2_Config+0x6e>
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d013      	beq.n	80035d8 <RCCEx_PLLSAI2_Config+0x80>
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d120      	bne.n	80035f6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035b4:	4b54      	ldr	r3, [pc, #336]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d11d      	bne.n	80035fc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c4:	e01a      	b.n	80035fc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035c6:	4b50      	ldr	r3, [pc, #320]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d116      	bne.n	8003600 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d6:	e013      	b.n	8003600 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035d8:	4b4b      	ldr	r3, [pc, #300]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10f      	bne.n	8003604 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035e4:	4b48      	ldr	r3, [pc, #288]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035f4:	e006      	b.n	8003604 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
      break;
 80035fa:	e004      	b.n	8003606 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80035fc:	bf00      	nop
 80035fe:	e002      	b.n	8003606 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003600:	bf00      	nop
 8003602:	e000      	b.n	8003606 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003604:	bf00      	nop
    }

    if(status == HAL_OK)
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10d      	bne.n	8003628 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800360c:	4b3e      	ldr	r3, [pc, #248]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6819      	ldr	r1, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	3b01      	subs	r3, #1
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	430b      	orrs	r3, r1
 8003622:	4939      	ldr	r1, [pc, #228]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003624:	4313      	orrs	r3, r2
 8003626:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d167      	bne.n	80036fe <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800362e:	4b36      	ldr	r3, [pc, #216]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a35      	ldr	r2, [pc, #212]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800363a:	f7fd fb8f 	bl	8000d5c <HAL_GetTick>
 800363e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003640:	e009      	b.n	8003656 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003642:	f7fd fb8b 	bl	8000d5c <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d902      	bls.n	8003656 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	73fb      	strb	r3, [r7, #15]
        break;
 8003654:	e005      	b.n	8003662 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003656:	4b2c      	ldr	r3, [pc, #176]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1ef      	bne.n	8003642 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d14a      	bne.n	80036fe <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d111      	bne.n	8003692 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800366e:	4b26      	ldr	r3, [pc, #152]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6892      	ldr	r2, [r2, #8]
 800367e:	0211      	lsls	r1, r2, #8
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68d2      	ldr	r2, [r2, #12]
 8003684:	0912      	lsrs	r2, r2, #4
 8003686:	0452      	lsls	r2, r2, #17
 8003688:	430a      	orrs	r2, r1
 800368a:	491f      	ldr	r1, [pc, #124]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 800368c:	4313      	orrs	r3, r2
 800368e:	614b      	str	r3, [r1, #20]
 8003690:	e011      	b.n	80036b6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003692:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800369a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6892      	ldr	r2, [r2, #8]
 80036a2:	0211      	lsls	r1, r2, #8
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6912      	ldr	r2, [r2, #16]
 80036a8:	0852      	lsrs	r2, r2, #1
 80036aa:	3a01      	subs	r2, #1
 80036ac:	0652      	lsls	r2, r2, #25
 80036ae:	430a      	orrs	r2, r1
 80036b0:	4915      	ldr	r1, [pc, #84]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a13      	ldr	r2, [pc, #76]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c2:	f7fd fb4b 	bl	8000d5c <HAL_GetTick>
 80036c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036c8:	e009      	b.n	80036de <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036ca:	f7fd fb47 	bl	8000d5c <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d902      	bls.n	80036de <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	73fb      	strb	r3, [r7, #15]
          break;
 80036dc:	e005      	b.n	80036ea <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0ef      	beq.n	80036ca <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	4903      	ldr	r1, [pc, #12]	; (8003708 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40021000 	.word	0x40021000

0800370c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003728:	d10c      	bne.n	8003744 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800372a:	4b6e      	ldr	r3, [pc, #440]	; (80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003730:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003734:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800373c:	d112      	bne.n	8003764 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800373e:	4b6a      	ldr	r3, [pc, #424]	; (80038e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	e00f      	b.n	8003764 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374a:	d10b      	bne.n	8003764 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800374c:	4b65      	ldr	r3, [pc, #404]	; (80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8003756:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800375e:	d101      	bne.n	8003764 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8003760:	4b61      	ldr	r3, [pc, #388]	; (80038e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003762:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	2b00      	cmp	r3, #0
 8003768:	f040 80b4 	bne.w	80038d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003776:	d003      	beq.n	8003780 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800377e:	d135      	bne.n	80037ec <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003780:	4b58      	ldr	r3, [pc, #352]	; (80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003788:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800378c:	f040 80a1 	bne.w	80038d2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8003790:	4b54      	ldr	r3, [pc, #336]	; (80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 809a 	beq.w	80038d2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800379e:	4b51      	ldr	r3, [pc, #324]	; (80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	091b      	lsrs	r3, r3, #4
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	3301      	adds	r3, #1
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80037b2:	4b4c      	ldr	r3, [pc, #304]	; (80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	0a1b      	lsrs	r3, r3, #8
 80037b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037bc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10a      	bne.n	80037da <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80037c4:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80037d0:	2311      	movs	r3, #17
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	e001      	b.n	80037da <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80037d6:	2307      	movs	r3, #7
 80037d8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	fb02 f203 	mul.w	r2, r2, r3
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80037ea:	e072      	b.n	80038d2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d133      	bne.n	800385a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80037f2:	4b3c      	ldr	r3, [pc, #240]	; (80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037fe:	d169      	bne.n	80038d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003800:	4b38      	ldr	r3, [pc, #224]	; (80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d063      	beq.n	80038d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800380c:	4b35      	ldr	r3, [pc, #212]	; (80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	3301      	adds	r3, #1
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003820:	4b30      	ldr	r3, [pc, #192]	; (80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800382a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10a      	bne.n	8003848 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8003832:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800383e:	2311      	movs	r3, #17
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	e001      	b.n	8003848 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8003844:	2307      	movs	r3, #7
 8003846:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	fb02 f203 	mul.w	r2, r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fbb2 f3f3 	udiv	r3, r2, r3
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	e03c      	b.n	80038d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003860:	d003      	beq.n	800386a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003868:	d134      	bne.n	80038d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800386a:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003872:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003876:	d12d      	bne.n	80038d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8003878:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d027      	beq.n	80038d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003884:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	3301      	adds	r3, #1
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	fbb2 f3f3 	udiv	r3, r2, r3
 8003896:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003898:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038a2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10a      	bne.n	80038c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80038b6:	2311      	movs	r3, #17
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	e001      	b.n	80038c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80038bc:	2307      	movs	r3, #7
 80038be:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	fb02 f203 	mul.w	r2, r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ce:	61fb      	str	r3, [r7, #28]
 80038d0:	e000      	b.n	80038d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80038d2:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80038d4:	69fb      	ldr	r3, [r7, #28]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3724      	adds	r7, #36	; 0x24
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40021000 	.word	0x40021000
 80038e8:	001fff68 	.word	0x001fff68

080038ec <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d81f      	bhi.n	8003940 <HAL_SAI_InitProtocol+0x54>
 8003900:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <HAL_SAI_InitProtocol+0x1c>)
 8003902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003906:	bf00      	nop
 8003908:	0800391d 	.word	0x0800391d
 800390c:	0800391d 	.word	0x0800391d
 8003910:	0800391d 	.word	0x0800391d
 8003914:	0800392f 	.word	0x0800392f
 8003918:	0800392f 	.word	0x0800392f
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 fc2e 	bl	8004184 <SAI_InitI2S>
 8003928:	4603      	mov	r3, r0
 800392a:	75fb      	strb	r3, [r7, #23]
      break;
 800392c:	e00b      	b.n	8003946 <HAL_SAI_InitProtocol+0x5a>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 fcd7 	bl	80042e8 <SAI_InitPCM>
 800393a:	4603      	mov	r3, r0
 800393c:	75fb      	strb	r3, [r7, #23]
      break;
 800393e:	e002      	b.n	8003946 <HAL_SAI_InitProtocol+0x5a>
    default :
      status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	75fb      	strb	r3, [r7, #23]
      break;
 8003944:	bf00      	nop
  }

  if (status == HAL_OK)
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d104      	bne.n	8003956 <HAL_SAI_InitProtocol+0x6a>
  {
    status = HAL_SAI_Init(hsai);
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f807 	bl	8003960 <HAL_SAI_Init>
 8003952:	4603      	mov	r3, r0
 8003954:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003956:	7dfb      	ldrb	r3, [r7, #23]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e153      	b.n	8003c1a <HAL_SAI_Init+0x2ba>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd f81a 	bl	80009c0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fd65 	bl	800445c <SAI_Disable>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e13e      	b.n	8003c1a <HAL_SAI_Init+0x2ba>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d007      	beq.n	80039bc <HAL_SAI_Init+0x5c>
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d302      	bcc.n	80039b6 <HAL_SAI_Init+0x56>
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d006      	beq.n	80039c2 <HAL_SAI_Init+0x62>
 80039b4:	e008      	b.n	80039c8 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
      break;
 80039ba:	e008      	b.n	80039ce <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80039bc:	2310      	movs	r3, #16
 80039be:	61fb      	str	r3, [r7, #28]
      break;
 80039c0:	e005      	b.n	80039ce <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80039c2:	2320      	movs	r3, #32
 80039c4:	61fb      	str	r3, [r7, #28]
      break;
 80039c6:	e002      	b.n	80039ce <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
      break;
 80039cc:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d81d      	bhi.n	8003a12 <HAL_SAI_Init+0xb2>
 80039d6:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <HAL_SAI_Init+0x7c>)
 80039d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039dc:	080039ed 	.word	0x080039ed
 80039e0:	080039f3 	.word	0x080039f3
 80039e4:	080039fb 	.word	0x080039fb
 80039e8:	08003a03 	.word	0x08003a03
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
      break;
 80039f0:	e012      	b.n	8003a18 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80039f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039f6:	617b      	str	r3, [r7, #20]
      break;
 80039f8:	e00e      	b.n	8003a18 <HAL_SAI_Init+0xb8>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80039fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039fe:	617b      	str	r3, [r7, #20]
      break;
 8003a00:	e00a      	b.n	8003a18 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003a02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a06:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	61fb      	str	r3, [r7, #28]
      break;
 8003a10:	e002      	b.n	8003a18 <HAL_SAI_Init+0xb8>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
      break;
 8003a16:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a81      	ldr	r2, [pc, #516]	; (8003c24 <HAL_SAI_Init+0x2c4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_SAI_Init+0xcc>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a80      	ldr	r2, [pc, #512]	; (8003c28 <HAL_SAI_Init+0x2c8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d103      	bne.n	8003a34 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8003a2c:	4a7f      	ldr	r2, [pc, #508]	; (8003c2c <HAL_SAI_Init+0x2cc>)
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e002      	b.n	8003a3a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8003a34:	4a7e      	ldr	r2, [pc, #504]	; (8003c30 <HAL_SAI_Init+0x2d0>)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d041      	beq.n	8003ac6 <HAL_SAI_Init+0x166>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a77      	ldr	r2, [pc, #476]	; (8003c24 <HAL_SAI_Init+0x2c4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_SAI_Init+0xf6>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a75      	ldr	r2, [pc, #468]	; (8003c28 <HAL_SAI_Init+0x2c8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d105      	bne.n	8003a62 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003a56:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003a5a:	f7ff f807 	bl	8002a6c <HAL_RCCEx_GetPeriphCLKFreq>
 8003a5e:	6138      	str	r0, [r7, #16]
 8003a60:	e004      	b.n	8003a6c <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003a62:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a66:	f7ff f801 	bl	8002a6c <HAL_RCCEx_GetPeriphCLKFreq>
 8003a6a:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	461a      	mov	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	025b      	lsls	r3, r3, #9
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4a6b      	ldr	r2, [pc, #428]	; (8003c34 <HAL_SAI_Init+0x2d4>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	08da      	lsrs	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8003a92:	68f9      	ldr	r1, [r7, #12]
 8003a94:	4b67      	ldr	r3, [pc, #412]	; (8003c34 <HAL_SAI_Init+0x2d4>)
 8003a96:	fba3 2301 	umull	r2, r3, r3, r1
 8003a9a:	08da      	lsrs	r2, r3, #3
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	1aca      	subs	r2, r1, r3
 8003aa6:	2a08      	cmp	r2, #8
 8003aa8:	d904      	bls.n	8003ab4 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d104      	bne.n	8003ac6 <HAL_SAI_Init+0x166>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	085a      	lsrs	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_SAI_Init+0x176>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d109      	bne.n	8003aea <HAL_SAI_Init+0x18a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_SAI_Init+0x182>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e001      	b.n	8003ae6 <HAL_SAI_Init+0x186>
 8003ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	e008      	b.n	8003afc <HAL_SAI_Init+0x19c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d102      	bne.n	8003af8 <HAL_SAI_Init+0x198>
 8003af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003af6:	e000      	b.n	8003afa <HAL_SAI_Init+0x19a>
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6819      	ldr	r1, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4b4c      	ldr	r3, [pc, #304]	; (8003c38 <HAL_SAI_Init+0x2d8>)
 8003b08:	400b      	ands	r3, r1
 8003b0a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6819      	ldr	r1, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003b20:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	431a      	orrs	r2, r3
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8003b34:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003b40:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	051b      	lsls	r3, r3, #20
 8003b48:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003b60:	f023 030f 	bic.w	r3, r3, #15
 8003b64:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6859      	ldr	r1, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699a      	ldr	r2, [r3, #24]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6899      	ldr	r1, [r3, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	4b2b      	ldr	r3, [pc, #172]	; (8003c3c <HAL_SAI_Init+0x2dc>)
 8003b90:	400b      	ands	r3, r1
 8003b92:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6899      	ldr	r1, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003ba4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8003baa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8003bb0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8003bba:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68d9      	ldr	r1, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	f24f 0320 	movw	r3, #61472	; 0xf020
 8003bd2:	400b      	ands	r3, r1
 8003bd4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68d9      	ldr	r1, [r3, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bea:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003bec:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3720      	adds	r7, #32
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40015404 	.word	0x40015404
 8003c28:	40015424 	.word	0x40015424
 8003c2c:	40015400 	.word	0x40015400
 8003c30:	40015800 	.word	0x40015800
 8003c34:	cccccccd 	.word	0xcccccccd
 8003c38:	ff05c010 	.word	0xff05c010
 8003c3c:	fff88000 	.word	0xfff88000

08003c40 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_SAI_Abort+0x1a>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e053      	b.n	8003d02 <HAL_SAI_Abort+0xc2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c70:	d125      	bne.n	8003cbe <HAL_SAI_Abort+0x7e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003c80:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b12      	cmp	r3, #18
 8003c8c:	d108      	bne.n	8003ca0 <HAL_SAI_Abort+0x60>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d004      	beq.n	8003ca0 <HAL_SAI_Abort+0x60>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fd fa94 	bl	80011c8 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b22      	cmp	r3, #34	; 0x22
 8003caa:	d108      	bne.n	8003cbe <HAL_SAI_Abort+0x7e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d004      	beq.n	8003cbe <HAL_SAI_Abort+0x7e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fd fa85 	bl	80011c8 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cce:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fbc3 	bl	800445c <SAI_Disable>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_SAI_Abort+0xa0>
  {
    status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0208 	orr.w	r2, r2, #8
 8003cee:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	4613      	mov	r3, r2
 8003d18:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <HAL_SAI_Receive_DMA+0x1a>
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e074      	b.n	8003e14 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d16d      	bne.n	8003e12 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_SAI_Receive_DMA+0x38>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e067      	b.n	8003e14 <HAL_SAI_Receive_DMA+0x108>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	88fa      	ldrh	r2, [r7, #6]
 8003d56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	88fa      	ldrh	r2, [r7, #6]
 8003d5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2222      	movs	r2, #34	; 0x22
 8003d6e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	4a29      	ldr	r2, [pc, #164]	; (8003e1c <HAL_SAI_Receive_DMA+0x110>)
 8003d78:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	4a28      	ldr	r2, [pc, #160]	; (8003e20 <HAL_SAI_Receive_DMA+0x114>)
 8003d80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	4a27      	ldr	r2, [pc, #156]	; (8003e24 <HAL_SAI_Receive_DMA+0x118>)
 8003d88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	2200      	movs	r2, #0
 8003d90:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	331c      	adds	r3, #28
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003da2:	461a      	mov	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003daa:	f7fd f9ad 	bl	8001108 <HAL_DMA_Start_IT>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e029      	b.n	8003e14 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fb12 	bl	80043ec <SAI_InterruptFlag>
 8003dc8:	4601      	mov	r1, r0
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003de6:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d107      	bne.n	8003e06 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e04:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e000      	b.n	8003e14 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8003e12:	2302      	movs	r3, #2
  }
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	0800452f 	.word	0x0800452f
 8003e20:	080044d1 	.word	0x080044d1
 8003e24:	0800454b 	.word	0x0800454b

08003e28 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8192 	beq.w	8004162 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <HAL_SAI_IRQHandler+0x4c>
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
 8003e72:	e176      	b.n	8004162 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d01e      	beq.n	8003ebc <HAL_SAI_IRQHandler+0x94>
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d019      	beq.n	8003ebc <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b22      	cmp	r3, #34	; 0x22
 8003e9a:	d101      	bne.n	8003ea0 <HAL_SAI_IRQHandler+0x78>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <HAL_SAI_IRQHandler+0x7a>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f95b 	bl	8004170 <HAL_SAI_ErrorCallback>
 8003eba:	e152      	b.n	8004162 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d011      	beq.n	8003eea <HAL_SAI_IRQHandler+0xc2>
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00c      	beq.n	8003eea <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8140 	beq.w	8004162 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee6:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8003ee8:	e13b      	b.n	8004162 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d055      	beq.n	8003fa0 <HAL_SAI_IRQHandler+0x178>
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d050      	beq.n	8003fa0 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2220      	movs	r2, #32
 8003f04:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f0c:	f043 0204 	orr.w	r2, r3, #4
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d038      	beq.n	8003f92 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d016      	beq.n	8003f56 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f2c:	4a8f      	ldr	r2, [pc, #572]	; (800416c <HAL_SAI_IRQHandler+0x344>)
 8003f2e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fd f985 	bl	8001244 <HAL_DMA_Abort_IT>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f46:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f90d 	bl	8004170 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80fc 	beq.w	8004158 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	4a81      	ldr	r2, [pc, #516]	; (800416c <HAL_SAI_IRQHandler+0x344>)
 8003f66:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fd f969 	bl	8001244 <HAL_DMA_Abort_IT>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80ef 	beq.w	8004158 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f8f0 	bl	8004170 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003f90:	e0e2      	b.n	8004158 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff fe54 	bl	8003c40 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f8e9 	bl	8004170 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003f9e:	e0db      	b.n	8004158 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d055      	beq.n	8004056 <HAL_SAI_IRQHandler+0x22e>
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d050      	beq.n	8004056 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2240      	movs	r2, #64	; 0x40
 8003fba:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fc2:	f043 0208 	orr.w	r2, r3, #8
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d038      	beq.n	8004048 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d016      	beq.n	800400c <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe2:	4a62      	ldr	r2, [pc, #392]	; (800416c <HAL_SAI_IRQHandler+0x344>)
 8003fe4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd f92a 	bl	8001244 <HAL_DMA_Abort_IT>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ffc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f8b2 	bl	8004170 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80a3 	beq.w	800415c <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	4a54      	ldr	r2, [pc, #336]	; (800416c <HAL_SAI_IRQHandler+0x344>)
 800401c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4618      	mov	r0, r3
 8004024:	f7fd f90e 	bl	8001244 <HAL_DMA_Abort_IT>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 8096 	beq.w	800415c <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004036:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f895 	bl	8004170 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004046:	e089      	b.n	800415c <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff fdf9 	bl	8003c40 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f88e 	bl	8004170 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004054:	e082      	b.n	800415c <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d061      	beq.n	8004124 <HAL_SAI_IRQHandler+0x2fc>
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d05c      	beq.n	8004124 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2204      	movs	r2, #4
 8004070:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004078:	f043 0220 	orr.w	r2, r3, #32
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d036      	beq.n	80040fa <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004090:	2b00      	cmp	r3, #0
 8004092:	d016      	beq.n	80040c2 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004098:	4a34      	ldr	r2, [pc, #208]	; (800416c <HAL_SAI_IRQHandler+0x344>)
 800409a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fd f8cf 	bl	8001244 <HAL_DMA_Abort_IT>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f857 	bl	8004170 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d04a      	beq.n	8004160 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ce:	4a27      	ldr	r2, [pc, #156]	; (800416c <HAL_SAI_IRQHandler+0x344>)
 80040d0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fd f8b4 	bl	8001244 <HAL_DMA_Abort_IT>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d03e      	beq.n	8004160 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f83c 	bl	8004170 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80040f8:	e032      	b.n	8004160 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2200      	movs	r2, #0
 8004100:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800410a:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f827 	bl	8004170 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004122:	e01d      	b.n	8004160 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f003 0310 	and.w	r3, r3, #16
 800412a:	2b00      	cmp	r3, #0
 800412c:	d019      	beq.n	8004162 <HAL_SAI_IRQHandler+0x33a>
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b00      	cmp	r3, #0
 8004136:	d014      	beq.n	8004162 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2210      	movs	r2, #16
 800413e:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004146:	f043 0210 	orr.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f80d 	bl	8004170 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8004156:	e004      	b.n	8004162 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004158:	bf00      	nop
 800415a:	e002      	b.n	8004162 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800415c:	bf00      	nop
 800415e:	e000      	b.n	8004162 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004160:	bf00      	nop
}
 8004162:	bf00      	nop
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	0800459d 	.word	0x0800459d

08004170 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <SAI_InitI2S+0x2e>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d103      	bne.n	80041ba <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80041b8:	e002      	b.n	80041c0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041c6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041ce:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e077      	b.n	80042da <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d107      	bne.n	8004200 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80041fc:	651a      	str	r2, [r3, #80]	; 0x50
 80041fe:	e006      	b.n	800420e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004206:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Frame definition */
  switch (datasize)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b03      	cmp	r3, #3
 8004212:	d84f      	bhi.n	80042b4 <SAI_InitI2S+0x130>
 8004214:	a201      	add	r2, pc, #4	; (adr r2, 800421c <SAI_InitI2S+0x98>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	0800422d 	.word	0x0800422d
 8004220:	0800424f 	.word	0x0800424f
 8004224:	08004271 	.word	0x08004271
 8004228:	08004293 	.word	0x08004293
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2280      	movs	r2, #128	; 0x80
 8004230:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	085b      	lsrs	r3, r3, #1
 8004240:	011a      	lsls	r2, r3, #4
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2240      	movs	r2, #64	; 0x40
 800424a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800424c:	e035      	b.n	80042ba <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2280      	movs	r2, #128	; 0x80
 8004252:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	085b      	lsrs	r3, r3, #1
 8004258:	019a      	lsls	r2, r3, #6
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	085b      	lsrs	r3, r3, #1
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2280      	movs	r2, #128	; 0x80
 800426c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800426e:	e024      	b.n	80042ba <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	22c0      	movs	r2, #192	; 0xc0
 8004274:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	085b      	lsrs	r3, r3, #1
 800427a:	019a      	lsls	r2, r3, #6
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	085b      	lsrs	r3, r3, #1
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2280      	movs	r2, #128	; 0x80
 800428e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004290:	e013      	b.n	80042ba <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	22e0      	movs	r2, #224	; 0xe0
 8004296:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	019a      	lsls	r2, r3, #6
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	085b      	lsrs	r3, r3, #1
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2280      	movs	r2, #128	; 0x80
 80042b0:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80042b2:	e002      	b.n	80042ba <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	75fb      	strb	r3, [r7, #23]
      break;
 80042b8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d10b      	bne.n	80042d8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d102      	bne.n	80042cc <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2210      	movs	r2, #16
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d102      	bne.n	80042d8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2208      	movs	r2, #8
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return status;
 80042d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop

080042e8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <SAI_InitPCM+0x2e>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d103      	bne.n	800431e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	63da      	str	r2, [r3, #60]	; 0x3c
 800431c:	e002      	b.n	8004324 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004330:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004338:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800434c:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b04      	cmp	r3, #4
 8004352:	d103      	bne.n	800435c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	645a      	str	r2, [r3, #68]	; 0x44
 800435a:	e002      	b.n	8004362 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	220d      	movs	r2, #13
 8004360:	645a      	str	r2, [r3, #68]	; 0x44
  }

  switch (datasize)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b03      	cmp	r3, #3
 8004366:	d837      	bhi.n	80043d8 <SAI_InitPCM+0xf0>
 8004368:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <SAI_InitPCM+0x88>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	08004381 	.word	0x08004381
 8004374:	08004397 	.word	0x08004397
 8004378:	080043ad 	.word	0x080043ad
 800437c:	080043c3 	.word	0x080043c3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2280      	movs	r2, #128	; 0x80
 8004384:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	011a      	lsls	r2, r3, #4
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2240      	movs	r2, #64	; 0x40
 8004392:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8004394:	e023      	b.n	80043de <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2280      	movs	r2, #128	; 0x80
 800439a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2280      	movs	r2, #128	; 0x80
 80043a8:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80043aa:	e018      	b.n	80043de <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	22c0      	movs	r2, #192	; 0xc0
 80043b0:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2280      	movs	r2, #128	; 0x80
 80043be:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80043c0:	e00d      	b.n	80043de <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	22e0      	movs	r2, #224	; 0xe0
 80043c6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2280      	movs	r2, #128	; 0x80
 80043d4:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 80043d6:	e002      	b.n	80043de <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	75fb      	strb	r3, [r7, #23]
      break;
 80043dc:	bf00      	nop
  }

  return status;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d103      	bne.n	800440a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f043 0308 	orr.w	r3, r3, #8
 8004408:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	2b08      	cmp	r3, #8
 8004410:	d10b      	bne.n	800442a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004416:	2b03      	cmp	r3, #3
 8004418:	d003      	beq.n	8004422 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d103      	bne.n	800442a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f043 0310 	orr.w	r3, r3, #16
 8004428:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b03      	cmp	r3, #3
 8004430:	d003      	beq.n	800443a <SAI_InterruptFlag+0x4e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d104      	bne.n	8004444 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	e003      	b.n	800444c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f043 0304 	orr.w	r3, r3, #4
 800444a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800444c:	68fb      	ldr	r3, [r7, #12]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004464:	4b18      	ldr	r3, [pc, #96]	; (80044c8 <SAI_Disable+0x6c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a18      	ldr	r2, [pc, #96]	; (80044cc <SAI_Disable+0x70>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	0b1b      	lsrs	r3, r3, #12
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004486:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10a      	bne.n	80044a4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004494:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	72fb      	strb	r3, [r7, #11]
      break;
 80044a2:	e009      	b.n	80044b8 <SAI_Disable+0x5c>
    }
    count--;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e7      	bne.n	8004488 <SAI_Disable+0x2c>

  return status;
 80044b8:	7afb      	ldrb	r3, [r7, #11]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	20000000 	.word	0x20000000
 80044cc:	95cbec1b 	.word	0x95cbec1b

080044d0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	d01c      	beq.n	8004520 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80044f4:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80044fe:	2100      	movs	r1, #0
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7ff ff73 	bl	80043ec <SAI_InterruptFlag>
 8004506:	4603      	mov	r3, r0
 8004508:	43d9      	mvns	r1, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	400a      	ands	r2, r1
 8004516:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7fc f975 	bl	8000810 <HAL_SAI_RxCpltCallback>
#endif
}
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7fc f957 	bl	80007f0 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800455e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004576:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f7ff ff6f 	bl	800445c <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f7ff fdee 	bl	8004170 <HAL_SAI_ErrorCallback>
#endif
}
 8004594:	bf00      	nop
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80045b8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2200      	movs	r2, #0
 80045c0:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045ca:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d00a      	beq.n	80045ec <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7ff ff40 	bl	800445c <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0208 	orr.w	r2, r2, #8
 80045ea:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff fdb7 	bl	8004170 <HAL_SAI_ErrorCallback>
#endif
}
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e040      	b.n	800469e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fc f985 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2224      	movs	r2, #36	; 0x24
 8004636:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f8bf 	bl	80047cc <UART_SetConfig>
 800464e:	4603      	mov	r3, r0
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e022      	b.n	800469e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fb3d 	bl	8004ce0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004674:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004684:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0201 	orr.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fbc4 	bl	8004e24 <UART_CheckIdleState>
 800469c:	4603      	mov	r3, r0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b08a      	sub	sp, #40	; 0x28
 80046aa:	af02      	add	r7, sp, #8
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	4613      	mov	r3, r2
 80046b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ba:	2b20      	cmp	r3, #32
 80046bc:	f040 8081 	bne.w	80047c2 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_UART_Transmit+0x26>
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e079      	b.n	80047c4 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_UART_Transmit+0x38>
 80046da:	2302      	movs	r3, #2
 80046dc:	e072      	b.n	80047c4 <HAL_UART_Transmit+0x11e>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2221      	movs	r2, #33	; 0x21
 80046f0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80046f2:	f7fc fb33 	bl	8000d5c <HAL_GetTick>
 80046f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	88fa      	ldrh	r2, [r7, #6]
 80046fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	88fa      	ldrh	r2, [r7, #6]
 8004704:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004710:	d108      	bne.n	8004724 <HAL_UART_Transmit+0x7e>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d104      	bne.n	8004724 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	e003      	b.n	800472c <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004728:	2300      	movs	r3, #0
 800472a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004734:	e02d      	b.n	8004792 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2200      	movs	r2, #0
 800473e:	2180      	movs	r1, #128	; 0x80
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fbb4 	bl	8004eae <UART_WaitOnFlagUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e039      	b.n	80047c4 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10b      	bne.n	800476e <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	881a      	ldrh	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004762:	b292      	uxth	r2, r2
 8004764:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	3302      	adds	r3, #2
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	e008      	b.n	8004780 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	781a      	ldrb	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	b292      	uxth	r2, r2
 8004778:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3301      	adds	r3, #1
 800477e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1cb      	bne.n	8004736 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2200      	movs	r2, #0
 80047a6:	2140      	movs	r1, #64	; 0x40
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 fb80 	bl	8004eae <UART_WaitOnFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e005      	b.n	80047c4 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	e000      	b.n	80047c4 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80047c2:	2302      	movs	r3, #2
  }
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3720      	adds	r7, #32
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047cc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80047d0:	b088      	sub	sp, #32
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4bac      	ldr	r3, [pc, #688]	; (8004aac <UART_SetConfig+0x2e0>)
 80047fa:	4013      	ands	r3, r2
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	69f9      	ldr	r1, [r7, #28]
 8004802:	430b      	orrs	r3, r1
 8004804:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4aa2      	ldr	r2, [pc, #648]	; (8004ab0 <UART_SetConfig+0x2e4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d004      	beq.n	8004836 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	4313      	orrs	r3, r2
 8004834:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69fa      	ldr	r2, [r7, #28]
 8004846:	430a      	orrs	r2, r1
 8004848:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a99      	ldr	r2, [pc, #612]	; (8004ab4 <UART_SetConfig+0x2e8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d121      	bne.n	8004898 <UART_SetConfig+0xcc>
 8004854:	4b98      	ldr	r3, [pc, #608]	; (8004ab8 <UART_SetConfig+0x2ec>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	2b03      	cmp	r3, #3
 8004860:	d816      	bhi.n	8004890 <UART_SetConfig+0xc4>
 8004862:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0x9c>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	08004879 	.word	0x08004879
 800486c:	08004885 	.word	0x08004885
 8004870:	0800487f 	.word	0x0800487f
 8004874:	0800488b 	.word	0x0800488b
 8004878:	2301      	movs	r3, #1
 800487a:	76fb      	strb	r3, [r7, #27]
 800487c:	e0e8      	b.n	8004a50 <UART_SetConfig+0x284>
 800487e:	2302      	movs	r3, #2
 8004880:	76fb      	strb	r3, [r7, #27]
 8004882:	e0e5      	b.n	8004a50 <UART_SetConfig+0x284>
 8004884:	2304      	movs	r3, #4
 8004886:	76fb      	strb	r3, [r7, #27]
 8004888:	e0e2      	b.n	8004a50 <UART_SetConfig+0x284>
 800488a:	2308      	movs	r3, #8
 800488c:	76fb      	strb	r3, [r7, #27]
 800488e:	e0df      	b.n	8004a50 <UART_SetConfig+0x284>
 8004890:	2310      	movs	r3, #16
 8004892:	76fb      	strb	r3, [r7, #27]
 8004894:	bf00      	nop
 8004896:	e0db      	b.n	8004a50 <UART_SetConfig+0x284>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a87      	ldr	r2, [pc, #540]	; (8004abc <UART_SetConfig+0x2f0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d134      	bne.n	800490c <UART_SetConfig+0x140>
 80048a2:	4b85      	ldr	r3, [pc, #532]	; (8004ab8 <UART_SetConfig+0x2ec>)
 80048a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a8:	f003 030c 	and.w	r3, r3, #12
 80048ac:	2b0c      	cmp	r3, #12
 80048ae:	d829      	bhi.n	8004904 <UART_SetConfig+0x138>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <UART_SetConfig+0xec>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048ed 	.word	0x080048ed
 80048bc:	08004905 	.word	0x08004905
 80048c0:	08004905 	.word	0x08004905
 80048c4:	08004905 	.word	0x08004905
 80048c8:	080048f9 	.word	0x080048f9
 80048cc:	08004905 	.word	0x08004905
 80048d0:	08004905 	.word	0x08004905
 80048d4:	08004905 	.word	0x08004905
 80048d8:	080048f3 	.word	0x080048f3
 80048dc:	08004905 	.word	0x08004905
 80048e0:	08004905 	.word	0x08004905
 80048e4:	08004905 	.word	0x08004905
 80048e8:	080048ff 	.word	0x080048ff
 80048ec:	2300      	movs	r3, #0
 80048ee:	76fb      	strb	r3, [r7, #27]
 80048f0:	e0ae      	b.n	8004a50 <UART_SetConfig+0x284>
 80048f2:	2302      	movs	r3, #2
 80048f4:	76fb      	strb	r3, [r7, #27]
 80048f6:	e0ab      	b.n	8004a50 <UART_SetConfig+0x284>
 80048f8:	2304      	movs	r3, #4
 80048fa:	76fb      	strb	r3, [r7, #27]
 80048fc:	e0a8      	b.n	8004a50 <UART_SetConfig+0x284>
 80048fe:	2308      	movs	r3, #8
 8004900:	76fb      	strb	r3, [r7, #27]
 8004902:	e0a5      	b.n	8004a50 <UART_SetConfig+0x284>
 8004904:	2310      	movs	r3, #16
 8004906:	76fb      	strb	r3, [r7, #27]
 8004908:	bf00      	nop
 800490a:	e0a1      	b.n	8004a50 <UART_SetConfig+0x284>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a6b      	ldr	r2, [pc, #428]	; (8004ac0 <UART_SetConfig+0x2f4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d120      	bne.n	8004958 <UART_SetConfig+0x18c>
 8004916:	4b68      	ldr	r3, [pc, #416]	; (8004ab8 <UART_SetConfig+0x2ec>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004920:	2b10      	cmp	r3, #16
 8004922:	d00f      	beq.n	8004944 <UART_SetConfig+0x178>
 8004924:	2b10      	cmp	r3, #16
 8004926:	d802      	bhi.n	800492e <UART_SetConfig+0x162>
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <UART_SetConfig+0x16c>
 800492c:	e010      	b.n	8004950 <UART_SetConfig+0x184>
 800492e:	2b20      	cmp	r3, #32
 8004930:	d005      	beq.n	800493e <UART_SetConfig+0x172>
 8004932:	2b30      	cmp	r3, #48	; 0x30
 8004934:	d009      	beq.n	800494a <UART_SetConfig+0x17e>
 8004936:	e00b      	b.n	8004950 <UART_SetConfig+0x184>
 8004938:	2300      	movs	r3, #0
 800493a:	76fb      	strb	r3, [r7, #27]
 800493c:	e088      	b.n	8004a50 <UART_SetConfig+0x284>
 800493e:	2302      	movs	r3, #2
 8004940:	76fb      	strb	r3, [r7, #27]
 8004942:	e085      	b.n	8004a50 <UART_SetConfig+0x284>
 8004944:	2304      	movs	r3, #4
 8004946:	76fb      	strb	r3, [r7, #27]
 8004948:	e082      	b.n	8004a50 <UART_SetConfig+0x284>
 800494a:	2308      	movs	r3, #8
 800494c:	76fb      	strb	r3, [r7, #27]
 800494e:	e07f      	b.n	8004a50 <UART_SetConfig+0x284>
 8004950:	2310      	movs	r3, #16
 8004952:	76fb      	strb	r3, [r7, #27]
 8004954:	bf00      	nop
 8004956:	e07b      	b.n	8004a50 <UART_SetConfig+0x284>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a59      	ldr	r2, [pc, #356]	; (8004ac4 <UART_SetConfig+0x2f8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d120      	bne.n	80049a4 <UART_SetConfig+0x1d8>
 8004962:	4b55      	ldr	r3, [pc, #340]	; (8004ab8 <UART_SetConfig+0x2ec>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800496c:	2b40      	cmp	r3, #64	; 0x40
 800496e:	d00f      	beq.n	8004990 <UART_SetConfig+0x1c4>
 8004970:	2b40      	cmp	r3, #64	; 0x40
 8004972:	d802      	bhi.n	800497a <UART_SetConfig+0x1ae>
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <UART_SetConfig+0x1b8>
 8004978:	e010      	b.n	800499c <UART_SetConfig+0x1d0>
 800497a:	2b80      	cmp	r3, #128	; 0x80
 800497c:	d005      	beq.n	800498a <UART_SetConfig+0x1be>
 800497e:	2bc0      	cmp	r3, #192	; 0xc0
 8004980:	d009      	beq.n	8004996 <UART_SetConfig+0x1ca>
 8004982:	e00b      	b.n	800499c <UART_SetConfig+0x1d0>
 8004984:	2300      	movs	r3, #0
 8004986:	76fb      	strb	r3, [r7, #27]
 8004988:	e062      	b.n	8004a50 <UART_SetConfig+0x284>
 800498a:	2302      	movs	r3, #2
 800498c:	76fb      	strb	r3, [r7, #27]
 800498e:	e05f      	b.n	8004a50 <UART_SetConfig+0x284>
 8004990:	2304      	movs	r3, #4
 8004992:	76fb      	strb	r3, [r7, #27]
 8004994:	e05c      	b.n	8004a50 <UART_SetConfig+0x284>
 8004996:	2308      	movs	r3, #8
 8004998:	76fb      	strb	r3, [r7, #27]
 800499a:	e059      	b.n	8004a50 <UART_SetConfig+0x284>
 800499c:	2310      	movs	r3, #16
 800499e:	76fb      	strb	r3, [r7, #27]
 80049a0:	bf00      	nop
 80049a2:	e055      	b.n	8004a50 <UART_SetConfig+0x284>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a47      	ldr	r2, [pc, #284]	; (8004ac8 <UART_SetConfig+0x2fc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d124      	bne.n	80049f8 <UART_SetConfig+0x22c>
 80049ae:	4b42      	ldr	r3, [pc, #264]	; (8004ab8 <UART_SetConfig+0x2ec>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049bc:	d012      	beq.n	80049e4 <UART_SetConfig+0x218>
 80049be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c2:	d802      	bhi.n	80049ca <UART_SetConfig+0x1fe>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d007      	beq.n	80049d8 <UART_SetConfig+0x20c>
 80049c8:	e012      	b.n	80049f0 <UART_SetConfig+0x224>
 80049ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ce:	d006      	beq.n	80049de <UART_SetConfig+0x212>
 80049d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049d4:	d009      	beq.n	80049ea <UART_SetConfig+0x21e>
 80049d6:	e00b      	b.n	80049f0 <UART_SetConfig+0x224>
 80049d8:	2300      	movs	r3, #0
 80049da:	76fb      	strb	r3, [r7, #27]
 80049dc:	e038      	b.n	8004a50 <UART_SetConfig+0x284>
 80049de:	2302      	movs	r3, #2
 80049e0:	76fb      	strb	r3, [r7, #27]
 80049e2:	e035      	b.n	8004a50 <UART_SetConfig+0x284>
 80049e4:	2304      	movs	r3, #4
 80049e6:	76fb      	strb	r3, [r7, #27]
 80049e8:	e032      	b.n	8004a50 <UART_SetConfig+0x284>
 80049ea:	2308      	movs	r3, #8
 80049ec:	76fb      	strb	r3, [r7, #27]
 80049ee:	e02f      	b.n	8004a50 <UART_SetConfig+0x284>
 80049f0:	2310      	movs	r3, #16
 80049f2:	76fb      	strb	r3, [r7, #27]
 80049f4:	bf00      	nop
 80049f6:	e02b      	b.n	8004a50 <UART_SetConfig+0x284>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a2c      	ldr	r2, [pc, #176]	; (8004ab0 <UART_SetConfig+0x2e4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d124      	bne.n	8004a4c <UART_SetConfig+0x280>
 8004a02:	4b2d      	ldr	r3, [pc, #180]	; (8004ab8 <UART_SetConfig+0x2ec>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a10:	d012      	beq.n	8004a38 <UART_SetConfig+0x26c>
 8004a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a16:	d802      	bhi.n	8004a1e <UART_SetConfig+0x252>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d007      	beq.n	8004a2c <UART_SetConfig+0x260>
 8004a1c:	e012      	b.n	8004a44 <UART_SetConfig+0x278>
 8004a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a22:	d006      	beq.n	8004a32 <UART_SetConfig+0x266>
 8004a24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a28:	d009      	beq.n	8004a3e <UART_SetConfig+0x272>
 8004a2a:	e00b      	b.n	8004a44 <UART_SetConfig+0x278>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	76fb      	strb	r3, [r7, #27]
 8004a30:	e00e      	b.n	8004a50 <UART_SetConfig+0x284>
 8004a32:	2302      	movs	r3, #2
 8004a34:	76fb      	strb	r3, [r7, #27]
 8004a36:	e00b      	b.n	8004a50 <UART_SetConfig+0x284>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	76fb      	strb	r3, [r7, #27]
 8004a3c:	e008      	b.n	8004a50 <UART_SetConfig+0x284>
 8004a3e:	2308      	movs	r3, #8
 8004a40:	76fb      	strb	r3, [r7, #27]
 8004a42:	e005      	b.n	8004a50 <UART_SetConfig+0x284>
 8004a44:	2310      	movs	r3, #16
 8004a46:	76fb      	strb	r3, [r7, #27]
 8004a48:	bf00      	nop
 8004a4a:	e001      	b.n	8004a50 <UART_SetConfig+0x284>
 8004a4c:	2310      	movs	r3, #16
 8004a4e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a16      	ldr	r2, [pc, #88]	; (8004ab0 <UART_SetConfig+0x2e4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	f040 8087 	bne.w	8004b6a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a5c:	7efb      	ldrb	r3, [r7, #27]
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d836      	bhi.n	8004ad0 <UART_SetConfig+0x304>
 8004a62:	a201      	add	r2, pc, #4	; (adr r2, 8004a68 <UART_SetConfig+0x29c>)
 8004a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004ad1 	.word	0x08004ad1
 8004a70:	08004a95 	.word	0x08004a95
 8004a74:	08004ad1 	.word	0x08004ad1
 8004a78:	08004a9b 	.word	0x08004a9b
 8004a7c:	08004ad1 	.word	0x08004ad1
 8004a80:	08004ad1 	.word	0x08004ad1
 8004a84:	08004ad1 	.word	0x08004ad1
 8004a88:	08004aa3 	.word	0x08004aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a8c:	f7fd fc7c 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8004a90:	6178      	str	r0, [r7, #20]
        break;
 8004a92:	e022      	b.n	8004ada <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a94:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <UART_SetConfig+0x300>)
 8004a96:	617b      	str	r3, [r7, #20]
        break;
 8004a98:	e01f      	b.n	8004ada <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a9a:	f7fd fbdf 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8004a9e:	6178      	str	r0, [r7, #20]
        break;
 8004aa0:	e01b      	b.n	8004ada <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa6:	617b      	str	r3, [r7, #20]
        break;
 8004aa8:	e017      	b.n	8004ada <UART_SetConfig+0x30e>
 8004aaa:	bf00      	nop
 8004aac:	efff69f3 	.word	0xefff69f3
 8004ab0:	40008000 	.word	0x40008000
 8004ab4:	40013800 	.word	0x40013800
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	40004400 	.word	0x40004400
 8004ac0:	40004800 	.word	0x40004800
 8004ac4:	40004c00 	.word	0x40004c00
 8004ac8:	40005000 	.word	0x40005000
 8004acc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	76bb      	strb	r3, [r7, #26]
        break;
 8004ad8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 80f1 	beq.w	8004cc4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	4413      	add	r3, r2
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d305      	bcc.n	8004afe <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d902      	bls.n	8004b04 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	76bb      	strb	r3, [r7, #26]
 8004b02:	e0df      	b.n	8004cc4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	4619      	mov	r1, r3
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	f04f 0400 	mov.w	r4, #0
 8004b14:	0214      	lsls	r4, r2, #8
 8004b16:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004b1a:	020b      	lsls	r3, r1, #8
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6852      	ldr	r2, [r2, #4]
 8004b20:	0852      	lsrs	r2, r2, #1
 8004b22:	4611      	mov	r1, r2
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	eb13 0b01 	adds.w	fp, r3, r1
 8004b2c:	eb44 0c02 	adc.w	ip, r4, r2
 8004b30:	4658      	mov	r0, fp
 8004b32:	4661      	mov	r1, ip
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f04f 0400 	mov.w	r4, #0
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4623      	mov	r3, r4
 8004b40:	f7fb fb42 	bl	80001c8 <__aeabi_uldivmod>
 8004b44:	4603      	mov	r3, r0
 8004b46:	460c      	mov	r4, r1
 8004b48:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b50:	d308      	bcc.n	8004b64 <UART_SetConfig+0x398>
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b58:	d204      	bcs.n	8004b64 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	60da      	str	r2, [r3, #12]
 8004b62:	e0af      	b.n	8004cc4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	76bb      	strb	r3, [r7, #26]
 8004b68:	e0ac      	b.n	8004cc4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b72:	d15b      	bne.n	8004c2c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004b74:	7efb      	ldrb	r3, [r7, #27]
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d827      	bhi.n	8004bca <UART_SetConfig+0x3fe>
 8004b7a:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <UART_SetConfig+0x3b4>)
 8004b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b80:	08004ba5 	.word	0x08004ba5
 8004b84:	08004bad 	.word	0x08004bad
 8004b88:	08004bb5 	.word	0x08004bb5
 8004b8c:	08004bcb 	.word	0x08004bcb
 8004b90:	08004bbb 	.word	0x08004bbb
 8004b94:	08004bcb 	.word	0x08004bcb
 8004b98:	08004bcb 	.word	0x08004bcb
 8004b9c:	08004bcb 	.word	0x08004bcb
 8004ba0:	08004bc3 	.word	0x08004bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba4:	f7fd fbf0 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8004ba8:	6178      	str	r0, [r7, #20]
        break;
 8004baa:	e013      	b.n	8004bd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bac:	f7fd fc02 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 8004bb0:	6178      	str	r0, [r7, #20]
        break;
 8004bb2:	e00f      	b.n	8004bd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb4:	4b49      	ldr	r3, [pc, #292]	; (8004cdc <UART_SetConfig+0x510>)
 8004bb6:	617b      	str	r3, [r7, #20]
        break;
 8004bb8:	e00c      	b.n	8004bd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bba:	f7fd fb4f 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8004bbe:	6178      	str	r0, [r7, #20]
        break;
 8004bc0:	e008      	b.n	8004bd4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc6:	617b      	str	r3, [r7, #20]
        break;
 8004bc8:	e004      	b.n	8004bd4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	76bb      	strb	r3, [r7, #26]
        break;
 8004bd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d074      	beq.n	8004cc4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	005a      	lsls	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	085b      	lsrs	r3, r3, #1
 8004be4:	441a      	add	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	2b0f      	cmp	r3, #15
 8004bf6:	d916      	bls.n	8004c26 <UART_SetConfig+0x45a>
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfe:	d212      	bcs.n	8004c26 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	f023 030f 	bic.w	r3, r3, #15
 8004c08:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	085b      	lsrs	r3, r3, #1
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	89fb      	ldrh	r3, [r7, #14]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	89fa      	ldrh	r2, [r7, #14]
 8004c22:	60da      	str	r2, [r3, #12]
 8004c24:	e04e      	b.n	8004cc4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	76bb      	strb	r3, [r7, #26]
 8004c2a:	e04b      	b.n	8004cc4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c2c:	7efb      	ldrb	r3, [r7, #27]
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d827      	bhi.n	8004c82 <UART_SetConfig+0x4b6>
 8004c32:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <UART_SetConfig+0x46c>)
 8004c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c38:	08004c5d 	.word	0x08004c5d
 8004c3c:	08004c65 	.word	0x08004c65
 8004c40:	08004c6d 	.word	0x08004c6d
 8004c44:	08004c83 	.word	0x08004c83
 8004c48:	08004c73 	.word	0x08004c73
 8004c4c:	08004c83 	.word	0x08004c83
 8004c50:	08004c83 	.word	0x08004c83
 8004c54:	08004c83 	.word	0x08004c83
 8004c58:	08004c7b 	.word	0x08004c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c5c:	f7fd fb94 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8004c60:	6178      	str	r0, [r7, #20]
        break;
 8004c62:	e013      	b.n	8004c8c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c64:	f7fd fba6 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 8004c68:	6178      	str	r0, [r7, #20]
        break;
 8004c6a:	e00f      	b.n	8004c8c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c6c:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <UART_SetConfig+0x510>)
 8004c6e:	617b      	str	r3, [r7, #20]
        break;
 8004c70:	e00c      	b.n	8004c8c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c72:	f7fd faf3 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8004c76:	6178      	str	r0, [r7, #20]
        break;
 8004c78:	e008      	b.n	8004c8c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7e:	617b      	str	r3, [r7, #20]
        break;
 8004c80:	e004      	b.n	8004c8c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	76bb      	strb	r3, [r7, #26]
        break;
 8004c8a:	bf00      	nop
    }

    if (pclk != 0U)
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d018      	beq.n	8004cc4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	085a      	lsrs	r2, r3, #1
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	441a      	add	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	2b0f      	cmp	r3, #15
 8004cac:	d908      	bls.n	8004cc0 <UART_SetConfig+0x4f4>
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb4:	d204      	bcs.n	8004cc0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	60da      	str	r2, [r3, #12]
 8004cbe:	e001      	b.n	8004cc4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004cd0:	7ebb      	ldrb	r3, [r7, #26]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3720      	adds	r7, #32
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004cdc:	00f42400 	.word	0x00f42400

08004ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01a      	beq.n	8004df6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dde:	d10a      	bne.n	8004df6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	605a      	str	r2, [r3, #4]
  }
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004e32:	f7fb ff93 	bl	8000d5c <HAL_GetTick>
 8004e36:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d10e      	bne.n	8004e64 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f82a 	bl	8004eae <UART_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e020      	b.n	8004ea6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d10e      	bne.n	8004e90 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f814 	bl	8004eae <UART_WaitOnFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e00a      	b.n	8004ea6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	603b      	str	r3, [r7, #0]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ebe:	e05d      	b.n	8004f7c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ec6:	d059      	beq.n	8004f7c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec8:	f7fb ff48 	bl	8000d5c <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d302      	bcc.n	8004ede <UART_WaitOnFlagUntilTimeout+0x30>
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d11b      	bne.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004eec:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0201 	bic.w	r2, r2, #1
 8004efc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e042      	b.n	8004f9c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d02b      	beq.n	8004f7c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f32:	d123      	bne.n	8004f7c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f4c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0201 	bic.w	r2, r2, #1
 8004f5c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2220      	movs	r2, #32
 8004f62:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e00f      	b.n	8004f9c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	69da      	ldr	r2, [r3, #28]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d092      	beq.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <__errno>:
 8004fa4:	4b01      	ldr	r3, [pc, #4]	; (8004fac <__errno+0x8>)
 8004fa6:	6818      	ldr	r0, [r3, #0]
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	2000000c 	.word	0x2000000c

08004fb0 <__libc_init_array>:
 8004fb0:	b570      	push	{r4, r5, r6, lr}
 8004fb2:	4e0d      	ldr	r6, [pc, #52]	; (8004fe8 <__libc_init_array+0x38>)
 8004fb4:	4c0d      	ldr	r4, [pc, #52]	; (8004fec <__libc_init_array+0x3c>)
 8004fb6:	1ba4      	subs	r4, r4, r6
 8004fb8:	10a4      	asrs	r4, r4, #2
 8004fba:	2500      	movs	r5, #0
 8004fbc:	42a5      	cmp	r5, r4
 8004fbe:	d109      	bne.n	8004fd4 <__libc_init_array+0x24>
 8004fc0:	4e0b      	ldr	r6, [pc, #44]	; (8004ff0 <__libc_init_array+0x40>)
 8004fc2:	4c0c      	ldr	r4, [pc, #48]	; (8004ff4 <__libc_init_array+0x44>)
 8004fc4:	f000 f8c8 	bl	8005158 <_init>
 8004fc8:	1ba4      	subs	r4, r4, r6
 8004fca:	10a4      	asrs	r4, r4, #2
 8004fcc:	2500      	movs	r5, #0
 8004fce:	42a5      	cmp	r5, r4
 8004fd0:	d105      	bne.n	8004fde <__libc_init_array+0x2e>
 8004fd2:	bd70      	pop	{r4, r5, r6, pc}
 8004fd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fd8:	4798      	blx	r3
 8004fda:	3501      	adds	r5, #1
 8004fdc:	e7ee      	b.n	8004fbc <__libc_init_array+0xc>
 8004fde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fe2:	4798      	blx	r3
 8004fe4:	3501      	adds	r5, #1
 8004fe6:	e7f2      	b.n	8004fce <__libc_init_array+0x1e>
 8004fe8:	080051c0 	.word	0x080051c0
 8004fec:	080051c0 	.word	0x080051c0
 8004ff0:	080051c0 	.word	0x080051c0
 8004ff4:	080051c4 	.word	0x080051c4

08004ff8 <memset>:
 8004ff8:	4402      	add	r2, r0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d100      	bne.n	8005002 <memset+0xa>
 8005000:	4770      	bx	lr
 8005002:	f803 1b01 	strb.w	r1, [r3], #1
 8005006:	e7f9      	b.n	8004ffc <memset+0x4>

08005008 <rand>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4b13      	ldr	r3, [pc, #76]	; (8005058 <rand+0x50>)
 800500c:	681c      	ldr	r4, [r3, #0]
 800500e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005010:	b97b      	cbnz	r3, 8005032 <rand+0x2a>
 8005012:	2018      	movs	r0, #24
 8005014:	f000 f82c 	bl	8005070 <malloc>
 8005018:	4a10      	ldr	r2, [pc, #64]	; (800505c <rand+0x54>)
 800501a:	4b11      	ldr	r3, [pc, #68]	; (8005060 <rand+0x58>)
 800501c:	63a0      	str	r0, [r4, #56]	; 0x38
 800501e:	e9c0 2300 	strd	r2, r3, [r0]
 8005022:	4b10      	ldr	r3, [pc, #64]	; (8005064 <rand+0x5c>)
 8005024:	6083      	str	r3, [r0, #8]
 8005026:	230b      	movs	r3, #11
 8005028:	8183      	strh	r3, [r0, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	2300      	movs	r3, #0
 800502e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005032:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005034:	480c      	ldr	r0, [pc, #48]	; (8005068 <rand+0x60>)
 8005036:	690a      	ldr	r2, [r1, #16]
 8005038:	694b      	ldr	r3, [r1, #20]
 800503a:	4c0c      	ldr	r4, [pc, #48]	; (800506c <rand+0x64>)
 800503c:	4350      	muls	r0, r2
 800503e:	fb04 0003 	mla	r0, r4, r3, r0
 8005042:	fba2 2304 	umull	r2, r3, r2, r4
 8005046:	4403      	add	r3, r0
 8005048:	1c54      	adds	r4, r2, #1
 800504a:	f143 0500 	adc.w	r5, r3, #0
 800504e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8005052:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8005056:	bd38      	pop	{r3, r4, r5, pc}
 8005058:	2000000c 	.word	0x2000000c
 800505c:	abcd330e 	.word	0xabcd330e
 8005060:	e66d1234 	.word	0xe66d1234
 8005064:	0005deec 	.word	0x0005deec
 8005068:	5851f42d 	.word	0x5851f42d
 800506c:	4c957f2d 	.word	0x4c957f2d

08005070 <malloc>:
 8005070:	4b02      	ldr	r3, [pc, #8]	; (800507c <malloc+0xc>)
 8005072:	4601      	mov	r1, r0
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	f000 b803 	b.w	8005080 <_malloc_r>
 800507a:	bf00      	nop
 800507c:	2000000c 	.word	0x2000000c

08005080 <_malloc_r>:
 8005080:	b570      	push	{r4, r5, r6, lr}
 8005082:	1ccd      	adds	r5, r1, #3
 8005084:	f025 0503 	bic.w	r5, r5, #3
 8005088:	3508      	adds	r5, #8
 800508a:	2d0c      	cmp	r5, #12
 800508c:	bf38      	it	cc
 800508e:	250c      	movcc	r5, #12
 8005090:	2d00      	cmp	r5, #0
 8005092:	4606      	mov	r6, r0
 8005094:	db01      	blt.n	800509a <_malloc_r+0x1a>
 8005096:	42a9      	cmp	r1, r5
 8005098:	d903      	bls.n	80050a2 <_malloc_r+0x22>
 800509a:	230c      	movs	r3, #12
 800509c:	6033      	str	r3, [r6, #0]
 800509e:	2000      	movs	r0, #0
 80050a0:	bd70      	pop	{r4, r5, r6, pc}
 80050a2:	f000 f857 	bl	8005154 <__malloc_lock>
 80050a6:	4a21      	ldr	r2, [pc, #132]	; (800512c <_malloc_r+0xac>)
 80050a8:	6814      	ldr	r4, [r2, #0]
 80050aa:	4621      	mov	r1, r4
 80050ac:	b991      	cbnz	r1, 80050d4 <_malloc_r+0x54>
 80050ae:	4c20      	ldr	r4, [pc, #128]	; (8005130 <_malloc_r+0xb0>)
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	b91b      	cbnz	r3, 80050bc <_malloc_r+0x3c>
 80050b4:	4630      	mov	r0, r6
 80050b6:	f000 f83d 	bl	8005134 <_sbrk_r>
 80050ba:	6020      	str	r0, [r4, #0]
 80050bc:	4629      	mov	r1, r5
 80050be:	4630      	mov	r0, r6
 80050c0:	f000 f838 	bl	8005134 <_sbrk_r>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	d124      	bne.n	8005112 <_malloc_r+0x92>
 80050c8:	230c      	movs	r3, #12
 80050ca:	6033      	str	r3, [r6, #0]
 80050cc:	4630      	mov	r0, r6
 80050ce:	f000 f842 	bl	8005156 <__malloc_unlock>
 80050d2:	e7e4      	b.n	800509e <_malloc_r+0x1e>
 80050d4:	680b      	ldr	r3, [r1, #0]
 80050d6:	1b5b      	subs	r3, r3, r5
 80050d8:	d418      	bmi.n	800510c <_malloc_r+0x8c>
 80050da:	2b0b      	cmp	r3, #11
 80050dc:	d90f      	bls.n	80050fe <_malloc_r+0x7e>
 80050de:	600b      	str	r3, [r1, #0]
 80050e0:	50cd      	str	r5, [r1, r3]
 80050e2:	18cc      	adds	r4, r1, r3
 80050e4:	4630      	mov	r0, r6
 80050e6:	f000 f836 	bl	8005156 <__malloc_unlock>
 80050ea:	f104 000b 	add.w	r0, r4, #11
 80050ee:	1d23      	adds	r3, r4, #4
 80050f0:	f020 0007 	bic.w	r0, r0, #7
 80050f4:	1ac3      	subs	r3, r0, r3
 80050f6:	d0d3      	beq.n	80050a0 <_malloc_r+0x20>
 80050f8:	425a      	negs	r2, r3
 80050fa:	50e2      	str	r2, [r4, r3]
 80050fc:	e7d0      	b.n	80050a0 <_malloc_r+0x20>
 80050fe:	428c      	cmp	r4, r1
 8005100:	684b      	ldr	r3, [r1, #4]
 8005102:	bf16      	itet	ne
 8005104:	6063      	strne	r3, [r4, #4]
 8005106:	6013      	streq	r3, [r2, #0]
 8005108:	460c      	movne	r4, r1
 800510a:	e7eb      	b.n	80050e4 <_malloc_r+0x64>
 800510c:	460c      	mov	r4, r1
 800510e:	6849      	ldr	r1, [r1, #4]
 8005110:	e7cc      	b.n	80050ac <_malloc_r+0x2c>
 8005112:	1cc4      	adds	r4, r0, #3
 8005114:	f024 0403 	bic.w	r4, r4, #3
 8005118:	42a0      	cmp	r0, r4
 800511a:	d005      	beq.n	8005128 <_malloc_r+0xa8>
 800511c:	1a21      	subs	r1, r4, r0
 800511e:	4630      	mov	r0, r6
 8005120:	f000 f808 	bl	8005134 <_sbrk_r>
 8005124:	3001      	adds	r0, #1
 8005126:	d0cf      	beq.n	80050c8 <_malloc_r+0x48>
 8005128:	6025      	str	r5, [r4, #0]
 800512a:	e7db      	b.n	80050e4 <_malloc_r+0x64>
 800512c:	20000094 	.word	0x20000094
 8005130:	20000098 	.word	0x20000098

08005134 <_sbrk_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4c06      	ldr	r4, [pc, #24]	; (8005150 <_sbrk_r+0x1c>)
 8005138:	2300      	movs	r3, #0
 800513a:	4605      	mov	r5, r0
 800513c:	4608      	mov	r0, r1
 800513e:	6023      	str	r3, [r4, #0]
 8005140:	f7fb fd06 	bl	8000b50 <_sbrk>
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	d102      	bne.n	800514e <_sbrk_r+0x1a>
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	b103      	cbz	r3, 800514e <_sbrk_r+0x1a>
 800514c:	602b      	str	r3, [r5, #0]
 800514e:	bd38      	pop	{r3, r4, r5, pc}
 8005150:	20000970 	.word	0x20000970

08005154 <__malloc_lock>:
 8005154:	4770      	bx	lr

08005156 <__malloc_unlock>:
 8005156:	4770      	bx	lr

08005158 <_init>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	bf00      	nop
 800515c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515e:	bc08      	pop	{r3}
 8005160:	469e      	mov	lr, r3
 8005162:	4770      	bx	lr

08005164 <_fini>:
 8005164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005166:	bf00      	nop
 8005168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516a:	bc08      	pop	{r3}
 800516c:	469e      	mov	lr, r3
 800516e:	4770      	bx	lr
