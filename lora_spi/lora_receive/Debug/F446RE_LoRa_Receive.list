
F446RE_LoRa_Receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b6c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003d34  08003d34  00013d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d4c  08003d4c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d4c  08003d4c  00013d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d54  08003d54  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000005c  08003db8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08003db8  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6c4  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcb  00000000  00000000  0002c750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002e320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002ed90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b52  00000000  00000000  0002f758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c282  00000000  00000000  000502aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6f08  00000000  00000000  0005c52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00123434  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a98  00000000  00000000  00123488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003d1c 	.word	0x08003d1c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	08003d1c 	.word	0x08003d1c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8000510:	78fb      	ldrb	r3, [r7, #3]
 8000512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000516:	b2db      	uxtb	r3, r3
 8000518:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6858      	ldr	r0, [r3, #4]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	8adb      	ldrh	r3, [r3, #22]
 8000522:	2200      	movs	r2, #0
 8000524:	4619      	mov	r1, r3
 8000526:	f001 fa93 	bl	8001a50 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6818      	ldr	r0, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	1cf9      	adds	r1, r7, #3
 8000534:	2201      	movs	r2, #1
 8000536:	f002 f8bc 	bl	80026b2 <HAL_SPI_Transmit>
 800053a:	4603      	mov	r3, r0
 800053c:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6818      	ldr	r0, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	f107 010f 	add.w	r1, r7, #15
 800054a:	2201      	movs	r2, #1
 800054c:	f002 f9ed 	bl	800292a <HAL_SPI_Receive>
 8000550:	4603      	mov	r3, r0
 8000552:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	6858      	ldr	r0, [r3, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	8adb      	ldrh	r3, [r3, #22]
 800055c:	2201      	movs	r2, #1
 800055e:	4619      	mov	r1, r3
 8000560:	f001 fa76 	bl	8001a50 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000564:	7bfb      	ldrb	r3, [r7, #15]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b084      	sub	sp, #16
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	460b      	mov	r3, r1
 8000578:	70fb      	strb	r3, [r7, #3]
 800057a:	4613      	mov	r3, r2
 800057c:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800057e:	78fb      	ldrb	r3, [r7, #3]
 8000580:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000584:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000586:	78bb      	ldrb	r3, [r7, #2]
 8000588:	021b      	lsls	r3, r3, #8
 800058a:	b21a      	sxth	r2, r3
 800058c:	78fb      	ldrb	r3, [r7, #3]
 800058e:	b21b      	sxth	r3, r3
 8000590:	4313      	orrs	r3, r2
 8000592:	b21b      	sxth	r3, r3
 8000594:	b29b      	uxth	r3, r3
 8000596:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6858      	ldr	r0, [r3, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	8adb      	ldrh	r3, [r3, #22]
 80005a0:	2200      	movs	r2, #0
 80005a2:	4619      	mov	r1, r3
 80005a4:	f001 fa54 	bl	8001a50 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	f107 010a 	add.w	r1, r7, #10
 80005b4:	2202      	movs	r2, #2
 80005b6:	f002 f87c 	bl	80026b2 <HAL_SPI_Transmit>
 80005ba:	4603      	mov	r3, r0
 80005bc:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6858      	ldr	r0, [r3, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	8adb      	ldrh	r3, [r3, #22]
 80005c6:	2201      	movs	r2, #1
 80005c8:	4619      	mov	r1, r3
 80005ca:	f001 fa41 	bl	8001a50 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <read_fifo>:
  }
}

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b088      	sub	sp, #32
 80005da:	af00      	add	r7, sp, #0
 80005dc:	60f8      	str	r0, [r7, #12]
 80005de:	60b9      	str	r1, [r7, #8]
 80005e0:	4611      	mov	r1, r2
 80005e2:	461a      	mov	r2, r3
 80005e4:	460b      	mov	r3, r1
 80005e6:	71fb      	strb	r3, [r7, #7]
 80005e8:	4613      	mov	r3, r2
 80005ea:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 80005ec:	2300      	movs	r3, #0
 80005ee:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	6858      	ldr	r0, [r3, #4]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	8adb      	ldrh	r3, [r3, #22]
 80005f8:	2200      	movs	r2, #0
 80005fa:	4619      	mov	r1, r3
 80005fc:	f001 fa28 	bl	8001a50 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	6818      	ldr	r0, [r3, #0]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f107 0117 	add.w	r1, r7, #23
 800060c:	2201      	movs	r2, #1
 800060e:	f002 f850 	bl	80026b2 <HAL_SPI_Transmit>
 8000612:	4603      	mov	r3, r0
 8000614:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d10a      	bne.n	8000632 <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	79fa      	ldrb	r2, [r7, #7]
 8000622:	b292      	uxth	r2, r2
 8000624:	68b9      	ldr	r1, [r7, #8]
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fc32 	bl	8002e90 <HAL_SPI_Receive_DMA>
 800062c:	4603      	mov	r3, r0
 800062e:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 8000630:	e012      	b.n	8000658 <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	6818      	ldr	r0, [r3, #0]
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	b29a      	uxth	r2, r3
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	f002 f973 	bl	800292a <HAL_SPI_Receive>
 8000644:	4603      	mov	r3, r0
 8000646:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	6858      	ldr	r0, [r3, #4]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	8adb      	ldrh	r3, [r3, #22]
 8000650:	2201      	movs	r2, #1
 8000652:	4619      	mov	r1, r3
 8000654:	f001 f9fc 	bl	8001a50 <HAL_GPIO_WritePin>
}
 8000658:	bf00      	nop
 800065a:	3720      	adds	r7, #32
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000672:	b2db      	uxtb	r3, r3
 8000674:	461a      	mov	r2, r3
 8000676:	2101      	movs	r1, #1
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff ff78 	bl	800056e <write_register>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8000694:	78fb      	ldrb	r3, [r7, #3]
 8000696:	2b2c      	cmp	r3, #44	; 0x2c
 8000698:	d801      	bhi.n	800069e <set_OCP+0x16>
    imax = 45;
 800069a:	232d      	movs	r3, #45	; 0x2d
 800069c:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 800069e:	78fb      	ldrb	r3, [r7, #3]
 80006a0:	2bf0      	cmp	r3, #240	; 0xf0
 80006a2:	d901      	bls.n	80006a8 <set_OCP+0x20>
    imax = 240;
 80006a4:	23f0      	movs	r3, #240	; 0xf0
 80006a6:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 80006a8:	78fb      	ldrb	r3, [r7, #3]
 80006aa:	2b81      	cmp	r3, #129	; 0x81
 80006ac:	d809      	bhi.n	80006c2 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 80006ae:	78fb      	ldrb	r3, [r7, #3]
 80006b0:	3b2d      	subs	r3, #45	; 0x2d
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <set_OCP+0x68>)
 80006b4:	fb82 1203 	smull	r1, r2, r2, r3
 80006b8:	1052      	asrs	r2, r2, #1
 80006ba:	17db      	asrs	r3, r3, #31
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	e008      	b.n	80006d4 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	331e      	adds	r3, #30
 80006c6:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <set_OCP+0x68>)
 80006c8:	fb82 1203 	smull	r1, r2, r2, r3
 80006cc:	1092      	asrs	r2, r2, #2
 80006ce:	17db      	asrs	r3, r3, #31
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	f043 0320 	orr.w	r3, r3, #32
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	461a      	mov	r2, r3
 80006de:	210b      	movs	r1, #11
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ff44 	bl	800056e <write_register>
}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	66666667 	.word	0x66666667

080006f4 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 80006fc:	211d      	movs	r1, #29
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f7ff fefe 	bl	8000500 <read_register>
 8000704:	4603      	mov	r3, r0
 8000706:	091b      	lsrs	r3, r3, #4
 8000708:	b2db      	uxtb	r3, r3
 800070a:	b2da      	uxtb	r2, r3
 800070c:	f04f 0300 	mov.w	r3, #0
 8000710:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8000714:	211e      	movs	r1, #30
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff fef2 	bl	8000500 <read_register>
 800071c:	4603      	mov	r3, r0
 800071e:	091b      	lsrs	r3, r3, #4
 8000720:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8000722:	2304      	movs	r3, #4
 8000724:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	2b0a      	cmp	r3, #10
 800072a:	d909      	bls.n	8000740 <set_low_data_rate_optimization+0x4c>
 800072c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000730:	2b00      	cmp	r3, #0
 8000732:	bf08      	it	eq
 8000734:	2a07      	cmpeq	r2, #7
 8000736:	d103      	bne.n	8000740 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8000738:	7ffb      	ldrb	r3, [r7, #31]
 800073a:	f043 0308 	orr.w	r3, r3, #8
 800073e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8000740:	7ffb      	ldrb	r3, [r7, #31]
 8000742:	461a      	mov	r2, r3
 8000744:	2126      	movs	r1, #38	; 0x26
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ff11 	bl	800056e <write_register>
}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 800075c:	2100      	movs	r1, #0
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff ff7e 	bl	8000660 <set_mode>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <lora_mode_receive_continuous>:

void lora_mode_receive_continuous(lora_sx1276 *lora)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	7d5b      	ldrb	r3, [r3, #21]
 8000778:	461a      	mov	r2, r3
 800077a:	210f      	movs	r1, #15
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff fef6 	bl	800056e <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8000782:	22f0      	movs	r2, #240	; 0xf0
 8000784:	2112      	movs	r1, #18
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff fef1 	bl	800056e <write_register>

  set_mode(lora, OPMODE_RX_CONTINUOUS);
 800078c:	2105      	movs	r1, #5
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff ff66 	bl	8000660 <set_mode>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 80007a4:	2101      	movs	r1, #1
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ff5a 	bl	8000660 <set_mode>
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80007bc:	211d      	movs	r1, #29
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff fe9e 	bl	8000500 <read_register>
 80007c4:	4603      	mov	r3, r0
 80007c6:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	f023 0301 	bic.w	r3, r3, #1
 80007ce:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	461a      	mov	r2, r3
 80007d4:	211d      	movs	r1, #29
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff fec9 	bl	800056e <write_register>
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	691b      	ldr	r3, [r3, #16]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d10e      	bne.n	8000816 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	2b0f      	cmp	r3, #15
 80007fc:	d901      	bls.n	8000802 <lora_set_tx_power+0x1e>
      level = 15;
 80007fe:	230f      	movs	r3, #15
 8000800:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000808:	b2db      	uxtb	r3, r3
 800080a:	461a      	mov	r2, r3
 800080c:	2109      	movs	r1, #9
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff fead 	bl	800056e <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8000814:	e02e      	b.n	8000874 <lora_set_tx_power+0x90>
    if (level > 20) {
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	2b14      	cmp	r3, #20
 800081a:	d901      	bls.n	8000820 <lora_set_tx_power+0x3c>
      level = 20;
 800081c:	2314      	movs	r3, #20
 800081e:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d801      	bhi.n	800082a <lora_set_tx_power+0x46>
      level = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800082a:	78fb      	ldrb	r3, [r7, #3]
 800082c:	2b11      	cmp	r3, #17
 800082e:	d90c      	bls.n	800084a <lora_set_tx_power+0x66>
      level -= 3;
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	3b03      	subs	r3, #3
 8000834:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8000836:	2287      	movs	r2, #135	; 0x87
 8000838:	214d      	movs	r1, #77	; 0x4d
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff fe97 	bl	800056e <write_register>
      set_OCP(lora, 140);
 8000840:	218c      	movs	r1, #140	; 0x8c
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ff20 	bl	8000688 <set_OCP>
 8000848:	e008      	b.n	800085c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800084a:	2284      	movs	r2, #132	; 0x84
 800084c:	214d      	movs	r1, #77	; 0x4d
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff fe8d 	bl	800056e <write_register>
      set_OCP(lora, 97);
 8000854:	2161      	movs	r1, #97	; 0x61
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ff16 	bl	8000688 <set_OCP>
    level -= 2;
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	3b02      	subs	r3, #2
 8000860:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8000862:	78fb      	ldrb	r3, [r7, #3]
 8000864:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000868:	b2db      	uxtb	r3, r3
 800086a:	461a      	mov	r2, r3
 800086c:	2109      	movs	r1, #9
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff fe7d 	bl	800056e <write_register>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8000888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	f04f 0100 	mov.w	r1, #0
 8000894:	04d9      	lsls	r1, r3, #19
 8000896:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800089a:	04d0      	lsls	r0, r2, #19
 800089c:	4a19      	ldr	r2, [pc, #100]	; (8000904 <lora_set_frequency+0x88>)
 800089e:	f04f 0300 	mov.w	r3, #0
 80008a2:	f7ff fcb1 	bl	8000208 <__aeabi_uldivmod>
 80008a6:	4602      	mov	r2, r0
 80008a8:	460b      	mov	r3, r1
 80008aa:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80008ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80008b2:	f04f 0200 	mov.w	r2, #0
 80008b6:	f04f 0300 	mov.w	r3, #0
 80008ba:	0c02      	lsrs	r2, r0, #16
 80008bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008c0:	0c0b      	lsrs	r3, r1, #16
 80008c2:	b2d3      	uxtb	r3, r2
 80008c4:	461a      	mov	r2, r3
 80008c6:	2106      	movs	r1, #6
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff fe50 	bl	800056e <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80008ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80008d2:	f04f 0200 	mov.w	r2, #0
 80008d6:	f04f 0300 	mov.w	r3, #0
 80008da:	0a02      	lsrs	r2, r0, #8
 80008dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80008e0:	0a0b      	lsrs	r3, r1, #8
 80008e2:	b2d3      	uxtb	r3, r2
 80008e4:	461a      	mov	r2, r3
 80008e6:	2107      	movs	r1, #7
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f7ff fe40 	bl	800056e <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80008ee:	7c3b      	ldrb	r3, [r7, #16]
 80008f0:	461a      	mov	r2, r3
 80008f2:	2108      	movs	r1, #8
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff fe3a 	bl	800056e <write_register>
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	01e84800 	.word	0x01e84800

08000908 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	2b05      	cmp	r3, #5
 8000918:	d802      	bhi.n	8000920 <lora_set_spreading_factor+0x18>
    sf = 6;
 800091a:	2306      	movs	r3, #6
 800091c:	70fb      	strb	r3, [r7, #3]
 800091e:	e004      	b.n	800092a <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	2b0c      	cmp	r3, #12
 8000924:	d901      	bls.n	800092a <lora_set_spreading_factor+0x22>
    sf = 12;
 8000926:	230c      	movs	r3, #12
 8000928:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 800092a:	78fb      	ldrb	r3, [r7, #3]
 800092c:	2b06      	cmp	r3, #6
 800092e:	d10a      	bne.n	8000946 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8000930:	22c5      	movs	r2, #197	; 0xc5
 8000932:	2131      	movs	r1, #49	; 0x31
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff fe1a 	bl	800056e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 800093a:	220c      	movs	r2, #12
 800093c:	2137      	movs	r1, #55	; 0x37
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff fe15 	bl	800056e <write_register>
 8000944:	e009      	b.n	800095a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8000946:	22c3      	movs	r2, #195	; 0xc3
 8000948:	2131      	movs	r1, #49	; 0x31
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff fe0f 	bl	800056e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000950:	220a      	movs	r2, #10
 8000952:	2137      	movs	r1, #55	; 0x37
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff fe0a 	bl	800056e <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800095a:	211e      	movs	r1, #30
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff fdcf 	bl	8000500 <read_register>
 8000962:	4603      	mov	r3, r0
 8000964:	73fb      	strb	r3, [r7, #15]
  mc2 |= sf << 4;
 8000966:	78fb      	ldrb	r3, [r7, #3]
 8000968:	011b      	lsls	r3, r3, #4
 800096a:	b25a      	sxtb	r2, r3
 800096c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000970:	4313      	orrs	r3, r2
 8000972:	b25b      	sxtb	r3, r3
 8000974:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	461a      	mov	r2, r3
 800097a:	211e      	movs	r1, #30
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff fdf6 	bl	800056e <write_register>

  set_low_data_rate_optimization(lora);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff feb6 	bl	80006f4 <set_low_data_rate_optimization>
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 800099c:	887b      	ldrh	r3, [r7, #2]
 800099e:	0a1b      	lsrs	r3, r3, #8
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	461a      	mov	r2, r3
 80009a6:	2120      	movs	r1, #32
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fde0 	bl	800056e <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 80009ae:	887b      	ldrh	r3, [r7, #2]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f003 030f 	and.w	r3, r3, #15
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	461a      	mov	r2, r3
 80009ba:	2121      	movs	r1, #33	; 0x21
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff fdd6 	bl	800056e <write_register>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 80009d2:	2142      	movs	r1, #66	; 0x42
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff fd93 	bl	8000500 <read_register>
 80009da:	4603      	mov	r3, r0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 80009ec:	2112      	movs	r1, #18
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff fd86 	bl	8000500 <read_register>
 80009f4:	4603      	mov	r3, r0
 80009f6:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009fe:	b2db      	uxtb	r3, r3
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 8000a10:	211d      	movs	r1, #29
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff fd74 	bl	8000500 <read_register>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 8000a20:	7bbb      	ldrb	r3, [r7, #14]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d006      	beq.n	8000a34 <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 8000a26:	2122      	movs	r1, #34	; 0x22
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff fd69 	bl	8000500 <read_register>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	73fb      	strb	r3, [r7, #15]
 8000a32:	e005      	b.n	8000a40 <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 8000a34:	2113      	movs	r1, #19
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff fd62 	bl	8000500 <read_register>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b086      	sub	sp, #24
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	60f8      	str	r0, [r7, #12]
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4613      	mov	r3, r2
 8000a58:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 8000a5a:	2306      	movs	r3, #6
 8000a5c:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 8000a62:	2112      	movs	r1, #18
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f7ff fd4b 	bl	8000500 <read_register>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8000a6e:	22f0      	movs	r2, #240	; 0xf0
 8000a70:	2112      	movs	r1, #18
 8000a72:	68f8      	ldr	r0, [r7, #12]
 8000a74:	f7ff fd7b 	bl	800056e <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 8000a78:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	da02      	bge.n	8000a86 <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 8000a80:	2302      	movs	r3, #2
 8000a82:	75fb      	strb	r3, [r7, #23]
    goto done;
 8000a84:	e030      	b.n	8000ae8 <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 8000a86:	7d7b      	ldrb	r3, [r7, #21]
 8000a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d02a      	beq.n	8000ae6 <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 8000a90:	7d7b      	ldrb	r3, [r7, #21]
 8000a92:	f003 0310 	and.w	r3, r3, #16
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d102      	bne.n	8000aa0 <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	75fb      	strb	r3, [r7, #23]
      goto done;
 8000a9e:	e023      	b.n	8000ae8 <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 8000aa0:	7d7b      	ldrb	r3, [r7, #21]
 8000aa2:	f003 0320 	and.w	r3, r3, #32
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d002      	beq.n	8000ab0 <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	75fb      	strb	r3, [r7, #23]
      goto done;
 8000aae:	e01b      	b.n	8000ae8 <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 8000ab0:	68f8      	ldr	r0, [r7, #12]
 8000ab2:	f7ff ffa9 	bl	8000a08 <lora_pending_packet_length>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 8000aba:	2110      	movs	r1, #16
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	f7ff fd1f 	bl	8000500 <read_register>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 8000ac6:	7d3b      	ldrb	r3, [r7, #20]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	210d      	movs	r1, #13
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f7ff fd4e 	bl	800056e <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 8000ad2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ad6:	7dba      	ldrb	r2, [r7, #22]
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f7ff fd7b 	bl	80005d6 <read_fifo>
    res = LORA_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	75fb      	strb	r3, [r7, #23]
 8000ae4:	e000      	b.n	8000ae8 <lora_receive_packet_base+0x9e>
  }

done:
 8000ae6:	bf00      	nop
  if (error) {
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <lora_receive_packet_base+0xaa>
    *error = res;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	7dfa      	ldrb	r2, [r7, #23]
 8000af2:	701a      	strb	r2, [r3, #0]
  }

  return len;
 8000af4:	7dbb      	ldrb	r3, [r7, #22]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af02      	add	r7, sp, #8
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 8000b0e:	79fa      	ldrb	r2, [r7, #7]
 8000b10:	2302      	movs	r3, #2
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	68b9      	ldr	r1, [r7, #8]
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	f7ff ff96 	bl	8000a4a <lora_receive_packet_base>
 8000b1e:	4603      	mov	r3, r0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 8000b3c:	e00b      	b.n	8000b56 <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f7ff ff50 	bl	80009e4 <lora_is_packet_available>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d10a      	bne.n	8000b60 <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f000 fc30 	bl	80013b0 <HAL_Delay>
    elapsed++;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	3301      	adds	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 8000b56:	697a      	ldr	r2, [r7, #20]
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d3ef      	bcc.n	8000b3e <lora_receive_packet_blocking+0x16>
 8000b5e:	e000      	b.n	8000b62 <lora_receive_packet_blocking+0x3a>
      break;
 8000b60:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 8000b62:	79fa      	ldrb	r2, [r7, #7]
 8000b64:	6a3b      	ldr	r3, [r7, #32]
 8000b66:	68b9      	ldr	r1, [r7, #8]
 8000b68:	68f8      	ldr	r0, [r7, #12]
 8000b6a:	f7ff ffc8 	bl	8000afe <lora_receive_packet>
 8000b6e:	4603      	mov	r3, r0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
 8000b84:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	887a      	ldrh	r2, [r7, #2]
 8000b96:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000b98:	6a3a      	ldr	r2, [r7, #32]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2200      	movs	r2, #0
 8000bae:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bb6:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f7ff ff06 	bl	80009ca <lora_version>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	2b12      	cmp	r3, #18
 8000bc6:	d001      	beq.n	8000bcc <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	e031      	b.n	8000c30 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f7ff fdc1 	bl	8000754 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f7ff fdbe 	bl	8000754 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000bd8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f7ff fe4d 	bl	800087c <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000be2:	2107      	movs	r1, #7
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f7ff fe8f 	bl	8000908 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000bea:	210a      	movs	r1, #10
 8000bec:	68f8      	ldr	r0, [r7, #12]
 8000bee:	f7ff fecf 	bl	8000990 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000bf2:	68f8      	ldr	r0, [r7, #12]
 8000bf4:	f7ff fdde 	bl	80007b4 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000bf8:	210c      	movs	r1, #12
 8000bfa:	68f8      	ldr	r0, [r7, #12]
 8000bfc:	f7ff fc80 	bl	8000500 <read_register>
 8000c00:	4603      	mov	r3, r0
 8000c02:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000c04:	7dbb      	ldrb	r3, [r7, #22]
 8000c06:	f043 0303 	orr.w	r3, r3, #3
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	210c      	movs	r1, #12
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	f7ff fcac 	bl	800056e <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000c16:	2204      	movs	r2, #4
 8000c18:	2126      	movs	r1, #38	; 0x26
 8000c1a:	68f8      	ldr	r0, [r7, #12]
 8000c1c:	f7ff fca7 	bl	800056e <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000c20:	2111      	movs	r1, #17
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f7ff fdde 	bl	80007e4 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f7ff fdb7 	bl	800079c <lora_mode_standby>

  return LORA_OK;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b092      	sub	sp, #72	; 0x48
 8000c3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3e:	f000 fb45 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c42:	f000 f889 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c46:	f000 f953 	bl	8000ef0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c4a:	f000 f8f1 	bl	8000e30 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000c4e:	f000 f925 	bl	8000e9c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2120      	movs	r1, #32
 8000c56:	4838      	ldr	r0, [pc, #224]	; (8000d38 <main+0x100>)
 8000c58:	f000 fefa 	bl	8001a50 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000c5c:	2064      	movs	r0, #100	; 0x64
 8000c5e:	f000 fba7 	bl	80013b0 <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2120      	movs	r1, #32
 8000c66:	4834      	ldr	r0, [pc, #208]	; (8000d38 <main+0x100>)
 8000c68:	f000 fef2 	bl	8001a50 <HAL_GPIO_WritePin>
  lora_sx1276 lora;
//  uint8_t version =  lora_version(&lora);

  uint8_t res = lora_init(&lora, &hspi1, NSS_GPIO_Port, NSS_Pin, LORA_BASE_FREQUENCY_US);
 8000c6c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000c70:	a32f      	add	r3, pc, #188	; (adr r3, 8000d30 <main+0xf8>)
 8000c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c76:	e9cd 2300 	strd	r2, r3, [sp]
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	4a2f      	ldr	r2, [pc, #188]	; (8000d3c <main+0x104>)
 8000c7e:	4930      	ldr	r1, [pc, #192]	; (8000d40 <main+0x108>)
 8000c80:	f7ff ff7a 	bl	8000b78 <lora_init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (res != LORA_OK) {
 8000c8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d010      	beq.n	8000cb4 <main+0x7c>
      // Initialization failed
    	HAL_UART_Transmit(&huart2, initFailed, sizeof(initFailed), 1000);
 8000c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c96:	220f      	movs	r2, #15
 8000c98:	492a      	ldr	r1, [pc, #168]	; (8000d44 <main+0x10c>)
 8000c9a:	482b      	ldr	r0, [pc, #172]	; (8000d48 <main+0x110>)
 8000c9c:	f002 fd49 	bl	8003732 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart2, (uint8_t *)res, sizeof((uint8_t *)res), 1000);
 8000ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000caa:	2204      	movs	r2, #4
 8000cac:	4826      	ldr	r0, [pc, #152]	; (8000d48 <main+0x110>)
 8000cae:	f002 fd40 	bl	8003732 <HAL_UART_Transmit>
 8000cb2:	e006      	b.n	8000cc2 <main+0x8a>
    }
    else{
    	HAL_UART_Transmit(&huart2, initSuccess, sizeof(initSuccess), 1000);
 8000cb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb8:	2210      	movs	r2, #16
 8000cba:	4924      	ldr	r1, [pc, #144]	; (8000d4c <main+0x114>)
 8000cbc:	4822      	ldr	r0, [pc, #136]	; (8000d48 <main+0x110>)
 8000cbe:	f002 fd38 	bl	8003732 <HAL_UART_Transmit>
    }

    // Receive buffer
	uint8_t buffer[32];
	// Put LoRa modem into continuous receive mode
	lora_mode_receive_continuous(&lora);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fd50 	bl	800076c <lora_mode_receive_continuous>
	// Wait for packet up to 10sec
//	uint8_t res;
	uint8_t len = lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 10000, &res);
 8000ccc:	4639      	mov	r1, r7
 8000cce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000cd2:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	f242 7310 	movw	r3, #10000	; 0x2710
 8000cdc:	2220      	movs	r2, #32
 8000cde:	f7ff ff23 	bl	8000b28 <lora_receive_packet_blocking>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != LORA_OK) {
 8000ce8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d007      	beq.n	8000d00 <main+0xc8>
	// Receive failed
		HAL_UART_Transmit(&huart2, transceiveFailed, sizeof(transceiveFailed), 1000);
 8000cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf4:	2215      	movs	r2, #21
 8000cf6:	4916      	ldr	r1, [pc, #88]	; (8000d50 <main+0x118>)
 8000cf8:	4813      	ldr	r0, [pc, #76]	; (8000d48 <main+0x110>)
 8000cfa:	f002 fd1a 	bl	8003732 <HAL_UART_Transmit>
 8000cfe:	e006      	b.n	8000d0e <main+0xd6>
	}
	else{
		HAL_UART_Transmit(&huart2, transceiveSuccess, sizeof(transceiveSuccess), 1000);
 8000d00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d04:	2216      	movs	r2, #22
 8000d06:	4913      	ldr	r1, [pc, #76]	; (8000d54 <main+0x11c>)
 8000d08:	480f      	ldr	r0, [pc, #60]	; (8000d48 <main+0x110>)
 8000d0a:	f002 fd12 	bl	8003732 <HAL_UART_Transmit>
	}
	buffer[len] = 0;  // null terminate string to print it
 8000d0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d12:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000d16:	4413      	add	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f803 2c40 	strb.w	r2, [r3, #-64]

	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d24:	2220      	movs	r2, #32
 8000d26:	4808      	ldr	r0, [pc, #32]	; (8000d48 <main+0x110>)
 8000d28:	f002 fd03 	bl	8003732 <HAL_UART_Transmit>
//      printf("'%s'\n", buffer);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <main+0xf4>
 8000d2e:	bf00      	nop
 8000d30:	3689cac0 	.word	0x3689cac0
 8000d34:	00000000 	.word	0x00000000
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020400 	.word	0x40020400
 8000d40:	20000078 	.word	0x20000078
 8000d44:	20000000 	.word	0x20000000
 8000d48:	200000d0 	.word	0x200000d0
 8000d4c:	20000010 	.word	0x20000010
 8000d50:	20000020 	.word	0x20000020
 8000d54:	20000038 	.word	0x20000038

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b094      	sub	sp, #80	; 0x50
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	2234      	movs	r2, #52	; 0x34
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f002 ffd0 	bl	8003d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	f107 0308 	add.w	r3, r7, #8
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <SystemClock_Config+0xd0>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <SystemClock_Config+0xd0>)
 8000d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8c:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <SystemClock_Config+0xd0>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d98:	2300      	movs	r3, #0
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <SystemClock_Config+0xd4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000da4:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <SystemClock_Config+0xd4>)
 8000da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <SystemClock_Config+0xd4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dcc:	2304      	movs	r3, #4
 8000dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000dd0:	2348      	movs	r3, #72	; 0x48
 8000dd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 f93d 	bl	8002064 <HAL_RCC_OscConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000df0:	f000 f934 	bl	800105c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df4:	230f      	movs	r3, #15
 8000df6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	2102      	movs	r1, #2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 fe5b 	bl	8001acc <HAL_RCC_ClockConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000e1c:	f000 f91e 	bl	800105c <Error_Handler>
  }
}
 8000e20:	bf00      	nop
 8000e22:	3750      	adds	r7, #80	; 0x50
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40007000 	.word	0x40007000

08000e30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <MX_SPI1_Init+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e64:	2238      	movs	r2, #56	; 0x38
 8000e66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e7c:	220a      	movs	r2, #10
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e82:	f001 fb8d 	bl	80025a0 <HAL_SPI_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e8c:	f000 f8e6 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000078 	.word	0x20000078
 8000e98:	40013000 	.word	0x40013000

08000e9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <MX_USART2_UART_Init+0x50>)
 8000ea4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	f002 fbe0 	bl	8003698 <HAL_UART_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ede:	f000 f8bd 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000d0 	.word	0x200000d0
 8000eec:	40004400 	.word	0x40004400

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b50      	ldr	r3, [pc, #320]	; (800104c <MX_GPIO_Init+0x15c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a4f      	ldr	r2, [pc, #316]	; (800104c <MX_GPIO_Init+0x15c>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b4d      	ldr	r3, [pc, #308]	; (800104c <MX_GPIO_Init+0x15c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b49      	ldr	r3, [pc, #292]	; (800104c <MX_GPIO_Init+0x15c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a48      	ldr	r2, [pc, #288]	; (800104c <MX_GPIO_Init+0x15c>)
 8000f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b46      	ldr	r3, [pc, #280]	; (800104c <MX_GPIO_Init+0x15c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b42      	ldr	r3, [pc, #264]	; (800104c <MX_GPIO_Init+0x15c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a41      	ldr	r2, [pc, #260]	; (800104c <MX_GPIO_Init+0x15c>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b3f      	ldr	r3, [pc, #252]	; (800104c <MX_GPIO_Init+0x15c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b3b      	ldr	r3, [pc, #236]	; (800104c <MX_GPIO_Init+0x15c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a3a      	ldr	r2, [pc, #232]	; (800104c <MX_GPIO_Init+0x15c>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b38      	ldr	r3, [pc, #224]	; (800104c <MX_GPIO_Init+0x15c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2110      	movs	r1, #16
 8000f7a:	4835      	ldr	r0, [pc, #212]	; (8001050 <MX_GPIO_Init+0x160>)
 8000f7c:	f000 fd68 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2120      	movs	r1, #32
 8000f84:	4833      	ldr	r0, [pc, #204]	; (8001054 <MX_GPIO_Init+0x164>)
 8000f86:	f000 fd63 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|LED_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f90:	4831      	ldr	r0, [pc, #196]	; (8001058 <MX_GPIO_Init+0x168>)
 8000f92:	f000 fd5d 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TX_Pin */
  GPIO_InitStruct.Pin = TX_Pin;
 8000f96:	2310      	movs	r3, #16
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	4828      	ldr	r0, [pc, #160]	; (8001050 <MX_GPIO_Init+0x160>)
 8000fae:	f000 fbbb 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000fb2:	2320      	movs	r3, #32
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4822      	ldr	r0, [pc, #136]	; (8001054 <MX_GPIO_Init+0x164>)
 8000fca:	f000 fbad 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin LED_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|LED_Pin;
 8000fce:	f244 0301 	movw	r3, #16385	; 0x4001
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481c      	ldr	r0, [pc, #112]	; (8001058 <MX_GPIO_Init+0x168>)
 8000fe8:	f000 fb9e 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin;
 8000fec:	f240 4302 	movw	r3, #1026	; 0x402
 8000ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4815      	ldr	r0, [pc, #84]	; (8001058 <MX_GPIO_Init+0x168>)
 8001004:	f000 fb90 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO2_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin;
 8001008:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800100c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO2_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	480c      	ldr	r0, [pc, #48]	; (8001050 <MX_GPIO_Init+0x160>)
 8001020:	f000 fb82 	bl	8001728 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	2007      	movs	r0, #7
 800102a:	f000 fac0 	bl	80015ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800102e:	2007      	movs	r0, #7
 8001030:	f000 fad9 	bl	80015e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	2028      	movs	r0, #40	; 0x28
 800103a:	f000 fab8 	bl	80015ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800103e:	2028      	movs	r0, #40	; 0x28
 8001040:	f000 fad1 	bl	80015e6 <HAL_NVIC_EnableIRQ>

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020800 	.word	0x40020800
 8001058:	40020400 	.word	0x40020400

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	e7fe      	b.n	8001064 <Error_Handler+0x8>
	...

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_MspInit+0x4c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <HAL_MspInit+0x4c>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_MspInit+0x4c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_MspInit+0x4c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <HAL_MspInit+0x4c>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_MspInit+0x4c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800

080010b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a19      	ldr	r2, [pc, #100]	; (800113c <HAL_SPI_MspInit+0x84>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d12b      	bne.n	8001132 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <HAL_SPI_MspInit+0x88>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <HAL_SPI_MspInit+0x88>)
 80010e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_SPI_MspInit+0x88>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <HAL_SPI_MspInit+0x88>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a10      	ldr	r2, [pc, #64]	; (8001140 <HAL_SPI_MspInit+0x88>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <HAL_SPI_MspInit+0x88>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001112:	23e0      	movs	r3, #224	; 0xe0
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001122:	2305      	movs	r3, #5
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <HAL_SPI_MspInit+0x8c>)
 800112e:	f000 fafb 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40013000 	.word	0x40013000
 8001140:	40023800 	.word	0x40023800
 8001144:	40020000 	.word	0x40020000

08001148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a19      	ldr	r2, [pc, #100]	; (80011cc <HAL_UART_MspInit+0x84>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d12b      	bne.n	80011c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_UART_MspInit+0x88>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <HAL_UART_MspInit+0x88>)
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_UART_MspInit+0x88>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_UART_MspInit+0x88>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <HAL_UART_MspInit+0x88>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_UART_MspInit+0x88>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011a2:	230c      	movs	r3, #12
 80011a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011b2:	2307      	movs	r3, #7
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <HAL_UART_MspInit+0x8c>)
 80011be:	f000 fab3 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40004400 	.word	0x40004400
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020000 	.word	0x40020000

080011d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <NMI_Handler+0x4>

080011de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <MemManage_Handler+0x4>

080011ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001224:	f000 f8a4 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001230:	2002      	movs	r0, #2
 8001232:	f000 fc27 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}

0800123a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 800123e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001242:	f000 fc1f 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO2_Pin);
 8001246:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800124a:	f000 fc1b 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <SystemInit+0x20>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <SystemInit+0x20>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800127e:	490e      	ldr	r1, [pc, #56]	; (80012b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001294:	4c0b      	ldr	r4, [pc, #44]	; (80012c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012a2:	f7ff ffd7 	bl	8001254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a6:	f002 fd0d 	bl	8003cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012aa:	f7ff fcc5 	bl	8000c38 <main>
  bx  lr    
 80012ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012bc:	08003d5c 	.word	0x08003d5c
  ldr r2, =_sbss
 80012c0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012c4:	20000118 	.word	0x20000118

080012c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC_IRQHandler>
	...

080012cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0d      	ldr	r2, [pc, #52]	; (800130c <HAL_Init+0x40>)
 80012d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_Init+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_Init+0x40>)
 80012e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_Init+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_Init+0x40>)
 80012ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 f94f 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fa:	200f      	movs	r0, #15
 80012fc:	f000 f808 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001300:	f7ff feb2 	bl	8001068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023c00 	.word	0x40023c00

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x54>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f967 	bl	8001602 <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00e      	b.n	800135c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80a      	bhi.n	800135a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f000 f92f 	bl	80015ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <HAL_InitTick+0x5c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000050 	.word	0x20000050
 8001368:	20000058 	.word	0x20000058
 800136c:	20000054 	.word	0x20000054

08001370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x20>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x24>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_IncTick+0x24>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000058 	.word	0x20000058
 8001394:	20000114 	.word	0x20000114

08001398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_GetTick+0x14>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000114 	.word	0x20000114

080013b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff ffee 	bl	8001398 <HAL_GetTick>
 80013bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c8:	d005      	beq.n	80013d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_Delay+0x44>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013d6:	bf00      	nop
 80013d8:	f7ff ffde 	bl	8001398 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d8f7      	bhi.n	80013d8 <HAL_Delay+0x28>
  {
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000058 	.word	0x20000058

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4907      	ldr	r1, [pc, #28]	; (8001494 <__NVIC_EnableIRQ+0x38>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f7ff ff8e 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff29 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff3e 	bl	8001440 <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff8e 	bl	80014ec <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5d 	bl	8001498 <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff31 	bl	800145c <__NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffa2 	bl	8001554 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001630:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_DMA_Start_IT+0x26>
 800163c:	2302      	movs	r3, #2
 800163e:	e040      	b.n	80016c2 <HAL_DMA_Start_IT+0xa8>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b01      	cmp	r3, #1
 8001652:	d12f      	bne.n	80016b4 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2202      	movs	r2, #2
 8001658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	68b9      	ldr	r1, [r7, #8]
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 f82e 	bl	80016ca <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001672:	223f      	movs	r2, #63	; 0x3f
 8001674:	409a      	lsls	r2, r3
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0216 	orr.w	r2, r2, #22
 8001688:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	2b00      	cmp	r3, #0
 8001690:	d007      	beq.n	80016a2 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0208 	orr.w	r2, r2, #8
 80016a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 0201 	orr.w	r2, r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e005      	b.n	80016c0 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016bc:	2302      	movs	r3, #2
 80016be:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016e6:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b40      	cmp	r3, #64	; 0x40
 80016f6:	d108      	bne.n	800170a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001708:	e007      	b.n	800171a <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	60da      	str	r2, [r3, #12]
}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
 8001742:	e165      	b.n	8001a10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001744:	2201      	movs	r2, #1
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	429a      	cmp	r2, r3
 800175e:	f040 8154 	bne.w	8001a0a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b01      	cmp	r3, #1
 800176c:	d005      	beq.n	800177a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001776:	2b02      	cmp	r3, #2
 8001778:	d130      	bne.n	80017dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	2203      	movs	r2, #3
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b0:	2201      	movs	r2, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 0201 	and.w	r2, r3, #1
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d017      	beq.n	8001818 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d123      	bne.n	800186c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	08da      	lsrs	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3208      	adds	r2, #8
 800182c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	220f      	movs	r2, #15
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	08da      	lsrs	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3208      	adds	r2, #8
 8001866:	69b9      	ldr	r1, [r7, #24]
 8001868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0203 	and.w	r2, r3, #3
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80ae 	beq.w	8001a0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b5d      	ldr	r3, [pc, #372]	; (8001a28 <HAL_GPIO_Init+0x300>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	4a5c      	ldr	r2, [pc, #368]	; (8001a28 <HAL_GPIO_Init+0x300>)
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018bc:	6453      	str	r3, [r2, #68]	; 0x44
 80018be:	4b5a      	ldr	r3, [pc, #360]	; (8001a28 <HAL_GPIO_Init+0x300>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ca:	4a58      	ldr	r2, [pc, #352]	; (8001a2c <HAL_GPIO_Init+0x304>)
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	220f      	movs	r2, #15
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4f      	ldr	r2, [pc, #316]	; (8001a30 <HAL_GPIO_Init+0x308>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d025      	beq.n	8001942 <HAL_GPIO_Init+0x21a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4e      	ldr	r2, [pc, #312]	; (8001a34 <HAL_GPIO_Init+0x30c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d01f      	beq.n	800193e <HAL_GPIO_Init+0x216>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4d      	ldr	r2, [pc, #308]	; (8001a38 <HAL_GPIO_Init+0x310>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d019      	beq.n	800193a <HAL_GPIO_Init+0x212>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4c      	ldr	r2, [pc, #304]	; (8001a3c <HAL_GPIO_Init+0x314>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0x20e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4b      	ldr	r2, [pc, #300]	; (8001a40 <HAL_GPIO_Init+0x318>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00d      	beq.n	8001932 <HAL_GPIO_Init+0x20a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4a      	ldr	r2, [pc, #296]	; (8001a44 <HAL_GPIO_Init+0x31c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d007      	beq.n	800192e <HAL_GPIO_Init+0x206>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a49      	ldr	r2, [pc, #292]	; (8001a48 <HAL_GPIO_Init+0x320>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_GPIO_Init+0x202>
 8001926:	2306      	movs	r3, #6
 8001928:	e00c      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 800192a:	2307      	movs	r3, #7
 800192c:	e00a      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 800192e:	2305      	movs	r3, #5
 8001930:	e008      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 8001932:	2304      	movs	r3, #4
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 8001936:	2303      	movs	r3, #3
 8001938:	e004      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 800193a:	2302      	movs	r3, #2
 800193c:	e002      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_GPIO_Init+0x21c>
 8001942:	2300      	movs	r3, #0
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	f002 0203 	and.w	r2, r2, #3
 800194a:	0092      	lsls	r2, r2, #2
 800194c:	4093      	lsls	r3, r2
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001954:	4935      	ldr	r1, [pc, #212]	; (8001a2c <HAL_GPIO_Init+0x304>)
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001962:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <HAL_GPIO_Init+0x324>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	43db      	mvns	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4013      	ands	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001986:	4a31      	ldr	r2, [pc, #196]	; (8001a4c <HAL_GPIO_Init+0x324>)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800198c:	4b2f      	ldr	r3, [pc, #188]	; (8001a4c <HAL_GPIO_Init+0x324>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019b0:	4a26      	ldr	r2, [pc, #152]	; (8001a4c <HAL_GPIO_Init+0x324>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b6:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <HAL_GPIO_Init+0x324>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019da:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <HAL_GPIO_Init+0x324>)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_GPIO_Init+0x324>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a04:	4a11      	ldr	r2, [pc, #68]	; (8001a4c <HAL_GPIO_Init+0x324>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	2b0f      	cmp	r3, #15
 8001a14:	f67f ae96 	bls.w	8001744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40013800 	.word	0x40013800
 8001a30:	40020000 	.word	0x40020000
 8001a34:	40020400 	.word	0x40020400
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	40020c00 	.word	0x40020c00
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40021400 	.word	0x40021400
 8001a48:	40021800 	.word	0x40021800
 8001a4c:	40013c00 	.word	0x40013c00

08001a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a60:	787b      	ldrb	r3, [r7, #1]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a6c:	e003      	b.n	8001a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	041a      	lsls	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	619a      	str	r2, [r3, #24]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d006      	beq.n	8001aa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f806 	bl	8001ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40013c00 	.word	0x40013c00

08001ab4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0cc      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b68      	ldr	r3, [pc, #416]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d90c      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b65      	ldr	r3, [pc, #404]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b63      	ldr	r3, [pc, #396]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0b8      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d020      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b20:	4b59      	ldr	r3, [pc, #356]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4a58      	ldr	r2, [pc, #352]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b38:	4b53      	ldr	r3, [pc, #332]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a52      	ldr	r2, [pc, #328]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b44:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	494d      	ldr	r1, [pc, #308]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d044      	beq.n	8001bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d119      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e07f      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d003      	beq.n	8001b8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8a:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e06f      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9a:	4b3b      	ldr	r3, [pc, #236]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e067      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f023 0203 	bic.w	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4934      	ldr	r1, [pc, #208]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bbc:	f7ff fbec 	bl	8001398 <HAL_GetTick>
 8001bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc4:	f7ff fbe8 	bl	8001398 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e04f      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 020c 	and.w	r2, r3, #12
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d1eb      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d20c      	bcs.n	8001c14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <HAL_RCC_ClockConfig+0x1b8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e032      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4916      	ldr	r1, [pc, #88]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d009      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c3e:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	490e      	ldr	r1, [pc, #56]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c52:	f000 f855 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001c56:	4602      	mov	r2, r0
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	490a      	ldr	r1, [pc, #40]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	5ccb      	ldrb	r3, [r1, r3]
 8001c66:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6a:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fb4c 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023c00 	.word	0x40023c00
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	08003d34 	.word	0x08003d34
 8001c90:	20000050 	.word	0x20000050
 8001c94:	20000054 	.word	0x20000054

08001c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_RCC_GetHCLKFreq+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000050 	.word	0x20000050

08001cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cb4:	f7ff fff0 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	0a9b      	lsrs	r3, r3, #10
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	4903      	ldr	r1, [pc, #12]	; (8001cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc6:	5ccb      	ldrb	r3, [r1, r3]
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	08003d44 	.word	0x08003d44

08001cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cdc:	f7ff ffdc 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	0b5b      	lsrs	r3, r3, #13
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	4903      	ldr	r1, [pc, #12]	; (8001cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	08003d44 	.word	0x08003d44

08001d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d04:	b088      	sub	sp, #32
 8001d06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d1c:	4bce      	ldr	r3, [pc, #824]	; (8002058 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 030c 	and.w	r3, r3, #12
 8001d24:	2b0c      	cmp	r3, #12
 8001d26:	f200 818d 	bhi.w	8002044 <HAL_RCC_GetSysClockFreq+0x344>
 8001d2a:	a201      	add	r2, pc, #4	; (adr r2, 8001d30 <HAL_RCC_GetSysClockFreq+0x30>)
 8001d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d30:	08001d65 	.word	0x08001d65
 8001d34:	08002045 	.word	0x08002045
 8001d38:	08002045 	.word	0x08002045
 8001d3c:	08002045 	.word	0x08002045
 8001d40:	08001d6b 	.word	0x08001d6b
 8001d44:	08002045 	.word	0x08002045
 8001d48:	08002045 	.word	0x08002045
 8001d4c:	08002045 	.word	0x08002045
 8001d50:	08001d71 	.word	0x08001d71
 8001d54:	08002045 	.word	0x08002045
 8001d58:	08002045 	.word	0x08002045
 8001d5c:	08002045 	.word	0x08002045
 8001d60:	08001ee5 	.word	0x08001ee5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d64:	4bbd      	ldr	r3, [pc, #756]	; (800205c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d66:	61bb      	str	r3, [r7, #24]
       break;
 8001d68:	e16f      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d6a:	4bbd      	ldr	r3, [pc, #756]	; (8002060 <HAL_RCC_GetSysClockFreq+0x360>)
 8001d6c:	61bb      	str	r3, [r7, #24]
      break;
 8001d6e:	e16c      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d70:	4bb9      	ldr	r3, [pc, #740]	; (8002058 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d78:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d7a:	4bb7      	ldr	r3, [pc, #732]	; (8002058 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d053      	beq.n	8001e2e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d86:	4bb4      	ldr	r3, [pc, #720]	; (8002058 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	099b      	lsrs	r3, r3, #6
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d96:	f04f 0100 	mov.w	r1, #0
 8001d9a:	ea02 0400 	and.w	r4, r2, r0
 8001d9e:	603c      	str	r4, [r7, #0]
 8001da0:	400b      	ands	r3, r1
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001da8:	4620      	mov	r0, r4
 8001daa:	4629      	mov	r1, r5
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	014b      	lsls	r3, r1, #5
 8001db6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dba:	0142      	lsls	r2, r0, #5
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4623      	mov	r3, r4
 8001dc2:	1ac0      	subs	r0, r0, r3
 8001dc4:	462b      	mov	r3, r5
 8001dc6:	eb61 0103 	sbc.w	r1, r1, r3
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	018b      	lsls	r3, r1, #6
 8001dd4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dd8:	0182      	lsls	r2, r0, #6
 8001dda:	1a12      	subs	r2, r2, r0
 8001ddc:	eb63 0301 	sbc.w	r3, r3, r1
 8001de0:	f04f 0000 	mov.w	r0, #0
 8001de4:	f04f 0100 	mov.w	r1, #0
 8001de8:	00d9      	lsls	r1, r3, #3
 8001dea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dee:	00d0      	lsls	r0, r2, #3
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4621      	mov	r1, r4
 8001df6:	1852      	adds	r2, r2, r1
 8001df8:	4629      	mov	r1, r5
 8001dfa:	eb43 0101 	adc.w	r1, r3, r1
 8001dfe:	460b      	mov	r3, r1
 8001e00:	f04f 0000 	mov.w	r0, #0
 8001e04:	f04f 0100 	mov.w	r1, #0
 8001e08:	0259      	lsls	r1, r3, #9
 8001e0a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e0e:	0250      	lsls	r0, r2, #9
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	f7fe f9f2 	bl	8000208 <__aeabi_uldivmod>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4613      	mov	r3, r2
 8001e2a:	61fb      	str	r3, [r7, #28]
 8001e2c:	e04c      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2e:	4b8a      	ldr	r3, [pc, #552]	; (8002058 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	099b      	lsrs	r3, r3, #6
 8001e34:	461a      	mov	r2, r3
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e3e:	f04f 0100 	mov.w	r1, #0
 8001e42:	ea02 0a00 	and.w	sl, r2, r0
 8001e46:	ea03 0b01 	and.w	fp, r3, r1
 8001e4a:	4650      	mov	r0, sl
 8001e4c:	4659      	mov	r1, fp
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	014b      	lsls	r3, r1, #5
 8001e58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e5c:	0142      	lsls	r2, r0, #5
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	ebb0 000a 	subs.w	r0, r0, sl
 8001e66:	eb61 010b 	sbc.w	r1, r1, fp
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	018b      	lsls	r3, r1, #6
 8001e74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e78:	0182      	lsls	r2, r0, #6
 8001e7a:	1a12      	subs	r2, r2, r0
 8001e7c:	eb63 0301 	sbc.w	r3, r3, r1
 8001e80:	f04f 0000 	mov.w	r0, #0
 8001e84:	f04f 0100 	mov.w	r1, #0
 8001e88:	00d9      	lsls	r1, r3, #3
 8001e8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e8e:	00d0      	lsls	r0, r2, #3
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	eb12 020a 	adds.w	r2, r2, sl
 8001e98:	eb43 030b 	adc.w	r3, r3, fp
 8001e9c:	f04f 0000 	mov.w	r0, #0
 8001ea0:	f04f 0100 	mov.w	r1, #0
 8001ea4:	0299      	lsls	r1, r3, #10
 8001ea6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001eaa:	0290      	lsls	r0, r2, #10
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	f7fe f9a4 	bl	8000208 <__aeabi_uldivmod>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ec8:	4b63      	ldr	r3, [pc, #396]	; (8002058 <HAL_RCC_GetSysClockFreq+0x358>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	0c1b      	lsrs	r3, r3, #16
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee0:	61bb      	str	r3, [r7, #24]
      break;
 8001ee2:	e0b2      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ee4:	4b5c      	ldr	r3, [pc, #368]	; (8002058 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eec:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eee:	4b5a      	ldr	r3, [pc, #360]	; (8002058 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d04d      	beq.n	8001f96 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001efa:	4b57      	ldr	r3, [pc, #348]	; (8002058 <HAL_RCC_GetSysClockFreq+0x358>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	099b      	lsrs	r3, r3, #6
 8001f00:	461a      	mov	r2, r3
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f0a:	f04f 0100 	mov.w	r1, #0
 8001f0e:	ea02 0800 	and.w	r8, r2, r0
 8001f12:	ea03 0901 	and.w	r9, r3, r1
 8001f16:	4640      	mov	r0, r8
 8001f18:	4649      	mov	r1, r9
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	014b      	lsls	r3, r1, #5
 8001f24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f28:	0142      	lsls	r2, r0, #5
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	ebb0 0008 	subs.w	r0, r0, r8
 8001f32:	eb61 0109 	sbc.w	r1, r1, r9
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	018b      	lsls	r3, r1, #6
 8001f40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f44:	0182      	lsls	r2, r0, #6
 8001f46:	1a12      	subs	r2, r2, r0
 8001f48:	eb63 0301 	sbc.w	r3, r3, r1
 8001f4c:	f04f 0000 	mov.w	r0, #0
 8001f50:	f04f 0100 	mov.w	r1, #0
 8001f54:	00d9      	lsls	r1, r3, #3
 8001f56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f5a:	00d0      	lsls	r0, r2, #3
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	eb12 0208 	adds.w	r2, r2, r8
 8001f64:	eb43 0309 	adc.w	r3, r3, r9
 8001f68:	f04f 0000 	mov.w	r0, #0
 8001f6c:	f04f 0100 	mov.w	r1, #0
 8001f70:	0259      	lsls	r1, r3, #9
 8001f72:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001f76:	0250      	lsls	r0, r2, #9
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	461a      	mov	r2, r3
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	f7fe f93e 	bl	8000208 <__aeabi_uldivmod>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4613      	mov	r3, r2
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	e04a      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f96:	4b30      	ldr	r3, [pc, #192]	; (8002058 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	099b      	lsrs	r3, r3, #6
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fa6:	f04f 0100 	mov.w	r1, #0
 8001faa:	ea02 0400 	and.w	r4, r2, r0
 8001fae:	ea03 0501 	and.w	r5, r3, r1
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	014b      	lsls	r3, r1, #5
 8001fc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fc4:	0142      	lsls	r2, r0, #5
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	1b00      	subs	r0, r0, r4
 8001fcc:	eb61 0105 	sbc.w	r1, r1, r5
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	018b      	lsls	r3, r1, #6
 8001fda:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001fde:	0182      	lsls	r2, r0, #6
 8001fe0:	1a12      	subs	r2, r2, r0
 8001fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8001fe6:	f04f 0000 	mov.w	r0, #0
 8001fea:	f04f 0100 	mov.w	r1, #0
 8001fee:	00d9      	lsls	r1, r3, #3
 8001ff0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ff4:	00d0      	lsls	r0, r2, #3
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	1912      	adds	r2, r2, r4
 8001ffc:	eb45 0303 	adc.w	r3, r5, r3
 8002000:	f04f 0000 	mov.w	r0, #0
 8002004:	f04f 0100 	mov.w	r1, #0
 8002008:	0299      	lsls	r1, r3, #10
 800200a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800200e:	0290      	lsls	r0, r2, #10
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	461a      	mov	r2, r3
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	f7fe f8f2 	bl	8000208 <__aeabi_uldivmod>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4613      	mov	r3, r2
 800202a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800202c:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_RCC_GetSysClockFreq+0x358>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	0f1b      	lsrs	r3, r3, #28
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002040:	61bb      	str	r3, [r7, #24]
      break;
 8002042:	e002      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002046:	61bb      	str	r3, [r7, #24]
      break;
 8002048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800204a:	69bb      	ldr	r3, [r7, #24]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3720      	adds	r7, #32
 8002050:	46bd      	mov	sp, r7
 8002052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	00f42400 	.word	0x00f42400
 8002060:	007a1200 	.word	0x007a1200

08002064 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e28d      	b.n	8002592 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8083 	beq.w	800218a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002084:	4b94      	ldr	r3, [pc, #592]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b04      	cmp	r3, #4
 800208e:	d019      	beq.n	80020c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002090:	4b91      	ldr	r3, [pc, #580]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002098:	2b08      	cmp	r3, #8
 800209a:	d106      	bne.n	80020aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800209c:	4b8e      	ldr	r3, [pc, #568]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a8:	d00c      	beq.n	80020c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020aa:	4b8b      	ldr	r3, [pc, #556]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020b2:	2b0c      	cmp	r3, #12
 80020b4:	d112      	bne.n	80020dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b6:	4b88      	ldr	r3, [pc, #544]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c2:	d10b      	bne.n	80020dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	4b84      	ldr	r3, [pc, #528]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d05b      	beq.n	8002188 <HAL_RCC_OscConfig+0x124>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d157      	bne.n	8002188 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e25a      	b.n	8002592 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e4:	d106      	bne.n	80020f4 <HAL_RCC_OscConfig+0x90>
 80020e6:	4b7c      	ldr	r3, [pc, #496]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a7b      	ldr	r2, [pc, #492]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e01d      	b.n	8002130 <HAL_RCC_OscConfig+0xcc>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0xb4>
 80020fe:	4b76      	ldr	r3, [pc, #472]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a75      	ldr	r2, [pc, #468]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b73      	ldr	r3, [pc, #460]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a72      	ldr	r2, [pc, #456]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0xcc>
 8002118:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a6e      	ldr	r2, [pc, #440]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 800211e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b6c      	ldr	r3, [pc, #432]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a6b      	ldr	r2, [pc, #428]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 800212a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7ff f92e 	bl	8001398 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002140:	f7ff f92a 	bl	8001398 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e21f      	b.n	8002592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b61      	ldr	r3, [pc, #388]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0xdc>
 800215e:	e014      	b.n	800218a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7ff f91a 	bl	8001398 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff f916 	bl	8001398 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e20b      	b.n	8002592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	4b57      	ldr	r3, [pc, #348]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x104>
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d06f      	beq.n	8002276 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002196:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d017      	beq.n	80021d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021a2:	4b4d      	ldr	r3, [pc, #308]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d105      	bne.n	80021ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021ae:	4b4a      	ldr	r3, [pc, #296]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ba:	4b47      	ldr	r3, [pc, #284]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021c2:	2b0c      	cmp	r3, #12
 80021c4:	d11c      	bne.n	8002200 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021c6:	4b44      	ldr	r3, [pc, #272]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d116      	bne.n	8002200 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <HAL_RCC_OscConfig+0x186>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d001      	beq.n	80021ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e1d3      	b.n	8002592 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ea:	4b3b      	ldr	r3, [pc, #236]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4937      	ldr	r1, [pc, #220]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	e03a      	b.n	8002276 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d020      	beq.n	800224a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002208:	4b34      	ldr	r3, [pc, #208]	; (80022dc <HAL_RCC_OscConfig+0x278>)
 800220a:	2201      	movs	r2, #1
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220e:	f7ff f8c3 	bl	8001398 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002216:	f7ff f8bf 	bl	8001398 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e1b4      	b.n	8002592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002228:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4925      	ldr	r1, [pc, #148]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]
 8002248:	e015      	b.n	8002276 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800224a:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_RCC_OscConfig+0x278>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7ff f8a2 	bl	8001398 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002258:	f7ff f89e 	bl	8001398 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e193      	b.n	8002592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226a:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d036      	beq.n	80022f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d016      	beq.n	80022b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <HAL_RCC_OscConfig+0x27c>)
 800228c:	2201      	movs	r2, #1
 800228e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002290:	f7ff f882 	bl	8001398 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002298:	f7ff f87e 	bl	8001398 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e173      	b.n	8002592 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 80022ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x234>
 80022b6:	e01b      	b.n	80022f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_RCC_OscConfig+0x27c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022be:	f7ff f86b 	bl	8001398 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c4:	e00e      	b.n	80022e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c6:	f7ff f867 	bl	8001398 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d907      	bls.n	80022e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e15c      	b.n	8002592 <HAL_RCC_OscConfig+0x52e>
 80022d8:	40023800 	.word	0x40023800
 80022dc:	42470000 	.word	0x42470000
 80022e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e4:	4b8a      	ldr	r3, [pc, #552]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 80022e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1ea      	bne.n	80022c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 8097 	beq.w	800242c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fe:	2300      	movs	r3, #0
 8002300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002302:	4b83      	ldr	r3, [pc, #524]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10f      	bne.n	800232e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	4b7f      	ldr	r3, [pc, #508]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	4a7e      	ldr	r2, [pc, #504]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 8002318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231c:	6413      	str	r3, [r2, #64]	; 0x40
 800231e:	4b7c      	ldr	r3, [pc, #496]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232a:	2301      	movs	r3, #1
 800232c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232e:	4b79      	ldr	r3, [pc, #484]	; (8002514 <HAL_RCC_OscConfig+0x4b0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d118      	bne.n	800236c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233a:	4b76      	ldr	r3, [pc, #472]	; (8002514 <HAL_RCC_OscConfig+0x4b0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a75      	ldr	r2, [pc, #468]	; (8002514 <HAL_RCC_OscConfig+0x4b0>)
 8002340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002346:	f7ff f827 	bl	8001398 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234e:	f7ff f823 	bl	8001398 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e118      	b.n	8002592 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	4b6c      	ldr	r3, [pc, #432]	; (8002514 <HAL_RCC_OscConfig+0x4b0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d106      	bne.n	8002382 <HAL_RCC_OscConfig+0x31e>
 8002374:	4b66      	ldr	r3, [pc, #408]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 8002376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002378:	4a65      	ldr	r2, [pc, #404]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6713      	str	r3, [r2, #112]	; 0x70
 8002380:	e01c      	b.n	80023bc <HAL_RCC_OscConfig+0x358>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b05      	cmp	r3, #5
 8002388:	d10c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x340>
 800238a:	4b61      	ldr	r3, [pc, #388]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 800238c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238e:	4a60      	ldr	r2, [pc, #384]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	6713      	str	r3, [r2, #112]	; 0x70
 8002396:	4b5e      	ldr	r3, [pc, #376]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	4a5d      	ldr	r2, [pc, #372]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6713      	str	r3, [r2, #112]	; 0x70
 80023a2:	e00b      	b.n	80023bc <HAL_RCC_OscConfig+0x358>
 80023a4:	4b5a      	ldr	r3, [pc, #360]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	4a59      	ldr	r2, [pc, #356]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	6713      	str	r3, [r2, #112]	; 0x70
 80023b0:	4b57      	ldr	r3, [pc, #348]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	4a56      	ldr	r2, [pc, #344]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 80023b6:	f023 0304 	bic.w	r3, r3, #4
 80023ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d015      	beq.n	80023f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c4:	f7fe ffe8 	bl	8001398 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023cc:	f7fe ffe4 	bl	8001398 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e0d7      	b.n	8002592 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e2:	4b4b      	ldr	r3, [pc, #300]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0ee      	beq.n	80023cc <HAL_RCC_OscConfig+0x368>
 80023ee:	e014      	b.n	800241a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f0:	f7fe ffd2 	bl	8001398 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7fe ffce 	bl	8001398 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0c1      	b.n	8002592 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240e:	4b40      	ldr	r3, [pc, #256]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1ee      	bne.n	80023f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800241a:	7dfb      	ldrb	r3, [r7, #23]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d105      	bne.n	800242c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002420:	4b3b      	ldr	r3, [pc, #236]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	4a3a      	ldr	r2, [pc, #232]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 8002426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80ad 	beq.w	8002590 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002436:	4b36      	ldr	r3, [pc, #216]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b08      	cmp	r3, #8
 8002440:	d060      	beq.n	8002504 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d145      	bne.n	80024d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244a:	4b33      	ldr	r3, [pc, #204]	; (8002518 <HAL_RCC_OscConfig+0x4b4>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe ffa2 	bl	8001398 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002458:	f7fe ff9e 	bl	8001398 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e093      	b.n	8002592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	4b29      	ldr	r3, [pc, #164]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69da      	ldr	r2, [r3, #28]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	019b      	lsls	r3, r3, #6
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	085b      	lsrs	r3, r3, #1
 800248e:	3b01      	subs	r3, #1
 8002490:	041b      	lsls	r3, r3, #16
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	061b      	lsls	r3, r3, #24
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	071b      	lsls	r3, r3, #28
 80024a2:	491b      	ldr	r1, [pc, #108]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <HAL_RCC_OscConfig+0x4b4>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe ff73 	bl	8001398 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b6:	f7fe ff6f 	bl	8001398 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e064      	b.n	8002592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x452>
 80024d4:	e05c      	b.n	8002590 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <HAL_RCC_OscConfig+0x4b4>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7fe ff5c 	bl	8001398 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe ff58 	bl	8001398 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e04d      	b.n	8002592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_RCC_OscConfig+0x4ac>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x480>
 8002502:	e045      	b.n	8002590 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d107      	bne.n	800251c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e040      	b.n	8002592 <HAL_RCC_OscConfig+0x52e>
 8002510:	40023800 	.word	0x40023800
 8002514:	40007000 	.word	0x40007000
 8002518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800251c:	4b1f      	ldr	r3, [pc, #124]	; (800259c <HAL_RCC_OscConfig+0x538>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d030      	beq.n	800258c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d129      	bne.n	800258c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d122      	bne.n	800258c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800254c:	4013      	ands	r3, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002554:	4293      	cmp	r3, r2
 8002556:	d119      	bne.n	800258c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002562:	085b      	lsrs	r3, r3, #1
 8002564:	3b01      	subs	r3, #1
 8002566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d10f      	bne.n	800258c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d107      	bne.n	800258c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800

080025a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e07b      	b.n	80026aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d108      	bne.n	80025cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025c2:	d009      	beq.n	80025d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	61da      	str	r2, [r3, #28]
 80025ca:	e005      	b.n	80025d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d106      	bne.n	80025f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe fd60 	bl	80010b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800260e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265c:	ea42 0103 	orr.w	r1, r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	f003 0104 	and.w	r1, r3, #4
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	f003 0210 	and.w	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69da      	ldr	r2, [r3, #28]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002698:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b088      	sub	sp, #32
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	603b      	str	r3, [r7, #0]
 80026be:	4613      	mov	r3, r2
 80026c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_SPI_Transmit+0x22>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e126      	b.n	8002922 <HAL_SPI_Transmit+0x270>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026dc:	f7fe fe5c 	bl	8001398 <HAL_GetTick>
 80026e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d002      	beq.n	80026f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
 80026f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026f6:	e10b      	b.n	8002910 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <HAL_SPI_Transmit+0x52>
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002708:	e102      	b.n	8002910 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2203      	movs	r2, #3
 800270e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	88fa      	ldrh	r2, [r7, #6]
 8002722:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	88fa      	ldrh	r2, [r7, #6]
 8002728:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002750:	d10f      	bne.n	8002772 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002760:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002770:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277c:	2b40      	cmp	r3, #64	; 0x40
 800277e:	d007      	beq.n	8002790 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800278e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002798:	d14b      	bne.n	8002832 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_SPI_Transmit+0xf6>
 80027a2:	8afb      	ldrh	r3, [r7, #22]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d13e      	bne.n	8002826 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	881a      	ldrh	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	1c9a      	adds	r2, r3, #2
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027cc:	e02b      	b.n	8002826 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d112      	bne.n	8002802 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	881a      	ldrh	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	1c9a      	adds	r2, r3, #2
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8002800:	e011      	b.n	8002826 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002802:	f7fe fdc9 	bl	8001398 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d803      	bhi.n	800281a <HAL_SPI_Transmit+0x168>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002818:	d102      	bne.n	8002820 <HAL_SPI_Transmit+0x16e>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002824:	e074      	b.n	8002910 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ce      	bne.n	80027ce <HAL_SPI_Transmit+0x11c>
 8002830:	e04c      	b.n	80028cc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_SPI_Transmit+0x18e>
 800283a:	8afb      	ldrh	r3, [r7, #22]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d140      	bne.n	80028c2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	330c      	adds	r3, #12
 800284a:	7812      	ldrb	r2, [r2, #0]
 800284c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002866:	e02c      	b.n	80028c2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b02      	cmp	r3, #2
 8002874:	d113      	bne.n	800289e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	330c      	adds	r3, #12
 8002880:	7812      	ldrb	r2, [r2, #0]
 8002882:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	86da      	strh	r2, [r3, #54]	; 0x36
 800289c:	e011      	b.n	80028c2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800289e:	f7fe fd7b 	bl	8001398 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d803      	bhi.n	80028b6 <HAL_SPI_Transmit+0x204>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d102      	bne.n	80028bc <HAL_SPI_Transmit+0x20a>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028c0:	e026      	b.n	8002910 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1cd      	bne.n	8002868 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	6839      	ldr	r1, [r7, #0]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fe9f 	bl	8003614 <SPI_EndRxTxTransaction>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10a      	bne.n	8002900 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	77fb      	strb	r3, [r7, #31]
 800290c:	e000      	b.n	8002910 <HAL_SPI_Transmit+0x25e>
  }

error:
 800290e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002920:	7ffb      	ldrb	r3, [r7, #31]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3720      	adds	r7, #32
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b088      	sub	sp, #32
 800292e:	af02      	add	r7, sp, #8
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	4613      	mov	r3, r2
 8002938:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002946:	d112      	bne.n	800296e <HAL_SPI_Receive+0x44>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10e      	bne.n	800296e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2204      	movs	r2, #4
 8002954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002958:	88fa      	ldrh	r2, [r7, #6]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	4613      	mov	r3, r2
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f8f1 	bl	8002b4c <HAL_SPI_TransmitReceive>
 800296a:	4603      	mov	r3, r0
 800296c:	e0ea      	b.n	8002b44 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_SPI_Receive+0x52>
 8002978:	2302      	movs	r3, #2
 800297a:	e0e3      	b.n	8002b44 <HAL_SPI_Receive+0x21a>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002984:	f7fe fd08 	bl	8001398 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b01      	cmp	r3, #1
 8002994:	d002      	beq.n	800299c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002996:	2302      	movs	r3, #2
 8002998:	75fb      	strb	r3, [r7, #23]
    goto error;
 800299a:	e0ca      	b.n	8002b32 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_SPI_Receive+0x7e>
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d102      	bne.n	80029ae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029ac:	e0c1      	b.n	8002b32 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2204      	movs	r2, #4
 80029b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	88fa      	ldrh	r2, [r7, #6]
 80029c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	88fa      	ldrh	r2, [r7, #6]
 80029cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029f4:	d10f      	bne.n	8002a16 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a14:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a20:	2b40      	cmp	r3, #64	; 0x40
 8002a22:	d007      	beq.n	8002a34 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a32:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d162      	bne.n	8002b02 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002a3c:	e02e      	b.n	8002a9c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d115      	bne.n	8002a78 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f103 020c 	add.w	r2, r3, #12
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	7812      	ldrb	r2, [r2, #0]
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a76:	e011      	b.n	8002a9c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a78:	f7fe fc8e 	bl	8001398 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d803      	bhi.n	8002a90 <HAL_SPI_Receive+0x166>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8e:	d102      	bne.n	8002a96 <HAL_SPI_Receive+0x16c>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d102      	bne.n	8002a9c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a9a:	e04a      	b.n	8002b32 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1cb      	bne.n	8002a3e <HAL_SPI_Receive+0x114>
 8002aa6:	e031      	b.n	8002b0c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d113      	bne.n	8002ade <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac0:	b292      	uxth	r2, r2
 8002ac2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac8:	1c9a      	adds	r2, r3, #2
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002adc:	e011      	b.n	8002b02 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ade:	f7fe fc5b 	bl	8001398 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d803      	bhi.n	8002af6 <HAL_SPI_Receive+0x1cc>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af4:	d102      	bne.n	8002afc <HAL_SPI_Receive+0x1d2>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d102      	bne.n	8002b02 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b00:	e017      	b.n	8002b32 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1cd      	bne.n	8002aa8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	6839      	ldr	r1, [r7, #0]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fd19 	bl	8003548 <SPI_EndRxTransaction>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	75fb      	strb	r3, [r7, #23]
 8002b2e:	e000      	b.n	8002b32 <HAL_SPI_Receive+0x208>
  }

error :
 8002b30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08c      	sub	sp, #48	; 0x30
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_SPI_TransmitReceive+0x26>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e18a      	b.n	8002e88 <HAL_SPI_TransmitReceive+0x33c>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b7a:	f7fe fc0d 	bl	8001398 <HAL_GetTick>
 8002b7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002b90:	887b      	ldrh	r3, [r7, #2]
 8002b92:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d00f      	beq.n	8002bbc <HAL_SPI_TransmitReceive+0x70>
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ba2:	d107      	bne.n	8002bb4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d103      	bne.n	8002bb4 <HAL_SPI_TransmitReceive+0x68>
 8002bac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d003      	beq.n	8002bbc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bba:	e15b      	b.n	8002e74 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_SPI_TransmitReceive+0x82>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_SPI_TransmitReceive+0x82>
 8002bc8:	887b      	ldrh	r3, [r7, #2]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bd4:	e14e      	b.n	8002e74 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d003      	beq.n	8002bea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2205      	movs	r2, #5
 8002be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	887a      	ldrh	r2, [r7, #2]
 8002bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	887a      	ldrh	r2, [r7, #2]
 8002c00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	887a      	ldrh	r2, [r7, #2]
 8002c0c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	887a      	ldrh	r2, [r7, #2]
 8002c12:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	d007      	beq.n	8002c3e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c46:	d178      	bne.n	8002d3a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_SPI_TransmitReceive+0x10a>
 8002c50:	8b7b      	ldrh	r3, [r7, #26]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d166      	bne.n	8002d24 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	881a      	ldrh	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	1c9a      	adds	r2, r3, #2
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c7a:	e053      	b.n	8002d24 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d11b      	bne.n	8002cc2 <HAL_SPI_TransmitReceive+0x176>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d016      	beq.n	8002cc2 <HAL_SPI_TransmitReceive+0x176>
 8002c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d113      	bne.n	8002cc2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	881a      	ldrh	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	1c9a      	adds	r2, r3, #2
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d119      	bne.n	8002d04 <HAL_SPI_TransmitReceive+0x1b8>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d014      	beq.n	8002d04 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	b292      	uxth	r2, r2
 8002ce6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cec:	1c9a      	adds	r2, r3, #2
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d00:	2301      	movs	r3, #1
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d04:	f7fe fb48 	bl	8001398 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d807      	bhi.n	8002d24 <HAL_SPI_TransmitReceive+0x1d8>
 8002d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d003      	beq.n	8002d24 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d22:	e0a7      	b.n	8002e74 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1a6      	bne.n	8002c7c <HAL_SPI_TransmitReceive+0x130>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1a1      	bne.n	8002c7c <HAL_SPI_TransmitReceive+0x130>
 8002d38:	e07c      	b.n	8002e34 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_SPI_TransmitReceive+0x1fc>
 8002d42:	8b7b      	ldrh	r3, [r7, #26]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d16b      	bne.n	8002e20 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	330c      	adds	r3, #12
 8002d52:	7812      	ldrb	r2, [r2, #0]
 8002d54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d6e:	e057      	b.n	8002e20 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d11c      	bne.n	8002db8 <HAL_SPI_TransmitReceive+0x26c>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d017      	beq.n	8002db8 <HAL_SPI_TransmitReceive+0x26c>
 8002d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d114      	bne.n	8002db8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	330c      	adds	r3, #12
 8002d98:	7812      	ldrb	r2, [r2, #0]
 8002d9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d119      	bne.n	8002dfa <HAL_SPI_TransmitReceive+0x2ae>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d014      	beq.n	8002dfa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002df6:	2301      	movs	r3, #1
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002dfa:	f7fe facd 	bl	8001398 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d803      	bhi.n	8002e12 <HAL_SPI_TransmitReceive+0x2c6>
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d102      	bne.n	8002e18 <HAL_SPI_TransmitReceive+0x2cc>
 8002e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d103      	bne.n	8002e20 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e1e:	e029      	b.n	8002e74 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1a2      	bne.n	8002d70 <HAL_SPI_TransmitReceive+0x224>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d19d      	bne.n	8002d70 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 fbeb 	bl	8003614 <SPI_EndRxTxTransaction>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d006      	beq.n	8002e52 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e50:	e010      	b.n	8002e74 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10b      	bne.n	8002e72 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	e000      	b.n	8002e74 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3730      	adds	r7, #48	; 0x30
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d110      	bne.n	8002ecc <HAL_SPI_Receive_DMA+0x3c>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eb2:	d10b      	bne.n	8002ecc <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f8ac 	bl	8003020 <HAL_SPI_TransmitReceive_DMA>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	e09f      	b.n	800300c <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_SPI_Receive_DMA+0x4a>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e098      	b.n	800300c <HAL_SPI_Receive_DMA+0x17c>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d002      	beq.n	8002ef4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ef2:	e086      	b.n	8003002 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_SPI_Receive_DMA+0x70>
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f04:	e07d      	b.n	8003002 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2204      	movs	r2, #4
 8002f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	88fa      	ldrh	r2, [r7, #6]
 8002f24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d10f      	bne.n	8002f68 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6c:	4a29      	ldr	r2, [pc, #164]	; (8003014 <HAL_SPI_Receive_DMA+0x184>)
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f74:	4a28      	ldr	r2, [pc, #160]	; (8003018 <HAL_SPI_Receive_DMA+0x188>)
 8002f76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7c:	4a27      	ldr	r2, [pc, #156]	; (800301c <HAL_SPI_Receive_DMA+0x18c>)
 8002f7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f84:	2200      	movs	r2, #0
 8002f86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	330c      	adds	r3, #12
 8002f92:	4619      	mov	r1, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002fa0:	f7fe fb3b 	bl	800161a <HAL_DMA_Start_IT>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00c      	beq.n	8002fc4 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fae:	f043 0210 	orr.w	r2, r3, #16
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002fc2:	e01e      	b.n	8003002 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fce:	2b40      	cmp	r3, #64	; 0x40
 8002fd0:	d007      	beq.n	8002fe2 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fe0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0220 	orr.w	r2, r2, #32
 8002ff0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800300a:	7dfb      	ldrb	r3, [r7, #23]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	080033c1 	.word	0x080033c1
 8003018:	08003289 	.word	0x08003289
 800301c:	080033f9 	.word	0x080033f9

08003020 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_SPI_TransmitReceive_DMA+0x20>
 800303c:	2302      	movs	r3, #2
 800303e:	e0e3      	b.n	8003208 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800304e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003056:	7dbb      	ldrb	r3, [r7, #22]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d00d      	beq.n	8003078 <HAL_SPI_TransmitReceive_DMA+0x58>
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003062:	d106      	bne.n	8003072 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d102      	bne.n	8003072 <HAL_SPI_TransmitReceive_DMA+0x52>
 800306c:	7dbb      	ldrb	r3, [r7, #22]
 800306e:	2b04      	cmp	r3, #4
 8003070:	d002      	beq.n	8003078 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003072:	2302      	movs	r3, #2
 8003074:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003076:	e0c2      	b.n	80031fe <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003084:	887b      	ldrh	r3, [r7, #2]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d102      	bne.n	8003090 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800308e:	e0b6      	b.n	80031fe <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b04      	cmp	r3, #4
 800309a:	d003      	beq.n	80030a4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2205      	movs	r2, #5
 80030a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	887a      	ldrh	r2, [r7, #2]
 80030ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	887a      	ldrh	r2, [r7, #2]
 80030c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	887a      	ldrh	r2, [r7, #2]
 80030cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d108      	bne.n	80030f8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ea:	4a49      	ldr	r2, [pc, #292]	; (8003210 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f2:	4a48      	ldr	r2, [pc, #288]	; (8003214 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80030f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80030f6:	e007      	b.n	8003108 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fc:	4a46      	ldr	r2, [pc, #280]	; (8003218 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003104:	4a45      	ldr	r2, [pc, #276]	; (800321c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003106:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310c:	4a44      	ldr	r2, [pc, #272]	; (8003220 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800310e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003114:	2200      	movs	r2, #0
 8003116:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	330c      	adds	r3, #12
 8003122:	4619      	mov	r1, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003130:	f7fe fa73 	bl	800161a <HAL_DMA_Start_IT>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00c      	beq.n	8003154 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	f043 0210 	orr.w	r2, r3, #16
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003152:	e054      	b.n	80031fe <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003168:	2200      	movs	r2, #0
 800316a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003170:	2200      	movs	r2, #0
 8003172:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003178:	2200      	movs	r2, #0
 800317a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003180:	2200      	movs	r2, #0
 8003182:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	4619      	mov	r1, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800319a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800319c:	f7fe fa3d 	bl	800161a <HAL_DMA_Start_IT>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00c      	beq.n	80031c0 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031aa:	f043 0210 	orr.w	r2, r3, #16
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80031be:	e01e      	b.n	80031fe <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	2b40      	cmp	r3, #64	; 0x40
 80031cc:	d007      	beq.n	80031de <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031dc:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0220 	orr.w	r2, r2, #32
 80031ec:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0202 	orr.w	r2, r2, #2
 80031fc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003206:	7dfb      	ldrb	r3, [r7, #23]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	080033c1 	.word	0x080033c1
 8003214:	08003289 	.word	0x08003289
 8003218:	080033dd 	.word	0x080033dd
 800321c:	08003331 	.word	0x08003331
 8003220:	080033f9 	.word	0x080033f9

08003224 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003296:	f7fe f87f 	bl	8001398 <HAL_GetTick>
 800329a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032aa:	d03b      	beq.n	8003324 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0220 	bic.w	r2, r2, #32
 80032ba:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10d      	bne.n	80032e0 <SPI_DMAReceiveCplt+0x58>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032cc:	d108      	bne.n	80032e0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0203 	bic.w	r2, r2, #3
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	e007      	b.n	80032f0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	2164      	movs	r1, #100	; 0x64
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f927 	bl	8003548 <SPI_EndRxTransaction>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f7ff ffa9 	bl	8003274 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003322:	e002      	b.n	800332a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f7ff ff7d 	bl	8003224 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800333e:	f7fe f82b 	bl	8001398 <HAL_GetTick>
 8003342:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003352:	d02f      	beq.n	80033b4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0220 	bic.w	r2, r2, #32
 8003362:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	2164      	movs	r1, #100	; 0x64
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f953 	bl	8003614 <SPI_EndRxTxTransaction>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d005      	beq.n	8003380 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003378:	f043 0220 	orr.w	r2, r3, #32
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0203 	bic.w	r2, r2, #3
 800338e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f7ff ff61 	bl	8003274 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80033b2:	e002      	b.n	80033ba <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f7ff ff3f 	bl	8003238 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f7ff ff3c 	bl	800324c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f7ff ff38 	bl	8003260 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80033f0:	bf00      	nop
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0203 	bic.w	r2, r2, #3
 8003414:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341a:	f043 0210 	orr.w	r2, r3, #16
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f7ff ff22 	bl	8003274 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003430:	bf00      	nop
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	4613      	mov	r3, r2
 8003446:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003448:	f7fd ffa6 	bl	8001398 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	4413      	add	r3, r2
 8003456:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003458:	f7fd ff9e 	bl	8001398 <HAL_GetTick>
 800345c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800345e:	4b39      	ldr	r3, [pc, #228]	; (8003544 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	015b      	lsls	r3, r3, #5
 8003464:	0d1b      	lsrs	r3, r3, #20
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	fb02 f303 	mul.w	r3, r2, r3
 800346c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800346e:	e054      	b.n	800351a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003476:	d050      	beq.n	800351a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003478:	f7fd ff8e 	bl	8001398 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	429a      	cmp	r2, r3
 8003486:	d902      	bls.n	800348e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d13d      	bne.n	800350a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800349c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034a6:	d111      	bne.n	80034cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b0:	d004      	beq.n	80034bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ba:	d107      	bne.n	80034cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d4:	d10f      	bne.n	80034f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e017      	b.n	800353a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	3b01      	subs	r3, #1
 8003518:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4013      	ands	r3, r2
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	429a      	cmp	r2, r3
 8003528:	bf0c      	ite	eq
 800352a:	2301      	moveq	r3, #1
 800352c:	2300      	movne	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	461a      	mov	r2, r3
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	429a      	cmp	r2, r3
 8003536:	d19b      	bne.n	8003470 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000050 	.word	0x20000050

08003548 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800355c:	d111      	bne.n	8003582 <SPI_EndRxTransaction+0x3a>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003566:	d004      	beq.n	8003572 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003570:	d107      	bne.n	8003582 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003580:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800358a:	d12a      	bne.n	80035e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003594:	d012      	beq.n	80035bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2200      	movs	r2, #0
 800359e:	2180      	movs	r1, #128	; 0x80
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f7ff ff49 	bl	8003438 <SPI_WaitFlagStateUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d02d      	beq.n	8003608 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	f043 0220 	orr.w	r2, r3, #32
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e026      	b.n	800360a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2200      	movs	r2, #0
 80035c4:	2101      	movs	r1, #1
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f7ff ff36 	bl	8003438 <SPI_WaitFlagStateUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d01a      	beq.n	8003608 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	f043 0220 	orr.w	r2, r3, #32
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e013      	b.n	800360a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2200      	movs	r2, #0
 80035ea:	2101      	movs	r1, #1
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f7ff ff23 	bl	8003438 <SPI_WaitFlagStateUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d007      	beq.n	8003608 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e000      	b.n	800360a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <SPI_EndRxTxTransaction+0x7c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1b      	ldr	r2, [pc, #108]	; (8003694 <SPI_EndRxTxTransaction+0x80>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	0d5b      	lsrs	r3, r3, #21
 800362c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003630:	fb02 f303 	mul.w	r3, r2, r3
 8003634:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800363e:	d112      	bne.n	8003666 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2200      	movs	r2, #0
 8003648:	2180      	movs	r1, #128	; 0x80
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f7ff fef4 	bl	8003438 <SPI_WaitFlagStateUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d016      	beq.n	8003684 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	f043 0220 	orr.w	r2, r3, #32
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e00f      	b.n	8003686 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	3b01      	subs	r3, #1
 8003670:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367c:	2b80      	cmp	r3, #128	; 0x80
 800367e:	d0f2      	beq.n	8003666 <SPI_EndRxTxTransaction+0x52>
 8003680:	e000      	b.n	8003684 <SPI_EndRxTxTransaction+0x70>
        break;
 8003682:	bf00      	nop
  }

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000050 	.word	0x20000050
 8003694:	165e9f81 	.word	0x165e9f81

08003698 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e03f      	b.n	800372a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd fd42 	bl	8001148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2224      	movs	r2, #36	; 0x24
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f929 	bl	8003934 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003700:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003710:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b08a      	sub	sp, #40	; 0x28
 8003736:	af02      	add	r7, sp, #8
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	603b      	str	r3, [r7, #0]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b20      	cmp	r3, #32
 8003750:	d17c      	bne.n	800384c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_UART_Transmit+0x2c>
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e075      	b.n	800384e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_UART_Transmit+0x3e>
 800376c:	2302      	movs	r3, #2
 800376e:	e06e      	b.n	800384e <HAL_UART_Transmit+0x11c>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2221      	movs	r2, #33	; 0x21
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003786:	f7fd fe07 	bl	8001398 <HAL_GetTick>
 800378a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	88fa      	ldrh	r2, [r7, #6]
 8003796:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a0:	d108      	bne.n	80037b4 <HAL_UART_Transmit+0x82>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d104      	bne.n	80037b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	e003      	b.n	80037bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037c4:	e02a      	b.n	800381c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2200      	movs	r2, #0
 80037ce:	2180      	movs	r1, #128	; 0x80
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f840 	bl	8003856 <UART_WaitOnFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e036      	b.n	800384e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10b      	bne.n	80037fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	3302      	adds	r3, #2
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	e007      	b.n	800380e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	781a      	ldrb	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	3301      	adds	r3, #1
 800380c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1cf      	bne.n	80037c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2200      	movs	r2, #0
 800382e:	2140      	movs	r1, #64	; 0x40
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f810 	bl	8003856 <UART_WaitOnFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e006      	b.n	800384e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	e000      	b.n	800384e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800384c:	2302      	movs	r3, #2
  }
}
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b090      	sub	sp, #64	; 0x40
 800385a:	af00      	add	r7, sp, #0
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	4613      	mov	r3, r2
 8003864:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003866:	e050      	b.n	800390a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d04c      	beq.n	800390a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <UART_WaitOnFlagUntilTimeout+0x30>
 8003876:	f7fd fd8f 	bl	8001398 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003882:	429a      	cmp	r2, r3
 8003884:	d241      	bcs.n	800390a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	330c      	adds	r3, #12
 800388c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800389c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	330c      	adds	r3, #12
 80038a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038a6:	637a      	str	r2, [r7, #52]	; 0x34
 80038a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e5      	bne.n	8003886 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3314      	adds	r3, #20
 80038c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	613b      	str	r3, [r7, #16]
   return(result);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3314      	adds	r3, #20
 80038d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038da:	623a      	str	r2, [r7, #32]
 80038dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	69f9      	ldr	r1, [r7, #28]
 80038e0:	6a3a      	ldr	r2, [r7, #32]
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e5      	bne.n	80038ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e00f      	b.n	800392a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4013      	ands	r3, r2
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	429a      	cmp	r2, r3
 8003918:	bf0c      	ite	eq
 800391a:	2301      	moveq	r3, #1
 800391c:	2300      	movne	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	429a      	cmp	r2, r3
 8003926:	d09f      	beq.n	8003868 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3740      	adds	r7, #64	; 0x40
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003938:	b09f      	sub	sp, #124	; 0x7c
 800393a:	af00      	add	r7, sp, #0
 800393c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800393e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800394a:	68d9      	ldr	r1, [r3, #12]
 800394c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	ea40 0301 	orr.w	r3, r0, r1
 8003954:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	431a      	orrs	r2, r3
 8003960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	431a      	orrs	r2, r3
 8003966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	4313      	orrs	r3, r2
 800396c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800396e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003978:	f021 010c 	bic.w	r1, r1, #12
 800397c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003982:	430b      	orrs	r3, r1
 8003984:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003992:	6999      	ldr	r1, [r3, #24]
 8003994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	ea40 0301 	orr.w	r3, r0, r1
 800399c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800399e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4bc5      	ldr	r3, [pc, #788]	; (8003cb8 <UART_SetConfig+0x384>)
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d004      	beq.n	80039b2 <UART_SetConfig+0x7e>
 80039a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4bc3      	ldr	r3, [pc, #780]	; (8003cbc <UART_SetConfig+0x388>)
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d103      	bne.n	80039ba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039b2:	f7fe f991 	bl	8001cd8 <HAL_RCC_GetPCLK2Freq>
 80039b6:	6778      	str	r0, [r7, #116]	; 0x74
 80039b8:	e002      	b.n	80039c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ba:	f7fe f979 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 80039be:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c8:	f040 80b6 	bne.w	8003b38 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ce:	461c      	mov	r4, r3
 80039d0:	f04f 0500 	mov.w	r5, #0
 80039d4:	4622      	mov	r2, r4
 80039d6:	462b      	mov	r3, r5
 80039d8:	1891      	adds	r1, r2, r2
 80039da:	6439      	str	r1, [r7, #64]	; 0x40
 80039dc:	415b      	adcs	r3, r3
 80039de:	647b      	str	r3, [r7, #68]	; 0x44
 80039e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039e4:	1912      	adds	r2, r2, r4
 80039e6:	eb45 0303 	adc.w	r3, r5, r3
 80039ea:	f04f 0000 	mov.w	r0, #0
 80039ee:	f04f 0100 	mov.w	r1, #0
 80039f2:	00d9      	lsls	r1, r3, #3
 80039f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039f8:	00d0      	lsls	r0, r2, #3
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	1911      	adds	r1, r2, r4
 8003a00:	6639      	str	r1, [r7, #96]	; 0x60
 8003a02:	416b      	adcs	r3, r5
 8003a04:	667b      	str	r3, [r7, #100]	; 0x64
 8003a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	1891      	adds	r1, r2, r2
 8003a12:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a14:	415b      	adcs	r3, r3
 8003a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a1c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a20:	f7fc fbf2 	bl	8000208 <__aeabi_uldivmod>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4ba5      	ldr	r3, [pc, #660]	; (8003cc0 <UART_SetConfig+0x38c>)
 8003a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	011e      	lsls	r6, r3, #4
 8003a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a34:	461c      	mov	r4, r3
 8003a36:	f04f 0500 	mov.w	r5, #0
 8003a3a:	4622      	mov	r2, r4
 8003a3c:	462b      	mov	r3, r5
 8003a3e:	1891      	adds	r1, r2, r2
 8003a40:	6339      	str	r1, [r7, #48]	; 0x30
 8003a42:	415b      	adcs	r3, r3
 8003a44:	637b      	str	r3, [r7, #52]	; 0x34
 8003a46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a4a:	1912      	adds	r2, r2, r4
 8003a4c:	eb45 0303 	adc.w	r3, r5, r3
 8003a50:	f04f 0000 	mov.w	r0, #0
 8003a54:	f04f 0100 	mov.w	r1, #0
 8003a58:	00d9      	lsls	r1, r3, #3
 8003a5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a5e:	00d0      	lsls	r0, r2, #3
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	1911      	adds	r1, r2, r4
 8003a66:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a68:	416b      	adcs	r3, r5
 8003a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	461a      	mov	r2, r3
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	1891      	adds	r1, r2, r2
 8003a78:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a7a:	415b      	adcs	r3, r3
 8003a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a82:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003a86:	f7fc fbbf 	bl	8000208 <__aeabi_uldivmod>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4b8c      	ldr	r3, [pc, #560]	; (8003cc0 <UART_SetConfig+0x38c>)
 8003a90:	fba3 1302 	umull	r1, r3, r3, r2
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	2164      	movs	r1, #100	; 0x64
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	3332      	adds	r3, #50	; 0x32
 8003aa2:	4a87      	ldr	r2, [pc, #540]	; (8003cc0 <UART_SetConfig+0x38c>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ab0:	441e      	add	r6, r3
 8003ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f04f 0100 	mov.w	r1, #0
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	1894      	adds	r4, r2, r2
 8003ac0:	623c      	str	r4, [r7, #32]
 8003ac2:	415b      	adcs	r3, r3
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003aca:	1812      	adds	r2, r2, r0
 8003acc:	eb41 0303 	adc.w	r3, r1, r3
 8003ad0:	f04f 0400 	mov.w	r4, #0
 8003ad4:	f04f 0500 	mov.w	r5, #0
 8003ad8:	00dd      	lsls	r5, r3, #3
 8003ada:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ade:	00d4      	lsls	r4, r2, #3
 8003ae0:	4622      	mov	r2, r4
 8003ae2:	462b      	mov	r3, r5
 8003ae4:	1814      	adds	r4, r2, r0
 8003ae6:	653c      	str	r4, [r7, #80]	; 0x50
 8003ae8:	414b      	adcs	r3, r1
 8003aea:	657b      	str	r3, [r7, #84]	; 0x54
 8003aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	461a      	mov	r2, r3
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	1891      	adds	r1, r2, r2
 8003af8:	61b9      	str	r1, [r7, #24]
 8003afa:	415b      	adcs	r3, r3
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b06:	f7fc fb7f 	bl	8000208 <__aeabi_uldivmod>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4b6c      	ldr	r3, [pc, #432]	; (8003cc0 <UART_SetConfig+0x38c>)
 8003b10:	fba3 1302 	umull	r1, r3, r3, r2
 8003b14:	095b      	lsrs	r3, r3, #5
 8003b16:	2164      	movs	r1, #100	; 0x64
 8003b18:	fb01 f303 	mul.w	r3, r1, r3
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	3332      	adds	r3, #50	; 0x32
 8003b22:	4a67      	ldr	r2, [pc, #412]	; (8003cc0 <UART_SetConfig+0x38c>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	f003 0207 	and.w	r2, r3, #7
 8003b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4432      	add	r2, r6
 8003b34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b36:	e0b9      	b.n	8003cac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b3a:	461c      	mov	r4, r3
 8003b3c:	f04f 0500 	mov.w	r5, #0
 8003b40:	4622      	mov	r2, r4
 8003b42:	462b      	mov	r3, r5
 8003b44:	1891      	adds	r1, r2, r2
 8003b46:	6139      	str	r1, [r7, #16]
 8003b48:	415b      	adcs	r3, r3
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b50:	1912      	adds	r2, r2, r4
 8003b52:	eb45 0303 	adc.w	r3, r5, r3
 8003b56:	f04f 0000 	mov.w	r0, #0
 8003b5a:	f04f 0100 	mov.w	r1, #0
 8003b5e:	00d9      	lsls	r1, r3, #3
 8003b60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b64:	00d0      	lsls	r0, r2, #3
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	eb12 0804 	adds.w	r8, r2, r4
 8003b6e:	eb43 0905 	adc.w	r9, r3, r5
 8003b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f04f 0100 	mov.w	r1, #0
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	008b      	lsls	r3, r1, #2
 8003b86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b8a:	0082      	lsls	r2, r0, #2
 8003b8c:	4640      	mov	r0, r8
 8003b8e:	4649      	mov	r1, r9
 8003b90:	f7fc fb3a 	bl	8000208 <__aeabi_uldivmod>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4b49      	ldr	r3, [pc, #292]	; (8003cc0 <UART_SetConfig+0x38c>)
 8003b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	011e      	lsls	r6, r3, #4
 8003ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f04f 0100 	mov.w	r1, #0
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	1894      	adds	r4, r2, r2
 8003bb0:	60bc      	str	r4, [r7, #8]
 8003bb2:	415b      	adcs	r3, r3
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bba:	1812      	adds	r2, r2, r0
 8003bbc:	eb41 0303 	adc.w	r3, r1, r3
 8003bc0:	f04f 0400 	mov.w	r4, #0
 8003bc4:	f04f 0500 	mov.w	r5, #0
 8003bc8:	00dd      	lsls	r5, r3, #3
 8003bca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bce:	00d4      	lsls	r4, r2, #3
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	462b      	mov	r3, r5
 8003bd4:	1814      	adds	r4, r2, r0
 8003bd6:	64bc      	str	r4, [r7, #72]	; 0x48
 8003bd8:	414b      	adcs	r3, r1
 8003bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f04f 0100 	mov.w	r1, #0
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	008b      	lsls	r3, r1, #2
 8003bf0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bf4:	0082      	lsls	r2, r0, #2
 8003bf6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003bfa:	f7fc fb05 	bl	8000208 <__aeabi_uldivmod>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4b2f      	ldr	r3, [pc, #188]	; (8003cc0 <UART_SetConfig+0x38c>)
 8003c04:	fba3 1302 	umull	r1, r3, r3, r2
 8003c08:	095b      	lsrs	r3, r3, #5
 8003c0a:	2164      	movs	r1, #100	; 0x64
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	3332      	adds	r3, #50	; 0x32
 8003c16:	4a2a      	ldr	r2, [pc, #168]	; (8003cc0 <UART_SetConfig+0x38c>)
 8003c18:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c22:	441e      	add	r6, r3
 8003c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c26:	4618      	mov	r0, r3
 8003c28:	f04f 0100 	mov.w	r1, #0
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	1894      	adds	r4, r2, r2
 8003c32:	603c      	str	r4, [r7, #0]
 8003c34:	415b      	adcs	r3, r3
 8003c36:	607b      	str	r3, [r7, #4]
 8003c38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c3c:	1812      	adds	r2, r2, r0
 8003c3e:	eb41 0303 	adc.w	r3, r1, r3
 8003c42:	f04f 0400 	mov.w	r4, #0
 8003c46:	f04f 0500 	mov.w	r5, #0
 8003c4a:	00dd      	lsls	r5, r3, #3
 8003c4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c50:	00d4      	lsls	r4, r2, #3
 8003c52:	4622      	mov	r2, r4
 8003c54:	462b      	mov	r3, r5
 8003c56:	eb12 0a00 	adds.w	sl, r2, r0
 8003c5a:	eb43 0b01 	adc.w	fp, r3, r1
 8003c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f04f 0100 	mov.w	r1, #0
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	008b      	lsls	r3, r1, #2
 8003c72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c76:	0082      	lsls	r2, r0, #2
 8003c78:	4650      	mov	r0, sl
 8003c7a:	4659      	mov	r1, fp
 8003c7c:	f7fc fac4 	bl	8000208 <__aeabi_uldivmod>
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <UART_SetConfig+0x38c>)
 8003c86:	fba3 1302 	umull	r1, r3, r3, r2
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	2164      	movs	r1, #100	; 0x64
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	3332      	adds	r3, #50	; 0x32
 8003c98:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <UART_SetConfig+0x38c>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	f003 020f 	and.w	r2, r3, #15
 8003ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4432      	add	r2, r6
 8003caa:	609a      	str	r2, [r3, #8]
}
 8003cac:	bf00      	nop
 8003cae:	377c      	adds	r7, #124	; 0x7c
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40011000 	.word	0x40011000
 8003cbc:	40011400 	.word	0x40011400
 8003cc0:	51eb851f 	.word	0x51eb851f

08003cc4 <__libc_init_array>:
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	4d0d      	ldr	r5, [pc, #52]	; (8003cfc <__libc_init_array+0x38>)
 8003cc8:	4c0d      	ldr	r4, [pc, #52]	; (8003d00 <__libc_init_array+0x3c>)
 8003cca:	1b64      	subs	r4, r4, r5
 8003ccc:	10a4      	asrs	r4, r4, #2
 8003cce:	2600      	movs	r6, #0
 8003cd0:	42a6      	cmp	r6, r4
 8003cd2:	d109      	bne.n	8003ce8 <__libc_init_array+0x24>
 8003cd4:	4d0b      	ldr	r5, [pc, #44]	; (8003d04 <__libc_init_array+0x40>)
 8003cd6:	4c0c      	ldr	r4, [pc, #48]	; (8003d08 <__libc_init_array+0x44>)
 8003cd8:	f000 f820 	bl	8003d1c <_init>
 8003cdc:	1b64      	subs	r4, r4, r5
 8003cde:	10a4      	asrs	r4, r4, #2
 8003ce0:	2600      	movs	r6, #0
 8003ce2:	42a6      	cmp	r6, r4
 8003ce4:	d105      	bne.n	8003cf2 <__libc_init_array+0x2e>
 8003ce6:	bd70      	pop	{r4, r5, r6, pc}
 8003ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cec:	4798      	blx	r3
 8003cee:	3601      	adds	r6, #1
 8003cf0:	e7ee      	b.n	8003cd0 <__libc_init_array+0xc>
 8003cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf6:	4798      	blx	r3
 8003cf8:	3601      	adds	r6, #1
 8003cfa:	e7f2      	b.n	8003ce2 <__libc_init_array+0x1e>
 8003cfc:	08003d54 	.word	0x08003d54
 8003d00:	08003d54 	.word	0x08003d54
 8003d04:	08003d54 	.word	0x08003d54
 8003d08:	08003d58 	.word	0x08003d58

08003d0c <memset>:
 8003d0c:	4402      	add	r2, r0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d100      	bne.n	8003d16 <memset+0xa>
 8003d14:	4770      	bx	lr
 8003d16:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1a:	e7f9      	b.n	8003d10 <memset+0x4>

08003d1c <_init>:
 8003d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1e:	bf00      	nop
 8003d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d22:	bc08      	pop	{r3}
 8003d24:	469e      	mov	lr, r3
 8003d26:	4770      	bx	lr

08003d28 <_fini>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	bf00      	nop
 8003d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2e:	bc08      	pop	{r3}
 8003d30:	469e      	mov	lr, r3
 8003d32:	4770      	bx	lr
