
F446RE_LoRa_Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a20  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c00  08003c00  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c00  08003c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c08  08003c08  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c0c  08003c0c  00013c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08003c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000003c  08003c4c  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003c4c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1e6  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb8  00000000  00000000  0002c252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002de10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002e880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217b7  00000000  00000000  0002f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3eb  00000000  00000000  000509ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cac2d  00000000  00000000  0005cdea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00127a17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa0  00000000  00000000  00127a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000003c 	.word	0x2000003c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003bd0 	.word	0x08003bd0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000040 	.word	0x20000040
 8000204:	08003bd0 	.word	0x08003bd0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 800051c:	78fb      	ldrb	r3, [r7, #3]
 800051e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000522:	b2db      	uxtb	r3, r3
 8000524:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6858      	ldr	r0, [r3, #4]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	8adb      	ldrh	r3, [r3, #22]
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	f001 fa3b 	bl	80019ac <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6818      	ldr	r0, [r3, #0]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	1cf9      	adds	r1, r7, #3
 8000540:	2201      	movs	r2, #1
 8000542:	f002 f8e2 	bl	800270a <HAL_SPI_Transmit>
 8000546:	4603      	mov	r3, r0
 8000548:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6818      	ldr	r0, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	f107 010f 	add.w	r1, r7, #15
 8000556:	2201      	movs	r2, #1
 8000558:	f002 fa13 	bl	8002982 <HAL_SPI_Receive>
 800055c:	4603      	mov	r3, r0
 800055e:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	6858      	ldr	r0, [r3, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	8adb      	ldrh	r3, [r3, #22]
 8000568:	2201      	movs	r2, #1
 800056a:	4619      	mov	r1, r3
 800056c:	f001 fa1e 	bl	80019ac <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000570:	7bfb      	ldrb	r3, [r7, #15]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	b084      	sub	sp, #16
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	460b      	mov	r3, r1
 8000584:	70fb      	strb	r3, [r7, #3]
 8000586:	4613      	mov	r3, r2
 8000588:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800058a:	78fb      	ldrb	r3, [r7, #3]
 800058c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000590:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000592:	78bb      	ldrb	r3, [r7, #2]
 8000594:	021b      	lsls	r3, r3, #8
 8000596:	b21a      	sxth	r2, r3
 8000598:	78fb      	ldrb	r3, [r7, #3]
 800059a:	b21b      	sxth	r3, r3
 800059c:	4313      	orrs	r3, r2
 800059e:	b21b      	sxth	r3, r3
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6858      	ldr	r0, [r3, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	8adb      	ldrh	r3, [r3, #22]
 80005ac:	2200      	movs	r2, #0
 80005ae:	4619      	mov	r1, r3
 80005b0:	f001 f9fc 	bl	80019ac <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6818      	ldr	r0, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	f107 010a 	add.w	r1, r7, #10
 80005c0:	2202      	movs	r2, #2
 80005c2:	f002 f8a2 	bl	800270a <HAL_SPI_Transmit>
 80005c6:	4603      	mov	r3, r0
 80005c8:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6858      	ldr	r0, [r3, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	8adb      	ldrh	r3, [r3, #22]
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	f001 f9e9 	bl	80019ac <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b088      	sub	sp, #32
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	4611      	mov	r1, r2
 80005ee:	461a      	mov	r2, r3
 80005f0:	460b      	mov	r3, r1
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	6858      	ldr	r0, [r3, #4]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	8adb      	ldrh	r3, [r3, #22]
 8000604:	2200      	movs	r2, #0
 8000606:	4619      	mov	r1, r3
 8000608:	f001 f9d0 	bl	80019ac <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	6818      	ldr	r0, [r3, #0]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	f107 0117 	add.w	r1, r7, #23
 8000618:	2201      	movs	r2, #1
 800061a:	f002 f876 	bl	800270a <HAL_SPI_Transmit>
 800061e:	4603      	mov	r3, r0
 8000620:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8000622:	79bb      	ldrb	r3, [r7, #6]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d108      	bne.n	800063a <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	79fa      	ldrb	r2, [r7, #7]
 800062e:	b292      	uxth	r2, r2
 8000630:	68b9      	ldr	r1, [r7, #8]
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fc58 	bl	8002ee8 <HAL_SPI_Transmit_DMA>
 8000638:	e012      	b.n	8000660 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	6818      	ldr	r0, [r3, #0]
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	b29a      	uxth	r2, r3
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	68b9      	ldr	r1, [r7, #8]
 8000648:	f002 f85f 	bl	800270a <HAL_SPI_Transmit>
 800064c:	4603      	mov	r3, r0
 800064e:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	6858      	ldr	r0, [r3, #4]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	8adb      	ldrh	r3, [r3, #22]
 8000658:	2201      	movs	r2, #1
 800065a:	4619      	mov	r1, r3
 800065c:	f001 f9a6 	bl	80019ac <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8000660:	3720      	adds	r7, #32
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	460b      	mov	r3, r1
 8000670:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8000672:	78fb      	ldrb	r3, [r7, #3]
 8000674:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000678:	b2db      	uxtb	r3, r3
 800067a:	461a      	mov	r2, r3
 800067c:	2101      	movs	r1, #1
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f7ff ff7b 	bl	800057a <write_register>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8000698:	78fb      	ldrb	r3, [r7, #3]
 800069a:	2b2c      	cmp	r3, #44	; 0x2c
 800069c:	d801      	bhi.n	80006a2 <set_OCP+0x16>
    imax = 45;
 800069e:	232d      	movs	r3, #45	; 0x2d
 80006a0:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	2bf0      	cmp	r3, #240	; 0xf0
 80006a6:	d901      	bls.n	80006ac <set_OCP+0x20>
    imax = 240;
 80006a8:	23f0      	movs	r3, #240	; 0xf0
 80006aa:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	2b81      	cmp	r3, #129	; 0x81
 80006b0:	d809      	bhi.n	80006c6 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 80006b2:	78fb      	ldrb	r3, [r7, #3]
 80006b4:	3b2d      	subs	r3, #45	; 0x2d
 80006b6:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <set_OCP+0x68>)
 80006b8:	fb82 1203 	smull	r1, r2, r2, r3
 80006bc:	1052      	asrs	r2, r2, #1
 80006be:	17db      	asrs	r3, r3, #31
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	73fb      	strb	r3, [r7, #15]
 80006c4:	e008      	b.n	80006d8 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80006c6:	78fb      	ldrb	r3, [r7, #3]
 80006c8:	331e      	adds	r3, #30
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <set_OCP+0x68>)
 80006cc:	fb82 1203 	smull	r1, r2, r2, r3
 80006d0:	1092      	asrs	r2, r2, #2
 80006d2:	17db      	asrs	r3, r3, #31
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	f043 0320 	orr.w	r3, r3, #32
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	461a      	mov	r2, r3
 80006e2:	210b      	movs	r1, #11
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ff48 	bl	800057a <write_register>
}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	66666667 	.word	0x66666667

080006f8 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 80006f8:	b5b0      	push	{r4, r5, r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8000700:	211d      	movs	r1, #29
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff ff02 	bl	800050c <read_register>
 8000708:	4603      	mov	r3, r0
 800070a:	091b      	lsrs	r3, r3, #4
 800070c:	b2db      	uxtb	r3, r3
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2200      	movs	r2, #0
 8000712:	461c      	mov	r4, r3
 8000714:	4615      	mov	r5, r2
 8000716:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 800071a:	211e      	movs	r1, #30
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff fef5 	bl	800050c <read_register>
 8000722:	4603      	mov	r3, r0
 8000724:	091b      	lsrs	r3, r3, #4
 8000726:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8000728:	2304      	movs	r3, #4
 800072a:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	2b0a      	cmp	r3, #10
 8000730:	d908      	bls.n	8000744 <set_low_data_rate_optimization+0x4c>
 8000732:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000736:	1fd1      	subs	r1, r2, #7
 8000738:	430b      	orrs	r3, r1
 800073a:	d103      	bne.n	8000744 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 800073c:	7ffb      	ldrb	r3, [r7, #31]
 800073e:	f043 0308 	orr.w	r3, r3, #8
 8000742:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8000744:	7ffb      	ldrb	r3, [r7, #31]
 8000746:	461a      	mov	r2, r3
 8000748:	2126      	movs	r1, #38	; 0x26
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ff15 	bl	800057a <write_register>
}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bdb0      	pop	{r4, r5, r7, pc}

08000758 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8000760:	2100      	movs	r1, #0
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff ff7f 	bl	8000666 <set_mode>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8000778:	2101      	movs	r1, #1
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff ff73 	bl	8000666 <set_mode>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8000790:	211d      	movs	r1, #29
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff feba 	bl	800050c <read_register>
 8000798:	4603      	mov	r3, r0
 800079a:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	f023 0301 	bic.w	r3, r3, #1
 80007a2:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	461a      	mov	r2, r3
 80007a8:	211d      	movs	r1, #29
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff fee5 	bl	800057a <write_register>
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	691b      	ldr	r3, [r3, #16]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d10e      	bne.n	80007ea <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	2b0f      	cmp	r3, #15
 80007d0:	d901      	bls.n	80007d6 <lora_set_tx_power+0x1e>
      level = 15;
 80007d2:	230f      	movs	r3, #15
 80007d4:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	2109      	movs	r1, #9
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff fec9 	bl	800057a <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 80007e8:	e02e      	b.n	8000848 <lora_set_tx_power+0x90>
    if (level > 20) {
 80007ea:	78fb      	ldrb	r3, [r7, #3]
 80007ec:	2b14      	cmp	r3, #20
 80007ee:	d901      	bls.n	80007f4 <lora_set_tx_power+0x3c>
      level = 20;
 80007f0:	2314      	movs	r3, #20
 80007f2:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d801      	bhi.n	80007fe <lora_set_tx_power+0x46>
      level = 2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 80007fe:	78fb      	ldrb	r3, [r7, #3]
 8000800:	2b11      	cmp	r3, #17
 8000802:	d90c      	bls.n	800081e <lora_set_tx_power+0x66>
      level -= 3;
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	3b03      	subs	r3, #3
 8000808:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 800080a:	2287      	movs	r2, #135	; 0x87
 800080c:	214d      	movs	r1, #77	; 0x4d
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff feb3 	bl	800057a <write_register>
      set_OCP(lora, 140);
 8000814:	218c      	movs	r1, #140	; 0x8c
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f7ff ff38 	bl	800068c <set_OCP>
 800081c:	e008      	b.n	8000830 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800081e:	2284      	movs	r2, #132	; 0x84
 8000820:	214d      	movs	r1, #77	; 0x4d
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff fea9 	bl	800057a <write_register>
      set_OCP(lora, 97);
 8000828:	2161      	movs	r1, #97	; 0x61
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff ff2e 	bl	800068c <set_OCP>
    level -= 2;
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	3b02      	subs	r3, #2
 8000834:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800083c:	b2db      	uxtb	r3, r3
 800083e:	461a      	mov	r2, r3
 8000840:	2109      	movs	r1, #9
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff fe99 	bl	800057a <write_register>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 800085c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	f04f 0100 	mov.w	r1, #0
 8000868:	04d9      	lsls	r1, r3, #19
 800086a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800086e:	04d0      	lsls	r0, r2, #19
 8000870:	4a19      	ldr	r2, [pc, #100]	; (80008d8 <lora_set_frequency+0x88>)
 8000872:	f04f 0300 	mov.w	r3, #0
 8000876:	f7ff fcc7 	bl	8000208 <__aeabi_uldivmod>
 800087a:	4602      	mov	r2, r0
 800087c:	460b      	mov	r3, r1
 800087e:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8000882:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000886:	f04f 0200 	mov.w	r2, #0
 800088a:	f04f 0300 	mov.w	r3, #0
 800088e:	0c02      	lsrs	r2, r0, #16
 8000890:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000894:	0c0b      	lsrs	r3, r1, #16
 8000896:	b2d3      	uxtb	r3, r2
 8000898:	461a      	mov	r2, r3
 800089a:	2106      	movs	r1, #6
 800089c:	68f8      	ldr	r0, [r7, #12]
 800089e:	f7ff fe6c 	bl	800057a <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80008a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80008a6:	f04f 0200 	mov.w	r2, #0
 80008aa:	f04f 0300 	mov.w	r3, #0
 80008ae:	0a02      	lsrs	r2, r0, #8
 80008b0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80008b4:	0a0b      	lsrs	r3, r1, #8
 80008b6:	b2d3      	uxtb	r3, r2
 80008b8:	461a      	mov	r2, r3
 80008ba:	2107      	movs	r1, #7
 80008bc:	68f8      	ldr	r0, [r7, #12]
 80008be:	f7ff fe5c 	bl	800057a <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80008c2:	7c3b      	ldrb	r3, [r7, #16]
 80008c4:	461a      	mov	r2, r3
 80008c6:	2108      	movs	r1, #8
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff fe56 	bl	800057a <write_register>
}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	01e84800 	.word	0x01e84800

080008dc <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	2b05      	cmp	r3, #5
 80008ec:	d802      	bhi.n	80008f4 <lora_set_spreading_factor+0x18>
    sf = 6;
 80008ee:	2306      	movs	r3, #6
 80008f0:	70fb      	strb	r3, [r7, #3]
 80008f2:	e004      	b.n	80008fe <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80008f4:	78fb      	ldrb	r3, [r7, #3]
 80008f6:	2b0c      	cmp	r3, #12
 80008f8:	d901      	bls.n	80008fe <lora_set_spreading_factor+0x22>
    sf = 12;
 80008fa:	230c      	movs	r3, #12
 80008fc:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	2b06      	cmp	r3, #6
 8000902:	d10a      	bne.n	800091a <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8000904:	22c5      	movs	r2, #197	; 0xc5
 8000906:	2131      	movs	r1, #49	; 0x31
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff fe36 	bl	800057a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 800090e:	220c      	movs	r2, #12
 8000910:	2137      	movs	r1, #55	; 0x37
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff fe31 	bl	800057a <write_register>
 8000918:	e009      	b.n	800092e <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 800091a:	22c3      	movs	r2, #195	; 0xc3
 800091c:	2131      	movs	r1, #49	; 0x31
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff fe2b 	bl	800057a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000924:	220a      	movs	r2, #10
 8000926:	2137      	movs	r1, #55	; 0x37
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff fe26 	bl	800057a <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800092e:	211e      	movs	r1, #30
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fdeb 	bl	800050c <read_register>
 8000936:	4603      	mov	r3, r0
 8000938:	73fb      	strb	r3, [r7, #15]
  mc2 |= sf << 4;
 800093a:	78fb      	ldrb	r3, [r7, #3]
 800093c:	011b      	lsls	r3, r3, #4
 800093e:	b25a      	sxtb	r2, r3
 8000940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000944:	4313      	orrs	r3, r2
 8000946:	b25b      	sxtb	r3, r3
 8000948:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	461a      	mov	r2, r3
 800094e:	211e      	movs	r1, #30
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff fe12 	bl	800057a <write_register>

  set_low_data_rate_optimization(lora);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff fece 	bl	80006f8 <set_low_data_rate_optimization>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8000970:	887b      	ldrh	r3, [r7, #2]
 8000972:	0a1b      	lsrs	r3, r3, #8
 8000974:	b29b      	uxth	r3, r3
 8000976:	b2db      	uxtb	r3, r3
 8000978:	461a      	mov	r2, r3
 800097a:	2120      	movs	r1, #32
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff fdfc 	bl	800057a <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8000982:	887b      	ldrh	r3, [r7, #2]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	b2db      	uxtb	r3, r3
 800098c:	461a      	mov	r2, r3
 800098e:	2121      	movs	r1, #33	; 0x21
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff fdf2 	bl	800057a <write_register>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 80009a6:	2142      	movs	r1, #66	; 0x42
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fdaf 	bl	800050c <read_register>
 80009ae:	4603      	mov	r3, r0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 80009c0:	2101      	movs	r1, #1
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff fda2 	bl	800050c <read_register>
 80009c8:	4603      	mov	r3, r0
 80009ca:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d101      	bne.n	80009da <lora_is_transmitting+0x22>
 80009d6:	2305      	movs	r3, #5
 80009d8:	e000      	b.n	80009dc <lora_is_transmitting+0x24>
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	4611      	mov	r1, r2
 80009f0:	461a      	mov	r2, r3
 80009f2:	460b      	mov	r3, r1
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	4613      	mov	r3, r2
 80009f8:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 80009fa:	68f8      	ldr	r0, [r7, #12]
 80009fc:	f7ff ffdc 	bl	80009b8 <lora_is_transmitting>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8000a06:	2305      	movs	r3, #5
 8000a08:	e02a      	b.n	8000a60 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f7ff fe2a 	bl	8000666 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f000 f83a 	bl	8000a8c <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	7d1b      	ldrb	r3, [r3, #20]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	210d      	movs	r1, #13
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	f7ff fdaa 	bl	800057a <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	7d1b      	ldrb	r3, [r3, #20]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	210e      	movs	r1, #14
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f7ff fda3 	bl	800057a <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	461a      	mov	r2, r3
 8000a38:	2122      	movs	r1, #34	; 0x22
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f7ff fd9d 	bl	800057a <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	79fa      	ldrb	r2, [r7, #7]
 8000a44:	68b9      	ldr	r1, [r7, #8]
 8000a46:	68f8      	ldr	r0, [r7, #12]
 8000a48:	f7ff fdcb 	bl	80005e2 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8000a4c:	79bb      	ldrb	r3, [r7, #6]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d101      	bne.n	8000a56 <lora_send_packet_base+0x72>
    return LORA_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e004      	b.n	8000a60 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8000a56:	2103      	movs	r1, #3
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f7ff fe04 	bl	8000666 <set_mode>
  return LORA_OK;
 8000a5e:	2300      	movs	r3, #0
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	4613      	mov	r3, r2
 8000a74:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8000a76:	79fa      	ldrb	r2, [r7, #7]
 8000a78:	2302      	movs	r3, #2
 8000a7a:	68b9      	ldr	r1, [r7, #8]
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f7ff ffb1 	bl	80009e4 <lora_send_packet_base>
 8000a82:	4603      	mov	r3, r0
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8000a94:	2208      	movs	r2, #8
 8000a96:	2112      	movs	r1, #18
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff fd6e 	bl	800057a <write_register>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	60f8      	str	r0, [r7, #12]
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	887a      	ldrh	r2, [r7, #2]
 8000ac4:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000ac6:	6a3a      	ldr	r2, [r7, #32]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2201      	movs	r2, #1
 8000ad0:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2200      	movs	r2, #0
 8000adc:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ae4:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f7ff ff59 	bl	800099e <lora_version>
 8000aec:	4603      	mov	r3, r0
 8000aee:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8000af0:	7dfb      	ldrb	r3, [r7, #23]
 8000af2:	2b12      	cmp	r3, #18
 8000af4:	d001      	beq.n	8000afa <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8000af6:	2304      	movs	r3, #4
 8000af8:	e031      	b.n	8000b5e <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f7ff fe2c 	bl	8000758 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f7ff fe29 	bl	8000758 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000b06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f7ff fea0 	bl	8000850 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000b10:	2107      	movs	r1, #7
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	f7ff fee2 	bl	80008dc <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000b18:	210a      	movs	r1, #10
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff ff22 	bl	8000964 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000b20:	68f8      	ldr	r0, [r7, #12]
 8000b22:	f7ff fe31 	bl	8000788 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000b26:	210c      	movs	r1, #12
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	f7ff fcef 	bl	800050c <read_register>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000b32:	7dbb      	ldrb	r3, [r7, #22]
 8000b34:	f043 0303 	orr.w	r3, r3, #3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	210c      	movs	r1, #12
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f7ff fd1b 	bl	800057a <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000b44:	2204      	movs	r2, #4
 8000b46:	2126      	movs	r1, #38	; 0x26
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f7ff fd16 	bl	800057a <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000b4e:	2111      	movs	r1, #17
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff fe31 	bl	80007b8 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f7ff fe0a 	bl	8000770 <lora_mode_standby>

  return LORA_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b0ca      	sub	sp, #296	; 0x128
 8000b6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6e:	f000 fb5b 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b72:	f000 f89f 	bl	8000cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b76:	f000 f969 	bl	8000e4c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b7a:	f000 f907 	bl	8000d8c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b7e:	f000 f93b 	bl	8000df8 <MX_USART2_UART_Init>

//  for(uint16_t i = 0; i < 1024; i++){
//	  send_data[i] = i%256;
// }

  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2120      	movs	r1, #32
 8000b86:	4844      	ldr	r0, [pc, #272]	; (8000c98 <main+0x130>)
 8000b88:	f000 ff10 	bl	80019ac <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000b8c:	2064      	movs	r0, #100	; 0x64
 8000b8e:	f000 fbbd 	bl	800130c <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2120      	movs	r1, #32
 8000b96:	4840      	ldr	r0, [pc, #256]	; (8000c98 <main+0x130>)
 8000b98:	f000 ff08 	bl	80019ac <HAL_GPIO_WritePin>
  lora_sx1276 lora;
  uint8_t version =  lora_version(&lora); //this line hard faults
 8000b9c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fefc 	bl	800099e <lora_version>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d

  uint8_t res = lora_init(&lora, &hspi1, NSS_GPIO_Port, NSS_Pin, LORA_BASE_FREQUENCY_US);
 8000bac:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8000bb0:	a337      	add	r3, pc, #220	; (adr r3, 8000c90 <main+0x128>)
 8000bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb6:	e9cd 2300 	strd	r2, r3, [sp]
 8000bba:	2301      	movs	r3, #1
 8000bbc:	4a37      	ldr	r2, [pc, #220]	; (8000c9c <main+0x134>)
 8000bbe:	4938      	ldr	r1, [pc, #224]	; (8000ca0 <main+0x138>)
 8000bc0:	f7ff ff71 	bl	8000aa6 <lora_init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
    if (res != LORA_OK) {
 8000bca:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d009      	beq.n	8000be6 <main+0x7e>
      // Initialization failed
    	HAL_UART_Transmit(&huart2, res, sizeof(res), 1000);
 8000bd2:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4831      	ldr	r0, [pc, #196]	; (8000ca4 <main+0x13c>)
 8000be0:	f002 fc55 	bl	800348e <HAL_UART_Transmit>
 8000be4:	e006      	b.n	8000bf4 <main+0x8c>
    }
    else{
    	HAL_UART_Transmit(&huart2, success, sizeof(success), 1000);
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	2217      	movs	r2, #23
 8000bec:	492e      	ldr	r1, [pc, #184]	; (8000ca8 <main+0x140>)
 8000bee:	482d      	ldr	r0, [pc, #180]	; (8000ca4 <main+0x13c>)
 8000bf0:	f002 fc4d 	bl	800348e <HAL_UART_Transmit>
    }
//
    uint8_t test_data[255];
    for(uint8_t n = 0; n < 255; n++){
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8000bfa:	e016      	b.n	8000c2a <main+0xc2>
    	test_data[n] = n%255;
 8000bfc:	f897 011f 	ldrb.w	r0, [r7, #287]	; 0x11f
 8000c00:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8000c04:	4b29      	ldr	r3, [pc, #164]	; (8000cac <main+0x144>)
 8000c06:	fba3 1302 	umull	r1, r3, r3, r2
 8000c0a:	09d9      	lsrs	r1, r3, #7
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c1e:	541a      	strb	r2, [r3, r0]
    for(uint8_t n = 0; n < 255; n++){
 8000c20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000c24:	3301      	adds	r3, #1
 8000c26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8000c2a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000c2e:	2bff      	cmp	r3, #255	; 0xff
 8000c30:	d1e4      	bne.n	8000bfc <main+0x94>
    }

    uint8_t loop = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    uint8_t packet_test;
//    for(uint8_t i = 0; i < 4; i++){
    while (loop < 4) {
 8000c38:	e025      	b.n	8000c86 <main+0x11e>
    	 packet_test = lora_send_packet(&lora, test_data, 255);
 8000c3a:	4639      	mov	r1, r7
 8000c3c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000c40:	22ff      	movs	r2, #255	; 0xff
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff10 	bl	8000a68 <lora_send_packet>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
		 if (packet_test != LORA_OK) {
 8000c4e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d007      	beq.n	8000c66 <main+0xfe>
			  HAL_UART_Transmit(&huart2, failed, sizeof(failed), 1000);
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	2216      	movs	r2, #22
 8000c5c:	4914      	ldr	r1, [pc, #80]	; (8000cb0 <main+0x148>)
 8000c5e:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <main+0x13c>)
 8000c60:	f002 fc15 	bl	800348e <HAL_UART_Transmit>
 8000c64:	e006      	b.n	8000c74 <main+0x10c>
		  } else {
			  HAL_UART_Transmit(&huart2, success, sizeof(success), 1000);
 8000c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6a:	2217      	movs	r2, #23
 8000c6c:	490e      	ldr	r1, [pc, #56]	; (8000ca8 <main+0x140>)
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <main+0x13c>)
 8000c70:	f002 fc0d 	bl	800348e <HAL_UART_Transmit>
		  }
		 HAL_Delay(1000);
 8000c74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c78:	f000 fb48 	bl	800130c <HAL_Delay>
		 loop = loop + 1;
 8000c7c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000c80:	3301      	adds	r3, #1
 8000c82:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    while (loop < 4) {
 8000c86:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d9d5      	bls.n	8000c3a <main+0xd2>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <main+0x126>
 8000c90:	3689cac0 	.word	0x3689cac0
 8000c94:	00000000 	.word	0x00000000
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	40020400 	.word	0x40020400
 8000ca0:	20000058 	.word	0x20000058
 8000ca4:	200000b0 	.word	0x200000b0
 8000ca8:	20000018 	.word	0x20000018
 8000cac:	80808081 	.word	0x80808081
 8000cb0:	20000000 	.word	0x20000000

08000cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b094      	sub	sp, #80	; 0x50
 8000cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	2234      	movs	r2, #52	; 0x34
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 ff7c 	bl	8003bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd8:	2300      	movs	r3, #0
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <SystemClock_Config+0xd0>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	4a28      	ldr	r2, [pc, #160]	; (8000d84 <SystemClock_Config+0xd0>)
 8000ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce8:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <SystemClock_Config+0xd0>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <SystemClock_Config+0xd4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d00:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <SystemClock_Config+0xd4>)
 8000d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <SystemClock_Config+0xd4>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000d2c:	2348      	movs	r3, #72	; 0x48
 8000d2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d30:	2302      	movs	r3, #2
 8000d32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 f9bb 	bl	80020bc <HAL_RCC_OscConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d4c:	f000 f934 	bl	8000fb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d50:	230f      	movs	r3, #15
 8000d52:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d54:	2302      	movs	r3, #2
 8000d56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fe5b 	bl	8001a28 <HAL_RCC_ClockConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000d78:	f000 f91e 	bl	8000fb8 <Error_Handler>
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3750      	adds	r7, #80	; 0x50
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40007000 	.word	0x40007000

08000d8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000d92:	4a18      	ldr	r2, [pc, #96]	; (8000df4 <MX_SPI1_Init+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000d98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000dc0:	2238      	movs	r2, #56	; 0x38
 8000dc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000dd8:	220a      	movs	r2, #10
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_SPI1_Init+0x64>)
 8000dde:	f001 fc0b 	bl	80025f8 <HAL_SPI_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000de8:	f000 f8e6 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000058 	.word	0x20000058
 8000df4:	40013000 	.word	0x40013000

08000df8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <MX_USART2_UART_Init+0x50>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000e30:	f002 fae0 	bl	80033f4 <HAL_UART_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e3a:	f000 f8bd 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200000b0 	.word	0x200000b0
 8000e48:	40004400 	.word	0x40004400

08000e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b50      	ldr	r3, [pc, #320]	; (8000fa8 <MX_GPIO_Init+0x15c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a4f      	ldr	r2, [pc, #316]	; (8000fa8 <MX_GPIO_Init+0x15c>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b4d      	ldr	r3, [pc, #308]	; (8000fa8 <MX_GPIO_Init+0x15c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b49      	ldr	r3, [pc, #292]	; (8000fa8 <MX_GPIO_Init+0x15c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a48      	ldr	r2, [pc, #288]	; (8000fa8 <MX_GPIO_Init+0x15c>)
 8000e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b46      	ldr	r3, [pc, #280]	; (8000fa8 <MX_GPIO_Init+0x15c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b42      	ldr	r3, [pc, #264]	; (8000fa8 <MX_GPIO_Init+0x15c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a41      	ldr	r2, [pc, #260]	; (8000fa8 <MX_GPIO_Init+0x15c>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <MX_GPIO_Init+0x15c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <MX_GPIO_Init+0x15c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a3a      	ldr	r2, [pc, #232]	; (8000fa8 <MX_GPIO_Init+0x15c>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <MX_GPIO_Init+0x15c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2110      	movs	r1, #16
 8000ed6:	4835      	ldr	r0, [pc, #212]	; (8000fac <MX_GPIO_Init+0x160>)
 8000ed8:	f000 fd68 	bl	80019ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2120      	movs	r1, #32
 8000ee0:	4833      	ldr	r0, [pc, #204]	; (8000fb0 <MX_GPIO_Init+0x164>)
 8000ee2:	f000 fd63 	bl	80019ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|LED_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f244 0101 	movw	r1, #16385	; 0x4001
 8000eec:	4831      	ldr	r0, [pc, #196]	; (8000fb4 <MX_GPIO_Init+0x168>)
 8000eee:	f000 fd5d 	bl	80019ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TX_Pin */
  GPIO_InitStruct.Pin = TX_Pin;
 8000ef2:	2310      	movs	r3, #16
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4828      	ldr	r0, [pc, #160]	; (8000fac <MX_GPIO_Init+0x160>)
 8000f0a:	f000 fbbb 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000f0e:	2320      	movs	r3, #32
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	4822      	ldr	r0, [pc, #136]	; (8000fb0 <MX_GPIO_Init+0x164>)
 8000f26:	f000 fbad 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin LED_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|LED_Pin;
 8000f2a:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	481c      	ldr	r0, [pc, #112]	; (8000fb4 <MX_GPIO_Init+0x168>)
 8000f44:	f000 fb9e 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin;
 8000f48:	f240 4302 	movw	r3, #1026	; 0x402
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4815      	ldr	r0, [pc, #84]	; (8000fb4 <MX_GPIO_Init+0x168>)
 8000f60:	f000 fb90 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO2_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin;
 8000f64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO2_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <MX_GPIO_Init+0x160>)
 8000f7c:	f000 fb82 	bl	8001684 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	2007      	movs	r0, #7
 8000f86:	f000 fac0 	bl	800150a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f8a:	2007      	movs	r0, #7
 8000f8c:	f000 fad9 	bl	8001542 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	2028      	movs	r0, #40	; 0x28
 8000f96:	f000 fab8 	bl	800150a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f9a:	2028      	movs	r0, #40	; 0x28
 8000f9c:	f000 fad1 	bl	8001542 <HAL_NVIC_EnableIRQ>

}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	; 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020400 	.word	0x40020400

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <Error_Handler+0x8>
	...

08000fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <HAL_MspInit+0x4c>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <HAL_MspInit+0x4c>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <HAL_MspInit+0x4c>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_MspInit+0x4c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_MspInit+0x4c>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_MspInit+0x4c>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800

08001014 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a19      	ldr	r2, [pc, #100]	; (8001098 <HAL_SPI_MspInit+0x84>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d12b      	bne.n	800108e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_SPI_MspInit+0x88>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <HAL_SPI_MspInit+0x88>)
 8001040:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001044:	6453      	str	r3, [r2, #68]	; 0x44
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_SPI_MspInit+0x88>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_SPI_MspInit+0x88>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <HAL_SPI_MspInit+0x88>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_SPI_MspInit+0x88>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800106e:	23e0      	movs	r3, #224	; 0xe0
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800107e:	2305      	movs	r3, #5
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_SPI_MspInit+0x8c>)
 800108a:	f000 fafb 	bl	8001684 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40013000 	.word	0x40013000
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020000 	.word	0x40020000

080010a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a19      	ldr	r2, [pc, #100]	; (8001128 <HAL_UART_MspInit+0x84>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d12b      	bne.n	800111e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_UART_MspInit+0x88>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_UART_MspInit+0x88>)
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_UART_MspInit+0x88>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_UART_MspInit+0x88>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <HAL_UART_MspInit+0x88>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_UART_MspInit+0x88>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010fe:	230c      	movs	r3, #12
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800110e:	2307      	movs	r3, #7
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <HAL_UART_MspInit+0x8c>)
 800111a:	f000 fab3 	bl	8001684 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40004400 	.word	0x40004400
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <NMI_Handler+0x4>

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001180:	f000 f8a4 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 800118c:	2002      	movs	r0, #2
 800118e:	f000 fc27 	bl	80019e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}

08001196 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 800119a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800119e:	f000 fc1f 	bl	80019e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO2_Pin);
 80011a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011a6:	f000 fc1b 	bl	80019e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <SystemInit+0x20>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <SystemInit+0x20>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800120c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011da:	490e      	ldr	r1, [pc, #56]	; (8001214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f0:	4c0b      	ldr	r4, [pc, #44]	; (8001220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011fe:	f7ff ffd7 	bl	80011b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f002 fcb9 	bl	8003b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff fcaf 	bl	8000b68 <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001218:	08003c10 	.word	0x08003c10
  ldr r2, =_sbss
 800121c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001220:	200000f8 	.word	0x200000f8

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <HAL_Init+0x40>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <HAL_Init+0x40>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_Init+0x40>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f94f 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	200f      	movs	r0, #15
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff feb2 	bl	8000fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f967 	bl	800155e <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f000 f92f 	bl	800150a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000030 	.word	0x20000030
 80012c4:	20000038 	.word	0x20000038
 80012c8:	20000034 	.word	0x20000034

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000038 	.word	0x20000038
 80012f0:	200000f4 	.word	0x200000f4

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200000f4 	.word	0x200000f4

0800130c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff ffee 	bl	80012f4 <HAL_GetTick>
 8001318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001324:	d005      	beq.n	8001332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_Delay+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001332:	bf00      	nop
 8001334:	f7ff ffde 	bl	80012f4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f7      	bhi.n	8001334 <HAL_Delay+0x28>
  {
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000038 	.word	0x20000038

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c0:	d301      	bcc.n	80014c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00f      	b.n	80014e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <SysTick_Config+0x40>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ce:	210f      	movs	r1, #15
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f7ff ff8e 	bl	80013f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <SysTick_Config+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SysTick_Config+0x40>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff29 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800151c:	f7ff ff3e 	bl	800139c <__NVIC_GetPriorityGrouping>
 8001520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff ff8e 	bl	8001448 <NVIC_EncodePriority>
 800152c:	4602      	mov	r2, r0
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff5d 	bl	80013f4 <__NVIC_SetPriority>
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff31 	bl	80013b8 <__NVIC_EnableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffa2 	bl	80014b0 <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_DMA_Start_IT+0x26>
 8001598:	2302      	movs	r3, #2
 800159a:	e040      	b.n	800161e <HAL_DMA_Start_IT+0xa8>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d12f      	bne.n	8001610 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2202      	movs	r2, #2
 80015b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	68b9      	ldr	r1, [r7, #8]
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f000 f82e 	bl	8001626 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ce:	223f      	movs	r2, #63	; 0x3f
 80015d0:	409a      	lsls	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0216 	orr.w	r2, r2, #22
 80015e4:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d007      	beq.n	80015fe <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 0208 	orr.w	r2, r2, #8
 80015fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f042 0201 	orr.w	r2, r2, #1
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	e005      	b.n	800161c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001618:	2302      	movs	r3, #2
 800161a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800161c:	7dfb      	ldrb	r3, [r7, #23]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001626:	b480      	push	{r7}
 8001628:	b085      	sub	sp, #20
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001642:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b40      	cmp	r3, #64	; 0x40
 8001652:	d108      	bne.n	8001666 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001664:	e007      	b.n	8001676 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	60da      	str	r2, [r3, #12]
}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
 800169e:	e165      	b.n	800196c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016a0:	2201      	movs	r2, #1
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	f040 8154 	bne.w	8001966 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d005      	beq.n	80016d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d130      	bne.n	8001738 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	2203      	movs	r2, #3
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800170c:	2201      	movs	r2, #1
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	f003 0201 	and.w	r2, r3, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b03      	cmp	r3, #3
 8001742:	d017      	beq.n	8001774 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d123      	bne.n	80017c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	08da      	lsrs	r2, r3, #3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3208      	adds	r2, #8
 8001788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	220f      	movs	r2, #15
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	08da      	lsrs	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3208      	adds	r2, #8
 80017c2:	69b9      	ldr	r1, [r7, #24]
 80017c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0203 	and.w	r2, r3, #3
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 80ae 	beq.w	8001966 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b5d      	ldr	r3, [pc, #372]	; (8001984 <HAL_GPIO_Init+0x300>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4a5c      	ldr	r2, [pc, #368]	; (8001984 <HAL_GPIO_Init+0x300>)
 8001814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001818:	6453      	str	r3, [r2, #68]	; 0x44
 800181a:	4b5a      	ldr	r3, [pc, #360]	; (8001984 <HAL_GPIO_Init+0x300>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001826:	4a58      	ldr	r2, [pc, #352]	; (8001988 <HAL_GPIO_Init+0x304>)
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	089b      	lsrs	r3, r3, #2
 800182c:	3302      	adds	r3, #2
 800182e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	220f      	movs	r2, #15
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4f      	ldr	r2, [pc, #316]	; (800198c <HAL_GPIO_Init+0x308>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d025      	beq.n	800189e <HAL_GPIO_Init+0x21a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4e      	ldr	r2, [pc, #312]	; (8001990 <HAL_GPIO_Init+0x30c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d01f      	beq.n	800189a <HAL_GPIO_Init+0x216>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4d      	ldr	r2, [pc, #308]	; (8001994 <HAL_GPIO_Init+0x310>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d019      	beq.n	8001896 <HAL_GPIO_Init+0x212>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4c      	ldr	r2, [pc, #304]	; (8001998 <HAL_GPIO_Init+0x314>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0x20e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4b      	ldr	r2, [pc, #300]	; (800199c <HAL_GPIO_Init+0x318>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00d      	beq.n	800188e <HAL_GPIO_Init+0x20a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4a      	ldr	r2, [pc, #296]	; (80019a0 <HAL_GPIO_Init+0x31c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d007      	beq.n	800188a <HAL_GPIO_Init+0x206>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a49      	ldr	r2, [pc, #292]	; (80019a4 <HAL_GPIO_Init+0x320>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d101      	bne.n	8001886 <HAL_GPIO_Init+0x202>
 8001882:	2306      	movs	r3, #6
 8001884:	e00c      	b.n	80018a0 <HAL_GPIO_Init+0x21c>
 8001886:	2307      	movs	r3, #7
 8001888:	e00a      	b.n	80018a0 <HAL_GPIO_Init+0x21c>
 800188a:	2305      	movs	r3, #5
 800188c:	e008      	b.n	80018a0 <HAL_GPIO_Init+0x21c>
 800188e:	2304      	movs	r3, #4
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x21c>
 8001892:	2303      	movs	r3, #3
 8001894:	e004      	b.n	80018a0 <HAL_GPIO_Init+0x21c>
 8001896:	2302      	movs	r3, #2
 8001898:	e002      	b.n	80018a0 <HAL_GPIO_Init+0x21c>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_Init+0x21c>
 800189e:	2300      	movs	r3, #0
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	f002 0203 	and.w	r2, r2, #3
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	4093      	lsls	r3, r2
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b0:	4935      	ldr	r1, [pc, #212]	; (8001988 <HAL_GPIO_Init+0x304>)
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018be:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <HAL_GPIO_Init+0x324>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018e2:	4a31      	ldr	r2, [pc, #196]	; (80019a8 <HAL_GPIO_Init+0x324>)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018e8:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <HAL_GPIO_Init+0x324>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800190c:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <HAL_GPIO_Init+0x324>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <HAL_GPIO_Init+0x324>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001936:	4a1c      	ldr	r2, [pc, #112]	; (80019a8 <HAL_GPIO_Init+0x324>)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <HAL_GPIO_Init+0x324>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001960:	4a11      	ldr	r2, [pc, #68]	; (80019a8 <HAL_GPIO_Init+0x324>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3301      	adds	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b0f      	cmp	r3, #15
 8001970:	f67f ae96 	bls.w	80016a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3724      	adds	r7, #36	; 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40013800 	.word	0x40013800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400
 8001994:	40020800 	.word	0x40020800
 8001998:	40020c00 	.word	0x40020c00
 800199c:	40021000 	.word	0x40021000
 80019a0:	40021400 	.word	0x40021400
 80019a4:	40021800 	.word	0x40021800
 80019a8:	40013c00 	.word	0x40013c00

080019ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
 80019b8:	4613      	mov	r3, r2
 80019ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019bc:	787b      	ldrb	r3, [r7, #1]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c2:	887a      	ldrh	r2, [r7, #2]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019c8:	e003      	b.n	80019d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ca:	887b      	ldrh	r3, [r7, #2]
 80019cc:	041a      	lsls	r2, r3, #16
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	619a      	str	r2, [r3, #24]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f806 	bl	8001a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40013c00 	.word	0x40013c00

08001a10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0cc      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b68      	ldr	r3, [pc, #416]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d90c      	bls.n	8001a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b65      	ldr	r3, [pc, #404]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b63      	ldr	r3, [pc, #396]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0b8      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d020      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a7c:	4b59      	ldr	r3, [pc, #356]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a58      	ldr	r2, [pc, #352]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a94:	4b53      	ldr	r3, [pc, #332]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4a52      	ldr	r2, [pc, #328]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa0:	4b50      	ldr	r3, [pc, #320]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	494d      	ldr	r1, [pc, #308]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d044      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d119      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e07f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d109      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e06f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e067      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b06:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f023 0203 	bic.w	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4934      	ldr	r1, [pc, #208]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b18:	f7ff fbec 	bl	80012f4 <HAL_GetTick>
 8001b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b20:	f7ff fbe8 	bl	80012f4 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e04f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 020c 	and.w	r2, r3, #12
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d1eb      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b48:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d20c      	bcs.n	8001b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e032      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	4916      	ldr	r1, [pc, #88]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d009      	beq.n	8001bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	490e      	ldr	r1, [pc, #56]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bae:	f000 f855 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	490a      	ldr	r1, [pc, #40]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	5ccb      	ldrb	r3, [r1, r3]
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	4a09      	ldr	r2, [pc, #36]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fb4c 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023c00 	.word	0x40023c00
 8001be4:	40023800 	.word	0x40023800
 8001be8:	08003be8 	.word	0x08003be8
 8001bec:	20000030 	.word	0x20000030
 8001bf0:	20000034 	.word	0x20000034

08001bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000030 	.word	0x20000030

08001c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c10:	f7ff fff0 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	0a9b      	lsrs	r3, r3, #10
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4903      	ldr	r1, [pc, #12]	; (8001c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	08003bf8 	.word	0x08003bf8

08001c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c38:	f7ff ffdc 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	0b5b      	lsrs	r3, r3, #13
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4903      	ldr	r1, [pc, #12]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	08003bf8 	.word	0x08003bf8

08001c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c60:	b0ae      	sub	sp, #184	; 0xb8
 8001c62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c82:	4bcb      	ldr	r3, [pc, #812]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	f200 8206 	bhi.w	800209c <HAL_RCC_GetSysClockFreq+0x440>
 8001c90:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c96:	bf00      	nop
 8001c98:	08001ccd 	.word	0x08001ccd
 8001c9c:	0800209d 	.word	0x0800209d
 8001ca0:	0800209d 	.word	0x0800209d
 8001ca4:	0800209d 	.word	0x0800209d
 8001ca8:	08001cd5 	.word	0x08001cd5
 8001cac:	0800209d 	.word	0x0800209d
 8001cb0:	0800209d 	.word	0x0800209d
 8001cb4:	0800209d 	.word	0x0800209d
 8001cb8:	08001cdd 	.word	0x08001cdd
 8001cbc:	0800209d 	.word	0x0800209d
 8001cc0:	0800209d 	.word	0x0800209d
 8001cc4:	0800209d 	.word	0x0800209d
 8001cc8:	08001ecd 	.word	0x08001ecd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ccc:	4bb9      	ldr	r3, [pc, #740]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001cd2:	e1e7      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cd4:	4bb8      	ldr	r3, [pc, #736]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cda:	e1e3      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cdc:	4bb4      	ldr	r3, [pc, #720]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ce8:	4bb1      	ldr	r3, [pc, #708]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d071      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf4:	4bae      	ldr	r3, [pc, #696]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	099b      	lsrs	r3, r3, #6
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d00:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	462b      	mov	r3, r5
 8001d1e:	f04f 0000 	mov.w	r0, #0
 8001d22:	f04f 0100 	mov.w	r1, #0
 8001d26:	0159      	lsls	r1, r3, #5
 8001d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d2c:	0150      	lsls	r0, r2, #5
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4621      	mov	r1, r4
 8001d34:	1a51      	subs	r1, r2, r1
 8001d36:	6439      	str	r1, [r7, #64]	; 0x40
 8001d38:	4629      	mov	r1, r5
 8001d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001d4c:	4649      	mov	r1, r9
 8001d4e:	018b      	lsls	r3, r1, #6
 8001d50:	4641      	mov	r1, r8
 8001d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d56:	4641      	mov	r1, r8
 8001d58:	018a      	lsls	r2, r1, #6
 8001d5a:	4641      	mov	r1, r8
 8001d5c:	1a51      	subs	r1, r2, r1
 8001d5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d60:	4649      	mov	r1, r9
 8001d62:	eb63 0301 	sbc.w	r3, r3, r1
 8001d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001d74:	4649      	mov	r1, r9
 8001d76:	00cb      	lsls	r3, r1, #3
 8001d78:	4641      	mov	r1, r8
 8001d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d7e:	4641      	mov	r1, r8
 8001d80:	00ca      	lsls	r2, r1, #3
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	4603      	mov	r3, r0
 8001d88:	4622      	mov	r2, r4
 8001d8a:	189b      	adds	r3, r3, r2
 8001d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d8e:	462b      	mov	r3, r5
 8001d90:	460a      	mov	r2, r1
 8001d92:	eb42 0303 	adc.w	r3, r2, r3
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001da4:	4629      	mov	r1, r5
 8001da6:	024b      	lsls	r3, r1, #9
 8001da8:	4621      	mov	r1, r4
 8001daa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dae:	4621      	mov	r1, r4
 8001db0:	024a      	lsls	r2, r1, #9
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001dc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001dc4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001dc8:	f7fe fa1e 	bl	8000208 <__aeabi_uldivmod>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001dd6:	e067      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd8:	4b75      	ldr	r3, [pc, #468]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	099b      	lsrs	r3, r3, #6
 8001dde:	2200      	movs	r2, #0
 8001de0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001de4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001de8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001df2:	2300      	movs	r3, #0
 8001df4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001df6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001dfa:	4622      	mov	r2, r4
 8001dfc:	462b      	mov	r3, r5
 8001dfe:	f04f 0000 	mov.w	r0, #0
 8001e02:	f04f 0100 	mov.w	r1, #0
 8001e06:	0159      	lsls	r1, r3, #5
 8001e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e0c:	0150      	lsls	r0, r2, #5
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4621      	mov	r1, r4
 8001e14:	1a51      	subs	r1, r2, r1
 8001e16:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e18:	4629      	mov	r1, r5
 8001e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001e2c:	4649      	mov	r1, r9
 8001e2e:	018b      	lsls	r3, r1, #6
 8001e30:	4641      	mov	r1, r8
 8001e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e36:	4641      	mov	r1, r8
 8001e38:	018a      	lsls	r2, r1, #6
 8001e3a:	4641      	mov	r1, r8
 8001e3c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e40:	4649      	mov	r1, r9
 8001e42:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e52:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e5a:	4692      	mov	sl, r2
 8001e5c:	469b      	mov	fp, r3
 8001e5e:	4623      	mov	r3, r4
 8001e60:	eb1a 0303 	adds.w	r3, sl, r3
 8001e64:	623b      	str	r3, [r7, #32]
 8001e66:	462b      	mov	r3, r5
 8001e68:	eb4b 0303 	adc.w	r3, fp, r3
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e7a:	4629      	mov	r1, r5
 8001e7c:	028b      	lsls	r3, r1, #10
 8001e7e:	4621      	mov	r1, r4
 8001e80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e84:	4621      	mov	r1, r4
 8001e86:	028a      	lsls	r2, r1, #10
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e90:	2200      	movs	r2, #0
 8001e92:	673b      	str	r3, [r7, #112]	; 0x70
 8001e94:	677a      	str	r2, [r7, #116]	; 0x74
 8001e96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001e9a:	f7fe f9b5 	bl	8000208 <__aeabi_uldivmod>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ea8:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	0c1b      	lsrs	r3, r3, #16
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001eba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ebe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001eca:	e0eb      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ecc:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ed8:	4b35      	ldr	r3, [pc, #212]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d06b      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee4:	4b32      	ldr	r3, [pc, #200]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	099b      	lsrs	r3, r3, #6
 8001eea:	2200      	movs	r2, #0
 8001eec:	66bb      	str	r3, [r7, #104]	; 0x68
 8001eee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef6:	663b      	str	r3, [r7, #96]	; 0x60
 8001ef8:	2300      	movs	r3, #0
 8001efa:	667b      	str	r3, [r7, #100]	; 0x64
 8001efc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f00:	4622      	mov	r2, r4
 8001f02:	462b      	mov	r3, r5
 8001f04:	f04f 0000 	mov.w	r0, #0
 8001f08:	f04f 0100 	mov.w	r1, #0
 8001f0c:	0159      	lsls	r1, r3, #5
 8001f0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f12:	0150      	lsls	r0, r2, #5
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4621      	mov	r1, r4
 8001f1a:	1a51      	subs	r1, r2, r1
 8001f1c:	61b9      	str	r1, [r7, #24]
 8001f1e:	4629      	mov	r1, r5
 8001f20:	eb63 0301 	sbc.w	r3, r3, r1
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f32:	4659      	mov	r1, fp
 8001f34:	018b      	lsls	r3, r1, #6
 8001f36:	4651      	mov	r1, sl
 8001f38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f3c:	4651      	mov	r1, sl
 8001f3e:	018a      	lsls	r2, r1, #6
 8001f40:	4651      	mov	r1, sl
 8001f42:	ebb2 0801 	subs.w	r8, r2, r1
 8001f46:	4659      	mov	r1, fp
 8001f48:	eb63 0901 	sbc.w	r9, r3, r1
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f60:	4690      	mov	r8, r2
 8001f62:	4699      	mov	r9, r3
 8001f64:	4623      	mov	r3, r4
 8001f66:	eb18 0303 	adds.w	r3, r8, r3
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	462b      	mov	r3, r5
 8001f6e:	eb49 0303 	adc.w	r3, r9, r3
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f80:	4629      	mov	r1, r5
 8001f82:	024b      	lsls	r3, r1, #9
 8001f84:	4621      	mov	r1, r4
 8001f86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	024a      	lsls	r2, r1, #9
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f96:	2200      	movs	r2, #0
 8001f98:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f9a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001f9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fa0:	f7fe f932 	bl	8000208 <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fae:	e065      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x420>
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	00f42400 	.word	0x00f42400
 8001fb8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fbc:	4b3d      	ldr	r3, [pc, #244]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	099b      	lsrs	r3, r3, #6
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fcc:	653b      	str	r3, [r7, #80]	; 0x50
 8001fce:	2300      	movs	r3, #0
 8001fd0:	657b      	str	r3, [r7, #84]	; 0x54
 8001fd2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001fd6:	4642      	mov	r2, r8
 8001fd8:	464b      	mov	r3, r9
 8001fda:	f04f 0000 	mov.w	r0, #0
 8001fde:	f04f 0100 	mov.w	r1, #0
 8001fe2:	0159      	lsls	r1, r3, #5
 8001fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fe8:	0150      	lsls	r0, r2, #5
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4641      	mov	r1, r8
 8001ff0:	1a51      	subs	r1, r2, r1
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	4649      	mov	r1, r9
 8001ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002008:	4659      	mov	r1, fp
 800200a:	018b      	lsls	r3, r1, #6
 800200c:	4651      	mov	r1, sl
 800200e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002012:	4651      	mov	r1, sl
 8002014:	018a      	lsls	r2, r1, #6
 8002016:	4651      	mov	r1, sl
 8002018:	1a54      	subs	r4, r2, r1
 800201a:	4659      	mov	r1, fp
 800201c:	eb63 0501 	sbc.w	r5, r3, r1
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	00eb      	lsls	r3, r5, #3
 800202a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800202e:	00e2      	lsls	r2, r4, #3
 8002030:	4614      	mov	r4, r2
 8002032:	461d      	mov	r5, r3
 8002034:	4643      	mov	r3, r8
 8002036:	18e3      	adds	r3, r4, r3
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	464b      	mov	r3, r9
 800203c:	eb45 0303 	adc.w	r3, r5, r3
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800204e:	4629      	mov	r1, r5
 8002050:	028b      	lsls	r3, r1, #10
 8002052:	4621      	mov	r1, r4
 8002054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002058:	4621      	mov	r1, r4
 800205a:	028a      	lsls	r2, r1, #10
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002064:	2200      	movs	r2, #0
 8002066:	64bb      	str	r3, [r7, #72]	; 0x48
 8002068:	64fa      	str	r2, [r7, #76]	; 0x4c
 800206a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800206e:	f7fe f8cb 	bl	8000208 <__aeabi_uldivmod>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4613      	mov	r3, r2
 8002078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	0f1b      	lsrs	r3, r3, #28
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800208a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800208e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800209a:	e003      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800209e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	37b8      	adds	r7, #184	; 0xb8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	00f42400 	.word	0x00f42400

080020bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e28d      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 8083 	beq.w	80021e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020dc:	4b94      	ldr	r3, [pc, #592]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d019      	beq.n	800211c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020e8:	4b91      	ldr	r3, [pc, #580]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020f4:	4b8e      	ldr	r3, [pc, #568]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002100:	d00c      	beq.n	800211c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002102:	4b8b      	ldr	r3, [pc, #556]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800210a:	2b0c      	cmp	r3, #12
 800210c:	d112      	bne.n	8002134 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800210e:	4b88      	ldr	r3, [pc, #544]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800211a:	d10b      	bne.n	8002134 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	4b84      	ldr	r3, [pc, #528]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d05b      	beq.n	80021e0 <HAL_RCC_OscConfig+0x124>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d157      	bne.n	80021e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e25a      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213c:	d106      	bne.n	800214c <HAL_RCC_OscConfig+0x90>
 800213e:	4b7c      	ldr	r3, [pc, #496]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7b      	ldr	r2, [pc, #492]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e01d      	b.n	8002188 <HAL_RCC_OscConfig+0xcc>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0xb4>
 8002156:	4b76      	ldr	r3, [pc, #472]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a75      	ldr	r2, [pc, #468]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 800215c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b73      	ldr	r3, [pc, #460]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a72      	ldr	r2, [pc, #456]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0xcc>
 8002170:	4b6f      	ldr	r3, [pc, #444]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a6e      	ldr	r2, [pc, #440]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b6c      	ldr	r3, [pc, #432]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a6b      	ldr	r2, [pc, #428]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d013      	beq.n	80021b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7ff f8b0 	bl	80012f4 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002198:	f7ff f8ac 	bl	80012f4 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e21f      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b61      	ldr	r3, [pc, #388]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0xdc>
 80021b6:	e014      	b.n	80021e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7ff f89c 	bl	80012f4 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c0:	f7ff f898 	bl	80012f4 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e20b      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d2:	4b57      	ldr	r3, [pc, #348]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x104>
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d06f      	beq.n	80022ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021ee:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d017      	beq.n	800222a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021fa:	4b4d      	ldr	r3, [pc, #308]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002202:	2b08      	cmp	r3, #8
 8002204:	d105      	bne.n	8002212 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002206:	4b4a      	ldr	r3, [pc, #296]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00b      	beq.n	800222a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d11c      	bne.n	8002258 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800221e:	4b44      	ldr	r3, [pc, #272]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d116      	bne.n	8002258 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	4b41      	ldr	r3, [pc, #260]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_RCC_OscConfig+0x186>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e1d3      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002242:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4937      	ldr	r1, [pc, #220]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	e03a      	b.n	80022ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d020      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002260:	4b34      	ldr	r3, [pc, #208]	; (8002334 <HAL_RCC_OscConfig+0x278>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002266:	f7ff f845 	bl	80012f4 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800226e:	f7ff f841 	bl	80012f4 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e1b4      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	4b28      	ldr	r3, [pc, #160]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4925      	ldr	r1, [pc, #148]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]
 80022a0:	e015      	b.n	80022ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <HAL_RCC_OscConfig+0x278>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7ff f824 	bl	80012f4 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b0:	f7ff f820 	bl	80012f4 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e193      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d036      	beq.n	8002348 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d016      	beq.n	8002310 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_RCC_OscConfig+0x27c>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e8:	f7ff f804 	bl	80012f4 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f0:	f7ff f800 	bl	80012f4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e173      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_OscConfig+0x274>)
 8002304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x234>
 800230e:	e01b      	b.n	8002348 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_RCC_OscConfig+0x27c>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002316:	f7fe ffed 	bl	80012f4 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800231c:	e00e      	b.n	800233c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800231e:	f7fe ffe9 	bl	80012f4 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d907      	bls.n	800233c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e15c      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
 8002330:	40023800 	.word	0x40023800
 8002334:	42470000 	.word	0x42470000
 8002338:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233c:	4b8a      	ldr	r3, [pc, #552]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 800233e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1ea      	bne.n	800231e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8097 	beq.w	8002484 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235a:	4b83      	ldr	r3, [pc, #524]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10f      	bne.n	8002386 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	4b7f      	ldr	r3, [pc, #508]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a7e      	ldr	r2, [pc, #504]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b7c      	ldr	r3, [pc, #496]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002382:	2301      	movs	r3, #1
 8002384:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002386:	4b79      	ldr	r3, [pc, #484]	; (800256c <HAL_RCC_OscConfig+0x4b0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d118      	bne.n	80023c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002392:	4b76      	ldr	r3, [pc, #472]	; (800256c <HAL_RCC_OscConfig+0x4b0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a75      	ldr	r2, [pc, #468]	; (800256c <HAL_RCC_OscConfig+0x4b0>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800239e:	f7fe ffa9 	bl	80012f4 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a6:	f7fe ffa5 	bl	80012f4 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e118      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b8:	4b6c      	ldr	r3, [pc, #432]	; (800256c <HAL_RCC_OscConfig+0x4b0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x31e>
 80023cc:	4b66      	ldr	r3, [pc, #408]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d0:	4a65      	ldr	r2, [pc, #404]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6713      	str	r3, [r2, #112]	; 0x70
 80023d8:	e01c      	b.n	8002414 <HAL_RCC_OscConfig+0x358>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b05      	cmp	r3, #5
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0x340>
 80023e2:	4b61      	ldr	r3, [pc, #388]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	4a60      	ldr	r2, [pc, #384]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	6713      	str	r3, [r2, #112]	; 0x70
 80023ee:	4b5e      	ldr	r3, [pc, #376]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	4a5d      	ldr	r2, [pc, #372]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6713      	str	r3, [r2, #112]	; 0x70
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0x358>
 80023fc:	4b5a      	ldr	r3, [pc, #360]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	4a59      	ldr	r2, [pc, #356]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 8002402:	f023 0301 	bic.w	r3, r3, #1
 8002406:	6713      	str	r3, [r2, #112]	; 0x70
 8002408:	4b57      	ldr	r3, [pc, #348]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 800240a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240c:	4a56      	ldr	r2, [pc, #344]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 800240e:	f023 0304 	bic.w	r3, r3, #4
 8002412:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d015      	beq.n	8002448 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241c:	f7fe ff6a 	bl	80012f4 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002422:	e00a      	b.n	800243a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002424:	f7fe ff66 	bl	80012f4 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e0d7      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243a:	4b4b      	ldr	r3, [pc, #300]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0ee      	beq.n	8002424 <HAL_RCC_OscConfig+0x368>
 8002446:	e014      	b.n	8002472 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002448:	f7fe ff54 	bl	80012f4 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244e:	e00a      	b.n	8002466 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002450:	f7fe ff50 	bl	80012f4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	; 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e0c1      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002466:	4b40      	ldr	r3, [pc, #256]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 8002468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1ee      	bne.n	8002450 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002472:	7dfb      	ldrb	r3, [r7, #23]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d105      	bne.n	8002484 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002478:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	4a3a      	ldr	r2, [pc, #232]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 800247e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002482:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80ad 	beq.w	80025e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800248e:	4b36      	ldr	r3, [pc, #216]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b08      	cmp	r3, #8
 8002498:	d060      	beq.n	800255c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d145      	bne.n	800252e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	4b33      	ldr	r3, [pc, #204]	; (8002570 <HAL_RCC_OscConfig+0x4b4>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe ff24 	bl	80012f4 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe ff20 	bl	80012f4 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e093      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c2:	4b29      	ldr	r3, [pc, #164]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69da      	ldr	r2, [r3, #28]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	019b      	lsls	r3, r3, #6
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	085b      	lsrs	r3, r3, #1
 80024e6:	3b01      	subs	r3, #1
 80024e8:	041b      	lsls	r3, r3, #16
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	061b      	lsls	r3, r3, #24
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	071b      	lsls	r3, r3, #28
 80024fa:	491b      	ldr	r1, [pc, #108]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <HAL_RCC_OscConfig+0x4b4>)
 8002502:	2201      	movs	r2, #1
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002506:	f7fe fef5 	bl	80012f4 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250e:	f7fe fef1 	bl	80012f4 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e064      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x452>
 800252c:	e05c      	b.n	80025e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_RCC_OscConfig+0x4b4>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe fede 	bl	80012f4 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253c:	f7fe feda 	bl	80012f4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e04d      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_RCC_OscConfig+0x4ac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x480>
 800255a:	e045      	b.n	80025e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d107      	bne.n	8002574 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e040      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
 8002568:	40023800 	.word	0x40023800
 800256c:	40007000 	.word	0x40007000
 8002570:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002574:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <HAL_RCC_OscConfig+0x538>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d030      	beq.n	80025e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d129      	bne.n	80025e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d122      	bne.n	80025e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025a4:	4013      	ands	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d119      	bne.n	80025e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	085b      	lsrs	r3, r3, #1
 80025bc:	3b01      	subs	r3, #1
 80025be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d10f      	bne.n	80025e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800

080025f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e07b      	b.n	8002702 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	2b00      	cmp	r3, #0
 8002610:	d108      	bne.n	8002624 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800261a:	d009      	beq.n	8002630 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
 8002622:	e005      	b.n	8002630 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe fce2 	bl	8001014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002666:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b4:	ea42 0103 	orr.w	r1, r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	f003 0104 	and.w	r1, r3, #4
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	f003 0210 	and.w	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b088      	sub	sp, #32
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	4613      	mov	r3, r2
 8002718:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_SPI_Transmit+0x22>
 8002728:	2302      	movs	r3, #2
 800272a:	e126      	b.n	800297a <HAL_SPI_Transmit+0x270>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002734:	f7fe fdde 	bl	80012f4 <HAL_GetTick>
 8002738:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b01      	cmp	r3, #1
 8002748:	d002      	beq.n	8002750 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800274a:	2302      	movs	r3, #2
 800274c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800274e:	e10b      	b.n	8002968 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_SPI_Transmit+0x52>
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002760:	e102      	b.n	8002968 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2203      	movs	r2, #3
 8002766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	88fa      	ldrh	r2, [r7, #6]
 800277a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	88fa      	ldrh	r2, [r7, #6]
 8002780:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027a8:	d10f      	bne.n	80027ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d4:	2b40      	cmp	r3, #64	; 0x40
 80027d6:	d007      	beq.n	80027e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027f0:	d14b      	bne.n	800288a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <HAL_SPI_Transmit+0xf6>
 80027fa:	8afb      	ldrh	r3, [r7, #22]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d13e      	bne.n	800287e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	881a      	ldrh	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	1c9a      	adds	r2, r3, #2
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002824:	e02b      	b.n	800287e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b02      	cmp	r3, #2
 8002832:	d112      	bne.n	800285a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	881a      	ldrh	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	1c9a      	adds	r2, r3, #2
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	86da      	strh	r2, [r3, #54]	; 0x36
 8002858:	e011      	b.n	800287e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800285a:	f7fe fd4b 	bl	80012f4 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d803      	bhi.n	8002872 <HAL_SPI_Transmit+0x168>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d102      	bne.n	8002878 <HAL_SPI_Transmit+0x16e>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d102      	bne.n	800287e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800287c:	e074      	b.n	8002968 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1ce      	bne.n	8002826 <HAL_SPI_Transmit+0x11c>
 8002888:	e04c      	b.n	8002924 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <HAL_SPI_Transmit+0x18e>
 8002892:	8afb      	ldrh	r3, [r7, #22]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d140      	bne.n	800291a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	330c      	adds	r3, #12
 80028a2:	7812      	ldrb	r2, [r2, #0]
 80028a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80028be:	e02c      	b.n	800291a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d113      	bne.n	80028f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80028f4:	e011      	b.n	800291a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028f6:	f7fe fcfd 	bl	80012f4 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d803      	bhi.n	800290e <HAL_SPI_Transmit+0x204>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d102      	bne.n	8002914 <HAL_SPI_Transmit+0x20a>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002918:	e026      	b.n	8002968 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800291e:	b29b      	uxth	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1cd      	bne.n	80028c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	6839      	ldr	r1, [r7, #0]
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 fd21 	bl	8003370 <SPI_EndRxTxTransaction>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10a      	bne.n	8002958 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	77fb      	strb	r3, [r7, #31]
 8002964:	e000      	b.n	8002968 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002966:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002978:	7ffb      	ldrb	r3, [r7, #31]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b088      	sub	sp, #32
 8002986:	af02      	add	r7, sp, #8
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	4613      	mov	r3, r2
 8002990:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800299e:	d112      	bne.n	80029c6 <HAL_SPI_Receive+0x44>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10e      	bne.n	80029c6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2204      	movs	r2, #4
 80029ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80029b0:	88fa      	ldrh	r2, [r7, #6]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	4613      	mov	r3, r2
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f8f1 	bl	8002ba4 <HAL_SPI_TransmitReceive>
 80029c2:	4603      	mov	r3, r0
 80029c4:	e0ea      	b.n	8002b9c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_SPI_Receive+0x52>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e0e3      	b.n	8002b9c <HAL_SPI_Receive+0x21a>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029dc:	f7fe fc8a 	bl	80012f4 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d002      	beq.n	80029f4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80029ee:	2302      	movs	r3, #2
 80029f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029f2:	e0ca      	b.n	8002b8a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_SPI_Receive+0x7e>
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a04:	e0c1      	b.n	8002b8a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2204      	movs	r2, #4
 8002a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	88fa      	ldrh	r2, [r7, #6]
 8002a1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	88fa      	ldrh	r2, [r7, #6]
 8002a24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a4c:	d10f      	bne.n	8002a6e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d007      	beq.n	8002a8c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d162      	bne.n	8002b5a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002a94:	e02e      	b.n	8002af4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d115      	bne.n	8002ad0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f103 020c 	add.w	r2, r3, #12
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	7812      	ldrb	r2, [r2, #0]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ace:	e011      	b.n	8002af4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ad0:	f7fe fc10 	bl	80012f4 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d803      	bhi.n	8002ae8 <HAL_SPI_Receive+0x166>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae6:	d102      	bne.n	8002aee <HAL_SPI_Receive+0x16c>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d102      	bne.n	8002af4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002af2:	e04a      	b.n	8002b8a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1cb      	bne.n	8002a96 <HAL_SPI_Receive+0x114>
 8002afe:	e031      	b.n	8002b64 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d113      	bne.n	8002b36 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	b292      	uxth	r2, r2
 8002b1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	1c9a      	adds	r2, r3, #2
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b34:	e011      	b.n	8002b5a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b36:	f7fe fbdd 	bl	80012f4 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d803      	bhi.n	8002b4e <HAL_SPI_Receive+0x1cc>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d102      	bne.n	8002b54 <HAL_SPI_Receive+0x1d2>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b58:	e017      	b.n	8002b8a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1cd      	bne.n	8002b00 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	6839      	ldr	r1, [r7, #0]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 fb9b 	bl	80032a4 <SPI_EndRxTransaction>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	75fb      	strb	r3, [r7, #23]
 8002b86:	e000      	b.n	8002b8a <HAL_SPI_Receive+0x208>
  }

error :
 8002b88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08c      	sub	sp, #48	; 0x30
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_SPI_TransmitReceive+0x26>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e18a      	b.n	8002ee0 <HAL_SPI_TransmitReceive+0x33c>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bd2:	f7fe fb8f 	bl	80012f4 <HAL_GetTick>
 8002bd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002be8:	887b      	ldrh	r3, [r7, #2]
 8002bea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d00f      	beq.n	8002c14 <HAL_SPI_TransmitReceive+0x70>
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bfa:	d107      	bne.n	8002c0c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d103      	bne.n	8002c0c <HAL_SPI_TransmitReceive+0x68>
 8002c04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d003      	beq.n	8002c14 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c12:	e15b      	b.n	8002ecc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_SPI_TransmitReceive+0x82>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_SPI_TransmitReceive+0x82>
 8002c20:	887b      	ldrh	r3, [r7, #2]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d103      	bne.n	8002c2e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c2c:	e14e      	b.n	8002ecc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d003      	beq.n	8002c42 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2205      	movs	r2, #5
 8002c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	887a      	ldrh	r2, [r7, #2]
 8002c52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	887a      	ldrh	r2, [r7, #2]
 8002c64:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	887a      	ldrh	r2, [r7, #2]
 8002c6a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c82:	2b40      	cmp	r3, #64	; 0x40
 8002c84:	d007      	beq.n	8002c96 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9e:	d178      	bne.n	8002d92 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <HAL_SPI_TransmitReceive+0x10a>
 8002ca8:	8b7b      	ldrh	r3, [r7, #26]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d166      	bne.n	8002d7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	881a      	ldrh	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	1c9a      	adds	r2, r3, #2
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cd2:	e053      	b.n	8002d7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d11b      	bne.n	8002d1a <HAL_SPI_TransmitReceive+0x176>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d016      	beq.n	8002d1a <HAL_SPI_TransmitReceive+0x176>
 8002cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d113      	bne.n	8002d1a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	881a      	ldrh	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	1c9a      	adds	r2, r3, #2
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d119      	bne.n	8002d5c <HAL_SPI_TransmitReceive+0x1b8>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d014      	beq.n	8002d5c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	b292      	uxth	r2, r2
 8002d3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	1c9a      	adds	r2, r3, #2
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d5c:	f7fe faca 	bl	80012f4 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d807      	bhi.n	8002d7c <HAL_SPI_TransmitReceive+0x1d8>
 8002d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d72:	d003      	beq.n	8002d7c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d7a:	e0a7      	b.n	8002ecc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1a6      	bne.n	8002cd4 <HAL_SPI_TransmitReceive+0x130>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1a1      	bne.n	8002cd4 <HAL_SPI_TransmitReceive+0x130>
 8002d90:	e07c      	b.n	8002e8c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_SPI_TransmitReceive+0x1fc>
 8002d9a:	8b7b      	ldrh	r3, [r7, #26]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d16b      	bne.n	8002e78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	330c      	adds	r3, #12
 8002daa:	7812      	ldrb	r2, [r2, #0]
 8002dac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dc6:	e057      	b.n	8002e78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d11c      	bne.n	8002e10 <HAL_SPI_TransmitReceive+0x26c>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d017      	beq.n	8002e10 <HAL_SPI_TransmitReceive+0x26c>
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d114      	bne.n	8002e10 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	330c      	adds	r3, #12
 8002df0:	7812      	ldrb	r2, [r2, #0]
 8002df2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d119      	bne.n	8002e52 <HAL_SPI_TransmitReceive+0x2ae>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d014      	beq.n	8002e52 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e52:	f7fe fa4f 	bl	80012f4 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d803      	bhi.n	8002e6a <HAL_SPI_TransmitReceive+0x2c6>
 8002e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d102      	bne.n	8002e70 <HAL_SPI_TransmitReceive+0x2cc>
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d103      	bne.n	8002e78 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e76:	e029      	b.n	8002ecc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1a2      	bne.n	8002dc8 <HAL_SPI_TransmitReceive+0x224>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d19d      	bne.n	8002dc8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 fa6d 	bl	8003370 <SPI_EndRxTxTransaction>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d006      	beq.n	8002eaa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ea8:	e010      	b.n	8002ecc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10b      	bne.n	8002eca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	e000      	b.n	8002ecc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002eca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002edc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3730      	adds	r7, #48	; 0x30
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_SPI_Transmit_DMA+0x20>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e09b      	b.n	8003040 <HAL_SPI_Transmit_DMA+0x158>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d002      	beq.n	8002f22 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f20:	e089      	b.n	8003036 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <HAL_SPI_Transmit_DMA+0x46>
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d102      	bne.n	8002f34 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f32:	e080      	b.n	8003036 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2203      	movs	r2, #3
 8002f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	88fa      	ldrh	r2, [r7, #6]
 8002f4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	88fa      	ldrh	r2, [r7, #6]
 8002f52:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f7a:	d10f      	bne.n	8002f9c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa0:	4a29      	ldr	r2, [pc, #164]	; (8003048 <HAL_SPI_Transmit_DMA+0x160>)
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa8:	4a28      	ldr	r2, [pc, #160]	; (800304c <HAL_SPI_Transmit_DMA+0x164>)
 8002faa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb0:	4a27      	ldr	r2, [pc, #156]	; (8003050 <HAL_SPI_Transmit_DMA+0x168>)
 8002fb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb8:	2200      	movs	r2, #0
 8002fba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	330c      	adds	r3, #12
 8002fcc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002fd4:	f7fe facf 	bl	8001576 <HAL_DMA_Start_IT>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00c      	beq.n	8002ff8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	f043 0210 	orr.w	r2, r3, #16
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002ff6:	e01e      	b.n	8003036 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	d007      	beq.n	8003016 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003014:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0220 	orr.w	r2, r2, #32
 8003024:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0202 	orr.w	r2, r2, #2
 8003034:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800303e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	08003139 	.word	0x08003139
 800304c:	08003091 	.word	0x08003091
 8003050:	08003155 	.word	0x08003155

08003054 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800309e:	f7fe f929 	bl	80012f4 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b2:	d03b      	beq.n	800312c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0220 	bic.w	r2, r2, #32
 80030c2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0202 	bic.w	r2, r2, #2
 80030d2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	2164      	movs	r1, #100	; 0x64
 80030d8:	6978      	ldr	r0, [r7, #20]
 80030da:	f000 f949 	bl	8003370 <SPI_EndRxTxTransaction>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10a      	bne.n	800310e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2200      	movs	r2, #0
 8003112:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003124:	6978      	ldr	r0, [r7, #20]
 8003126:	f7ff ffa9 	bl	800307c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800312a:	e002      	b.n	8003132 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800312c:	6978      	ldr	r0, [r7, #20]
 800312e:	f7ff ff91 	bl	8003054 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f7ff ff8e 	bl	8003068 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0203 	bic.w	r2, r2, #3
 8003170:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	f043 0210 	orr.w	r2, r3, #16
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f7ff ff78 	bl	800307c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800318c:	bf00      	nop
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031a4:	f7fe f8a6 	bl	80012f4 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	4413      	add	r3, r2
 80031b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031b4:	f7fe f89e 	bl	80012f4 <HAL_GetTick>
 80031b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031ba:	4b39      	ldr	r3, [pc, #228]	; (80032a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	015b      	lsls	r3, r3, #5
 80031c0:	0d1b      	lsrs	r3, r3, #20
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	fb02 f303 	mul.w	r3, r2, r3
 80031c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031ca:	e054      	b.n	8003276 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d2:	d050      	beq.n	8003276 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031d4:	f7fe f88e 	bl	80012f4 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d902      	bls.n	80031ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d13d      	bne.n	8003266 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003202:	d111      	bne.n	8003228 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800320c:	d004      	beq.n	8003218 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003216:	d107      	bne.n	8003228 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003230:	d10f      	bne.n	8003252 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e017      	b.n	8003296 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3b01      	subs	r3, #1
 8003274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4013      	ands	r3, r2
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	429a      	cmp	r2, r3
 8003284:	bf0c      	ite	eq
 8003286:	2301      	moveq	r3, #1
 8003288:	2300      	movne	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	429a      	cmp	r2, r3
 8003292:	d19b      	bne.n	80031cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000030 	.word	0x20000030

080032a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032b8:	d111      	bne.n	80032de <SPI_EndRxTransaction+0x3a>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c2:	d004      	beq.n	80032ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032cc:	d107      	bne.n	80032de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032dc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032e6:	d12a      	bne.n	800333e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f0:	d012      	beq.n	8003318 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2200      	movs	r2, #0
 80032fa:	2180      	movs	r1, #128	; 0x80
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f7ff ff49 	bl	8003194 <SPI_WaitFlagStateUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d02d      	beq.n	8003364 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e026      	b.n	8003366 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2200      	movs	r2, #0
 8003320:	2101      	movs	r1, #1
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff ff36 	bl	8003194 <SPI_WaitFlagStateUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d01a      	beq.n	8003364 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	f043 0220 	orr.w	r2, r3, #32
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e013      	b.n	8003366 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2200      	movs	r2, #0
 8003346:	2101      	movs	r1, #1
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7ff ff23 	bl	8003194 <SPI_WaitFlagStateUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003358:	f043 0220 	orr.w	r2, r3, #32
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e000      	b.n	8003366 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af02      	add	r7, sp, #8
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800337c:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <SPI_EndRxTxTransaction+0x7c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1b      	ldr	r2, [pc, #108]	; (80033f0 <SPI_EndRxTxTransaction+0x80>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	0d5b      	lsrs	r3, r3, #21
 8003388:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800338c:	fb02 f303 	mul.w	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800339a:	d112      	bne.n	80033c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2200      	movs	r2, #0
 80033a4:	2180      	movs	r1, #128	; 0x80
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f7ff fef4 	bl	8003194 <SPI_WaitFlagStateUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d016      	beq.n	80033e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	f043 0220 	orr.w	r2, r3, #32
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e00f      	b.n	80033e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d8:	2b80      	cmp	r3, #128	; 0x80
 80033da:	d0f2      	beq.n	80033c2 <SPI_EndRxTxTransaction+0x52>
 80033dc:	e000      	b.n	80033e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80033de:	bf00      	nop
  }

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000030 	.word	0x20000030
 80033f0:	165e9f81 	.word	0x165e9f81

080033f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e03f      	b.n	8003486 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fd fe42 	bl	80010a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2224      	movs	r2, #36	; 0x24
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003436:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f929 	bl	8003690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800344c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800345c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800346c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b08a      	sub	sp, #40	; 0x28
 8003492:	af02      	add	r7, sp, #8
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	603b      	str	r3, [r7, #0]
 800349a:	4613      	mov	r3, r2
 800349c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	d17c      	bne.n	80035a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_UART_Transmit+0x2c>
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e075      	b.n	80035aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_UART_Transmit+0x3e>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e06e      	b.n	80035aa <HAL_UART_Transmit+0x11c>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2221      	movs	r2, #33	; 0x21
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034e2:	f7fd ff07 	bl	80012f4 <HAL_GetTick>
 80034e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	88fa      	ldrh	r2, [r7, #6]
 80034ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	88fa      	ldrh	r2, [r7, #6]
 80034f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fc:	d108      	bne.n	8003510 <HAL_UART_Transmit+0x82>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d104      	bne.n	8003510 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	e003      	b.n	8003518 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003514:	2300      	movs	r3, #0
 8003516:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003520:	e02a      	b.n	8003578 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2200      	movs	r2, #0
 800352a:	2180      	movs	r1, #128	; 0x80
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f840 	bl	80035b2 <UART_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e036      	b.n	80035aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10b      	bne.n	800355a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003550:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	3302      	adds	r3, #2
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	e007      	b.n	800356a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	781a      	ldrb	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	3301      	adds	r3, #1
 8003568:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1cf      	bne.n	8003522 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2200      	movs	r2, #0
 800358a:	2140      	movs	r1, #64	; 0x40
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f810 	bl	80035b2 <UART_WaitOnFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e006      	b.n	80035aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	e000      	b.n	80035aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
  }
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b090      	sub	sp, #64	; 0x40
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	60f8      	str	r0, [r7, #12]
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	603b      	str	r3, [r7, #0]
 80035be:	4613      	mov	r3, r2
 80035c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c2:	e050      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ca:	d04c      	beq.n	8003666 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d007      	beq.n	80035e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80035d2:	f7fd fe8f 	bl	80012f4 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035de:	429a      	cmp	r2, r3
 80035e0:	d241      	bcs.n	8003666 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	330c      	adds	r3, #12
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	e853 3f00 	ldrex	r3, [r3]
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	330c      	adds	r3, #12
 8003600:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003602:	637a      	str	r2, [r7, #52]	; 0x34
 8003604:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003606:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800360a:	e841 2300 	strex	r3, r2, [r1]
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1e5      	bne.n	80035e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3314      	adds	r3, #20
 800361c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	e853 3f00 	ldrex	r3, [r3]
 8003624:	613b      	str	r3, [r7, #16]
   return(result);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	63bb      	str	r3, [r7, #56]	; 0x38
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3314      	adds	r3, #20
 8003634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003636:	623a      	str	r2, [r7, #32]
 8003638:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	69f9      	ldr	r1, [r7, #28]
 800363c:	6a3a      	ldr	r2, [r7, #32]
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	61bb      	str	r3, [r7, #24]
   return(result);
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e5      	bne.n	8003616 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e00f      	b.n	8003686 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4013      	ands	r3, r2
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	429a      	cmp	r2, r3
 8003674:	bf0c      	ite	eq
 8003676:	2301      	moveq	r3, #1
 8003678:	2300      	movne	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	429a      	cmp	r2, r3
 8003682:	d09f      	beq.n	80035c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3740      	adds	r7, #64	; 0x40
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003694:	b0c0      	sub	sp, #256	; 0x100
 8003696:	af00      	add	r7, sp, #0
 8003698:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ac:	68d9      	ldr	r1, [r3, #12]
 80036ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	ea40 0301 	orr.w	r3, r0, r1
 80036b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036e8:	f021 010c 	bic.w	r1, r1, #12
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036f6:	430b      	orrs	r3, r1
 80036f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370a:	6999      	ldr	r1, [r3, #24]
 800370c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	ea40 0301 	orr.w	r3, r0, r1
 8003716:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4b8f      	ldr	r3, [pc, #572]	; (800395c <UART_SetConfig+0x2cc>)
 8003720:	429a      	cmp	r2, r3
 8003722:	d005      	beq.n	8003730 <UART_SetConfig+0xa0>
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4b8d      	ldr	r3, [pc, #564]	; (8003960 <UART_SetConfig+0x2d0>)
 800372c:	429a      	cmp	r2, r3
 800372e:	d104      	bne.n	800373a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003730:	f7fe fa80 	bl	8001c34 <HAL_RCC_GetPCLK2Freq>
 8003734:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003738:	e003      	b.n	8003742 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800373a:	f7fe fa67 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 800373e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800374c:	f040 810c 	bne.w	8003968 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003754:	2200      	movs	r2, #0
 8003756:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800375a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800375e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003762:	4622      	mov	r2, r4
 8003764:	462b      	mov	r3, r5
 8003766:	1891      	adds	r1, r2, r2
 8003768:	65b9      	str	r1, [r7, #88]	; 0x58
 800376a:	415b      	adcs	r3, r3
 800376c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800376e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003772:	4621      	mov	r1, r4
 8003774:	eb12 0801 	adds.w	r8, r2, r1
 8003778:	4629      	mov	r1, r5
 800377a:	eb43 0901 	adc.w	r9, r3, r1
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800378a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800378e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003792:	4690      	mov	r8, r2
 8003794:	4699      	mov	r9, r3
 8003796:	4623      	mov	r3, r4
 8003798:	eb18 0303 	adds.w	r3, r8, r3
 800379c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037a0:	462b      	mov	r3, r5
 80037a2:	eb49 0303 	adc.w	r3, r9, r3
 80037a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037be:	460b      	mov	r3, r1
 80037c0:	18db      	adds	r3, r3, r3
 80037c2:	653b      	str	r3, [r7, #80]	; 0x50
 80037c4:	4613      	mov	r3, r2
 80037c6:	eb42 0303 	adc.w	r3, r2, r3
 80037ca:	657b      	str	r3, [r7, #84]	; 0x54
 80037cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037d4:	f7fc fd18 	bl	8000208 <__aeabi_uldivmod>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4b61      	ldr	r3, [pc, #388]	; (8003964 <UART_SetConfig+0x2d4>)
 80037de:	fba3 2302 	umull	r2, r3, r3, r2
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	011c      	lsls	r4, r3, #4
 80037e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ea:	2200      	movs	r2, #0
 80037ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037f8:	4642      	mov	r2, r8
 80037fa:	464b      	mov	r3, r9
 80037fc:	1891      	adds	r1, r2, r2
 80037fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003800:	415b      	adcs	r3, r3
 8003802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003804:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003808:	4641      	mov	r1, r8
 800380a:	eb12 0a01 	adds.w	sl, r2, r1
 800380e:	4649      	mov	r1, r9
 8003810:	eb43 0b01 	adc.w	fp, r3, r1
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003820:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003824:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003828:	4692      	mov	sl, r2
 800382a:	469b      	mov	fp, r3
 800382c:	4643      	mov	r3, r8
 800382e:	eb1a 0303 	adds.w	r3, sl, r3
 8003832:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003836:	464b      	mov	r3, r9
 8003838:	eb4b 0303 	adc.w	r3, fp, r3
 800383c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800384c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003850:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003854:	460b      	mov	r3, r1
 8003856:	18db      	adds	r3, r3, r3
 8003858:	643b      	str	r3, [r7, #64]	; 0x40
 800385a:	4613      	mov	r3, r2
 800385c:	eb42 0303 	adc.w	r3, r2, r3
 8003860:	647b      	str	r3, [r7, #68]	; 0x44
 8003862:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003866:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800386a:	f7fc fccd 	bl	8000208 <__aeabi_uldivmod>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4611      	mov	r1, r2
 8003874:	4b3b      	ldr	r3, [pc, #236]	; (8003964 <UART_SetConfig+0x2d4>)
 8003876:	fba3 2301 	umull	r2, r3, r3, r1
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	2264      	movs	r2, #100	; 0x64
 800387e:	fb02 f303 	mul.w	r3, r2, r3
 8003882:	1acb      	subs	r3, r1, r3
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800388a:	4b36      	ldr	r3, [pc, #216]	; (8003964 <UART_SetConfig+0x2d4>)
 800388c:	fba3 2302 	umull	r2, r3, r3, r2
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003898:	441c      	add	r4, r3
 800389a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800389e:	2200      	movs	r2, #0
 80038a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038ac:	4642      	mov	r2, r8
 80038ae:	464b      	mov	r3, r9
 80038b0:	1891      	adds	r1, r2, r2
 80038b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80038b4:	415b      	adcs	r3, r3
 80038b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038bc:	4641      	mov	r1, r8
 80038be:	1851      	adds	r1, r2, r1
 80038c0:	6339      	str	r1, [r7, #48]	; 0x30
 80038c2:	4649      	mov	r1, r9
 80038c4:	414b      	adcs	r3, r1
 80038c6:	637b      	str	r3, [r7, #52]	; 0x34
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038d4:	4659      	mov	r1, fp
 80038d6:	00cb      	lsls	r3, r1, #3
 80038d8:	4651      	mov	r1, sl
 80038da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038de:	4651      	mov	r1, sl
 80038e0:	00ca      	lsls	r2, r1, #3
 80038e2:	4610      	mov	r0, r2
 80038e4:	4619      	mov	r1, r3
 80038e6:	4603      	mov	r3, r0
 80038e8:	4642      	mov	r2, r8
 80038ea:	189b      	adds	r3, r3, r2
 80038ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038f0:	464b      	mov	r3, r9
 80038f2:	460a      	mov	r2, r1
 80038f4:	eb42 0303 	adc.w	r3, r2, r3
 80038f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003908:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800390c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003910:	460b      	mov	r3, r1
 8003912:	18db      	adds	r3, r3, r3
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
 8003916:	4613      	mov	r3, r2
 8003918:	eb42 0303 	adc.w	r3, r2, r3
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800391e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003922:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003926:	f7fc fc6f 	bl	8000208 <__aeabi_uldivmod>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <UART_SetConfig+0x2d4>)
 8003930:	fba3 1302 	umull	r1, r3, r3, r2
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	2164      	movs	r1, #100	; 0x64
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	3332      	adds	r3, #50	; 0x32
 8003942:	4a08      	ldr	r2, [pc, #32]	; (8003964 <UART_SetConfig+0x2d4>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	f003 0207 	and.w	r2, r3, #7
 800394e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4422      	add	r2, r4
 8003956:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003958:	e105      	b.n	8003b66 <UART_SetConfig+0x4d6>
 800395a:	bf00      	nop
 800395c:	40011000 	.word	0x40011000
 8003960:	40011400 	.word	0x40011400
 8003964:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800396c:	2200      	movs	r2, #0
 800396e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003972:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003976:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800397a:	4642      	mov	r2, r8
 800397c:	464b      	mov	r3, r9
 800397e:	1891      	adds	r1, r2, r2
 8003980:	6239      	str	r1, [r7, #32]
 8003982:	415b      	adcs	r3, r3
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
 8003986:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800398a:	4641      	mov	r1, r8
 800398c:	1854      	adds	r4, r2, r1
 800398e:	4649      	mov	r1, r9
 8003990:	eb43 0501 	adc.w	r5, r3, r1
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	00eb      	lsls	r3, r5, #3
 800399e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039a2:	00e2      	lsls	r2, r4, #3
 80039a4:	4614      	mov	r4, r2
 80039a6:	461d      	mov	r5, r3
 80039a8:	4643      	mov	r3, r8
 80039aa:	18e3      	adds	r3, r4, r3
 80039ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039b0:	464b      	mov	r3, r9
 80039b2:	eb45 0303 	adc.w	r3, r5, r3
 80039b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039d6:	4629      	mov	r1, r5
 80039d8:	008b      	lsls	r3, r1, #2
 80039da:	4621      	mov	r1, r4
 80039dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039e0:	4621      	mov	r1, r4
 80039e2:	008a      	lsls	r2, r1, #2
 80039e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039e8:	f7fc fc0e 	bl	8000208 <__aeabi_uldivmod>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4b60      	ldr	r3, [pc, #384]	; (8003b74 <UART_SetConfig+0x4e4>)
 80039f2:	fba3 2302 	umull	r2, r3, r3, r2
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	011c      	lsls	r4, r3, #4
 80039fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a0c:	4642      	mov	r2, r8
 8003a0e:	464b      	mov	r3, r9
 8003a10:	1891      	adds	r1, r2, r2
 8003a12:	61b9      	str	r1, [r7, #24]
 8003a14:	415b      	adcs	r3, r3
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a1c:	4641      	mov	r1, r8
 8003a1e:	1851      	adds	r1, r2, r1
 8003a20:	6139      	str	r1, [r7, #16]
 8003a22:	4649      	mov	r1, r9
 8003a24:	414b      	adcs	r3, r1
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a34:	4659      	mov	r1, fp
 8003a36:	00cb      	lsls	r3, r1, #3
 8003a38:	4651      	mov	r1, sl
 8003a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a3e:	4651      	mov	r1, sl
 8003a40:	00ca      	lsls	r2, r1, #3
 8003a42:	4610      	mov	r0, r2
 8003a44:	4619      	mov	r1, r3
 8003a46:	4603      	mov	r3, r0
 8003a48:	4642      	mov	r2, r8
 8003a4a:	189b      	adds	r3, r3, r2
 8003a4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a50:	464b      	mov	r3, r9
 8003a52:	460a      	mov	r2, r1
 8003a54:	eb42 0303 	adc.w	r3, r2, r3
 8003a58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a74:	4649      	mov	r1, r9
 8003a76:	008b      	lsls	r3, r1, #2
 8003a78:	4641      	mov	r1, r8
 8003a7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a7e:	4641      	mov	r1, r8
 8003a80:	008a      	lsls	r2, r1, #2
 8003a82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a86:	f7fc fbbf 	bl	8000208 <__aeabi_uldivmod>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4b39      	ldr	r3, [pc, #228]	; (8003b74 <UART_SetConfig+0x4e4>)
 8003a90:	fba3 1302 	umull	r1, r3, r3, r2
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	2164      	movs	r1, #100	; 0x64
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	3332      	adds	r3, #50	; 0x32
 8003aa2:	4a34      	ldr	r2, [pc, #208]	; (8003b74 <UART_SetConfig+0x4e4>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aae:	441c      	add	r4, r3
 8003ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	673b      	str	r3, [r7, #112]	; 0x70
 8003ab8:	677a      	str	r2, [r7, #116]	; 0x74
 8003aba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003abe:	4642      	mov	r2, r8
 8003ac0:	464b      	mov	r3, r9
 8003ac2:	1891      	adds	r1, r2, r2
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	415b      	adcs	r3, r3
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ace:	4641      	mov	r1, r8
 8003ad0:	1851      	adds	r1, r2, r1
 8003ad2:	6039      	str	r1, [r7, #0]
 8003ad4:	4649      	mov	r1, r9
 8003ad6:	414b      	adcs	r3, r1
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ae6:	4659      	mov	r1, fp
 8003ae8:	00cb      	lsls	r3, r1, #3
 8003aea:	4651      	mov	r1, sl
 8003aec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003af0:	4651      	mov	r1, sl
 8003af2:	00ca      	lsls	r2, r1, #3
 8003af4:	4610      	mov	r0, r2
 8003af6:	4619      	mov	r1, r3
 8003af8:	4603      	mov	r3, r0
 8003afa:	4642      	mov	r2, r8
 8003afc:	189b      	adds	r3, r3, r2
 8003afe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b00:	464b      	mov	r3, r9
 8003b02:	460a      	mov	r2, r1
 8003b04:	eb42 0303 	adc.w	r3, r2, r3
 8003b08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	663b      	str	r3, [r7, #96]	; 0x60
 8003b14:	667a      	str	r2, [r7, #100]	; 0x64
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b22:	4649      	mov	r1, r9
 8003b24:	008b      	lsls	r3, r1, #2
 8003b26:	4641      	mov	r1, r8
 8003b28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b2c:	4641      	mov	r1, r8
 8003b2e:	008a      	lsls	r2, r1, #2
 8003b30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b34:	f7fc fb68 	bl	8000208 <__aeabi_uldivmod>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <UART_SetConfig+0x4e4>)
 8003b3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2164      	movs	r1, #100	; 0x64
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	3332      	adds	r3, #50	; 0x32
 8003b50:	4a08      	ldr	r2, [pc, #32]	; (8003b74 <UART_SetConfig+0x4e4>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	f003 020f 	and.w	r2, r3, #15
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4422      	add	r2, r4
 8003b64:	609a      	str	r2, [r3, #8]
}
 8003b66:	bf00      	nop
 8003b68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b72:	bf00      	nop
 8003b74:	51eb851f 	.word	0x51eb851f

08003b78 <__libc_init_array>:
 8003b78:	b570      	push	{r4, r5, r6, lr}
 8003b7a:	4d0d      	ldr	r5, [pc, #52]	; (8003bb0 <__libc_init_array+0x38>)
 8003b7c:	4c0d      	ldr	r4, [pc, #52]	; (8003bb4 <__libc_init_array+0x3c>)
 8003b7e:	1b64      	subs	r4, r4, r5
 8003b80:	10a4      	asrs	r4, r4, #2
 8003b82:	2600      	movs	r6, #0
 8003b84:	42a6      	cmp	r6, r4
 8003b86:	d109      	bne.n	8003b9c <__libc_init_array+0x24>
 8003b88:	4d0b      	ldr	r5, [pc, #44]	; (8003bb8 <__libc_init_array+0x40>)
 8003b8a:	4c0c      	ldr	r4, [pc, #48]	; (8003bbc <__libc_init_array+0x44>)
 8003b8c:	f000 f820 	bl	8003bd0 <_init>
 8003b90:	1b64      	subs	r4, r4, r5
 8003b92:	10a4      	asrs	r4, r4, #2
 8003b94:	2600      	movs	r6, #0
 8003b96:	42a6      	cmp	r6, r4
 8003b98:	d105      	bne.n	8003ba6 <__libc_init_array+0x2e>
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
 8003b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba0:	4798      	blx	r3
 8003ba2:	3601      	adds	r6, #1
 8003ba4:	e7ee      	b.n	8003b84 <__libc_init_array+0xc>
 8003ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003baa:	4798      	blx	r3
 8003bac:	3601      	adds	r6, #1
 8003bae:	e7f2      	b.n	8003b96 <__libc_init_array+0x1e>
 8003bb0:	08003c08 	.word	0x08003c08
 8003bb4:	08003c08 	.word	0x08003c08
 8003bb8:	08003c08 	.word	0x08003c08
 8003bbc:	08003c0c 	.word	0x08003c0c

08003bc0 <memset>:
 8003bc0:	4402      	add	r2, r0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d100      	bne.n	8003bca <memset+0xa>
 8003bc8:	4770      	bx	lr
 8003bca:	f803 1b01 	strb.w	r1, [r3], #1
 8003bce:	e7f9      	b.n	8003bc4 <memset+0x4>

08003bd0 <_init>:
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	bf00      	nop
 8003bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd6:	bc08      	pop	{r3}
 8003bd8:	469e      	mov	lr, r3
 8003bda:	4770      	bx	lr

08003bdc <_fini>:
 8003bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bde:	bf00      	nop
 8003be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be2:	bc08      	pop	{r3}
 8003be4:	469e      	mov	lr, r3
 8003be6:	4770      	bx	lr
