
helloWorldf446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003754  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800393c  0800393c  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  0800393c  0800393c  0001393c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003944  08003944  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003944  08003944  00013944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003948  08003948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  0800394c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000003c  08003988  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003988  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c66d  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcb  00000000  00000000  0002c6d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002e2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002ed18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b52  00000000  00000000  0002f6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c26f  00000000  00000000  00050232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6ee6  00000000  00000000  0005c4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00123387  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a98  00000000  00000000  001233dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000003c 	.word	0x2000003c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003904 	.word	0x08003904

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000040 	.word	0x20000040
 8000204:	08003904 	.word	0x08003904

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8000510:	78fb      	ldrb	r3, [r7, #3]
 8000512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000516:	b2db      	uxtb	r3, r3
 8000518:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6858      	ldr	r0, [r3, #4]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	8adb      	ldrh	r3, [r3, #22]
 8000522:	2200      	movs	r2, #0
 8000524:	4619      	mov	r1, r3
 8000526:	f001 fa05 	bl	8001934 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6818      	ldr	r0, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	1cf9      	adds	r1, r7, #3
 8000534:	2201      	movs	r2, #1
 8000536:	f002 f82e 	bl	8002596 <HAL_SPI_Transmit>
 800053a:	4603      	mov	r3, r0
 800053c:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6818      	ldr	r0, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	f107 010f 	add.w	r1, r7, #15
 800054a:	2201      	movs	r2, #1
 800054c:	f002 f95f 	bl	800280e <HAL_SPI_Receive>
 8000550:	4603      	mov	r3, r0
 8000552:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	6858      	ldr	r0, [r3, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	8adb      	ldrh	r3, [r3, #22]
 800055c:	2201      	movs	r2, #1
 800055e:	4619      	mov	r1, r3
 8000560:	f001 f9e8 	bl	8001934 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8000564:	7bfb      	ldrb	r3, [r7, #15]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b084      	sub	sp, #16
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	460b      	mov	r3, r1
 8000578:	70fb      	strb	r3, [r7, #3]
 800057a:	4613      	mov	r3, r2
 800057c:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800057e:	78fb      	ldrb	r3, [r7, #3]
 8000580:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000584:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8000586:	78bb      	ldrb	r3, [r7, #2]
 8000588:	021b      	lsls	r3, r3, #8
 800058a:	b21a      	sxth	r2, r3
 800058c:	78fb      	ldrb	r3, [r7, #3]
 800058e:	b21b      	sxth	r3, r3
 8000590:	4313      	orrs	r3, r2
 8000592:	b21b      	sxth	r3, r3
 8000594:	b29b      	uxth	r3, r3
 8000596:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6858      	ldr	r0, [r3, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	8adb      	ldrh	r3, [r3, #22]
 80005a0:	2200      	movs	r2, #0
 80005a2:	4619      	mov	r1, r3
 80005a4:	f001 f9c6 	bl	8001934 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	f107 010a 	add.w	r1, r7, #10
 80005b4:	2202      	movs	r2, #2
 80005b6:	f001 ffee 	bl	8002596 <HAL_SPI_Transmit>
 80005ba:	4603      	mov	r3, r0
 80005bc:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6858      	ldr	r0, [r3, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	8adb      	ldrh	r3, [r3, #22]
 80005c6:	2201      	movs	r2, #1
 80005c8:	4619      	mov	r1, r3
 80005ca:	f001 f9b3 	bl	8001934 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b088      	sub	sp, #32
 80005da:	af00      	add	r7, sp, #0
 80005dc:	60f8      	str	r0, [r7, #12]
 80005de:	60b9      	str	r1, [r7, #8]
 80005e0:	4611      	mov	r1, r2
 80005e2:	461a      	mov	r2, r3
 80005e4:	460b      	mov	r3, r1
 80005e6:	71fb      	strb	r3, [r7, #7]
 80005e8:	4613      	mov	r3, r2
 80005ea:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	6858      	ldr	r0, [r3, #4]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	8adb      	ldrh	r3, [r3, #22]
 80005f8:	2200      	movs	r2, #0
 80005fa:	4619      	mov	r1, r3
 80005fc:	f001 f99a 	bl	8001934 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	6818      	ldr	r0, [r3, #0]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f107 0117 	add.w	r1, r7, #23
 800060c:	2201      	movs	r2, #1
 800060e:	f001 ffc2 	bl	8002596 <HAL_SPI_Transmit>
 8000612:	4603      	mov	r3, r0
 8000614:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d108      	bne.n	800062e <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	79fa      	ldrb	r2, [r7, #7]
 8000622:	b292      	uxth	r2, r2
 8000624:	68b9      	ldr	r1, [r7, #8]
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fba4 	bl	8002d74 <HAL_SPI_Transmit_DMA>
 800062c:	e012      	b.n	8000654 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	6818      	ldr	r0, [r3, #0]
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	b29a      	uxth	r2, r3
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	68b9      	ldr	r1, [r7, #8]
 800063c:	f001 ffab 	bl	8002596 <HAL_SPI_Transmit>
 8000640:	4603      	mov	r3, r0
 8000642:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	6858      	ldr	r0, [r3, #4]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	8adb      	ldrh	r3, [r3, #22]
 800064c:	2201      	movs	r2, #1
 800064e:	4619      	mov	r1, r3
 8000650:	f001 f970 	bl	8001934 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8000654:	3720      	adds	r7, #32
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	460b      	mov	r3, r1
 8000664:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8000666:	78fb      	ldrb	r3, [r7, #3]
 8000668:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	2101      	movs	r1, #1
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f7ff ff7b 	bl	800056e <write_register>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b2c      	cmp	r3, #44	; 0x2c
 8000690:	d801      	bhi.n	8000696 <set_OCP+0x16>
    imax = 45;
 8000692:	232d      	movs	r3, #45	; 0x2d
 8000694:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8000696:	78fb      	ldrb	r3, [r7, #3]
 8000698:	2bf0      	cmp	r3, #240	; 0xf0
 800069a:	d901      	bls.n	80006a0 <set_OCP+0x20>
    imax = 240;
 800069c:	23f0      	movs	r3, #240	; 0xf0
 800069e:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 80006a0:	78fb      	ldrb	r3, [r7, #3]
 80006a2:	2b81      	cmp	r3, #129	; 0x81
 80006a4:	d809      	bhi.n	80006ba <set_OCP+0x3a>
    value = (imax - 45) / 5;
 80006a6:	78fb      	ldrb	r3, [r7, #3]
 80006a8:	3b2d      	subs	r3, #45	; 0x2d
 80006aa:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <set_OCP+0x68>)
 80006ac:	fb82 1203 	smull	r1, r2, r2, r3
 80006b0:	1052      	asrs	r2, r2, #1
 80006b2:	17db      	asrs	r3, r3, #31
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	73fb      	strb	r3, [r7, #15]
 80006b8:	e008      	b.n	80006cc <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 80006ba:	78fb      	ldrb	r3, [r7, #3]
 80006bc:	331e      	adds	r3, #30
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <set_OCP+0x68>)
 80006c0:	fb82 1203 	smull	r1, r2, r2, r3
 80006c4:	1092      	asrs	r2, r2, #2
 80006c6:	17db      	asrs	r3, r3, #31
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	f043 0320 	orr.w	r3, r3, #32
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	210b      	movs	r1, #11
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff48 	bl	800056e <write_register>
}
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	66666667 	.word	0x66666667

080006ec <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 80006f4:	211d      	movs	r1, #29
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ff02 	bl	8000500 <read_register>
 80006fc:	4603      	mov	r3, r0
 80006fe:	091b      	lsrs	r3, r3, #4
 8000700:	b2db      	uxtb	r3, r3
 8000702:	b2da      	uxtb	r2, r3
 8000704:	f04f 0300 	mov.w	r3, #0
 8000708:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 800070c:	211e      	movs	r1, #30
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff fef6 	bl	8000500 <read_register>
 8000714:	4603      	mov	r3, r0
 8000716:	091b      	lsrs	r3, r3, #4
 8000718:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 800071a:	2304      	movs	r3, #4
 800071c:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	2b0a      	cmp	r3, #10
 8000722:	d909      	bls.n	8000738 <set_low_data_rate_optimization+0x4c>
 8000724:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000728:	2b00      	cmp	r3, #0
 800072a:	bf08      	it	eq
 800072c:	2a07      	cmpeq	r2, #7
 800072e:	d103      	bne.n	8000738 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8000730:	7ffb      	ldrb	r3, [r7, #31]
 8000732:	f043 0308 	orr.w	r3, r3, #8
 8000736:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8000738:	7ffb      	ldrb	r3, [r7, #31]
 800073a:	461a      	mov	r2, r3
 800073c:	2126      	movs	r1, #38	; 0x26
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff ff15 	bl	800056e <write_register>
}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8000754:	2100      	movs	r1, #0
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff ff7f 	bl	800065a <set_mode>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 800076c:	2101      	movs	r1, #1
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff73 	bl	800065a <set_mode>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8000784:	211d      	movs	r1, #29
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff feba 	bl	8000500 <read_register>
 800078c:	4603      	mov	r3, r0
 800078e:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	f023 0301 	bic.w	r3, r3, #1
 8000796:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	461a      	mov	r2, r3
 800079c:	211d      	movs	r1, #29
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff fee5 	bl	800056e <write_register>
}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	460b      	mov	r3, r1
 80007b6:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	691b      	ldr	r3, [r3, #16]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d10e      	bne.n	80007de <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80007c0:	78fb      	ldrb	r3, [r7, #3]
 80007c2:	2b0f      	cmp	r3, #15
 80007c4:	d901      	bls.n	80007ca <lora_set_tx_power+0x1e>
      level = 15;
 80007c6:	230f      	movs	r3, #15
 80007c8:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80007ca:	78fb      	ldrb	r3, [r7, #3]
 80007cc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	461a      	mov	r2, r3
 80007d4:	2109      	movs	r1, #9
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff fec9 	bl	800056e <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 80007dc:	e02e      	b.n	800083c <lora_set_tx_power+0x90>
    if (level > 20) {
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	2b14      	cmp	r3, #20
 80007e2:	d901      	bls.n	80007e8 <lora_set_tx_power+0x3c>
      level = 20;
 80007e4:	2314      	movs	r3, #20
 80007e6:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d801      	bhi.n	80007f2 <lora_set_tx_power+0x46>
      level = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 80007f2:	78fb      	ldrb	r3, [r7, #3]
 80007f4:	2b11      	cmp	r3, #17
 80007f6:	d90c      	bls.n	8000812 <lora_set_tx_power+0x66>
      level -= 3;
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	3b03      	subs	r3, #3
 80007fc:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80007fe:	2287      	movs	r2, #135	; 0x87
 8000800:	214d      	movs	r1, #77	; 0x4d
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff feb3 	bl	800056e <write_register>
      set_OCP(lora, 140);
 8000808:	218c      	movs	r1, #140	; 0x8c
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ff38 	bl	8000680 <set_OCP>
 8000810:	e008      	b.n	8000824 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8000812:	2284      	movs	r2, #132	; 0x84
 8000814:	214d      	movs	r1, #77	; 0x4d
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f7ff fea9 	bl	800056e <write_register>
      set_OCP(lora, 97);
 800081c:	2161      	movs	r1, #97	; 0x61
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ff2e 	bl	8000680 <set_OCP>
    level -= 2;
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	3b02      	subs	r3, #2
 8000828:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 800082a:	78fb      	ldrb	r3, [r7, #3]
 800082c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000830:	b2db      	uxtb	r3, r3
 8000832:	461a      	mov	r2, r3
 8000834:	2109      	movs	r1, #9
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff fe99 	bl	800056e <write_register>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8000850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	f04f 0100 	mov.w	r1, #0
 800085c:	04d9      	lsls	r1, r3, #19
 800085e:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000862:	04d0      	lsls	r0, r2, #19
 8000864:	4a19      	ldr	r2, [pc, #100]	; (80008cc <lora_set_frequency+0x88>)
 8000866:	f04f 0300 	mov.w	r3, #0
 800086a:	f7ff fccd 	bl	8000208 <__aeabi_uldivmod>
 800086e:	4602      	mov	r2, r0
 8000870:	460b      	mov	r3, r1
 8000872:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8000876:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800087a:	f04f 0200 	mov.w	r2, #0
 800087e:	f04f 0300 	mov.w	r3, #0
 8000882:	0c02      	lsrs	r2, r0, #16
 8000884:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000888:	0c0b      	lsrs	r3, r1, #16
 800088a:	b2d3      	uxtb	r3, r2
 800088c:	461a      	mov	r2, r3
 800088e:	2106      	movs	r1, #6
 8000890:	68f8      	ldr	r0, [r7, #12]
 8000892:	f7ff fe6c 	bl	800056e <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8000896:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800089a:	f04f 0200 	mov.w	r2, #0
 800089e:	f04f 0300 	mov.w	r3, #0
 80008a2:	0a02      	lsrs	r2, r0, #8
 80008a4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80008a8:	0a0b      	lsrs	r3, r1, #8
 80008aa:	b2d3      	uxtb	r3, r2
 80008ac:	461a      	mov	r2, r3
 80008ae:	2107      	movs	r1, #7
 80008b0:	68f8      	ldr	r0, [r7, #12]
 80008b2:	f7ff fe5c 	bl	800056e <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80008b6:	7c3b      	ldrb	r3, [r7, #16]
 80008b8:	461a      	mov	r2, r3
 80008ba:	2108      	movs	r1, #8
 80008bc:	68f8      	ldr	r0, [r7, #12]
 80008be:	f7ff fe56 	bl	800056e <write_register>
}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	01e84800 	.word	0x01e84800

080008d0 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80008dc:	78fb      	ldrb	r3, [r7, #3]
 80008de:	2b05      	cmp	r3, #5
 80008e0:	d802      	bhi.n	80008e8 <lora_set_spreading_factor+0x18>
    sf = 6;
 80008e2:	2306      	movs	r3, #6
 80008e4:	70fb      	strb	r3, [r7, #3]
 80008e6:	e004      	b.n	80008f2 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	2b0c      	cmp	r3, #12
 80008ec:	d901      	bls.n	80008f2 <lora_set_spreading_factor+0x22>
    sf = 12;
 80008ee:	230c      	movs	r3, #12
 80008f0:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80008f2:	78fb      	ldrb	r3, [r7, #3]
 80008f4:	2b06      	cmp	r3, #6
 80008f6:	d10a      	bne.n	800090e <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80008f8:	22c5      	movs	r2, #197	; 0xc5
 80008fa:	2131      	movs	r1, #49	; 0x31
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff fe36 	bl	800056e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8000902:	220c      	movs	r2, #12
 8000904:	2137      	movs	r1, #55	; 0x37
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff fe31 	bl	800056e <write_register>
 800090c:	e009      	b.n	8000922 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 800090e:	22c3      	movs	r2, #195	; 0xc3
 8000910:	2131      	movs	r1, #49	; 0x31
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff fe2b 	bl	800056e <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8000918:	220a      	movs	r2, #10
 800091a:	2137      	movs	r1, #55	; 0x37
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff fe26 	bl	800056e <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8000922:	211e      	movs	r1, #30
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fdeb 	bl	8000500 <read_register>
 800092a:	4603      	mov	r3, r0
 800092c:	73fb      	strb	r3, [r7, #15]
  mc2 |= sf << 4;
 800092e:	78fb      	ldrb	r3, [r7, #3]
 8000930:	011b      	lsls	r3, r3, #4
 8000932:	b25a      	sxtb	r2, r3
 8000934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000938:	4313      	orrs	r3, r2
 800093a:	b25b      	sxtb	r3, r3
 800093c:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	461a      	mov	r2, r3
 8000942:	211e      	movs	r1, #30
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff fe12 	bl	800056e <write_register>

  set_low_data_rate_optimization(lora);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff fece 	bl	80006ec <set_low_data_rate_optimization>
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8000964:	887b      	ldrh	r3, [r7, #2]
 8000966:	0a1b      	lsrs	r3, r3, #8
 8000968:	b29b      	uxth	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	461a      	mov	r2, r3
 800096e:	2120      	movs	r1, #32
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff fdfc 	bl	800056e <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8000976:	887b      	ldrh	r3, [r7, #2]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	b2db      	uxtb	r3, r3
 8000980:	461a      	mov	r2, r3
 8000982:	2121      	movs	r1, #33	; 0x21
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff fdf2 	bl	800056e <write_register>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 800099a:	2142      	movs	r1, #66	; 0x42
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff fdaf 	bl	8000500 <read_register>
 80009a2:	4603      	mov	r3, r0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 80009b4:	2101      	movs	r1, #1
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff fda2 	bl	8000500 <read_register>
 80009bc:	4603      	mov	r3, r0
 80009be:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d101      	bne.n	80009ce <lora_is_transmitting+0x22>
 80009ca:	2305      	movs	r3, #5
 80009cc:	e000      	b.n	80009d0 <lora_is_transmitting+0x24>
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	4611      	mov	r1, r2
 80009e4:	461a      	mov	r2, r3
 80009e6:	460b      	mov	r3, r1
 80009e8:	71fb      	strb	r3, [r7, #7]
 80009ea:	4613      	mov	r3, r2
 80009ec:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f7ff ffdc 	bl	80009ac <lora_is_transmitting>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <lora_send_packet_base+0x26>
    return LORA_BUSY;
 80009fa:	2305      	movs	r3, #5
 80009fc:	e02a      	b.n	8000a54 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 80009fe:	2101      	movs	r1, #1
 8000a00:	68f8      	ldr	r0, [r7, #12]
 8000a02:	f7ff fe2a 	bl	800065a <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	f000 f83a 	bl	8000a80 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	7d1b      	ldrb	r3, [r3, #20]
 8000a10:	461a      	mov	r2, r3
 8000a12:	210d      	movs	r1, #13
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f7ff fdaa 	bl	800056e <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	7d1b      	ldrb	r3, [r3, #20]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	210e      	movs	r1, #14
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f7ff fda3 	bl	800056e <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	2122      	movs	r1, #34	; 0x22
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f7ff fd9d 	bl	800056e <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8000a34:	79bb      	ldrb	r3, [r7, #6]
 8000a36:	79fa      	ldrb	r2, [r7, #7]
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f7ff fdcb 	bl	80005d6 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d101      	bne.n	8000a4a <lora_send_packet_base+0x72>
    return LORA_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e004      	b.n	8000a54 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8000a4a:	2103      	movs	r1, #3
 8000a4c:	68f8      	ldr	r0, [r7, #12]
 8000a4e:	f7ff fe04 	bl	800065a <set_mode>
  return LORA_OK;
 8000a52:	2300      	movs	r3, #0
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	4613      	mov	r3, r2
 8000a68:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8000a6a:	79fa      	ldrb	r2, [r7, #7]
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	68b9      	ldr	r1, [r7, #8]
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff ffb1 	bl	80009d8 <lora_send_packet_base>
 8000a76:	4603      	mov	r3, r0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8000a88:	2208      	movs	r2, #8
 8000a8a:	2112      	movs	r1, #18
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff fd6e 	bl	800056e <write_register>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	887a      	ldrh	r2, [r7, #2]
 8000ab8:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8000aba:	6a3a      	ldr	r2, [r7, #32]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ad8:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f7ff ff59 	bl	8000992 <lora_version>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8000ae4:	7dfb      	ldrb	r3, [r7, #23]
 8000ae6:	2b12      	cmp	r3, #18
 8000ae8:	d001      	beq.n	8000aee <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8000aea:	2304      	movs	r3, #4
 8000aec:	e031      	b.n	8000b52 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	f7ff fe2c 	bl	800074c <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	f7ff fe29 	bl	800074c <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8000afa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f7ff fea0 	bl	8000844 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8000b04:	2107      	movs	r1, #7
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	f7ff fee2 	bl	80008d0 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8000b0c:	210a      	movs	r1, #10
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f7ff ff22 	bl	8000958 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f7ff fe31 	bl	800077c <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8000b1a:	210c      	movs	r1, #12
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f7ff fcef 	bl	8000500 <read_register>
 8000b22:	4603      	mov	r3, r0
 8000b24:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8000b26:	7dbb      	ldrb	r3, [r7, #22]
 8000b28:	f043 0303 	orr.w	r3, r3, #3
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	210c      	movs	r1, #12
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f7ff fd1b 	bl	800056e <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8000b38:	2204      	movs	r2, #4
 8000b3a:	2126      	movs	r1, #38	; 0x26
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f7ff fd16 	bl	800056e <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8000b42:	2111      	movs	r1, #17
 8000b44:	68f8      	ldr	r0, [r7, #12]
 8000b46:	f7ff fe31 	bl	80007ac <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	f7ff fe0a 	bl	8000764 <lora_mode_standby>

  return LORA_OK;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	0000      	movs	r0, r0
 8000b5c:	0000      	movs	r0, r0
	...

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f000 fb23 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f867 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f000 f931 	bl	8000dd4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b72:	f000 f8cf 	bl	8000d14 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b76:	f000 f903 	bl	8000d80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	4828      	ldr	r0, [pc, #160]	; (8000c20 <main+0xc0>)
 8000b80:	f000 fed8 	bl	8001934 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000b84:	2064      	movs	r0, #100	; 0x64
 8000b86:	f000 fb85 	bl	8001294 <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2120      	movs	r1, #32
 8000b8e:	4824      	ldr	r0, [pc, #144]	; (8000c20 <main+0xc0>)
 8000b90:	f000 fed0 	bl	8001934 <HAL_GPIO_WritePin>
  lora_sx1276 lora;
  uint8_t version =  lora_version(&lora);
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fefb 	bl	8000992 <lora_version>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	77fb      	strb	r3, [r7, #31]

  uint8_t res = lora_init(&lora, &hspi1, NSS_GPIO_Port, NSS_Pin, LORA_BASE_FREQUENCY_US);
 8000ba0:	1d38      	adds	r0, r7, #4
 8000ba2:	a31d      	add	r3, pc, #116	; (adr r3, 8000c18 <main+0xb8>)
 8000ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba8:	e9cd 2300 	strd	r2, r3, [sp]
 8000bac:	2301      	movs	r3, #1
 8000bae:	4a1d      	ldr	r2, [pc, #116]	; (8000c24 <main+0xc4>)
 8000bb0:	491d      	ldr	r1, [pc, #116]	; (8000c28 <main+0xc8>)
 8000bb2:	f7ff ff72 	bl	8000a9a <lora_init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	77bb      	strb	r3, [r7, #30]
    if (res != LORA_OK) {
 8000bba:	7fbb      	ldrb	r3, [r7, #30]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d008      	beq.n	8000bd2 <main+0x72>
      // Initialization failed
//    	HAL_UART_Transmit(&huart2, failed, sizeof(failed), 1000);
    	HAL_UART_Transmit(&huart2, res, sizeof(res), 1000);
 8000bc0:	7fbb      	ldrb	r3, [r7, #30]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4818      	ldr	r0, [pc, #96]	; (8000c2c <main+0xcc>)
 8000bcc:	f002 fba5 	bl	800331a <HAL_UART_Transmit>
 8000bd0:	e006      	b.n	8000be0 <main+0x80>
    }
    else{
    	HAL_UART_Transmit(&huart2, success, sizeof(success), 1000);
 8000bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd6:	221f      	movs	r2, #31
 8000bd8:	4915      	ldr	r1, [pc, #84]	; (8000c30 <main+0xd0>)
 8000bda:	4814      	ldr	r0, [pc, #80]	; (8000c2c <main+0xcc>)
 8000bdc:	f002 fb9d 	bl	800331a <HAL_UART_Transmit>
    }

    uint8_t packet_test = lora_send_packet(&lora, (uint8_t *)"test", 4);
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2204      	movs	r2, #4
 8000be4:	4913      	ldr	r1, [pc, #76]	; (8000c34 <main+0xd4>)
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff38 	bl	8000a5c <lora_send_packet>
 8000bec:	4603      	mov	r3, r0
 8000bee:	777b      	strb	r3, [r7, #29]
      if (packet_test != LORA_OK) {
 8000bf0:	7f7b      	ldrb	r3, [r7, #29]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d007      	beq.n	8000c06 <main+0xa6>
    	  HAL_UART_Transmit(&huart2, failed, sizeof(failed), 1000);
 8000bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfa:	220f      	movs	r2, #15
 8000bfc:	490e      	ldr	r1, [pc, #56]	; (8000c38 <main+0xd8>)
 8000bfe:	480b      	ldr	r0, [pc, #44]	; (8000c2c <main+0xcc>)
 8000c00:	f002 fb8b 	bl	800331a <HAL_UART_Transmit>
 8000c04:	e006      	b.n	8000c14 <main+0xb4>
      } else {
    	  HAL_UART_Transmit(&huart2, success, sizeof(success), 1000);
 8000c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0a:	221f      	movs	r2, #31
 8000c0c:	4908      	ldr	r1, [pc, #32]	; (8000c30 <main+0xd0>)
 8000c0e:	4807      	ldr	r0, [pc, #28]	; (8000c2c <main+0xcc>)
 8000c10:	f002 fb83 	bl	800331a <HAL_UART_Transmit>
      }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <main+0xb4>
 8000c16:	bf00      	nop
 8000c18:	3689cac0 	.word	0x3689cac0
 8000c1c:	00000000 	.word	0x00000000
 8000c20:	40020800 	.word	0x40020800
 8000c24:	40020400 	.word	0x40020400
 8000c28:	20000058 	.word	0x20000058
 8000c2c:	200000b0 	.word	0x200000b0
 8000c30:	20000010 	.word	0x20000010
 8000c34:	0800391c 	.word	0x0800391c
 8000c38:	20000000 	.word	0x20000000

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	; 0x50
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	2234      	movs	r2, #52	; 0x34
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fe52 	bl	80038f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <SystemClock_Config+0xd0>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	4a28      	ldr	r2, [pc, #160]	; (8000d0c <SystemClock_Config+0xd0>)
 8000c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c70:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <SystemClock_Config+0xd0>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <SystemClock_Config+0xd4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c88:	4a21      	ldr	r2, [pc, #132]	; (8000d10 <SystemClock_Config+0xd4>)
 8000c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <SystemClock_Config+0xd4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000caa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000cb4:	2348      	movs	r3, #72	; 0x48
 8000cb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 f93d 	bl	8001f48 <HAL_RCC_OscConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000cd4:	f000 f934 	bl	8000f40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd8:	230f      	movs	r3, #15
 8000cda:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 fe5b 	bl	80019b0 <HAL_RCC_ClockConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000d00:	f000 f91e 	bl	8000f40 <Error_Handler>
  }
}
 8000d04:	bf00      	nop
 8000d06:	3750      	adds	r7, #80	; 0x50
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40007000 	.word	0x40007000

08000d14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d1a:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <MX_SPI1_Init+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d48:	2238      	movs	r2, #56	; 0x38
 8000d4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d60:	220a      	movs	r2, #10
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <MX_SPI1_Init+0x64>)
 8000d66:	f001 fb8d 	bl	8002484 <HAL_SPI_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d70:	f000 f8e6 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000058 	.word	0x20000058
 8000d7c:	40013000 	.word	0x40013000

08000d80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <MX_USART2_UART_Init+0x50>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000db8:	f002 fa62 	bl	8003280 <HAL_UART_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dc2:	f000 f8bd 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000b0 	.word	0x200000b0
 8000dd0:	40004400 	.word	0x40004400

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b50      	ldr	r3, [pc, #320]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a4f      	ldr	r2, [pc, #316]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b4d      	ldr	r3, [pc, #308]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b49      	ldr	r3, [pc, #292]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a48      	ldr	r2, [pc, #288]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	4b42      	ldr	r3, [pc, #264]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a41      	ldr	r2, [pc, #260]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a3a      	ldr	r2, [pc, #232]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b38      	ldr	r3, [pc, #224]	; (8000f30 <MX_GPIO_Init+0x15c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_GPIO_Port, TX_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2110      	movs	r1, #16
 8000e5e:	4835      	ldr	r0, [pc, #212]	; (8000f34 <MX_GPIO_Init+0x160>)
 8000e60:	f000 fd68 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2120      	movs	r1, #32
 8000e68:	4833      	ldr	r0, [pc, #204]	; (8000f38 <MX_GPIO_Init+0x164>)
 8000e6a:	f000 fd63 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|LED_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e74:	4831      	ldr	r0, [pc, #196]	; (8000f3c <MX_GPIO_Init+0x168>)
 8000e76:	f000 fd5d 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TX_Pin */
  GPIO_InitStruct.Pin = TX_Pin;
 8000e7a:	2310      	movs	r3, #16
 8000e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4828      	ldr	r0, [pc, #160]	; (8000f34 <MX_GPIO_Init+0x160>)
 8000e92:	f000 fbbb 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000e96:	2320      	movs	r3, #32
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4822      	ldr	r0, [pc, #136]	; (8000f38 <MX_GPIO_Init+0x164>)
 8000eae:	f000 fbad 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin LED_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|LED_Pin;
 8000eb2:	f244 0301 	movw	r3, #16385	; 0x4001
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	481c      	ldr	r0, [pc, #112]	; (8000f3c <MX_GPIO_Init+0x168>)
 8000ecc:	f000 fb9e 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin;
 8000ed0:	f240 4302 	movw	r3, #1026	; 0x402
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4815      	ldr	r0, [pc, #84]	; (8000f3c <MX_GPIO_Init+0x168>)
 8000ee8:	f000 fb90 	bl	800160c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO2_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin;
 8000eec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO2_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	480c      	ldr	r0, [pc, #48]	; (8000f34 <MX_GPIO_Init+0x160>)
 8000f04:	f000 fb82 	bl	800160c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2007      	movs	r0, #7
 8000f0e:	f000 fac0 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f12:	2007      	movs	r0, #7
 8000f14:	f000 fad9 	bl	80014ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2028      	movs	r0, #40	; 0x28
 8000f1e:	f000 fab8 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f22:	2028      	movs	r0, #40	; 0x28
 8000f24:	f000 fad1 	bl	80014ca <HAL_NVIC_EnableIRQ>

}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40020800 	.word	0x40020800
 8000f3c:	40020400 	.word	0x40020400

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <Error_Handler+0x8>
	...

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800

08000f9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_SPI_MspInit+0x84>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d12b      	bne.n	8001016 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_SPI_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ff6:	23e0      	movs	r3, #224	; 0xe0
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001006:	2305      	movs	r3, #5
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <HAL_SPI_MspInit+0x8c>)
 8001012:	f000 fafb 	bl	800160c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	; 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40013000 	.word	0x40013000
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000

0800102c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <HAL_UART_MspInit+0x84>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d12b      	bne.n	80010a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_UART_MspInit+0x88>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <HAL_UART_MspInit+0x88>)
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_UART_MspInit+0x88>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_UART_MspInit+0x88>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <HAL_UART_MspInit+0x88>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_UART_MspInit+0x88>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001086:	230c      	movs	r3, #12
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001096:	2307      	movs	r3, #7
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <HAL_UART_MspInit+0x8c>)
 80010a2:	f000 fab3 	bl	800160c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	; 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40004400 	.word	0x40004400
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020000 	.word	0x40020000

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <NMI_Handler+0x4>

080010c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <MemManage_Handler+0x4>

080010ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <UsageFault_Handler+0x4>

080010da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001108:	f000 f8a4 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001114:	2002      	movs	r0, #2
 8001116:	f000 fc27 	bl	8001968 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}

0800111e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8001122:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001126:	f000 fc1f 	bl	8001968 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO2_Pin);
 800112a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800112e:	f000 fc1b 	bl	8001968 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001194 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001162:	490e      	ldr	r1, [pc, #56]	; (800119c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001178:	4c0b      	ldr	r4, [pc, #44]	; (80011a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001186:	f7ff ffd7 	bl	8001138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118a:	f002 fb8f 	bl	80038ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118e:	f7ff fce7 	bl	8000b60 <main>
  bx  lr    
 8001192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001194:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80011a0:	0800394c 	.word	0x0800394c
  ldr r2, =_sbss
 80011a4:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80011a8:	200000f8 	.word	0x200000f8

080011ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <HAL_Init+0x40>)
 80011ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <HAL_Init+0x40>)
 80011c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_Init+0x40>)
 80011d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f94f 	bl	800147c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	200f      	movs	r0, #15
 80011e0:	f000 f808 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff feb2 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023c00 	.word	0x40023c00

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x54>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_InitTick+0x58>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f967 	bl	80014e6 <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f000 f92f 	bl	8001492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <HAL_InitTick+0x5c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000030 	.word	0x20000030
 800124c:	20000038 	.word	0x20000038
 8001250:	20000034 	.word	0x20000034

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000038 	.word	0x20000038
 8001278:	200000f4 	.word	0x200000f4

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	200000f4 	.word	0x200000f4

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff ffee 	bl	800127c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_Delay+0x44>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffde 	bl	800127c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000038 	.word	0x20000038

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4907      	ldr	r1, [pc, #28]	; (8001378 <__NVIC_EnableIRQ+0x38>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001448:	d301      	bcc.n	800144e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2301      	movs	r3, #1
 800144c:	e00f      	b.n	800146e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <SysTick_Config+0x40>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001456:	210f      	movs	r1, #15
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f7ff ff8e 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <SysTick_Config+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <SysTick_Config+0x40>)
 8001468:	2207      	movs	r2, #7
 800146a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff29 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a4:	f7ff ff3e 	bl	8001324 <__NVIC_GetPriorityGrouping>
 80014a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f7ff ff8e 	bl	80013d0 <NVIC_EncodePriority>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff5d 	bl	800137c <__NVIC_SetPriority>
}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff31 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffa2 	bl	8001438 <SysTick_Config>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001514:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800151c:	2b01      	cmp	r3, #1
 800151e:	d101      	bne.n	8001524 <HAL_DMA_Start_IT+0x26>
 8001520:	2302      	movs	r3, #2
 8001522:	e040      	b.n	80015a6 <HAL_DMA_Start_IT+0xa8>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d12f      	bne.n	8001598 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2202      	movs	r2, #2
 800153c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f82e 	bl	80015ae <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001556:	223f      	movs	r2, #63	; 0x3f
 8001558:	409a      	lsls	r2, r3
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 0216 	orr.w	r2, r2, #22
 800156c:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	2b00      	cmp	r3, #0
 8001574:	d007      	beq.n	8001586 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 0208 	orr.w	r2, r2, #8
 8001584:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f042 0201 	orr.w	r2, r2, #1
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e005      	b.n	80015a4 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015a0:	2302      	movs	r3, #2
 80015a2:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b085      	sub	sp, #20
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015ca:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b40      	cmp	r3, #64	; 0x40
 80015da:	d108      	bne.n	80015ee <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80015ec:	e007      	b.n	80015fe <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	60da      	str	r2, [r3, #12]
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	; 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	e165      	b.n	80018f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001628:	2201      	movs	r2, #1
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	429a      	cmp	r2, r3
 8001642:	f040 8154 	bne.w	80018ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	2b01      	cmp	r3, #1
 8001650:	d005      	beq.n	800165e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165a:	2b02      	cmp	r3, #2
 800165c:	d130      	bne.n	80016c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	2203      	movs	r2, #3
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001694:	2201      	movs	r2, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	f003 0201 	and.w	r2, r3, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d017      	beq.n	80016fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	2203      	movs	r2, #3
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d123      	bne.n	8001750 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	08da      	lsrs	r2, r3, #3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3208      	adds	r2, #8
 8001710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001714:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	220f      	movs	r2, #15
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	08da      	lsrs	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3208      	adds	r2, #8
 800174a:	69b9      	ldr	r1, [r7, #24]
 800174c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0203 	and.w	r2, r3, #3
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80ae 	beq.w	80018ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b5d      	ldr	r3, [pc, #372]	; (800190c <HAL_GPIO_Init+0x300>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	4a5c      	ldr	r2, [pc, #368]	; (800190c <HAL_GPIO_Init+0x300>)
 800179c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a0:	6453      	str	r3, [r2, #68]	; 0x44
 80017a2:	4b5a      	ldr	r3, [pc, #360]	; (800190c <HAL_GPIO_Init+0x300>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ae:	4a58      	ldr	r2, [pc, #352]	; (8001910 <HAL_GPIO_Init+0x304>)
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	3302      	adds	r3, #2
 80017b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	220f      	movs	r2, #15
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4f      	ldr	r2, [pc, #316]	; (8001914 <HAL_GPIO_Init+0x308>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d025      	beq.n	8001826 <HAL_GPIO_Init+0x21a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4e      	ldr	r2, [pc, #312]	; (8001918 <HAL_GPIO_Init+0x30c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d01f      	beq.n	8001822 <HAL_GPIO_Init+0x216>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4d      	ldr	r2, [pc, #308]	; (800191c <HAL_GPIO_Init+0x310>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d019      	beq.n	800181e <HAL_GPIO_Init+0x212>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4c      	ldr	r2, [pc, #304]	; (8001920 <HAL_GPIO_Init+0x314>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d013      	beq.n	800181a <HAL_GPIO_Init+0x20e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4b      	ldr	r2, [pc, #300]	; (8001924 <HAL_GPIO_Init+0x318>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d00d      	beq.n	8001816 <HAL_GPIO_Init+0x20a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4a      	ldr	r2, [pc, #296]	; (8001928 <HAL_GPIO_Init+0x31c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d007      	beq.n	8001812 <HAL_GPIO_Init+0x206>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a49      	ldr	r2, [pc, #292]	; (800192c <HAL_GPIO_Init+0x320>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d101      	bne.n	800180e <HAL_GPIO_Init+0x202>
 800180a:	2306      	movs	r3, #6
 800180c:	e00c      	b.n	8001828 <HAL_GPIO_Init+0x21c>
 800180e:	2307      	movs	r3, #7
 8001810:	e00a      	b.n	8001828 <HAL_GPIO_Init+0x21c>
 8001812:	2305      	movs	r3, #5
 8001814:	e008      	b.n	8001828 <HAL_GPIO_Init+0x21c>
 8001816:	2304      	movs	r3, #4
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x21c>
 800181a:	2303      	movs	r3, #3
 800181c:	e004      	b.n	8001828 <HAL_GPIO_Init+0x21c>
 800181e:	2302      	movs	r3, #2
 8001820:	e002      	b.n	8001828 <HAL_GPIO_Init+0x21c>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <HAL_GPIO_Init+0x21c>
 8001826:	2300      	movs	r3, #0
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	f002 0203 	and.w	r2, r2, #3
 800182e:	0092      	lsls	r2, r2, #2
 8001830:	4093      	lsls	r3, r2
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001838:	4935      	ldr	r1, [pc, #212]	; (8001910 <HAL_GPIO_Init+0x304>)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001846:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <HAL_GPIO_Init+0x324>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800186a:	4a31      	ldr	r2, [pc, #196]	; (8001930 <HAL_GPIO_Init+0x324>)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <HAL_GPIO_Init+0x324>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001894:	4a26      	ldr	r2, [pc, #152]	; (8001930 <HAL_GPIO_Init+0x324>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <HAL_GPIO_Init+0x324>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018be:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <HAL_GPIO_Init+0x324>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <HAL_GPIO_Init+0x324>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018e8:	4a11      	ldr	r2, [pc, #68]	; (8001930 <HAL_GPIO_Init+0x324>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	2b0f      	cmp	r3, #15
 80018f8:	f67f ae96 	bls.w	8001628 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3724      	adds	r7, #36	; 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40013800 	.word	0x40013800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020400 	.word	0x40020400
 800191c:	40020800 	.word	0x40020800
 8001920:	40020c00 	.word	0x40020c00
 8001924:	40021000 	.word	0x40021000
 8001928:	40021400 	.word	0x40021400
 800192c:	40021800 	.word	0x40021800
 8001930:	40013c00 	.word	0x40013c00

08001934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
 8001940:	4613      	mov	r3, r2
 8001942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001944:	787b      	ldrb	r3, [r7, #1]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194a:	887a      	ldrh	r2, [r7, #2]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001950:	e003      	b.n	800195a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	041a      	lsls	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	619a      	str	r2, [r3, #24]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	4013      	ands	r3, r2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d006      	beq.n	800198c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f806 	bl	8001998 <HAL_GPIO_EXTI_Callback>
  }
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40013c00 	.word	0x40013c00

08001998 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0cc      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b68      	ldr	r3, [pc, #416]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d90c      	bls.n	80019ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b65      	ldr	r3, [pc, #404]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b63      	ldr	r3, [pc, #396]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0b8      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a04:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a1c:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	494d      	ldr	r1, [pc, #308]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d044      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d119      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e07f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d003      	beq.n	8001a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e06f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7e:	4b3b      	ldr	r3, [pc, #236]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e067      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8e:	4b37      	ldr	r3, [pc, #220]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f023 0203 	bic.w	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4934      	ldr	r1, [pc, #208]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa0:	f7ff fbec 	bl	800127c <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7ff fbe8 	bl	800127c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e04f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 020c 	and.w	r2, r3, #12
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1eb      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d20c      	bcs.n	8001af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e032      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4916      	ldr	r1, [pc, #88]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	490e      	ldr	r1, [pc, #56]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b36:	f000 f855 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	490a      	ldr	r1, [pc, #40]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	5ccb      	ldrb	r3, [r1, r3]
 8001b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fb4c 	bl	80011f4 <HAL_InitTick>

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023c00 	.word	0x40023c00
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	08003924 	.word	0x08003924
 8001b74:	20000030 	.word	0x20000030
 8001b78:	20000034 	.word	0x20000034

08001b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000030 	.word	0x20000030

08001b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b98:	f7ff fff0 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	0a9b      	lsrs	r3, r3, #10
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	4903      	ldr	r1, [pc, #12]	; (8001bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	08003934 	.word	0x08003934

08001bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bc0:	f7ff ffdc 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	0b5b      	lsrs	r3, r3, #13
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	4903      	ldr	r1, [pc, #12]	; (8001be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bd2:	5ccb      	ldrb	r3, [r1, r3]
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	08003934 	.word	0x08003934

08001be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001be8:	b088      	sub	sp, #32
 8001bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c00:	4bce      	ldr	r3, [pc, #824]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b0c      	cmp	r3, #12
 8001c0a:	f200 818d 	bhi.w	8001f28 <HAL_RCC_GetSysClockFreq+0x344>
 8001c0e:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <HAL_RCC_GetSysClockFreq+0x30>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001c49 	.word	0x08001c49
 8001c18:	08001f29 	.word	0x08001f29
 8001c1c:	08001f29 	.word	0x08001f29
 8001c20:	08001f29 	.word	0x08001f29
 8001c24:	08001c4f 	.word	0x08001c4f
 8001c28:	08001f29 	.word	0x08001f29
 8001c2c:	08001f29 	.word	0x08001f29
 8001c30:	08001f29 	.word	0x08001f29
 8001c34:	08001c55 	.word	0x08001c55
 8001c38:	08001f29 	.word	0x08001f29
 8001c3c:	08001f29 	.word	0x08001f29
 8001c40:	08001f29 	.word	0x08001f29
 8001c44:	08001dc9 	.word	0x08001dc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c48:	4bbd      	ldr	r3, [pc, #756]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001c4a:	61bb      	str	r3, [r7, #24]
       break;
 8001c4c:	e16f      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c4e:	4bbd      	ldr	r3, [pc, #756]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x360>)
 8001c50:	61bb      	str	r3, [r7, #24]
      break;
 8001c52:	e16c      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c54:	4bb9      	ldr	r3, [pc, #740]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c5c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c5e:	4bb7      	ldr	r3, [pc, #732]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d053      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6a:	4bb4      	ldr	r3, [pc, #720]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	099b      	lsrs	r3, r3, #6
 8001c70:	461a      	mov	r2, r3
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c7a:	f04f 0100 	mov.w	r1, #0
 8001c7e:	ea02 0400 	and.w	r4, r2, r0
 8001c82:	603c      	str	r4, [r7, #0]
 8001c84:	400b      	ands	r3, r1
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	4629      	mov	r1, r5
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	014b      	lsls	r3, r1, #5
 8001c9a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c9e:	0142      	lsls	r2, r0, #5
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4623      	mov	r3, r4
 8001ca6:	1ac0      	subs	r0, r0, r3
 8001ca8:	462b      	mov	r3, r5
 8001caa:	eb61 0103 	sbc.w	r1, r1, r3
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	018b      	lsls	r3, r1, #6
 8001cb8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cbc:	0182      	lsls	r2, r0, #6
 8001cbe:	1a12      	subs	r2, r2, r0
 8001cc0:	eb63 0301 	sbc.w	r3, r3, r1
 8001cc4:	f04f 0000 	mov.w	r0, #0
 8001cc8:	f04f 0100 	mov.w	r1, #0
 8001ccc:	00d9      	lsls	r1, r3, #3
 8001cce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cd2:	00d0      	lsls	r0, r2, #3
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4621      	mov	r1, r4
 8001cda:	1852      	adds	r2, r2, r1
 8001cdc:	4629      	mov	r1, r5
 8001cde:	eb43 0101 	adc.w	r1, r3, r1
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	f04f 0000 	mov.w	r0, #0
 8001ce8:	f04f 0100 	mov.w	r1, #0
 8001cec:	0259      	lsls	r1, r3, #9
 8001cee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001cf2:	0250      	lsls	r0, r2, #9
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	f7fe fa80 	bl	8000208 <__aeabi_uldivmod>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	e04c      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d12:	4b8a      	ldr	r3, [pc, #552]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	099b      	lsrs	r3, r3, #6
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d22:	f04f 0100 	mov.w	r1, #0
 8001d26:	ea02 0a00 	and.w	sl, r2, r0
 8001d2a:	ea03 0b01 	and.w	fp, r3, r1
 8001d2e:	4650      	mov	r0, sl
 8001d30:	4659      	mov	r1, fp
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	014b      	lsls	r3, r1, #5
 8001d3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d40:	0142      	lsls	r2, r0, #5
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	ebb0 000a 	subs.w	r0, r0, sl
 8001d4a:	eb61 010b 	sbc.w	r1, r1, fp
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	018b      	lsls	r3, r1, #6
 8001d58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d5c:	0182      	lsls	r2, r0, #6
 8001d5e:	1a12      	subs	r2, r2, r0
 8001d60:	eb63 0301 	sbc.w	r3, r3, r1
 8001d64:	f04f 0000 	mov.w	r0, #0
 8001d68:	f04f 0100 	mov.w	r1, #0
 8001d6c:	00d9      	lsls	r1, r3, #3
 8001d6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d72:	00d0      	lsls	r0, r2, #3
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	eb12 020a 	adds.w	r2, r2, sl
 8001d7c:	eb43 030b 	adc.w	r3, r3, fp
 8001d80:	f04f 0000 	mov.w	r0, #0
 8001d84:	f04f 0100 	mov.w	r1, #0
 8001d88:	0299      	lsls	r1, r3, #10
 8001d8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d8e:	0290      	lsls	r0, r2, #10
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	f7fe fa32 	bl	8000208 <__aeabi_uldivmod>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4613      	mov	r3, r2
 8001daa:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dac:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	3301      	adds	r3, #1
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001dbc:	69fa      	ldr	r2, [r7, #28]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	61bb      	str	r3, [r7, #24]
      break;
 8001dc6:	e0b2      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc8:	4b5c      	ldr	r3, [pc, #368]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dd0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dd2:	4b5a      	ldr	r3, [pc, #360]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d04d      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dde:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	099b      	lsrs	r3, r3, #6
 8001de4:	461a      	mov	r2, r3
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dee:	f04f 0100 	mov.w	r1, #0
 8001df2:	ea02 0800 	and.w	r8, r2, r0
 8001df6:	ea03 0901 	and.w	r9, r3, r1
 8001dfa:	4640      	mov	r0, r8
 8001dfc:	4649      	mov	r1, r9
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	014b      	lsls	r3, r1, #5
 8001e08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e0c:	0142      	lsls	r2, r0, #5
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	ebb0 0008 	subs.w	r0, r0, r8
 8001e16:	eb61 0109 	sbc.w	r1, r1, r9
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	018b      	lsls	r3, r1, #6
 8001e24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e28:	0182      	lsls	r2, r0, #6
 8001e2a:	1a12      	subs	r2, r2, r0
 8001e2c:	eb63 0301 	sbc.w	r3, r3, r1
 8001e30:	f04f 0000 	mov.w	r0, #0
 8001e34:	f04f 0100 	mov.w	r1, #0
 8001e38:	00d9      	lsls	r1, r3, #3
 8001e3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e3e:	00d0      	lsls	r0, r2, #3
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	eb12 0208 	adds.w	r2, r2, r8
 8001e48:	eb43 0309 	adc.w	r3, r3, r9
 8001e4c:	f04f 0000 	mov.w	r0, #0
 8001e50:	f04f 0100 	mov.w	r1, #0
 8001e54:	0259      	lsls	r1, r3, #9
 8001e56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e5a:	0250      	lsls	r0, r2, #9
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	461a      	mov	r2, r3
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	f7fe f9cc 	bl	8000208 <__aeabi_uldivmod>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4613      	mov	r3, r2
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	e04a      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7a:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	099b      	lsrs	r3, r3, #6
 8001e80:	461a      	mov	r2, r3
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e8a:	f04f 0100 	mov.w	r1, #0
 8001e8e:	ea02 0400 	and.w	r4, r2, r0
 8001e92:	ea03 0501 	and.w	r5, r3, r1
 8001e96:	4620      	mov	r0, r4
 8001e98:	4629      	mov	r1, r5
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	014b      	lsls	r3, r1, #5
 8001ea4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ea8:	0142      	lsls	r2, r0, #5
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	1b00      	subs	r0, r0, r4
 8001eb0:	eb61 0105 	sbc.w	r1, r1, r5
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	018b      	lsls	r3, r1, #6
 8001ebe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ec2:	0182      	lsls	r2, r0, #6
 8001ec4:	1a12      	subs	r2, r2, r0
 8001ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eca:	f04f 0000 	mov.w	r0, #0
 8001ece:	f04f 0100 	mov.w	r1, #0
 8001ed2:	00d9      	lsls	r1, r3, #3
 8001ed4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ed8:	00d0      	lsls	r0, r2, #3
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	1912      	adds	r2, r2, r4
 8001ee0:	eb45 0303 	adc.w	r3, r5, r3
 8001ee4:	f04f 0000 	mov.w	r0, #0
 8001ee8:	f04f 0100 	mov.w	r1, #0
 8001eec:	0299      	lsls	r1, r3, #10
 8001eee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ef2:	0290      	lsls	r0, r2, #10
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	461a      	mov	r2, r3
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	f7fe f980 	bl	8000208 <__aeabi_uldivmod>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	0f1b      	lsrs	r3, r3, #28
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f24:	61bb      	str	r3, [r7, #24]
      break;
 8001f26:	e002      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f2a:	61bb      	str	r3, [r7, #24]
      break;
 8001f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3720      	adds	r7, #32
 8001f34:	46bd      	mov	sp, r7
 8001f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	00f42400 	.word	0x00f42400
 8001f44:	007a1200 	.word	0x007a1200

08001f48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e28d      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8083 	beq.w	800206e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f68:	4b94      	ldr	r3, [pc, #592]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d019      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f74:	4b91      	ldr	r3, [pc, #580]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f80:	4b8e      	ldr	r3, [pc, #568]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8e:	4b8b      	ldr	r3, [pc, #556]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	d112      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9a:	4b88      	ldr	r3, [pc, #544]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	4b84      	ldr	r3, [pc, #528]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d05b      	beq.n	800206c <HAL_RCC_OscConfig+0x124>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d157      	bne.n	800206c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e25a      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d106      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x90>
 8001fca:	4b7c      	ldr	r3, [pc, #496]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a7b      	ldr	r2, [pc, #492]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e01d      	b.n	8002014 <HAL_RCC_OscConfig+0xcc>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0xb4>
 8001fe2:	4b76      	ldr	r3, [pc, #472]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a75      	ldr	r2, [pc, #468]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b73      	ldr	r3, [pc, #460]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a72      	ldr	r2, [pc, #456]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0xcc>
 8001ffc:	4b6f      	ldr	r3, [pc, #444]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6e      	ldr	r2, [pc, #440]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b6c      	ldr	r3, [pc, #432]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a6b      	ldr	r2, [pc, #428]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff f92e 	bl	800127c <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff f92a 	bl	800127c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e21f      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	4b61      	ldr	r3, [pc, #388]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0xdc>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7ff f91a 	bl	800127c <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800204c:	f7ff f916 	bl	800127c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e20b      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	4b57      	ldr	r3, [pc, #348]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x104>
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d06f      	beq.n	800215a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800207a:	4b50      	ldr	r3, [pc, #320]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b00      	cmp	r3, #0
 8002084:	d017      	beq.n	80020b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002086:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800208e:	2b08      	cmp	r3, #8
 8002090:	d105      	bne.n	800209e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002092:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209e:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020a6:	2b0c      	cmp	r3, #12
 80020a8:	d11c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020aa:	4b44      	ldr	r3, [pc, #272]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d116      	bne.n	80020e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b6:	4b41      	ldr	r3, [pc, #260]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_RCC_OscConfig+0x186>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e1d3      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ce:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4937      	ldr	r1, [pc, #220]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e2:	e03a      	b.n	800215a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d020      	beq.n	800212e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ec:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <HAL_RCC_OscConfig+0x278>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7ff f8c3 	bl	800127c <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020fa:	f7ff f8bf 	bl	800127c <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e1b4      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4925      	ldr	r1, [pc, #148]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002128:	4313      	orrs	r3, r2
 800212a:	600b      	str	r3, [r1, #0]
 800212c:	e015      	b.n	800215a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_RCC_OscConfig+0x278>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7ff f8a2 	bl	800127c <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800213c:	f7ff f89e 	bl	800127c <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e193      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d036      	beq.n	80021d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d016      	beq.n	800219c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_RCC_OscConfig+0x27c>)
 8002170:	2201      	movs	r2, #1
 8002172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002174:	f7ff f882 	bl	800127c <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800217c:	f7ff f87e 	bl	800127c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e173      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x234>
 800219a:	e01b      	b.n	80021d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_RCC_OscConfig+0x27c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a2:	f7ff f86b 	bl	800127c <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a8:	e00e      	b.n	80021c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021aa:	f7ff f867 	bl	800127c <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d907      	bls.n	80021c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e15c      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
 80021bc:	40023800 	.word	0x40023800
 80021c0:	42470000 	.word	0x42470000
 80021c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c8:	4b8a      	ldr	r3, [pc, #552]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80021ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ea      	bne.n	80021aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 8097 	beq.w	8002310 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e6:	4b83      	ldr	r3, [pc, #524]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10f      	bne.n	8002212 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	4b7f      	ldr	r3, [pc, #508]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	4a7e      	ldr	r2, [pc, #504]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80021fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002200:	6413      	str	r3, [r2, #64]	; 0x40
 8002202:	4b7c      	ldr	r3, [pc, #496]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220e:	2301      	movs	r3, #1
 8002210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002212:	4b79      	ldr	r3, [pc, #484]	; (80023f8 <HAL_RCC_OscConfig+0x4b0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d118      	bne.n	8002250 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221e:	4b76      	ldr	r3, [pc, #472]	; (80023f8 <HAL_RCC_OscConfig+0x4b0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a75      	ldr	r2, [pc, #468]	; (80023f8 <HAL_RCC_OscConfig+0x4b0>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222a:	f7ff f827 	bl	800127c <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002232:	f7ff f823 	bl	800127c <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e118      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	4b6c      	ldr	r3, [pc, #432]	; (80023f8 <HAL_RCC_OscConfig+0x4b0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d106      	bne.n	8002266 <HAL_RCC_OscConfig+0x31e>
 8002258:	4b66      	ldr	r3, [pc, #408]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	4a65      	ldr	r2, [pc, #404]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6713      	str	r3, [r2, #112]	; 0x70
 8002264:	e01c      	b.n	80022a0 <HAL_RCC_OscConfig+0x358>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b05      	cmp	r3, #5
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x340>
 800226e:	4b61      	ldr	r3, [pc, #388]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	4a60      	ldr	r2, [pc, #384]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	6713      	str	r3, [r2, #112]	; 0x70
 800227a:	4b5e      	ldr	r3, [pc, #376]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	4a5d      	ldr	r2, [pc, #372]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6713      	str	r3, [r2, #112]	; 0x70
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0x358>
 8002288:	4b5a      	ldr	r3, [pc, #360]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	4a59      	ldr	r2, [pc, #356]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	6713      	str	r3, [r2, #112]	; 0x70
 8002294:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	4a56      	ldr	r2, [pc, #344]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800229a:	f023 0304 	bic.w	r3, r3, #4
 800229e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d015      	beq.n	80022d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a8:	f7fe ffe8 	bl	800127c <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7fe ffe4 	bl	800127c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e0d7      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c6:	4b4b      	ldr	r3, [pc, #300]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80022c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0ee      	beq.n	80022b0 <HAL_RCC_OscConfig+0x368>
 80022d2:	e014      	b.n	80022fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d4:	f7fe ffd2 	bl	800127c <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022dc:	f7fe ffce 	bl	800127c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e0c1      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f2:	4b40      	ldr	r3, [pc, #256]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1ee      	bne.n	80022dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d105      	bne.n	8002310 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002304:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800230a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800230e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80ad 	beq.w	8002474 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800231a:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b08      	cmp	r3, #8
 8002324:	d060      	beq.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d145      	bne.n	80023ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232e:	4b33      	ldr	r3, [pc, #204]	; (80023fc <HAL_RCC_OscConfig+0x4b4>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7fe ffa2 	bl	800127c <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233c:	f7fe ff9e 	bl	800127c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e093      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69da      	ldr	r2, [r3, #28]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	019b      	lsls	r3, r3, #6
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	085b      	lsrs	r3, r3, #1
 8002372:	3b01      	subs	r3, #1
 8002374:	041b      	lsls	r3, r3, #16
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	061b      	lsls	r3, r3, #24
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	071b      	lsls	r3, r3, #28
 8002386:	491b      	ldr	r1, [pc, #108]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_RCC_OscConfig+0x4b4>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe ff73 	bl	800127c <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239a:	f7fe ff6f 	bl	800127c <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e064      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x452>
 80023b8:	e05c      	b.n	8002474 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_RCC_OscConfig+0x4b4>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe ff5c 	bl	800127c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe ff58 	bl	800127c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e04d      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x480>
 80023e6:	e045      	b.n	8002474 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d107      	bne.n	8002400 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e040      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40007000 	.word	0x40007000
 80023fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002400:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <HAL_RCC_OscConfig+0x538>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d030      	beq.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d129      	bne.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d122      	bne.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002430:	4013      	ands	r3, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002438:	4293      	cmp	r3, r2
 800243a:	d119      	bne.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	085b      	lsrs	r3, r3, #1
 8002448:	3b01      	subs	r3, #1
 800244a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d10f      	bne.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d107      	bne.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800

08002484 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e07b      	b.n	800258e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	2b00      	cmp	r3, #0
 800249c:	d108      	bne.n	80024b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024a6:	d009      	beq.n	80024bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
 80024ae:	e005      	b.n	80024bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fe fd60 	bl	8000f9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002504:	431a      	orrs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002540:	ea42 0103 	orr.w	r1, r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	0c1b      	lsrs	r3, r3, #16
 800255a:	f003 0104 	and.w	r1, r3, #4
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	f003 0210 	and.w	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69da      	ldr	r2, [r3, #28]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800257c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b088      	sub	sp, #32
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	4613      	mov	r3, r2
 80025a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_SPI_Transmit+0x22>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e126      	b.n	8002806 <HAL_SPI_Transmit+0x270>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025c0:	f7fe fe5c 	bl	800127c <HAL_GetTick>
 80025c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d002      	beq.n	80025dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80025d6:	2302      	movs	r3, #2
 80025d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025da:	e10b      	b.n	80027f4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <HAL_SPI_Transmit+0x52>
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025ec:	e102      	b.n	80027f4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2203      	movs	r2, #3
 80025f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	88fa      	ldrh	r2, [r7, #6]
 8002606:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	88fa      	ldrh	r2, [r7, #6]
 800260c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002634:	d10f      	bne.n	8002656 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002644:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002654:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002660:	2b40      	cmp	r3, #64	; 0x40
 8002662:	d007      	beq.n	8002674 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002672:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800267c:	d14b      	bne.n	8002716 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <HAL_SPI_Transmit+0xf6>
 8002686:	8afb      	ldrh	r3, [r7, #22]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d13e      	bne.n	800270a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	881a      	ldrh	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	1c9a      	adds	r2, r3, #2
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026b0:	e02b      	b.n	800270a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d112      	bne.n	80026e6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	881a      	ldrh	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	1c9a      	adds	r2, r3, #2
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80026e4:	e011      	b.n	800270a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026e6:	f7fe fdc9 	bl	800127c <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d803      	bhi.n	80026fe <HAL_SPI_Transmit+0x168>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d102      	bne.n	8002704 <HAL_SPI_Transmit+0x16e>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002708:	e074      	b.n	80027f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1ce      	bne.n	80026b2 <HAL_SPI_Transmit+0x11c>
 8002714:	e04c      	b.n	80027b0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_SPI_Transmit+0x18e>
 800271e:	8afb      	ldrh	r3, [r7, #22]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d140      	bne.n	80027a6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	330c      	adds	r3, #12
 800272e:	7812      	ldrb	r2, [r2, #0]
 8002730:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800274a:	e02c      	b.n	80027a6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b02      	cmp	r3, #2
 8002758:	d113      	bne.n	8002782 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	330c      	adds	r3, #12
 8002764:	7812      	ldrb	r2, [r2, #0]
 8002766:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002776:	b29b      	uxth	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002780:	e011      	b.n	80027a6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002782:	f7fe fd7b 	bl	800127c <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d803      	bhi.n	800279a <HAL_SPI_Transmit+0x204>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002798:	d102      	bne.n	80027a0 <HAL_SPI_Transmit+0x20a>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d102      	bne.n	80027a6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027a4:	e026      	b.n	80027f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1cd      	bne.n	800274c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	6839      	ldr	r1, [r7, #0]
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 fd21 	bl	80031fc <SPI_EndRxTxTransaction>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	77fb      	strb	r3, [r7, #31]
 80027f0:	e000      	b.n	80027f4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80027f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002804:	7ffb      	ldrb	r3, [r7, #31]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b088      	sub	sp, #32
 8002812:	af02      	add	r7, sp, #8
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	4613      	mov	r3, r2
 800281c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800282a:	d112      	bne.n	8002852 <HAL_SPI_Receive+0x44>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10e      	bne.n	8002852 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2204      	movs	r2, #4
 8002838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800283c:	88fa      	ldrh	r2, [r7, #6]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f8f1 	bl	8002a30 <HAL_SPI_TransmitReceive>
 800284e:	4603      	mov	r3, r0
 8002850:	e0ea      	b.n	8002a28 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_SPI_Receive+0x52>
 800285c:	2302      	movs	r3, #2
 800285e:	e0e3      	b.n	8002a28 <HAL_SPI_Receive+0x21a>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002868:	f7fe fd08 	bl	800127c <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d002      	beq.n	8002880 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800287a:	2302      	movs	r3, #2
 800287c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800287e:	e0ca      	b.n	8002a16 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_SPI_Receive+0x7e>
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002890:	e0c1      	b.n	8002a16 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2204      	movs	r2, #4
 8002896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	88fa      	ldrh	r2, [r7, #6]
 80028aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	88fa      	ldrh	r2, [r7, #6]
 80028b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d8:	d10f      	bne.n	80028fa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028f8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002904:	2b40      	cmp	r3, #64	; 0x40
 8002906:	d007      	beq.n	8002918 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002916:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d162      	bne.n	80029e6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002920:	e02e      	b.n	8002980 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b01      	cmp	r3, #1
 800292e:	d115      	bne.n	800295c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f103 020c 	add.w	r2, r3, #12
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	7812      	ldrb	r2, [r2, #0]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	87da      	strh	r2, [r3, #62]	; 0x3e
 800295a:	e011      	b.n	8002980 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800295c:	f7fe fc8e 	bl	800127c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d803      	bhi.n	8002974 <HAL_SPI_Receive+0x166>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002972:	d102      	bne.n	800297a <HAL_SPI_Receive+0x16c>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800297e:	e04a      	b.n	8002a16 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1cb      	bne.n	8002922 <HAL_SPI_Receive+0x114>
 800298a:	e031      	b.n	80029f0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b01      	cmp	r3, #1
 8002998:	d113      	bne.n	80029c2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a4:	b292      	uxth	r2, r2
 80029a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	1c9a      	adds	r2, r3, #2
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029c0:	e011      	b.n	80029e6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029c2:	f7fe fc5b 	bl	800127c <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d803      	bhi.n	80029da <HAL_SPI_Receive+0x1cc>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d8:	d102      	bne.n	80029e0 <HAL_SPI_Receive+0x1d2>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80029e4:	e017      	b.n	8002a16 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1cd      	bne.n	800298c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	6839      	ldr	r1, [r7, #0]
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fb9b 	bl	8003130 <SPI_EndRxTransaction>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	75fb      	strb	r3, [r7, #23]
 8002a12:	e000      	b.n	8002a16 <HAL_SPI_Receive+0x208>
  }

error :
 8002a14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08c      	sub	sp, #48	; 0x30
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_SPI_TransmitReceive+0x26>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e18a      	b.n	8002d6c <HAL_SPI_TransmitReceive+0x33c>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a5e:	f7fe fc0d 	bl	800127c <HAL_GetTick>
 8002a62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a74:	887b      	ldrh	r3, [r7, #2]
 8002a76:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d00f      	beq.n	8002aa0 <HAL_SPI_TransmitReceive+0x70>
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a86:	d107      	bne.n	8002a98 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d103      	bne.n	8002a98 <HAL_SPI_TransmitReceive+0x68>
 8002a90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d003      	beq.n	8002aa0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a9e:	e15b      	b.n	8002d58 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_SPI_TransmitReceive+0x82>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_SPI_TransmitReceive+0x82>
 8002aac:	887b      	ldrh	r3, [r7, #2]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d103      	bne.n	8002aba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ab8:	e14e      	b.n	8002d58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d003      	beq.n	8002ace <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2205      	movs	r2, #5
 8002aca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	887a      	ldrh	r2, [r7, #2]
 8002ade:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	887a      	ldrh	r2, [r7, #2]
 8002af0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	887a      	ldrh	r2, [r7, #2]
 8002af6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b40      	cmp	r3, #64	; 0x40
 8002b10:	d007      	beq.n	8002b22 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b2a:	d178      	bne.n	8002c1e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_SPI_TransmitReceive+0x10a>
 8002b34:	8b7b      	ldrh	r3, [r7, #26]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d166      	bne.n	8002c08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	881a      	ldrh	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	1c9a      	adds	r2, r3, #2
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b5e:	e053      	b.n	8002c08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d11b      	bne.n	8002ba6 <HAL_SPI_TransmitReceive+0x176>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d016      	beq.n	8002ba6 <HAL_SPI_TransmitReceive+0x176>
 8002b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d113      	bne.n	8002ba6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	881a      	ldrh	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	1c9a      	adds	r2, r3, #2
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d119      	bne.n	8002be8 <HAL_SPI_TransmitReceive+0x1b8>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d014      	beq.n	8002be8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	b292      	uxth	r2, r2
 8002bca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	1c9a      	adds	r2, r3, #2
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002be4:	2301      	movs	r3, #1
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002be8:	f7fe fb48 	bl	800127c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d807      	bhi.n	8002c08 <HAL_SPI_TransmitReceive+0x1d8>
 8002bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfe:	d003      	beq.n	8002c08 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c06:	e0a7      	b.n	8002d58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1a6      	bne.n	8002b60 <HAL_SPI_TransmitReceive+0x130>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1a1      	bne.n	8002b60 <HAL_SPI_TransmitReceive+0x130>
 8002c1c:	e07c      	b.n	8002d18 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_SPI_TransmitReceive+0x1fc>
 8002c26:	8b7b      	ldrh	r3, [r7, #26]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d16b      	bne.n	8002d04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	330c      	adds	r3, #12
 8002c36:	7812      	ldrb	r2, [r2, #0]
 8002c38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c52:	e057      	b.n	8002d04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d11c      	bne.n	8002c9c <HAL_SPI_TransmitReceive+0x26c>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d017      	beq.n	8002c9c <HAL_SPI_TransmitReceive+0x26c>
 8002c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d114      	bne.n	8002c9c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	330c      	adds	r3, #12
 8002c7c:	7812      	ldrb	r2, [r2, #0]
 8002c7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d119      	bne.n	8002cde <HAL_SPI_TransmitReceive+0x2ae>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d014      	beq.n	8002cde <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cde:	f7fe facd 	bl	800127c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d803      	bhi.n	8002cf6 <HAL_SPI_TransmitReceive+0x2c6>
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d102      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x2cc>
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d103      	bne.n	8002d04 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d02:	e029      	b.n	8002d58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1a2      	bne.n	8002c54 <HAL_SPI_TransmitReceive+0x224>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d19d      	bne.n	8002c54 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fa6d 	bl	80031fc <SPI_EndRxTxTransaction>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d006      	beq.n	8002d36 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d34:	e010      	b.n	8002d58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10b      	bne.n	8002d56 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	e000      	b.n	8002d58 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002d56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3730      	adds	r7, #48	; 0x30
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_SPI_Transmit_DMA+0x20>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e09b      	b.n	8002ecc <HAL_SPI_Transmit_DMA+0x158>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d002      	beq.n	8002dae <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
 8002daa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dac:	e089      	b.n	8002ec2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <HAL_SPI_Transmit_DMA+0x46>
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dbe:	e080      	b.n	8002ec2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	88fa      	ldrh	r2, [r7, #6]
 8002dd8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	88fa      	ldrh	r2, [r7, #6]
 8002dde:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e06:	d10f      	bne.n	8002e28 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e26:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2c:	4a29      	ldr	r2, [pc, #164]	; (8002ed4 <HAL_SPI_Transmit_DMA+0x160>)
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e34:	4a28      	ldr	r2, [pc, #160]	; (8002ed8 <HAL_SPI_Transmit_DMA+0x164>)
 8002e36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3c:	4a27      	ldr	r2, [pc, #156]	; (8002edc <HAL_SPI_Transmit_DMA+0x168>)
 8002e3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e44:	2200      	movs	r2, #0
 8002e46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	4619      	mov	r1, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002e60:	f7fe fb4d 	bl	80014fe <HAL_DMA_Start_IT>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00c      	beq.n	8002e84 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6e:	f043 0210 	orr.w	r2, r3, #16
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002e82:	e01e      	b.n	8002ec2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8e:	2b40      	cmp	r3, #64	; 0x40
 8002e90:	d007      	beq.n	8002ea2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ea0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0220 	orr.w	r2, r2, #32
 8002eb0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0202 	orr.w	r2, r2, #2
 8002ec0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	08002fc5 	.word	0x08002fc5
 8002ed8:	08002f1d 	.word	0x08002f1d
 8002edc:	08002fe1 	.word	0x08002fe1

08002ee0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f2a:	f7fe f9a7 	bl	800127c <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f3e:	d03b      	beq.n	8002fb8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0220 	bic.w	r2, r2, #32
 8002f4e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0202 	bic.w	r2, r2, #2
 8002f5e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	2164      	movs	r1, #100	; 0x64
 8002f64:	6978      	ldr	r0, [r7, #20]
 8002f66:	f000 f949 	bl	80031fc <SPI_EndRxTxTransaction>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f74:	f043 0220 	orr.w	r2, r3, #32
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002fb0:	6978      	ldr	r0, [r7, #20]
 8002fb2:	f7ff ffa9 	bl	8002f08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002fb6:	e002      	b.n	8002fbe <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002fb8:	6978      	ldr	r0, [r7, #20]
 8002fba:	f7ff ff91 	bl	8002ee0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f7ff ff8e 	bl	8002ef4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002fd8:	bf00      	nop
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0203 	bic.w	r2, r2, #3
 8002ffc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	f043 0210 	orr.w	r2, r3, #16
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7ff ff78 	bl	8002f08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	4613      	mov	r3, r2
 800302e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003030:	f7fe f924 	bl	800127c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	4413      	add	r3, r2
 800303e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003040:	f7fe f91c 	bl	800127c <HAL_GetTick>
 8003044:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003046:	4b39      	ldr	r3, [pc, #228]	; (800312c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	015b      	lsls	r3, r3, #5
 800304c:	0d1b      	lsrs	r3, r3, #20
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003056:	e054      	b.n	8003102 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305e:	d050      	beq.n	8003102 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003060:	f7fe f90c 	bl	800127c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	429a      	cmp	r2, r3
 800306e:	d902      	bls.n	8003076 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d13d      	bne.n	80030f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003084:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800308e:	d111      	bne.n	80030b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003098:	d004      	beq.n	80030a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a2:	d107      	bne.n	80030b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030bc:	d10f      	bne.n	80030de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e017      	b.n	8003122 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	3b01      	subs	r3, #1
 8003100:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4013      	ands	r3, r2
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	429a      	cmp	r2, r3
 8003110:	bf0c      	ite	eq
 8003112:	2301      	moveq	r3, #1
 8003114:	2300      	movne	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	429a      	cmp	r2, r3
 800311e:	d19b      	bne.n	8003058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000030 	.word	0x20000030

08003130 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af02      	add	r7, sp, #8
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003144:	d111      	bne.n	800316a <SPI_EndRxTransaction+0x3a>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800314e:	d004      	beq.n	800315a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003158:	d107      	bne.n	800316a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003168:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003172:	d12a      	bne.n	80031ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317c:	d012      	beq.n	80031a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2200      	movs	r2, #0
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff ff49 	bl	8003020 <SPI_WaitFlagStateUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d02d      	beq.n	80031f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003198:	f043 0220 	orr.w	r2, r3, #32
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e026      	b.n	80031f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2200      	movs	r2, #0
 80031ac:	2101      	movs	r1, #1
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f7ff ff36 	bl	8003020 <SPI_WaitFlagStateUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d01a      	beq.n	80031f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	f043 0220 	orr.w	r2, r3, #32
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e013      	b.n	80031f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2200      	movs	r2, #0
 80031d2:	2101      	movs	r1, #1
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f7ff ff23 	bl	8003020 <SPI_WaitFlagStateUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d007      	beq.n	80031f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e4:	f043 0220 	orr.w	r2, r3, #32
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e000      	b.n	80031f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af02      	add	r7, sp, #8
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003208:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <SPI_EndRxTxTransaction+0x7c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1b      	ldr	r2, [pc, #108]	; (800327c <SPI_EndRxTxTransaction+0x80>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	0d5b      	lsrs	r3, r3, #21
 8003214:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003218:	fb02 f303 	mul.w	r3, r2, r3
 800321c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003226:	d112      	bne.n	800324e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2200      	movs	r2, #0
 8003230:	2180      	movs	r1, #128	; 0x80
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f7ff fef4 	bl	8003020 <SPI_WaitFlagStateUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d016      	beq.n	800326c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003242:	f043 0220 	orr.w	r2, r3, #32
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e00f      	b.n	800326e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	3b01      	subs	r3, #1
 8003258:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003264:	2b80      	cmp	r3, #128	; 0x80
 8003266:	d0f2      	beq.n	800324e <SPI_EndRxTxTransaction+0x52>
 8003268:	e000      	b.n	800326c <SPI_EndRxTxTransaction+0x70>
        break;
 800326a:	bf00      	nop
  }

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000030 	.word	0x20000030
 800327c:	165e9f81 	.word	0x165e9f81

08003280 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e03f      	b.n	8003312 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fd fec0 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2224      	movs	r2, #36	; 0x24
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f929 	bl	800351c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b08a      	sub	sp, #40	; 0x28
 800331e:	af02      	add	r7, sp, #8
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	603b      	str	r3, [r7, #0]
 8003326:	4613      	mov	r3, r2
 8003328:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b20      	cmp	r3, #32
 8003338:	d17c      	bne.n	8003434 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HAL_UART_Transmit+0x2c>
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e075      	b.n	8003436 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_UART_Transmit+0x3e>
 8003354:	2302      	movs	r3, #2
 8003356:	e06e      	b.n	8003436 <HAL_UART_Transmit+0x11c>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2221      	movs	r2, #33	; 0x21
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800336e:	f7fd ff85 	bl	800127c <HAL_GetTick>
 8003372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	88fa      	ldrh	r2, [r7, #6]
 8003378:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	88fa      	ldrh	r2, [r7, #6]
 800337e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003388:	d108      	bne.n	800339c <HAL_UART_Transmit+0x82>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d104      	bne.n	800339c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	e003      	b.n	80033a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033ac:	e02a      	b.n	8003404 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2200      	movs	r2, #0
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f840 	bl	800343e <UART_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e036      	b.n	8003436 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10b      	bne.n	80033e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	3302      	adds	r3, #2
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	e007      	b.n	80033f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	3301      	adds	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1cf      	bne.n	80033ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2200      	movs	r2, #0
 8003416:	2140      	movs	r1, #64	; 0x40
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f810 	bl	800343e <UART_WaitOnFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e006      	b.n	8003436 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	e000      	b.n	8003436 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003434:	2302      	movs	r3, #2
  }
}
 8003436:	4618      	mov	r0, r3
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b090      	sub	sp, #64	; 0x40
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	603b      	str	r3, [r7, #0]
 800344a:	4613      	mov	r3, r2
 800344c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800344e:	e050      	b.n	80034f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003456:	d04c      	beq.n	80034f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0x30>
 800345e:	f7fd ff0d 	bl	800127c <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800346a:	429a      	cmp	r2, r3
 800346c:	d241      	bcs.n	80034f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	330c      	adds	r3, #12
 8003474:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	330c      	adds	r3, #12
 800348c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800348e:	637a      	str	r2, [r7, #52]	; 0x34
 8003490:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e5      	bne.n	800346e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3314      	adds	r3, #20
 80034a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	613b      	str	r3, [r7, #16]
   return(result);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3314      	adds	r3, #20
 80034c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034c2:	623a      	str	r2, [r7, #32]
 80034c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	69f9      	ldr	r1, [r7, #28]
 80034c8:	6a3a      	ldr	r2, [r7, #32]
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e5      	bne.n	80034a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e00f      	b.n	8003512 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4013      	ands	r3, r2
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	429a      	cmp	r2, r3
 8003500:	bf0c      	ite	eq
 8003502:	2301      	moveq	r3, #1
 8003504:	2300      	movne	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	461a      	mov	r2, r3
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	429a      	cmp	r2, r3
 800350e:	d09f      	beq.n	8003450 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3740      	adds	r7, #64	; 0x40
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800351c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003520:	b09f      	sub	sp, #124	; 0x7c
 8003522:	af00      	add	r7, sp, #0
 8003524:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003532:	68d9      	ldr	r1, [r3, #12]
 8003534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	ea40 0301 	orr.w	r3, r0, r1
 800353c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800353e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	431a      	orrs	r2, r3
 8003548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	431a      	orrs	r2, r3
 800354e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	4313      	orrs	r3, r2
 8003554:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003560:	f021 010c 	bic.w	r1, r1, #12
 8003564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800356a:	430b      	orrs	r3, r1
 800356c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800356e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357a:	6999      	ldr	r1, [r3, #24]
 800357c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	ea40 0301 	orr.w	r3, r0, r1
 8003584:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4bc5      	ldr	r3, [pc, #788]	; (80038a0 <UART_SetConfig+0x384>)
 800358c:	429a      	cmp	r2, r3
 800358e:	d004      	beq.n	800359a <UART_SetConfig+0x7e>
 8003590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4bc3      	ldr	r3, [pc, #780]	; (80038a4 <UART_SetConfig+0x388>)
 8003596:	429a      	cmp	r2, r3
 8003598:	d103      	bne.n	80035a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800359a:	f7fe fb0f 	bl	8001bbc <HAL_RCC_GetPCLK2Freq>
 800359e:	6778      	str	r0, [r7, #116]	; 0x74
 80035a0:	e002      	b.n	80035a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035a2:	f7fe faf7 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 80035a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b0:	f040 80b6 	bne.w	8003720 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b6:	461c      	mov	r4, r3
 80035b8:	f04f 0500 	mov.w	r5, #0
 80035bc:	4622      	mov	r2, r4
 80035be:	462b      	mov	r3, r5
 80035c0:	1891      	adds	r1, r2, r2
 80035c2:	6439      	str	r1, [r7, #64]	; 0x40
 80035c4:	415b      	adcs	r3, r3
 80035c6:	647b      	str	r3, [r7, #68]	; 0x44
 80035c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035cc:	1912      	adds	r2, r2, r4
 80035ce:	eb45 0303 	adc.w	r3, r5, r3
 80035d2:	f04f 0000 	mov.w	r0, #0
 80035d6:	f04f 0100 	mov.w	r1, #0
 80035da:	00d9      	lsls	r1, r3, #3
 80035dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035e0:	00d0      	lsls	r0, r2, #3
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	1911      	adds	r1, r2, r4
 80035e8:	6639      	str	r1, [r7, #96]	; 0x60
 80035ea:	416b      	adcs	r3, r5
 80035ec:	667b      	str	r3, [r7, #100]	; 0x64
 80035ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	461a      	mov	r2, r3
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	1891      	adds	r1, r2, r2
 80035fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80035fc:	415b      	adcs	r3, r3
 80035fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003604:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003608:	f7fc fdfe 	bl	8000208 <__aeabi_uldivmod>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4ba5      	ldr	r3, [pc, #660]	; (80038a8 <UART_SetConfig+0x38c>)
 8003612:	fba3 2302 	umull	r2, r3, r3, r2
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	011e      	lsls	r6, r3, #4
 800361a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800361c:	461c      	mov	r4, r3
 800361e:	f04f 0500 	mov.w	r5, #0
 8003622:	4622      	mov	r2, r4
 8003624:	462b      	mov	r3, r5
 8003626:	1891      	adds	r1, r2, r2
 8003628:	6339      	str	r1, [r7, #48]	; 0x30
 800362a:	415b      	adcs	r3, r3
 800362c:	637b      	str	r3, [r7, #52]	; 0x34
 800362e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003632:	1912      	adds	r2, r2, r4
 8003634:	eb45 0303 	adc.w	r3, r5, r3
 8003638:	f04f 0000 	mov.w	r0, #0
 800363c:	f04f 0100 	mov.w	r1, #0
 8003640:	00d9      	lsls	r1, r3, #3
 8003642:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003646:	00d0      	lsls	r0, r2, #3
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	1911      	adds	r1, r2, r4
 800364e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003650:	416b      	adcs	r3, r5
 8003652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	461a      	mov	r2, r3
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	1891      	adds	r1, r2, r2
 8003660:	62b9      	str	r1, [r7, #40]	; 0x28
 8003662:	415b      	adcs	r3, r3
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800366a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800366e:	f7fc fdcb 	bl	8000208 <__aeabi_uldivmod>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4b8c      	ldr	r3, [pc, #560]	; (80038a8 <UART_SetConfig+0x38c>)
 8003678:	fba3 1302 	umull	r1, r3, r3, r2
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	2164      	movs	r1, #100	; 0x64
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	3332      	adds	r3, #50	; 0x32
 800368a:	4a87      	ldr	r2, [pc, #540]	; (80038a8 <UART_SetConfig+0x38c>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003698:	441e      	add	r6, r3
 800369a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800369c:	4618      	mov	r0, r3
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	1894      	adds	r4, r2, r2
 80036a8:	623c      	str	r4, [r7, #32]
 80036aa:	415b      	adcs	r3, r3
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
 80036ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036b2:	1812      	adds	r2, r2, r0
 80036b4:	eb41 0303 	adc.w	r3, r1, r3
 80036b8:	f04f 0400 	mov.w	r4, #0
 80036bc:	f04f 0500 	mov.w	r5, #0
 80036c0:	00dd      	lsls	r5, r3, #3
 80036c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036c6:	00d4      	lsls	r4, r2, #3
 80036c8:	4622      	mov	r2, r4
 80036ca:	462b      	mov	r3, r5
 80036cc:	1814      	adds	r4, r2, r0
 80036ce:	653c      	str	r4, [r7, #80]	; 0x50
 80036d0:	414b      	adcs	r3, r1
 80036d2:	657b      	str	r3, [r7, #84]	; 0x54
 80036d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	461a      	mov	r2, r3
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	1891      	adds	r1, r2, r2
 80036e0:	61b9      	str	r1, [r7, #24]
 80036e2:	415b      	adcs	r3, r3
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80036ee:	f7fc fd8b 	bl	8000208 <__aeabi_uldivmod>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4b6c      	ldr	r3, [pc, #432]	; (80038a8 <UART_SetConfig+0x38c>)
 80036f8:	fba3 1302 	umull	r1, r3, r3, r2
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	2164      	movs	r1, #100	; 0x64
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	3332      	adds	r3, #50	; 0x32
 800370a:	4a67      	ldr	r2, [pc, #412]	; (80038a8 <UART_SetConfig+0x38c>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	095b      	lsrs	r3, r3, #5
 8003712:	f003 0207 	and.w	r2, r3, #7
 8003716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4432      	add	r2, r6
 800371c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800371e:	e0b9      	b.n	8003894 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003722:	461c      	mov	r4, r3
 8003724:	f04f 0500 	mov.w	r5, #0
 8003728:	4622      	mov	r2, r4
 800372a:	462b      	mov	r3, r5
 800372c:	1891      	adds	r1, r2, r2
 800372e:	6139      	str	r1, [r7, #16]
 8003730:	415b      	adcs	r3, r3
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003738:	1912      	adds	r2, r2, r4
 800373a:	eb45 0303 	adc.w	r3, r5, r3
 800373e:	f04f 0000 	mov.w	r0, #0
 8003742:	f04f 0100 	mov.w	r1, #0
 8003746:	00d9      	lsls	r1, r3, #3
 8003748:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800374c:	00d0      	lsls	r0, r2, #3
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	eb12 0804 	adds.w	r8, r2, r4
 8003756:	eb43 0905 	adc.w	r9, r3, r5
 800375a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	4618      	mov	r0, r3
 8003760:	f04f 0100 	mov.w	r1, #0
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	008b      	lsls	r3, r1, #2
 800376e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003772:	0082      	lsls	r2, r0, #2
 8003774:	4640      	mov	r0, r8
 8003776:	4649      	mov	r1, r9
 8003778:	f7fc fd46 	bl	8000208 <__aeabi_uldivmod>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4b49      	ldr	r3, [pc, #292]	; (80038a8 <UART_SetConfig+0x38c>)
 8003782:	fba3 2302 	umull	r2, r3, r3, r2
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	011e      	lsls	r6, r3, #4
 800378a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800378c:	4618      	mov	r0, r3
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	1894      	adds	r4, r2, r2
 8003798:	60bc      	str	r4, [r7, #8]
 800379a:	415b      	adcs	r3, r3
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037a2:	1812      	adds	r2, r2, r0
 80037a4:	eb41 0303 	adc.w	r3, r1, r3
 80037a8:	f04f 0400 	mov.w	r4, #0
 80037ac:	f04f 0500 	mov.w	r5, #0
 80037b0:	00dd      	lsls	r5, r3, #3
 80037b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037b6:	00d4      	lsls	r4, r2, #3
 80037b8:	4622      	mov	r2, r4
 80037ba:	462b      	mov	r3, r5
 80037bc:	1814      	adds	r4, r2, r0
 80037be:	64bc      	str	r4, [r7, #72]	; 0x48
 80037c0:	414b      	adcs	r3, r1
 80037c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f04f 0100 	mov.w	r1, #0
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	008b      	lsls	r3, r1, #2
 80037d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037dc:	0082      	lsls	r2, r0, #2
 80037de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80037e2:	f7fc fd11 	bl	8000208 <__aeabi_uldivmod>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4b2f      	ldr	r3, [pc, #188]	; (80038a8 <UART_SetConfig+0x38c>)
 80037ec:	fba3 1302 	umull	r1, r3, r3, r2
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	2164      	movs	r1, #100	; 0x64
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	3332      	adds	r3, #50	; 0x32
 80037fe:	4a2a      	ldr	r2, [pc, #168]	; (80038a8 <UART_SetConfig+0x38c>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800380a:	441e      	add	r6, r3
 800380c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800380e:	4618      	mov	r0, r3
 8003810:	f04f 0100 	mov.w	r1, #0
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	1894      	adds	r4, r2, r2
 800381a:	603c      	str	r4, [r7, #0]
 800381c:	415b      	adcs	r3, r3
 800381e:	607b      	str	r3, [r7, #4]
 8003820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003824:	1812      	adds	r2, r2, r0
 8003826:	eb41 0303 	adc.w	r3, r1, r3
 800382a:	f04f 0400 	mov.w	r4, #0
 800382e:	f04f 0500 	mov.w	r5, #0
 8003832:	00dd      	lsls	r5, r3, #3
 8003834:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003838:	00d4      	lsls	r4, r2, #3
 800383a:	4622      	mov	r2, r4
 800383c:	462b      	mov	r3, r5
 800383e:	eb12 0a00 	adds.w	sl, r2, r0
 8003842:	eb43 0b01 	adc.w	fp, r3, r1
 8003846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4618      	mov	r0, r3
 800384c:	f04f 0100 	mov.w	r1, #0
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	008b      	lsls	r3, r1, #2
 800385a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800385e:	0082      	lsls	r2, r0, #2
 8003860:	4650      	mov	r0, sl
 8003862:	4659      	mov	r1, fp
 8003864:	f7fc fcd0 	bl	8000208 <__aeabi_uldivmod>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <UART_SetConfig+0x38c>)
 800386e:	fba3 1302 	umull	r1, r3, r3, r2
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	2164      	movs	r1, #100	; 0x64
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	3332      	adds	r3, #50	; 0x32
 8003880:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <UART_SetConfig+0x38c>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	f003 020f 	and.w	r2, r3, #15
 800388c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4432      	add	r2, r6
 8003892:	609a      	str	r2, [r3, #8]
}
 8003894:	bf00      	nop
 8003896:	377c      	adds	r7, #124	; 0x7c
 8003898:	46bd      	mov	sp, r7
 800389a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800389e:	bf00      	nop
 80038a0:	40011000 	.word	0x40011000
 80038a4:	40011400 	.word	0x40011400
 80038a8:	51eb851f 	.word	0x51eb851f

080038ac <__libc_init_array>:
 80038ac:	b570      	push	{r4, r5, r6, lr}
 80038ae:	4d0d      	ldr	r5, [pc, #52]	; (80038e4 <__libc_init_array+0x38>)
 80038b0:	4c0d      	ldr	r4, [pc, #52]	; (80038e8 <__libc_init_array+0x3c>)
 80038b2:	1b64      	subs	r4, r4, r5
 80038b4:	10a4      	asrs	r4, r4, #2
 80038b6:	2600      	movs	r6, #0
 80038b8:	42a6      	cmp	r6, r4
 80038ba:	d109      	bne.n	80038d0 <__libc_init_array+0x24>
 80038bc:	4d0b      	ldr	r5, [pc, #44]	; (80038ec <__libc_init_array+0x40>)
 80038be:	4c0c      	ldr	r4, [pc, #48]	; (80038f0 <__libc_init_array+0x44>)
 80038c0:	f000 f820 	bl	8003904 <_init>
 80038c4:	1b64      	subs	r4, r4, r5
 80038c6:	10a4      	asrs	r4, r4, #2
 80038c8:	2600      	movs	r6, #0
 80038ca:	42a6      	cmp	r6, r4
 80038cc:	d105      	bne.n	80038da <__libc_init_array+0x2e>
 80038ce:	bd70      	pop	{r4, r5, r6, pc}
 80038d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d4:	4798      	blx	r3
 80038d6:	3601      	adds	r6, #1
 80038d8:	e7ee      	b.n	80038b8 <__libc_init_array+0xc>
 80038da:	f855 3b04 	ldr.w	r3, [r5], #4
 80038de:	4798      	blx	r3
 80038e0:	3601      	adds	r6, #1
 80038e2:	e7f2      	b.n	80038ca <__libc_init_array+0x1e>
 80038e4:	08003944 	.word	0x08003944
 80038e8:	08003944 	.word	0x08003944
 80038ec:	08003944 	.word	0x08003944
 80038f0:	08003948 	.word	0x08003948

080038f4 <memset>:
 80038f4:	4402      	add	r2, r0
 80038f6:	4603      	mov	r3, r0
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d100      	bne.n	80038fe <memset+0xa>
 80038fc:	4770      	bx	lr
 80038fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003902:	e7f9      	b.n	80038f8 <memset+0x4>

08003904 <_init>:
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003906:	bf00      	nop
 8003908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390a:	bc08      	pop	{r3}
 800390c:	469e      	mov	lr, r3
 800390e:	4770      	bx	lr

08003910 <_fini>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	bf00      	nop
 8003914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003916:	bc08      	pop	{r3}
 8003918:	469e      	mov	lr, r3
 800391a:	4770      	bx	lr
